
"ml_meth"
\n[GCC
tests
singleton:
"PyCodec_StreamReader()"
case
*n*
Py_CLEAR(self->args);
"python")
Py_complex;
*self
strings*
much
*tp_bases;
"PyNumber_And()"
"PYTHONTRACEMALLOC"
destroying
"package.module"
Count
releases
+----------------------------+-------------------+--------------+
"reprfunc"
"faulthandler"
PyList_Sort(PyObject
*end)
trace)
transferred
"PyCFunction_NewEx()"
Amsterdam'"
fact
"sys.last_type"
+-------------------------------------------+-----------------------------------+------------+
PyMapping_Length(PyObject
subject
3121**
slice
PyByteArray_CheckExact(PyObject
referenceable
----------
lock*
Item
involved
or-ed
thread-
N-dimensional
func)
"C"
expressions;
PyErr_SetNone(PyObject
"PyModule_GetState()"
1000
Faster
"PyPreConfig.utf8_mode"
naive
Py_STRINGIFY(x)
bear
unchanged
alternate
fitting
"_Py_RefTotal"
*PyTypeObject.tp_as_sequence
managed
*PyBool_FromLong(long
(PyInit_modulename)
knows
"PyRangeIter_Type"
(o
*PyObject_VectorcallDict(PyObject
verbose
quick
"*byteorder"
*subclass*
"PermissionError"
PyUnicode_FSConverter(PyObject
documents
Registry
LTO+PGO
"PyModule_GetNameObject()"
"_PyObject_CallMethodOneArg"
However
METH_COEXIST
"__contains__()"
ordering
"PyNumber_InPlaceMatrixMultiply()"
call.)
Thread-Local
("tp_dealloc"
Passing
Indicates
__ixor__
String
*length*)
@=
Objects
stack
("tuple")
PyModule_AddObject(PyObject
support
verify_structure(memlen
subset
"mymodule.abi3.so")
"Py_FinalizeEx()"
"type"
*((typeof(item)
(integers
*PyFile_GetLine(PyObject
Masks:**
*PyUnicode_DecodeUTF16(const
PyLongObject
"type_new()"
major
mutated
"PyMem_DEL(ptr)"
boost
"PyGC_Disable()"
(REPL)
"PyOS_snprintf()"
validity
(including
"PyObject_VarNew()"
"L"default""
dict
insert
"%u"
&PyUnicode_Type
*PyUnicode_AsUTF8AndSize(PyObject
Py_IS_TYPE(PyObject
APIs:
*PyImport_ExecCodeModuleEx(const
each
PyArg_ValidateKeywordArguments(PyObject*)
Boolean
"_Py_ForgetReference()"
*registry*
*address*
non-ASCII
"LookupError")
"__index__()"
directed
3.12:
*fd*
parameters;
PyConfig_Read(PyConfig
*N*
macros
"PyDictProxy_New()"
Many
*PyUnicode_DATA(PyObject
"PyErr_NewException()"
*PyType_GenericAlloc(PyTypeObject
"PyConfig.parse_argv"
modified
Has
Let
*args*;
redirect
|'d
Configuration
"objobjargproc"
3.7.1
*refcnt*
"_PyObject_VectorcallMethod"
Various
PyObject_Length(target);
v"
T_CHAR
PyModule_AddFunctions(PyObject
|============================================================|=========================================|
slots
too
*config)
nb_invert;
variant
warning
"_PyInterpreterFrame*"
documentation
Nothing
Latin-1
*pointer
"PyUnicode_KIND()"
*must*
"PyUnicodeDecodeError_GetEncoding()"
sizeof(MyObject)
PyMethodDef
write-only
"format"
*by
("dict")
write_bytecode
They
*offset)
values:
Not
base)
"python3
string*
risk
*NULL*;
indirectly
*step*
capture
+--------------------------------+------------------------------------------+
action
*exec-prefix*
thin
__iadd__
weakrefs
allocation
*set_sys_last_vars*
digits
viewed
238**
(e.g.
composed
Name
"PyType_FromSpecWithBases()"
so
nb_inplace_add;
"PyExc_ReferenceError"
"PyNumber_Invert()"
"PyWrapper_New()"
PyThreadState_Clear(PyThreadState
references:
"repr(o)"
"PyExc_ImportError"
AF_INET)"
consumed
"PyExc_ConnectionError"
always
**pvalue)
PyMem_Del()
"'<stdin>'"
reference
callees
"PyUnicode_DecodeUnicodeEscape()"
"PyUnicode_AsUnicodeEscapeString()"
"PyThread_acquire_lock()"
C-level
PyModule_AddIntMacro(PyObject
__next__
*def)
*PyUnicodeEncodeError_GetObject(PyObject
supersede
(of
PyObject_SetArenaAllocator(PyObjectArenaAllocator
if)
(*bytes-like
Methods:
tell
"PyNumber_Lshift()"
PyContext_Exit(PyObject
CRT
*(*PyOS_ReadlineFunctionPointer)(FILE*
(*destructor)(PyObject*)
architecture
This
*pycache_prefix
"PyExc_Exception")
"mp_subscript"
"PyModule_AddStringConstant()"
"Py_InteractiveFlag"
*obj_addr
reliable
definitions
"PyTuple_New()"
buffer-
token
map
units)
"meth.__get__(None
-
*module_api_version*
subclassing
raises
"PyLong_FromVoidPtr()"
tp_clear
"PyUnicode_Find()"
PyBufferProcs.bf_getbuffer
"{0
PyDelta_Check(PyObject
linebreak
byte-strides
"bf_releasebuffer"
MAY
"PyObject_Not()"
For
"PyFrame_GetCode()"
[*converter*
o[i]"
"PyUnicodeDecodeError_GetStart()"
hits
PyObject_CheckReadBuffer(PyObject
our
succeed
"Py_file_input"
"_PyObject_GC_TRACK()"
PyNumberMethods.nb_add
specifier
"_save
"PyCompilerFlags"*
*PyObject_Vectorcall(PyObject
""%V""
Much
random(void)
*const
"bad
type
unraisable
Valid
PyUnicode_GET_LENGTH(PyObject
PySet_Size(PyObject
Except
Mapping
Indexing
*PyImport_ImportModuleNoBlock(const
"sq_item"
invoking
normalized
recommend
PyObject_CheckBuffer(PyObject
PyMember_SetOne(char
problematic
doing
carets
"PyExc_TabError"
delegates
Layer
"PyEval_GetFuncDesc()"
PyThread_ReInitTLS()
object
programmer's
"PyImport_ExecCodeModuleEx()"
"PyOS_string_to_double()"
*PyUnicode_EncodeFSDefault(PyObject
helper
("2"):
DateTime
files:
tp_repr
mixing
tp_vectorcall;
extension
Determine
"PyCodec_Unregister()"
dump_refs
System
PyTypeObject.tp_getattro
year
("PyPreConfig_InitPythonConfig()")
Contents
child
underscores
unwind
*replstr*
"Py_Finalize()"
Windows:
"PyUnicode_FromObject()"
PyObject_IsSubclass(PyObject
PyThreadState_LeaveTracing(PyThreadState
*Py_NewRef(PyObject
types:
---------------
*PyMethod_Function(PyObject
*PyContext_New(void);
*PyGILState_GetThisThreadState()
(void*)pointer;
*defs
"PyVectorcall_Function(op)
Takes
*tp_iter(PyObject
PyRun_AnyFileEx(FILE
PyEval_ReleaseThread(PyThreadState
*(*getiterfunc)(PyObject*)
day)
unvarnished
"PyModule_Create"
Fields
using:
"PyMem_Calloc()"
streams
(char*)buf;
"PyModuleDef_Slot"
PyComplex_AsCComplex(PyObject
(*locale
optimization;
"PyFrameObject"
"PyErr_Set*"
"PyUnicode_1BYTE_KIND"
shortcut
Skip
==================================
accessed
Overrides
1);
defaults;
"PyErr_SetFromErrno()"
legacy_windows_fs_encoding
"PyUnicode_AsEncodedString()"
"PyUnicode_Type"
exclusive
Total
"PyUnicode_DecodeLatin1()"
"PyContextToken_Type"
"PyErr_Occurred()"
*PyCodec_LookupError(const
"eval()"
PyDict_SetItemString(PyObject
Compilation
*PyUnicode_AsMBCSString(PyObject
ly"
len
623**
"PyConfig.warnoptions"
days
"o[i]
num)
PyTypeObject.tp_vectorcall_offset
PyVarObject
PyRun_InteractiveOneFlags(FILE
"PyCodec_NameReplaceErrors()"
"spam"
stops
memlen
thread-related
formerly
legal
"T_OBJECT"
over-
Truth
PyUnicode_READY(PyObject
&value
*fromlist)
Slice
caches
obtained
"PyErr_SetExcFromWindowsErrWithFilenameObjects()"
(They
"len(o)"
ranging
Analogous
downcasts
expert
across
out-of-memory
"p"
"PyObject_GC_IsFinalized()"
__bool__
packed;
dictionary
PyOS_AfterFork_Child()
"PyObject_CallFunctionObjArgs()"
*PyCapsule_GetName(PyObject
"PyThread_get_thread_native_id()"
"setattrofunc"
deal
(but
hunt
10
(ABI)
descriptors)
Enable
Callers
merge
reach
"fallback"
references
"get_referents()"
*pythonpath_env
*PyStructSequence_NewType(PyStructSequence_Desc
positive
"*p"
PyArg_VaParseTupleAndKeywords(PyObject
v)
"list.append(item)"
static
"PyBuffer_GetPointer()"
Py_UNICODE_ISALNUM(Py_UCS4
("sys.modules")
just
Names
singletons
intercepting
"PyExc_BlockingIOError"
*PyMemoryView_GetContiguous(PyObject
tp_dictoffset
rv;
*tp_mro;
char]
forbidden
"Py_GetPrefix()"
PyThreadState_EnterTracing(PyThreadState
PyOS_AfterFork_Parent()
True
(failure)
t"
PyCMethod
"Py_EndInterpreter()"
product
requirement
subinterpreter
iterating
PyBytesObject
"PyLong_AsSize_t()"
"Py_TPFLAGS_SEQUENCE"
"'C'"
*object;
detector;
PyList_CheckExact(PyObject
"Py_TPFLAGS_HAVE_FINALIZE"
exception's
value)
"PyExc_EnvironmentError"
parse_argv
"PyUnicode_FromFormat()"
require
fairly
*kwnames);
[Py_complex
*data;
"K"
"print()"
"_Py_TPFLAGS_HAVE_VECTORCALL"
*PyUnicode_Join(PyObject
Platform
PyMemoryView_Check(PyObject
writable
could
completely
upper
"PyEnum_Type"
PyContextToken
components
mathematical
"LookupError"
compound
"__import__()"
PyLong_CheckExact(PyObject
updated
hardcode
o2"
id
Booleans
allocate
imports
"am_aiter"
*tp_new(PyTypeObject
"PyImport_GetModuleDict()"
tp_setattro;
shorthand
PyErr_WarnExplicit(PyObject
*stop*
"tp
"PyDict_Check()"
overhead
"void*
dividing
contexts
"PyDict_SetItem()"
selected
finder*
Allocating
PyType_Slot.slot
PyContextVar_Type
*divisor*
Async
*arg)
PyFrame_Check(PyObject
*PyBytes_AS_STRING(PyObject
Global
**ptype
"sys.settrace()"
PyPreConfig_InitIsolatedConfig(PyPreConfig
Macro
libraries
*(*getter)(PyObject
PyErr_GetExcInfo(PyObject
must
good
PyFloat_Unpack2(const
option
Executes
subsequently
(note
silence
PyBUF_RECORDS_RO
*argc*
*args
modules;
PyLong_FromLong(2L));
Both
Py_DEPRECATED(version)
Ideally
"setopencodehook"
slots;
key's
perform
hierarchy)
little-endian
*qualname)
detail
restoring
contents
PyRun_SimpleStringFlags(const
side
"PyUnicode_DecodeFSDefaultAndSize()";
confuse
*consumed)
PyUnicode_InternInPlace(PyObject
after
*m_name
On
"PyLong_AsSsize_t()"
__contains__
*annotations*
"__weaklistoffset__"
"PyConfig.platlibdir"
argument)
nb_index;
*new*
"ModuleSpec"
Background:
Py_SetPythonHome(const
"Py_DTSF_ADD_DOT_0"
conforming
"PyNumber_Multiply()"
"file=sys.stderr)");
Py_BEGIN_ALLOW_THREADS
b)"
"PyExc_ProcessLookupError"
"nb_positive"
"PyObject_SetArenaAllocator()"
nelem
*config
abstract
Legend:
superseded
"RuntimeWarning"
special
PySet_Add(PyObject
None)
item)
indication
PyOS_stricmp(const
*item;
*PyErr_NoMemory()
Py_GetArgcArgv(int
"PyUnicode_EncodeLocale()"
"PyLong_As*"
Reacquire
"PyMem_FREE(ptr)"
args
"PyList_Size()"
slot)
alias
BUFSIZ);
*PyTypeObject.tp_as_async
filled
*cls*
"VirtualFree()"
"__subclasscheck__()"
"sys.path_importer_cache"
*stop
Prior
"sys.modules"
"PyUnicode_AsUTF32String()"
"k"
Windows
precisely
*PyByteArray_AsString(PyObject
p
"PyObject_Dir()"
Accessing
(read-write
"0xC"
twice
tracks
PyLong_Check(PyObject
"'<'"
"PyLong_Check()"
reasonable
PyObject_GC_UnTrack(self);
duplicate
"PyExc_ConnectionRefusedError"
"PyMap_Type"
*given*
random
item:
cooperating
Management
allows
**buffer_length*
nor
define
"FileNotFoundError"
"tp_as_async"
PyStructSequence_InitType(PyTypeObject
"PyAsyncMethods"
aforementioned
dimensional
"suboffsets[n]
declare
*level*
"_Py_NewReference()"
"printf("%u")"
*list)
"-B"
stores
"PyGILState_GetThisThreadState()"
field"
custom
*format_spec)
directory"
Py_DECREF(PyObject
removed
pointing
ndim;
underscore
loops
means
*o*
"PyCodec_StreamWriter()"
*PyCodec_IgnoreErrors(PyObject
Resize
val
Lookup
**presult)
"PYTHONEXECUTABLE"
"__qualname__"
PyTypeObject.tp_setattr
nb_rshift;
""DLLs""
PyNumberMethods.nb_inplace_floor_divide
"-q"
ABI*:
malloc_stats
*def
generic
*Py_XNewRef(PyObject
*PyErr_SetImportErrorSubclass(PyObject
"PyThreadState"
filling
"PyList_GET_ITEM()"
PyOS_strnicmp(const
===============================
Low-level
(*objobjargproc)(PyObject*
included.It
"tp_bases"
status
"try"
read
storage;
switched
**********
itemsize
"PyNumber_Power()"
mechanism
non-NULL
arbitrarily
hosting
Update
"f_locals"
PyConfig_SetString(&config
*PyUnicode_DecodeFSDefaultAndSize(const
"sys.dont_write_bytecode"
hasn't
keyword
"PyCodec_RegisterError()"
"o.index(value)"
mapped
"(args,)"
item
*supposed*
451**
weakly
Supporting
Py_UNICODE_TOLOWER(Py_UCS4
*precision*
moment;
PyObject_LengthHint(PyObject
Replace
"argv"
"sigaction()"
"io.TextIOWrapper"
anywhere
needn't
"PyThread_tss_free()"
*start*;
"PySequence_DelItem()"
solves
preferred
"PyUnicodeTranslateError_SetEnd()"
*PyModule_Create2(PyModuleDef
Introduction
************
call
*f)
n;
"PyExc_BaseException"
restart
Hooks
*PyEval_EvalCode(PyObject
PyTypeObject.tp_del
type)-1"
Concretely
delegating
1;
(methods
value(s)
"PyLong_FromLongLong()"
PyCompilerFlags
*pyfloat)
home
o3
"float"
Even
"Py_Version"
*PyUnicode_RichCompare(PyObject
installer
uninitialized
"PyContextVar_Set()"
"PyUnicode_Decode()"
lower-case
("sys.path")
moreover
sys.path.pop(0)\n");
"Py_INCREF()"
Constructors
*****************************
PySequence_Count(PyObject
"--exec-prefix"
time**
Sentinel
Unix
away
__ior__
kwcount
stored
"PyObject_Repr()":
this
fort)
owner
binary
size_t
getattrofunc
author's
yield
**argv
[int]
effective
PyGetSetDef
Deprecated
PyCapsule
ordinal
desired
"a"
Formats
*s*
"PyGen_New()"
"'f'"
resource
Threads
delta
"PyCMethod"
None
#include
"ReferenceError"
registry's
"nb_inplace_xor"
PyTypeObject.tp_alloc
"PyErr_BadArgument()"
"PyObject_CallFunction()"
explicitly
getset
*text
*Py_GetPythonHome()
*PyObject_Type(PyObject
collected;
emulation
Py_GenericAlias
"p[N:N+S]"
"-2"
damaged
"PyPreConfig"
*order*
PySys_SetObject(const
platform-dependent
*PyTypeObject.tp_as_buffer
cause
respectively
actual
Slot
"nb_remainder"
resets
works
T_DOUBLE
"PyExc_StopIteration"
Py_TPFLAGS_READY
"PyExc_GeneratorExit"
Nonprintable
"PyFloat_GetMin()"
display
conventions
"encodings"
["tp_version_tag"]
longer
*wrapper
spec
overloaded
chapter
referred
*PyCodec_IncrementalDecoder(const
"obj.meth()":
Leading
Py_tss_NEEDS_INIT
backed
Environments
applied
Py_DECREF(obj);
defunct
1-8
"PyExc_PendingDeprecationWarning"
source
("python
handler*
What's
PyUnicodeDecodeError_SetStart(PyObject
(*inquiry)(PyObject
convention
PyGILState_Ensure()
subclass)
any
************************************
"PyModule_AddIntConstant()"
"_PyRuntime.preconfig"
(PySlice_GetIndicesEx(slice
L"/path/to/my_program");
"tp_basicsize
*m*
Topics
producer
*PyObject_CallMethodOneArg(PyObject
"PyUnicode_Format()"
existing
(res
meaningful
Py_LegacyWindowsStdioFlag
offsets
Py_IsInitialized()
rule
closes
eventually
<
(smaller
can't
*pend*
"PY_MINOR_VERSION"
exists
"Z#"
PySet_Clear(PyObject
keepend)
"p[low:high]"
matrix
"PyEval_InitThreads()"
inter-dependent
"python._pth")
skips
"datetime.datetime.fromtimestamp()"
PyStatus_Ok(void)
readable
flag:
High-level
"posonlyargcount"
Rich
compared
element
"site_import"
"PyGC_Enable()"
initialization
in-tree
untouched
"PyComplex_Type"
PyUnicode_CheckExact(PyObject
allocator)
"obj.name(arg1
constructing
PyList_GET_SIZE(PyObject
*result*
"Include/object.h"
*tp_methods;
register
layers
executed
handlers:
skip
"PyModule_Create2()"
below
PyBuffer_FromContiguous(const
("PyPreConfig.allocator")
PyMapping_DelItemString(PyObject
"<"
store
*start*
*abstract
Sends
*defining
(typically
tune
didn't
PyFunctionObject
and"
alloc(void
Microsoft
*tp_name;
combination
(read-only
alphanumeric
sizeof(size_t)"
structured
Output
"p[-2*S:-S]"
nb_inplace_multiply;
Extension
o"
"PyMem_RawCalloc(1
*PyNumber_Lshift(PyObject
*PyDict_New()
Py_TPFLAGS_TUPLE_SUBCLASS
*successful*
"PyUnicode_FromStringAndSize()"
exception.)
discussed
desirable
failure;
tp_base
"ImportError"'s
*frame*'s
"()"
"0xA"
"PyUnicodeTranslateError_GetStart()"
relative
worry
"PyExc_BaseExceptionGroup"
"tp_richcompare":
(though
"PyMem_RawFree(p)"
[double]
suppressed
implicit
latter
TLS
*************************
3.5.*
though.)
Doesn't
*PyCodec_NameReplaceErrors(PyObject
PyObject_GC_UnTrack(void
("type")
__hash__
(tb
you.)
"PyErr_Clear()"
non-IEEE
"ULONG_MAX
PyTypeObject.tp_itemsize
"PyUnicode_DATA()")
"PyErr_SetString()"
"io.FileIO"
Py_VISIT(self->args);
applying
Py_DECREF
"iternextfunc"
*max*
normal
instance;
T_ULONG
>>=
"PyFloat_GetMax()"
"closure"):
llu
"printf("%lu")"
"PyUnicode_InternImmortal()"
key
"PyPreConfig.allocator"
printed
"PyMapping_")
*tp_as_mapping;
__ne__
*PyNumber_ToBase(PyObject
"LONG_MIN"
"list[low:high]"
hack
Python":
"main"
*awaitable*
ambiguous;
principles
Py_SetPath(const
formats
terminate
******************************
warned
"LLONG_MAX"
(not
~PY_VECTORCALL_ARGUMENTS_OFFSET)
"Z"
__new__
*Py_GetPlatform()
convenient
specify
*format*
PyDescr_IsData(PyObject
precede
Imaging
Stable
numbers
runs
"-0.0"
"(size_t)-2"
(PySlice_Unpack(slice
Identifiers
Py_TPFLAGS_DICT_SUBCLASS
("float")
two
notice
(obj
"sys.getfilesystemencoding()"
&step
closure
same
3.10.*
state:
*PyCodec_Encode(PyObject
*METH_COEXIST*
(32-bit)
fd)
*low*
*traceback)
*PyNumber_InPlaceLshift(PyObject
[short
retrieved
=======================
load
matches
**must**
Before
unloading
Contrary
*PyType_FromSpec(PyType_Spec
first
today's
unpack
redirected
*indices)
creation
constants
information
begin
Normalization
PyObject_IsTrue(PyObject
locale
(*setter)(PyObject
PyDict_Check(PyObject
*mapping
*PySequence_Fast(PyObject
brace;
PyObject*;
"PyThread_delete_key()"
"frame.f_lasti"
*PyDateTime_TimeZone_UTC
port
"PyConfig.safe_path"
suboffset
wait
nb_inplace_remainder;
*PyInterpreterState_Get(void)
maximum
selects
counted
heap-allocated
"LLONG_MIN"
consistent
"PyFile_WriteObject()"
*execution
"PyUnicode_DecodeMBCSStateful()"
fill
T_STRING
"%zu"
Binary
them)
storage)
lli
*message
tp_vectorcall_offset;
"isatty(fileno(fp))"
"PyEval_GetGlobals()"
"PYMEM_DOMAIN_MEM"
forward-
(shared
alignment:
closed
bitfield
extreme
**overflow*
"Py_InitializeFromConfig()"
directly:
arrays
(*direction*
care
"x"
Newly
metatype
Thread
"'darwin'"
sentinel
PIL-style
scalar
"PyDict_Update()"
importtime"
complicated;
tp_itemsize;
"PyUnicode_READY()"
**buffer*
"rb")")
aggressively
"PyUnicode_DecodeLocaleAndSize()"
"PyLong_FromUnsignedLongLong()"
actually
"wide"
writing
wchar_t*)
&=
"type.__call__"
*PyTypeObject.tp_members
Py_UNICODE_ISNUMERIC(Py_UCS4
*tp_as_async;
"list"
pycs
less
"PyBuffer_ToContiguous()"
hex
*linetable
1.5
"sys.argv"
multiplying
3.3
*optimize*
*tp_as_buffer;
specific
Tuple
Unbound
---------------------------------
(":"
So
both
PyErr_Restore(PyObject
zero-terminated
"PyBytes_DecodeEscape()"
"narrow"
"return
*callable*
"+o"
PyObject_Free(void
"run_module"
"O|O:ref"
value:
variable-size
requires
PyTypeObject.tp_call
"PyExc_UnboundLocalError"
"PYTHON*"
__ifloordiv
""1e500""
trailing
"PyObject_AsCharBuffer()"
PyNumberMethods.nb_inplace_multiply
react
PyBUF_ND
&callback))
"Py_"
variants
decompose
(filename
*PyFunction_NewWithQualName(PyObject
protocol
"PyTraceBack_Here()"
excepting
returns
Indeed
By
"__builtin_unreachable()"
representable
determine
package)
*u
"'/usr/local'"
Regardless
trace
however
"PyListIter_Type"
*PyEval_GetFuncDesc(PyObject
empty)
*PySequence_InPlaceRepeat(PyObject
rarely
purposes
status)
enough
"tp_getattro":
Py_UnbufferedStdioFlag
level
Py_InitializeFromConfig(const
fit
itemsize"
Bits
although
application)
"PyUnicode_FromOrdinal()"
string;
PyEval_RestoreThread(PyThreadState
""%llu""
don't
"NULL"
PyComplex_CheckExact(PyObject
*PyUnicodeDecodeError_GetEncoding(PyObject
"':'"
MSVC
invalid
__setattr__
Most
"Py_BLOCK_THREADS"
Added
provisional:
*PySequence_Fast_GET_ITEM(PyObject
attribute
descriptors
"Py_RETURN_NONE")
initialization"
"configure_c_stdio"
tp_descr_set(PyObject
unmarshalling
unique
PyRun_AnyFileExFlags(FILE
"PyThread_acquire_lock_timed()"
*PyUnicode_AsEncodedString(PyObject
PySys_AddWarnOption(const
caller's
ultimately
zone
Info
declarations
advised
"Py_PreInitializeFromArgs()"
*am_aiter(PyObject
levels
*PyImport_ImportModuleEx(const
"0x03020000"
"__traceback__"
"o.attr_name
"PyObject_New()"
single-phase
operation)
*PyTuple_New(Py_ssize_t
non-integers
*sep*
(although
owned:
*PyType_GetName(PyTypeObject
*(*initfunc)(void))
regularly
shares
x
is)
orig_argv
Line
"snprintf()"
sys
writers
PyMem_Del(buf3);
"SourceFileLoader"
PyGILState_Release(gstate);
falls
adapted
"cf_flags"
destruction
tp_dealloc(PyObject
626
[const
Leaving
provides
"release"
UTF-16
needs
"nb_float"
Instances
finalizers
conceivably
efficiency
lvalue
suitable
USE_STACKCHECK
deals
*u*)
_PyBytes_Resize(PyObject
"PyObject
*PyUnicodeDecodeError_GetObject(PyObject
malloc(void
objects;
function"
*sq_contains*
indexing
*locale
partly
Fatal
Return
objects:
module")
handled
database
"xoptions"
brand
*PyThreadState_Get()
"PyObject_GC_New()"
"PyExc_IndentationError"
_Py_InitializeMain(void)
*strides*
solely
nb_multiply;
preference
PyObject_CopyData(PyObject
signals
PyFloatObject
themselves
method
*PyLong_FromVoidPtr(void
"PyNumber_InPlacePower()"
turn
"orig_argv"
"'utf-8'"
"errno"
"
worse
*frame
"PyInterpreterState"
"PyCallable_Check()"
*cell*
like:
invalidation
PySet_GET_SIZE(PyObject
were
(alas)
radix
PySys_AddXOption(const
instantiable
"PyObject_GetIter()")
needed---or
"Py_GetProgramName()"
op)
imag)
Move
continue
"PyOS_FSPath()"
_Py_InitializeMain();
surrounded
involving
Making
creates
Files
Py_TPFLAGS_SEQUENCE
*run_module
"contextvars.Context"
registering
"printf("%llu")"
*PyUnicode_FromEncodedObject(PyObject
*path-like
*exception*
"PyExc_SyntaxWarning"
thread-state
*PyTimeZone_FromOffsetAndName(PyDateTime_DeltaType
permit
possible;
*PyImport_GetImporter(PyObject
(PyInterpreterState*)
know
*converter*
"staticmethod()"
accepts
*tb)
tuple
notable
PyNumberMethods.nb_multiply
Complex
"PyException_SetCause()"
"PyTypeObject.tp_flags"
execute
**************
size"
"Py_BytesWarningFlag"
"UnboundLocalError"
127
PyObject_AsCharBuffer(PyObject
"symtable"
Otherwise
"<assert.h>"
tracemalloc=N"
PyTypeObject.tp_iternext
fold
starting
boolean
nb_inplace_or;
*PyUnicodeDecodeError_Create(const
in-
visited
"PyCodec_StrictErrors()"
met:
lookup
unpacked
31
ownership
unlikely
entirely
*doc
Defining
"Python.h")
reachable
528**
conversion
day
(*objobjproc)(PyObject*
*seq2*
by
*tp_call*
Py_GETENV(s)
belongs
find
PyBaseObject_Type.tp_richcompare
Suspend
"UnicodeError"
instances:
bpo-33720)
(a
protecting
"WITH_NEXT_FRAMEWORK"
obj);
"PyEval_RestoreThread(_save);
isolates
PyOS_getsig(int
+---------------------------+---------------------------+----------------------------+
*Py_NotImplemented
"PyUnicode_DecodeCharmap()"
takes
"PY_MAJOR_VERSION"
"Py_SIZE()"
"es"
"Py_GE"
*Py_GetVersion()
0)
*context
=====================
"__args__"
"PyCapsule_Type"
(*hashfunc)(PyObject*)
performance
"PyUnicode_DecodeCodePageStateful()"
Cyclic
PyCallIter_Check(op)
time
doesn't
3.11
"sys.warnoptions"
"PyObject_Repr()"
"<limits.h>"
"'A'"
==
.tp_basicsize
*PyDateTime_TIME_GET_TZINFO(PyDateTime_Time
*key
char
copy_null)
"Py_PRINT_RAW";
PyObject_Malloc
"sys.last_value"
mode:
PyNumberMethods.nb_positive
objobjargproc
*in-place*
"PyObject.ob_type"
"PyUnicodeDecodeError_Create()"
"PyExc_ArithmeticError"
Sparc
"PyCodec_Decode()"
*globals
wants
future
access)
PyTypeObject.tp_descr_get
(PyDict_Next(self->dict
"PySequence_List()"
"PyExc_OverflowError"
Unused
(causing
"Py_XINCREF()"
*iterator*
"PySys_FormatStdout()"
"PyComplex_FromDoubles()"
"u#"
*PyNumber_InPlaceSubtract(PyObject
nb_remainder;
PyTZInfo_CheckExact(PyObject
*1*
"double")
(*)(int)
*u)
"USE_STACKCHECK"
"PyNumber_InPlaceXor()"
links
interpret
obtaining
microseconds
*object)
PyObject_SetAttr(PyObject
PyMem_Free()
PyLong_AsUnsignedLongMask(PyObject
Byte
*PyTypeObject.tp_name
Py_tss_t
PyNumberMethods.nb_inplace_lshift
*func*s
*_save;
Save
occur;
Overriding
attempts
PySequenceMethods.sq_ass_item
*version*
"PyMem_Malloc(1)"
o2)"
(error
long
"product(shape)
compiler's
smarter
Py_FdIsInteractive(FILE
"PyType_ClearCache()"
"obj"
wrap
ignored
Assume
"PyBaseObject_Type"
Py_TYPE(self);
"p+3"
"/"
opens
distributed
"complex"
Programmer's
PyMem_Free(buf);
Bugs
*buf2
occurs
*PyObject_CallNoArgs(PyObject
Py_ReprLeave(PyObject
causes
PyFloat_GetMax()
specifies
calls
"Py_GetArgcArgv()"
PyTypeObject
PyType_Type
design
Raises
PyMem_Free(void
"PyFrame_GetLineNumber()"
priority)
An
*reason*
illegal
mysterious
TYPE*
*filenameObject2)
PyThread_delete_key(int
"PyModuleDef_Type"
*le*
violation
defaults.)
3.6.1:
"PyUnicode_AsDecodedObject()"
examples
others
"tp_dict"
permitted
value's
"Py_Initialize()")
code
correct
"sys.stdout"
PyIndex_Check(PyObject
"PyMemberDef"
populated
Sub-interpreters
"y"
practice
implement
PyProperty_Type
"strides[n]
*PyEval_SaveThread()
disambiguate
"obj.meth"
discards
"PyArg_ValidateKeywordArguments()"
platforms
PyModule_Check(PyObject
*functions)
ABI.*
29-32
common
encounters
"PyCodec_Encoder()"
"PyErr_NoMemory()"
"FloatingPointError"
early
mask
*message*
*num*
"nb_inplace_multiply"
compression
PyBUF_INDIRECT
"Mem"
since
not)
*args*
PyFunction_SetClosure(PyObject
wchar_t
Android
re-imported
("I")
"bytes(o)"
PyMem_GetAllocator(PyMemAllocatorDomain
*PyErr_NewException(const
PyDateTime_TIME_GET_MICROSECOND(PyDateTime_Time
concatenated
"PyExc_Exception";
dividend
%=
Any
retrieve
stacksize
mark
__add__
*pymalloc*
"Warning"
conversions:
solution
999999999
encoding*)
"mbcs"
"PyByteArray_Size()"
**buffer
"tp_getattr"
Py_TPFLAGS_DEFAULT
error_pos
**not**
conforms
arguments;
/*
Concatenated
pressing
type's
Define
iterator*
endorsed
*PyMethod_New(PyObject
"u"
Heap-Allocated
Py_CLEAR(self->key);
"PyObject_Malloc(n)";
identify
zi
almost
"args[0]"
"PySys_AddXOption()"
Like
"Py_tracefunc"
simply
*pointer)
PyObject*
accepted
PyCFunctionWithKeywords
""%S""
Important
(*initproc)(PyObject*
PyInterpreterState
around
"MemoryError"
PyObject_Print(PyObject
reinstall
checks
*PyObject_NewVar(TYPE
*PyType_FromModuleAndSpec(PyObject
"PATH"
ANSI
"256"
stack_level
"'r'"
has
PyErr_ResourceWarning(PyObject
incr_item(dict
"__add__()")
Advanced
initializing
"Py_IncRef()"
65536;
PyModuleDef_Base
hashed
"match"
official
mechanism)
"Py_mod_create"
follows:
Scope
HKEY_CURRENT_USER
*slice*
tp_str;
unambiguously
*PyStructSequence_New(PyTypeObject
programmer
method"
responsibilities
PyErr_Restore(error_type
instructions
"vsnprintf()"
*i*
failing
"Py_BuildValue()"
meaningless
"Py_FileSystemDefaultEncoding"
float
"PyImport_ImportModuleNoBlock()"
booleans
*start_column
omitted
"PyThread_create_key()"
*ptr
coercion
GC
_Py_c_prod(Py_complex
"Makefile"
acquire
borrowing
"printf("%x")"
address);
cyclic
PyObject_VAR_HEAD
3.1
PyThreadState_Delete(PyThreadState
("str")
"None"
*s)
written
*view
Py_TPFLAGS_HAVE_VECTORCALL
unsupported
interprets
"_PyVectorcall_Function"
**you
PyUnicodeEncodeError_SetEnd(PyObject
domain,the
running
"Py_Initialize()"
*PyCode_GetCode(PyCodeObject
above)
catch
idle
Keep
*len*
specifying
*PyThread_tss_alloc()
quickly
__await__
storing
"PyByteArrayIter_Type"
PyTypeObject;
mutate
{
"tp_methods"
PyType_Ready
*cause*
Array
effectively
PyList_Type
non-collectible
*PyMem_Realloc(void
"PATH".)
vary
PyMem_RawMalloc
"PyCMethod_New()"
PyThreadState_SetAsyncExc(unsigned
"format(obj)"
locks
real
"nb_reserved"
PyCapsule_SetContext(PyObject
preventive
*frame*
"PyUnicode_GetSize()"
suffix
"b"
MyStr;
"PyDoc_STRVAR"
"None");
malloc()
"PyModule_GetFilenameObject()"
<<
*PyUnicode_Splitlines(PyObject
PyTraceMalloc_Track(unsigned
called;
__iand__
parse
circular
*PyBytes_FromFormatV(const
"async"
pick
2008
Py_RunMain()
"PyList_AsTuple()"
decoder
handlers
evaluate
("p[i:j]"
Methods
Matching:
"o[i1:i2]
flags
-------------------
order
recursion:
error:
23
With
Number
preinitialized
low-level
cloning
stands
__and__
T_LONGLONG
PyNumberMethods.nb_inplace_remainder
enable
PyContext_CheckExact(PyObject
***********
"s*"
*PyModule_GetName(PyObject
*PyNumber_Positive(PyObject
customize
imply
safe:
"Py_GetPythonHome()"
PyDict_Clear(PyObject
shutdown
"PyExc_UnicodeDecodeError"
*PyThreadState_New(PyInterpreterState
"ImportError"
Implementations
"__cached__"
data)
insertion
|=====================|================================|========================================|
comparison
Intel
+-------------+--------------------+-------------------------------------------+
(*freefunc)(void*)
"Tools/freeze/"
"types.FrameType"
2.0
"f_trace_lines"
*cellvars
"PyException_GetTraceback()"
tools
dictates
__getattribute__
*kwds)
therefore
invokes
user's
introduce
elements;
"sys.base_prefix"
+-------------------------------------+---------+-----------+--------------+----------+
PyObject_HEAD
SunOS
PyOS_CheckStack()
"PyErr_PrintEx(1)"
executable;
"abort()"
*borrowed*
"PyBytesObject"
itself
creating
Python)
*set)
"PyStructSequence_SetItem()"
"sys.copyright"
type;
PyDoc_STRVAR(pop_doc
PyCell_Check(ob)
Store
in;
UCS1
"Misc/SpecialBuilds.txt"
"PyObject_GC_Del()"
{NULL}
here;
"PySeqIter_Type"
"PyMemberDescr_Type"
"PyErr_SetFromWindowsErr()"
safe_path
closeit)
PyMem_New
*-1*
tempted
"__new__()"
(included)
"meth.__get__(obj
module_search_paths_set
understand
PySet_CheckExact(PyObject
decides
"Py_TPFLAGS_HAVE_STACKLESS_EXTENSION"
PyErr_BadArgument()
[-128
__str__
"PyExceptionClass_Name()"
*PyObject_CallFunctionObjArgs(PyObject
"#!cmd"
(zero)
NULL}
(forgetting
"PyBytes_Size()"
Either
repeatedly
"PyUnicode_AppendAndDel()"
*ex*
allocating
*str)
*newpart)
exclusively
use
"PyComplexObject"
stole
"PyConfig.isolated"
old-style
"PyBool_Type"
unreachable
"PyExc_PermissionError"
"Py_GetExecPrefix()"
"tracemalloc";
how_many)
*descr*
"PyCFunction_GetSelf()"
PyCodec_KnownEncoding(const
0xDBFF")
people
.tp_weaklistoffset
Ownership
"PyBytes_AsString()"
symlinks
"2":
PyStatus_Error(const
*PyUnicode_AsUCS4(PyObject
categories
tp_richcompare
"__getitem__()"
"overflow_exception"
"PyObject_VectorcallMethod()"
party
fixed
unsafe
typed
requested
override):
following:
unencodable
library:
hooks
"TabError"
**on
"PySequence_InPlaceRepeat()"
encoding*:
peculiarities
PyFloat_CheckExact(PyObject
PyMarshal_WriteLongToFile(long
parameters
"strcmp()"
avoid
platform-independent
PyFloat_Unpack8(const
PyCallable_Check(PyObject
"list[low:high]
Access
"PyNumber_Index()"
("PyPreConfig")
"PyMapping_SetItemString()"
excellent
(<0
nb_inplace_floor_divide;
fork()
unrecognized
__init__
four
*va*
*s1
matching
compiled
object's
Py_TPFLAGS_UNICODE_SUBCLASS
functions:
inherits
Py_TPFLAGS_HEAPTYPE
local_finalize(PyObject
keep
"warnings.warn_explicit()";
*callback)
PyUnicode_FromString("three"));
PyDict_Contains(PyObject
PyUnicodeTranslateError_SetStart(PyObject
final
presumably
fail
Drop
UTF-8
Examples
"PyType_GetName()"
"datetime.h"
Visual
identical
__dict__
"nb_inplace_and"
"PyEval_GetLocals()"
Py_XDECREF(item);
control
reset
macro)
<<=
held
observed
software
intermediate
debug
over
malloc(BUFSIZ);
*PyNumber_FloorDivide(PyObject
3.11:
*pos*
_Py_c_diff(Py_complex
memoryview
"Py_RunMain()"
"PyUnicode_Tailmatch()"
v
interrupted
compare
Of
bitmask
assume
(Unfortunately
docstring
listed
isolated
"ob_refcnt"
"sys.path_hooks"
FILE*
PyBUF_CONTIG
"PyUnicodeObject"
^
according
Definition
*PyUnicode_Concat(PyObject
false)
&error_value
"PyNumber_InPlaceRemainder()"
"tp_setattro":
m_traverse
problem
enabled
unconditionally.)
"PyDict_Contains()"
"PYTHONSAFEPATH"
calculates
(inquiry)myobj_clear
stated
offsetof(Spam_object
"0xDD"
ending
it.)
*PyFunction_GetGlobals(PyObject
disregards
ptr
parameter
PyStatus
DECREF'ed)
*iter*
Ellipsis
"PyUnicode_DecodeUTF32()"
*ptr)"
*PyObject_Malloc(size_t
automatically
"__float__()"
"PyDict_Items()"
"PyExc_Exception"
3.6
"0xFD"
Register
strides[n-1];
"PyDictItems_Type"
PyType_IsSubtype(PyTypeObject
"PyUnicode_KIND()")
raw;
PyThread_tss_free(Py_tss_t
"am_await"
non-"NULL";
""P.Q.M.T""
PyConfig_InitPythonConfig(&config);
Randomized
"PyStructSequence_GetItem()"
"PyModule_GetDict()"
reads
n-dimensional
n
big-
OS-level
*PyDescr_NewGetSet(PyTypeObject
portable
&key
"PyObject_Type()"
definition
PyDict_MergeFromSeq2(a
getattrfunc
"bound
area
PyCellObject
"Core"
Re-export:
"getattrfunc"
*PyTime_FromTimeAndFold(int
**<>**:
check
terminator)
int64_t
*PyObject_New(TYPE
-999999999
"PyMapping_HasKey()"
*bases*
*PyType_Ready*
"write_bytecode"
Structures)
"o
hidden
subscripting
tp_free(void
"sys.exc_info()";
PyUnicodeEncodeError_SetStart(PyObject
x):
"PyObject_Calloc(1
*sentinel)
"tp_as_mapping"
expected
"PyExc_ModuleNotFoundError"
"<string.h>"
retrieval
PyObject_Not(PyObject
|============================|===================|==============|
"io.open()"
Concat
Py_buffer*)
"PyBuffer_SizeFromFormat()"
"types.GenericAlias"
goes
("O_BINARY")
"imp.source_from_cache()"
per
Pointer
"[...]"
inputs:
"PY_VECTORCALL_ARGUMENTS_OFFSET"
"_PyObject_CallOneArg"
Error
scope
"--check-hash-based-pycs"
*string*
PyNumberMethods.nb_xor
PySetObject
*i1*
[]
Custom
*PyIter_Next(PyObject
preserve
preinitialize
During
"%c"
"PYGEN_NEXT"
fundamentally
*cause)
tab
PyBytes_AsStringAndSize(PyObject
(ignoring
parameters:
"PySequence_Repeat()"
proper
sys.stderr
"get"
(depending
beyond
*overflow)
unhandled
allocations
Track
e.g.:
structures
==================================================
"0x030401a2"
*value;
shape
reports
"%A"
methods
"descrgetfunc"
"'g'"
"strerror()")
auto-thread-
platform
Doing
unspecified
Substituting
("EOFError"
"PyNumber_InPlaceTrueDivide()"
Foo_Type.ob_type
"ConnectionRefusedError"
PyObject_DelItem(PyObject
Its
one-argument
tp_dict
*)
something
"PyObject_Malloc()")
"P"
"PyThread_tss_set()"
"calloc(1
module;
"PYTHONCOERCECLOCALE"
*given
[PyBytesObject
own
"PyEval_SaveThread()"
down
*home
*kwds);
representing
stdin
ml_meth
(usually
...Do
identifies
*PyContext_New(void)
quiet
METH_NOARGS
"PyCompilerFlags
*ml_doc
nitems)"
"4"
"new"
"str()"
treat
Need
registration
character-based
PyTypeObject.tp_vectorcall
installed
on
PyFunction_Type
"nb_invert"
PyCoroObject
*allocator)
"types.MethodType"
PyUnicode_GetLength(PyObject
*PyInterpreterState_New()
Formerly
"PyByteArray_AsString()"
sizes
drastically
symbols
"PyConfig.program_name"
int]
lower
Out
Py_GetArgcArgv()
high)
"member"
really
PySeqIter_Type
"size_t"
*capsule*
*PyLong_FromSize_t(size_t
corresponds
expensive
"PyModule_*"
site_import
bytes"
*run_filename
resize
Printing
accordingly
exits
&PyType_Type;
try
performs
Write
freed
"PyBuffer_FillContiguousStrides()"
held)
"PyCodec_Encode()"
stack_level)
equals
preconfiguration
save
"*prefix*/include/pythonversion/"
"PyConfig"
UCS2
typedefs
"nb_matrix_multiply"
"%li"
bool
*buflen*
process-
"PyList_Type"
setattrofunc
"__file__"
***************
exception)
"tp_flags"
navigate
"family
automate
*PyUnicode_2BYTE_DATA(PyObject
structures:
_Py_c_sum(Py_complex
(Unix
PyBool_Check(PyObject
*PyMem_Malloc(size_t
"AsyncIterable"
ready
loader
PyComplexObject
preallocation
cf_feature_version
*globals)
Returns:
"PyType_IsSubtype()"
"PYTHONLEGACYWINDOWSFSENCODING"
container
"op"
*sequence)
"PyObject_SelfIter()"
back
encoding)
Classes
prompt
"char*"
inform
__mod__
"PyGILState_Release()"
Ignore
boundary;
Querying
PyDateTime_DATE_GET_MINUTE(PyDateTime_DateTime
critical
"PyBytes_FromObject()"
than
*Py_GetPrefix()
defined)
PYMEM_DOMAIN_OBJ
multi-threaded
Descriptor
magic
&callback)
*PyNumber_InPlaceOr(PyObject
PyContextToken_CheckExact(PyObject
PyContext
footprint
*tb*
*value
demand
that's
(per
"UnicodeWarning"
called
refuse
*PyFunction_GetAnnotations(PyObject
*op)
equally
processor
"PyUnicode_RSplit()"
int)
*ctx*
**This
simplicity
"len(o)
**exc
Utilities:
*col_offset*
["Py_ssize_t"]
"Py_IsTrue()"
===================
incomplete
slicelength
"f_globals"
further
recursively
"os.fork()"
"Remove
"tp_compare"
"str
"printf("%d")"
size)"
identifier
constant
allowed
kwonlyargcount
asked
256
Py_PreInitialize(const
objects)
work;
PyGen_Type
desire
covers
Writing
*PyFloat_FromDouble(double
matched
(TLS)
zero;
*bytearray
"PySequenceMethods.sq_length"
"rv
*o1
tp_setattr;
[PyByteArrayObject
head
"PyModule_ExecDef"
**<R>**
PyCell_Type
32-bit
sizeof(MyStr)
"PyUnicode_AsLatin1String()"
path;
"c"
initialize
having
cycle
*heap
"Py_UNREACHABLE()"
arriving
"0xFFFE"
(C-style
patterns
encode
"configure
"NotImplementedError"
coerce_c_locale_warn
doubt
Domains
*Py_EnterRecursiveCall*
"bf_getbuffer"
"SyntaxWarning"
enabler
tp_descr_set;
information)
corruption
Instead
PyTypeObject.tp_weaklistoffset
"PyMemAllocator"
thread;
"isolated"
*name;
parents
*a
*key)
realloc-
missing
*PyMemoryView_GET_BUFFER(PyObject
loadable
Test
offset+imax+itemsize
PyUnicode_MAX_CHAR_VALUE(PyObject
machinery
"importlib"
dict/"NULL"
"shape[n]
few
heap-
resizable
applicable
.tp_richcompare
general
what
"final"
"ArithmeticError"
PyEval_RestoreThread(_save);
e.g
"PyObject_GC_NewVar()"
"[GCC
formatter
"__getattribute__()"
PyTrace_RETURN
separated
len"
(py3k:63103M
"PyNumber_InPlaceRshift()"
interpretation
fall
specialized
yet:
Characters
"operator.length_hint(o
"PyType_HasFeature()"
--------------
*DBL_MAX*
"PyExc_IOError"
**"O"**:
Dictionary
*PyModule_GetFilename(PyObject
PyModule_AddStringConstant(PyObject
Counting
tp_hash;
PyMappingMethods
fold)
recognizable
tp_getset
*kwdict)
unsigned
Base
segmentation
"PyTuple_GetSlice()"
fields:
PyNumberMethods.nb_int
Thus
import_time
**********************
("PyConfig.run_command")
PyTrace_OPCODE
539**)
"PyModuleDef_Init()"
Execute
"__parameters__"
*PyUnicode_DecodeUTF32(const
manipulation
"tp_as_sequence"
"PyThread_release_lock()"
Py_DontWriteBytecodeFlag
rules
"value
feature
*PyMemoryView_GET_BASE(PyObject
523**
_Py_NoneStruct
3151**
("tp_getattr")
"PyObject_HasAttr()"
432**
"PY_SSIZE_T_MIN"
startup:
*PyUnicode_Format(PyObject
*stdout
significant
"gc"
__subclasses__
PyFile_WriteObject(PyObject
arbitrary
contrary
reject
searching
watch
copy;
"PyUnicode_DecodeASCII()"
U
unbuffered
PySequence_DelSlice(PyObject
"z"
*s2
Non-Python
speaks
iterator
"contextvars"
"PyConfig.program_name")
(only
exceptional
references;
done
_inittab
PyRun_InteractiveLoopFlags(FILE
contain
Py_XDECREF(obj);
displayed
optimization
"PyList_SetSlice()"
INF
Parse
"PyUnicodeEncodeError_GetReason()"
"N"
hashfunc
non-main
PyObject_GetBuffer(PyObject
PyTuple_Type
profiler
"PyUnicode_DecodeFSDefaultAndSize()"
yourself
divisible
"PyCapsule_Get()")
import"
Py_Initialize();
Availability:
supplied
convert
"PyObject_HEAD"
(sub-)interpreters
__or__
characters/undecodable
"sys.modules")
*Py_DecodeLocale(const
"Py_DTST_NAN"
"PYTHONNOUSERSITE"
recompilation
PyUnicodeObject
"PyMem_RESIZE(ptr
not
"os.PathLike"
writers)
*newline
("sys.getfilesystemencoding()")
"PyBytesIter_Type"
METH_KEYWORDS"
"PyConfig.home"
"sys.getfilesystemencodeerrors()"
intended
accompanied
PyObject_GC_Track(PyObject
(such
highly
types;
locking
accidental
"Py_LIMITED_API"
provide
utf8_mode
"__new__"
method's
*string
revisions
Specification
Each
"os.register_at_fork()"
am_await;
*ierr*
bumpserialno()
happened."
places
"LONG_MAX"
"PyUnicode_FromString(key)"
_PyTuple_Resize(PyObject
*Stealing
Set
"PyErr_WarnExplicitObject()"
elsewhere
__truediv__
made
notifications
"PyOS_AfterFork_Parent()"
returning
"PYTHONDEVMODE"
E.g
little
|====================================================|=========================================|
manager
showing
likely
"PyUnicode_AsWideCharString()"
Py_TPFLAGS_TYPE_SUBCLASS
protocols
"p[N+S:N+2*S]"
PyBytes_CheckExact(PyObject
numeric
pointer
Allocator
let
"PyObject_CallMethodNoArgs()"
"__dictoffset__"
"object"
Py_FatalError(const
lineno
had
"NotADirectoryError"
comparisons
without
"PyCapsule_CheckExact()"
"-4"
"PySequence_Check()"
filters
PyErr_CheckSignals()
Value
(for
Variables
"python3.dll"
"PYTHONVERBOSE"
routine
PySequence_Check(PyObject
Run
"Py_ssize_t"
treating
*reference
info
*module
PyCoro_CheckExact(PyObject
*PyUnicode_DecodeMBCSStateful(const
"co_filename"
PyErr_Print()
.tp_alloc
evaluating
*PyUnicode_AsUTF16String(PyObject
strings)
ndims
"PyExc_ValueError"
"PyImport_ImportFrozenModuleObject()"
"PyStructSequence_Field"
Py_SIZE(PyVarObject
use_hash_seed
variables
backwards
third
(!PyErr_ExceptionMatches(PyExc_KeyError))
"PyExc_InterruptedError"
*error_pos)
PY_MINOR_VERSION
PyMarshal_WriteObjectToFile(PyObject
PyOS_sighandler_t
"PyErr_Display()"
"descriptor
578**
restored
Is
"local_traverse()"
*class
(*setattrfunc)(PyObject
message)"
"UnicodeTranslateError"
raise
Programs
----------------------------------
covered
NULL}"
*PyUnicodeEncodeError_GetReason(PyObject
PyUnicode_KIND(PyObject
"ConnectionResetError"
"sys.platlibdir"
Py_REFCNT(PyObject
properly
"PyErr_SetNone()"
PyDateTime_TIME_GET_FOLD(PyDateTime_Time
MyObject;
Buffer
instant
"PyUnicode_DecodeUTF16()"
"slice"
"PyObject_ClearWeakRefs()"
"ConnectionError"
"PySys_AddWarnOption()"
(exception:
start)
global
"PYTHONOPTIMIZE"
"Py_TPFLAGS_DISALLOW_INSTANTIATION"
"sys.unraisablehook()"
PyErr_SetInterruptEx(int
PyRun_SimpleString(const
(without
Extending
deque_methods[]
"nb_multiply"
underscore:
breakpoint
caught*
*PyInterpreterState_ThreadHead(PyInterpreterState
Here's
"nb_power"
as-is
|============================================|===================================|============|
"'F'")
*borrowed
would
Non-Unix
*anyset*
Py_DEPRECATED(3.8)
PyErr_Fetch(&error_type
*PyMem_RawMalloc(size_t
ways
*((char**)pointer)
*PyTime_FromTime(int
"PyUnicode_AsWideChar()"
leading
chance
*PyCFunctionWithKeywords(PyObject
_Py_InitializeMain'
statically
smaller
*PyObject_GC_New(TYPE
prefixed
Py_UNICODE_TONUMERIC(Py_UCS4
(Python
"%f"
offsetof(MyObject
*PyMem_Calloc(size_t
============
*PyObject_GetAIter(PyObject
override)
("PyConfig.run_module")
PyNumberMethods.nb_inplace_add
"PyUnicode_WRITE()"
"PyOS_BeforeFork()"
value
old
*Py_True
visit
pysqlite_row_methods[]
files
Buffers
**start*
accept
*GIL*
Override
"PyObject_DelAttrString()"
tree"
"prefix"
METH_CLASS
8)
"PyThreadState_LeaveTracing()"
available
PyObject_DelAttrString(PyObject
*nb_reserved;
+---------------------------------+----------------------+--------------------+-----------------------+----------------------+
Compare
---------------------
*PyUnicode_Translate(PyObject
*ptype)
PyUnicode_FindChar(PyObject
2-byte
PyUnicode
Always
*rv*
"LC_CTYPE"
site
DLL
still
unexpected
[1]
*format_spec*
low)
List
*PyCoro_New(PyFrameObject
PyObject_HEAD_INIT(type)
"PyErr_SetFromErrnoWithFilename()"
"PyObject_Length()"
kinds
released
X
mutable
"len(anyset)"
*PyImport_GetMagicTag()
"PyExc_IsADirectoryError"
impact
"datetime.timedelta"
"PyCode_New"
"PyType_FromModuleAndSpec(NULL
respect
PyWideStringList
"SoftwarePythonPythonCoreX.YPythonPath"
domains
Handle
near
PyUnicodeEncodeError_SetReason(PyObject
referenced
handles
three
"Py_ALWAYS_INLINE"
"PyThread_exit_thread()"
"+"
PyByteArrayObject
PyNumberMethods.nb_float
"PyRun_FileExFlags()"
distinct
"PyByteArray_Type"
PyAsyncMethods;
getting
effect;
"METH_FASTCALL"
"0xCD"
"tp_free"
Strong
PyModule_SetDocString(PyObject
PySequenceMethods.sq_contains
strictly
quotient
void
"buffered_stdio"
Dynamically
"PyModule_ExecDef()"
"__call__"
"PyNumber_FloorDivide()"
"sys.exception()"
validation
*obj)
"Py_tss_NEEDS_INIT"
"PyProperty_Type"
format_spec)"
descrsetfunc
"L"always"":
"*exec_prefix*/include/pythonversion/"
*PyCell_New(PyObject
maxcount)
integers
under-
"--with-pydebug"
*path*
3.1.3
Extract
Useful
NULL
"pow()"
lives
touch
("os.fsdecode()")
provisional
**PySequence_Fast_ITEMS(PyObject
*asynchronous
*size)
"PyArg_ParseTuple()":
checks:
loaded.)
"Py_HUGE_VAL"
PyLong_AsUnsignedLongLongMask(PyObject
compatibility)
derives
spam_type_members[]
"PyCodec_IncrementalDecoder()"
Arena
=======
Py_UCS4
*PyImport_ExecCodeModuleObject(PyObject
"PyNumberMethods"
status;
"signal()"
Py_ssize_t
byte-oriented
"SystemExit"
"PySequence_Concat()"
"ULLONG_MAX
-1;
steer
Options
"PyType_Slot":
2.1
thread's
(PyObject
"self->key"
Previously
PyCodeObject
optimizer
*errors
*all*
"PyDictRevIterItem_Type"
PyMemberDef)
slots)
doc
started
PyErr_SetInterrupt()
*code;
file)
Resume
placed
*initsigs*
"nb_negative"
expose
replaced;
*base*
"PyUnicode_AsUTF8AndSize()"
"TimeoutError"
hashing
Descriptors
ASCII
estimate
*PyType_GetSlot(PyTypeObject
greater
introspection
"-O"
closer
=
**"I"**:
*PyModule_GetDef(PyObject
"PyException_SetContext()"
"key
prior
sys;
*base_prefix
*seq*
Py_PreInitializeFromArgs(const
okay
"PySlice_Unpack()"
encoding/decoding
task
*frame)
anything
need
'&'
_Py_c_quot(Py_complex
PySequence_Contains(PyObject
efficient
"PyUnicode_InternFromString()"
*do*
HKEY_LOCAL_MACHINE
attention
"ssizessizeargfunc"
controls
"_PyObject_FastCallDict"
PyFloat_AsDouble(PyObject
*shape
"PyErr_BadInternalCall()"
Allow
ob_type
*compile*
m_base
"PYMEM_DOMAIN_RAW"
underflow)
long]
administrators
*PyUnicode_DecodeCharmap(const
defaults
*arg);
538**)
"getter"
replace
"free()"
config._init_main
*(*vectorcallfunc)(PyObject
"PyObject_GetBuffer()"
*PyRun_File(FILE
T_SHORT
finalizes
**Bit
*buffer
*PyEval_GetFrame(void)
site-packages
evaluated
gets
addition
embed
"Py_TPFLAGS_IMMUTABLETYPE"
"PyBaseObject_Type()"
"throw()"
efficiently
"args[-1]"
add_spam(PyObject
Fortran
"Py_PreInitialize()"
*]
OS
"dict.setdefault()"
innocent-looking
(Violating
"endptr"
C:
bytecode
PyDict_Update(PyObject
*PyUnicode_1BYTE_DATA(PyObject
"PyErr_SetObject(type
stderr
"-PY_SSIZE_T_MAX"
"PyCodec_LookupError()"
Py_TPFLAGS_LIST_SUBCLASS
*tp_getattro(PyObject
"PendingDeprecationWarning"
"PyMemoryView_FromObject()"
phase
Backwards
PyUnicode_READ_CHAR(PyObject
PyEval_AcquireThread(PyThreadState
*Py_VaBuildValue(const
"PyBUF_WRITE"
tp_call
Py_ExitStatusException(status);
PyType_IS_GC(PyTypeObject
"callable(*args
sum_list(PyObject
nth
*PySequence_Tuple(PyObject
"PyConfig_InitPythonConfig()"
char**;
**[]**:
Add
"free()";
getbufferproc
4;
names;
convenience
"PyUnicode_AsEncodedUnicode()"
T_USHORT
PyCapsule_SetDestructor(PyObject
Can't
"doc"
"nb_inplace_lshift"
incremented
medium
T_OBJECT_EX
adequate
*defining_class
??
opening
"StreamWriter"
Py_FrozenFlag
**p
subtree
thread-safe
*PyTypeObject.tp_methods
"tp_mro"
*PyTypeObject.tp_weaklist
globals
"shape"
"PyArg_UnpackTuple()"
Functions:
*PySlice_New(PyObject
"PyList_GetSlice()"
macro;
Py_DECREF(iterator);
Although
*PyUnicode_DecodeASCII(const
Py_TPFLAGS_LONG_SUBCLASS
*data*
"PyImport_ExecCodeModuleWithPathnames()"
usual
"PyUnicode_Replace()"
imposed
array
"PyStructSequence_UnnamedField"
addresses
Directory
PyNumberMethods.nb_absolute
visible
--without-pymalloc
alternative
"\U"
computation
outlined
*stream
"Py"
shifting
"PyDict_MergeFromSeq2()"
absolutely
"PyThreadState_Swap()"
==================
order;
signum)
*(*binaryfunc)(PyObject*
inlined
"a.update(b)"
552**
0x80..0xFF
tp_methods
"PyExc_LookupError"
Traditionally
variable*
"PyObject_GetIter()"
PyErr_NoMemory();"
counting
(starts
PyGILState_STATE
"VirtualAlloc()"
"Ellipsis"
*PyMem_New(TYPE
break
*newtab*
8-byte
const_one);
automatic
appropriate
*error_value
*filename2)
exception:
"Py_Exit()"
============================================
"None")
"am_send"
tp_flags;
byte_offset)
"FileExistsError"
subtype)
interface"
"buf"
"True"
*doesn't
contains
*error)
handled;
closefd)
*m_methods
designators
*extra;
"PyObject_GetAttr()":
interpreting
"Include/import.h"
*_PyCFunctionFastWithKeywords(PyObject
expanded
accomplish
"Py_FileSystemDefaultEncodeErrors"
(iterator
Py_TPFLAGS_MAPPING
>>
Increment
"PyThreadState_SetAsyncExc()"
dereferencing
PyBUF_STRIDES
|===============================|=========|===========|==============|
set:
controlling
"PyBufferProcs.bf_releasebuffer"
"METH_VARARGS
PyInterpreterState_Clear(PyInterpreterState
*search_function)
"'#'"
limited
Compiling
initproc
exposes
"classmethod()"
*separator*
nonnegative
setting
true/false
PyDateTime_GET_YEAR(PyDateTime_Date
"__vectorcalloffset__"
PyObject_RichCompareBool(PyObject
+------------------------------------------------------------+-----------------------------------------+
get"
|==================|==============|
class*
traverse
saner
*encoding*
"PyConfig_Read()":
jeopardizes
reading
"PY_MICRO_VERSION"
"del
supply
memory"
no_block)
straightforward
""backslashreplace""
_PyInterpreterState_SetEvalFrameFunc(PyInterpreterState
double
likewise
(**PEP
arises
"PyWeakref_NewProxy()"
real;
*config*
"PyThreadState":
(*setattrofunc)(PyObject
"domains"
to/from
*PyType_GetQualName(PyTypeObject
match)
PyList_Size(PyObject
unnecessary
Releasing
prepared
(Though
*PyDescr_NewClassMethod(PyTypeObject
=======================================
PyList_Reverse(PyObject
EncodingWarning
"Py_LIMITED_API";
max
(object)
(possibly
Therefore
dynamic
"PyMemAllocatorDomain")
consequences
*x)
"p+7")
obj:
T_FLOAT
*start
======
modules*
PyStatus_NoMemory(void)
"PyConfig.base_exec_prefix"
Tracing
*command)
*what*
imin
"PyErr_ResourceWarning()"
Additionally
"PySeqIter_New()"
__matmul__
key);
destructor
&
"PyType_GetModule()"
Py_complex
At
argv);
PySys_WriteStderr(const
PyErr_ExceptionMatches(PyObject
"view->ndim"
correctly
Standard
tables
"destructor"
*PyTypeObject.tp_base
*PyCodec_Decode(PyObject
tracemalloc
Allocators
brackets
PyObject_DelAttr(PyObject
*val*
Compatibility
PyTuple_Size(PyObject
*file*
*PyModule_FromDefAndSpec(PyModuleDef
Py_QuietFlag
"-X"
fill_char)
25-28
seed
non-zero
suboffsets[i];
adding
then:
"PyGILState_*"
"|"
Marks
540**)
PyUnicode_IsIdentifier(PyObject
"lib/python*X.Y*"
"PyBytes_FromStringAndSize(NULL
"METH_VARARGS"
"sendfunc"
immutable:
"hash_seed"
"PyObject_Free(p)"
"PyState_AddModule"
**You
*encoding
defined;
"*error_pos"
*flags)
bytes-
terminal
generic:
PEP
"PyThreadState_Clear()"
"PyUnicodeTranslateError_GetEnd()"
indexes
ensure
"richcmpfunc"
"Py_SetPath()"
Testing
encodings
non-bytes
compiler
"PyArg_Parse()"
match;
randomly
"printf("%li")"
"PySequence_Contains()"
"PyObject_SetAttr()":
Types:
socket
automatically;
*what*:
"0xDB"
tp_as_mapping
"PyConfig._init_main":
==============================
"callable(arg1
PyObject_IsInstance(PyObject
PyPreConfig_InitPythonConfig(PyPreConfig
"AssertionError"
PyType_GenericNew
*substr*
"str.encode()"
*copy_null*
PyType_CheckExact(PyObject
prepends
*0*
"PyThread_set_key_value()"
"PyTrace_OPCODE"
providers
mapping
infinity
simplified
*type*
variadic
"__spec__"
PyBufferProcs
"sys.prefix"
releasebufferproc
"printf("%zd")"
operator
"const
>
*PyWeakref_GetObject(PyObject
facilities
"'\0'"
("PyConfig"
}
getiterfunc
use:
handle
"PyObject_Format()"
propagates
"PY_SSIZE_T_CLEAN"
flags);
(even
"PySequence_Size()"
exposed
tp_basicsize
helper/diagnostic
"PySys_AddWarnOptionUnicode()"
"PyExc_BytesWarning"
(don't
view
Client
"Py_intptr_t"
"PyObject_CallNoArgs()"
"PyTypeObject"
appropriately
"PyUnicode_AsUnicode()"
PyMarshal_ReadShortFromFile(FILE
------------------------------
that
"METH_FASTCALL
feasible
Now
speed/space
"exec_prefix"
"PYTHON_API_VERSION"
"PyExc_ResourceWarning"
NULL;
Codec
*bytecode*
re-initialized
"0xB"
every
*kw
>=0
used)
Level
"ModuleNotFoundError"
items;
to_start
yet)
non-set
exception;
1"
Heap-allocated
*imag*
"size"
pthreads
mutually
Raising
obtain
*pos
cycles)
bits
expands
"Py_False"
reloaded
"PyBytes_ConcatAndDel()"
("0"):
*PyCodec_IncrementalEncoder(const
*sep
"isinstance(o
False"
unknown
"PyErr_GetHandledException()"
especially
lazily
Currently
*varnames
finalized
3.9
*p*)
Stability
"errcode.h"
"types.ModuleType"
plus
***********************
*direction*
explicit
"PyObject_RichCompare()"
bound
traversed
caused
ierr)
ones
"hashfunc"
"PyFile_FromFd()"
*contiguous*
not-
Private
*tp_weaklist;
"PyCallIter_New()"
Py_UNICODE_ISDECIMAL(Py_UCS4
true)
"UserWarning"
profilers
delimiter
PyObject_GetItem(dict
PySequence_Size(PyObject
ierr
subtyped
byte-code;
8
"PyThreadState_EnterTracing()"
"PyConfig_SetBytesString()"
base
prepending
PyLong_AsUnsignedLongLong(PyObject
*iter
process
Allocate
*PyMapping_GetItemString(PyObject
outside
"PyRun_SimpleFileExFlags()"
"_Py_IsFinalizing()"
*PyNumber_Subtract(PyObject
PyNumberMethods.nb_inplace_subtract
specified
preconfig.utf8_mode
"sys.path":
"PySequence_Length()"
NULL.**
"PyInstanceMethod_Function()"
"tp_print"
except
"<%s
"Py_REFCNT"
"0x030a00f0"
Initialize
arg2
"tp_init"
given
parsing
"PyConfig.exec_prefix"
similar
"threading"
*name*
receiving
"%lli"
Upon
"PyThread_tss_alloc()"
Py_EndInterpreter(PyThreadState
consisting
Buffer-related
(*traverseproc)(PyObject
(decrementing
PyVarObject*
"PyDict_Type"
"PyArg_VaParse()"
"filesystem_errors"
PyLong_AsLong(PyObject
*o2)
deprecation
Success
UCS4
tp_richcompare;
"run_filename"
responsibility
practical
"PyEval_RestoreThread(_save);":
reasons
""ANSI_X3.4-1968""
"init"
"PySequence_Fast_GET_SIZE()"
PyVectorcall_NARGS(size_t
Immutable
"h"
|=
*obj_addr*
"U"
usage
PyConfig_InitPythonConfig(PyConfig
hexversion
"Py_DTSF_SIGN"
(where
types.)
.tp_hash
wins
"'G'"
frozenset
onward
(round)
"PyThread_set_stacksize()"
Py_RunMain();
(asserts
12
sign
malloc-like
leaked
"PyObject_IsInstance()"
"tp_as_buffer"
its
encoding:
*pointer*
Third-party
*not*
"PyType_GetQualName()"
"PyLong_FromLong()"
""%li""
character
Strings
PyEval_MergeCompilerFlags(PyCompilerFlags
pointers:
*w*
taking
pack
Given
*length*
"'/usr/local/bin/python'"
*i2*
"METH_O"
members)
tp_alloc;
"PyGetSetDef"
**items
Raw
NULL)"
list"
*tp_call*:
"datetime.date.fromtimestamp()"
*p)
achieve
Py_InteractiveFlag
"PyMem_RawMalloc(1)"
====================
serialize
prints
"setattrfunc"
"PyExc_FileNotFoundError"
"PyUnicode_Compare()"
converter
familiar
v[2][2][3]"
"warnings.WarningMessage()"
Few
rv
393**
"PyUnicode_DecodeLocale()"
*tp_base;
"PyUnicodeEncodeError_GetEncoding()"
*code*
in-place
"PyOS_InputHook"
(ones
sub-struct
*func
"PySlice_GetIndicesEx()"
"Py_END_ALLOW_THREADS()"
integral
PyDate_Check(PyObject
native
.tp_dictoffset
binary32
assignment
col_offset)
"PyLong_FromDouble()"
"Py_UCS4"
*kwargs*
"z#"
PyUnicodeTranslateError_GetEnd(PyObject
"RuntimeError"
diagnostic
"PyReversed_Type"
Comment
current
*category
classes
(with
module-level
lose
*"
"PyLong_AsLongLongAndOverflow()"
who
Data
fly
defined:
(*releasebufferproc)(PyObject*
"PyCoro_Type";
basic
destructors
non-Unix
a[key]
"{items}"
methods*
minimal
PyDict_Next(PyObject
free(buf);
yes
"0
proposed
"PyUnicode_AsRawUnicodeEscapeString()"
"PyDateTime_TimeType"
"PyCapsule_GetDestructor()"
am_anext;
METH_KEYWORDS
"PyNumber_Xor()"
"PYTHONMALLOCSTATS"
start
parenthesize
"Py_REF_DEBUG"
*src)
PyWeakref_CheckProxy(ob)
Py_ALWAYS_INLINE
performances
definition:
unsuccessful
"PyType_*"
exports
once
"PyModule_AddType()"
PyGILState_Ensure();
wrong
local
announces
details)
later
*vectorcallfunc*
*PyUnicode_DecodeUTF7(const
3.10+
args"
*PyImport_FrozenModules
Comparison
*func*
multi-
PyUnicodeEncodeError_GetStart(PyObject
*ctx
"sys._xoptions"
"PyRun_AnyFileExFlags()"
loop
codec
does
3.3.*
"objobjproc"
*unicode
0;
3.10
'check_source'
*registry)
INCREF'ed
Fill
used
set_sys_last_vars)
"PyBytes_AsStringAndSize()"
"PyErr_SetInterrupt()"
"PyObject_GC_UnTrack()"
"Py_sq_length"
PyUnicodeTranslateError_SetReason(PyObject
*PyUnicode_AsUnicodeEscapeString(PyObject
called)
clears
o[i1:i2]"
"PyErr_GivenExceptionMatches()"
square
PyException_SetCause(PyObject
"releasebufferpr
PyUnicode_GetSize(PyObject
"PyExc_IndexError"
callables
"PyLong_AsLongLong()"
*PyDict_Keys(PyObject
"PyExc_NotImplementedError"
ch)
"0"
"__anext__()"
"tp_vectorcall"
PyModule_AddStringMacro(PyObject
"raise
callee
restrictions
freshly
(*ptr
Container
exporter's
*meth)
extent
"zlib"
match
"=="
one
at
"PyCapsule"
finds
object;
PyUnicode_CompareWithASCIIString(PyObject
"es#"
+---------------------+-----------------------+------------------------------------+
"PY_SSIZE_T_MAX"
(rather
*PyUnicode_DecodeUTF16Stateful(const
Non-negative
1)"
"+="
"Py_TPFLAGS_HAVE_GC"
used:
PyModule_Type
configuration:
formed
**Inheritance:**
reprfunc
domain
">="
PyNumberMethods.nb_true_divide
classes;
functions;
"__name__"
"PyType_GenericNew()"
PyMethod_Check(PyObject
Py_XINCREF(PyObject
""123""
"signal.SIG_DFL"
Py_UNICODE_ISLINEBREAK(Py_UCS4
least)
Here
PyEval_SaveThread();
PyDateTime_DELTA_GET_MICROSECONDS(PyDateTime_Delta
PyStructSequence_SetItem(PyObject
done;
**Unless**
*data
variable-length
"O_BINARY"
"__doc__"
*y)
executables
res
comma
"float(o)"
"Ellipsis")
single-
PyTrace_LINE
"PyImport_GetMagicTag()"
"PyMethod_Function()"
"PyObject_GenericGetDict()"
(If
immediately
Py_CLEAR(PyObject
"PyObject"
stolen")
Py_InitializeFromConfig(&config);
"sys.base_exec_prefix"
1)")
comparing
Exceptions
"PyUnicode_FromString()"
flow
*stdio_encoding
"PyUnicodeEncodeError_GetEnd()"
best
fd
exclude
config;
schemes
"PyErr_NormalizeException()"
recursion
directory
algorithms
*no_block*
PyDict_Merge(PyObject
ability
successfully
255
dot)
interpreter-specific
sum
*indices*
ternary
"PyRun_InteractiveLoop()"
ensured
non-data
"PyUnicode_IsIdentifier()"
speed
*tp
"0xF"
"PySys_GetObject()"
Handling
*PyCapsule_New(void
"Py_VaBuildValue()"
Character
"hashlib"
PyTuple_SetItem(t
"p.readline([n])"
Ctrl-C
line-number
similar)
"pow(o1
**PEP
paths
becomes
*arg*:
way
there's
*message)
snippet
PyUnicode_CopyCharacters(PyObject
ordinals
""O&""
REPL
log
struct
division"
parsed
defined
completes
value;
myobj_new
declaration
trash
program's
pitfall
"PyMem_GetAllocator()"
Python-level
aspects
statements
Py_Initialize()
originally
3.6.*
"PySys_HasWarnOptions()"
"L"python""
Py_LIMITED_API
replaces
-m
"{
"PyInstanceMethod_Type")
access
*mapping)
2
vectorcall:
PySet_Type
argv
*sys.modules*
("owned")
"PyMem_REALLOC(ptr
*PyImport_GetModule(PyObject
range
*(*allocfunc)(PyTypeObject
lenfunc
triggered)
"PyDict_Values()"
*PyGen_New(PyFrameObject
"PyMem_RawRealloc()"
PySlice_Type
"False"
environment
Destroy
*code
consumption:
propagation
referencable
^=
*element*
PySys_ResetWarnOptions()
free-memory
indicates
"unicode[start:start+length]"
"%%"
converts
lot
"PyThread_tss_get()"
"Py_NewInterpreter()")
"Python
"Other"
Without
PyComplex_Type
PySys_SetArgv(int
supporting
383**)
units
"_PyCFunctionFastWithKeywords"
Py_UNBLOCK_THREADS
was
IEEE
runtime
Py_RETURN_FALSE
considered
Require
required;
*)buf)[0]
*token)
repeating
Protocol
""surrogateescape""
};
prefer
split
"PyObject_GetArenaAllocator()"
instead
Since
distribution
(however
"PyConfig.orig_argv"
"PyOS_vsnprintf()"
Vectorcall
systems
pop_doc}
queued
[Py_buffer]
*feature*
Path
*mapping*
*module*
be
silently
"PyExc_StopAsyncIteration"
*const_one
"PyByteArray_FromStringAndSize()"
Incidentally
(Change
"PyErr_WarnEx()"
"PyErr_WriteUnraisable()"
initialized)
below)
pathconfig_warnings
"traceback"
'C'
*base_exec_prefix
"PyFile_WriteString()"
allocation)
opened
Py_BytesWarningFlag
prevents
"\x"
*meth*
Controls
"s#"
========================
"PyExc_OSError"
*PyTypeObject.tp_doc
*PyUnicode_FromUnicode(const
submodule:
coverage
*PyLong_FromDouble(double
"PyNumber_Or()"
529**
*preconfig*
main(int
helping
"-c"
exceptions;
clean
"PyGILState_Ensure()"
(created
happened
interned
*buffer*
&error_traceback);
"-S"
"PyImport_FrozenModules()"
"frozenset"
Properties
utf8"
PyMem_Del(buf);
Py_TPFLAGS_BASETYPE"
"exec()"
perfect
currently
"sys.ps2"
"PyList_Reverse()"
afterwards
(destructor)myobj_dealloc
"PyObject_Str()"
"PyExc_EncodingWarning"
ignore
"Py_CLEAR()"
Acquire
"PyObject_SetAttrString()"
C-style
*p
*PySequence_Concat(PyObject
"Py_ReprEnter()"
"ValueError"
protocols:
Include
*userData*
"C""
function
bugs)
tp_compare
elsize)"
"PyDictIterValue_Type"
*PyFrame_GetBack(PyFrameObject
*PyLong_FromUnicodeObject(PyObject
part
IO
PyFrame_GetLasti(PyFrameObject
*prompt)"
clearing
"write()"
"'e'"
T_LONG
Initializes
extends
buffer
checked
"PyTuple_SetItem()"
strides[0]
"signal.set_wakeup_fd()"
*Stable
"PyUnicodeEncodeError_SetStart()"
Additional
ignores
tb);
locals;
registry
functional
PyTypeObject.tp_richcompare
But
broken
relocate
Raw-Unicode-Escape
"PyMemoryView_FromMemory()"
nargs
handler)
*contiguity*
programs
nb_inplace_rshift;
Module
exist
PyAsyncMethods.am_send
"module.attribute"
"S"
"PyDateTime_DateType"
(it
"PySys_WriteStdout()"
core:
"subtype->tp_alloc(subtype
"PyDict_Next()"
"PyCFunction_Type"
"PyErr_WarnExplicit()"
debugging
facility
later.)
"realloc()"
"getiterfunc"
PyUnicode_GET_SIZE(PyObject
"PyClassMethodDescr_Type"
because
performing
"-u"
i.e
PyStructSequence_InitType2(PyTypeObject
cells
unthreaded
Implementation
computations
PyFloat_Pack4(double
unhashable
we
"len"
"O_TEXT"
("ValueError"
interactive
o)
*tuple
should
Take
wchar
(accidentally
pycs"
"PYTHONIOENCODING"
from
Please
"reprlib.recursive_repr()"
*consumed*
**python**
============================
prototype
""pymalloc_debug""
PySlice_Unpack(PyObject
PyCode_Check(PyObject
[long
lock
Append
*PyUnicode_InternFromString(const
approximate;
*)buf
said
"/usr/local/bin/python"
represented
Note
tp_weaklistoffset
"PyNumber_Divmod()"
*var*
*PyObject_GetAttr(PyObject
for
settings
PyErr_SyntaxLocationEx(const
"0xFB"
user_site_directory
Taken
PyConfig_SetArgv(PyConfig
ensues
*module)
585"}
*PyEval_GetBuiltins(void)
*check_hash_pycs_mode
offered
management
*iterable*
"PyTypeObject.tp_dealloc"
wasn't
list
shallow
through
(assuming
PyObject_GC_IsFinalized(PyObject
*PyUnicodeEncodeError_GetEncoding(PyObject
*docstring*
*PyNumber_Xor(PyObject
*PyByteArray_FromObject(PyObject
("Py_TPFLAGS_HEAPTYPE")
Aug
"PyUnicode_AsDecodedUnicode()"
**"T"**:
_PyFrameEvalFunction
talk
*freevars
count)
operands
PyTypeObject.tp_descr_set
static)
"Py_HasFileSystemDefaultEncoding"
inherited
track
if
thrown;
resolve
seq2
"PyModule_FromDefAndSpec()"
level)
*PyNumber_InPlacePower(PyObject
"nb_xor"
member
*__qualname__*
"PySet_Contains()"
"PyMethod_Type")
*attr)
*arg*
**tb)
("complex")
delicate
Encoding
status.exitcode;
*PyBuffer_GetPointer(const
PyThread_tss_set(Py_tss_t
[PyObject
*command*
whether
Py_IsFalse(PyObject
is_package;
cycles
*PyUnicode_FromFormat(const
"PyExc_FloatingPointError"
"PyLong_AsUnsignedLongLongMask()"
intrinsic
showrefcount"
"Py_eval_input"
stable:
maintained
"PyUnicode_nBYTE_DATA()"
reassigned
them
*PyList_GetSlice(PyObject
"PySetIter_Type"
*PyThreadState_Next(PyThreadState
"'o'"
"forbidden
"LONG_MAX")
fields
Ensures
*kwnames)
"PyMapping_Size()"
METH_FASTCALL
account
beforehand
[square]
detecting
op);
PyTypeObject.tp_hash
*type)
behaviour
"\ufeff"
Notifications
"PyObject_DelItem()"
width
40217
generators:
"malloc(1)"
PyMem_RawFree(void
vargs)
internally
"f_trace_opcodes"
*end_column)
Support
*PyContext_CopyCurrent(void)
"PYTHONDONTWRITEBYTECODE"
*tp_as_sequence;
exclusive;
unary
collections.Hashable)"
aligned
follows
spec's
"PyUnicodeDecodeError_SetEnd()"
"PyBytes_FromFormat()"
*tp_as_number;
renamed
*error_type
*byteorder
Py_GenericAliasType
iterates
Inheritance
short
dereference
Warning
protocol:
line
assignments
meant
signature:
*PyUnicode_DecodeRawUnicodeEscape(const
*PyNumber_Rshift(PyObject
Release
generates
PyNumberMethods.nb_negative
PyUnicode_FSDecoder(PyObject
affected
refcount
"PyObject_DelItemString()"
superclass)
_PyInterpreterFrame
members).*
strides):
(suboffsets[i]
PyGC_Disable(void)
preprocessor
*PyNumber_And(PyObject
("PyConfig.run_filename")
hash
"PyModule_AddObject()"
automatically)
*o)
guaranteed
transfer
duration
restore
Format
"(items)"
"PyConfig.base_prefix"
symbol
"PyTypeObject.tp_itemsize"
PySlice_GetIndicesEx(PyObject
startup)
+-------------------------------+-------------------------------+------------------------+
Incremented
Untrack
"PyUnicode_Append()"
"module.classname"
done:
"Py_LE"
"Py_NewRef()"
table
PyConfig
"Py_tp_dealloc"
"ChildProcessError"
case-insensitive
"1"
Mode
"PyInterpreterState.config"
"Py_LegacyWindowsFSEncodingFlag"
("__del__()"
*err_msg)
"str[start:end]"
chunk
*elsize*
"sys.path");
deriving
new_size)"
(an
"PySequence_SetSlice()"
Do
T_INT
startup;
value*
counts
trade
code:
Creating
reference.**
Capsules
"PyErr_SetImportErrorSubclass()"
nb_add;
tp_del;
tp_getattro;
wide
str
PyBytes_FromString(buf);
member)
this;
processed
*PyObject_Dir(PyObject
Refer
iterable
PyObject_GC_IsTracked(PyObject
"single-phase
macOS
provisionally
"PyLong_AsDouble()"
*module*'s
belonging
turned
normalization
*separator
Assorted
Prefer
*keywords*
__rpow__
repeats
coerced
PyBUF_RECORDS
"'>'"
objects
"PYMEM_ALLOCATOR_DEFAULT"
Py_DECREF(tp);
file
__pow__
sequence
PyBufferProcs.bf_releasebuffer
via
initializers
"malloc()"
Try
VAL_B
surrogates:
protocol"
are:
"from
"PyConfig.run_filename"
filter
newfunc
implicitly
"PYTHONMALLOC=malloc")
"PyDescr_NewClassMethod()"
===============
PyBytes_Concat(PyObject
"tp_iter"
"switch"
*PyThreadState_GetDict()
reload
*PyDict_SetDefault(PyObject
"tp_is_gc"
*PyDict_Items(PyObject
result
"tuple(list)"
PyType_Check(PyObject
PyFloat_Check(PyObject
dealing
(functions
"PyObject_CallMethodOneArg()"
cancel
infinite
"PyThreadState_Delete()"
""utf-8""
"PyCFunction_GetFlags()"
"PyModule_Type"
out
calculating
"PYTHONLEGACYWINDOWSSTDIO"
"A
*base
interrupt
"Py_PreInitializeFromBytesArgs()"
"not
possible
*PyInstanceMethod_New(PyObject
bugs
"PyThread_free_lock()"
"PyList_Append()"
Apart
"PyEval_ReleaseLock()"
init_python(void)
image
"nb_floor_divide"
PyLong_FromLong(0L);
single-segment
it:
*kws
migrate
*fp
(after
"module_search_paths"
PyNumberMethods.nb_inplace_power
(*func)(void*)
"executable"
"sys.meta_path"
zu
"PYMEM_ALLOCATOR_MALLOC"
**kwds)"
without-pymalloc"
*size*
appears
corrupted
consider
"PyInitFrozenExtensions()"
*f*
returns;
+---------------------------------------+------------+
Py_MIN(x
items
count
"PyListRevIter_Type"
never
idiom
(all
passes
interpreted
behalf
helpful
PyCell_Set(PyObject
Building
or"
base-64
occurrences
Single-phase
PyFloat_Pack2(double
"Py_TYPE(self)"
any(v
"SyntaxError"
copied
"datetime.timezone.utc"
"surrogateescape"
C
original
"PyLong_FromString()"
*tp_doc;
locale)
"PyConfig_SetBytesArgv()"
*PyImport_ReloadModule(PyObject
"PyMem_Free()"
danger
*Py_False
probably
involves
*anyset
Example
manner:
*PyRun_String(const
*PyRun_FileFlags(FILE
colon
totally
GIL
"See
escape
feature)
developer
--with-trace-refs
mechanisms
PySys_AddWarnOptionUnicode(PyObject
intents)
"nb_lshift"
"OverflowError")
equal
initializer:
"PySequenceMethod
"w*"
"PyErr_FormatV()"
*Py_BuildValue(const
Multi-phase
relatively
3147**
Field
Multi-Phase
Memory
"slot"
distinguished
PyGILState_Check()
"PyUnicode_Resize()"
.tp_doc
opaque
489**
return
"PyContextVar"
*ex
"Default"
adjustment
"PyErr_SetString(PyExc_TypeError
"PyModule_GetDef()"
"PyRange_Type"
"PyUnicode_FromUnicode()")
PyByteArray_GET_SIZE(PyObject
1
primary
"mmap()"
PySys_SetArgvEx(int
*PyCodec_BackslashReplaceErrors(PyObject
const_one
EOF
==========
PyMapping_SetItemString(PyObject
**************************
PyFunction_SetDefaults(PyObject
cf_flags
"_Py"
unit
*functions*
"PyThreadState_GetInterpreter()"
subclasses
"PyModule_FromDefAndSpec2()"
*PyEval_EvalCodeEx(PyObject
*tp_dict;
"coerce_c_locale"
"Py_complex"
field;
general-purpose
calculated
anyway
build":
dump
"site.main()"
*encoding)
overwritten
lead
input/output
potentially
PyConfig_Clear(PyConfig
PySys_WriteStdout(const
documentations
Command
"len(list)"
tp_members
**not
non-zero)
"%R"
suppose
typically
PyErr_Fetch(&type
*PyNumber_Multiply(PyObject
callable
participate
"Py_Initialize()":
PyBytesObject*
compilation
implemented
Py_CLEAR(self->dict);
GC-related
hold
"Py_CompileStringFlags()"
"PyModule_FromDefAndSpec"
raising
*weak
**()**:
(almost)
reducing
"PyBUF_MAX_NDIM"
"IsADirectoryError"
*PyImport_ImportModuleLevelObject(PyObject
Py_FinalizeEx()
"PyUnicode_Substring()"
Program
sys.stdout
converse
distribution)
regarded
Everything
keys
sized
"PySet_Pop()"
"PY_BIG_ENDIAN"
Several
PyBytes_GET_SIZE(PyObject
PyImport_ImportFrozenModuleObject(PyObject
"Py_IgnoreEnvironmentFlag"
*PyUnicode_AS_DATA(PyObject
PyIter_Send(PyObject
"PyImport_AppendInittab()"
*src*
Py_file_input
"base_prefix"
Structural
Py_FatalError()
non-blocking
"__PYVENV_LAUNCHER__"
do
No
pycache_prefix=PATH"
request-independent
*U*
"PyThread_GetInfo()"
modifies
program:
staying
"old-style"
encountered
*cf_feature_version*
*PyInterpreterState_GetDict(PyInterpreterState
PyCodec_Register(PyObject
module
"Main"
"base_exec_prefix"
structseq
**=
embedded
reaches
"am_anext"
*m
Py_eval_input
"PyMem_RawMalloc()"
thread)
describing
loading
*PyType_Slot.pfunc
tp_setattro
*PyImport_ExecCodeModule(const
353**
locked
strides[j]
"PyTypeObject.tp_basicsize"
assumed
"sq_repeat"
"PyEval_CallObjectWithKeywords()"
|
"aiter(o)"
*filesystem_encoding
"sq_contains"
fast
next
direction)
operation
Cleanup
*PyCapsule_Import(const
*PyCode_GetCellvars(PyCodeObject
Similar
"PyUnicode_AsCharmapString()"
*PyUnicode_DecodeMBCS(const
"Py_GetRecursionLimit()"
"PyDateTime_Date"
"getbufferproc"
"hasattr(o
caveats
impossible
cleaned
interpreter:
"PyMem_RawMalloc(n)";
unset
"PyUnicode_Translate()"
16-bit
finished
sent
size;
previous
PyMappingMethods.mp_ass_subscript
"PyUnicode_FromUnicode()"
"Py_IsFalse()"
struct)
combinations
"Py_tp_doc"
*PyTuple_GetItem(PyObject
Enter
(item
*slice
once:
"PyThread_get_stacksize()"
*attr);
allow
tp_name
pymalloc
"Py_TPFLAGS_MAPPING"
PyFrame_GetLineNumber(PyFrameObject
("have
"Deterministic
PyNumber_Check(PyObject
defining
"ssizessizeobjargproc"
subsystem
entries
reviewing
traceback);
verify
success**.This
Process-wide
Log
*type);
decremented
shows
3.0
consumers
"PyTuple_Pack()"
*closeit*
allowed:
"PySequenceMethods"
PyUnicode_Type
"-1"
ASCII-encoded
"PyUnicode_FromKindAndData()"
*tp_call(PyObject
deletion
completion
"PySys_WriteStderr()"
*PyMarshal_WriteObjectToString(PyObject
read-write
Py_OldFunction(void);
"PyTypeObject()"
Centrum
submodules
T_OBJECT
"0xCB"
"Py_EQ"
==========================
thus
setlocale)
*PyLong_AsVoidPtr(PyObject
encoder
"PyObject_Malloc(1)"
motivation
*value)
Informative
API)
default:
purpose
Verbose
%p>"
IDs
stability
equivalent
"PyUnicode_CompareWithASCIIString()"
*slot*
**pend
*PyNumber_InPlaceRshift(PyObject
sane
even
*origin
*spec*
get-attribute-string
Attribute
Separators
explained
(default:
"PyOS_sighandler_t"
"PyConfig.skip_source_first_line"
package's
"Py_GetCompiler()"
"m_size";
surrogates
*borrow*
"tp_as_number"
Allowing
"frozenmain"
export
*PyRun_StringFlags(const
*PyList_AsTuple(PyObject
"printf()"-style
PyNumberMethods.nb_subtract
"calloc"
"true
bytes-like
Notes:
*PyNumber_MatrixMultiply(PyObject
"cls.__mro__"
name;
getter
*n/a*
Sub-interpreter
_save
tiny
several
"PyObject_SetItem()"
"PyCapsule_GetName()"
"PyObject_GC_IsTracked()"
*PyStructSequence_GetItem(PyObject
position
attaching
"Py_SIZE"
details
"BlockingIOError"
lower-level
PyTypeObject.tp_clear
MyStr_Type
3.4.*
precision
f"
neither
*PyErr_SetFromErrno(PyObject
PyContext_Type
hour
utility
3.8.2:
Development
Configuration"
"PYTHONNODEBUGRANGES"
PyUnicode_READ(int
heap:
leaks.)
Py_EnterRecursiveCall(const
PyUnicode_Count(PyObject
Successful
(n
*self*
period
knowing
layouts
"PyConfig.filesystem_errors"
"PyErr_CheckSignals()"
interpreter
Values
PyFloat_Type
Py_CLEAR(self->ref);
"#include
"gc.isenabled()"
"Py_Initialize()";
PyErr_SyntaxLocation(const
_typeobject
corresponding
Py_hash_t
operations
"strncmp()"
VxWorks
PyNumberMethods.nb_matrix_multiply
*PyUnicode_4BYTE_DATA(PyObject
tp_repr;
"tp_doc"
Py_UNICODE_TODECIMAL(Py_UCS4
large
"tp_getset"
options:
aware
*anything*
"return"
*kwds*
*(*getattrofunc)(PyObject
builtins
(sub-)interpreter;
&value))
create
+--------------------------------------------+-----------------------------------+------------+
opt
"PyObject_IsTrue()"
owned
tp_dictoffset;
0
detector
"tp_setattr"
"PyObject_GetAttrString()"
(incrementing
(objects
"Cell"
*PyTypeObject.tp_cache
Adjust
resolution
"FormatMessage()")
"PyObject_Malloc()"
uintptr_t
PyObject_Del(void
in)
"PyByteArray_Resize()"
variable(s)
"hash(o)"
*PyUnicode_AsUTF32String(PyObject
*PyObject_ASCII(PyObject
"Py_uintptr_t"
machines
gstate
entry
"PyDictKeys_Type"
"PyNumber_Positive()"
no
"Owning
*PyModule_GetState(PyObject
NaNs
"Py_GetBuildInfo()"
&slicelength)
"fopen(filename
improved
"PyArg_ParseTupleAndKeywords()"
PySequenceMethods.sq_item
*real*
manually
guidelines
"Py_UTF8Mode"
"something
"io"
extract
statement
"Debug
PyErr_PrintEx(int
"PyBytes_Repr()"
Py_InitializeEx(int
POSIX
"PyObject*"
initialized;
ordinals)
PyDateTime_DELTA_GET_SECONDS(PyDateTime_Delta
optimize
"PyDictProxy_Type"
updates)
3.5:
allocations);
"PyObject_HEAD_INIT"
*traceback;
construction
rely
free-like
function's
-c
Specific
faulthandler
num
"PyBuffer_Release()"
"PyErr_SetFromWindowsErrWithFilename()"
"list(o)"
additional
----------------------------------------
insensitive
"Py_TYPE"
object"
PyNumberMethods.nb_power
site-
[Py_complex]
PyBUF_WRITABLE
"'0b'"
"PyMapping_Length()"
"divmod(o1
start/end
"PyImport_ImportModule()"
Parsing
tp_new
"PyList_Check(a)"
*ppos*
(which
"borrowed":
"sys.audit()"
PyStructSequence_Desc
.tp_repr
*weakreflist;
assumption
*PyFrame_GetGenerator(PyFrameObject
"O&"
PY_VERSION_HEX
tp_as_async
they're
CO_FUTURE_DIVISION
"PyStatus_Exception(status)"
PyTraceMalloc_Untrack(unsigned
*desc)
*PyUnicode_FromStringAndSize(const
PySendResult
(*)(const
"void
integer
referent
"PyConfig.module_search_paths"
(frame
subpackage
PyFrameObject
exceed
*PyContextVar_Set(PyObject
GCC
(excluded)
profiling
exc)"
command
PyConfig_Read()
mostly
"PyObject_AsWriteBuffer()"
PyTypeObject.tp_traverse
release
tree
"Py_EncodeLocale()"
only
Compiler
Py_VerboseFlag
*res;
(fields
obj;
3.10.8
independent:
"(unsigned
"len(p)"
"et"
PySequenceMethods.sq_inplace_concat
Quiet
hand
present
"PyTrace_CALL"
segment
(*PyCapsule_Destructor)(PyObject
accessors
init_python(const
("PyPreConfig"
"PyUnicode_FSDecoder()"
am_send(PyObject
*macro*
ssizeobjargproc
Reflection
PyType_Slot
Sets
(the
PyStatus_NoMemory();
3.9.*
"o.count(value)"
"Py_LeaveRecursiveCall()"
UTC
alone
"PyErr_SyntaxLocationEx()"
"_weakref"
"canonical"
"TypeError")
floating-point
PyDoc_STR("my
.tp_flags
432**:
"PyExc_OSError":
Use
__bases__
Process
Py_NoUserSiteDirectory
"PyStructSequence_InitType"
+-----------------+--------------------+
possibly
nitems);
Macros
"internal"
Notice
*PyImport_AddModuleObject(PyObject
"PyTuple_Pack(2
stripped
*PyMem_RawCalloc(size_t
"PyObject_GenericSetAttr()"
op
"fileno()"
"PyObject_CallMethodObjArgs()"
blocks
"0x03060100"
"uninitialize"
tp_vectorcall_offset
Py_VISIT(PyObject
"Py_EnterRecursiveCall()"
PyOS_setsig(int
end)
"tp_getattr":
output
Ctrl-C)
*(*richcmpfunc)(PyObject*
PyGC_IsEnabled(void)
**configure**
---------------------------
machine
PyTypeObject.tp_version_tag
semicolon;
"PyErr_SetExcFromWindowsErrWithFilenameObject()"
Following
sum_sequence(PyObject
*fp*
PyModule_CheckExact(PyObject
PyTypeObject.tp_finalize
size)
events
"_frozen"
location
representation
computed
(i.e
conform
incompletely
Finalize
*PyList_New(Py_ssize_t
decref'ing
PyConfig_Read(&config);
Send
tp_descr_set
many
PySequenceMethods
option")
vectorcall
PyIter_Next(iterator)))
*)self);
*PyObject_Init(PyObject
series
PyErr_SetHandledException(PyObject
*mem:
together:
met
Example:
(instances
Effectively
writability
*(*ternaryfunc)(PyObject*
Common
(*func)())
reason
PyRun_InteractiveOne(FILE
Calling
busy
*m_slots
__get__
"PyErr_SyntaxLocation()"
added
version;
("4"):
Flags
methods)
ptr)
value):
dangerous
*PyErr_GetHandledException(void)
"PyObject_GenericGetAttr()"
users
"PyUnicode_DecodeUTF7()"
Py_single_input
o.attr_name"
arrays:
commas
"Py_TYPE()"
Finally
wrappers
"PYMEM_ALLOCATOR_PYMALLOC_DEBUG"
"PyExc_"
(failed
exit
C)
subscription
add
*spec)
"PyNumber_InPlaceOr()"
unmodified
Consequently
headers
"PyExc_SystemExit"
"PyUnicode_AsUTF16String()"
"Py_UNICODE"
Py_BLOCK_THREADS
*owns*
uppercase
Can
*capsule
*Python
recoding
"PyBuffer_FillInfo()"
strippped
"PyErr_PrintEx()"
object*)
_PyCFunctionFastWithKeywords
stop
"PyCapsule_SetName()"
(BOM)
share
two-argument
"PyEval_EvalCodeEx()"
"current"
starts
"PYTHONPATH"
(*PyOS_InputHook)(void)
private
"ascii()"
*method)
integers;
soon
main
PyTupleObject
">"
appended
"ssizeargfunc"
Asynchronous
"(n
*use_hash_seed*
minimum
PyConfig_SetString(PyConfig
elements
PyUnicodeEncodeError_GetEnd(PyObject
newsize)
"builtins"
func
checking
prepare
"use_hash_seed"
(a.k.a
PyCell_SET(PyObject
surrogateescape
Extensions
reduces
structs
PyMapping_DelItem(PyObject
Py_ReprEnter(PyObject
Iterators
useful
"PySequence_InPlaceConcat()"
*kwdefs
"tp_getattro"
BOM
import)
extend
"EncodingWarning"
Locale
PyThread_tss_is_created(Py_tss_t
tp_descr_get(PyObject
dict)
buffers
buffered_stdio
"PyUnicode_DecodeUTF7Stateful()"
values;
MUST
PyConfig_SetBytesArgv(&config
continue;
"O!"
literals
introduced
default
"PyCode_NewEmpty()"
"PyCapsule_New()"
Py_Exit(int
"str[size-1]"
"PyMem_Realloc()"
"PyUnicodeDecodeError_SetReason()"
PyEval_ThreadsInitialized()
*length)
usecond)
PyMapping_HasKey(PyObject
management)
*(*reprfunc)(PyObject*)
error_traceback);
"PyErr_SyntaxLocationObject()"
tp_init;
Wrong
built-
*NUL*
"python39.dll"
include
sufficient
("str"
PyTypeObject.tp_str
"readinto()"
"PyExc_MemoryError"
*step)
structure
designed
unwanted
PyContextVar_Reset(PyObject
"PyUnicode_AsUCS4Copy()"
"safe_path"
show_ref_count
"PyUnicode_GetLength()"
Setting
key-value
wraps
non-Python
configuration
itemsize:
4
Does
stolen
"PyErr_SetNone(PyExc_MemoryError)";
"PyDictValues_Type"
*ob
lengths
Versioning
*buffer_length]
delete
"nb_inplace_remainder"
subtype's
F
types*
"Py_DECREF()"
PyNumberMethods.nb_lshift
types
stable
PyComplex_RealAsDouble(PyObject
values
module)
PyMem_RawMalloc(size);
va_list
Query
difference
install_signal_handlers
subclasses.When
**pvalue
PyFrozenSet_CheckExact(PyObject
options)
chosen
treatment
*PyDescr_NewWrapper(PyTypeObject
"PyEval_CallFunction()"
failed
Parser
preferable
*PySys_GetXOptions()
PyMarshal_ReadLongFromFile(FILE
3.7.0:
"PyDateTime_DateTime")
"-i"
Performance
heaps
*exc
*stdout*
Multiple
PyType_HasFeature(PyTypeObject
manipulated
"PyUnicode_FSConverter()"
listing
"PyImport_Import()"
interacts
"o[i1:i2]"
"PyObject_AsReadBuffer()"
"PyUnicode_DecodeUTF16Stateful()"
items:
PyTypeObject.tp_getattr
"-s"
reached
ease
*PyByteArray_AS_STRING(PyObject
tp_traverse;
shall
created)
regular
*opid*
ch
(The
-----------------------
ndim
"PyExc_UserWarning"
127]
summarizes
PyType_Modified(PyTypeObject
nb_negative;
"PyCodec_BackslashReplaceErrors()"
__abs__
"T_"
*tstate
"['*']"
"PyFile_SetOpenCodeHook()"
easy
operators
PySys_AddAuditHook(Py_AuditHookFunction
"__suppress_context__"
"PyLong_FromUnsignedLong()"
dangling
"PyList_New()"
dict[key]
class)"
PyMemAllocatorDomain
"PyTraceBack_Type"
supported**
PyType_GetFlags(PyTypeObject
reference"
PyBytes_Type
"StopIteration"
"Py_CompileStringExFlags()"
blocking
mode
*locals)
*PyTypeObject.tp_as_mapping
*ptype*
*x*
(*sendfunc)(PyObject*
"long"
fork
mem
prompts
*uni
header
sub-interpreters:
"Py_BytesMain()"
callback
(shallow)
"PyImport_ImportModuleLevelObject()"
managing
called**
fourth
executable
_PyObject_EXTRA_INIT
"'0o'"
ob_base;
*PyThreadState_GetInterpreter(PyThreadState
Stride
order)
"package.module")
PyFrozenSet_Check(PyObject
important
"PyMethodDef"
"NotImplemented"
set)
marshalling
PyCoro_Type
regarding
reader
PyMemAllocatorEx
UTF-8)
operating
Columns:
32
propagating)
"PyObject_CallMethod()"
"PyDict_Keys()"
"sizeof(size_t)"
actions
tp_reserved
frame
In
individual
temporarily
initialisation
goto
de-referenced
LC_CTYPE
PySlice_Check(PyObject
conditions
subtypes;
Py_UNUSED(arg)
"PyDict_Merge()"
"sizeof(void*)";
(traverseproc)myobj_traverse
rightmost
METH_STATIC
PyDateTime_GET_DAY(PyDateTime_Date
companion
"PyNumber_Negative()"
(what
range)
"script
estimated
Usable
m_size
i;
"PyCodec_Decoder()"
readline
"abs(ob_size)"
Py_TPFLAGS_BYTES_SUBCLASS
transformed
"%zd"
newly
makes
*destructor*.)
same:
PyContextVar
distinguish
"PyBUF_READ"
alloc(&ptr
"PyCapsule_Destructor"
*args[0]*
i
TypeError
Exit
exceeds
being
initial
&stop
-------------------------
nb_and;
PyList_GetItem(list
Slots
".pyc"
compared.)
y"
Fail
reduced
serialized
computes
PyUnicode_Fill(PyObject
(*visitproc)(PyObject
manipulate
parser_debug
tuple;
been
speaking
keywords
dev"
*PyObject_CallMethodObjArgs(PyObject
interacting
handler.)
*PyEval_GetLocals(void)
following
PyCapsule_SetPointer(PyObject
*cpathname*
("os.path.pathsep")
__aiter__
Retrieve
len)
script's
*pvalue*
mixed
iternextfunc
nargsf)
"PyCodec_ReplaceErrors()"
"PyStructSequence_New()"
masks
("\x"
"PyMethod_Self()"
offset:
"three");
*PyModule_GetFilenameObject(PyObject
endian:
*overflow_exception)
opcode
initialized:
"PyBufferProcs"
"PyThreadState.on_delete"
DBCS)
exitcode
"x
"PyErr_SetObject()"
module's
Delete
standards
nitems)
Read
(*lenfunc)(PyObject*)
*PyFloat_FromString(PyObject
notification
last
features
"PyImport_ExecCodeModule()"
end
supports
PyImport_AppendInittab(const
full
"repr()"
"_thread"
"pymalloc":
arguments:
"ml_flags"
("c=set(s)")
"user_site_directory"
*tp*
"PyFloatObject"
present);
debug":
hood
"ndim
PyCapsule_IsValid(PyObject
"nb_add")
Treats
characters)
versa
"exit(exitcode)"
fundamental
"array.array"
frees
m_free
set
=============
pointer)
*PyException_GetContext(PyObject
PyGen_CheckExact(PyObject
"PyUnicode_DecodeMBCS()"
operation:
*defaults)
*PyEval_GetGlobals(void)
"PYTHONUTF8"
similarly
name)
populate
*Py_GetProgramName()
destroy
encouraged
*right
A
""%U""
"IncrementalDecoder"
switch
*PyLong_FromString(const
"PySliceObject*"
PyGILState
scopes
Compute
referring
"PyUnicode_EncodeCodePage()"
forget
indicator
******************
existence
Likewise
PyThreadState_DeleteCurrent(void)
interpreter)
Very
"Py_ssize_t"]
"0x01"
"default:"
operate
won't
/=
bytearray
designated
owns
self
**result);
===========================================
nb_inplace_true_divide;
"PyThreadState_GetDict()"
======================
*reason)
*PyNumber_InPlaceXor(PyObject
overwrite
*hashable*
"Py_TPFLAGS_BASETYPE"
None"
nb_matrix_multiply;
"Py_TYPE(o)
methods:
*nargsf*
"Py_GetProgramFullPath()"
nargs);
(computed
*PyObject_Repr(PyObject
*snprintf(3)*
"PyObject_Size()"
denoting
seconds
Py_NO_INLINE
Stichting
*PyFrame_GetGlobals(PyFrameObject
is:
Structure
intact
*PyMethod_Self(PyObject
suppress
*PyTypeObject.tp_dict
"encode()"
using
"memoryview"
*seq2
required
exists;
"importlib";
Mode:
"PyTuple_Size()"
Py_VISIT(self->dict);
"nb_true_divide"
forms
outlive
paths:
"PyModule_NewObject()"
*presult*
"PyExc_SystemError"
PyByteArray_Size(PyObject
errors
(",")
Get
prefixes
presence
VxWorks:
reinitialize
finite
Release()
("sys.argv")
"tp_base"
*format)
module:
[unsigned
escaped
"float.h"
"__instancecheck__()"
PyLong_FromLong(1L));
"KeyboardInterrupt"
"PyContext_Type"
*PyBytes_FromString(const
<pythonX.Y/Python.h>";
encoding
Cautions
"PyRun_InteractiveLoopFlags()"
sizeof(TYPE))"
another
marked
"PyObject_Del()"
"DELIM"
*************************************
optional
*exec_prefix
"/usr/local/lib/python*X.Y*"
block)
|===============|====================|=====================================|
"PyOS_mystrnicmp()"
description
inheritance
"del"
Adds
func(int
Decrement
*slicelength)
step)
*PyFunction_GetClosure(PyObject
allocfunc
*PyDict_GetItemWithError(PyObject
interesting
factory
append
"PyTrace_C_CALL"
PY_MICRO_VERSION
(meaning
("tp_setattr")
Detect
"'Copyright
imported.)
decrements
*token*
"sq_inplace_concat"
"-b"
changed;
"PyInterpreterState_Clear()"
negation
Default:
Py_InspectFlag
storage
"Raw
most
tp_init
PyNumberMethods
Check
"?"
*PyUnicode_DecodeUTF8(const
"PYTHONMALLOC=debug")
Considerations
holds
richcmpfunc
"BytesWarning"
PyErr_Occurred())
*obj*
Assigned
line-editing
"0x03050400"
PyEval_SetTrace(Py_tracefunc
"0":
"PyStatus_Exception()"
Make
Ends
Frees
*cls
other's
tradeoffs
argument
"*exc"
*PyObject_CallMethodNoArgs(PyObject
(when
Py_TPFLAGS_IMMUTABLETYPE
(see
able
*callback
"PyUnicode_Concat()"
successful
readonly
Modules
pseudo-terminal)
7**
&config.program_name
read-
(reprfunc)myobj_repr
considerably
""ascii""
"%ld"
"steals"
*interp*
tp_clear;
Py_DECREF(index);
evaluates
warn_default_encoding
*args);
*kwargs)
decrement
"__fspath__()"
subprocesses
"PySequence_GetItem()"
*PyMarshal_ReadObjectFromString(const
"Y"
T_UBYTE
-1:
"sys.setprofile()"
"PyImport_GetMagicNumber()"
serving
loaded
""UTF-8""
As
"parse_argv"
decide
*items*
"PyType_Type"
*PyDescr_NewMethod(PyTypeObject
=========================
layout
PYMEM_DEADBYTE
operand
*updatepath*
Load
platform's
thread
[2]
calculatin
conjunction
"legacy"
"PyExc_AttributeError"
*callable)
"'\ufffe'"
"fork()"
"PyType_FromSpecWithBases(spec
Reload
PyContextVar_Get(PyObject
"PyExc_UnicodeError"
changed
"int"
deletion)
+------------------+--------------+
concatenation
"PyThread_init_thread()"
headers:
Contains
fetching
illustrates
"UnicodeEncodeError"
words
invalidated
"PyOS_getsig()"
PyDateTime_TIME_GET_HOUR(PyDateTime_Time
"_DEBUG"
core
prereleases
PyList_SetItem(PyObject
Py_LegacyWindowsFSEncodingFlag
PyRun_AnyFileFlags(FILE
"FormatMessage()"
"use_environment"
"PyErr_SetExcFromWindowsErr()"
"'E'"
PyGenObject
("s#"
expression
===========================
"Py_Is()"
deemed
labeled
"PyUnicode_Join()"
*Py_Ellipsis
"descrsetfunc"
(GIL)
*PyTypeObject.tp_subclasses
variable;
(return
*ch*
*msg*
o[key]"
trigger
Accepts
free(buf1);
tasks
increment
overflow
package
varies
PySequenceMethods.sq_length
*newsize*
claim
*PyUnicode_Decode(const
read-only
platforms:
Install
*byteorder)
contract:
opid)
PyErr_Clear()
resized
*_PyObject_NewVar(PyTypeObject
PyDict_SetItem(PyObject
PyModule_AddIntConstant(PyObject
("bytearray")
a:
show
string
tp_hash
.tp_name
"d"
*src
"PyState_FindModule()"
L"/path/to/more/modules");
*v)
"PyArg_ParseTuple()"
figure
"Descriptors"
"old
"PyInterpreterState_GetID()"
characters
script
3.10:
__gt__
inquiry
"PyExc_ConnectionResetError"
"PyTuple_SET_ITEM()"
largest
Unpack
transferring
Isolated
exitcode)
*PyModuleDef_Init(PyModuleDef
"PyUnicode_EncodeFSDefault()"
easily
encode/decode
*attr_name*
"Py_SetPythonHome()"
Py_CLEAR(self->kw);
Due
"tracemalloc"
"case"
*doc*
hook
~
*PyObject_Bytes(PyObject
"iter()"
*substr
accomplished
Specify
Zero
(sub-)interpreter's
i);
"immutable"
*PyObject_CallObject(PyObject
"PyGen_NewWithQualName()"
|===============================|===============================|========================|
floats
"PyNumber_TrueDivide()"
(so
byte_offset
3.x
*sentinel*
assign
Suppress
unicode
*container*
code"
Heap
"PyCapsule_GetContext()"
Parameter
*(*descrgetfunc)(PyObject*
Join
non-trivial
tp_alloc
"PySlice_Type"
Tests
**only**
**pkey
*PyObject_RichCompare(PyObject
secret
escapes
PyCFunction
Escape"
line:
(hashfunc)myobj_hash
work
etc.)
"PyUnicodeEncodeError_GetStart()"
angle
async
"PyStatus.func"
async-signal-safe
Right
returned
extended
shared
*PyNumber_Negative(PyObject
functions
&object
Py_MAX(x
endptr
Redirect:
Py_UNICODE_ISLOWER(Py_UCS4
as:
tp_weaklistoffset;
--------------------
contig
vice
user-defined
finalizing
*without*
*)ptr);
influenced
Core
PyTypeObject*
PyListObject
tp_descr_get
room
side-effect
*offset*
Defined
<N>
"PySequence_Fast*"
PySequence_SetSlice(PyObject
*PySequence_List(PyObject
"sys.pycache_prefix"
"tp_setattro"
"PyEval_EvalFrame()"
*getset)
tracked
Instance
[*typeobject*
small
"PyEval_ReleaseThread()"
are
occurred
debugger
Attempts
*kwdict*
nb_or;
tp_iternext
needed:
_Py_c_neg(Py_complex
PyLong_AsSize_t(PyObject
Py_BuildValue("[iis]"
PyList_SET_ITEM(PyObject
(Py_ssize_t)(nargsf
"PyCapsule_Import()"
none
*PyVectorcall_Call(PyObject
memlen:
*PyNumber_Absolute(PyObject
PyModuleDef_Slot
"abi3"
compiled!)
etc.
decoding
"PyUnicodeDecodeError_GetEnd()"
PyInstanceMethod_Type
set_all(PyObject
*s
*high*
*prefix*
higher-level
non-
*PyUnicode_AsASCIIString(PyObject
my_traverse(Noddy
(due
division
(console
"PyStructSequence_Desc"
replacement
Type-check
needed)
concrete
build
*b*
{"__class_getitem__"
*PyErr_SetFromWindowsErr(int
*PyCodec_XMLCharRefReplaceErrors(PyObject
bits:
importer
"core"
Bytes
*tp_members;
safety;
"Py_InspectFlag"
"i"
'co_cellvars')"
*PyErr_NewExceptionWithDoc(const
mode)
manager*
serialization
snprintf(NULL
(*order*
"PyIter_Send()"
PyErr_SyntaxLocationObject(PyObject
PyLong_AsUnsignedLong(PyObject
_PyInterpreterState_GetEvalFrameFunc(PyInterpreterState
"PyType_Modified()"
"PyObject_RichCompare()":
*PyMemoryView_FromObject(PyObject
per-module
record
guess
code)
*msg
'co_code')"
*PyUnicode_AsUnicodeAndSize(PyObject
based
"PyMemoryView_GetContiguous()"
"PyModule_GetName()"
"PyDict_Clear()"
"PyConfig.base_executable"
*_PyObject_New(PyTypeObject
better
nested
events;
__invert__
*always*
realloc-like
----------------
give
T_BYTE
am_send;
XML
*PyTuple_GET_ITEM(PyObject
stdout
Unless
*PyEval_EvalFrameEx(PyFrameObject
"strides"
Name:
digit
PyList_Check(PyObject
happen
Iterate
PyLong_AsDouble(PyObject
"PyDictObject"
*ob*'s
"unnormalized"
indicate
Convert
realloc(void
"PyExc_TypeError"
counter
"p+1"
"argv[0]"
"PyExc_BrokenPipeError"
Failing
stays
Lock
practice)
work:
"POSIX"
historically
"PyDict_Merge(a
Requesting
appear
reference*
obj
sizeof(void*)")
“platform”
authoritative
(from
PyBUF_SIMPLE
PyCapsule_GetDestructor(PyObject
Domain
feature;
minute
"tp_repr"
fixed-length
overflow)
"goto"
attempt
executing
"__builtins__"
"PyEval_GetBuiltins()"
source;
"0x03"
Py_IsTrue(PyObject
(exponent
"PyMem_Alloc()"
*PyUnicode_AsUCS4Copy(PyObject
working
transition
""malloc""
suspended
fills
*PyUnicode_FromWideChar(const
"Py_SET_TYPE()"
guarantee
Argument
local_clear(localobject
exact
"#if
*bytearray)
"PyUnicode_FromWideChar()"
Py_HashRandomizationFlag
where
bug
once;
PyException_SetTraceback(PyObject
"%s"
*PyNumber_InPlaceTrueDivide(PyObject
MBCS
"user
b
"__hash__()"
update
*ref*
intentionally
(*Py_tracefunc)(PyObject
PyThread_set_key_value(int
METH_O|METH_CLASS
API*
leaving
Python:
"offset"
Note:
(FILE*)
Py_SET_SIZE(PyVarObject
*steals*
1997
*incremented_item
built-in
outer
enabling
determines
replaced
"memcpy()"
*PyFunction_GetDefaults(PyObject
*signum*
"f_lasti"
wrapper
resulting
PyBUF_FULL
"InterruptedError"
(Adding
"PyLong_AsUnsignedLongLong()"
view->obj
"signal.SIG_IGN")
*callable
*index*
"Py_MARSHAL_VERSION"
active
ordering)
sole
(similar
releasing
serial
Py_XDECREF
taken
bail
char*
bytes)
*PyEval_EvalFrame(PyFrameObject
"PyErr_Restore()"
environments
"PyConfig.dev_mode"
multi-dimensional
PySys_WriteStdout()
"Py_NotImplemented"
datetime
"PyObject_InitVar()"
*/
|=================================|======================|====================|=======================|======================|
"Py_GenericAlias()"
instances)
signifying
repr
force
"official"
********************************
normally
tzname
processes
"ob_size"
Debugging
*PyDateTime_DATE_GET_TZINFO(PyDateTime_DateTime
"PyErr_Fetch()"
*bytearray*
"PyTrace_EXCEPTION"
scheduled
truncate
383**
*PyImport_AddModule(const
Py_None)"
"PyUnicode_New()"
NULL"
*Py_GetExecPrefix()
"PyBuffer_FromContiguous()"
*PyUnicode_FromObject(PyObject
"B"
*PyObject_Format(PyObject
|=============|====================|===========================================|
subtype
"PyPreConfig_InitIsolatedConfig()"
"PyObject_SetSlice()"
"PyMem_Malloc(n)";
nb_int;
*PyBytes_AsString(PyObject
object)
Deactivate
(e.g
*PyCodec_Encoder(const
__getitem__
"tp_call"
tzinfo
"backslashreplace"
3.9)
*name
long"
def
link
PyMemberDef
generate
(Note
tied
Interpreter
constructor"
Py_IgnoreEnvironmentFlag
(if
Build
(either
Part
"bytes"
idea;
Frame
x[2][3]"
assumptions
finalization"
nb_inplace_xor;
created;
have
meanings
"AS_DATA"
*PyException_GetTraceback(PyObject
*PyUnicode_EncodeCodePage(int
class
OK
*PyUnicode_Split(PyObject
upcoming
*_PyCFunctionFast(PyObject
*exporter*
clause
code_debug_ranges
facilitate
identity
"+
PyMem_Malloc
"discard()"
Py_UNICODE_TOTITLE(Py_UCS4
"PyObject_GetIter()":
constructs
*PyObject.ob_type
UTF-7
PyTypeObject.tp_free
Decode
PyBUF_C_CONTIGUOUS
prepend
why
threads
"collections.abc.Sequence"
"import
"PyGC_IsEnabled()"
override
wrapped
options
Allocates
(non-Python)
thing
"_Py_Dealloc()"
Py_buffer*
"p+6"
shrink
PySequence_GetItem(sequence
initializer
__rdivmod__
"__slots__"
"object")
**_PyObject_GetDictPtr(PyObject
Py_DebugFlag
case)
PyTypeObject.tp_repr
due
<"tp_bases">
"PyCFunction_Call()"
KeyError
"PyMem_SetAllocator()"
PySlice_AdjustIndices(length
"Py_True"
(flushing
signed
"lenfunc"
tp_setattro(PyObject
"bytearray")
"'sunos5'"
*str*
PyObject_GenericSetAttr(PyObject
"stderr"
no-op
I
non-contiguous
__mul__
indices[n-1]
increased
metatype)
(like
__rmod__
**"D"**:
underscored
statistics
eval_frame)
Python's
yields
**changed**
PyDateTime_DATE_GET_HOUR(PyDateTime_DateTime
"nb_long"
*(*_PyFrameEvalFunction)(PyThreadState
warning)
"PyExc_ImportWarning"
Also
*Limited
ml_flags
U+DC80..U+DCFF;
"itemsize
"type(meth)"
"Modules/_tkinter.c"
*PyFunction_GetModule(PyObject
descriptions)
"PyObject_NewVar()"
"suboffsets"
PyErr_WarnEx(PyObject
PyErr_WarnFormat(PyObject
Escape
Py_INCREF(PyObject
*argc
go
*view);
customized
(PyCFunction)pysqlite_row_keys
PyLong_FromLong(1L);
3119**
"tuple(o)"
it!*
*filenameObject*
separately
"(size_t)-1"
*initfunc*
memory:
"'%d.%d'
*pathname)
PyThreadState_GetID(PyThreadState
Asynchronously
bears
"GetLastError()"
"__main__"
Direct
"AsyncIterator"
(0x20)
dimension
stand-alone
*PyObject._ob_prev
Categories
":"
generally
standard
*PyNumber_InPlaceMultiply(PyObject
Used
"PyPreConfig_InitPythonConfig()"
"PyBUF_SIMPLE"
Whenever
"tp_subclasses"
PY_VECTORCALL_ARGUMENTS_OFFSET
"PyOS_setsig()"
"'???'"
"PyErr_NewExceptionWithDoc()"
PySys_Audit(const
PyErr_BadInternalCall()
*PyCFunction(PyObject
Py_SetProgramName(const
free(void
"freefunc"
happens
'co_freevars')"
character:
needed
file;
expecting
non-standard
"PyExc_NotADirectoryError"
"char
select
"warnings"
Internal
traverses
seq2:
"tp_dictoffset"
"home"
*filename)
PyCode_GetNumFree(PyCodeObject
*ob)
"PyConfig.pythonpath_env"
also
&traceback);
preconfiguration:
bits)
interpreter;
[3]
**prefix**
"PyObject_AsFileDescriptor()"
"os.close()"
"assert(0)"
*index
completed
subtle
>=
*PyObject_GetAttrString(PyObject
*nelem*
finish
"%i"
The
equality
3.7.1:
calculation
What
**without**
*qualname*
print
represents
different
null
*filename*
parameter)
optimized
bases)"
"warnoptions"
Properly
*pkey*
"PyObject_SetAttr()"
__imod__
everything
"p[-S+1:0]"
65535
located
"datetime.timezone"
*pyfloat*
*tp_name*
lld
messages
APIs
ModuleSpec
interns
PyUnicodeTranslateError_SetEnd(PyObject
Py_DECREF(obj)
"\U")
weakref_ref(PyObject
exiting
*filename
"getattr(co
(this
PyAIter_Check(PyObject
"pybuilddir.txt"
"PyExc_BufferError"
*config_str
plumage*
distributors
i)
"Py_CLEANUP_SUPPORTED"
3.5
"alternate"
named
Map
auditing
("Py_mod_exec")
*a*
safety
"tp_clear"
*PyErr_SetImportError(PyObject
lineno)
int
self->attr
to)
PyDate_CheckExact(PyObject
PyLong_AsLongLong(PyObject
exposing
Python.)
"BrokenPipeError"
"PyTupleObject"
"PyErr_SetHandledException()"
any)
ValueError
freeing
alive)
tp_init(PyObject
PyObject.ob_refcnt
PyDoc_STR("Returns
leaks
__float__
("PYMEM_DEADBYTE")
*ownership
those
representation;
"PyBytes_FromString()"
3
config.module_search_paths_set
"!="
*b
phases:
point
Notes
Py_XDECREF(PyObject
PyDelta_CheckExact(PyObject
"allocfunc"
"PyCodec_Register()"
skipping
"U+FFFD"
below):
Explicit
*PyDate_FromTimestamp(PyObject
"sys.orig_argv"
PyObject_AsFileDescriptor(PyObject
pos)
*);
PySequence_DelItem(PyObject
PyOS_snprintf(char
("EOFError")
entire
assumes
"Py_ExitStatusException()"
"PyModule_AddObjectRef()"
("3"):
program
Py_UNICODE_IS_SURROGATE(ch)
PyAsyncMethods.am_aiter
row.")}
"PyObject_GetItem()"
debuggers
variables;
FILE
"PyErr_SetFromErrnoWithFilenameObjects()"
"/usr/local/plat"
+--------------------+-----------------+---------------------------------+
*PyOS_FSPath(PyObject
*is*
aborted
well
platform-
PyEval_InitThreads()
Under
public
noted
"surrogatepass"
*maxchar*
"pythread.h"
"Py_CompileStringObject()"
Py_IsNone(PyObject
3.6:
retrieving
integer;
Besides
PyMapping_Size(PyObject
result;
Possible
top
"PyErr_SetInterruptEx()"
PyBUF_FULL_RO
Application
Arguments
*funcname
"PyComplex_RealAsDouble()"
"PyOS_InterruptOccurred()"
variable)
units."
"python.org"
//=
Dynamic
*PyMem_Resize(void
represent
";"
manipulating
non-dynamic
type-oriented
Reference
Such
obj)
ambiguous
...)"
Compilers
argcount
"sys.getobjects()"
--with-platlibdir
in-memory
PySlice_AdjustIndices(Py_ssize_t
__xor__
PyFloat_GetMin()
excess
backwards-compatible
forward
"Py_GenericAliasType"
*Py_CompileString(const
"Q"
modification
"'F'"
"malloc":
"PyUnicode_DecodeUTF8()"
KeyError:
"PyUnicode_AsUTF8String()"
T_PYSSIZET
PyEval_AcquireLock()
Py_TPFLAGS_BASE_EXC_SUBCLASS
"pymalloc"
"PyThread_tss_create()"
variables:
"Py_tss_t"
*cannot*
hinting
initialization:
(PyModule_AddObject(module
forth
PyErr_Clear();
"_freeze_module"
255)
weakreference
*PyObject_Str(PyObject
"PyStructSequence_Field
sizeof(char
|===========================================|===================================|============|
unlimited
*v*
inside
*PyImport_ExecCodeModuleWithPathnames(const
*PyType_FromSpecWithBases(PyType_Spec
all
nb_lshift;
PyNumberMethods.nb_inplace_or
*PyUnicode_FromKindAndData(int
*buf
before
*argv*
--
"datetime.datetime"
deleter
helps
+---------------------------------+---------+-----------+--------------+----------+------------+----------+
DECREF'ed
"PYTHONINSPECT"
PyRun_SimpleString("import
(any
"class"
5
*keepend*
*flags
(incremented_item
"PyDateTime_Delta"
reference)
"l"
Big-endian
{"__dictoffset__"
o2
==============
*Py_GenericAlias(PyObject
PyEval_SetProfile(Py_tracefunc
PyObject_Del
"friendly"
Operating
~~~~~~~~~~~~~~~~~~~~~~~
[char]
PySequence_Index(PyObject
PyCapsule_SetName(PyObject
terms
*heap-allocated
"site"
results
"PyContextVar_Type"
PyUnicodeDecodeError_GetStart(PyObject
("PyUnicode_1BYTE_KIND")
absolute
"PYTHONFAULTHANDLER"
porting
siblings)
parsed)
"__eq__()"
ISO-8859-1
PyLong_FromLong(value);
.tp_dealloc
nargsf
depend
exit(1);
function;
Py_RETURN_TRUE
"%x"
"PyLong_AsVoidPtr()"
severely
exporter
Py_ssize_t)
PyBUF_FORMAT
|=====================|=================|==================================|
*obj
resources
Py_PreInitializeFromBytesArgs(const
-----
"PyExc_ConnectionAbortedError"
__rand__
"Py_DTSF_ALT"
Include/patchlevel.h
3.7
*PyList_GetItem(PyObject
*left
*item
error)
weakreflist)
*(*unaryfunc)(PyObject*)
penalty
ensures
PyContextVar_CheckExact(PyObject
Py_TPFLAGS_BASETYPE
"PyDict_GetItem()"
mean
(!index)
directly
compiling
"nb_inplace_add"
PyStatus_Ok();
**bytes
then
"PyContextToken"
often
"PyObject.ob_refcnt"
Keyword
disable
"PY_VERSION_HEX"
*PyImport_Import(PyObject
PyNumberMethods.nb_bool
(since
Find
constructed
perhaps
*stderr*
*PyUnicode_AsRawUnicodeEscapeString(PyObject
Cache
calling
%
incremented_item
"PyModule_New()"
*PyUnicodeTranslateError_GetReason(PyObject
"sq_concat"
lowercase
"z*"
Type
subtypable
"&PyBaseObject_Type"
"*val"
*fatal*
refer
PyLong_AsLongAndOverflow(PyObject
"Py_XNewRef()"
variable:
evaluation
cleared
*PyMemoryView_FromBuffer(const
PyTuple_GET_SIZE(PyObject
fix
*Py_GetPath()
"PyNumber_Absolute()"
"__getattr__()"
PyErr_Fetch(PyObject
firstlineno
*userData)
exhausted
squirreled
dummy
PyDict_MergeFromSeq2(PyObject
""???""
Issue
multi-byte
"PyDict_DelItemString()"
flags)
PyTime_CheckExact(PyObject
repeating:
-------
Exporters
breaking
Debugger
Fundamental
"tp_setattr":
"PyMethod_New(func
***argv)
maybe
"Py_NewInterpreter()"
sources
"BufferError"
"multi-phase
If
event
"PyExc_FileExistsError"
runtimes
instead;
*PyObject_GC_Resize(TYPE
defines
Returns
message
"%zi"
str)
+
*anything*]
NumPy-style
"nb_divmod"
("bool")
"PyConfig_Read()"
subclass
PyException_SetTraceback(val
glory:
statement;
"PyEval_SetProfile()"
*from
manner
3.8:
*n
"PyBUF_ND"
does)
logs
Linux
"initmodule"
*PyCode_GetFreevars(PyCodeObject
prefix)
Failure
(converted
*PyMapping_Keys(PyObject
"ternaryfunc"
__getattr__
*mode
search
ID
*PyObject_GetIter(PyObject
token*
return;
Iterator
PyErr_NormalizeException(PyObject
"-x"
decoded
methods/attrs
situation
behaves
first)
signature
("PYMEM_CLEANBYTE")
way;
*PyNumber_InPlaceRemainder(PyObject
*PyUnicode_DecodeUnicodeEscape(const
"sys.stderr"
sum(strides[j]*(shape[j]-1)
inconsistent
"PyMem_Malloc()"
zeros
"exit(status)"
PyUnicode_Tailmatch(PyObject
"1":
"PyObject_Hash()":
*descr)
denote
(decode
Decoding
"L"python3""
PyWideStringList_Append(PyWideStringList
Finish
__radd__
*DBL_MIN*
user
PyMappingMethods.mp_length
There's
Py_AddPendingCall(int
cryptographic
"L"default"":
"tp_descr_set"
"__module__"
*PyLong_FromUnsignedLongLong(unsigned
finalization
controlled
3.9.x
(striding
NotImplemented
PyWeakref_CheckRef(ob)
interruptible
sending
the
destructor)
variety
"PyVectorcall_NARGS"
"tp_itemsize")
""%zi""
strip
configured
behaviors
"Py_TRACE_REFS"
PyStatus_IsExit(PyStatus
*stdio_errors
Py_UNICODE
"*size"
"__origin__"
PyStructSequence_UnnamedField
"PyMem_NEW(type
"PyErr_GivenExceptionMatches(PyErr_Occurred()
individually
*PyTuple_Pack(Py_ssize_t
slicing
*interp)
PyIter_Check(PyObject
-1
various
contiguity
"PySys_SetPath()"
reverse
ints
detect
|=====================|=======================|====================================|
"PySequence_DelSlice()"
"_PyCFunctionFast"
exceptions
config.isolated
Must
PyMappingMethods.mp_subscript
new
section
*PyErr_SetExcFromWindowsErrWithFilenameObject(PyObject
removes
"PyUnicodeEncodeError_SetReason()"
"nb_absolute"
"PyCFunction_GetFunction()"
PyObject*)
prepended
--without-
otherwise
PyBUF_CONTIG_RO
technical
*w
initially
field)
interface;
*kwnames*
detector's
*view*
modified;
PySys_FormatStdout(const
*buffer_len)
PyDict_Size(PyObject
complains
example)
s"
deduced
"gc.is_tracked()"
tp_as_buffer
programmers
Py_UNICODE_TODIGIT(Py_UCS4
you're
"name"
1114112
|====================|=================|=================================|
attempting
"OSError"
PyErr_SetObject(PyObject
*PyThread_tss_get(Py_tss_t
PyBuffer_SizeFromFormat(const
Py_UNICODE_ISSPACE(Py_UCS4
(In
low
"sys"
profile
__iter__
"initialized"
64
N
Py_buffer
decreasing
(unsigned
"code"
"m_free"
*PyCell_Get(PyObject
method:
"_PyObject_Vectorcall"
PyTrace_EXCEPTION
"0x2"
PyImport_ImportFrozenModule(const
status:
PyFile_SetOpenCodeHook(Py_OpenCodeHookFunction
**ptr
grab
Initialization
"PyUnicode_DecodeUTF32Stateful()"
setup
*list;
finder
"printf("%lld")"
*suboffsets
CPython's
(*initfunc)(void);
*(*)(PyObject
PyBytes_Check(PyObject
sign)
"T_OBJECT_EX"
*PyNumber_Remainder(PyObject
configure
*Py_EncodeLocale(const
(*ssizeobjargproc)(PyObject*
it's
"PyUnicode_RichCompare()"
*PyMapping_Values(PyObject
local_traverse(localobject
"PyUnicode_READ_CHAR()"
*order*)
3.7.1+:
*******************
favour
"self"
tp_dealloc
*lowest*
"Py_CompileString()"
intentional.)
GILState
simple:
PYMEM_CLEANBYTE
reduction
"&PyType_Type"
minor
paired
*source*
occur
PySys_FormatStderr(const
*end_line
Py_END_ALLOW_THREADS
*PyObject_CallMethod(PyObject
"PyEval_RestoreThread()"
Solaris
remove
supported;
zero-initialized
true
"length"
requests
These
"tp_str"
*unicode*
count*
hundreds
begins
PyStructSequence_Field
"'win'"
Py_DECREF(item);
"PyModuleDef_Base"
Py_UNICODE_IS_LOW_SURROGATE(ch)
supported
(value
PyErr_SetFromErrno(type);"
*string)
floating
2.x
compilers
call**
callback);
*platlibdir
"PyUnicode_DecodeUTF8Stateful()"
suboffsets
*tp_subclasses;
PyUnicode_1BYTE_KIND
throwflag)
"printf("%zu")"
Py_TPFLAGS_HAVE_FINALIZE
*to
annotations
top-
size
initsigs)
PyList_Size(list);
*type
Types
against
"ProcessLookupError"
tag
one)
"n"
*pathname
use_environment
change
Py_XDECREF()
"PyNumber_AsSsize_t()"
nb_bool;
"PyMem_SetupDebugHooks()"
traversal
*name)
immediate
Invalidate
address
e.g.
********
"size
*fill_char*
referencing
returned;
*create_module(PyObject
expects
simplest
inst_dict)
O
*tp_cache;
want
*step
Py_UNICODE_TOUPPER(Py_UCS4
442**)
aliases
calculate
'utf-8'
Py_UNICODE*
*
"PyGC_Collect()"
modes
encounter
PyComplex_ImagAsDouble(PyObject
attr_name)"
(*rv*)
T
overwriting
"hash()"
usecond
__rxor__
maxsplit)
"Py_None"
ins
dedicated
86399
PyThread_tss_create(Py_tss_t
range(ndim)
*errors)
*PyUnicode_AsCharmapString(PyObject
*PyCMethod(PyObject
Py_PreInitialize(&preconfig);
conventions:
"KeyError"
builds
__base__
triggering
<=
of
"._pth"
upon
structure:
Py_RunMain(void)
"PyGetSetDescr_Type"
"Py_TPFLAGS_DEFAULT
*PyUnicode_DecodeLocale(const
"tp_dict";
"PyByteArray_FromObject()"
affect
"__int__()"
*PyObject_GC_NewVar(TYPE
class*)
PyByteArray_Check(PyObject
"o1
"PySys_SetObject()"
maliciously)
PyImport_ExtendInittab(struct
"PyErr_SetFromErrnoWithFilenameObject()"
deleting
*PyDict_GetItem(PyObject
null-terminated
"__all__"
"munmap()"
this)
"PyLong_Type"
tend
3.9:
try:
element.");
"PyThread_allocate_lock()"
"$"
decode
"%lld"
"PyMem_Malloc()")
suites
"tp_dealloc"
vectorcallfunc
*home)
contained
"__class__"
optional/expanded
Domains:
"getenv(s)"
code_page
successful;
activity
"mbstowcs()"
slots"
"type(o)"
"PyInterpreterState_Delete()"
caller
substring
uses
implements
"PY_RELEASE_LEVEL"
proxy
*pylong)
prevent
dynamically
(big
"marshal"
wchar_t*
"traverseproc"
"PyDictIterKey_Type"
Reset
*derived
Counts
*co)
*newpart*
repeated
Main
Codecs
Provisional
529**)
lu
such
depending
"PyType_GenericAlloc()"
""
Preinitialize
*program_name)
*PyFrozenSet_New(PyObject
preinitialized.This
Weak
*exc*
enum
guarantees
*strong
*buf3
Documentation
(2
3.8
*Py_GetBuildInfo()
place
encoding*
"PyUnicodeIter_Type"
Pass
module_search_paths
999999
"PyUnicodeDecodeError_GetObject()"
----------------------
signal
Assign
*args[1]*
long-running
config
producing
under
"sum_sequence()"
sub-interpreter
de-
associated
"PyType_GetModuleState()"
"n
.tp_base
"PyTupleIter_Type"
+----+----+----+----+
buffered
handling
"UnicodeDecodeError"
"PySet_Type"
"PyGILState_STATE"
Py_VISIT(self->foo);
(especially
("bytes"
"\u"
slightly
*subtype*
PyErr_Restore(type
approach
tp_itemsize
Dump
PyRun_AnyFile(FILE
PY_MAJOR_VERSION
"exceptiontable"
faulty
__isub__
ORed
"PyUnicode_DecodeFSDefault()"
590**
"%S"
"WindowsConsoleIO"
import-related
(size_t
deallocate
__index__
depth
*does
cases
these
*PyUnicode_AsUnicode(PyObject
sendfunc
instance's
tp_setattr
requesting
distributor
path
*dict*
*op*
*cpathname)
versions
Py_Version
VAL_A
"EINTR"
supposed
name
consists
*PyDateTime_FromDateAndTimeAndFold(int
indirect
extensions
"keys"
steps:
Py_MEMBER_SIZE(type
tp_descr_get;
prefix
*def*
Py_TPFLAGS_DISALLOW_INSTANTIATION
Py_ABS(x)
"PyObject_VAR_HEAD"
PyUnicode_ReadChar(PyObject
bad
foo_dealloc(foo_object
"PyCFunction"
remaining
shape[ndim-1]
alignment
singleton
"PyImport_ExtendInittab()"
"Py_BuildValue("(OO)"
Generally
content
"PyUnicode_WCHAR_KIND"
*filenameObject)
consumes
received
"PyEval_ThreadsInitialized()"
streams:
tab-completion
parses
installed:
column
again
*maxcount*
"'python'"
ternaryfunc
*TYPE*
__lshift__
TSS
"PyImport_ImportModuleLevel()"
deconstruct
incompatible
purposes;
*PyBytes_FromObject(PyObject
*path
splits
*inform*
"PyObject_Realloc()"
de-serialization
"tp->tp_flags
"PyModuleDef_HEAD_INIT"
"0x030A0000"
"PyUnicodeEncodeError_SetEnd()"
construct
void*
*attr_name
truth
hashable
big
"Py_DTST_INFINITE"
copying
apply
__floordiv__
up
mapping"
analysis
<R>
like
site-dependent
"-1.0"
"PyErr_Restore()")
"Separator"
GenericAlias
put
"faulthandler.enable()"
"cookbook"
*attr_name)
invoke
non-static
entails
*PyUnicode_AsLatin1String(PyObject
*args*)
format_code
*view)
implementing
bounds
"PyUnicodeTranslateError_SetReason()"
PyDateTime_CheckExact(PyObject
deleted
"printf("%i")"
"tp_alloc"
am_aiter;
*override*
numerical
*hook*
Function
*PyUnicode_AsUTF8(PyObject
unused
"T"
Create
PyGC_Collect(void)
PyNumberMethods.nb_or
length
*PySequence_ITEM(PyObject
""replace""
Don't
issued
(accessible
"PyWeakref_GetObject()"
enter
PyUnicode_WRITE(int
"CP_ACP"
"PyExc_NameError"
"PyEval_CallMethod()"
failure
compile
PyUnicodeObject*
"'X'"
"Py_False")
number;
|=======================================|============|
_frozen
principle
"sys.path"/"pkg.__path__"
"sq_length"
PyErr_NoMemory();
building
"-W"
API
*PyLong_FromLongLong(long
PyVarObject.ob_size
*Py_TYPE(PyObject
Resolution
unassigned
initialization)
*list*
"sys.flags.no_site"
Manual
revision
strategies
*PyUnicode_FromString(const
"PyObject_"
"m_slots"
*PyNumber_Long(PyObject
taken)
*exporter
directory:
second
Order
Show
pair)
assured
"PyVectorcall_NARGS()"
*list
*PyUnicode_EncodeLocale(PyObject
*result
NUL-
"PyEval_GetFrame()"
"PySequence_Fast()"
Pack
"nb_add"
describe
and/or
total;
See
typedef
================
could;
omit
"PyUnicode_Contains()"
index
nb_inplace_lshift;
anytime
nature
"signal"
*sys.stderr*;
"meth(obj
microsecond
*PyComplex_FromCComplex(Py_complex
*PyInterpreterState_Head()
587**
"int(o)"
emit
capsule's
PyMethod_Type
deprecated
"Py_buffer"
*locals*
PyUnicode_AsWideChar(PyObject
Coding
Pattern
PyGen_Check(PyObject
report
level:
avoided
caught
"tp_weaklistoffset"
Usage:
PyNumberMethods.nb_inplace_true_divide
"PyType_GetFlags()"
PY_RELEASE_LEVEL
consumer
*filenameObject
documented
Configure
tp->tp_free(self);
*o3)
PyAsyncMethods
PyOS_string_to_double(const
"PyRun_SimpleStringFlags()"
"path"
PyArg_ParseTupleAndKeywords(PyObject
"__init__()"
"Unicode
PyStatus_IsError(PyStatus
writes
User
"PYMEM_ALLOCATOR_PYMALLOC"
*cf_flags*
created
PyConfig_SetBytesString(PyConfig
man
High
*prefix
"PyCodec_KnownEncoding()"
"%llu"
"Py_tp_base"
"PyExc_UnicodeWarning"
&step)
1)
UTF-32
*Py_CompileStringObject(const
make
("PYMEM_FORBIDDENBYTE")
PyNumberMethods.nb_remainder
*value*
__rrshift__
inverted
__len__
"PyObject_CallOneArg()"
Some
cycle)
*already
codepoints
Default
*exceptiontable)
pre-processor
*PyType_Spec.name
traced
preferably
PyRun_SimpleFileEx(FILE
PyCallIter_Type
PyType_Spec.itemsize
times
allocators
they've
zero
PyUnicode_Compare(PyObject
*PyUnicode_AsUTF8String(PyObject
to:
*m_size*
firstlineno)
*__module__*
*PyCapsule_GetContext(PyObject
unlike
Union
statement)
mind
"PySys_SetArgv()"
tricky
"PyMem_MALLOC(size)"
records
+-------------------------------+---------+-----------+--------------+
"PyModule_SetDocString()"
*PyFunction_GetCode(PyObject
Implementing
frozensets
T_UINT
*kind*
PyBuffer_ToContiguous(void
"Py_FatalError()"
PyLong_AsLong(item);
"L"
*b)
(PIL)
Because
error
buflen
"warnings.filters"
document
guard
"PyConfig_SetArgv()"
*PyMemoryView_FromMemory(char
"PyNumber_ToBase()"
"callable(*args)"
128
"PyUnicodeTranslateError_GetObject()"
*set
realize
indices[i];
"PyErr_SetInterruptEx(SIGINT)"
"PyMapping_Keys()"
inspect:
"Py_GetProgramFullPath()")
"+0.0"
"NULL"):
*fromlist
Unlike
PyErr_SetExcInfo(PyObject
generated
coerce
"PyThreadState_GetFrame()"
"str(o)"
*PyModule_NewObject(PyObject
*run_command
members:
family
tp_doc
Profiling
"sys._base_executable"
"PYMEM_DOMAIN_OBJ"
"sys.exc_info()"
"PyFunction_New()"
""B""
"PyObject_CheckBuffer()"
*preconfig
instance
*(*iternextfunc)(PyObject*)
memory;
see
"printf("%p")"
misnomer
*********
sys.version_info[:2]"
hinted
*PyGen_NewWithQualName(PyFrameObject
*fromlist*
commonly
succeeds
provided
collected
"wchar_t*"
Py_VISIT(self->bar);
configure_locale
(const_one
"Py_SET_REFCNT()"
Silently
"PyCF_ONLY_AST"
*default_value
between
*creation
__imul__
Force
PyTZInfo_Check(PyObject
console
faster
but
"U#"
Assumes
***********************************
"PyObject_Print()"
"PyFloat_GetInfo()"
*Filesystem
"PyErr_SetExcFromWindowsErrWithFilename()"
Built-in
specifiers
incref
Python.h
PyInterpreterState_Delete(PyInterpreterState
"int.to_bytes()"
"PyUnicode_BuildEncodingMap()"
Opt-in
n)
t
memoryview's
"Py_END_ALLOW_THREADS"
*PyNumber_TrueDivide(PyObject
contribute
tuples
"PyUnicode_Count()"
"tp_new"
"PyDateTime_IMPORT"
Small
"Py_UNBLOCK_THREADS"
PyPreConfig
"NULL";
PyNumber_AsSsize_t(PyObject
Signal
"PyType_Slot"
*global
PyMem_Del(void
elsize)
into
Special
root
terminated
"__init__"
"interactive"
(PyErr_Occurred())
ParseTuple
implies
(ASCII
slot's
PyLong_AsLong(value);
PyByteArray_Type
nb_absolute;
*value);
"Py_GetVersion()"
*PySet_New(PyObject
PyNumberMethods.nb_inplace_rshift
"print('Run
collector:
PyNumberMethods.nb_inplace_and
"dir(o)"
*bytes-like
__lt__
iteration;
nb_inplace_and;
**p**redicate)
PyNumberMethods.nb_rshift
*iterator
somewhat
"datetime.time"
*PyCode_GetVarnames(PyCodeObject
exp)
simpler
"RecursionError"
*PyComplex_FromDoubles(double
"%lu"
"tuple"
run
PySequence_Length(sequence);
type"
described
void*)
exporting
invocation
weakref
version
"printf("%lli")"
*PyBytes_FromFormat(const
PyThread_delete_key_value(int
"PyObject_GenericSetDict()"
offer
*temporary*
accessible
accurate
__del__
PyList_Append(PyObject
PyTypeObject.tp_flags
.tp_clear
type:
PyObject_GenericSetDict(PyObject
"PyBytes_FromStringAndSize()"
flags"
**kwargs)"
tricks
(actually
UCS-4)
PyRun_SimpleFileExFlags(FILE
"PyUnicode_EncodeFSDefault()";
"-E"
Fortran-style
"PyOS_strtoul()"
Finalization
PyContextToken_Type
scheme
"';'"
*base_executable
PyDateTime_TIME_GET_SECOND(PyDateTime_Time
namespace;
*i*th
*PyFrame_GetCode(PyFrameObject
parentheses
..."
"approximate"
*PyNumber_Or(PyObject
families
"m_size"
"nb_inplace_or"
}"
*PyType_GetModuleByDef(PyTypeObject
left
delicate:
"Py_BEGIN_ALLOW_THREADS"
===================================
Other
PyFloat_AS_DOUBLE(PyObject
PySet_Contains(PyObject
****************
//
"PyModule_GetFilename()"
exported
separator
*stack_level*
responsible
PIL-style:
"tp_iternext"
*args)
*mem*
tp_str
submodule
valid;
at-a-glance
Py_mod_exec
"Py_REFCNT()"
doubly
"nb_int"
"PySet_Size()"
"itemsize"
xoptions
"Py_AddPendingCall()"
"PyDict_SetItemString()"
(char
adjusted
"PyUnicodeDecodeError_GetReason()"
"PyCapsule_IsValid()"
positional
*PyEval_GetFuncName(PyObject
"-5"
obvious
*PyModule_GetNameObject(PyObject
attached
PyObject_IS_GC(PyObject
("5"):
*PyErr_SetFromErrnoWithFilenameObjects(PyObject
reference-stealing
**pend*
PyMem_SetupDebugHooks(void)
dictionary;
among
insight
differ
dimensions
*PyObject_GenericGetAttr(PyObject
*pathname*
"'0x'"
"PyEval_SetTrace()"
Py_UNREACHABLE()
technique
coerce_c_locale
non-"NULL"
"IndexError"
restricted
(PyObject_SetItem(target
*object
*PyObject_VectorcallMethod(PyObject
choice
*tstate*
3.2
"tp_itemsize"
(must
*PyUnicode_DecodeUTF8Stateful(const
"-I"
"ssizeobjargproc"
modules:
"ref"
looking
respective
"mymod.MyStr"
contrast
indices[0]
PyMem_Malloc(BUFSIZ);
showed
*inst*
Display
"nb_inplace_floor_divide"
(static)
"PyLong_AsLongAndOverflow()"
tp_finalize(PyObject
tp_as_sequence
__rmatmul__
"PyCode_New()"
*path)
PyDict_DelItem(PyObject
manipulations
Unicode
packaging
"PyObject_RichCompareBool()"
combine
"PyObject_*"
closely
searched
*PySequence_GetItem(PyObject
well-understood
*PySeqIter_New(PyObject
a
remainder
"PyMemAllocatorEx"
"PyUnicode_Split()"
PyUnicodeDecodeError_SetEnd(PyObject
plans
{"keys"
i2)
"output
brevity
checked)
regardless
complexity
"int
PyDateTime_DELTA_GET_DAYS(PyDateTime_Delta
"__context__"
*PyObject_InitVar(PyVarObject
Describes
provoking
*PyTypeObject.tp_getset
reclamation
destroys
"PySlice_AdjustIndices()"
Builds
dispose
*right)
U+DC80..U+DCFF
"PyWeakReference"
nb_xor;
clones
Caveats
Py_Finalize();
"PyTrace_C_RETURN"
"Py_MakePendingCalls()"
"0")
refers
__ipow__
steals
"m_clear"
vary)
descrgetfunc
PySequenceMethods.sq_inplace_repeat
"PyConfig_InitIsolatedConfig()"
*m)
"m_free";
*only*
formatted
*ob*
PyErr_WarnExplicitObject(PyObject
data
PyDoc_STRVAR(name
"PyNumber_InPlaceXor()")
*dict
tp_is_gc;
**string*
__setitem__
Undo
compute
"readline"
*PyType_GetModule(PyTypeObject
Free
capable
*v
steal
Embedding
step);
["tp_cache"]
"namedtuple()"
*consts
"co_qualname"
PyLong_FromLong(i
"PyTuple_GetItem()"
marshalled
"tp_name"
"PyExc_ChildProcessError"
"tp_hash":
indices
Collection
compiled-in
*PyCodec_Decoder(const
physical
Attaches
"PyErr_WarnFormat()"
honor
highest
PyTuple_SetItem(PyObject
...)
Simple
tad
"datetime"
"et#"
interpreter.)
*set*
("PyUnicode_4BYTE_KIND")
receive
"*endptr"
Restore
leave
*closure)
*command
inherit
function:
ends
*PyCallIter_New(PyObject
**val
5.x
*PyImport_ImportModuleLevel(const
included
~~~~~~~~~~~~~~~~~~
*anyset)
"PyDict_Size()"
"bytearray"
*PyException_GetCause(PyObject
*PyMem_RawRealloc(void
(PyStatus_Exception(status))
qualified
+---------------------+-----------------+----------------------------------+
platforms)
1:
strings
quoted
"collections.abc.Mapping"
PyFloat_Unpack4(const
Copies
*PyModule_GetDict(PyObject
PyWideStringList_Append(&config.module_search_paths
"PyLong_AsUnsignedLong()"
"PyUnicodeEncodeError_GetObject()"
__future__
Filename
superclass
refcnt)
uint64_t
("list")
a;
containers
testing
Call
suboffsets:
dependent
"PyObject_Call()")
22:34:28"
(*v[2])[2][3]"
cost/benefit
State
tp_traverse
PyConfig_SetBytesString(&config
application
C-array
PyTypeObject.tp_basicsize
===========
*the
"sys.addaudithook"
(members
"PyUnicode_AsASCIIString()"
"str[rv]")
complex
hierarchy
*status*
"m_traverse"
*s2)
__sub__
beginning
PyErr_SetString(PyObject
acquiring
"iter(o)"
take
"address
exec-prefix
borrowed
signatures
amounts
argc
"TypeError"
*o1*
Moreover
alphabetic
Structures
imag;
unrestricted
((char
*callable*'s
become
hash_seed
avoids
"PyDictRevIterValue_Type"
"PyErr_Format()"
"PySequence_Tuple()"
"PyIter_Next()"
adjust
"sys.exec_prefix"
undefined
*PyInterpreterState_Main()
"_Py_NO_RETURN"
step
tp_getattr;
*extension
fork().*
PyDoc_STR("My
"PyLongObject"
Intern
collecting
kill
(i
PyTypeObject.tp_dealloc
virtual
raised)
*Py_CompileStringExFlags(const
older
"__debug__"
"PyCodec_IncrementalEncoder()"
"PyBytes_Concat()"
PyBUF_STRIDED_RO
"PyState_FindModule"
Py_UCS1
PyAnySet_CheckExact(PyObject
"PyConfig.module_search_paths_set"
macro
produce
"PyRun_StringFlags()"
characteristic
"PySequence_In()"
"PyErr_SetString(PyExc_SystemError
including
"_Py_InternalState"
"PyVarObject.ob_size"
Creates
"releasebufferproc"
confusion
"_ob_prev"
*static*
"PyUnicode_RPartition()"
"PyThreadState_New()"
on-demand
chapter;
*p*
my_obj_methods[]
shape:
protect
PyOS_AfterFork()
3.7.*
first-class
Exception
"PYTHONPLATLIBDIR"
"PyListObject"
PyUnicodeDecodeError_GetEnd(PyObject
"PyConfig.use_environment"
(See
PyEval_SaveThread();":
strides[i]
"o[key]
Py_UNICODE_ISUPPER(Py_UCS4
overridden
DLL)
checked:
"PyOS_strtol()"
allocator
usually
namespace
"tp_as_buffer")
PYMEM_FORBIDDENBYTE
kind
about
Py_INCREF(obj);
live
C-contiguous
checking):
false
tracebacks
"PyType_Slot.slot"
"bare
dot
assertion
truncated
priority:
le)
copyright
together
*tp_iternext(PyObject
open
"PyFloat_FromDouble()"
*PyInterpreterState_Next(PyInterpreterState
backslash
reporting
multi-phase
layer
"PyImport_GetImporter()"
PyBUF_ANY_CONTIGUOUS
collection
*self)
"H"
*Return
__le__
sets
PyModule_ExecDef(PyObject
methods;
(by
"PyTrace_LINE"
-----------------
"PyWeakref_*"
slices
"PyState_RemoveModule()"
*NULL*
disabled
allocators:
patch
certain
whole
"va_list"
*PyDate_FromDate(int
write
Unicode-
CRLF
*PyErr_Occurred()
interruption
"StreamReader"
audit
Discard
Raw-
*context)
set;
system
"PyDoc_STR"
*derived*
converter:
*************
offset
"PyLong_FromSsize_t()"
Maybe
PyType_Spec.basicsize
PyCapsule_CheckExact(PyObject
"PyBytes_FromFormatV()"
(or
PyAsyncMethods.am_anext
__call__
function)
PyUnicodeDecodeError_SetReason(PyObject
Raise
bytes;
3.11.*
type-
*PyObject_GetItem(PyObject
"L"-m""
PyList_Insert(PyObject
"PySequence_Index()"
PyFrame_Type
Alias
min
NUL-terminated
Initialized
*PyNumber_Power(PyObject
message;
independently
PyTrace_CALL
__repr__
PyRun_SimpleFile(FILE
"PyUnicode_GetDefaultEncoding()"
immutable
PyByteArray_Resize(PyObject
PyTypeObject.tp_setattro
Evaluate
*buffer_len*
(obviously)
(For
tp_getattr
thread-local
Unmapped
PyObject_GetIter(obj);
"*config_str"
"PySlice_New()"
sides:
maps
with
"PyThreadState_Get()"
*PyFunction_New(PyObject
*buf1
Integer
no_debug_ranges"
"tp_cache"
"__bases__"
"sizeof(Py_ssize_t)
insufficient
reported
binary16
big-endian
bijection
"""
PyCodec_Unregister(PyObject
cached
per-thread
(*getbufferproc)(PyObject*
"__complex__()"
"readline()"
encapsulating
*defaults*
complicated
"Py_UNICODE()"
itemlist"
converted
*func(FILE
strides
Limited
computing
independent
CPython
hence
Translate
total
harmless)
"list.reverse()"
*format
endian
finally
"cpython.PyInterpreterState_Clear"
success;
*dest
bitwise
(whichever
"PyUnicodeDecodeError_SetStart()"
00:53:55)
concurrency
"PyOS_AfterFork_Child()"
delayed
wrapperbase
needed.)
*config*)
reference.*
Request
modifying
Python
procedures
"PyFilter_Type"
offset+itemsize
associate
visitproc
*PyDateTime_FromTimestamp(PyObject
*PyCodec_ReplaceErrors(PyObject
Minimal
"tp_finalize"
asynchronously
denoted
empty
insulation
"PyEval_AcquireThread()"
"issubclass()"
discarded
PyBUF_F_CONTIGUOUS
"strict"
"*(p+i)"
G
*PyUnicode_Replace(PyObject
nb_inplace_power;
"PyDict_GetItemString()"
PyNumberMethods.nb_divmod
|====================|====================|====================|====|====|====|====|
present)
closing
*self);
only:
warnings
"PyMapping_Items()"
stride
crashes
remain
exec_module(PyObject
T_BOOL
*PyCode_NewWithPosOnlyArgs(int
"PyImport_ImportFrozenModule()"
(bytes
"PyThread_start_new_thread()"
(buf
**run
"PyArg_*"
0-conversion
written:
_Py_c_pow(Py_complex
"tp_descr_get"
"PyTypeObject.tp_name"
PyBuffer_FillContiguousStrides(int
"PyErr_SetObject(PyExc_WindowsError
precise
3.7:
We
object*
*PyType_Spec.slots
"PyConfig.stdio_encoding"
L"/path/to/my_executable");
"O"
*extensions*
Py_BytesMain(int
"PyList_Sort()"
visitor
remains
"nb_inplace_matrix_multip
"<frameobject.h>"
initialized
emitted
"PyUnicode_AsEncodedObject()"
*wrapped)
decreases
*PyNumber_Float(PyObject
basics
mileage
offset;
*desc*
states:
"PyLong_GetInfo()"
describes
"PYTHONPROFILEIMPORTTIME"
<Python.h>
"pthread_atfork()"
obmalloc.c
PyArg_VaParse(PyObject
tp_hash(PyObject
imaginary
posonlyargcount
depends
rich
violate
negative
[*matching-items*]
"PyStructSequence_NewType()"
(often
Windows)
3.6.1
"ResourceWarning"
__int__
*result)
__
PyDateTime_GET_MONTH(PyDateTime_Date
situations
y)
optimize)
"tp_weaklistoffse
*PyNumber_InPlaceMatrixMultiply(PyObject
*y*
collectible
buffer)
*m_slots*
PyFunction_SetAnnotations(PyObject
wchar_*
*op
"sys.platform"
PyWideStringList_Insert(PyWideStringList
thumb
finalizer
"PyObject_DelSlice()"
PyBytes_ConcatAndDel(PyObject
*container
__rmul__
*size*)
Windows;
"func"
*executable
PyNumberMethods.nb_and
earlier
PyFunction_Check(PyObject
Swap
"%.<N>s"
PyNumberMethods.nb_floor_divide
*Py_NewInterpreter()
"NULL":
3.12
"SIGINT"
(at
PyArg_ParseTuple(PyObject
*error*
120
*PyCell_GET(PyObject
PyNumber_Add(item
increments
month
configure_c_stdio
"PyErr_SetImportError()"
tp_iternext;
truncation
"PyType_FromSpec()")
Py_UNUSED(b))
looked
*tp_repr(PyObject
"3.0a5+
de-referencing
tuple/"NULL"
"Py_GetCopyright()"
decrementing
extension's
program_name);
particular
saved
PyBuffer_FillInfo(Py_buffer
tries
PyRun_SimpleString(
----------------------------
either
propagated
*tp_weaklist*
Python-specific
"PyNumber_InPlaceFloorDivide()"
*defaultobj)
*errors*
nitems*tp_itemsize"
"PyArg_Parse*"
"Py_IsNone()"
"o[i]"
complete
"""Verify
"PyLong_FromSize_t()"
"/usr/local"
"PyObject_Vectorcall()"
Win32
Py_UCS2
"PyTuple_Type"
lets
(as
*eventually*
PyLong_AsSsize_t(PyObject
PyCode_Addr2Line(PyCodeObject
"Py_LT"
invocation)
constructor
*stdin
Coroutine
""%lli""
cleanup
enforces
"cpython._PySys_ClearAuditHooks"
yet
pertains
deadlock
"'A'")
applies
built
-----------------------------------
16
PyArg_ParseTuple(args
"PyModule_GetState()")
"Py_DTST_FINITE"
"nb_rshift"
there
tracing
atomic
think
(make
correspond
MRO
detected
"PYTHONDUMPREFS"
"o.attr_name"
that.")
========
(nonzero)
get-attribute
3.2:
*exp*
rewritten
adds
"inquiry"
const
behave
error;
populating
*key*
{NULL
Py_Finalize()
59
"METH_OLDARGS"
*data[1];
usable
"PyExc_TimeoutError"
switches
------------
modeled
character)
*replstr
garbage
"PyConfig.filesystem_encoding"
co-exist
Case
"shape[0]
PyUnicode_Contains(PyObject
NaN
Py_CHARMASK(c)
*nitems*
"-X
unit;
"Py_IsInitialized()"
constants"
"PyMethodDescr_Type"
"PYMEM_ALLOCATOR_DEBUG"
Py_RETURN_NOTIMPLEMENTED
After
whenever
__anext__
prompted
X.Y
"pathconfig_warnings"
caller)
dicts
also:
7-bit
mirror
it)
"visitproc"
forks
instantiate
*o2
512
"0x04"
(!PyLong_Check(item))
str")
754
"tp_basicsize"
tuple)
present:
*PyThreadState_Swap(PyThreadState
"<stdlib.h>"
*PyMapping_Items(PyObject
pairs
buffertype
*=
634**
"PyMapping_GetItemString()"
expect
"PyInterpreterState_New()"
get
objects*
"s#")
aid
defaultvalue)"
not*
cache
application;
interface
"PyIndex_Check()"
"NULL")
sub-slots
aren't
"double"
"PyWeakref_NewRef()"
*PyFrame_GetLocals(PyFrameObject
*cell
zero)
"filesystem_encoding"
appends
Library
(Like
other
orderable
Print
"PyBUF_FORMAT"
embedders
"configured
"PyExc_KeyboardInterrupt"
unrelated
data.**
tp_as_number
.tp_itemsize
Mathematisch
*h*;
*start)
"PyNumber_InPlaceSubtract()"
|=================================|=========|===========|==============|==========|============|==========|
*list*;
*PyDateTime_FromDateAndTime(int
page
Schedule
MS_WINDOWS"
"datetime.date"
"pyvenv.cfg"
func(void)"
"-m"
"'__module__'"
*Py_GetProgramFullPath()
"I"
"_PyObject_CallMethodNoArgs"
PyFloat_Pack8(double
"sys.setswitchinterval()")
("Py_mod_exec"
else
("PyPreConfig.utf8_mode")
Utilities
**byteorder*
3.1:
PyUnicodeTranslateError_GetStart(PyObject
Continue
implementation
*PyWeakref_NewProxy(PyObject
"PySuper_Type"
frozen
Hash
"sys.stdin"
internal
METH_VARARGS
o3)"
PyObjectArenaAllocator
"show_alloc_count"
general)
word
value"
during
confuses
PyTrace_C_EXCEPTION
buffering
"containers"
__rsub__
compressing
*PyTypeObject.tp_mro
PyThread_tss_delete(Py_tss_t
handler:
"PyDateTimeAPI"
Py_UNICODE_ISDIGIT(Py_UCS4
incorrect
*ppos
PyAnySet_Check(PyObject
follow
initializes
(and
*PyDict_Values(PyObject
*spec
detects
etc
__delitem__
res;
*PyTypeObject.tp_as_number
DB
cannot
shell
"PyObject_GC_Track()"
Updated
"2"
**freeze**
slot
PyCode_Addr2Location(PyObject
*instead*
stopped
*prompt*
source-compatible
"PyObject_CallObject()"
*dict)
Py_ExitStatusException(PyStatus
Py_IsolatedFlag
delegate
decodes
*filesystem
lists
__ilshift__
""%lld""
*PyNumber_InPlaceAdd(PyObject
PyLong_AsLongLongAndOverflow(PyObject
"PyExc_RuntimeError"
PyThread_create_key()
passed
title
pickle
"\ufffe"
Changing
"PyDateTime_TZInfoType"
"n_in_sequence"
"PyType_FromSpec()"
goal
((item
"*"
effect
PyUnicode_2BYTE_KIND
converters
Structures;
"getbufferproc()"
site-specific
PyStatus_Exception(PyStatus
type)
Numeric
PyWeakref_NewRef(object
"L"never"":
"PyFile_GetLine()"
*Py_tp_bases*
LF
PySys_SetPath(const
"PyMem_RawFree()"
"PyIter_Check()"
overflow;
"newfunc"
"PyType_GetSlot()"
precompiled
*readonly*
entry.)
"Adding
incremented_item)
*PyModule_FromDefAndSpec2(PyModuleDef
Py_DecRef(PyObject
already
state
freefunc
"list.sort()"
codes
File
excluding
SHOULD
PyObject_Hash(PyObject
printable
PyModule_AddObjectRef(module
*o2*
Specifies
recursive
"PyDescr_NewMethod()"
offset+imin
"M"
*origin*
i2
PyBuffer_IsContiguous(const
<"tp_mro">
&pos
incrementing
Unregister
*tp_richcompare(PyObject
__delete__
Encode
skip_source_first_line
ensuring
demonstrate
caching
inline
PyBuffer_Release(Py_buffer
nb_positive;
input
*defaultobj*
"PyErr_Print()"
'config'
variable
"PyConfig.stdio_errors"
maxchar)
aimed
'F'ortran
"nb_inplace_true_divide"
monitored
*PyDict_GetItemString(PyObject
*tp_str(PyObject
settings)
+=
"mp_length"
PyTypeObject.tp_init
PyArg_UnpackTuple(PyObject
sys.path
"Py_AtExit()"
*locals
"PyConfig.xoptions"
*fort*
sanity
question
Warning:
preclude
"PySequence_SetItem()"
Latin1)
limits
strategy
"SystemError"
unaryfunc
"PyExc_DeprecationWarning"
threaded
(wide
script.py")
*annotations)
(slice
ABI.)*
parts
!=
*dest*
"PyDictRevIterKey_Type"
*co
behavior
canonical
integrate
"PyModule_AddFunctions()"
PyTypeObject.tp_iter
("tp_del")
*item)
"PyOS_mystricmp()"
PyObject**)
("module_search_paths_set")
*m_doc
"PyExc_SyntaxError"
*tstate)
*min*
PyCode_Type
Package
linked
"initproc"
Issuing
*PyCapsule_GetPointer(PyObject
NOT
PyStatus_Exit(int
PyDict_DelItemString(PyObject
Once
acceptable
"PyObject_Call()":
"PyObject_Free()"
+----------------------------------------------------+-----------------------------------------+
*id*
nb_divmod;
Py_TYPE(self)->tp_free((PyObject
PyConfig_SetWideStringList(PyConfig
"Py_TPFLAGS_HEAPTYPE"
*PyMarshal_ReadLastObjectFromFile(FILE
"tp_traverse"
objobjproc
May
*cf)
PyOS_BeforeFork()
"Py_ReprLeave()"
Py_UNICODE_IS_HIGH_SURROGATE(ch)
half-precision
(highest
*PyModule_New(const
.tp_traverse
*im)
trying
False
*PyInstanceMethod_Function(PyObject
Py_SET_TYPE(PyObject
modify
"value"
Called
field
fresh
**items)
"PyLong_AsLong()"
"PyNumber_Check()"
now
"PYTHONHOME"
3)
component
no-ops
"tp_weaklist"
four)
implied
Supported
per-instance
usage:
disables
*item*
Marshal
Empty
"view->obj"
"set"
"arenas"
issues
top-level
binding
*PyNumberMethods.nb_reserved
relevant
3.8.*
Group:
"byte_offset"
"PyUnicode_WriteChar()"
*PyList_GET_ITEM(PyObject
PyDictObject
PyModule_AddObject()
disregard
subtypes
*PyErr_SetFromErrnoWithFilenameObject(PyObject
kept
"extern
"3.10.0"
"PyUnicodeTranslateError_GetReason()"
__ge__
C99
bind
simple
determined
representations
text
__rlshift__
"%V"
Py_NoSiteFlag
"PyPreConfig.isolated"
"PyObject_DelAttr()"
"PyObject_GetAttr()"
computers
symbolic
"PyMemoryView_Type"
Runtime
"PyConfig.executable"
bytearrays
---
model
how
*context*
PySequenceMethods.sq_repeat
"malloc"
may
"ob_type"
tp_free;
"PyThread_get_thread_ident()"
handler
"dict"
(has
*PyThread_get_key_value(int
Enum
"PyNumber_Long()"
("module_search_paths")
*table
integers)
non-empty
*event
New
filenames
"except"
version-specific
*file
(subtypes
"PyObject_VectorcallDict()"
heavily
Meaning
"PATH")
including)
*PyCode_NewEmpty(const
"[items]"
bytes
You
disallows
*PyRun_FileExFlags(FILE
"sys.stderr".)
"f"
mainly
contiguous
invoked
Third-
"__del__()"
packing
"IncrementalEncoder"
initializations
quite
device
put!)
permissible
PySequenceMethods.sq_concat
attributes
"readonly"
"PyNone_Check()"
(other
requirements
**Bugs
~~~~~~~
related
PyConfig_Clear(&config);
"PyType_Ready()"
constrain
"PyNumber_InPlaceMultiply()"
copies
*slicelength*
though
Old
=================================
syntax
Tutorial
detailed
"Py_SetProgramName(file)"
*other
extra
*var
("6"):
nb_subtract;
"__hash__
*ex)
"unaryfunc"
"PyMem_Calloc(1
“unsafe”
mixes
Determines
"--
registered
"#ifdef
*PyRun_FileEx(FILE
Method
phase*
notified
""%R""
unbound
catches
"PyThread_delete_key_value()"
"NameError"
1-tuple
*PyNumber_Add(PyObject
imax
iterated
tp_dealloc;
It
returns.)
"PyMapping_Check()"
Apply
discretion
byte
"binaryfunc"
"vectorcallfunc"
compiler)
*itemlist*
import
"PyTraceBack_Print()"
Variant
PyObject_GetArenaAllocator(PyObjectArenaAllocator
"flags"
tutorial
4.2.3]"
this:
order:
talks
*PyUnicode_New(Py_ssize_t
Local
*o
limited)
PyDoc_STR(str)
1991-1995
Furthermore
"PYGEN_ERROR"
compatibility
PySet_Discard(PyObject
primarily
introducing
your
Similarly
deallocating
(*descrsetfunc)(PyObject*
former
"READONLY"
whose
haven't
"<module>.<name>"
("int")
improve
**endptr
bigger
*func)
"PyThread_tss_is_created()"
Py_AtExit(void
"PyFunction_Type")
compatibility:
tp_version_tag;
exactly
"Py_DEBUG"
"Py_TPFLAGS_METHOD_DESCRIPTOR"
(3)
consecutive
partially
subtuples)
*between*
frequently
*mem
free
*format_code*
backward
sharing
("bytes")
PyModule_AddObjectRef(PyObject
*PyInstanceMethod_GET_FUNCTION(PyObject
*count*
"PyObject_HashNotImplemented()"
(*and*
KiB
(here
"0";
*PyByteArray_Concat(PyObject
*PyErr_SetExcFromWindowsErrWithFilename(PyObject
"is_package"
propagate
"PYTHONDEBUG"
Identical
"D"
*PyContext_Copy(PyObject
*****************
hard
"PyGen_Type";
definition;
odd
*ctx"
"-v"
"setter"
advanced
*PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject
single-element
16);
*PyDict_Copy(PyObject
allocated
Version
*PyNumber_Index(PyObject
+---------------+--------------------+-------------------------------------+
*execute*
faulthandler"
"PyCapsule_SetPointer()"
*err_msg
spaces
indicating
"list.insert(index
Peephole
(call
init
L"/path/to/stdlib");
**with**
leak
h)
enumerated
compiler;
Only
Their
"PyImport_AppendInittab()")
least
"PyUnicode_FromEncodedObject()"
PyDateTime_DATE_GET_SECOND(PyDateTime_DateTime
reserved
+---------------------+--------------------------------+----------------------------------------+
remind
"nb_inplace_subtract"
"printf"
analogous
.tp_new
performed
raised
key):
*byteorder*
__doc__
Shape
circumstances
version)
beta
"getattrofunc"
"PyRun_InteractiveOneFlags()"
PyNumberMethods.nb_inplace_xor
dotted
"legacy_windows_fs_encoding"
expression:
"PyConfig.prefix"
(using
*PyUnicode_Substring(PyObject
library
3.10)
multiple
"__main__.py"
"s"
raw
**should
they
"compile()"
approximation
"PyRun_SimpleFile()"
idea
"PyFrozenSet_New()"
(sub-)interpreter
compatible
meantime
"3.4.1a2"
shown
"FutureWarning"
whitespace
"PyErr_ProgramText()"
non-negative
printing
*PyErr_Format(PyObject
safely
portion
p"
"buffer
types)
*PyErr_FormatV(PyObject
values..
Fast
PyVarObject_HEAD_INIT(NULL
fatal
*mview)
Py_RETURN_RICHCOMPARE(VAL_A
nonzero
*PyNumber_InPlaceAnd(PyObject
PyObject_SetAttrString(PyObject
PyCodec_RegisterError(const
multi-platform
PyStructSequence_SET_ITEM(PyObject
*hashable*;
*bytes*;
"./configure"
__eq__
read/write
"Py_DecRef()"
**automount**
comprehensive
collector
"PyEval_AcquireLock()"
while
descriptor's
as
*static
|============================================|====================|======================|=================|
PyOS_vsnprintf(char
"0x03060000"
*PyTypeObject.tp_bases
surrogate
*vsnprintf(3)*
Recursion
*PyUnicode_FromFormatV(const
varying
long)-1"
success
"PySys_SetArgvEx()"
copy
Py_UNICODE_JOIN_SURROGATES(high
context
*source
C-API
3.4
non-negative;
"PYMEM_ALLOCATOR_NOT_SET"
(effectively)
*(*ssizeargfunc)(PyObject*
Sometimes
Reverse
"PyExc_RuntimeWarning"
bookkeeping
number
3.10.x
__irshift__
PyASCIIObject
coroutine
"(return
*maxsplit*
PyMem_New(char
(passing
"PyExc_AssertionError"
"sq_inplace_repeat"
"PyBytes_Type"
Py_TPFLAGS_METHOD_DESCRIPTOR
declares
default)
(There's
"PyVarObject"
PyMem_SetAllocator(PyMemAllocatorDomain
when
looks
"PyInterpreterState_Get()"
Rather
PyObject_HashNotImplemented(PyObject
"associated
|=================|====================|
calloc(void
*exc)
(C
*preconfig)
NumPy-style:
setter
"GenericAlias"'s
CallSomeFunction();
"__length_hint__()"
__set__
(TSS)
*PyLong_FromSsize_t(Py_ssize_t
*PyObject_Calloc(size_t
wcslen
PyUnicode_Find(PyObject
conversion)
*mview*
Mostly
"fields"
PyType_Spec
warnoptions
front
"python"
"PyByteArray_Concat()"
"PyNumber_InPlaceAdd()"
CPython"
PyBUF_STRIDED
("PyConfig.argv"
item)"
help
simplify
wrapping
"PyNumber_MatrixMultiply()"
(docstrings
PyDateTime_Check(PyObject
"tp_reserved"
Negative
nb_true_divide;
closeit
inlining
"ZeroDivisionError"
followed
allocates
asynchronous
"Py_GetPath()"
Py_RETURN_NONE
*PyDictProxy_New(PyObject
1114111
"MS_WINDOWS"
overriding
character):
whatever
non-zero:
i++)
defcount
"METH_METHOD
right
"script.py"
*default_value*
__ror__
"contextvars.Token"
Perform
Errors
Sequence
Embedded
PyImport_GetMagicNumber()
2.6
*t;
incr_item(PyObject
"nb_or"
*start_line
*throwflag*
"PyUnicode_GET_LENGTH()"
3.0.1
Object
"%d"
locale-independent
only)
(gcc
(PyDict_SetItem(self->dict
subclassed
"Python.h"
"PyException_SetTraceback()"
(easier
"DeprecationWarning"
*PyNumber_InPlaceFloorDivide(PyObject
"METH_NOARGS"
inspect
floor
PyType_Ready(PyTypeObject
tp_getattro
abort
locals
**end*
"state"
filesystem
functions)
PyUnicode_Check(PyObject
malloc'ed
*PyWeakref_GET_OBJECT(PyObject
reference-count-neutral;
Garbage
Requires
"PyVarObject.ob_base"
combining
*err_msg*
*PyState_FindModule(PyModuleDef
PyTypeObject.tp_is_gc
Py_LeaveRecursiveCall(void)
**mount**
"functions"
from_start
temporary
Equivalent
filename
"<errno.h>"
Py_BuildValue("(iis)"
higher
PyAsyncMethods.am_await
*PyObject_GenericGetDict(PyObject
*subtype
NUL
(up
Numbers
misusing
*(*newfunc)(PyObject*
puts
assuming
"PyFloat_FromString()"
previously
"-1";
"sys.last_traceback"
PyMapping_Check(PyObject
"PyList_GetItem()"
PyObject_Size(PyObject
"ContextVar"
"%U"
pass
*PyCodec_StreamReader(const
"PyErr_GetExcInfo()"
"gc.collect()"
pydoc
PySignal_SetWakeupFd(int
"PyVectorcall_Call()"
re-
9-16
*PyCodec_StrictErrors(PyObject
Those
("1"):
importing
*PyWeakref_NewRef(PyObject
exit)
"(1
cls)(*args
PyList_SetSlice(PyObject
*PyErr_SetExcFromWindowsErr(PyObject
*PyUnicodeTranslateError_GetObject(PyObject
iterators
*cell)
'co_varnames')"
instances
Removes
rounded
*PyUnicode_DecodeUTF32Stateful(const
(does
sections
"BaseException"
CVE-2008-5983.On
to
into)
serious
holding
mixture
tp_is_gc(PyObject
*unicode)
discussion
*PyType_GenericNew(PyTypeObject
fset"
Generator
API:
sub-interpreters
"tp_vectorcall_offset"
brace
Constant
*PyDescr_NewMember(PyTypeObject
PyTuple_CheckExact(PyObject
"sq_ass_item"
"#67
logical
prefix"
more
crash
"sys.is_finalizing()"
binaryfunc
platform-*dependent*
distinction
Every
handlers;
PySys_GetObject("path")
friends
*****************************************
example
*PyUnicode_DecodeLatin1(const
"PySet_Add()"
*PyUnicodeDecodeError_GetReason(PyObject
violations
Py_OptimizeFlag
"PyDict_GetItemWithError()"
offset):
losing
flag
"PyUnicodeTranslateError_SetStart()"
"PyBuffer_IsContiguous()"
*(*getattrfunc)(PyObject
"PyBUF_WRITABLE"
corner
"PyMapping_HasKeyString()"
thread-specific
Ensure
lack
"PyBool_FromLong()"
pos
"PyArg_VaParseTupleAndKeywords()"
least-significant
*program_name
@
and
__rshift__
API;
387**
Py_IncRef(PyObject
"Py_SetRecursionLimit()"
"GeneratorExit"
Providing
right)
pair
sequences
METH_O
Same
"PyList_Insert()"
"PyType_GetModule(Py_TYPE(self))"
(we
it
"PyState_AddModule()"
&&
simultaneously
configured:
"PyUnicode_AsMBCSString()"
"PyUnicode_READ()"
"<="
"PyEval_EvalFrameEx()"
"PyEllipsis_Type"
resumed
"EOFError"
"PyExc_Warning"
PyUnicode_4BYTE_KIND
references*
*Py_None
*strides
Disable
"calloc()"
First
dump)
"OverflowError"
"Py_GetPlatform()"
PyType_ClearCache()
"Py_mod_exec"
To
date
docstrings
"p[-S]"
libraries)
accessing
implementations
(i.e.
PySequence_Fast_GET_SIZE(PyObject
"abs(o)"
"PyThread_tss_delete()"
nb_power;
Interface
object)"
"nb_bool"
high
headers)
cheaply
"PyCallIter_Type"
Another
tells
*Py_GetCompiler()
deallocated
Policy
acquired
nothing
capsule
unavoidable
bit
PyModule_AddType(PyObject
titlecase
""malloc_debug""
*where)
PyLong_Type
(Windows
*im*
"PySlice_GetIndices()"
"float()"
PyUnicode_WCHAR_KIND
meaning
"PyImport_ReloadModule()"
splitting
*S*
Py_XDECREF(const_one);
"Safe
optimization_level
("0xDC00
nb_float;
(PyArg_UnpackTuple(args
"io.open_code()"
PyState_AddModule(PyObject
termination
"format
--------------------------
"PySys_FormatStderr()"
PyComplex_Check(PyObject
*PyOS_double_to_string(double
"PyUnicode_InternInPlace()"
(gotten
"PyUnicode_DecodeRawUnicodeEscape()"
bearing
Py_Main(int
preinitialization
"2*S"
"PyThread_get_key_value()"
*PyTimeZone_FromOffset(PyDateTime_DeltaType
(another
you
alter
might
0:
*newtab)
*u*
"PyImport_AddModuleObject()"
specifically
"PyCodec_IgnoreErrors()"
"Exception"
"PyNumber_Rshift()"
=============================
"PyLong_AsUnsignedLongMask()"
(doesn't
*offset
*flags"
Unicode-Escape
nlocals
non-overlapping
"PyUnicode_FindChar()"
3.4:
startup
unconverted
"PyDescr_NewMember()"
**ptraceback)
"PYTHONUNBUFFERED"
platform)
Allocation
"{...}"
grow
C++
"coerce_c_locale_warn"
PyObject_HasAttrString(PyObject
m_clear
guards
"Py_Main()"
safe
library)
"PyDict_New()"
fully
frames
"PyCFunctionWithKeywords"
*tp_alloc(PyTypeObject
Conversely
*co*
PyObject_Length(PyObject
nb_inplace_matrix_multiply;
(set
pymalloc"
"nb_and"
PyTrace_C_CALL
buf..
PyGC_Enable(void)
declaring
candidate
**bytes*
"o[key]"
"types.MappingProxyType"
PyTrace_C_RETURN
*PyMarshal_ReadObjectFromFile(FILE
(PyStatus_IsExit(status))
possibilities:
(excluding
conversions
*Py_CompileStringFlags(const
meta
-------------------------------------
When
"cpython.PyInterpreterState_New"
PyDateTime_DATE_GET_MICROSECOND(PyDateTime_DateTime
divisor)
unintentionally
deallocation
"Py_nb_add"
Debug
struct).*
PyObject_AsWriteBuffer(PyObject
generator
"PyDict_Copy()"
**exec_prefix**
inefficient
All
""%A""
"PyFrameObject*"
|=====================================|=========|===========|==============|==========|
METH_METHOD
pertain
handler*:
presses
interact
Importing
"PyConfig_Clear()"
act
Control
"PySys_ResetWarnOptions()"
oc()"
keeps
*PyObject_Realloc(void
which
"36"
gives
declared
"PyImport_ExecCodeModuleObject()"
nb_inplace_subtract;
will
"tp_hash"
"<stdio.h>"
PyTypeObject.tp_new
"Py_InitializeEx()"
parenthesized
hash-based
embedding
"stdout")
undecodable
*f
unnamed
overflowed
*PyBytes_FromStringAndSize(const
deviations
*element)
"((char
two-item
defaultvalue)
"_ob_next"
"Py_DecodeLocale()"
object:
partial
255]
"undefined
key)
Else
*PyObject._ob_next
PyTuple_SET_ITEM(PyObject
"PyObject_Hash()"
casts
*am_anext(PyObject
treated
PyException_SetContext(PyObject
"PyNumber_Add()"
*PyUnicode_AsWideCharString(PyObject
*globals*
parent
installation
"PyUnicode_FromFormatV()"
"tp_members"
signalled
Python-related
ssizeargfunc
format:
"PyEval_GetFuncName()"
stream
improving
classes)
__itruediv__
PyTime_Check(PyObject
"strlen()"
confronted
Resizes
clipped
traverseproc
Code
exceptions:
encoded
It's
Internally
"nb_index"
Copy
m_reload
modulo
maintain
PyDateTime_DATE_GET_FOLD(PyDateTime_DateTime
"PyExc_UnicodeEncodeError"
"gc.enable()"
"sys.implementation.cache_tag"
properly;
"PYTHONWARNINGS"
"%p"
Python;
PyObject_ClearWeakRefs(PyObject
"PyDateTime_DeltaType"
sparse
"PyExc_KeyError"
pointers
"PyObject_CheckReadBuffer()"
"PyDict_DelItem()"
tp_call;
"f_builtins"
instance)
unloaded
"PyConfig.pathconfig_warnings"
discard
(no
"PyNumber_Remainder()"
decimal
"Py_tp_bases"
"struct.calcsize()"
PyType_Spec.flags
*ptr;
identically
directories
drop
processing
Initializing
"PySet_Discard()"
"defining_class"
differs
descriptor
*file)
That
*PyWrapper_New(PyObject*
PyLong_FromSsize_t(i);
"PyCapsule_SetDestructor()"
"mp_ass_subscript"
0xDFFF")
iteration
Concrete
"tp_weaklist";
names
Configuration;
*PyByteArray_FromStringAndSize(const
"PyImport_GetModule()"
Point
DOS
"PyNumber_Subtract()"
*PyImport_ImportModule(const
tp_flags
module_api_version)
"Py_GT"
"PyDateTime_DateTime"
""mbcs""
Abstract
Docstring
administration
"PyMem_RawCalloc()"
"*prefix*/include"
"PYGEN_RETURN"
*cls)
"PYTHONPYCACHEPREFIX"
lifetime
"struct"
"PyErr_SetFromWindowsErrWithFilenameObject()"
isn't
*PySequence_Repeat(PyObject
arguments
well-known
---------
altered
members
(much
face
instance"
(It
"PyUnicode_Splitlines()"
Implicitly
popping
PYMEM_DOMAIN_MEM
*tp_getset;
Context
*PyContextVar_New(const
providing
"PyThread_ReInitTLS()"
#define
*PySequence_InPlaceConcat(PyObject
Insert
u
(except
mappings
subinterpreter-specific
_Py_InitializeMain()
pending
giving
"ctypes")
"sizeof(double)"
"PyType_Spec"
codecs
lowest
"PyObject_Call()"
essential
"PyCFunction_New()"
"PyType_GetModuleByDef()"
in
"PyObject_Calloc()"
underlying
"PyDateTime_Time"
Static
================================================
"gc.disable()"
is
count"
subsequent
vector
tp_new;
Turn
"PyType_FromModuleAndSpec()"
"PySys_GetXOptions()"
NULL)
third-party
suitably
MSC
nb_floor_divide;
PyObject_TypeCheck(PyObject
*PySequence_GetSlice(PyObject
*uni*
detection;
carefully
manual
"PyObject_HasAttrString()"
*PyUnicode_DecodeFSDefault(const
instantiating
reallocation
"PyObject_IsSubclass()"
note
deallocated)
&config.executable
[0
"*(p+j)"
(that
"PyException_GetCause()"
arena
failure)
saves
tp_finalize;
check""
PyFile_WriteString(const
_PyCFunctionFast
"PyNumber_Float()"
Cell
*am_await(PyObject
"Py_SetProgramName()"
"exit()"
Py_NewRef(obj);
PyModuleDef
PyEval_ReleaseLock()
role
Changed
two-
arg
*capsule)
inclusion
Py_UNICODE_ISALPHA(Py_UCS4
**Default:**
memory
"main()"
containing
*PyLong_FromUnsignedLong(unsigned
search)
bpo-34762
isolate
0"
instances;
*PyObject_CallOneArg(PyObject
binary64
behavior.Consequently
"y#"
(buffer
("threading.local")
object-specific
*ref)
"y*"
"PyCodec_XMLCharRefReplaceErrors()"
"PLATLIBDIR"
PyNumberMethods;
misuse
*PyUnicode_DecodeUTF7Stateful(const
weak
fits
example:
Split
"PyErr_SetExcInfo()"
fork;
"PyCapsule_GetPointer()"
=====================================
"Py_NE"
""surrogatepass""
extending
expansions
look
PyErr_GivenExceptionMatches(PyObject
*object*
PyTuple_New(3);
imported
Certain
their
"PyExc_Warning";
shouldn't
indicator;
*str
-------------
Py_mod_create
(PyObject_SetItem(dict
"PyUnicode_ReadChar()"
anymore
story;
PyInterpreterState_GetID(PyInterpreterState
–
Others
"printf("%zi")"
"PyFloat_AsDouble()"
*PySys_GetObject(const
property-like
along
|=========|===========================|===========================|============================|
__name__
*kwargs);
"PyMappingMethods"
READONLY}
{"pop"
instruction
there:
plain
*o3*
"tp_vectorcall_of
completeness
known
3.10.0
interpreter's
["tp_subclasses"]
"PyObject_Init()"
hardware
"__weakref__"
va)
tp_iter;
PyFrozenSet_Type
*names
"PyObject_CopyData()"
"PyUnicode_Partition()"
compaction
Almost
disallow
"modulename.attributename"
participates
unless
space
cast
"-d"
(PyCFunction)deque_pop
*PyModule_Create(PyModuleDef
*PyUnicode_DecodeLocaleAndSize(const
**size*
More
examined
read-only:
PyObject_IS_GC
slice):
inherited;
Should
callers
passing
PySequence_Length(PyObject
PyUnicode_WriteChar(PyObject
"p[0:N]"
>=len(list))
("0xD800
*PyErr_SetFromWindowsErrWithFilename(int
install
(possible
rules:
*callback*
modules
ld
PyPreConfig_InitPythonConfig(&preconfig);
&start
setattrfunc
inserted
single
"PyObject_Str()":
""strict""
Normally
*itemlist)
*target
formatting
__mro__
(d
*Py_LeaveRecursiveCall*
"sizeof"
Yielded
category
locations
"PyAIter_Check()"
"~o"
clear
found
created:
"Py_SetStandardStreamEncoding()"
Borrowed
bytes_warning
*attr
languages
*docstring)
Storage
"AttributeError"
too)
*filesystem_errors
pre-configuration
"sys.path"
(use
*PyTuple_GetSlice(PyObject
PyObject_SetItem(PyObject
"-bb"
belong
saving
domain:
PySeqIter_Check(op)
augmented
allowing
Py_UNICODE_ISPRINTABLE(Py_UCS4
"DLLs"
reduce
"Modules/getpath.c")
points
4-byte
dictionaries
"PyConfig.argv"
"meth(*args
*PyErr_SetFromErrnoWithFilename(PyObject
Functions
"PySet_New()"
executable:
subtracting
"PyUnicode_AsUCS4()"
PyMem_Free(ptr);
divided
contributing
"PyDateTime_DateTimeType"
"PyTrace_RETURN"
inclusive
available)
making
"PyModule_AddIntMacro(module
"'\0'")
*x
marker
"PYMEM_ALLOCATOR_MALLOC_DEBUG"
objects")
*PyUnicode_AS_UNICODE(PyObject
"PyImport_ImportModuleEx()"
algorithm:
PyCompactUnicodeObject
shared)
)
zero:
"PyConfig._isolated_interpreter":
Uses
"PyModule_Create()"
"\N{...}"
Overview
"PyExc_EOFError"
states
above
T_ULONGLONG
+--------------------+--------------------+--------------------+----+----+----+----+
*iterable)
"PyTrace_C_EXCEPTION"
*PyMethod_GET_SELF(PyObject
nearest
PyTupleObject*
garbage-collected
alpha
Py_UNICODE_ISTITLE(Py_UCS4
N-D
heap
*buffering*
""pymalloc""
theory
PyNumberMethods.nb_inplace_matrix_multiply
Controlling
Size
"PyTypeObject.tp_clear"
"Py_TPFLAGS_HAVE_VECTORCALL"
*PyImport_GetModuleDict()
*closure*
2)
*exception
VM
*value*;
iterate
PyObject
"ndim"
frames;
"buffers")
"PyImport_AddModule()"
enables
opposed
PyTuple_Check(PyObject
"PyFrozenSet_Type"
PyObject_HasAttr(PyObject
"mymod.MyObject"
necessary
"T_STRING"
PyNumberMethods.nb_invert
--------------------------------------
deferred
PyDateTime_TIME_GET_MINUTE(PyDateTime_Time
cleaning
(out
play
"PyOS_CheckStack()"
*error_traceback;
__delattr__
within
"PyObject_Bytes()"
free(buf2);
PyUnicode_GET_DATA_SIZE(PyObject
PyWeakref_Check(ob)
passing)
acts
PyObject_AsReadBuffer(PyObject
changes
"IndentationError"
"io.WindowsConsoleIO"
legacy_windows_stdio
pointed
name:
"PyErr_ExceptionMatches()"
other)
accepting
PyVarObject_HEAD_INIT(type
re-cast
chain
grammar
PyAPI_FUNC(int)
useconds)
PY_SSIZE_T_CLEAN
style
Collector
PyBytes_Size(PyObject
__imatmul__
"sys.ps1"
Disallow
PyConfig_SetBytesArgv(PyConfig
(""."")
Details
hashing:
Struct
macros:
please
"PyCapsule_SetContext()"
rather
PyConfig_InitIsolatedConfig(PyConfig
"PyException_GetContext()"
+---------+---------------------------+---------------------------+----------------------------+
PyArg_Parse(PyObject
*visit*
MemoryView
"PyContext"
script.py
Py_DECREF(o);
converter(object
"handle"
arguments)
first;
docstring:
differently
*PyThreadState_GetFrame(PyThreadState
produces
different)
typical
INT_MAX"
*PyFile_FromFd(int
"PyComplex_ImagAsDouble()"
"PyMem_Free(p)"
non-"NULL")
semicolon
derived
"Py_VISIT()"
kwargs
*PyCode_New(int
+--------------------------------------------+--------------------+----------------------+-----------------+
PyTypeObject.tp_dictoffset
Setup
"T_PYSSIZET"
*PyFrame_GetBuiltins(PyFrameObject
"PyObject_VectorcallDict"
condition
PySlice_GetIndices(PyObject
favor
defaults)
*max*;
"PySequence_GetSlice()"
(Only
*inst_dict;
""O""
*keywords[]
emulate
"PyTypeObject.tp_getset"
Perhaps
exponentiation
*PyNumber_Divmod(PyObject
*)buf)[len-1]"
PyMapping_HasKeyString(PyObject
"ImportWarning"
["tp_weaklist"]
fault
PyContext_Enter(PyObject
"NULL"-terminated
3.3:
"PyOS_AfterFork()"
**argv)
execution
(*func*
*val)
"interp"
(Clarification:
tp_clear(PyObject
some
Remove
/
applications
**string)
*embedding*
dev_mode
problems
*PyDelta_FromDSU(int
"__dict__"
*PyObject_CallFunction(PyObject
"__cause__"
PyNumberMethods.nb_index
Py_Is(PyObject
"PyInterpreterState_GetDict()"
until
parser
per-interpreter
i1
Hinting
slower
"-o"
*flags*
separate
"Py_XDECREF()"
"PyEval_EvalCode()"
Simulate
overrides
*PyLong_FromLong(long
"None";
Generic
*arg
PyEval_SaveThread();"
interpreters
"str"
target
"PY_RELEASE_SERIAL"
(unless
"'C'")
constants.However
Using
""lib""
|================================|==========================================|
sub-
"nb_subtract"
"#"
PyThreadState
"0x"
__divmod__
selectively
preconfig;
long-
Ask
*src->len*
blindly
"PyThreadState_GetID()"
D
"bitwise
lie
"PyObject_GetAIter()"
PyCapsule_Destructor
PY_RELEASE_SERIAL
receives
j
stuff
*PyStructSequence_GET_ITEM(PyObject
properties
necessarily
"WindowsError"
*PyType_GetModuleState(PyTypeObject
alive
"dir()"
literal
"EDOM"
("argv"
locate
singletons:
=================
"PyLongRangeIter_Type"
Py_SET_REFCNT(PyObject
multiplication
__neg__
Think
*PyMethod_GET_FUNCTION(PyObject
prove
-=
knowledge
"module_search_paths_set"
exception
ranges
While
routines
functionality
"PYTHONHASHSEED"
updatepath)
amount
[float]
attempted
There
"PyDictIterItem_Type"
*buf*
sensitive
chained
"nl_langinfo(CODESET)"
"sys.argv";
(UTF-16
"PyNumber_InPlaceLshift()"
cell
**value)
direct
*bytes*
PyDict_Type
"PyNumber_InPlaceAnd()"
"contextvars.ContextVar"
TYPE
deallocator
zero-copy
request
"unsigned
Builtin
Import
(PyLong_Check(item))
"PyExc_WindowsError"
"types.FunctionType"
"PyModuleDef.m_size"
PYMEM_DOMAIN_RAW
char*)
"PySet_Clear()"
"Py_single_input"
"PyList_SetItem()"
*interp
rest
"Py_UNUSED"
*PySet_Pop(PyObject
caveats:**
Marking
"PyOS_double_to_string()"
"__class_getitem__()"
language
"sys.version"
************************
*PyCodec_StreamWriter(const
breaks
INFs
Py_VISIT(self->kw);
destroyed
PyObject_GC_Del(void
*category*
PyState_RemoveModule(PyModuleDef
*AF_INET*
an
*where*
"PySequence_"
PyErr_WriteUnraisable(PyObject
PySet_Check(PyObject
*end*
PyRun_InteractiveLoop(FILE
"int.from_bytes()"
"PyZip_Type"
One
PyDict_CheckExact(PyObject
"PyMemoryView_FromBuffer()"
notion
*seq)
limit
"gc.is_finalized()"
*newline*
option"
"PyNumber_"
issue
"GenericAlias"
"three")"
associating
(in
substrings
valid
"tracemalloc.start()"
things
*get_item_pointer(int
**built**
fails
"PYMEM_DEBUG_SERIALNO"
per-opcode
"PyExc_RecursionError"
error_value
tuned
(ex:
*argv)
"PyFloat_Type"
Traversal
portability
"PyObject_ASCII()"
2.7.2.2]"
zd
*Py_GetCopyright()
"PyExc_UnicodeTranslateError"
..
tail
"3"
*bases)
raises)
subclasses;
PySequence_SetItem(PyObject
"PyMarshal_ReadObjectFromFile()"
silenced)
"PyMapping_Values()"
Py_XDECREF(incremented_item);
"PySequence_Count()"
__pos__
situations;
format
*ml_name
Sort
Quick
"sys.unraisablehook"
*PyNumber_Invert(PyObject
throughout
17-24
state's
char"
True"
Python/C
callbacks
*PyObject_Call(PyObject
Java)
*pylong*
block
policies
Clear
Releases
"don't
points;
"-P"
*inst
keyword-only
"_PyObject_GC_UNTRACK()"
*before*
historical
"PyExc_ZeroDivisionError"
can
""%s""
strong
"__loader__"
"*="
PyVectorcall_Function(PyObject
gstate;
tp_iter
"printf("%ld")"
arg"
li
semantics
form
"PyWrapperDescr_Type"
"ConnectionAbortedError"
"PyInterpreterState_Main()"
positional-only
assertions
"'m'"
PyCFunctions
larger
three-dimensional
PyInstanceMethod_Check(PyObject
tp_traverse(PyObject
index)
Different
**buffer]
"nb_inplace_power"
"replace"
"divmod()"
*PyMember_GetOne(const
traceback
or
very
"PYTHONMALLOC"
memory)
sequence)
"nb_inplace_rshift"
*internal
tools)
(currently
"filename"
includes
"PyExc_FutureWarning"
"Py_STRINGIFY(123)"
"tp_richcompare"
"sys.executable"
Py_TPFLAGS_HAVE_GC
PyGILState_Release(PyGILState_STATE)
"StopAsyncIteration"
bit:
removing
*PyFloat_GetInfo(void)
ABI
Terminated
Py_TPFLAGS_READYING
whereas
Customize
*Py_tp_base*
sure
"__package__"
"PyNumberMethods.nb_add"
*destructor*
floats)
...")
MyObject_Type
"PyDescr_NewGetSet()"
run-time
here
leaves
Py_SetStandardStreamEncoding(const
"Py_SET_SIZE()"
I/O
*ctx)
"format(obj
"PyModuleDef"
Floating
recommended
array)
causing
