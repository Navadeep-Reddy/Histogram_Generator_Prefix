Importing : 3
Modules : 4
***************** : 7
PyObject : 765
*PyImport_ImportModule(const : 1
char : 334
*name) : 19
*Return : 343
value: : 346
New : 528
reference.** : 254
Part : 709
of : 2383
the : 5735
Stable : 690
ABI.* : 540
This : 739
is : 2343
a : 2141
simplified : 18
interface : 42
to : 2303
"PyImport_ImportModuleEx()" : 1
below : 34
leaving : 15
*globals* : 5
and : 1341
*locals* : 3
arguments : 161
set : 380
"NULL" : 595
*level* : 3
0 : 89
When : 61
*name* : 45
argument : 158
contains : 38
dot : 7
(when : 1
it : 437
specifies : 14
submodule : 4
package) : 2
*fromlist* : 3
list : 106
"['*']" : 1
so : 58
that : 587
return : 316
value : 299
named : 31
module : 215
rather : 23
than : 84
top-level : 6
package : 15
containing : 36
as : 510
would : 25
otherwise : 71
be : 1088
case : 86
(Unfortunately : 1
this : 435
has : 171
an : 663
additional : 28
side : 5
effect : 16
when : 234
in : 1259
fact : 5
subpackage : 2
instead : 76
submodule: : 1
submodules : 1
specified : 45
package's : 1
"__all__" : 1
variable : 124
are : 534
loaded.) : 1
Return : 485
new : 190
reference : 232
imported : 18
or : 657
with : 470
exception : 314
on : 574
failure : 177
A : 64
failing : 1
import : 22
doesn't : 18
leave : 4
"sys.modules" : 5
function : 756
always : 139
uses : 58
absolute : 8
imports : 4
*PyImport_ImportModuleNoBlock(const : 1
deprecated : 22
alias : 4
"PyImport_ImportModule()" : 5
Changed : 134
version : 609
3.3: : 14
used : 312
fail : 10
immediately : 16
lock : 42
was : 142
held : 31
by : 565
another : 24
thread : 144
In : 83
Python : 859
3.3 : 69
though : 7
locking : 3
scheme : 5
switched : 1
per-module : 2
locks : 8
for : 727
most : 49
purposes : 10
function's : 5
special : 21
behaviour : 5
isn't : 14
needed : 40
anymore : 8
*PyImport_ImportModuleEx(const : 1
*name : 32
*globals : 12
*locals : 8
*fromlist) : 1
reference.* : 73
Import : 5
best : 7
described : 29
referring : 3
built- : 4
"__import__()" : 6
The : 808
top- : 2
level : 14
Like : 23
requested : 14
normally : 29
unless : 16
non-empty : 10
given : 99
Failing : 1
remove : 4
incomplete : 5
objects : 218
like : 60
*PyImport_ImportModuleLevelObject(PyObject : 1
*fromlist : 2
int : 652
level) : 3
ABI : 154
since : 198
3.7.* : 62
standard : 48
calls : 51
directly : 36
*PyImport_ImportModuleLevel(const : 1
Similar : 30
"PyImport_ImportModuleLevelObject()" : 2
but : 182
name : 100
UTF-8 : 40
encoded : 37
string : 286
Unicode : 164
object : 906
Negative : 3
values : 85
no : 180
longer : 36
accepted : 6
*PyImport_Import(PyObject : 1
higher-level : 3
current : 109
"import : 2
hook : 18
function" : 1
(with : 3
explicit : 8
meaning : 17
import) : 1
It : 151
invokes : 4
from : 347
"__builtins__" : 1
globals : 5
means : 35
done : 47
using : 191
whatever : 2
hooks : 22
installed : 12
environment : 71
*PyImport_ReloadModule(PyObject : 1
*m) : 3
Reload : 1
reloaded : 1
(the : 19
still : 20
exists : 8
case) : 3
*PyImport_AddModuleObject(PyObject : 1
Borrowed : 42
corresponding : 36
may : 181
form : 20
"package.module" : 2
First : 3
check : 42
modules : 71
dictionary : 87
if : 677
there's : 3
one : 98
there : 73
not : 647
create : 41
insert : 3
Note: : 56
does : 101
load : 6
module; : 3
wasn't : 4
already : 37
loaded : 17
you : 104
will : 312
get : 47
empty : 32
Use : 64
its : 142
variants : 2
Package : 1
structures : 21
implied : 3
dotted : 2
created : 92
present : 16
*PyImport_AddModule(const : 1
"PyImport_AddModuleObject()" : 2
*PyImport_ExecCodeModule(const : 1
*co) : 7
Given : 2
(possibly : 2
"package.module") : 1
code : 195
read : 25
bytecode : 13
file : 70
obtained : 9
built-in : 32
"compile()" : 1
error : 302
occurred : 22
removed : 31
cases : 24
even : 32
entry : 24
"PyImport_ExecCodeModule()" : 3
Leaving : 1
incompletely : 1
initialized : 68
dangerous : 3
such : 54
have : 118
way : 49
know : 7
unknown : 3
(and : 12
probably : 5
damaged : 1
respect : 8
author's : 1
intents) : 1
state : 149
module's : 16
"__spec__" : 1
"__loader__" : 4
appropriate : 20
spec's : 1
loader : 1
(if : 31
set) : 8
instance : 168
"SourceFileLoader" : 1
"__file__" : 5
attribute : 87
object's : 33
"co_filename" : 1
If : 410
applicable : 1
"__cached__" : 2
also : 136
reload : 3
See : 107
"PyImport_ReloadModule()" : 2
intended : 13
points : 39
any : 125
"PyImport_ExecCodeModuleEx()" : 3
"PyImport_ExecCodeModuleWithPathnames()" : 3
*PyImport_ExecCodeModuleEx(const : 1
*co : 7
const : 186
*pathname) : 1
*pathname* : 3
non-"NULL" : 35
*PyImport_ExecCodeModuleObject(PyObject : 1
*pathname : 2
*cpathname) : 2
*cpathname* : 3
Of : 1
three : 17
functions : 226
preferred : 5
use : 203
*PyImport_ExecCodeModuleWithPathnames(const : 1
"PyImport_ExecCodeModuleObject()" : 2
strings : 48
Attempts : 1
made : 20
figure : 1
out : 26
what : 22
should : 233
former : 3
3.2 : 20
Uses : 1
"imp.source_from_cache()" : 1
calculating : 5
source : 20
path : 42
only : 158
provided : 23
long : 110
PyImport_GetMagicNumber() : 1
* : 1878
magic : 3
number : 122
files : 20
(a.k.a : 2
".pyc" : 5
file) : 1
first : 88
four : 3
bytes : 171
little-endian : 3
byte : 48
order : 30
Returns : 129
"-1" : 158
upon : 8
*PyImport_GetMagicTag() : 1
tag : 4
**PEP : 30
3147** : 1
format : 100
names : 31
Keep : 1
mind : 1
at : 117
"sys.implementation.cache_tag" : 1
authoritative : 1
*PyImport_GetModuleDict() : 1
administration : 3
"sys.modules") : 1
Note : 64
per-interpreter : 1
*PyImport_GetModule(PyObject : 1
3.8.* : 5
been : 102
yet : 18
then : 52
returns : 158
sets : 51
lookup : 10
failed : 7
3.7 : 16
*PyImport_GetImporter(PyObject : 1
*path) : 5
finder : 3
"sys.path"/"pkg.__path__" : 1
item : 42
*path* : 5
possibly : 10
fetching : 1
"sys.path_importer_cache" : 2
dict : 13
cached : 3
traverse : 2
"sys.path_hooks" : 1
until : 12
found : 37
can : 277
handle : 24
"None" : 39
could; : 1
tells : 2
our : 3
caller : 61
*path : 2
based : 15
finder* : 1
could : 21
find : 4
Cache : 1
result : 87
PyImport_ImportFrozenModuleObject(PyObject : 1
Load : 1
frozen : 6
"1" : 117
success : 132
"0" : 221
initialization : 71
To : 33
access : 30
successful : 11
(Note : 6
misnomer : 1
--- : 21
imported.) : 1
3.4: : 11
PyImport_ImportFrozenModule(const : 1
"PyImport_ImportFrozenModuleObject()" : 2
struct : 49
_frozen : 3
structure : 97
type : 466
definition : 30
descriptors : 5
generated : 2
**freeze** : 1
utility : 7
(see : 20
"Tools/freeze/" : 1
distribution) : 1
Its : 8
"Include/import.h" : 2
is: : 30
{ : 88
*name; : 2
unsigned : 57
*code; : 1
size; : 3
bool : 1
is_package; : 1
}; : 10
3.11: : 15
"is_package" : 1
field : 139
indicates : 22
whether : 41
replaces : 2
setting : 40
"size" : 1
negative : 17
*PyImport_FrozenModules : 1
pointer : 181
point : 50
array : 57
"_frozen" : 1
records : 1
terminated : 8
whose : 31
members : 23
all : 145
zero : 56
searched : 2
table : 18
Third-party : 1
play : 2
tricks : 1
provide : 19
dynamically : 17
collection : 14
PyImport_AppendInittab(const : 1
*(*initfunc)(void)) : 1
Add : 10
single : 41
existing : 22
convenience : 14
wrapper : 11
around : 11
"PyImport_ExtendInittab()" : 6
returning : 15
extended : 2
*initfunc* : 1
called : 230
attempted : 2
before : 117
"Py_Initialize()" : 42
_inittab : 3
Structure : 17
describing : 3
Each : 11
these : 85
gives : 3
built : 9
into : 81
interpreter : 146
ASCII : 11
Programs : 1
which : 244
embed : 8
conjunction : 1
defined : 90
as: : 5
/* : 114
*/ : 114
PyObject* : 41
(*initfunc)(void); : 1
PyImport_ExtendInittab(struct : 1
*newtab) : 1
*newtab* : 1
must : 334
end : 31
sentinel : 4
"name" : 6
field; : 1
memory : 235
fault : 1
insufficient : 1
allocated : 80
extend : 2
internal : 37
event : 14
added : 26
multiple : 17
times : 9
"PyImport_AppendInittab()" : 5
each : 54
Data : 3
marshalling : 3
support : 38
************************ : 5
These : 65
routines : 5
allow : 16
C : 328
work : 20
serialized : 1
same : 132
data : 75
"marshal" : 1
There : 35
write : 27
serialization : 1
back : 22
Files : 3
store : 21
marshalled : 3
opened : 8
binary : 12
mode : 52
Numeric : 3
stored : 39
least : 12
significant : 3
supports : 37
two : 61
versions : 17
format: : 1
historical : 2
1 : 41
shares : 2
interned : 5
unmarshalling : 1
Version : 1
2 : 27
floating : 12
numbers : 14
"Py_MARSHAL_VERSION" : 1
(currently : 2
2) : 2
void : 205
PyMarshal_WriteLongToFile(long : 1
FILE : 5
*file : 2
version) : 4
Marshal : 2
integer : 68
*value* : 21
*file* : 2
least-significant : 1
32 : 5
bits : 14
*value*; : 1
regardless : 18
size : 78
native : 14
*version* : 4
PyMarshal_WriteObjectToFile(PyObject : 1
*value : 7
*PyMarshal_WriteObjectToString(PyObject : 1
representation : 63
following : 75
PyMarshal_ReadLongFromFile(FILE : 1
*file) : 4
stream : 7
FILE* : 7
reading : 8
Only : 20
32-bit : 3
On : 90
("EOFError") : 2
PyMarshal_ReadShortFromFile(FILE : 1
short : 13
16-bit : 3
*PyMarshal_ReadObjectFromFile(FILE : 1
("EOFError" : 3
"ValueError" : 14
"TypeError") : 3
*PyMarshal_ReadLastObjectFromFile(FILE : 1
Unlike : 8
"PyMarshal_ReadObjectFromFile()" : 1
assumes : 5
further : 7
allowing : 3
aggressively : 1
de-serialization : 1
operate : 7
time : 26
variant : 11
certain : 10
won't : 10
anything : 4
else : 10
*PyMarshal_ReadObjectFromString(const : 1
*data : 4
Py_ssize_t : 228
len) : 6
buffer : 140
*len* : 11
pointed : 19
*data* : 4
List : 6
Objects : 99
************ : 7
PyListObject : 1
subtype : 73
"PyObject" : 84
represents : 35
PyTypeObject : 58
PyList_Type : 1
"PyTypeObject" : 28
"list" : 2
layer : 12
PyList_Check(PyObject : 1
*p) : 36
true : 95
*p* : 61
succeeds : 74
PyList_CheckExact(PyObject : 1
*PyList_New(Py_ssize_t : 1
length : 75
greater : 24
returned : 137
items : 19
Thus : 5
cannot : 39
abstract : 3
API : 177
"PySequence_SetItem()" : 4
expose : 7
real : 11
"PyList_SetItem()" : 6
PyList_Size(PyObject : 1
*list) : 6
*list*; : 2
equivalent : 121
"len(list)" : 1
PyList_GET_SIZE(PyObject : 1
"PyList_Size()" : 2
without : 66
checking : 35
*PyList_GetItem(PyObject : 1
*list : 11
index) : 4
position : 11
*index* : 9
*list* : 13
non-negative; : 1
indexing : 1
supported : 14
bounds : 12
(<0 : 1
>=len(list)) : 1
"IndexError" : 7
*PyList_GET_ITEM(PyObject : 1
i) : 6
"PyList_GetItem()" : 5
PyList_SetItem(PyObject : 1
index : 25
*item) : 6
Set : 113
*item* : 8
"steals" : 6
discards : 3
affected : 3
PyList_SET_ITEM(PyObject : 1
i : 13
*o) : 112
Macro : 8
fill : 13
lists : 2
where : 53
previous : 27
content : 4
macro : 83
unlike : 3
*not* : 13
discard : 6
being : 42
replaced; : 2
*i* : 5
leaked : 2
PyList_Insert(PyObject : 1
Insert : 5
front : 3
successful; : 2
unsuccessful : 4
Analogous : 6
"list.insert(index : 1
item)" : 1
PyList_Append(PyObject : 1
Append : 5
"list.append(item)" : 1
*PyList_GetSlice(PyObject : 1
low : 5
high) : 2
*between* : 1
*low* : 4
*high* : 4
"list[low:high]" : 1
Indexing : 3
PyList_SetSlice(PyObject : 1
high : 2
*itemlist) : 1
slice : 16
between : 30
contents : 37
*itemlist* : 2
"list[low:high] : 1
= : 142
itemlist" : 1
indicating : 11
assignment : 6
(slice : 1
deletion) : 1
PyList_Sort(PyObject : 1
Sort : 1
place : 20
"list.sort()" : 1
PyList_Reverse(PyObject : 1
Reverse : 1
"list.reverse()" : 1
*PyList_AsTuple(PyObject : 1
tuple : 86
"tuple(list)" : 1
Parsing : 6
building : 8
************************************* : 1
useful : 20
creating : 17
your : 13
own : 26
extensions : 16
methods : 34
Additional : 3
information : 39
examples : 5
available : 68
Extending : 3
Embedding : 5
Interpreter : 5
"PyArg_ParseTuple()" : 11
"PyArg_ParseTupleAndKeywords()" : 6
"PyArg_Parse()" : 2
*format : 28
strings* : 1
tell : 1
about : 27
expected : 10
syntax : 2
================= : 10
consists : 7
more : 49
"format : 3
units." : 1
unit : 8
describes : 8
object; : 9
usually : 21
character : 80
parenthesized : 2
sequence : 65
units : 14
With : 2
few : 12
exceptions : 40
corresponds : 9
address : 17
description : 11
quoted : 2
unit; : 3
(round) : 2
parentheses : 4
matches : 6
[square] : 2
brackets : 5
variable(s) : 2
passed : 75
Strings : 3
buffers : 19
------------------- : 3
formats : 7
accessing : 7
contiguous : 7
chunk : 3
You : 18
don't : 27
raw : 8
storage : 15
unicode : 8
area : 8
Unless : 4
stated : 1
NUL-terminated : 7
ways : 6
converted : 27
C: : 1
Formats : 1
"y*" : 4
"s*" : 6
"Py_buffer" : 9
underlying : 16
subsequently : 2
inside : 12
"Py_BEGIN_ALLOW_THREADS" : 6
block : 51
risk : 3
mutable : 7
resized : 8
destroyed : 12
As : 22
**you : 1
call** : 2
"PyBuffer_Release()" : 10
after : 82
finished : 2
processing : 3
(or : 14
early : 4
abort : 3
"es" : 4
"es#" : 3
"et" : 2
"et#" : 2
allocate : 21
**You : 1
"PyMem_Free()" : 10
Other : 8
take : 13
"str" : 17
read-only : 23
*bytes-like : 10
object* : 5
"bytes" : 25
"const : 7
*" : 21
"borrowed": : 1
managed : 2
lifetime : 4
release : 20
yourself : 5
ensure : 12
safely : 8
borrowed : 7
"PyBufferProcs.bf_releasebuffer" : 2
disallows : 1
common : 15
"bytearray" : 12
some : 54
"memoryview" : 3
Besides : 1
"bf_releasebuffer" : 3
requirement : 4
verify : 1
input : 30
immutable : 7
(e.g : 12
honor : 1
request : 30
writable : 7
mutate : 2
data) : 3
For : 104
"#" : 3
("s#" : 1
"y#" : 3
etc.) : 1
"PY_SSIZE_T_CLEAN" : 4
including : 16
"Python.h" : 6
3.9 : 38
older : 4
"Py_ssize_t" : 31
"s" : 10
("str") : 8
[const : 24
*] : 19
Convert : 49
pass : 23
contain : 22
embedded : 21
null : 39
points; : 2
raised : 90
"'utf-8'" : 9
encoding : 80
conversion : 24
fails : 20
"UnicodeError" : 2
accept : 12
objects* : 2
want : 14
filesystem : 4
paths : 9
convert : 18
them : 34
preferable : 1
"O&" : 3
"PyUnicode_FSConverter()" : 4
*converter* : 6
3.5: : 9
Previously : 15
"TypeError" : 37
were : 21
encountered : 6
("str" : 17
object*) : 6
[Py_buffer] : 4
accepts : 9
well : 13
bytes-like : 2
fills : 3
resulting : 25
NUL : 4
"s#" : 8
"Py_ssize_t"] : 10
except : 29
provides : 23
variables : 54
second : 38
"z" : 2
"None") : 13
"z*" : 1
"buf" : 6
member : 26
"z#" : 2
"y" : 4
(read-only : 2
converts : 5
string; : 2
bytes; : 2
(*bytes-like : 1
bytes- : 2
**This : 1
recommended : 16
data.** : 1
"S" : 2
("bytes") : 3
[PyBytesObject : 1
Requires : 3
attempting : 6
Raises : 17
declared : 9
"Y" : 1
("bytearray") : 1
[PyByteArrayObject : 1
"u" : 4
Py_UNICODE : 12
characters : 42
"Py_UNICODE" : 15
filled : 20
Please : 4
note : 12
width : 3
depends : 9
compilation : 3
options : 20
(it : 5
either : 32
16 : 4
bits) : 1
Deprecated : 40
3.12: : 13
old-style : 12
API; : 5
please : 14
migrate : 11
"PyUnicode_AsWideCharString()" : 5
"u#" : 3
stores : 2
allows : 17
"Z" : 1
"Z#" : 1
"U" : 2
[PyObject : 5
"w*" : 3
(read-write : 1
implements : 23
read-write : 2
call : 156
*encoding : 16
**buffer] : 2
works : 14
requires : 11
char* : 9
An : 51
known : 12
char**; : 2
references : 49
text : 7
copy : 12
adjust : 2
**buffer* : 4
newly : 6
responsible : 16
calling : 87
free : 23
"bytearray") : 2
Same : 14
through : 50
recoding : 2
Instead : 4
implementation : 37
parameter : 83
**buffer : 6
*buffer_length] : 2
third : 7
integer; : 1
referenced : 10
output : 27
modes : 1
operation: : 1
usage : 9
(an : 1
buffer) : 2
location : 16
interpret : 1
initial : 5
**buffer_length* : 2
NUL- : 1
terminate : 7
large : 10
enough : 7
both : 30
trailing : 14
Numbers : 6
------- : 1
"b" : 2
("int") : 22
[unsigned : 11
char] : 3
nonnegative : 1
tiny : 2
"B" : 3
overflow : 5
"h" : 2
[short : 2
int] : 8
"H" : 2
"i" : 2
[int] : 5
plain : 4
"I" : 2
"l" : 2
[long : 4
"k" : 2
long] : 6
"L" : 2
"K" : 2
"n" : 2
["Py_ssize_t"] : 2
"c" : 3
("bytes" : 2
1) : 4
[char] : 3
represented : 9
Allow : 1
"C" : 4
"f" : 2
("float") : 4
[float] : 2
float : 9
"d" : 2
[double] : 2
double : 42
"D" : 2
("complex") : 2
[Py_complex] : 1
complex : 23
"Py_complex" : 10
------------- : 6
"O" : 5
(object) : 7
Store : 2
(without : 4
conversion) : 1
program : 22
thus : 4
receives : 7
actual : 10
count : 65
increased : 2
"O!" : 1
[*typeobject* : 1
similar : 29
takes : 17
arguments: : 4
(of : 5
PyObject*) : 11
required : 16
[*converter* : 2
*anything*] : 2
arbitrary : 15
type) : 8
void* : 17
turn : 6
follows: : 5
status : 22
converter(object : 1
address); : 1
*object* : 8
*address* : 3
"PyArg_Parse*" : 4
*status* : 3
raise : 53
unmodified : 2
"Py_CLEANUP_SUPPORTED" : 2
parsing : 8
eventually : 3
giving : 7
converter : 3
chance : 3
had : 10
"NULL"; : 13
original : 14
3.1: : 2
"p" : 1
("bool") : 1
Tests : 1
truth : 3
(a : 1
boolean : 1
**p**redicate) : 1
true/false : 2
Sets : 6
expression : 59
false : 14
valid : 25
Truth : 1
Value : 7
Testing : 1
how : 19
tests : 2
"(items)" : 2
("tuple") : 2
[*matching-items*] : 4
*items* : 4
correspond : 7
individual : 8
Format : 4
sequences : 9
nested : 3
possible : 39
"long" : 3
integers : 15
(integers : 2
exceeds : 1
platform's : 4
"LONG_MAX") : 1
however : 9
proper : 2
range : 22
silently : 7
truncated : 8
receiving : 1
too : 6
small : 5
receive : 7
(actually : 2
semantics : 8
inherited : 87
downcasts : 1
mileage : 1
vary) : 1
other : 110
occur : 13
They : 19
are: : 4
"|" : 3
Indicates : 2
remaining : 3
optional : 39
their : 39
default : 61
touch : 1
"$" : 2
only: : 2
keyword-only : 3
Currently : 5
":" : 2
ends : 5
here; : 3
colon : 2
messages : 5
"associated : 1
value" : 3
raises) : 1
";" : 3
semicolon : 1
message : 26
*instead* : 1
mutually : 3
exclude : 1
*borrowed* : 1
references; : 2
do : 44
decrement : 7
addresses : 4
determined : 2
above : 17
parameters : 40
values; : 1
they : 71
match : 13
succeed : 6
*arg* : 11
exhausted : 2
due : 6
left : 17
untouched : 3
Functions : 15
PyArg_ParseTuple(PyObject : 1
*args : 23
...) : 21
Parse : 7
positional : 18
local : 14
success; : 2
raises : 19
PyArg_VaParse(PyObject : 1
va_list : 10
vargs) : 6
Identical : 5
PyArg_ParseTupleAndKeywords(PyObject : 1
*kw : 2
*keywords[] : 2
keyword : 19
*keywords* : 1
"NULL"-terminated : 6
Empty : 3
denote : 1
positional-only : 3
3.6: : 10
Added : 5
PyArg_VaParseTupleAndKeywords(PyObject : 1
PyArg_ValidateKeywordArguments(PyObject*) : 1
Ensure : 4
keys : 14
keywords : 4
latter : 5
PyArg_Parse(PyObject : 1
Function : 19
deconstruct : 1
"old-style" : 1
"METH_OLDARGS" : 1
method : 95
3 : 6
modified : 12
purpose : 4
remain : 5
convenient : 5
decompose : 1
tuples : 8
continue : 7
PyArg_UnpackTuple(PyObject : 1
min : 1
max : 1
simpler : 2
retrieval : 1
specify : 8
types : 108
retrieve : 2
"METH_VARARGS" : 1
tables : 3
*args*; : 3
actually : 10
*min* : 2
*max*; : 1
*max* : 1
equal : 26
variable; : 2
*borrowed : 6
references* : 4
*args* : 20
in; : 1
wrong : 4
elements; : 1
example : 88
taken : 11
sources : 1
"_weakref" : 1
helper : 1
weak : 20
references: : 1
static : 74
weakref_ref(PyObject : 1
*self : 23
*args) : 6
*object; : 1
*callback : 1
NULL; : 3
*result : 1
(PyArg_UnpackTuple(args : 1
"ref" : 1
&object : 2
&callback)) : 1
PyWeakref_NewRef(object : 1
callback); : 1
} : 77
result; : 2
"PyArg_UnpackTuple()" : 3
entirely : 4
"PyArg_ParseTuple()": : 1
PyArg_ParseTuple(args : 1
"O|O:ref" : 1
&callback) : 1
Building : 3
=============== : 6
*Py_BuildValue(const : 1
Create : 51
those : 19
family : 5
error; : 6
"Py_BuildValue()" : 11
build : 24
builds : 6
"None"; : 1
exactly : 14
force : 3
parenthesize : 1
supply : 3
copied : 18
Buffers : 2
never : 20
words : 6
"malloc()" : 11
passes : 6
"free()" : 7
once : 18
return; : 2
value(s) : 1
space : 6
tab : 1
comma : 1
ignored : 19
(but : 11
within : 13
"s#") : 1
make : 14
tad : 1
readable : 3
null-terminated : 10
lengths : 1
wchar_t : 60
(UTF-16 : 2
UCS-4) : 2
"U#" : 1
representing : 17
[Py_complex : 1
Pass : 3
(except : 3
incremented : 8
one) : 3
assumed : 2
caused : 4
because : 27
producing : 2
Therefore : 9
"SystemError" : 14
"N" : 3
increment : 13
Useful : 3
constructor : 9
*anything* : 2
(which : 18
compatible : 4
void*) : 1
"new" : 1
"[items]" : 1
("list") : 1
"{items}" : 1
("dict") : 2
pair : 7
consecutive : 3
adds : 7
serving : 1
key : 41
respectively : 16
*Py_VaBuildValue(const : 1
Allocating : 3
Heap : 7
****************************** : 1
*_PyObject_New(PyTypeObject : 1
*type) : 18
PyVarObject : 7
*_PyObject_NewVar(PyTypeObject : 1
*type : 27
size) : 15
*PyObject_Init(PyObject : 1
*op : 6
Initialize : 7
*op* : 28
*type* : 15
participates : 1
cyclic : 5
garbage : 39
detector : 1
detector's : 1
observed : 1
fields : 72
*PyObject_InitVar(PyVarObject : 1
everything : 3
"PyObject_Init()" : 2
initializes : 9
variable-size : 1
TYPE : 8
*PyObject_New(TYPE : 1
Allocate : 2
*TYPE* : 4
Fields : 4
header : 9
initialized; : 2
allocation : 27
"tp_basicsize" : 9
*PyObject_NewVar(TYPE : 1
plus : 5
*size* : 28
"tp_itemsize" : 10
implementing : 9
able : 7
determine : 12
construction : 1
decreases : 1
allocations : 4
improving : 1
management : 8
efficiency : 2
PyObject_Del(void : 1
*op) : 16
Releases : 2
"PyObject_New()" : 4
"PyObject_NewVar()" : 4
"tp_dealloc" : 6
handler : 45
accessed : 8
_Py_NoneStruct : 1
Object : 41
visible : 3
"Py_None" : 14
evaluates : 2
also: : 16
"PyModule_Create()" : 4
extension : 57
Initialization : 29
Configuration : 49
*********************************** : 1
3.8 : 17
"Py_InitializeFromConfig()" : 7
"PyConfig" : 8
preinitialized : 5
"Py_PreInitialize()" : 6
"PyPreConfig" : 4
kinds : 3
configuration: : 3
customized : 5
behaves : 6
regular : 12
command : 58
line : 73
configure : 7
Isolated : 6
application : 21
isolates : 1
system : 26
LC_CTYPE : 9
locale : 32
unchanged : 7
signal : 29
registered : 8
"Py_RunMain()" : 7
Finalization : 3
Threads : 5
587** : 1
"Python : 1
Configuration" : 1
Example : 8
======= : 1
running : 13
isolated : 30
mode: : 3
main(int : 2
argc : 11
**argv) : 5
PyStatus : 28
status; : 7
PyConfig : 10
config; : 4
PyConfig_InitPythonConfig(&config); : 4
config.isolated : 1
1; : 3
Decode : 10
Implicitly : 3
preinitialize : 7
(in : 5
mode) : 1
PyConfig_SetBytesArgv(&config : 1
argv); : 1
(PyStatus_Exception(status)) : 13
goto : 14
exception; : 6
Py_InitializeFromConfig(&config); : 4
PyConfig_Clear(&config); : 6
Py_RunMain(); : 1
exception: : 3
(PyStatus_IsExit(status)) : 1
status.exitcode; : 1
Display : 1
exit : 20
process : 32
non-zero : 64
Py_ExitStatusException(status); : 6
PyWideStringList : 9
================ : 12
"wchar_t*" : 1
*length* : 9
Methods: : 1
PyWideStringList_Append(PyWideStringList : 1
PyWideStringList_Insert(PyWideStringList : 1
append : 1
fields: : 8
**items : 1
======== : 4
status: : 3
exitcode : 1
Exit : 3
Argument : 2
"exit()" : 2
*err_msg : 1
Error : 11
*func : 2
Name : 10
PyStatus_Ok(void) : 1
Success : 2
PyStatus_Error(const : 1
*err_msg) : 1
*err_msg* : 1
PyStatus_NoMemory(void) : 1
Memory : 17
(out : 1
memory) : 1
PyStatus_Exit(int : 1
exitcode) : 1
PyStatus_Exception(PyStatus : 1
status) : 5
Is : 3
handled; : 2
"Py_ExitStatusException()" : 4
PyStatus_IsError(PyStatus : 1
PyStatus_IsExit(PyStatus : 1
Py_ExitStatusException(PyStatus : 1
Call : 23
"exit(exitcode)" : 1
Print : 5
Must : 6
"PyStatus_Exception(status)" : 1
Internally : 1
macros : 37
"PyStatus.func" : 1
whereas : 4
"func" : 1
Example: : 6
alloc(void : 2
**ptr : 1
size_t : 28
*ptr : 3
PyMem_RawMalloc(size); : 1
(*ptr : 1
== : 38
NULL) : 15
PyStatus_NoMemory(); : 1
PyStatus_Ok(); : 1
*ptr; : 1
alloc(&ptr : 1
16); : 1
PyMem_Free(ptr); : 1
0; : 15
PyPreConfig : 10
=========== : 1
initialize : 11
preconfiguration: : 1
PyPreConfig_InitPythonConfig(PyPreConfig : 1
*preconfig) : 3
preconfiguration : 6
PyPreConfig_InitIsolatedConfig(PyPreConfig : 1
allocator : 50
allocators: : 3
"PYMEM_ALLOCATOR_NOT_SET" : 3
("0"): : 1
change : 19
allocators : 18
(use : 3
defaults) : 1
"PYMEM_ALLOCATOR_DEFAULT" : 1
("1"): : 1
"PYMEM_ALLOCATOR_DEBUG" : 1
("2"): : 1
debug : 32
"PYMEM_ALLOCATOR_MALLOC" : 1
("3"): : 1
library : 24
"PYMEM_ALLOCATOR_MALLOC_DEBUG" : 1
("4"): : 1
"PYMEM_ALLOCATOR_PYMALLOC" : 2
("5"): : 1
pymalloc : 14
"PYMEM_ALLOCATOR_PYMALLOC_DEBUG" : 2
("6"): : 1
"configured : 2
--without- : 1
pymalloc" : 1
Management : 3
Default: : 59
configure_locale : 1
user : 21
equals : 13
"coerce_c_locale" : 1
"coerce_c_locale_warn" : 1
*locale : 4
encoding* : 3
config : 18
coerce_c_locale : 1
"2" : 12
coerce : 2
decide : 1
coerced : 2
coerce_c_locale_warn : 1
emit : 2
warning : 27
dev_mode : 2
Development : 2
Mode: : 2
see : 37
"PyConfig.dev_mode" : 2
"PyConfig.isolated" : 2
legacy_windows_fs_encoding : 1
non-zero: : 1
"PyPreConfig.utf8_mode" : 4
"PyConfig.filesystem_encoding" : 1
""mbcs"" : 2
"PyConfig.filesystem_errors" : 1
""replace"" : 2
Initialized : 1
"PYTHONLEGACYWINDOWSFSENCODING" : 2
Windows : 49
"#ifdef : 2
MS_WINDOWS" : 2
specific : 26
parse_argv : 2
"Py_PreInitializeFromArgs()" : 1
"Py_PreInitializeFromBytesArgs()" : 1
parse : 7
"argv" : 13
parses : 6
Command : 2
Line : 1
Arguments : 2
use_environment : 2
"PyConfig.use_environment" : 2
utf8_mode : 1
enable : 14
Mode : 9
"-X : 9
utf8" : 2
option : 47
"PYTHONUTF8" : 2
Also : 16
"LC_CTYPE" : 1
"POSIX" : 2
Preinitialize : 12
===================================== : 1
preinitialization : 8
Python: : 5
("PyPreConfig.allocator") : 1
Configure : 1
(*locale : 1
encoding*) : 1
("PyPreConfig.utf8_mode") : 1
("PyPreConfig" : 1
"_PyRuntime.preconfig" : 1
Py_PreInitialize(const : 1
*preconfig* : 8
Py_PreInitializeFromBytesArgs(const : 1
*preconfig : 2
*const : 17
*argv) : 4
*argv* : 8
(bytes : 1
strings) : 4
"parse_argv" : 6
Py_PreInitializeFromArgs(const : 1
(wide : 1
(error : 3
exit) : 3
"PyStatus_Exception()" : 3
("PyPreConfig_InitPythonConfig()") : 1
pre-configuration : 1
encodings : 3
enables : 4
"PyMem_SetAllocator()" : 4
install : 4
custom : 6
"PyPreConfig.allocator" : 2
"PyMem_RawMalloc()" : 9
safe : 11
"Py_DecodeLocale()" : 14
preconfig; : 1
PyPreConfig_InitPythonConfig(&preconfig); : 1
preconfig.utf8_mode : 1
Py_PreInitialize(&preconfig); : 1
speaks : 1
Py_Initialize(); : 1
.. : 27
here : 13
Py_Finalize(); : 1
"PyConfig_Clear()" : 1
configuration : 40
methods: : 1
PyConfig_InitPythonConfig(PyConfig : 1
*config) : 5
PyConfig_InitIsolatedConfig(PyConfig : 1
PyConfig_SetString(PyConfig : 1
*config : 5
*config_str : 2
*str) : 3
Copy : 9
wide : 13
*str* : 15
"*config_str" : 2
PyConfig_SetBytesString(PyConfig : 1
PyConfig_SetArgv(PyConfig : 1
("argv" : 2
*config*) : 2
PyConfig_SetBytesArgv(PyConfig : 1
PyConfig_SetWideStringList(PyConfig : 1
**items) : 1
PyConfig_Read(PyConfig : 1
Read : 7
calculated : 4
3.11 : 35
"PyConfig_Read()" : 4
"PyConfig.argv" : 11
once: : 2
"PyConfig.parse_argv" : 9
parsed : 9
Since : 18
strippped : 2
twice : 3
3.10: : 21
now : 51
calculates : 3
listed : 13
under : 16
Path : 21
updated : 2
PyConfig_Clear(PyConfig : 1
Release : 9
Most : 10
("PyPreConfig") : 1
tuned : 1
method: : 1
Moreover : 3
"PyConfig_SetArgv()" : 1
"PyConfig_SetBytesArgv()" : 1
non-zero) : 1
argv : 1
"sys.argv" : 5
strip : 3
"orig_argv" : 3
safe_path : 1
prepends : 1
potentially : 5
unsafe : 2
"sys.path" : 23
startup: : 1
"argv[0]" : 5
"L"-m"" : 1
("python : 3
-m : 1
module") : 1
prepend : 8
working : 6
directory : 26
script : 17
script.py") : 1
script's : 2
it's : 14
symbolic : 2
link : 2
resolve : 1
links : 1
Otherwise : 31
-c : 2
code" : 1
"python") : 1
"-P" : 1
"PYTHONSAFEPATH" : 1
*base_exec_prefix : 1
"sys.base_exec_prefix" : 1
*base_executable : 1
base : 42
executable: : 2
"sys._base_executable" : 1
"__PYVENV_LAUNCHER__" : 4
"PyConfig.executable" : 2
*base_prefix : 1
"sys.base_prefix" : 1
buffered_stdio : 1
"configure_c_stdio" : 1
disable : 5
buffering : 5
streams : 7
stdout : 6
stderr : 5
"-u" : 2
"PYTHONUNBUFFERED" : 2
stdin : 4
buffered : 3
bytes_warning : 1
issue : 5
comparing : 3
"int" : 8
"BytesWarning" : 2
Incremented : 7
"-b" : 3
warn_default_encoding : 1
"EncodingWarning" : 1
"io.TextIOWrapper" : 1
Opt-in : 1
EncodingWarning : 1
details : 24
3.10 : 28
code_debug_ranges : 1
disables : 5
inclusion : 3
column : 3
mappings : 7
traceback : 18
printing : 5
carets : 1
locations : 2
"PYTHONNODEBUGRANGES" : 1
no_debug_ranges" : 1
*check_hash_pycs_mode : 1
Control : 8
validation : 1
behavior : 16
hash-based : 3
files: : 1
"--check-hash-based-pycs" : 1
Valid : 1
values: : 2
"L"always"": : 1
Hash : 1
invalidation : 2
'check_source' : 2
flag : 73
"L"never"": : 1
Assume : 1
pycs : 2
"L"default"": : 1
determines : 3
"L"default"" : 1
552** : 1
"Deterministic : 1
pycs" : 1
configure_c_stdio : 1
streams: : 1
("O_BINARY") : 1
"buffered_stdio" : 1
"interactive" : 1
(only : 2
Windows) : 3
dev" : 1
"PYTHONDEVMODE" : 1
dump_refs : 1
Dump : 1
dump : 2
alive : 2
"PYTHONDUMPREFS" : 2
Need : 2
"Py_TRACE_REFS" : 3
defined: : 2
"configure : 4
--with-trace-refs : 3
option" : 3
*exec_prefix : 1
site-specific : 2
prefix : 8
platform-dependent : 1
installed: : 2
"sys.exec_prefix" : 3
*executable : 1
executable : 11
interpreter: : 2
"sys.executable" : 4
faulthandler : 2
Enable : 4
"faulthandler.enable()" : 1
startup : 9
faulthandler" : 1
"PYTHONFAULTHANDLER" : 1
*filesystem_encoding : 1
*Filesystem : 2
encoding*: : 2
"sys.getfilesystemencoding()" : 1
macOS : 6
Android : 5
VxWorks: : 1
""utf-8"" : 4
Windows: : 4
"legacy_windows_fs_encoding" : 2
Default : 8
platforms: : 3
""ascii"" : 2
detects : 3
"nl_langinfo(CODESET)" : 3
announces : 1
"mbstowcs()" : 1
decodes : 1
different : 40
(usually : 4
Latin1) : 1
At : 8
normalized : 3
codec : 55
""ANSI_X3.4-1968"" : 1
replaced : 11
"filesystem_errors" : 3
*filesystem_errors : 1
handler*: : 1
"sys.getfilesystemencodeerrors()" : 1
""surrogatepass"" : 2
""surrogateescape"" : 6
Supported : 1
handlers: : 1
""strict"" : 6
encoding) : 2
"filesystem_encoding" : 3
hash_seed : 1
use_hash_seed : 1
Randomized : 1
hash : 7
seed : 3
"use_hash_seed" : 1
chosen : 2
randomly : 1
"hash_seed" : 1
"PYTHONHASHSEED" : 3
*use_hash_seed* : 1
*home : 1
home : 1
"Py_SetPythonHome()" : 4
"PYTHONHOME" : 6
import_time : 1
profile : 3
importtime" : 1
"PYTHONPROFILEIMPORTTIME" : 1
inspect : 1
Enter : 1
interactive : 14
executing : 15
inspect: : 1
enter : 3
"sys.stdin" : 5
appear : 6
terminal : 4
"-i" : 5
"PYTHONINSPECT" : 2
install_signal_handlers : 1
Install : 3
handlers : 10
(REPL) : 1
"safe_path" : 2
"1": : 2
"use_environment" : 2
"user_site_directory" : 2
"0": : 2
add : 10
site : 4
REPL : 2
"readline" : 2
nor : 5
readline : 1
prompts : 1
"-I" : 7
"PyPreConfig.isolated" : 1
legacy_windows_stdio : 1
"io.FileIO" : 2
"io.WindowsConsoleIO" : 1
"sys.stdout" : 7
"sys.stderr" : 9
"PYTHONLEGACYWINDOWSSTDIO" : 2
528** : 2
(Change : 1
console : 3
UTF-8) : 1
malloc_stats : 1
statistics : 2
"PYTHONMALLOCSTATS" : 2
--without-pymalloc : 1
*platlibdir : 1
Platform : 4
name: : 2
"sys.platlibdir" : 1
"PYTHONPLATLIBDIR" : 1
"PLATLIBDIR" : 1
--with-platlibdir : 1
(default: : 1
""lib"" : 1
""DLLs"" : 1
locate : 1
typically : 16
"DLLs" : 1
However : 17
compatibility : 10
non-standard : 1
layouts : 1
in-tree : 1
virtual : 2
environments : 1
*pythonpath_env : 1
Module : 8
search : 23
("sys.path") : 4
separated : 6
"DELIM" : 1
("os.path.pathsep") : 1
"PYTHONPATH" : 4
module_search_paths : 1
module_search_paths_set : 1
paths: : 1
"module_search_paths_set" : 5
replace : 2
"module_search_paths" : 4
("module_search_paths") : 1
("module_search_paths_set") : 1
optimization_level : 1
Compilation : 1
optimization : 5
level: : 1
Peephole : 1
optimizer : 1
"__debug__" : 4
"True" : 4
Level : 4
assertions : 1
"False" : 4
"2": : 1
docstrings : 8
"-O" : 3
"PYTHONOPTIMIZE" : 2
orig_argv : 1
"sys.orig_argv" : 1
copies : 2
modifying : 2
non- : 6
zero) : 1
"Py_GetArgcArgv()" : 1
parser_debug : 1
Parser : 1
parser : 2
debugging : 10
(for : 13
expert : 2
depending : 25
options) : 2
"-d" : 2
"PYTHONDEBUG" : 2
pathconfig_warnings : 1
calculation : 1
allowed : 13
log : 2
warnings : 10
"stderr" : 1
suppress : 3
Now : 1
applies : 3
*prefix : 1
platform : 20
independent : 11
"sys.prefix" : 3
*program_name : 1
Program : 1
"executable" : 1
during : 22
"Py_SetProgramName()" : 8
"PYTHONEXECUTABLE" : 1
"WITH_NEXT_FRAMEWORK" : 1
"L"python"" : 1
"L"python3"" : 1
platforms : 21
*pycache_prefix : 1
Directory : 1
written: : 1
"sys.pycache_prefix" : 2
pycache_prefix=PATH" : 1
"PYTHONPYCACHEPREFIX" : 1
quiet : 1
Quiet : 1
display : 2
copyright : 3
"-q" : 2
*run_command : 1
"-c" : 3
Used : 5
*run_filename : 1
Filename : 1
line: : 2
"-m" : 2
"script.py" : 1
"python3 : 1
script.py : 1
arg" : 1
"PyConfig.skip_source_first_line" : 1
*run_module : 1
show_ref_count : 1
Show : 1
total : 7
showrefcount" : 1
"Py_REF_DEBUG" : 1
defined) : 2
site_import : 1
"site" : 7
site-dependent : 2
manipulations : 4
entails : 2
explicitly : 20
later : 11
(call : 2
"site.main()" : 2
triggered) : 2
"-S" : 2
"sys.flags.no_site" : 1
inverted : 2
"site_import" : 3
skip_source_first_line : 1
skip : 3
"PyConfig.run_filename" : 1
non-Unix : 1
forms : 2
"#!cmd" : 1
DOS : 1
hack : 1
"-x" : 1
*stdio_encoding : 1
*stdio_errors : 1
Encoding : 5
errors : 18
""backslashreplace"" : 1
handler) : 3
"Py_SetStandardStreamEncoding()" : 2
*error* : 2
*errors* : 15
"PYTHONIOENCODING" : 3
encoding: : 1
""UTF-8"" : 1
handler: : 1
tracemalloc : 6
"tracemalloc.start()" : 1
tracemalloc=N" : 1
"PYTHONTRACEMALLOC" : 1
ignore : 4
"-E" : 3
user_site_directory : 1
"-s" : 2
"PYTHONNOUSERSITE" : 2
verbose : 2
Verbose : 1
print : 7
showing : 2
(filename : 2
module) : 3
checked : 5
searching : 2
cleanup : 11
"-v" : 2
"PYTHONVERBOSE" : 2
warnoptions : 1
Options : 1
"warnings" : 5
filters : 1
lowest : 3
highest : 1
priority: : 1
"sys.warnoptions" : 5
reverse : 1
order: : 3
last : 17
"PyConfig.warnoptions" : 3
becomes : 10
"warnings.filters" : 1
(highest : 1
priority) : 1
"-W" : 2
"warnoptions" : 1
"PYTHONWARNINGS" : 1
Multiple : 3
commas : 1
(",") : 1
write_bytecode : 1
try : 4
"-B" : 2
"PYTHONDONTWRITEBYTECODE" : 2
"sys.dont_write_bytecode" : 1
"write_bytecode" : 1
xoptions : 1
Values : 1
"-X" : 4
options: : 2
"sys._xoptions" : 2
stripped : 1
"xoptions" : 1
3.9: : 16
"show_alloc_count" : 1
============================ : 5
Py_InitializeFromConfig(const : 1
*config* : 1
"PyImport_FrozenModules()" : 1
("PyConfig" : 1
"PyInterpreterState.config" : 1
init_python(void) : 2
PyConfig_SetString(&config : 2
&config.program_name : 2
L"/path/to/my_program"); : 1
More : 9
complete : 4
override : 9
many : 18
Any : 8
initialization: : 1
init_python(const : 1
*program_name) : 1
(decode : 1
PyConfig_SetBytesString(&config : 1
program_name); : 1
done; : 5
PyConfig_Read(&config); : 1
Specify : 1
sys.path : 1
modify : 22
finish : 4
PySys_GetObject("path") : 1
config.module_search_paths_set : 1
PyWideStringList_Append(&config.module_search_paths : 2
L"/path/to/stdlib"); : 1
L"/path/to/more/modules"); : 1
Override : 1
computed : 4
PyConfig_Read() : 1
&config.executable : 1
L"/path/to/my_executable"); : 1
done: : 1
====================== : 4
"PyPreConfig_InitIsolatedConfig()" : 1
"PyConfig_InitIsolatedConfig()" : 1
isolate : 1
ignores : 5
global : 53
("PyConfig.argv" : 1
parsed) : 1
(ex: : 10
"stdout") : 1
Signal : 3
unspecified : 1
"PyConfig.home" : 3
avoid : 15
computing : 1
==================== : 4
"PyPreConfig_InitPythonConfig()" : 1
"PyConfig_InitPythonConfig()" : 1
Environments : 1
coercion : 1
(**PEP : 7
538**) : 1
540**) : 1
"PYTHONCOERCECLOCALE" : 1
========================= : 5
inputs: : 1
"PyConfig.platlibdir" : 1
"PyConfig.pathconfig_warnings" : 1
"PyConfig.program_name" : 2
"PyConfig.pythonpath_env" : 1
directory: : 1
"PATH" : 1
full : 16
(from : 1
"PyConfig.program_name") : 1
(Windows : 1
only) : 2
Application : 5
registry : 6
"SoftwarePythonPythonCoreX.YPythonPath" : 1
HKEY_CURRENT_USER : 1
HKEY_LOCAL_MACHINE : 1
(where : 3
X.Y : 1
"PyConfig.base_exec_prefix" : 1
"PyConfig.base_executable" : 2
"PyConfig.base_prefix" : 1
"PyConfig.exec_prefix" : 1
"PyConfig.module_search_paths_set" : 3
"PyConfig.module_search_paths" : 3
"PyConfig.prefix" : 1
"output : 1
field" : 1
unset : 4
overridden : 1
completely : 3
considered : 15
modification : 6
"pathconfig_warnings" : 1
(Unix : 2
warning) : 1
"base_prefix" : 1
"base_exec_prefix" : 1
inherit : 2
"prefix" : 4
"exec_prefix" : 3
"Py_Main()" : 3
"sys.path": : 1
"run_filename" : 3
"__main__.py" : 1
"isolated" : 2
zero: : 2
"run_module" : 1
Do : 14
nothing : 9
filename : 9
user's : 5
site- : 2
appends : 1
"pyvenv.cfg" : 1
"._pth" : 2
"python._pth") : 1
"pybuilddir.txt" : 1
present: : 1
Py_RunMain() : 2
============ : 2
Py_RunMain(void) : 1
Execute : 2
("PyConfig.run_command") : 1
("PyConfig.run_filename") : 1
("PyConfig.run_module") : 1
By : 4
run : 10
Finally : 2
finalizes : 1
Py_GetArgcArgv() : 2
Py_GetArgcArgv(int : 1
*argc : 1
***argv) : 1
Get : 30
"PyConfig.orig_argv" : 3
Multi-Phase : 2
Private : 4
Provisional : 2
================================================== : 1
section : 25
private : 11
provisional : 2
introducing : 1
multi-phase : 10
core : 3
feature : 6
432**: : 1
"Core" : 5
phase : 12
"bare : 1
minimum : 9
Python": : 1
Builtin : 3
types; : 1
exceptions; : 1
modules; : 1
"sys" : 10
partially : 1
exist : 11
yet) : 1
"Main" : 4
fully : 5
initialized: : 2
"importlib"; : 1
Apply : 1
Configuration; : 1
handlers; : 1
Finish : 1
"sys.path"); : 1
features : 5
"faulthandler" : 1
"tracemalloc"; : 1
etc : 2
API: : 3
"PyConfig._init_main": : 1
stops : 1
"PyConfig._isolated_interpreter": : 1
disallow : 3
threads : 22
subprocesses : 1
fork : 8
_Py_InitializeMain(void) : 1
Move : 1
No : 13
"importlib" : 1
configured: : 3
applied : 3
customize : 2
tune : 1
maybe : 1
"sys.meta_path" : 1
importer : 1
become : 8
calculatin : 1
Core : 1
Main : 1
432** : 1
motivation : 1
properly : 11
marked : 1
provisional: : 1
anytime : 1
public : 10
designed : 2
phases: : 1
config._init_main : 1
'config' : 1
sys.stderr : 1
sys.stdout : 1
_Py_InitializeMain() : 1
res : 6
PyRun_SimpleString( : 1
sys; : 2
" : 5
"print('Run : 1
_Py_InitializeMain' : 1
"file=sys.stderr)"); : 1
(res : 1
< : 19
0) : 21
exit(1); : 1
put : 5
_Py_InitializeMain(); : 1
*********** : 1
"set" : 18
"frozenset" : 14
functionality : 7
protocol : 40
(including : 13
"PyObject_CallMethod()" : 4
"PyObject_RichCompareBool()" : 3
"PyObject_Hash()" : 2
"PyObject_Repr()" : 7
"PyObject_IsTrue()" : 2
"PyObject_Print()" : 1
"PyObject_GetIter()") : 1
"PyNumber_And()" : 2
"PyNumber_Subtract()" : 2
"PyNumber_Or()" : 2
"PyNumber_Xor()" : 2
"PyNumber_InPlaceAnd()" : 2
"PyNumber_InPlaceSubtract()" : 2
"PyNumber_InPlaceOr()" : 2
"PyNumber_InPlaceXor()") : 1
PySetObject : 1
hold : 18
"PyDictObject" : 1
fixed : 5
(much : 2
storage) : 2
separate : 8
sized : 2
medium : 1
None : 2
subject : 6
All : 23
documented : 11
manipulating : 2
PySet_Type : 1
PyFrozenSet_Type : 1
pointers : 23
Likewise : 1
iterable : 10
PySet_Check(PyObject : 1
PyFrozenSet_Check(PyObject : 1
PyAnySet_Check(PyObject : 1
PySet_CheckExact(PyObject : 1
PyAnySet_CheckExact(PyObject : 1
PyFrozenSet_CheckExact(PyObject : 1
*PySet_New(PyObject : 1
*iterable) : 2
*iterable* : 7
Raise : 26
copying : 3
("c=set(s)") : 1
*PyFrozenSet_New(PyObject : 1
frozenset : 1
instances : 49
subtypes : 50
PySet_Size(PyObject : 1
*anyset) : 2
Equivalent : 37
"len(anyset)" : 1
"PyExc_SystemError" : 5
*anyset* : 2
PySet_GET_SIZE(PyObject : 1
"PySet_Size()" : 2
PySet_Contains(PyObject : 1
*anyset : 1
*key) : 22
"__contains__()" : 2
automatically : 22
unhashable : 5
temporary : 9
frozensets : 3
*key* : 33
PySet_Add(PyObject : 1
*set : 2
(like : 2
"PyTuple_SetItem()" : 8
brand : 4
exposed : 16
code) : 2
"MemoryError" : 7
room : 2
grow : 2
*set* : 5
PySet_Discard(PyObject : 1
(no : 2
action : 1
taken) : 1
Does : 4
"KeyError" : 6
missing : 1
"discard()" : 1
*PySet_Pop(PyObject : 1
*set) : 2
removes : 1
PySet_Clear(PyObject : 1
elements : 13
Byte : 3
Array : 3
****************** : 7
PyByteArrayObject : 1
bytearray : 9
PyByteArray_Type : 1
type; : 6
Type : 38
PyByteArray_Check(PyObject : 1
*o* : 148
PyByteArray_CheckExact(PyObject : 1
Direct : 2
*PyByteArray_FromObject(PyObject : 1
*PyByteArray_FromStringAndSize(const : 1
*string : 1
*string* : 2
*PyByteArray_Concat(PyObject : 1
*a : 5
*b) : 3
Concat : 2
bytearrays : 1
*a* : 7
*b* : 6
PyByteArray_Size(PyObject : 1
*bytearray) : 4
*bytearray* : 3
*PyByteArray_AsString(PyObject : 1
extra : 14
appended : 5
PyByteArray_Resize(PyObject : 1
*bytearray : 1
Resize : 2
Macros : 8
====== : 1
trade : 1
safety : 1
speed : 2
*PyByteArray_AS_STRING(PyObject : 1
"PyByteArray_AsString()" : 2
PyByteArray_GET_SIZE(PyObject : 1
"PyByteArray_Size()" : 2
Coroutine : 3
3.5 : 19
"async" : 1
PyCoroObject : 1
coroutine : 4
PyCoro_Type : 1
PyCoro_CheckExact(PyObject : 1
*ob) : 15
*ob*'s : 2
"PyCoro_Type"; : 1
*ob* : 38
*PyCoro_New(PyFrameObject : 1
*frame : 4
*qualname) : 3
*frame* : 14
"__name__" : 9
"__qualname__" : 5
*qualname* : 3
stolen : 6
Operating : 3
System : 9
Utilities : 5
************************** : 3
*PyOS_FSPath(PyObject : 1
3.6.* : 4
"os.PathLike" : 3
"__fspath__()" : 1
3.6 : 10
Py_FdIsInteractive(FILE : 1
*fp : 17
*filename) : 9
(nonzero) : 2
I/O : 18
*fp* : 6
*filename* : 14
deemed : 1
"isatty(fileno(fp))" : 1
"Py_InteractiveFlag" : 1
"'<stdin>'" : 1
"'???'" : 1
PyOS_BeforeFork() : 1
fork() : 4
prepare : 1
"fork()" : 13
clones : 3
systems : 9
Warning: : 18
"main" : 9
interpreter) : 4
"PyOS_BeforeFork()" : 3
PyOS_AfterFork_Parent() : 1
update : 8
parent : 4
cloning : 1
"PyOS_AfterFork_Parent()" : 3
PyOS_AfterFork_Child() : 1
child : 3
"PyOS_AfterFork_Child()" : 5
"os.register_at_fork()" : 1
registering : 5
PyOS_AfterFork() : 1
fork().* : 1
fork; : 1
need : 45
3.7: : 17
superseded : 2
PyOS_CheckStack() : 1
USE_STACKCHECK : 1
runs : 4
stack : 10
reliable : 1
"USE_STACKCHECK" : 3
Microsoft : 1
Visual : 1
C++ : 8
compiler) : 1
automatically; : 1
PyOS_sighandler_t : 3
PyOS_getsig(int : 1
thin : 3
"sigaction()" : 2
"signal()" : 2
"PyOS_sighandler_t" : 3
typedef : 49
(*)(int) : 2
PyOS_setsig(int : 1
h) : 1
*h*; : 1
old : 12
*Py_DecodeLocale(const : 1
*arg : 3
*size) : 4
directly: : 1
"PyConfig_SetBytesString()" : 1
ensures : 3
preinitialized.This : 1
*filesystem : 15
handler* : 15
surrogateescape : 3
undecodable : 1
decoded : 23
U+DC80..U+DCFF; : 1
surrogate : 10
escaped : 2
decoding : 16
"PyMem_RawFree()" : 3
excluding : 1
"*size" : 2
"(size_t)-1" : 3
"(size_t)-2" : 1
selected : 3
"PyConfig_Read()": : 2
Decoding : 1
happen : 3
bug : 2
"Py_EncodeLocale()" : 6
encode : 11
"PyUnicode_DecodeFSDefaultAndSize()" : 4
"PyUnicode_DecodeLocaleAndSize()" : 4
3.8: : 21
"Py_LegacyWindowsFSEncodingFlag" : 2
zero; : 1
*Py_EncodeLocale(const : 1
*text : 1
*error_pos) : 1
Encode : 12
U+DC80..U+DCFF : 1
0x80..0xFF : 1
error_pos : 1
"*error_pos" : 1
invalid : 6
decode : 14
"PyUnicode_EncodeFSDefault()" : 3
"PyUnicode_EncodeLocale()" : 3
**************** : 6
accessible : 11
thread's : 4
contained : 22
*PySys_GetObject(const : 1
PySys_SetObject(const : 1
*v) : 9
*v* : 23
deleted : 10
sys : 1
PySys_ResetWarnOptions() : 1
Reset : 5
prior : 6
PySys_AddWarnOption(const : 1
*s) : 3
kept : 15
backward : 14
compatibility: : 10
*s* : 12
affect : 7
filter : 1
PySys_AddWarnOptionUnicode(PyObject : 1
*unicode) : 14
*unicode* : 4
currently : 19
usable : 8
outside : 2
CPython : 14
implicit : 2
effective : 2
can't : 3
runtime : 21
permit : 1
creation : 11
PySys_SetPath(const : 1
delimiter : 4
(":" : 1
Unix : 15
PySys_WriteStdout(const : 1
Write : 5
*format* : 15
truncation : 1
occurs : 14
below) : 8
limit : 7
formatted : 7
1000 : 3
less : 13
-- : 17
particular : 19
unrestricted : 1
"%s" : 4
occur; : 1
limited : 9
"%.<N>s" : 1
<N> : 2
decimal : 4
maximum : 8
exceed : 1
watch : 1
"%f" : 1
hundreds : 1
digits : 4
very : 7
problem : 7
written : 18
(C : 1
*stdout* : 1
PySys_WriteStderr(const : 1
"PySys_WriteStdout()" : 2
*stderr* : 2
PySys_FormatStdout(const : 1
PySys_WriteStdout() : 1
"PyUnicode_FromFormatV()" : 2
truncate : 1
PySys_FormatStderr(const : 1
"PySys_FormatStdout()" : 2
PySys_AddXOption(const : 1
"PyConfig.xoptions" : 1
mapping : 21
"PySys_GetXOptions()" : 2
*PySys_GetXOptions() : 1
similarly : 2
PySys_Audit(const : 1
*event : 2
auditing : 8
active : 10
construct : 2
Apart : 1
single-element : 1
(The : 4
consumes : 1
consumed : 1
cause : 31
leaks.) : 1
treated : 15
"sys.audit()" : 1
performs : 5
3.8.2: : 1
Require : 1
unavoidable : 1
deprecation : 2
PySys_AddAuditHook(Py_AuditHookFunction : 1
*userData) : 3
callable : 27
*hook* : 1
Hooks : 1
interpreters : 6
*userData* : 2
runtimes : 2
refer : 9
audit : 2
notified : 1
operation : 37
raising : 3
subclassed : 2
"Exception" : 5
(other : 2
silenced) : 1
(*)(const : 1
guaranteed : 13
"PyTupleObject" : 5
GIL : 23
578** : 1
detailed : 3
events : 6
Details : 2
documentation : 11
"sys.addaudithook" : 1
derived : 7
cleared : 6
callers : 2
assume : 10
control : 13
Process : 4
*************** : 8
Py_FatalError(const : 1
*message) : 2
fatal : 9
kill : 1
performed : 14
invoked : 9
condition : 4
detected : 3
interpreter; : 2
e.g. : 2
appears : 2
corrupted : 1
"abort()" : 2
attempt : 5
produce : 9
"core" : 1
"Py_FatalError()" : 5
logs : 1
"Py_LIMITED_API" : 15
Log : 1
Py_Exit(int : 1
"Py_FinalizeEx()" : 13
"exit(status)" : 1
120 : 1
Errors : 2
finalization : 7
Py_AtExit(void : 1
(*func)()) : 1
Register : 3
registration : 3
"Py_AtExit()" : 2
"0"; : 1
Python's : 17
completed : 1
APIs : 30
*func* : 18
Buffer : 21
Protocol : 29
Certain : 1
wrap : 3
*buffer* : 10
Such : 3
include : 20
"array.array" : 2
Third- : 1
party : 2
libraries : 8
define : 14
image : 2
numeric : 8
analysis : 3
While : 8
share : 5
characteristic : 1
backed : 1
desirable : 2
situations : 3
intermediate : 1
facility : 2
sides: : 1
producer : 1
export : 3
"buffer : 1
interface" : 1
Structures; : 1
consumer : 21
several : 8
obtain : 3
parameter) : 1
Simple : 1
byte-oriented : 1
possible; : 1
multi-byte : 1
"write()" : 2
objects: : 3
series : 2
needs : 25
"readinto()" : 1
selectively : 1
reject : 1
exporting : 9
acquire : 2
over : 21
target : 3
object: : 3
"PyObject_GetBuffer()" : 10
right : 5
parameters; : 2
siblings) : 1
codes : 3
Failure : 2
lead : 3
various : 8
issues : 6
resource : 1
leaks : 4
simply : 5
"buffers") : 1
programmer : 3
zero-copy : 1
slicing : 2
mechanism : 6
Using : 3
ability : 1
quite : 1
easily : 4
constant : 13
manipulation : 1
passing : 8
operating : 10
structured : 2
in- : 1
Contrary : 1
simple : 13
generic : 9
memoryview : 13
instructions : 1
Structures : 26
obtaining : 1
Py_buffer : 10
members) : 1
3.11.* : 19
*buf : 8
start : 38
logical : 5
physical : 3
exporter : 12
"strides" : 6
*contiguous* : 4
arrays : 14
beginning : 6
*obj : 24
owned : 8
decremented : 3
C-API : 4
*temporary* : 1
wrapped : 2
"PyMemoryView_FromBuffer()" : 3
"PyBuffer_FillInfo()" : 3
general : 9
MUST : 17
NOT : 3
len : 5
"product(shape) : 2
itemsize" : 2
non-contiguous : 1
Accessing : 3
"((char : 1
*)buf)[0] : 1
up : 23
((char : 1
*)buf)[len-1]" : 1
guarantees : 3
contiguity : 5
"PyBUF_SIMPLE" : 4
"PyBUF_WRITABLE" : 6
readonly : 6
indicator : 30
controlled : 3
itemsize : 5
Item : 1
element : 16
"struct.calcsize()" : 1
"format" : 5
Important : 1
requests : 11
"PyBUF_FORMAT" : 3
"itemsize" : 7
"shape" : 6
equality : 1
len" : 1
holds : 10
navigate : 1
disregard : 1
"itemsize : 1
1" : 5
*NUL* : 1
"struct" : 1
style : 2
""B"" : 1
(unsigned : 2
bytes) : 4
ndim : 5
dimensions : 3
n-dimensional : 4
scalar : 2
"suboffsets" : 2
"PyBUF_MAX_NDIM" : 2
limits : 1
64 : 1
Exporters : 1
consumers : 3
multi-dimensional : 1
SHOULD : 1
*shape : 2
"ndim" : 5
shape : 15
"shape[0] : 1
shape[ndim-1] : 1
"len" : 2
Shape : 1
restricted : 1
"shape[n] : 2
>= : 5
0" : 7
attention : 1
*strides : 3
dimension : 3
Stride : 1
strides : 15
positive : 11
"strides[n] : 1
<= : 12
*suboffsets : 2
"suboffsets[n] : 1
along : 3
nth : 1
suboffset : 2
dictates : 1
de-referencing : 3
(striding : 1
block) : 1
suboffsets : 11
(i.e : 4
needed) : 1
value) : 8
Imaging : 1
Library : 1
(PIL) : 1
*internal : 1
internally : 9
might : 17
re-cast : 1
flags : 33
freed : 12
released : 12
alter : 1
sending : 1
via : 24
complexity : 2
vary : 1
drastically : 1
*flags* : 27
exact : 5
unambiguously : 1
request-independent : 2
-------------------------- : 5
influenced : 1
correct : 4
"obj" : 2
---------------- : 3
PyBUF_WRITABLE : 1
Controls : 2
"readonly" : 1
report : 3
MAY : 3
choice : 1
consistent : 9
PyBUF_FORMAT : 1
correctly : 7
|'d : 2
next : 13
stand-alone : 1
implies : 4
decreasing : 1
+-------------------------------+---------+-----------+--------------+ : 5
| : 2062
Request : 3
|===============================|=========|===========|==============| : 1
PyBUF_INDIRECT : 1
yes : 30
PyBUF_STRIDES : 1
NULL : 36
PyBUF_ND : 1
PyBUF_SIMPLE : 1
Fortran : 1
*contiguity* : 1
stride : 2
Without : 4
C-contiguous : 1
+-------------------------------------+---------+-----------+--------------+----------+ : 5
contig : 2
|=====================================|=========|===========|==============|==========| : 1
PyBUF_C_CONTIGUOUS : 1
PyBUF_F_CONTIGUOUS : 1
F : 2
PyBUF_ANY_CONTIGUOUS : 1
"PyBUF_ND" : 1
compound : 3
----------------- : 3
combination : 7
frequently : 2
combinations : 2
*U* : 1
stands : 1
undefined : 13
"PyBuffer_IsContiguous()" : 2
+---------------------------------+---------+-----------+--------------+----------+------------+----------+ : 9
|=================================|=========|===========|==============|==========|============|==========| : 1
PyBUF_FULL : 1
U : 6
PyBUF_FULL_RO : 1
PyBUF_RECORDS : 1
PyBUF_RECORDS_RO : 1
PyBUF_STRIDED : 1
PyBUF_STRIDED_RO : 1
PyBUF_CONTIG : 1
PyBUF_CONTIG_RO : 1
Complex : 8
============== : 2
NumPy-style: : 2
------------------------------ : 2
NumPy-style : 1
"ndim : 1
interpreted : 13
C-array : 2
ptr : 2
(char : 6
*)buf : 2
+ : 25
indices[0] : 1
strides[0] : 1
indices[n-1] : 1
strides[n-1]; : 1
*((typeof(item) : 1
*)ptr); : 1
noted : 2
validity : 1
function: : 4
def : 3
verify_structure(memlen : 1
offset): : 1
"""Verify : 1
represent : 17
memory: : 1
*mem: : 1
memlen: : 2
offset: : 1
- : 13
mem : 1
""" : 1
offset : 22
% : 13
itemsize: : 1
False : 3
offset+itemsize : 1
> : 3
any(v : 1
v : 1
strides): : 1
0: : 3
shape: : 1
True : 1
imin : 1
sum(strides[j]*(shape[j]-1) : 2
j : 2
range(ndim) : 2
strides[j] : 2
imax : 1
offset+imin : 1
offset+imax+itemsize : 1
memlen : 1
PIL-style: : 2
---------------------------------------- : 1
addition : 10
PIL-style : 1
followed : 10
three-dimensional : 1
"char : 9
v[2][2][3]" : 1
viewed : 3
two- : 1
dimensional : 1
arrays: : 1
(*v[2])[2][3]" : 1
pointing : 5
x[2][3]" : 1
located : 4
anywhere : 1
Here : 9
N-D : 1
N-dimensional : 1
suboffsets: : 1
*get_item_pointer(int : 1
*indices) : 2
*pointer : 2
(char*)buf; : 1
i; : 1
(i : 5
ndim; : 1
i++) : 4
+= : 5
strides[i] : 1
indices[i]; : 1
(suboffsets[i] : 1
>=0 : 1
) : 1
*((char**)pointer) : 1
suboffsets[i]; : 1
(void*)pointer; : 1
Buffer-related : 2
======================== : 1
PyObject_CheckBuffer(PyObject : 1
*obj) : 14
*obj* : 47
guarantee : 5
PyObject_GetBuffer(PyObject : 1
*exporter : 4
*view : 6
flags) : 5
Send : 1
*exporter* : 9
*view* : 12
"PyExc_BufferError" : 5
"view->obj" : 6
chained : 1
providers : 2
redirect : 1
(See : 2
Structures) : 1
Successful : 1
paired : 1
PyBuffer_Release(Py_buffer : 1
*view) : 2
PyBuffer_SizeFromFormat(const : 1
*format) : 1
-1 : 11
PyBuffer_IsContiguous(const : 1
order) : 5
C-style : 4
(*order* : 3
"'C'") : 1
Fortran-style : 5
"'F'") : 2
"'A'") : 1
*PyBuffer_GetPointer(const : 1
*indices* : 2
"view->ndim" : 1
indices : 12
PyBuffer_FromContiguous(const : 1
fort) : 1
*buf* : 5
*fort* : 1
"'C'" : 3
"'F'" : 3
ordering) : 1
PyBuffer_ToContiguous(void : 1
*src : 1
*src* : 2
*order* : 3
"'A'" : 1
ordering : 2
!= : 5
*src->len* : 1
PyObject_CopyData(PyObject : 1
*dest : 1
*src) : 1
*dest* : 1
Can : 5
PyBuffer_FillContiguousStrides(int : 1
ndims : 1
Fill : 3
*strides* : 1
byte-strides : 1
(C-style : 1
per : 4
PyBuffer_FillInfo(Py_buffer : 1
Handle : 4
wants : 8
writability : 1
according : 12
*readonly* : 1
designated : 1
"-1"; : 3
part : 30
getbufferproc : 2
File : 4
minimal : 2
emulation : 1
rely : 2
(FILE*) : 1
"io" : 2
defines : 9
layers : 1
low-level : 7
unbuffered : 2
wrappers : 4
meant : 5
mostly : 6
reporting : 8
third-party : 5
advised : 1
*PyFile_FromFd(int : 1
fd : 1
*mode : 1
*errors : 8
*newline : 1
closefd) : 1
descriptor : 17
*fd* : 3
*encoding* : 18
*newline* : 1
defaults; : 1
*buffering* : 1
*-1* : 1
comprehensive : 1
"io.open()" : 1
mixing : 3
OS-level : 2
(such : 15
unexpected : 2
3.2: : 10
Ignore : 3
PyObject_AsFileDescriptor(PyObject : 1
associated : 39
"fileno()" : 1
exists; : 1
*PyFile_GetLine(PyObject : 1
*p : 31
n) : 9
"p.readline([n])" : 1
reads : 5
"readline()" : 1
*n* : 17
file; : 1
partial : 1
reached : 7
"EOFError" : 2
PyFile_SetOpenCodeHook(Py_OpenCodeHookFunction : 1
Overrides : 1
normal : 14
"io.open_code()" : 1
*(*)(PyObject : 1
"PyUnicodeObject" : 1
intentionally : 1
importing : 2
execution : 16
Once : 3
"PyFile_SetOpenCodeHook()" : 1
"setopencodehook" : 1
PyFile_WriteObject(PyObject : 1
"Py_PRINT_RAW"; : 2
"str()" : 7
"repr()" : 6
failure; : 6
PyFile_WriteString(const : 1
*s : 20
Reference : 12
Counting : 2
managing : 1
counts : 12
Py_INCREF(PyObject : 1
Increment : 4
reference* : 18
*strong : 13
in-place : 4
"Py_NewRef()" : 3
aren't : 2
sure : 12
"Py_XINCREF()" : 2
Py_XINCREF(PyObject : 1
"Py_XNewRef()" : 3
*Py_NewRef(PyObject : 1
3.10.* : 27
"Py_DECREF()" : 19
example: : 7
Py_INCREF(obj); : 1
self->attr : 2
obj; : 1
Py_NewRef(obj); : 1
"Py_INCREF()" : 4
*Py_XNewRef(PyObject : 1
just : 22
Py_DECREF(PyObject : 1
Decrement : 5
reaches : 2
type's : 25
deallocation : 4
"NULL") : 10
delete : 9
exiting : 2
scope : 3
"Py_XDECREF()" : 7
class : 67
"__del__()" : 2
deallocated) : 1
propagated : 3
executed : 14
reachable : 2
Py_XDECREF(PyObject : 1
effect; : 2
Py_CLEAR(PyObject : 1
apply : 8
carefully : 4
decrementing : 5
good : 5
idea : 2
whenever : 3
traversed : 1
Py_IncRef(PyObject : 1
dynamic : 11
embedding : 14
Py_DecRef(PyObject : 1
core: : 1
"_Py_Dealloc()" : 1
"_Py_ForgetReference()" : 1
"_Py_NewReference()" : 1
"_Py_RefTotal" : 1
Descriptor : 2
"Descriptors" : 1
describe : 9
PyProperty_Type : 1
*PyDescr_NewGetSet(PyTypeObject : 1
PyGetSetDef : 4
*getset) : 1
*PyDescr_NewMember(PyTypeObject : 1
PyMemberDef : 7
*meth) : 6
*PyDescr_NewMethod(PyTypeObject : 1
PyMethodDef : 10
*PyDescr_NewWrapper(PyTypeObject : 1
wrapperbase : 1
*wrapper : 1
*wrapped) : 1
*PyDescr_NewClassMethod(PyTypeObject : 1
*method) : 1
PyDescr_IsData(PyObject : 1
*descr) : 1
*descr* : 2
*PyWrapper_New(PyObject* : 1
Implementation : 2
Support : 17
***************************** : 2
chapter : 10
defining : 6
Common : 3
Base : 2
Implementing : 3
attributes : 27
Quick : 2
"tp : 2
slots" : 2
sub-slots : 6
slot : 71
typedefs : 7
Definition : 2
Slots : 10
Static : 5
Types : 11
Number : 11
Mapping : 8
Sequence : 11
Async : 4
Slot : 10
Examples : 6
Supporting : 6
Cyclic : 6
Garbage : 8
Collection : 6
Controlling : 2
Collector : 2
State : 4
Iterator : 6
general-purpose : 3
iterator : 20
supporting : 8
"__getitem__()" : 7
ending : 4
iteration : 7
PySeqIter_Type : 1
"PySeqIter_New()" : 2
one-argument : 1
"iter()" : 2
PySeqIter_Check(op) : 1
"PySeqIter_Type" : 2
*PySeqIter_New(PyObject : 1
*seq) : 2
*seq* : 1
subscripting : 1
PyCallIter_Type : 1
"PyCallIter_New()" : 2
two-argument : 1
PyCallIter_Check(op) : 1
"PyCallIter_Type" : 2
*PyCallIter_New(PyObject : 1
*callable : 11
*sentinel) : 1
*callable* : 13
*sentinel* : 1
Versioning : 2
********************** : 6
exposes : 2
**built** : 1
necessarily : 8
**run : 1
time** : 1
Stability : 3
discussion : 5
stability : 4
across : 9
PY_MAJOR_VERSION : 1
"3" : 2
"3.4.1a2" : 7
PY_MINOR_VERSION : 1
"4" : 1
PY_MICRO_VERSION : 1
PY_RELEASE_LEVEL : 1
"a" : 1
"0xA" : 2
alpha : 1
"0xB" : 1
beta : 1
"0xC" : 1
candidate : 1
"0xF" : 1
final : 3
PY_RELEASE_SERIAL : 1
Zero : 1
releases : 6
PY_VERSION_HEX : 2
treating : 1
bit : 39
manner: : 1
+---------+---------------------------+---------------------------+----------------------------+ : 5
Bytes : 3
Bits : 1
(big : 1
endian : 10
Meaning : 8
|=========|===========================|===========================|============================| : 1
1-8 : 1
"PY_MAJOR_VERSION" : 1
"0x03" : 1
9-16 : 1
"PY_MINOR_VERSION" : 2
"0x04" : 1
17-24 : 1
"PY_MICRO_VERSION" : 1
"0x01" : 1
4 : 7
25-28 : 1
"PY_RELEASE_LEVEL" : 1
+---------------------------+---------------------------+----------------------------+ : 1
29-32 : 1
"PY_RELEASE_SERIAL" : 1
"0x2" : 1
hexversion : 2
"0x030401a2" : 1
"3.10.0" : 1
"0x030a00f0" : 1
comparisons : 4
e.g : 8
"#if : 1
..." : 1
symbol : 8
"Py_Version" : 3
Py_Version : 1
"PY_VERSION_HEX" : 3
Include/patchlevel.h : 1
Weak : 3
*weak : 1
first-class : 1
implement : 34
acts : 4
proxy : 5
much : 6
PyWeakref_Check(ob) : 1
PyWeakref_CheckRef(ob) : 1
PyWeakref_CheckProxy(ob) : 1
*PyWeakref_NewRef(PyObject : 1
*ob : 2
*callback) : 2
*callback* : 6
notification : 3
collected; : 2
itself : 20
weakly : 5
referencable : 2
*PyWeakref_NewProxy(PyObject : 1
*PyWeakref_GetObject(PyObject : 1
*ref) : 2
*ref* : 1
referent : 1
live : 3
*PyWeakref_GET_OBJECT(PyObject : 1
"PyWeakref_GetObject()" : 2
PyObject_ClearWeakRefs(PyObject : 1
*object) : 3
clear : 19
iterates : 2
callbacks : 4
Hinting : 2
Various : 3
hinting : 1
GenericAlias : 2
Union : 1
"GenericAlias" : 1
*Py_GenericAlias(PyObject : 1
*origin : 1
3.9.* : 7
"types.GenericAlias" : 2
*origin* : 3
"GenericAlias"'s : 2
"__origin__" : 1
"__args__" : 3
PyTypeObject* : 2
PyTupleObject* : 1
"PyObject*" : 4
1-tuple : 1
constructed : 4
"(args,)" : 1
Minimal : 1
"__parameters__" : 1
lazily : 1
Here's : 1
generic: : 1
my_obj_methods[] : 1
// : 15
{"__class_getitem__" : 1
Py_GenericAlias : 1
METH_O|METH_CLASS : 1
"See : 1
PEP : 2
585"} : 1
model : 1
"__class_getitem__()" : 1
Py_GenericAliasType : 1
"Py_GenericAlias()" : 2
MemoryView : 2
*PyMemoryView_FromObject(PyObject : 1
exports : 3
read/write : 2
discretion : 1
*PyMemoryView_FromMemory(char : 1
*mem : 1
*mem* : 1
"PyBUF_READ" : 1
"PyBUF_WRITE" : 1
*PyMemoryView_FromBuffer(const : 1
wrapping : 1
"PyMemoryView_FromMemory()" : 3
*PyMemoryView_GetContiguous(PyObject : 1
buffertype : 1
'C' : 1
'F'ortran : 1
*order*) : 1
PyMemoryView_Check(PyObject : 1
subclasses : 14
*PyMemoryView_GET_BUFFER(PyObject : 1
*mview) : 2
memoryview's : 1
exporter's : 1
*mview* : 2
**must** : 6
instance; : 2
crashes : 3
*PyMemoryView_GET_BASE(PyObject : 1
Very : 3
High : 2
Layer : 6
************************* : 3
let : 3
execute : 3
interact : 2
Several : 2
grammar : 4
symbols : 3
"Py_eval_input" : 2
"Py_file_input" : 2
"Py_single_input" : 2
One : 3
handled : 10
incompatible : 1
Under : 2
(at : 3
least) : 2
linked : 5
care : 10
Py_Main(int : 1
main : 22
programs : 8
*argc* : 3
prepared : 2
program's : 4
"main()" : 3
(converted : 2
locale) : 1
important : 15
not) : 2
exits : 2
(i.e. : 1
exception) : 1
unhandled : 3
"SystemExit" : 5
"Py_InspectFlag" : 2
Py_BytesMain(int : 1
PyRun_AnyFile(FILE : 1
"PyRun_AnyFileExFlags()" : 3
*closeit* : 8
PyRun_AnyFileFlags(FILE : 1
*filename : 24
PyCompilerFlags : 13
*flags) : 10
PyRun_AnyFileEx(FILE : 1
closeit) : 3
PyRun_AnyFileExFlags(FILE : 1
closeit : 3
refers : 8
device : 3
(console : 1
pseudo-terminal) : 1
"PyRun_InteractiveLoop()" : 1
"PyRun_SimpleFile()" : 1
("sys.getfilesystemencoding()") : 1
""???"" : 1
closed : 3
"PyRun_SimpleFileExFlags()" : 4
PyRun_SimpleString(const : 1
*command) : 1
"PyRun_SimpleStringFlags()" : 2
"PyCompilerFlags"* : 1
PyRun_SimpleStringFlags(const : 1
*command : 1
Executes : 1
*command* : 1
"__main__" : 5
PyRun_SimpleFile(FILE : 1
PyRun_SimpleFileEx(FILE : 1
PyRun_SimpleFileExFlags(FILE : 1
in-memory : 2
"fopen(filename : 1
"rb")") : 1
LF : 1
PyRun_InteractiveOne(FILE : 1
"PyRun_InteractiveOneFlags()" : 1
PyRun_InteractiveOneFlags(FILE : 1
statement : 37
prompted : 2
"sys.ps1" : 2
"sys.ps2" : 2
successfully : 4
"errcode.h" : 2
distributed : 2
included : 11
specifically : 3
needed.) : 1
PyRun_InteractiveLoop(FILE : 1
"PyRun_InteractiveLoopFlags()" : 1
PyRun_InteractiveLoopFlags(FILE : 1
statements : 3
EOF : 2
(*PyOS_InputHook)(void) : 1
prototype : 2
"int : 3
func(void)" : 1
prompt : 3
idle : 1
wait : 1
Overriding : 1
integrate : 1
interpreter's : 6
loops : 2
"Modules/_tkinter.c" : 1
*(*PyOS_ReadlineFunctionPointer)(FILE* : 1
char*) : 1
*func(FILE : 1
*stdin : 1
*stdout : 1
*prompt)" : 1
overriding : 1
*prompt* : 1
line-editing : 1
tab-completion : 1
"PyMem_RawRealloc()" : 8
"PyMem_Malloc()" : 9
"PyMem_Realloc()" : 7
*PyRun_String(const : 1
*str : 18
*locals) : 3
"PyRun_StringFlags()" : 2
*PyRun_StringFlags(const : 1
context : 26
compiler : 14
dictionary; : 2
*start* : 10
token : 3
*PyRun_File(FILE : 1
"PyRun_FileExFlags()" : 4
*PyRun_FileEx(FILE : 1
*PyRun_FileFlags(FILE : 1
*PyRun_FileExFlags(FILE : 1
*Py_CompileString(const : 1
start) : 4
"Py_CompileStringFlags()" : 1
*Py_CompileStringFlags(const : 1
"Py_CompileStringExFlags()" : 1
*optimize* : 2
*Py_CompileStringObject(const : 1
*flags : 2
optimize) : 2
compile : 2
*start*; : 1
constrain : 1
compiled : 11
tracebacks : 1
"SyntaxError" : 4
compiler; : 1
selects : 2
Explicit : 1
levels : 2
optimization; : 1
true) : 1
(asserts : 1
false) : 1
(docstrings : 1
too) : 1
3.4 : 19
*Py_CompileStringExFlags(const : 1
"Py_CompileStringObject()" : 1
*PyEval_EvalCode(PyObject : 1
"PyEval_EvalCodeEx()" : 2
*PyEval_EvalCodeEx(PyObject : 1
argcount : 3
*kws : 1
kwcount : 1
*defs : 1
defcount : 1
*kwdefs : 1
*closure) : 2
Evaluate : 2
precompiled : 1
evaluation : 7
defaults : 5
closure : 5
cells : 2
*PyEval_EvalFrame(PyFrameObject : 1
*f) : 1
frame : 38
"PyEval_EvalFrameEx()" : 2
*PyEval_EvalFrameEx(PyFrameObject : 1
*f : 1
throwflag) : 2
unvarnished : 1
interpretation : 1
*f* : 2
interpreting : 1
*throwflag* : 2
causes : 9
thrown; : 1
"throw()" : 2
generator : 12
includes : 13
assertion : 3
help : 6
PyEval_MergeCompilerFlags(PyCompilerFlags : 1
*cf) : 1
changes : 6
Py_eval_input : 1
expressions; : 1
"Py_CompileString()" : 4
Py_file_input : 1
source; : 1
compiling : 4
arbitrarily : 1
Py_single_input : 1
statement; : 1
loop : 5
flags" : 1
"PyCompilerFlags : 2
*flags" : 2
"from : 2
__future__ : 2
import" : 2
Whenever : 2
"cf_flags" : 1
discarded : 4
cf_flags : 1
Compiler : 1
cf_feature_version : 1
*cf_feature_version* : 2
minor : 7
"PyCF_ONLY_AST" : 1
*cf_flags* : 1
CO_FUTURE_DIVISION : 1
division : 1
operator : 8
"/" : 1
"true : 1
division" : 1
238** : 1
Abstract : 2
classes : 21
numerical : 1
types) : 1
"PyList_New()" : 3
*tp_call* : 11
Vectorcall : 5
Recursion : 4
Calling : 10
Old : 3
Tuple : 4
************* : 5
PyTupleObject : 1
PyTuple_Type : 1
"tuple" : 2
PyTuple_Check(PyObject : 1
PyTuple_CheckExact(PyObject : 1
*PyTuple_New(Py_ssize_t : 1
*PyTuple_Pack(Py_ssize_t : 1
n : 4
subsequent : 5
"PyTuple_Pack(2 : 1
b)" : 2
"Py_BuildValue("(OO)" : 1
PyTuple_Size(PyObject : 1
Take : 3
PyTuple_GET_SIZE(PyObject : 1
tuple; : 1
*PyTuple_GetItem(PyObject : 1
pos) : 4
*pos* : 7
*PyTuple_GET_ITEM(PyObject : 1
"PyTuple_GetItem()" : 2
*PyTuple_GetSlice(PyObject : 1
"p[low:high]" : 1
PyTuple_SetItem(PyObject : 1
pos : 5
PyTuple_SET_ITEM(PyObject : 1
*only* : 2
_PyTuple_Resize(PyObject : 1
**p : 1
newsize) : 3
resize : 3
*newsize* : 1
Because : 4
*supposed* : 1
shrink : 1
Think : 1
destroying : 2
efficiently : 3
Client : 1
"*p" : 4
Struct : 3
*********************** : 3
"namedtuple()" : 1
i.e : 10
*PyStructSequence_NewType(PyStructSequence_Desc : 1
*desc) : 3
*desc* : 2
Instances : 3
"PyStructSequence_New()" : 2
PyStructSequence_InitType(PyTypeObject : 1
PyStructSequence_Desc : 3
Initializes : 1
PyStructSequence_InitType2(PyTypeObject : 1
"PyStructSequence_InitType" : 1
members).* : 8
Contains : 1
meta : 1
+---------------------+--------------------------------+----------------------------------------+ : 5
Field : 6
|=====================|================================|========================================| : 1
"doc" : 3
docstring : 11
omit : 2
"fields" : 2
"PyStructSequence_Field : 1
"n_in_sequence" : 1
tuple) : 1
PyStructSequence_Field : 1
Describes : 1
modeled : 3
typed : 1
"PyStructSequence_Desc" : 2
+-------------+--------------------+-------------------------------------------+ : 3
|=============|====================|===========================================| : 1
"PyStructSequence_UnnamedField" : 2
unnamed : 3
PyStructSequence_UnnamedField : 1
Special : 2
changed : 13
*PyStructSequence_New(PyTypeObject : 1
Creates : 4
"PyStructSequence_NewType()" : 2
*PyStructSequence_GetItem(PyObject : 1
*PyStructSequence_GET_ITEM(PyObject : 1
"PyStructSequence_GetItem()" : 2
PyStructSequence_SetItem(PyObject : 1
"PyTuple_SET_ITEM()" : 1
PyStructSequence_SET_ITEM(PyObject : 1
*pos : 1
"PyStructSequence_SetItem()" : 2
implemented : 10
inlined : 3
************** : 3
PyModule_Type : 1
"types.ModuleType" : 1
PyModule_Check(PyObject : 1
PyModule_CheckExact(PyObject : 1
"PyModule_Type" : 4
*PyModule_NewObject(PyObject : 1
"__doc__" : 2
"__package__" : 2
(all : 3
"None"); : 1
providing : 2
*PyModule_New(const : 1
"PyModule_NewObject()" : 2
*PyModule_GetDict(PyObject : 1
*module) : 8
*module*'s : 3
namespace; : 1
"__dict__" : 12
*module* : 14
object) : 4
"PyModule_*" : 1
"PyObject_*" : 2
manipulate : 2
*PyModule_GetNameObject(PyObject : 1
*PyModule_GetName(PyObject : 1
"PyModule_GetNameObject()" : 2
*PyModule_GetState(PyObject : 1
"state" : 1
"PyModuleDef.m_size" : 1
PyModuleDef : 6
*PyModule_GetDef(PyObject : 1
"PyModuleDef" : 8
*PyModule_GetFilenameObject(PyObject : 1
*PyModule_GetFilename(PyObject : 1
"PyModule_GetFilenameObject()" : 3
'utf-8' : 1
"PyModule_GetFilename()" : 2
"UnicodeEncodeError" : 3
unencodable : 2
filenames : 2
Initializing : 4
(shared : 1
function) : 8
compiled-in : 1
"PyImport_AppendInittab()") : 1
Extensions : 2
Embedded : 1
"multi-phase : 2
initialization" : 3
statically : 10
PyModuleDef_Base : 1
m_base : 1
Always : 21
"PyModuleDef_HEAD_INIT" : 1
*m_name : 1
*m_doc : 1
Docstring : 1
"PyDoc_STRVAR" : 2
m_size : 1
retrieved : 10
"PyModule_GetState()" : 5
makes : 7
sub- : 1
*m_size* : 1
deallocated : 14
"m_free" : 2
Setting : 4
"m_size" : 5
sub-interpreters : 12
non-negative : 2
re-initialized : 1
amount : 2
Non-negative : 1
3121** : 1
*m_methods : 1
module-level : 1
"PyMethodDef" : 5
PyModuleDef_Slot : 2
*m_slots : 1
definitions : 8
"{0 : 2
NULL}" : 2
single-phase : 5
*m_slots* : 4
Prior : 1
inquiry : 8
m_reload : 1
traverseproc : 3
m_traverse : 1
traversal : 4
GC : 9
("Py_mod_exec" : 3
precisely : 3
(as : 14
"PyModule_GetState()") : 4
m_clear : 1
clearing : 6
"PyTypeObject.tp_clear" : 1
*always* : 2
counting : 2
collector : 21
involved : 4
freefunc : 3
m_free : 1
Single-phase : 3
--------------------------- : 1
referred : 5
"single-phase : 1
functions: : 10
*PyModule_Create(PyModuleDef : 1
*def) : 9
*def* : 10
"PyModule_Create2()" : 2
*module_api_version* : 4
"PYTHON_API_VERSION" : 2
*PyModule_Create2(PyModuleDef : 1
*def : 3
module_api_version) : 2
assuming : 8
"RuntimeWarning" : 3
emitted : 3
instead; : 2
Before : 9
populated : 2
"PyModule_AddObjectRef()" : 4
Multi-phase : 2
alternate : 2
Extension : 8
behave : 13
modules: : 1
split : 2
*creation : 1
phase* : 2
*execution : 1
distinction : 1
"__new__()" : 1
"__init__()" : 6
singletons: : 1
*sys.modules* : 1
re-imported : 1
independent: : 1
others : 3
(using : 4
"PyType_FromSpec()") : 1
Making : 1
achieve : 4
(PyInit_modulename) : 1
"m_slots" : 1
*PyModuleDef_Init(PyModuleDef : 1
3.5.* : 2
Ensures : 1
reports : 1
cast : 10
"PyModuleDef_Slot" : 1
structures: : 1
ID : 5
explained : 5
id : 4
Py_mod_create : 1
Specifies : 2
signature: : 2
*create_module(PyObject : 1
*spec : 4
"ModuleSpec" : 1
451** : 1
trying : 7
again : 9
infinite : 2
"Py_mod_create" : 3
slots : 10
machinery : 3
"PyModule_New()" : 2
*spec* : 4
hierarchy : 1
symlinks : 1
while : 28
sharing : 4
getting : 5
import-related : 1
"m_traverse" : 1
"m_clear" : 1
"m_free"; : 1
"m_size"; : 1
Py_mod_exec : 1
*execute* : 1
module: : 2
constants : 5
signature : 50
exec_module(PyObject : 1
"Py_mod_exec" : 1
processed : 5
489** : 1
Low-level : 4
----------------------------------- : 1
hood : 1
multi- : 1
"PyModule_FromDefAndSpec" : 3
"PyModule_ExecDef" : 1
*PyModule_FromDefAndSpec(PyModuleDef : 1
*spec) : 2
ModuleSpec : 2
"PyModule_FromDefAndSpec2()" : 2
*PyModule_FromDefAndSpec2(PyModuleDef : 1
"PyModule_FromDefAndSpec()" : 2
PyModule_ExecDef(PyObject : 1
*module : 18
("Py_mod_exec") : 1
PyModule_SetDocString(PyObject : 1
*docstring) : 1
*docstring* : 1
"PyModule_Create" : 2
PyModule_AddFunctions(PyObject : 1
*functions) : 1
*functions* : 1
Refer : 3
entries : 1
(due : 3
lack : 2
shared : 17
namespace : 2
"functions" : 1
making : 4
classes) : 3
initialization) : 2
state: : 2
PyModule_AddObjectRef(PyObject : 1
*value) : 15
usage: : 2
add_spam(PyObject : 4
PyLong_FromLong(value); : 4
(obj : 2
-1; : 16
PyModule_AddObjectRef(module : 2
"spam" : 4
obj); : 2
Py_DECREF(obj); : 2
res; : 5
"NULL": : 2
Py_XDECREF(obj); : 2
PyModule_AddObject(PyObject : 1
steals : 5
"0") : 1
easy : 2
introduce : 1
misusing : 1
"PyModule_AddObject()" : 3
steal : 10
decrements : 2
**on : 1
success**.This : 1
manually : 2
(PyModule_AddObject(module : 2
obj) : 2
PyModule_AddObject() : 2
stole : 2
obj: : 2
Py_DECREF(obj) : 2
PyModule_AddIntConstant(PyObject : 1
PyModule_AddStringConstant(PyObject : 1
PyModule_AddIntMacro(PyObject : 1
macro) : 2
*macro* : 1
"PyModule_AddIntMacro(module : 1
AF_INET)" : 1
*AF_INET* : 2
PyModule_AddStringMacro(PyObject : 1
PyModule_AddType(PyObject : 1
finalized : 6
"PyType_Ready()" : 16
component : 2
"tp_name" : 4
============= : 4
creates : 6
singleton : 9
looked : 5
*PyState_FindModule(PyModuleDef : 1
attached : 2
"PyState_AddModule()" : 2
beforehand : 1
PyState_AddModule(PyObject : 1
3.3.* : 3
Attaches : 1
"PyState_FindModule()" : 2
"PyState_AddModule" : 1
unnecessary : 1
harmless) : 1
init : 3
"PyState_FindModule" : 1
mainly : 3
alternative : 5
mechanisms : 1
(either : 3
updates) : 1
PyState_RemoveModule(PyModuleDef : 1
Removes : 1
******************* : 1
3.0 : 2
"old : 1
protocol" : 1
ease : 2
porting : 1
2.x : 5
act : 2
give : 5
resources : 6
acquired : 7
exported : 4
functions) : 3
view : 3
PyObject_AsCharBuffer(PyObject : 1
*buffer_len) : 3
character-based : 1
single- : 2
segment : 2
*buffer_len* : 3
PyObject_AsReadBuffer(PyObject : 1
single-segment : 3
PyObject_CheckReadBuffer(PyObject : 1
tries : 5
suppressed : 7
PyObject_AsWriteBuffer(PyObject : 1
Introduction : 2
Programmer's : 1
Interface : 8
programmers : 5
variety : 2
equally : 2
brevity : 1
generally : 8
Python/C : 20
fundamentally : 1
reasons : 4
reason : 11
*extension : 1
modules* : 1
purposes; : 2
larger : 5
application; : 1
technique : 1
*embedding* : 1
Writing : 1
relatively : 1
well-understood : 1
"cookbook" : 1
approach : 2
tools : 3
automate : 1
extent : 1
people : 1
applications : 4
existence : 4
straightforward : 2
writing : 9
Many : 3
you're : 3
extending : 3
Python; : 2
moreover : 1
familiar : 1
Coding : 2
standards : 3
follow : 1
guidelines : 2
7** : 3
contributing : 1
Following : 1
conventions : 1
necessary : 16
expect : 1
contribute : 1
Include : 2
#define : 1
PY_SSIZE_T_CLEAN : 1
#include : 1
<Python.h> : 1
headers: : 1
"<stdio.h>" : 1
"<string.h>" : 1
"<errno.h>" : 1
"<limits.h>" : 1
"<assert.h>" : 1
"<stdlib.h>" : 1
available) : 1
pre-processor : 1
headers : 6
*must* : 4
included.It : 1
Python.h : 1
headers) : 1
prefixes : 2
"Py" : 2
"_Py" : 3
Names : 4
writers : 2
reserved : 1
User : 1
begin : 1
confuses : 1
reader : 1
jeopardizes : 1
portability : 1
future : 3
directories : 4
"*prefix*/include/pythonversion/" : 1
"*exec_prefix*/include/pythonversion/" : 1
**configure** : 3
"'%d.%d' : 1
sys.version_info[:2]" : 1
"*prefix*/include" : 1
installation : 3
installer : 1
different) : 2
compiler's : 1
"#include : 1
<pythonX.Y/Python.h>"; : 1
break : 9
multi-platform : 1
users : 2
although : 4
declare : 4
"extern : 1
"C"" : 1
closer : 1
"Py_RETURN_NONE") : 1
Others : 1
listing : 1
Py_ABS(x) : 1
"x" : 4
Py_ALWAYS_INLINE : 3
Ask : 1
inline : 11
decides : 1
performance : 6
critical : 1
inlining : 4
disabled : 12
MSC : 1
Marking : 1
blindly : 1
worse : 1
performances : 1
example) : 1
smarter : 1
developer : 2
cost/benefit : 1
"Py_DEBUG" : 4
"Py_ALWAYS_INLINE" : 1
Usage: : 2
random(void) : 2
4; : 2
Py_CHARMASK(c) : 1
[-128 : 1
127] : 1
[0 : 1
255] : 1
"unsigned : 2
char" : 1
Py_DEPRECATED(version) : 1
declarations : 2
placed : 3
Py_DEPRECATED(3.8) : 1
PyAPI_FUNC(int) : 1
Py_OldFunction(void); : 1
MSVC : 2
Py_GETENV(s) : 1
"getenv(s)" : 1
"Py_IgnoreEnvironmentFlag" : 1
Py_MAX(x : 1
y) : 2
Py_MEMBER_SIZE(type : 1
member) : 1
("type") : 1
"member" : 1
Py_MIN(x : 1
Py_NO_INLINE : 2
Disable : 3
reduces : 2
consumption: : 1
LTO+PGO : 1
heavily : 1
bpo-33720) : 1
Py_STRINGIFY(x) : 1
E.g : 1
"Py_STRINGIFY(123)" : 1
""123"" : 1
Py_UNREACHABLE() : 1
design : 1
"default:" : 1
clause : 1
"switch" : 1
covered : 2
"case" : 1
places : 3
tempted : 1
"assert(0)" : 1
helps : 1
optimize : 1
avoids : 5
unreachable : 2
"__builtin_unreachable()" : 1
GCC : 1
"Py_UNREACHABLE()" : 1
"_Py_NO_RETURN" : 1
unlikely : 2
exceptional : 1
better : 2
reported : 9
Py_UNUSED(arg) : 1
unused : 3
silence : 1
func(int : 1
Py_UNUSED(b)) : 1
a; : 1
}" : 2
PyDoc_STRVAR(name : 1
str) : 1
PyDoc_STRVAR(pop_doc : 1
"Remove : 1
rightmost : 1
element."); : 1
deque_methods[] : 1
{"pop" : 1
(PyCFunction)deque_pop : 1
METH_NOARGS : 3
pop_doc} : 1
PyDoc_STR(str) : 1
"PyDoc_STR" : 1
specifying : 7
pysqlite_row_methods[] : 1
{"keys" : 1
(PyCFunction)pysqlite_row_keys : 1
PyDoc_STR("Returns : 1
row.")} : 1
{NULL : 1
NULL} : 1
Counts : 3
=================================== : 2
opaque : 11
language : 3
(e.g. : 2
assignments : 1
rules : 10
passing) : 1
fitting : 1
Almost : 1
heap: : 1
automatic : 1
sole : 1
objects; : 3
(even : 4
integers) : 1
*reference : 1
count* : 1
kind : 7
user-defined : 3
function; : 2
hierarchy) : 1
well-known : 1
"PyList_Check(a)" : 1
if) : 1
today's : 1
computers : 1
finite : 3
often : 6
severely : 1
limited) : 1
static) : 1
Those : 5
(There's : 1
obvious : 2
solution : 1
"don't : 1
that.") : 1
manipulated : 2
considerably : 1
incref : 1
deallocator : 10
type- : 1
performing : 1
that's : 2
There's : 4
overflow; : 1
distinct : 11
(assuming : 2
"sizeof(Py_ssize_t) : 2
sizeof(void*)") : 1
every : 11
theory : 1
goes : 3
down : 1
cancel : 1
hasn't : 2
prevent : 5
we : 3
lives : 1
temporarily : 9
situation : 2
arises : 1
duration : 3
pitfall : 1
extract : 7
incrementing : 4
Some : 5
conceivably : 1
deallocating : 3
danger : 1
innocent-looking : 2
operations : 13
invoke : 4
this; : 1
flow : 1
almost : 4
(functions : 1
begins : 1
"PyObject_" : 1
"PyNumber_" : 1
"PySequence_" : 1
"PyMapping_") : 1
leaves : 3
responsibility : 7
soon : 1
nature : 2
Count : 1
~~~~~~~~~~~~~~~~~~~~~~~ : 1
terms : 1
*ownership : 1
Ownership : 2
pertains : 2
(objects : 2
owned: : 1
shared) : 1
"Owning : 1
reference" : 1
Py_DECREF : 1
transferred : 2
ownership : 6
decref'ing : 2
needed---or : 1
caller) : 1
said : 2
*new* : 1
*borrow* : 1
Nothing : 2
Conversely : 2
possibilities: : 1
*steals* : 1
*Stealing : 1
owns : 6
Few : 1
notable : 1
put!) : 1
idiom : 2
populating : 3
"(1 : 1
"three")" : 1
look : 8
(forgetting : 1
handling : 42
moment; : 1
shown : 5
below): : 1
*t; : 1
t : 1
PyTuple_New(3); : 1
PyTuple_SetItem(t : 3
PyLong_FromLong(1L)); : 1
PyLong_FromLong(2L)); : 1
PyUnicode_FromString("three")); : 1
"PyLong_FromLong()" : 2
keep : 2
grab : 1
reference-stealing : 1
Incidentally : 1
items; : 1
"PyObject_SetItem()" : 8
refuse : 2
practice : 1
rarely : 2
directed : 1
string* : 1
blocks : 6
checking): : 1
*tuple : 2
*list; : 1
Py_BuildValue("(iis)" : 1
"three"); : 2
Py_BuildValue("[iis]" : 1
friends : 2
borrowing : 1
regarding : 1
saner : 1
away : 4
("have : 1
stolen") : 1
sequence) : 1
item: : 1
set_all(PyObject : 1
*target : 1
n; : 6
PyObject_Length(target); : 1
(n : 3
*index : 1
PyLong_FromSsize_t(i); : 1
(!index) : 1
(PyObject_SetItem(target : 1
item) : 1
Py_DECREF(index); : 2
slightly : 2
responsibilities : 2
simple: : 1
fly : 1
"PyObject_GetItem()" : 9
"PySequence_GetItem()" : 6
owner : 1
reference) : 3
realize : 1
*the : 1
plumage* : 1
*doesn't : 1
it!* : 1
happens : 7
arguments) : 2
computes : 1
sum : 2
integers; : 1
sum_list(PyObject : 1
value; : 7
*item; : 3
PyList_Size(list); : 1
Not : 3
PyList_GetItem(list : 1
i); : 2
Can't : 1
(!PyLong_Check(item)) : 1
continue; : 1
Skip : 1
non-integers : 1
PyLong_AsLong(item); : 2
(value : 2
&& : 3
PyErr_Occurred()) : 3
Integer : 5
big : 6
fit : 2
bail : 2
total; : 2
sum_sequence(PyObject : 1
*sequence) : 1
PySequence_Length(sequence); : 1
Has : 1
PySequence_GetItem(sequence : 1
(item : 3
(PyLong_Check(item)) : 1
Py_DECREF(item); : 3
Discard : 1
----- : 1
role : 1
discussed : 2
together : 15
signed : 2
integral : 2
sizeof(size_t)" : 1
C99 : 4
thing : 3
(size_t : 1
353** : 1
"PY_SSIZE_T_MAX" : 4
largest : 1
Exceptions : 4
========== : 2
deal : 3
required; : 1
caller's : 1
reach : 1
accompanied : 1
claim : 1
encounters : 2
Boolean : 3
ambiguous : 1
require : 5
testing : 4
"PyErr_Occurred()" : 23
Exception : 11
maintained : 2
per-thread : 3
(this : 5
unthreaded : 1
application) : 1
states: : 1
this: : 3
"PyErr_SetString()" : 3
(though : 3
general) : 1
"PyErr_Clear()" : 3
clears : 1
"NULL"): : 1
meanings : 2
"sys.exc_info()"; : 1
same: : 1
"try" : 1
"except" : 1
transferring : 1
"sys.exc_info()" : 6
starting : 7
1.5 : 1
thread-safe : 4
catches : 1
save : 9
restore : 11
preserve : 2
prevents : 1
bugs : 1
overwriting : 1
unwanted : 6
frames : 1
principle : 1
perform : 6
task : 2
overwrite : 1
lose : 1
detecting : 2
"sum_sequence()" : 1
clean : 1
shows : 1
remind : 1
why : 1
show : 1
code: : 2
incr_item(dict : 1
key): : 1
try: : 1
dict[key] : 2
KeyError: : 1
glory: : 1
incr_item(PyObject : 1
*dict : 1
Py_XDECREF : 1
*item : 1
*const_one : 1
*incremented_item : 1
rv : 3
(failure) : 2
PyObject_GetItem(dict : 1
key); : 1
KeyError : 1
(!PyErr_ExceptionMatches(PyExc_KeyError)) : 1
Clear : 3
PyErr_Clear(); : 1
PyLong_FromLong(0L); : 1
const_one : 1
PyLong_FromLong(1L); : 1
(const_one : 1
incremented_item : 1
PyNumber_Add(item : 1
const_one); : 1
(incremented_item : 1
(PyObject_SetItem(dict : 1
incremented_item) : 1
Continue : 1
error: : 1
Cleanup : 1
Py_XDECREF() : 1
Py_XDECREF(item); : 1
Py_XDECREF(const_one); : 1
Py_XDECREF(incremented_item); : 1
rv; : 1
endorsed : 1
"goto" : 1
illustrates : 1
"PyErr_ExceptionMatches()" : 3
dispose : 1
(note : 2
"'X'" : 1
name; : 2
crash : 2
confronted : 1
work; : 1
likewise : 1
proposed : 1
embedders : 1
opposed : 1
writers) : 1
worry : 2
basic : 8
fundamental : 4
"builtins" : 3
"script : 1
list" : 1
("sys.argv") : 1
set: : 4
guess : 1
relative : 4
looks : 4
"lib/python*X.Y*" : 1
"python" : 2
shell : 1
"PATH") : 1
"/usr/local/bin/python" : 1
"/usr/local/lib/python*X.Y*" : 1
(In : 2
"fallback" : 1
"PATH".) : 1
steer : 1
"Py_SetProgramName(file)" : 1
*before* : 1
overrides : 2
inserted : 2
"Py_GetPath()" : 6
"Py_GetPrefix()" : 3
"Py_GetExecPrefix()" : 3
"Py_GetProgramFullPath()" : 3
"Modules/getpath.c") : 1
Sometimes : 1
"uninitialize" : 1
(make : 1
"Py_Initialize()") : 2
accomplished : 1
"Py_IsInitialized()" : 3
Notice : 1
Debugging : 2
Builds : 3
checks : 20
tend : 1
overhead : 2
enabled : 7
"Misc/SpecialBuilds.txt" : 2
distribution : 3
tracing : 9
profiling : 8
remainder : 3
Compiling : 2
produces : 1
adding : 8
"--with-pydebug" : 1
"./configure" : 1
presence : 6
not- : 1
Python-specific : 1
"_DEBUG" : 1
Debug : 5
Build : 1
Defining : 4
option") : 2
circular : 3
doubly : 2
Total : 1
tracked : 10
Upon : 2
printed : 5
interpreter.) : 1
expecting : 1
non-bytes : 1
PyBytesObject : 1
PyBytes_Type : 1
PyBytes_Check(PyObject : 1
PyBytes_CheckExact(PyObject : 1
*PyBytes_FromString(const : 1
*PyBytes_FromStringAndSize(const : 1
*v : 1
uninitialized : 4
*PyBytes_FromFormat(const : 1
"printf()"-style : 2
calculate : 2
allowed: : 2
+---------------------+-----------------+----------------------------------+ : 13
Characters : 2
Comment : 2
|=====================|=================|==================================| : 1
"%%" : 2
*n/a* : 2
literal : 4
"%c" : 2
"%d" : 2
"printf("%d")" : 2
[1] : 31
"%u" : 2
"printf("%u")" : 2
"%ld" : 2
"printf("%ld")" : 2
"%lu" : 2
"printf("%lu")" : 2
"%zd" : 2
"printf("%zd")" : 2
"%zu" : 2
"printf("%zu")" : 2
"%i" : 2
"printf("%i")" : 2
"%x" : 2
"printf("%x")" : 2
"%p" : 3
hex : 2
Mostly : 2
"printf("%p")" : 2
"0x" : 2
"printf" : 2
yields : 4
unrecognized : 2
rest : 3
as-is : 5
specifiers : 2
(d : 2
u : 2
ld : 2
lu : 2
zd : 2
zu : 2
x): : 2
0-conversion : 2
precision : 14
*PyBytes_FromFormatV(const : 1
"PyBytes_FromFormat()" : 2
*PyBytes_FromObject(PyObject : 1
PyBytes_Size(PyObject : 1
PyBytes_GET_SIZE(PyObject : 1
"PyBytes_Size()" : 2
*PyBytes_AsString(PyObject : 1
"len(o) : 1
"PyBytes_FromStringAndSize(NULL : 2
size)" : 8
"PyBytes_AsString()" : 3
*PyBytes_AS_STRING(PyObject : 1
*string) : 2
PyBytes_AsStringAndSize(PyObject : 1
*length) : 1
(not : 14
counted : 1
*length*) : 1
"PyBytes_AsStringAndSize()" : 2
PyBytes_Concat(PyObject : 1
**bytes : 3
*newpart) : 2
**bytes* : 7
*newpart* : 3
*bytes*; : 1
*bytes* : 3
PyBytes_ConcatAndDel(PyObject : 1
_PyBytes_Resize(PyObject : 1
"immutable" : 1
parts : 2
refcount : 4
lvalue : 1
into) : 1
desired : 5
returned; : 2
differ : 2
reallocation : 2
PyNumber_Check(PyObject : 1
protocols : 3
*PyNumber_Add(PyObject : 1
*o1 : 31
*o2) : 27
*o1* : 43
*o2* : 29
"o1 : 29
o2" : 29
*PyNumber_Subtract(PyObject : 1
subtracting : 2
*PyNumber_Multiply(PyObject : 1
multiplying : 2
*PyNumber_MatrixMultiply(PyObject : 1
matrix : 2
multiplication : 4
@ : 1
*PyNumber_FloorDivide(PyObject : 1
floor : 2
divided : 3
*PyNumber_TrueDivide(PyObject : 1
reasonable : 2
approximation : 4
mathematical : 3
"approximate" : 2
approximate; : 2
/ : 1
*PyNumber_Remainder(PyObject : 1
dividing : 3
*PyNumber_Divmod(PyObject : 1
"divmod()" : 1
"divmod(o1 : 1
o2)" : 1
*PyNumber_Power(PyObject : 1
*o2 : 4
*o3) : 2
"pow()" : 2
"pow(o1 : 2
o2 : 2
o3)" : 2
*o3* : 5
(passing : 2
illegal : 4
access) : 2
*PyNumber_Negative(PyObject : 1
negation : 3
"-o" : 1
*PyNumber_Positive(PyObject : 1
"+o" : 1
*PyNumber_Absolute(PyObject : 1
"abs(o)" : 1
*PyNumber_Invert(PyObject : 1
bitwise : 1
"~o" : 1
*PyNumber_Lshift(PyObject : 1
shifting : 4
<< : 1
*PyNumber_Rshift(PyObject : 1
>> : 1
*PyNumber_And(PyObject : 1
"bitwise : 6
and" : 2
& : 5
*PyNumber_Xor(PyObject : 1
exclusive : 2
or" : 4
^ : 1
*PyNumber_Or(PyObject : 1
*PyNumber_InPlaceAdd(PyObject : 1
*in-place* : 15
*PyNumber_InPlaceSubtract(PyObject : 1
-= : 1
*PyNumber_InPlaceMultiply(PyObject : 1
*= : 2
*PyNumber_InPlaceMatrixMultiply(PyObject : 1
@= : 1
*PyNumber_InPlaceFloorDivide(PyObject : 1
//= : 1
*PyNumber_InPlaceTrueDivide(PyObject : 1
/= : 1
*PyNumber_InPlaceRemainder(PyObject : 1
%= : 1
*PyNumber_InPlacePower(PyObject : 1
**= : 1
o3 : 1
*PyNumber_InPlaceLshift(PyObject : 1
<<= : 1
*PyNumber_InPlaceRshift(PyObject : 1
>>= : 1
*PyNumber_InPlaceAnd(PyObject : 1
&= : 1
*PyNumber_InPlaceXor(PyObject : 1
^= : 1
*PyNumber_InPlaceOr(PyObject : 1
|= : 1
*PyNumber_Long(PyObject : 1
"int(o)" : 1
*PyNumber_Float(PyObject : 1
"float(o)" : 1
*PyNumber_Index(PyObject : 1
subclass : 16
*PyNumber_ToBase(PyObject : 1
*n : 1
base) : 4
*base* : 7
8 : 5
10 : 1
prefixed : 2
marker : 1
"'0b'" : 1
"'0o'" : 1
"'0x'" : 1
"PyNumber_Index()" : 2
PyNumber_AsSsize_t(PyObject : 1
*o : 46
*exc) : 19
"OverflowError" : 11
*exc* : 9
"OverflowError") : 3
clipped : 3
"PY_SSIZE_T_MIN" : 3
PyIndex_Check(PyObject : 1
(has : 5
"nb_index" : 2
"tp_as_number" : 4
in) : 1
Backwards : 1
Compatibility : 1
Policy : 1
387** : 1
3.10) : 2
source-compatible : 1
Changing : 1
removing : 1
period : 2
fix : 1
serious : 1
CPython's : 3
Binary : 4
(ABI) : 1
forward- : 1
backwards-compatible : 2
way; : 1
Considerations : 3
So : 2
3.10.0 : 1
3.10.8 : 1
vice : 1
versa : 1
separately : 2
3.9.x : 1
3.10.x : 1
underscore : 1
"_Py_InternalState" : 1
notice : 1
patch : 1
introduced : 6
*Limited : 1
API* : 1
subset : 1
Limited : 30
Contents : 3
*Stable : 1
ABI*: : 1
3.x : 2
ones : 7
– : 4
(For : 1
simplicity : 2
document : 3
talks : 1
*extensions* : 1
Python.) : 1
Py_LIMITED_API : 4
Define : 2
opt : 1
select : 2
recompilation : 1
onward : 2
Rather : 5
hardcode : 1
"0x030A0000" : 1
"0x03020000" : 1
(Python : 3
API) : 4
against : 4
"python3.dll" : 1
version-specific : 4
"python39.dll" : 1
"abi3" : 1
"mymodule.abi3.so") : 1
conform : 4
packaging : 1
tools) : 1
3.10+ : 1
lower : 4
solely : 1
languages : 1
preprocessor : 3
Scope : 1
Performance : 1
--------------------------------- : 2
goal : 2
penalty : 1
“unsafe” : 1
"PyList_GET_ITEM()" : 1
faster : 5
improved : 1
reducing : 1
improve : 2
yield : 1
prereleases : 1
upcoming : 1
Caveats : 1
conforms : 1
covers : 1
guard : 1
consider : 1
starts : 7
accepting : 1
causing : 2
dereference : 1
structs : 2
Another : 3
hidden : 2
they're : 1
recommend : 2
*all* : 2
preferably : 1
*lowest* : 1
We : 1
reviewing : 1
Even : 4
technical : 1
unintentionally : 1
bugs) : 1
stable: : 1
3.12 : 5
*compile* : 1
stays : 1
stable : 5
======================= : 6
lower-level : 1
“platform” : 1
depend : 3
OS : 3
processor : 5
architecture : 1
distributor : 1
"python.org" : 1
distributors : 1
items: : 1
"PyAIter_Check()" : 1
"PyArg_VaParse()" : 1
"PyArg_VaParseTupleAndKeywords()" : 1
"PyArg_ValidateKeywordArguments()" : 1
"PyBaseObject_Type" : 9
"PyBool_FromLong()" : 1
"PyBool_Type" : 2
"PyBuffer_FillContiguousStrides()" : 1
"PyBuffer_FromContiguous()" : 1
"PyBuffer_GetPointer()" : 1
"PyBuffer_SizeFromFormat()" : 1
"PyBuffer_ToContiguous()" : 1
"PyByteArrayIter_Type" : 1
"PyByteArray_Concat()" : 1
"PyByteArray_FromObject()" : 1
"PyByteArray_FromStringAndSize()" : 1
"PyByteArray_Resize()" : 1
"PyByteArray_Type" : 1
"PyBytesIter_Type" : 1
"PyBytes_Concat()" : 1
"PyBytes_ConcatAndDel()" : 1
"PyBytes_DecodeEscape()" : 1
"PyBytes_FromFormatV()" : 1
"PyBytes_FromObject()" : 1
"PyBytes_FromString()" : 1
"PyBytes_FromStringAndSize()" : 1
"PyBytes_Repr()" : 1
"PyBytes_Type" : 1
"PyCFunction" : 8
"PyCFunctionWithKeywords" : 2
"PyCFunction_Call()" : 1
"PyCFunction_GetFlags()" : 1
"PyCFunction_GetFunction()" : 1
"PyCFunction_GetSelf()" : 1
"PyCFunction_New()" : 1
"PyCFunction_NewEx()" : 1
"PyCFunction_Type" : 1
"PyCMethod_New()" : 1
"PyCallable_Check()" : 1
"PyCapsule_Destructor" : 1
"PyCapsule_GetContext()" : 1
"PyCapsule_GetDestructor()" : 1
"PyCapsule_GetName()" : 1
"PyCapsule_GetPointer()" : 2
"PyCapsule_Import()" : 2
"PyCapsule_IsValid()" : 5
"PyCapsule_New()" : 2
"PyCapsule_SetContext()" : 1
"PyCapsule_SetDestructor()" : 1
"PyCapsule_SetName()" : 1
"PyCapsule_SetPointer()" : 1
"PyCapsule_Type" : 1
"PyClassMethodDescr_Type" : 1
"PyCodec_BackslashReplaceErrors()" : 1
"PyCodec_Decode()" : 1
"PyCodec_Decoder()" : 1
"PyCodec_Encode()" : 1
"PyCodec_Encoder()" : 1
"PyCodec_IgnoreErrors()" : 1
"PyCodec_IncrementalDecoder()" : 1
"PyCodec_IncrementalEncoder()" : 1
"PyCodec_KnownEncoding()" : 1
"PyCodec_LookupError()" : 1
"PyCodec_NameReplaceErrors()" : 1
"PyCodec_Register()" : 1
"PyCodec_RegisterError()" : 1
"PyCodec_ReplaceErrors()" : 1
"PyCodec_StreamReader()" : 1
"PyCodec_StreamWriter()" : 1
"PyCodec_StrictErrors()" : 1
"PyCodec_Unregister()" : 1
"PyCodec_XMLCharRefReplaceErrors()" : 1
"PyComplex_FromDoubles()" : 1
"PyComplex_ImagAsDouble()" : 1
"PyComplex_RealAsDouble()" : 1
"PyComplex_Type" : 1
"PyDescr_NewClassMethod()" : 1
"PyDescr_NewGetSet()" : 1
"PyDescr_NewMember()" : 1
"PyDescr_NewMethod()" : 1
"PyDictItems_Type" : 1
"PyDictIterItem_Type" : 1
"PyDictIterKey_Type" : 1
"PyDictIterValue_Type" : 1
"PyDictKeys_Type" : 1
"PyDictProxy_New()" : 1
"PyDictProxy_Type" : 1
"PyDictRevIterItem_Type" : 1
"PyDictRevIterKey_Type" : 1
"PyDictRevIterValue_Type" : 1
"PyDictValues_Type" : 1
"PyDict_Clear()" : 1
"PyDict_Contains()" : 1
"PyDict_Copy()" : 1
"PyDict_DelItem()" : 1
"PyDict_DelItemString()" : 1
"PyDict_GetItem()" : 3
"PyDict_GetItemString()" : 1
"PyDict_GetItemWithError()" : 3
"PyDict_Items()" : 1
"PyDict_Keys()" : 1
"PyDict_Merge()" : 1
"PyDict_MergeFromSeq2()" : 1
"PyDict_New()" : 1
"PyDict_Next()" : 1
"PyDict_SetItem()" : 2
"PyDict_SetItemString()" : 1
"PyDict_Size()" : 1
"PyDict_Type" : 1
"PyDict_Update()" : 2
"PyDict_Values()" : 1
"PyEllipsis_Type" : 1
"PyEnum_Type" : 1
"PyErr_BadArgument()" : 1
"PyErr_BadInternalCall()" : 1
"PyErr_CheckSignals()" : 4
"PyErr_Display()" : 1
"PyErr_Fetch()" : 3
"PyErr_Format()" : 2
"PyErr_FormatV()" : 1
"PyErr_GetExcInfo()" : 2
"PyErr_GetHandledException()" : 3
"PyErr_GivenExceptionMatches()" : 1
"PyErr_NewException()" : 2
"PyErr_NewExceptionWithDoc()" : 1
"PyErr_NoMemory()" : 1
"PyErr_NormalizeException()" : 1
"PyErr_Print()" : 1
"PyErr_PrintEx()" : 1
"PyErr_ProgramText()" : 1
"PyErr_ResourceWarning()" : 1
"PyErr_Restore()" : 1
"PyErr_SetExcFromWindowsErr()" : 1
"PyErr_SetExcFromWindowsErrWithFilename()" : 1
"PyErr_SetExcFromWindowsErrWithFilenameObject()" : 2
"PyErr_SetExcFromWindowsErrWithFilenameObjects()" : 1
"PyErr_SetExcInfo()" : 2
"PyErr_SetFromErrno()" : 2
"PyErr_SetFromErrnoWithFilename()" : 1
"PyErr_SetFromErrnoWithFilenameObject()" : 3
"PyErr_SetFromErrnoWithFilenameObjects()" : 1
"PyErr_SetFromWindowsErr()" : 2
"PyErr_SetFromWindowsErrWithFilename()" : 2
"PyErr_SetHandledException()" : 3
"PyErr_SetImportError()" : 2
"PyErr_SetImportErrorSubclass()" : 1
"PyErr_SetInterrupt()" : 1
"PyErr_SetInterruptEx()" : 1
"PyErr_SetNone()" : 1
"PyErr_SetObject()" : 1
"PyErr_SyntaxLocation()" : 1
"PyErr_SyntaxLocationEx()" : 2
"PyErr_WarnEx()" : 3
"PyErr_WarnExplicit()" : 1
"PyErr_WarnFormat()" : 2
"PyErr_WriteUnraisable()" : 1
"PyEval_AcquireLock()" : 1
"PyEval_AcquireThread()" : 2
"PyEval_CallFunction()" : 1
"PyEval_CallMethod()" : 1
"PyEval_CallObjectWithKeywords()" : 1
"PyEval_EvalCode()" : 1
"PyEval_EvalFrame()" : 1
"PyEval_GetBuiltins()" : 1
"PyEval_GetFrame()" : 3
"PyEval_GetFuncDesc()" : 1
"PyEval_GetFuncName()" : 2
"PyEval_GetGlobals()" : 1
"PyEval_GetLocals()" : 1
"PyEval_InitThreads()" : 3
"PyEval_ReleaseLock()" : 1
"PyEval_ReleaseThread()" : 2
"PyEval_RestoreThread()" : 5
"PyEval_SaveThread()" : 3
"PyEval_ThreadsInitialized()" : 1
"PyExc_ArithmeticError" : 2
"PyExc_AssertionError" : 2
"PyExc_AttributeError" : 2
"PyExc_BaseException" : 2
"PyExc_BaseExceptionGroup" : 1
"PyExc_BlockingIOError" : 3
"PyExc_BrokenPipeError" : 3
"PyExc_BytesWarning" : 2
"PyExc_ChildProcessError" : 3
"PyExc_ConnectionAbortedError" : 3
"PyExc_ConnectionError" : 3
"PyExc_ConnectionRefusedError" : 3
"PyExc_ConnectionResetError" : 3
"PyExc_DeprecationWarning" : 2
"PyExc_EOFError" : 2
"PyExc_EncodingWarning" : 1
"PyExc_EnvironmentError" : 2
"PyExc_Exception" : 2
"PyExc_FileExistsError" : 3
"PyExc_FileNotFoundError" : 3
"PyExc_FloatingPointError" : 2
"PyExc_FutureWarning" : 2
"PyExc_GeneratorExit" : 2
"PyExc_IOError" : 2
"PyExc_ImportError" : 2
"PyExc_ImportWarning" : 2
"PyExc_IndentationError" : 2
"PyExc_IndexError" : 2
"PyExc_InterruptedError" : 3
"PyExc_IsADirectoryError" : 3
"PyExc_KeyError" : 2
"PyExc_KeyboardInterrupt" : 2
"PyExc_LookupError" : 2
"PyExc_MemoryError" : 2
"PyExc_ModuleNotFoundError" : 3
"PyExc_NameError" : 2
"PyExc_NotADirectoryError" : 3
"PyExc_NotImplementedError" : 2
"PyExc_OSError" : 2
"PyExc_OverflowError" : 2
"PyExc_PendingDeprecationWarning" : 2
"PyExc_PermissionError" : 3
"PyExc_ProcessLookupError" : 3
"PyExc_RecursionError" : 3
"PyExc_ReferenceError" : 2
"PyExc_ResourceWarning" : 3
"PyExc_RuntimeError" : 3
"PyExc_RuntimeWarning" : 3
"PyExc_StopAsyncIteration" : 3
"PyExc_StopIteration" : 2
"PyExc_SyntaxError" : 2
"PyExc_SyntaxWarning" : 2
"PyExc_SystemExit" : 2
"PyExc_TabError" : 2
"PyExc_TimeoutError" : 3
"PyExc_TypeError" : 2
"PyExc_UnboundLocalError" : 2
"PyExc_UnicodeDecodeError" : 2
"PyExc_UnicodeEncodeError" : 2
"PyExc_UnicodeError" : 2
"PyExc_UnicodeTranslateError" : 2
"PyExc_UnicodeWarning" : 2
"PyExc_UserWarning" : 2
"PyExc_ValueError" : 2
"PyExc_Warning" : 3
"PyExc_WindowsError" : 2
"PyExc_ZeroDivisionError" : 2
"PyExceptionClass_Name()" : 1
"PyException_GetCause()" : 1
"PyException_GetContext()" : 1
"PyException_GetTraceback()" : 1
"PyException_SetCause()" : 1
"PyException_SetContext()" : 1
"PyException_SetTraceback()" : 1
"PyFile_FromFd()" : 1
"PyFile_GetLine()" : 1
"PyFile_WriteObject()" : 1
"PyFile_WriteString()" : 1
"PyFilter_Type" : 1
"PyFloat_AsDouble()" : 1
"PyFloat_FromDouble()" : 1
"PyFloat_FromString()" : 1
"PyFloat_GetInfo()" : 1
"PyFloat_GetMax()" : 1
"PyFloat_GetMin()" : 1
"PyFloat_Type" : 1
"PyFrameObject" : 1
"PyFrame_GetCode()" : 1
"PyFrame_GetLineNumber()" : 2
"PyFrozenSet_New()" : 1
"PyFrozenSet_Type" : 1
"PyGC_Collect()" : 1
"PyGC_Disable()" : 1
"PyGC_Enable()" : 1
"PyGC_IsEnabled()" : 1
"PyGILState_Ensure()" : 10
"PyGILState_GetThisThreadState()" : 1
"PyGILState_Release()" : 8
"PyGILState_STATE" : 1
"PyGetSetDef" : 3
"PyGetSetDescr_Type" : 1
"PyImport_AddModule()" : 1
"PyImport_GetImporter()" : 1
"PyImport_GetMagicNumber()" : 1
"PyImport_GetMagicTag()" : 1
"PyImport_GetModule()" : 1
"PyImport_GetModuleDict()" : 1
"PyImport_Import()" : 1
"PyImport_ImportFrozenModule()" : 1
"PyImport_ImportModuleLevel()" : 1
"PyImport_ImportModuleNoBlock()" : 1
"PyIndex_Check()" : 1
"PyInterpreterState" : 3
"PyInterpreterState_Clear()" : 2
"PyInterpreterState_Delete()" : 1
"PyInterpreterState_Get()" : 1
"PyInterpreterState_GetDict()" : 1
"PyInterpreterState_GetID()" : 1
"PyInterpreterState_New()" : 1
"PyIter_Check()" : 3
"PyIter_Next()" : 3
"PyIter_Send()" : 3
"PyListIter_Type" : 1
"PyListRevIter_Type" : 1
"PyList_Append()" : 1
"PyList_AsTuple()" : 1
"PyList_GetSlice()" : 1
"PyList_Insert()" : 1
"PyList_Reverse()" : 1
"PyList_SetSlice()" : 1
"PyList_Sort()" : 1
"PyList_Type" : 1
"PyLongObject" : 31
"PyLongRangeIter_Type" : 1
"PyLong_AsDouble()" : 1
"PyLong_AsLong()" : 1
"PyLong_AsLongAndOverflow()" : 1
"PyLong_AsLongLong()" : 1
"PyLong_AsLongLongAndOverflow()" : 1
"PyLong_AsSize_t()" : 1
"PyLong_AsSsize_t()" : 1
"PyLong_AsUnsignedLong()" : 1
"PyLong_AsUnsignedLongLong()" : 1
"PyLong_AsUnsignedLongLongMask()" : 1
"PyLong_AsUnsignedLongMask()" : 1
"PyLong_AsVoidPtr()" : 2
"PyLong_FromDouble()" : 1
"PyLong_FromLongLong()" : 1
"PyLong_FromSize_t()" : 1
"PyLong_FromSsize_t()" : 1
"PyLong_FromString()" : 1
"PyLong_FromUnsignedLong()" : 1
"PyLong_FromUnsignedLongLong()" : 1
"PyLong_FromVoidPtr()" : 2
"PyLong_GetInfo()" : 1
"PyLong_Type" : 1
"PyMap_Type" : 1
"PyMapping_Check()" : 2
"PyMapping_GetItemString()" : 2
"PyMapping_HasKey()" : 1
"PyMapping_HasKeyString()" : 1
"PyMapping_Items()" : 1
"PyMapping_Keys()" : 2
"PyMapping_Length()" : 1
"PyMapping_SetItemString()" : 1
"PyMapping_Size()" : 2
"PyMapping_Values()" : 1
"PyMem_Calloc()" : 4
"PyMemberDef" : 6
"PyMemberDescr_Type" : 1
"PyMemoryView_FromObject()" : 1
"PyMemoryView_GetContiguous()" : 1
"PyMemoryView_Type" : 1
"PyMethodDescr_Type" : 1
"PyModuleDef_Base" : 1
"PyModuleDef_Init()" : 1
"PyModuleDef_Type" : 1
"PyModule_AddFunctions()" : 1
"PyModule_AddIntConstant()" : 1
"PyModule_AddStringConstant()" : 1
"PyModule_AddType()" : 1
"PyModule_ExecDef()" : 1
"PyModule_GetDef()" : 1
"PyModule_GetDict()" : 1
"PyModule_GetName()" : 1
"PyModule_SetDocString()" : 1
"PyNumber_Absolute()" : 1
"PyNumber_Add()" : 1
"PyNumber_AsSsize_t()" : 1
"PyNumber_Check()" : 1
"PyNumber_Divmod()" : 1
"PyNumber_Float()" : 1
"PyNumber_FloorDivide()" : 1
"PyNumber_InPlaceAdd()" : 1
"PyNumber_InPlaceFloorDivide()" : 1
"PyNumber_InPlaceLshift()" : 1
"PyNumber_InPlaceMatrixMultiply()" : 1
"PyNumber_InPlaceMultiply()" : 1
"PyNumber_InPlacePower()" : 1
"PyNumber_InPlaceRemainder()" : 1
"PyNumber_InPlaceRshift()" : 1
"PyNumber_InPlaceTrueDivide()" : 1
"PyNumber_InPlaceXor()" : 1
"PyNumber_Invert()" : 1
"PyNumber_Long()" : 1
"PyNumber_Lshift()" : 1
"PyNumber_MatrixMultiply()" : 1
"PyNumber_Multiply()" : 1
"PyNumber_Negative()" : 1
"PyNumber_Positive()" : 1
"PyNumber_Power()" : 1
"PyNumber_Remainder()" : 1
"PyNumber_Rshift()" : 1
"PyNumber_ToBase()" : 1
"PyNumber_TrueDivide()" : 1
"PyOS_AfterFork()" : 1
"PyOS_CheckStack()" : 2
"PyOS_FSPath()" : 1
"PyOS_InputHook" : 1
"PyOS_InterruptOccurred()" : 1
"PyOS_double_to_string()" : 1
"PyOS_getsig()" : 1
"PyOS_mystricmp()" : 1
"PyOS_mystrnicmp()" : 1
"PyOS_setsig()" : 1
"PyOS_snprintf()" : 3
"PyOS_string_to_double()" : 1
"PyOS_strtol()" : 1
"PyOS_strtoul()" : 1
"PyOS_vsnprintf()" : 2
"PyObject.ob_refcnt" : 1
"PyObject.ob_type" : 1
"PyObject_ASCII()" : 1
"PyObject_AsCharBuffer()" : 1
"PyObject_AsFileDescriptor()" : 1
"PyObject_AsReadBuffer()" : 1
"PyObject_AsWriteBuffer()" : 1
"PyObject_Bytes()" : 1
"PyObject_Call()" : 3
"PyObject_CallFunction()" : 2
"PyObject_CallFunctionObjArgs()" : 3
"PyObject_CallMethodObjArgs()" : 3
"PyObject_CallNoArgs()" : 2
"PyObject_CallObject()" : 2
"PyObject_Calloc()" : 4
"PyObject_CheckBuffer()" : 1
"PyObject_CheckReadBuffer()" : 1
"PyObject_ClearWeakRefs()" : 2
"PyObject_CopyData()" : 1
"PyObject_DelItem()" : 5
"PyObject_DelItemString()" : 1
"PyObject_Dir()" : 1
"PyObject_Format()" : 1
"PyObject_Free()" : 4
"PyObject_GC_Del()" : 4
"PyObject_GC_IsFinalized()" : 1
"PyObject_GC_IsTracked()" : 1
"PyObject_GC_Track()" : 3
"PyObject_GC_UnTrack()" : 3
"PyObject_GenericGetAttr()" : 4
"PyObject_GenericGetDict()" : 3
"PyObject_GenericSetAttr()" : 3
"PyObject_GenericSetDict()" : 1
"PyObject_GetAIter()" : 1
"PyObject_GetAttr()" : 5
"PyObject_GetAttrString()" : 2
"PyObject_GetIter()" : 1
"PyObject_HasAttr()" : 1
"PyObject_HasAttrString()" : 1
"PyObject_HashNotImplemented()" : 4
"PyObject_InitVar()" : 1
"PyObject_IsInstance()" : 2
"PyObject_IsSubclass()" : 2
"PyObject_Length()" : 1
"PyObject_Malloc()" : 5
"PyObject_Not()" : 1
"PyObject_Realloc()" : 5
"PyObject_RichCompare()" : 2
"PyObject_SelfIter()" : 1
"PyObject_SetAttr()" : 1
"PyObject_SetAttrString()" : 1
"PyObject_Size()" : 3
"PyObject_Str()" : 4
"PyObject_Type()" : 1
"PyProperty_Type" : 1
"PyRangeIter_Type" : 1
"PyRange_Type" : 1
"PyReversed_Type" : 1
"PySequence_Check()" : 3
"PySequence_Concat()" : 3
"PySequence_Contains()" : 3
"PySequence_Count()" : 1
"PySequence_DelItem()" : 2
"PySequence_DelSlice()" : 1
"PySequence_Fast()" : 4
"PySequence_GetSlice()" : 2
"PySequence_In()" : 1
"PySequence_InPlaceConcat()" : 3
"PySequence_InPlaceRepeat()" : 3
"PySequence_Index()" : 1
"PySequence_Length()" : 1
"PySequence_List()" : 1
"PySequence_Repeat()" : 3
"PySequence_SetSlice()" : 1
"PySequence_Size()" : 3
"PySequence_Tuple()" : 1
"PySetIter_Type" : 1
"PySet_Add()" : 1
"PySet_Clear()" : 1
"PySet_Contains()" : 1
"PySet_Discard()" : 1
"PySet_New()" : 1
"PySet_Pop()" : 1
"PySet_Type" : 1
"PySlice_AdjustIndices()" : 3
"PySlice_GetIndices()" : 2
"PySlice_GetIndicesEx()" : 3
"PySlice_New()" : 1
"PySlice_Type" : 1
"PySlice_Unpack()" : 3
"PyState_RemoveModule()" : 1
"PyStructSequence_Field" : 1
"PySuper_Type" : 1
"PySys_AddWarnOption()" : 2
"PySys_AddWarnOptionUnicode()" : 1
"PySys_AddXOption()" : 2
"PySys_FormatStderr()" : 1
"PySys_GetObject()" : 1
"PySys_HasWarnOptions()" : 1
"PySys_ResetWarnOptions()" : 2
"PySys_SetArgv()" : 2
"PySys_SetArgvEx()" : 3
"PySys_SetObject()" : 1
"PySys_SetPath()" : 1
"PySys_WriteStderr()" : 1
"PyThreadState" : 4
"PyThreadState_Clear()" : 3
"PyThreadState_Delete()" : 3
"PyThreadState_Get()" : 2
"PyThreadState_GetDict()" : 1
"PyThreadState_GetFrame()" : 3
"PyThreadState_GetID()" : 1
"PyThreadState_GetInterpreter()" : 1
"PyThreadState_New()" : 1
"PyThreadState_SetAsyncExc()" : 1
"PyThreadState_Swap()" : 2
"PyThread_GetInfo()" : 1
"PyThread_ReInitTLS()" : 1
"PyThread_acquire_lock()" : 1
"PyThread_acquire_lock_timed()" : 1
"PyThread_allocate_lock()" : 1
"PyThread_create_key()" : 2
"PyThread_delete_key()" : 1
"PyThread_delete_key_value()" : 1
"PyThread_exit_thread()" : 1
"PyThread_free_lock()" : 1
"PyThread_get_key_value()" : 1
"PyThread_get_stacksize()" : 1
"PyThread_get_thread_ident()" : 1
"PyThread_get_thread_native_id()" : 1
"PyThread_init_thread()" : 1
"PyThread_release_lock()" : 1
"PyThread_set_key_value()" : 1
"PyThread_set_stacksize()" : 1
"PyThread_start_new_thread()" : 1
"PyThread_tss_alloc()" : 2
"PyThread_tss_create()" : 4
"PyThread_tss_delete()" : 2
"PyThread_tss_free()" : 1
"PyThread_tss_get()" : 2
"PyThread_tss_is_created()" : 1
"PyThread_tss_set()" : 2
"PyTraceBack_Here()" : 1
"PyTraceBack_Print()" : 1
"PyTraceBack_Type" : 1
"PyTupleIter_Type" : 1
"PyTuple_GetSlice()" : 1
"PyTuple_New()" : 1
"PyTuple_Pack()" : 1
"PyTuple_Size()" : 1
"PyTuple_Type" : 1
"PyType_ClearCache()" : 1
"PyType_FromModuleAndSpec()" : 3
"PyType_FromSpec()" : 5
"PyType_FromSpecWithBases()" : 6
"PyType_GenericAlloc()" : 4
"PyType_GenericNew()" : 2
"PyType_GetFlags()" : 1
"PyType_GetModule()" : 3
"PyType_GetModuleState()" : 1
"PyType_GetName()" : 1
"PyType_GetQualName()" : 1
"PyType_GetSlot()" : 2
"PyType_IsSubtype()" : 1
"PyType_Modified()" : 1
"PyType_Slot" : 2
"PyType_Spec" : 3
"PyType_Type" : 5
"PyUnicodeDecodeError_Create()" : 1
"PyUnicodeDecodeError_GetEncoding()" : 1
"PyUnicodeDecodeError_GetEnd()" : 1
"PyUnicodeDecodeError_GetObject()" : 1
"PyUnicodeDecodeError_GetReason()" : 1
"PyUnicodeDecodeError_GetStart()" : 1
"PyUnicodeDecodeError_SetEnd()" : 1
"PyUnicodeDecodeError_SetReason()" : 1
"PyUnicodeDecodeError_SetStart()" : 1
"PyUnicodeEncodeError_GetEncoding()" : 1
"PyUnicodeEncodeError_GetEnd()" : 1
"PyUnicodeEncodeError_GetObject()" : 1
"PyUnicodeEncodeError_GetReason()" : 1
"PyUnicodeEncodeError_GetStart()" : 1
"PyUnicodeEncodeError_SetEnd()" : 1
"PyUnicodeEncodeError_SetReason()" : 1
"PyUnicodeEncodeError_SetStart()" : 1
"PyUnicodeIter_Type" : 1
"PyUnicodeTranslateError_GetEnd()" : 1
"PyUnicodeTranslateError_GetObject()" : 1
"PyUnicodeTranslateError_GetReason()" : 1
"PyUnicodeTranslateError_GetStart()" : 1
"PyUnicodeTranslateError_SetEnd()" : 1
"PyUnicodeTranslateError_SetReason()" : 1
"PyUnicodeTranslateError_SetStart()" : 1
"PyUnicode_Append()" : 1
"PyUnicode_AppendAndDel()" : 1
"PyUnicode_AsASCIIString()" : 1
"PyUnicode_AsCharmapString()" : 1
"PyUnicode_AsDecodedObject()" : 1
"PyUnicode_AsDecodedUnicode()" : 1
"PyUnicode_AsEncodedObject()" : 1
"PyUnicode_AsEncodedString()" : 1
"PyUnicode_AsEncodedUnicode()" : 1
"PyUnicode_AsLatin1String()" : 1
"PyUnicode_AsMBCSString()" : 1
"PyUnicode_AsRawUnicodeEscapeString()" : 1
"PyUnicode_AsUCS4()" : 3
"PyUnicode_AsUCS4Copy()" : 1
"PyUnicode_AsUTF16String()" : 1
"PyUnicode_AsUTF32String()" : 1
"PyUnicode_AsUTF8AndSize()" : 2
"PyUnicode_AsUTF8String()" : 1
"PyUnicode_AsUnicodeEscapeString()" : 1
"PyUnicode_AsWideChar()" : 3
"PyUnicode_BuildEncodingMap()" : 1
"PyUnicode_Compare()" : 1
"PyUnicode_CompareWithASCIIString()" : 1
"PyUnicode_Concat()" : 1
"PyUnicode_Contains()" : 1
"PyUnicode_Count()" : 1
"PyUnicode_Decode()" : 1
"PyUnicode_DecodeASCII()" : 1
"PyUnicode_DecodeCharmap()" : 1
"PyUnicode_DecodeCodePageStateful()" : 1
"PyUnicode_DecodeFSDefault()" : 1
"PyUnicode_DecodeLatin1()" : 1
"PyUnicode_DecodeLocale()" : 1
"PyUnicode_DecodeMBCS()" : 2
"PyUnicode_DecodeMBCSStateful()" : 2
"PyUnicode_DecodeRawUnicodeEscape()" : 1
"PyUnicode_DecodeUTF16()" : 2
"PyUnicode_DecodeUTF16Stateful()" : 2
"PyUnicode_DecodeUTF32()" : 2
"PyUnicode_DecodeUTF32Stateful()" : 2
"PyUnicode_DecodeUTF7()" : 2
"PyUnicode_DecodeUTF7Stateful()" : 1
"PyUnicode_DecodeUTF8()" : 2
"PyUnicode_DecodeUTF8Stateful()" : 1
"PyUnicode_DecodeUnicodeEscape()" : 1
"PyUnicode_EncodeCodePage()" : 1
"PyUnicode_FSDecoder()" : 2
"PyUnicode_Find()" : 1
"PyUnicode_FindChar()" : 1
"PyUnicode_Format()" : 1
"PyUnicode_FromEncodedObject()" : 1
"PyUnicode_FromFormat()" : 4
"PyUnicode_FromObject()" : 1
"PyUnicode_FromOrdinal()" : 1
"PyUnicode_FromString()" : 2
"PyUnicode_FromStringAndSize()" : 1
"PyUnicode_FromWideChar()" : 2
"PyUnicode_GetDefaultEncoding()" : 1
"PyUnicode_GetLength()" : 1
"PyUnicode_GetSize()" : 1
"PyUnicode_InternFromString()" : 1
"PyUnicode_InternImmortal()" : 1
"PyUnicode_InternInPlace()" : 2
"PyUnicode_IsIdentifier()" : 1
"PyUnicode_Join()" : 1
"PyUnicode_Partition()" : 1
"PyUnicode_RPartition()" : 1
"PyUnicode_RSplit()" : 1
"PyUnicode_ReadChar()" : 3
"PyUnicode_Replace()" : 1
"PyUnicode_Resize()" : 1
"PyUnicode_RichCompare()" : 1
"PyUnicode_Split()" : 1
"PyUnicode_Splitlines()" : 1
"PyUnicode_Substring()" : 1
"PyUnicode_Tailmatch()" : 1
"PyUnicode_Translate()" : 1
"PyUnicode_Type" : 1
"PyUnicode_WriteChar()" : 1
"PyVarObject" : 5
"PyVarObject.ob_base" : 1
"PyVarObject.ob_size" : 1
"PyWeakReference" : 1
"PyWeakref_NewProxy()" : 1
"PyWeakref_NewRef()" : 1
"PyWrapperDescr_Type" : 1
"PyWrapper_New()" : 1
"PyZip_Type" : 1
"Py_AddPendingCall()" : 1
"Py_BLOCK_THREADS" : 1
"Py_BytesMain()" : 1
"Py_DecRef()" : 1
"Py_END_ALLOW_THREADS" : 5
"Py_EndInterpreter()" : 1
"Py_EnterRecursiveCall()" : 4
"Py_Exit()" : 1
"Py_FileSystemDefaultEncodeErrors" : 6
"Py_FileSystemDefaultEncoding" : 11
"Py_Finalize()" : 1
"Py_GenericAliasType" : 1
"Py_GetBuildInfo()" : 2
"Py_GetCompiler()" : 2
"Py_GetCopyright()" : 2
"Py_GetPlatform()" : 2
"Py_GetProgramName()" : 2
"Py_GetPythonHome()" : 2
"Py_GetRecursionLimit()" : 1
"Py_GetVersion()" : 2
"Py_HasFileSystemDefaultEncoding" : 1
"Py_IncRef()" : 1
"Py_InitializeEx()" : 1
"Py_Is()" : 1
"Py_IsFalse()" : 1
"Py_IsNone()" : 1
"Py_IsTrue()" : 1
"Py_LeaveRecursiveCall()" : 2
"Py_MakePendingCalls()" : 1
"Py_NewInterpreter()" : 2
"Py_ReprEnter()" : 3
"Py_ReprLeave()" : 1
"Py_SetPath()" : 2
"Py_SetRecursionLimit()" : 1
"Py_UCS4" : 2
"Py_UNBLOCK_THREADS" : 1
"Py_UTF8Mode" : 1
"Py_VaBuildValue()" : 1
"Py_intptr_t" : 1
"Py_uintptr_t" : 1
"allocfunc" : 3
"binaryfunc" : 30
"descrgetfunc" : 3
"descrsetfunc" : 3
"destructor" : 5
"getattrfunc" : 3
"getattrofunc" : 3
"getiterfunc" : 3
"getter" : 1
"hashfunc" : 3
"initproc" : 3
"inquiry" : 6
"iternextfunc" : 3
"lenfunc" : 4
"newfunc" : 3
"objobjargproc" : 3
"objobjproc" : 3
"reprfunc" : 4
"richcmpfunc" : 3
"setattrfunc" : 3
"setattrofunc" : 3
"setter" : 1
"ssizeargfunc" : 5
"ssizeobjargproc" : 3
"ssizessizeargfunc" : 1
"ssizessizeobjargproc" : 1
"symtable" : 1
"ternaryfunc" : 5
"traverseproc" : 3
"unaryfunc" : 12
"visitproc" : 2
struct).* : 5
PyType_Type : 1
"type" : 6
PyType_Check(PyObject : 1
PyType_CheckExact(PyObject : 1
PyType_ClearCache() : 1
cache : 6
PyType_GetFlags(PyTypeObject : 1
"tp_flags" : 8
primarily : 1
"Py_LIMITED_API"; : 1
long" : 1
PyType_Modified(PyTypeObject : 1
Invalidate : 1
manual : 2
PyType_HasFeature(PyTypeObject : 1
feature) : 1
*feature* : 1
denoted : 1
PyType_IS_GC(PyTypeObject : 1
cycle : 9
detector; : 1
"Py_TPFLAGS_HAVE_GC" : 22
PyType_IsSubtype(PyTypeObject : 1
"__subclasscheck__()" : 2
"issubclass()" : 1
*PyType_GenericAlloc(PyTypeObject : 1
nitems) : 2
Generic : 9
"tp_alloc" : 3
*PyType_GenericNew(PyTypeObject : 1
*kwds) : 1
"tp_new" : 15
PyType_Ready(PyTypeObject : 1
Finalize : 1
parents : 1
contrary : 1
"tp_traverse" : 30
*PyType_GetName(PyTypeObject : 1
*PyType_GetQualName(PyTypeObject : 1
qualified : 1
*PyType_GetSlot(PyTypeObject : 1
slot) : 1
3.4.* : 1
Callers : 1
"PyType_Slot.slot" : 1
*slot* : 1
heap : 26
*PyType_GetModule(PyTypeObject : 1
"PyType_GetModule(Py_TYPE(self))" : 1
"Py_TYPE(self)" : 4
*subclass* : 1
superclass : 3
"PyCMethod" : 4
"PyType_GetModuleByDef()" : 1
*PyType_GetModuleState(PyTypeObject : 1
shortcut : 1
*PyType_GetModuleByDef(PyTypeObject : 1
Find : 1
"tp_init" : 9
"nb_add") : 1
method's : 1
convention : 10
Creating : 4
Heap-Allocated : 2
============================= : 1
*PyType_FromModuleAndSpec(PyObject : 1
PyType_Spec : 2
*bases) : 2
("Py_TPFLAGS_HEAPTYPE") : 2
*bases* : 5
classes; : 2
*Py_tp_bases* : 1
*Py_tp_base* : 1
derives : 2
"object" : 2
record : 1
subclasses; : 1
individually : 8
"tp_doc" : 2
*PyType_FromSpecWithBases(PyType_Spec : 1
"PyType_FromModuleAndSpec(NULL : 1
spec : 1
bases)" : 1
*PyType_FromSpec(PyType_Spec : 1
"PyType_FromSpecWithBases(spec : 1
NULL)" : 1
*PyType_Spec.name : 1
"PyTypeObject.tp_name" : 1
PyType_Spec.basicsize : 1
PyType_Spec.itemsize : 1
Size : 1
"PyTypeObject.tp_basicsize" : 1
"PyTypeObject.tp_itemsize" : 1
PyType_Spec.flags : 1
"PyTypeObject.tp_flags" : 1
"Py_TPFLAGS_HEAPTYPE" : 2
PyType_Slot : 2
*PyType_Spec.slots : 1
Terminated : 1
PyType_Slot.slot : 1
IDs : 1
"PyNumberMethods" : 2
"PySequenceMethods" : 1
"PyMappingMethods" : 2
"PyAsyncMethods" : 2
"Py_" : 1
use: : 1
"Py_tp_dealloc" : 1
"PyTypeObject.tp_dealloc" : 1
"Py_nb_add" : 1
"PyNumberMethods.nb_add" : 1
"Py_sq_length" : 1
"PySequenceMethods.sq_length" : 1
"PyType_Slot": : 1
"tp_dict" : 6
"tp_mro" : 1
"tp_cache" : 1
"tp_subclasses" : 1
"tp_weaklist" : 2
"tp_vectorcall" : 3
"tp_weaklistoffset" : 6
PyMemberDef) : 3
"tp_dictoffset" : 8
"tp_vectorcall_offset" : 4
"Py_tp_bases" : 2
"Py_tp_base" : 1
problematic : 3
"PyBufferProcs" : 2
unlimited : 1
"bf_getbuffer" : 2
*PyType_Slot.pfunc : 1
"Py_tp_doc" : 1
identity : 1
"==" : 4
C) : 1
sufficient : 3
"PyNone_Check()" : 1
*Py_None : 1
denoting : 1
Py_RETURN_NONE : 1
Properly : 3
(that : 3
it.) : 1
ultimately : 1
expansions : 1
indirectly : 3
(Only : 2
ABI.)* : 2
treat : 3
"release" : 1
Access : 2
"Py_REFCNT" : 2
"Py_TYPE" : 2
"ob_size" : 10
notion : 1
"Py_SIZE" : 1
PyObject_HEAD : 5
declaring : 5
varying : 1
expands : 12
to: : 7
ob_base; : 2
PyObject_VAR_HEAD : 4
varies : 1
Py_Is(PyObject : 1
*x : 1
*y) : 1
Test : 5
*x* : 2
*y* : 1
"x : 4
y" : 1
Py_IsNone(PyObject : 1
*x) : 3
None" : 3
Py_IsTrue(PyObject : 1
True" : 1
Py_IsFalse(PyObject : 1
False" : 1
*Py_TYPE(PyObject : 1
"Py_SET_TYPE()" : 1
"Py_TYPE()" : 2
Py_IS_TYPE(PyObject : 1
"Py_TYPE(o) : 1
type" : 1
Py_SET_TYPE(PyObject : 1
Py_REFCNT(PyObject : 1
"Py_SET_REFCNT()" : 1
"Py_REFCNT()" : 1
Py_SET_REFCNT(PyObject : 1
refcnt) : 1
counter : 4
*refcnt* : 1
Py_SIZE(PyVarObject : 1
"Py_SET_SIZE()" : 1
"Py_SIZE()" : 1
PyVarObject* : 1
Py_SET_SIZE(PyVarObject : 1
PyObject_HEAD_INIT(type) : 1
_PyObject_EXTRA_INIT : 2
PyVarObject_HEAD_INIT(type : 1
================================== : 1
PyCFunction : 4
callables : 6
shall : 1
*PyCFunction(PyObject : 1
*args); : 1
PyCFunctionWithKeywords : 1
"METH_VARARGS : 1
METH_KEYWORDS" : 5
*PyCFunctionWithKeywords(PyObject : 1
*kwargs); : 3
_PyCFunctionFast : 1
"METH_FASTCALL" : 3
*_PyCFunctionFast(PyObject : 1
nargs); : 1
_PyCFunctionFastWithKeywords : 1
"METH_FASTCALL : 3
*_PyCFunctionFastWithKeywords(PyObject : 1
nargs : 2
*kwnames); : 1
PyCMethod : 1
"METH_METHOD : 1
METH_FASTCALL : 4
*PyCMethod(PyObject : 1
*defining_class : 1
*kwnames) : 4
*ml_name : 1
ml_meth : 1
ml_flags : 1
*ml_doc : 1
"ml_meth" : 1
*self* : 12
"ml_flags" : 1
bitfield : 1
indicate : 11
binding : 2
conventions: : 1
METH_VARARGS : 2
typical : 5
expects : 2
methods; : 1
(often : 2
*args*) : 1
METH_KEYWORDS : 3
Methods : 11
parameters: : 1
*kwargs* : 5
Fast : 1
"_PyCFunctionFast" : 1
array) : 1
"_PyCFunctionFastWithKeywords" : 1
Keyword : 2
vectorcall : 32
protocol: : 1
fourth : 1
METH_METHOD : 1
*defining : 1
class* : 1
question : 1
"defining_class" : 1
"self" : 1
"METH_NOARGS" : 1
"Py_UNUSED" : 1
METH_O : 1
"METH_O" : 1
invoking : 2
""O"" : 1
METH_CLASS : 1
*class : 1
methods* : 2
"classmethod()" : 1
METH_STATIC : 1
*static : 1
"staticmethod()" : 1
controls : 1
METH_COEXIST : 1
*METH_COEXIST* : 1
repeated : 2
*sq_contains* : 1
generate : 2
preclude : 1
loading : 2
co-exist : 1
helpful : 1
PyCFunctions : 1
optimized : 3
======================================= : 2
+--------------------+-----------------+---------------------------------+ : 6
|====================|=================|=================================| : 1
"offset" : 1
"flags" : 2
"T_" : 1
+-----------------+--------------------+ : 19
|=================|====================| : 1
T_SHORT : 1
T_INT : 1
T_LONG : 1
T_FLOAT : 1
T_DOUBLE : 1
T_STRING : 1
T_OBJECT : 1
T_OBJECT_EX : 1
T_CHAR : 1
T_BYTE : 1
T_UBYTE : 1
T_UINT : 1
T_USHORT : 1
T_ULONG : 1
T_BOOL : 1
T_LONGLONG : 1
T_ULONGLONG : 1
T_PYSSIZET : 2
"T_OBJECT" : 5
"T_OBJECT_EX" : 5
"AttributeError" : 4
Try : 2
handles : 3
"del" : 1
"READONLY" : 3
"T_STRING" : 2
(They : 1
(created : 3
similar) : 1
"__dictoffset__" : 1
"__weaklistoffset__" : 1
"__vectorcalloffset__" : 1
"T_PYSSIZET" : 1
spam_type_members[] : 1
{"__dictoffset__" : 1
offsetof(Spam_object : 1
dict) : 1
READONLY} : 1
{NULL} : 1
Sentinel : 1
*PyMember_GetOne(const : 1
*obj_addr : 2
belonging : 11
*obj_addr* : 2
*m* : 3
PyMember_SetOne(char : 1
*m : 1
property-like : 1
"PyTypeObject.tp_getset" : 1
+---------------+--------------------+-------------------------------------+ : 6
|===============|====================|=====================================| : 1
getter : 4
setter : 4
omitted : 2
doc : 1
"get" : 1
instance) : 2
"closure"): : 2
*(*getter)(PyObject : 1
*); : 5
(*setter)(PyObject : 1
Should : 1
String : 3
formatting : 4
******************************** : 1
PyOS_snprintf(char : 1
Output : 2
man : 2
page : 4
*snprintf(3)* : 1
PyOS_vsnprintf(char : 1
va) : 1
*va* : 1
*vsnprintf(3)* : 1
Standard : 7
"snprintf()" : 1
"vsnprintf()" : 1
Their : 3
corner : 2
"str[size-1]" : 3
"'\0'" : 4
"'\0'") : 1
str : 2
Both : 4
"str : 1
NULL" : 3
"size : 2
INT_MAX" : 1
"n : 1
snprintf(NULL : 1
...)" : 3
(*rv*) : 1
"0 : 1
size" : 2
*rv* : 1
(excluding : 4
"str[rv]") : 1
"rv : 3
"something : 1
bad : 1
happened." : 1
locale-independent : 1
conversions : 3
PyOS_string_to_double(const : 1
**endptr : 1
*overflow_exception) : 1
"float()" : 1
leading : 4
whitespace : 3
"endptr" : 1
whole : 2
"-1.0" : 9
floating-point : 3
endptr : 1
"*endptr" : 3
unconverted : 1
ValueError : 1
""1e500"" : 1
platforms) : 1
"overflow_exception" : 2
"Py_HUGE_VAL" : 1
sign) : 1
out-of-memory : 1
error) : 1
3.1 : 5
*PyOS_double_to_string(double : 1
val : 1
format_code : 1
*ptype) : 1
*val* : 7
supplied : 3
*format_code* : 2
*precision* : 2
"'e'" : 1
"'E'" : 1
"'f'" : 1
"'g'" : 1
"'G'" : 1
"'r'" : 4
"Py_DTSF_SIGN" : 2
"Py_DTSF_ADD_DOT_0" : 2
"Py_DTSF_ALT" : 2
or-ed : 1
together: : 1
precede : 1
sign : 1
"alternate" : 1
"'#'" : 1
specifier : 2
*ptype* : 1
"Py_DTST_FINITE" : 1
"Py_DTST_INFINITE" : 1
"Py_DTST_NAN" : 1
signifying : 1
freeing : 3
PyOS_stricmp(const : 1
*s1 : 2
*s2) : 1
Case : 2
insensitive : 2
comparison : 10
identically : 2
"strcmp()" : 2
PyOS_strnicmp(const : 1
*s2 : 1
"strncmp()" : 1
PyFunctionObject : 1
PyFunction_Type : 1
"types.FunctionType" : 1
PyFunction_Check(PyObject : 1
"PyFunction_Type") : 1
*PyFunction_New(PyObject : 1
*code : 4
*globals) : 1
*code* : 1
*__module__* : 2
annotations : 3
*__qualname__* : 1
"co_qualname" : 2
*PyFunction_NewWithQualName(PyObject : 1
"PyFunction_New()" : 1
*PyFunction_GetCode(PyObject : 1
*PyFunction_GetGlobals(PyObject : 1
*PyFunction_GetModule(PyObject : 1
*NULL* : 24
*PyFunction_GetDefaults(PyObject : 1
PyFunction_SetDefaults(PyObject : 1
*defaults) : 1
*defaults* : 1
*PyFunction_GetClosure(PyObject : 1
cell : 18
PyFunction_SetClosure(PyObject : 1
*closure* : 1
*PyFunction_GetAnnotations(PyObject : 1
PyFunction_SetAnnotations(PyObject : 1
*annotations) : 1
*annotations* : 1
************************************ : 2
collecting : 2
involves : 2
"containers" : 1
containers : 3
atomic : 1
container : 9
"tp_clear" : 25
Py_TPFLAGS_HAVE_GC : 4
Constructors : 1
rules: : 2
"PyObject_GC_New()" : 4
"PyObject_GC_NewVar()" : 3
Similarly : 1
invalidated : 1
subclasses.When : 1
populate : 1
inherits : 10
*PyObject_GC_New(TYPE : 1
*PyObject_GC_NewVar(TYPE : 1
*PyObject_GC_Resize(TYPE : 1
PyObject_GC_Track(PyObject : 1
Adds : 1
near : 1
PyObject_IS_GC(PyObject : 1
PyObject_GC_IsTracked(PyObject : 1
analogous : 3
"gc.is_tracked()" : 1
PyObject_GC_IsFinalized(PyObject : 1
"gc.is_finalized()" : 1
PyObject_GC_Del(void : 1
PyObject_GC_UnTrack(void : 1
Remove : 6
("tp_dealloc" : 1
"_PyObject_GC_TRACK()" : 1
"_PyObject_GC_UNTRACK()" : 1
type: : 5
(*visitproc)(PyObject : 1
*object : 4
*arg) : 8
visitor : 3
detection; : 1
(*traverseproc)(PyObject : 1
visitproc : 4
visit : 7
Traversal : 1
Implementations : 2
*visit* : 8
simplify : 2
"Py_VISIT()" : 4
*arg*: : 1
Py_VISIT(PyObject : 1
callback : 13
like: : 1
my_traverse(Noddy : 1
Py_VISIT(self->foo); : 1
Py_VISIT(self->bar); : 1
(*inquiry)(PyObject : 1
*self) : 6
Drop : 1
cycles : 11
Immutable : 1
(don't : 1
controlling : 1
PyGC_Collect(void) : 1
Perform : 2
"gc.collect()" : 1
unconditionally.) : 1
collected : 5
"sys.unraisablehook" : 1
PyGC_Enable(void) : 1
collector: : 3
"gc.enable()" : 1
PyGC_Disable(void) : 1
"gc.disable()" : 1
PyGC_IsEnabled(void) : 1
Query : 1
"gc.isenabled()" : 1
Slice : 2
PySlice_Type : 1
"slice" : 1
PySlice_Check(PyObject : 1
*PySlice_New(PyObject : 1
*start : 5
*stop : 5
*step) : 3
*stop* : 2
*step* : 2
PySlice_GetIndices(PyObject : 1
*slice : 3
Retrieve : 8
stop : 4
step : 4
*slice* : 4
Treats : 1
(unless : 2
"PySliceObject*" : 2
PySlice_GetIndicesEx(PyObject : 1
*step : 1
*slicelength) : 1
Usable : 1
replacement : 3
*slicelength* : 1
Out : 2
manner : 2
slices : 2
resizable : 2
invocation : 3
(PySlice_GetIndicesEx(slice : 1
&start : 3
&stop : 3
&step : 1
&slicelength) : 1
(PySlice_Unpack(slice : 1
&step) : 1
slicelength : 1
PySlice_AdjustIndices(length : 1
step); : 1
3.6.1: : 2
"0x03050400" : 2
"0x03060000" : 2
including) : 2
"0x03060100" : 2
higher : 1
evaluated : 1
PySlice_Unpack(PyObject : 1
Extract : 1
Silently : 1
reduce : 1
boost : 2
"-PY_SSIZE_T_MAX" : 2
3.6.1 : 2
PySlice_AdjustIndices(Py_ssize_t : 1
step) : 1
Adjust : 1
start/end : 1
Doesn't : 1
Ellipsis : 2
*Py_Ellipsis : 1
"Ellipsis" : 1
Concrete : 2
Passing : 2
idea; : 1
first; : 1
"PyDict_Check()" : 1
"family : 1
tree" : 1
Allowing : 1
violations : 2
immediate : 1
termination : 7
Fundamental : 2
=================== : 2
Floating : 2
Point : 2
Pack : 8
Unpack : 8
chapter; : 1
deals : 1
intrinsic : 1
Codecs : 25
Character : 4
Properties : 2
Locale : 2
Built-in : 3
UTF-32 : 6
UTF-16 : 6
UTF-7 : 5
Unicode-Escape : 4
Raw-Unicode-Escape : 3
Latin-1 : 7
Map : 4
MBCS : 8
codecs : 10
Container : 2
Dictionary : 2
Instance : 2
Method : 6
Cell : 3
Code : 3
Capsules : 2
Frame : 2
Generator : 3
Context : 4
Variables : 2
DateTime : 2
Perhaps : 1
"PyType_*" : 1
offer : 1
interesting : 2
fairly : 1
compared : 1
examined : 1
detail : 6
quick : 2
at-a-glance : 1
insight : 1
---------- : 1
+--------------------+--------------------+--------------------+----+----+----+----+ : 49
Info : 1
[2] : 4
methods/attrs : 1
+----+----+----+----+ : 1
O : 1
T : 1
D : 1
I : 2
|====================|====================|====================|====|====|====|====| : 1
<R> : 1
__name__ : 1
X : 56
"tp_vectorcall_of : 1
fset" : 1
("tp_getattr") : 1
__getattribute__ : 2
G : 9
__getattr__ : 2
("tp_setattr") : 1
__setattr__ : 2
__delattr__ : 2
"tp_as_async" : 2
"tp_repr" : 8
__repr__ : 1
"tp_as_sequence" : 3
"PySequenceMethod : 1
s" : 1
"tp_as_mapping" : 3
"tp_hash" : 11
__hash__ : 1
"tp_call" : 12
__call__ : 1
"tp_str" : 1
__str__ : 1
"tp_getattro" : 10
"tp_setattro" : 10
"tp_as_buffer" : 2
 : 12
__doc__ : 1
"tp_richcompare" : 11
__lt__ : 1
__le__ : 1
__eq__ : 1
__ne__ : 1
__gt__ : 1
__ge__ : 1
"tp_weaklistoffse : 1
t" : 1
"tp_iter" : 3
__iter__ : 1
"tp_iternext" : 2
__next__ : 1
"tp_methods" : 1
[] : 3
"tp_members" : 1
"tp_getset" : 1
"tp_base" : 4
__base__ : 1
__dict__ : 1
"tp_descr_get" : 3
__get__ : 1
"tp_descr_set" : 2
__set__ : 1
__delete__ : 1
__init__ : 1
__new__ : 1
"tp_free" : 4
"freefunc" : 2
"tp_is_gc" : 1
<"tp_bases"> : 1
__bases__ : 1
~ : 3
<"tp_mro"> : 1
__mro__ : 1
["tp_cache"] : 1
["tp_subclasses"] : 1
__subclasses__ : 1
["tp_weaklist"] : 1
("tp_del") : 1
["tp_version_tag"] : 1
"tp_finalize" : 6
__del__ : 1
"vectorcallfunc" : 4
**()**: : 1
(effectively) : 1
**<>**: : 1
angle : 1
initially : 2
**[]**: : 1
square : 2
**<R>** : 1
prefix) : 1
(must : 1
non-"NULL") : 3
Columns: : 1
**"O"**: : 1
**"T"**: : 1
**"D"**: : 1
PyType_Ready : 4
inheritance : 8
("I") : 1
**"I"**: : 1
*PyType_Ready* : 1
sub-struct : 1
slots; : 1
slot's : 5
complicated; : 1
effectively : 3
chain : 3
--------- : 1
+----------------------------+-------------------+--------------+ : 58
|============================|===================|==============| : 1
"am_await" : 1
__await__ : 1
"am_aiter" : 1
__aiter__ : 1
"am_anext" : 1
__anext__ : 1
"am_send" : 2
"sendfunc" : 1
"nb_add" : 2
__add__ : 2
__radd__ : 1
"nb_inplace_add" : 2
__iadd__ : 2
"nb_subtract" : 1
__sub__ : 1
__rsub__ : 1
"nb_inplace_subtract" : 1
__isub__ : 1
"nb_multiply" : 2
__mul__ : 2
__rmul__ : 1
"nb_inplace_multiply" : 2
__imul__ : 2
"nb_remainder" : 1
__mod__ : 1
__rmod__ : 1
"nb_inplace_remainder" : 1
__imod__ : 1
"nb_divmod" : 1
__divmod__ : 1
__rdivmod__ : 1
"nb_power" : 1
__pow__ : 1
__rpow__ : 1
"nb_inplace_power" : 1
__ipow__ : 1
"nb_negative" : 1
__neg__ : 1
"nb_positive" : 1
__pos__ : 1
"nb_absolute" : 1
__abs__ : 1
"nb_bool" : 1
__bool__ : 1
"nb_invert" : 1
__invert__ : 1
"nb_lshift" : 1
__lshift__ : 1
__rlshift__ : 1
"nb_inplace_lshift" : 1
__ilshift__ : 1
"nb_rshift" : 1
__rshift__ : 1
__rrshift__ : 1
"nb_inplace_rshift" : 1
__irshift__ : 1
"nb_and" : 1
__and__ : 1
__rand__ : 1
"nb_inplace_and" : 1
__iand__ : 1
"nb_xor" : 1
__xor__ : 1
__rxor__ : 1
"nb_inplace_xor" : 1
__ixor__ : 1
"nb_or" : 1
__or__ : 1
__ror__ : 1
"nb_inplace_or" : 1
__ior__ : 1
"nb_int" : 1
__int__ : 1
"nb_reserved" : 2
"nb_float" : 1
__float__ : 1
"nb_floor_divide" : 1
__floordiv__ : 1
"nb_inplace_floor_divide" : 1
__ifloordiv : 1
__ : 1
"nb_true_divide" : 1
__truediv__ : 1
"nb_inplace_true_divide" : 1
__itruediv__ : 1
__index__ : 1
"nb_matrix_multiply" : 1
__matmul__ : 1
__rmatmul__ : 1
"nb_inplace_matrix_multip : 1
__imatmul__ : 1
ly" : 1
"mp_length" : 1
__len__ : 2
"mp_subscript" : 2
__getitem__ : 2
"mp_ass_subscript" : 2
__setitem__ : 2
__delitem__ : 2
"sq_length" : 3
"sq_concat" : 1
"sq_repeat" : 1
"sq_item" : 3
"sq_ass_item" : 2
"sq_contains" : 1
__contains__ : 1
"sq_inplace_concat" : 1
"sq_inplace_repeat" : 1
"getbufferproc()" : 1
"releasebufferpr : 1
oc()" : 1
+-------------------------------+-------------------------------+------------------------+ : 29
Parameter : 1
|===============================|===============================|========================| : 1
Py_hash_t : 6
"getbufferproc" : 1
"releasebufferproc" : 1
"Include/object.h" : 1
repeats : 1
there: : 1
_typeobject : 2
*tp_name; : 1
"<module>.<name>" : 1
tp_basicsize : 2
tp_itemsize; : 1
destructor : 14
tp_dealloc; : 1
tp_vectorcall_offset; : 1
getattrfunc : 2
tp_getattr; : 1
setattrfunc : 2
tp_setattr; : 1
PyAsyncMethods : 3
*tp_as_async; : 1
formerly : 1
tp_compare : 1
tp_reserved : 1
3) : 1
reprfunc : 4
tp_repr; : 1
suites : 1
PyNumberMethods : 3
*tp_as_number; : 1
PySequenceMethods : 3
*tp_as_sequence; : 1
PyMappingMethods : 3
*tp_as_mapping; : 1
(here : 1
compatibility) : 1
hashfunc : 2
tp_hash; : 1
ternaryfunc : 6
tp_call; : 1
tp_str; : 1
getattrofunc : 2
tp_getattro; : 1
setattrofunc : 2
tp_setattro; : 1
input/output : 1
PyBufferProcs : 3
*tp_as_buffer; : 1
Flags : 1
optional/expanded : 1
tp_flags; : 1
*tp_doc; : 1
Documentation : 1
Assigned : 2
2.0 : 1
tp_traverse; : 1
tp_clear; : 1
2.1 : 1
rich : 3
richcmpfunc : 2
tp_richcompare; : 1
enabler : 1
tp_weaklistoffset; : 1
Iterators : 1
getiterfunc : 2
tp_iter; : 1
iternextfunc : 2
tp_iternext; : 1
Attribute : 1
subclassing : 3
stuff : 1
*tp_methods; : 1
*tp_members; : 1
*tp_getset; : 1
Strong : 1
*tp_base; : 1
*tp_dict; : 1
descrgetfunc : 2
tp_descr_get; : 1
descrsetfunc : 2
tp_descr_set; : 1
tp_dictoffset; : 1
initproc : 2
tp_init; : 1
allocfunc : 2
tp_alloc; : 1
newfunc : 2
tp_new; : 1
tp_free; : 1
free-memory : 1
routine : 2
tp_is_gc; : 1
PyObject_IS_GC : 1
*tp_bases; : 1
*tp_mro; : 1
resolution : 1
*tp_cache; : 1
*tp_subclasses; : 1
*tp_weaklist; : 1
tp_del; : 1
2.6 : 1
tp_version_tag; : 1
tp_finalize; : 1
vectorcallfunc : 3
tp_vectorcall; : 1
PyTypeObject; : 1
extends : 1
"type_new()" : 1
statement) : 3
metatype) : 1
objects) : 1
PyObject.ob_refcnt : 1
"PyObject_HEAD_INIT" : 4
"ob_type" : 5
But : 2
*do* : 1
**Inheritance:** : 62
*PyObject.ob_type : 1
metatype : 3
"&PyType_Type" : 1
loadable : 2
complains : 1
initializer : 5
doing : 4
Foo_Type.ob_type : 1
&PyType_Type; : 1
*PyObject._ob_next : 1
*PyObject._ob_prev : 1
"sys.getobjects()" : 1
PyVarObject.ob_size : 1
================== : 3
"Default" : 1
defaults.) : 1
*PyTypeObject.tp_name : 1
Pointer : 6
"T" : 1
"M" : 1
"Q" : 1
"P" : 1
""P.Q.M.T"" : 1
"'__module__'" : 1
*tp_name* : 1
Everything : 1
"__module__" : 3
entire : 1
above) : 4
impossible : 4
pickle : 1
Additionally : 4
documentations : 1
pydoc : 1
"PyTypeObject()" : 1
"tp_itemsize") : 1
PyTypeObject.tp_basicsize : 1
PyTypeObject.tp_itemsize : 1
types: : 1
fixed-length : 4
variable-length : 6
N : 4
"length" : 1
instance's : 4
exceptions: : 1
ints : 2
"abs(ob_size)" : 1
layout : 6
mean : 1
meaningful : 1
field) : 1
"PyObject_HEAD" : 1
"PyObject_VAR_HEAD" : 1
(whichever : 1
struct) : 1
"_ob_prev" : 1
"_ob_next" : 1
"sizeof" : 1
alignment: : 1
alignment : 2
suppose : 1
"double" : 1
"sizeof(double)" : 2
programmer's : 1
"double") : 1
PyTypeObject.tp_dealloc : 1
singletons : 1
"Ellipsis") : 1
tp_dealloc(PyObject : 1
*self); : 11
subtypable : 1
(doesn't : 1
"Py_TPFLAGS_BASETYPE" : 1
permissible : 1
"PyObject_Del()" : 2
"PyObject_VarNew()" : 1
foo_dealloc(foo_object : 2
PyObject_GC_UnTrack(self); : 1
Py_CLEAR(self->ref); : 1
Py_TYPE(self)->tp_free((PyObject : 1
*)self); : 1
dangling : 2
*tp : 1
Py_TYPE(self); : 1
tp->tp_free(self); : 1
Py_DECREF(tp); : 1
PyTypeObject.tp_vectorcall_offset : 1
per-instance : 1
efficient : 12
"Py_TPFLAGS_HAVE_VECTORCALL" : 6
*vectorcallfunc* : 3
falls : 6
"PyVectorcall_Call()" : 3
"__call__" : 1
likely : 7
inconsistent : 1
"tp_print" : 1
"Py_TPFLAGS_IMMUTABLETYPE" : 3
Python) : 2
PyTypeObject.tp_getattr : 1
get-attribute-string : 1
taking : 3
Group: : 9
"tp_getattr" : 6
"tp_getattro": : 1
subtype's : 7
PyTypeObject.tp_setattr : 1
deleting : 4
"tp_setattr" : 6
"tp_setattro": : 1
*PyTypeObject.tp_as_async : 1
relevant : 5
*awaitable* : 4
*asynchronous : 3
iterator* : 3
C-level : 4
Formerly : 1
"tp_compare" : 1
"tp_reserved" : 1
PyTypeObject.tp_repr : 1
"PyObject_Repr()": : 1
*tp_repr(PyObject : 1
Ideally : 2
"eval()" : 1
suitable : 6
feasible : 1
"'<'" : 1
"'>'" : 1
deduced : 1
**Default:** : 14
"<%s : 1
%p>" : 1
*PyTypeObject.tp_as_number : 1
*PyTypeObject.tp_as_sequence : 1
*PyTypeObject.tp_as_mapping : 1
PyTypeObject.tp_hash : 1
"hash()" : 1
"PyObject_Hash()": : 1
tp_hash(PyObject : 1
computation : 1
(*and* : 1
"__hash__ : 2
"isinstance(o : 1
collections.Hashable)" : 1
converse : 1
"tp_richcompare": : 1
PyTypeObject.tp_call : 1
"PyObject_Call()": : 1
*tp_call(PyObject : 2
PyTypeObject.tp_str : 1
handler.) : 1
"PyObject_Str()": : 1
*tp_str(PyObject : 1
"friendly" : 1
among : 1
things : 2
"print()" : 2
PyTypeObject.tp_getattro : 1
get-attribute : 1
"PyObject_GetAttr()": : 1
*tp_getattro(PyObject : 1
*attr); : 1
looking : 1
"tp_getattr": : 1
PyTypeObject.tp_setattro : 1
"PyObject_SetAttr()": : 1
tp_setattro(PyObject : 1
*attr : 3
*value); : 2
"tp_setattr": : 1
*PyTypeObject.tp_as_buffer : 1
PyTypeObject.tp_flags : 1
mask : 1
situations; : 1
"tp_as_buffer") : 1
historically : 1
valid; : 1
guards : 1
Inheritance : 1
complicated : 3
pertain : 2
strictly : 2
"Py_TPFLAGS_DEFAULT : 1
Py_TPFLAGS_BASETYPE" : 1
**Bit : 1
Masks:** : 1
masks : 1
defined; : 1
ORed : 1
"PyType_HasFeature()" : 1
*tp* : 1
"tp->tp_flags : 1
f" : 1
Py_TPFLAGS_HEAPTYPE : 1
INCREF'ed : 2
DECREF'ed : 1
subtypes; : 1
ob_type : 1
gets : 4
DECREF'ed) : 1
?? : 5
Py_TPFLAGS_BASETYPE : 2
subtyped : 1
(similar : 1
"final" : 1
Java) : 1
Py_TPFLAGS_READY : 1
Py_TPFLAGS_READYING : 1
initializing : 3
GC-related : 1
Py_TPFLAGS_DEFAULT : 3
bitmask : 1
bits: : 1
"Py_TPFLAGS_HAVE_STACKLESS_EXTENSION" : 1
Py_TPFLAGS_METHOD_DESCRIPTOR : 1
unbound : 2
"type(meth)" : 1
then: : 1
"meth.__get__(obj : 1
cls)(*args : 2
**kwds)" : 4
None) : 1
"meth(obj : 1
"meth.__get__(None : 1
"meth(*args : 1
"obj.meth()": : 1
"bound : 1
method" : 1
"obj.meth" : 1
Py_TPFLAGS_LONG_SUBCLASS : 1
Py_TPFLAGS_LIST_SUBCLASS : 1
Py_TPFLAGS_TUPLE_SUBCLASS : 1
Py_TPFLAGS_BYTES_SUBCLASS : 1
Py_TPFLAGS_UNICODE_SUBCLASS : 1
Py_TPFLAGS_DICT_SUBCLASS : 1
Py_TPFLAGS_BASE_EXC_SUBCLASS : 1
Py_TPFLAGS_TYPE_SUBCLASS : 1
"PyLong_Check()" : 1
quickly : 1
Custom : 1
ins : 1
appropriately : 2
interacts : 2
differently : 3
Py_TPFLAGS_HAVE_FINALIZE : 1
Py_TPFLAGS_HAVE_VECTORCALL : 1
Py_TPFLAGS_IMMUTABLETYPE : 1
immutable: : 1
Py_TPFLAGS_DISALLOW_INSTANTIATION : 2
Disallow : 1
"__new__" : 2
"&PyBaseObject_Type" : 3
instantiable : 1
non-NULL : 2
instantiating : 2
*abstract : 1
class*) : 1
Py_TPFLAGS_MAPPING : 1
patterns : 5
"match" : 2
"collections.abc.Mapping" : 2
"collections.abc.Sequence" : 2
"Py_TPFLAGS_MAPPING" : 3
"Py_TPFLAGS_SEQUENCE" : 3
exclusive; : 3
simultaneously : 3
634** : 2
Structural : 2
Pattern : 2
Matching: : 2
Specification : 2
Py_TPFLAGS_SEQUENCE : 1
*PyTypeObject.tp_doc : 1
PyTypeObject.tp_traverse : 1
tp_traverse(PyObject : 1
*arg); : 1
detect : 5
"local_traverse()" : 2
"_thread" : 1
local_traverse(localobject : 1
Py_VISIT(self->args); : 1
Py_VISIT(self->kw); : 1
Py_VISIT(self->dict); : 1
participate : 3
Although : 1
"self->key" : 1
therefore : 10
hand : 2
aid : 1
anyway : 2
"gc" : 1
"get_referents()" : 1
*owns* : 1
(by : 1
having : 7
them) : 1
visited : 2
(what : 1
*tp_weaklist* : 1
to) : 1
**not** : 3
weakreference : 1
strong : 2
alive) : 1
names; : 1
heap-allocated : 2
delegate : 1
heap- : 1
superclass) : 1
garbage-collected : 1
Heap-allocated : 1
earlier : 7
40217 : 1
bit: : 2
PyTypeObject.tp_clear : 1
tp_clear(PyObject : 1
Taken : 1
combine : 1
subtle : 3
doubt : 1
prove : 1
composed : 1
drop : 1
local_clear(localobject : 1
Py_CLEAR(self->key); : 1
Py_CLEAR(self->args); : 1
Py_CLEAR(self->kw); : 1
Py_CLEAR(self->dict); : 1
"Py_CLEAR()" : 2
delicate: : 1
trash : 1
triggering : 1
reclamation : 1
activity : 1
finalizers : 1
weakref : 1
knows : 1
PyTypeObject.tp_richcompare : 1
*tp_richcompare(PyObject : 1
*other : 1
op); : 1
"Py_True" : 6
"Py_False") : 1
"Py_NotImplemented" : 4
"PyObject_RichCompare()": : 1
+------------------+--------------+ : 7
Constant : 1
Comparison : 1
|==================|==============| : 1
"Py_LT" : 4
"<" : 3
"Py_LE" : 4
"<=" : 3
"Py_EQ" : 5
"Py_NE" : 5
"!=" : 3
"Py_GT" : 4
">" : 3
"Py_GE" : 4
">=" : 3
Py_RETURN_RICHCOMPARE(VAL_A : 1
VAL_B : 2
op) : 2
"Py_False" : 5
VAL_A : 1
orderable : 1
operators : 1
floats) : 1
value's : 1
"tp_hash": : 1
PyTypeObject.tp_weaklistoffset : 1
referenceable : 3
head : 8
(ignoring : 1
present); : 1
"PyWeakref_*" : 1
confuse : 2
"tp_weaklist"; : 1
offset; : 2
"__slots__" : 6
declaration : 8
none : 2
"__weakref__" : 3
PyTypeObject.tp_iter : 1
*iterator* : 3
signals : 4
(although : 3
"PyObject_GetIter()": : 1
*tp_iter(PyObject : 1
PyTypeObject.tp_iternext : 1
*tp_iternext(PyObject : 1
"StopIteration" : 2
iterators : 3
*PyTypeObject.tp_methods : 1
(methods : 2
mechanism) : 4
*PyTypeObject.tp_members : 1
(fields : 1
slots) : 1
(members : 1
*PyTypeObject.tp_getset : 1
getset : 1
(computed : 1
*PyTypeObject.tp_base : 1
properties : 3
supported; : 1
initializers : 1
"address : 1
constants" : 1
designators : 1
constants.However : 1
unary : 1
'&' : 1
non-static : 1
"PyBaseObject_Type()" : 1
Compilers : 1
(gcc : 1
does) : 1
compilers : 1
conforming : 1
behavior.Consequently : 1
(obviously) : 1
"object") : 1
*PyTypeObject.tp_dict : 1
called; : 3
overloaded : 1
"__add__()") : 1
assign : 1
PyTypeObject.tp_descr_get : 1
"descriptor : 1
get" : 1
tp_descr_get(PyObject : 1
*type); : 1
PyTypeObject.tp_descr_set : 1
descriptor's : 1
tp_descr_set(PyObject : 1
PyTypeObject.tp_dictoffset : 1
"tp_dict"; : 1
*end* : 8
expensive : 1
account : 1
"-4" : 1
regarded : 1
write-only : 1
difference : 3
(Adding : 1
confusion : 1
Maybe : 1
though.) : 1
PyTypeObject.tp_init : 1
reinitialize : 1
tp_init(PyObject : 1
*kwds); : 2
self : 1
*kwds* : 2
PyTypeObject.tp_alloc : 1
*tp_alloc(PyTypeObject : 1
nitems); : 1
(subtypes : 2
strategy : 1
That : 1
PyTypeObject.tp_new : 1
*tp_new(PyTypeObject : 1
*subtype : 1
*subtype* : 2
created; : 2
unrelated : 1
"subtype->tp_alloc(subtype : 1
nitems)" : 1
absolutely : 1
rule : 4
thumb : 2
deferred : 1
"Py_TPFLAGS_DISALLOW_INSTANTIATION" : 2
instances; : 1
presumably : 1
factory : 4
PyTypeObject.tp_free : 1
tp_free(void : 1
PyObject_Del : 1
PyTypeObject.tp_is_gc : 1
collectible : 3
Normally : 3
mixture : 1
non-collectible : 1
tp_is_gc(PyObject : 1
themselves : 2
distinguish : 1
types.) : 1
functional : 1
*PyTypeObject.tp_bases : 1
"initialized" : 2
"slot" : 1
"tp_bases" : 1
*PyTypeObject.tp_mro : 1
expanded : 1
Resolution : 1
Order : 1
inherited; : 1
fresh : 1
*PyTypeObject.tp_cache : 1
Unused : 1
Internal : 4
*PyTypeObject.tp_subclasses : 1
*PyTypeObject.tp_weaklist : 1
PyTypeObject.tp_del : 1
PyTypeObject.tp_version_tag : 1
PyTypeObject.tp_finalize : 1
tp_finalize(PyObject : 1
finalizing : 10
cycle) : 1
Either : 1
ensuring : 1
finds : 2
sane : 1
non-trivial : 1
finalizer : 1
local_finalize(PyObject : 1
*error_type : 1
*error_value : 1
*error_traceback; : 1
Save : 3
PyErr_Fetch(&error_type : 1
&error_value : 1
&error_traceback); : 1
Restore : 2
saved : 1
PyErr_Restore(error_type : 1
error_value : 1
error_traceback); : 1
thread) : 2
tp_dealloc : 3
Global : 5
Lock : 4
(GIL) : 1
destroys : 1
violate : 1
assumptions : 1
"Py_TPFLAGS_HAVE_FINALIZE" : 1
"Safe : 1
finalization" : 1
442**) : 1
PyTypeObject.tp_vectorcall : 1
"type.__call__" : 1
"__init__" : 1
3.9) : 1
Traditionally : 1
*static* : 1
results : 3
instances) : 1
subinterpreter-specific : 1
*heap-allocated : 1
types* : 2
*heap : 1
closely : 1
"class" : 1
filling : 1
definition: : 2
binaryfunc : 53
nb_add; : 1
nb_subtract; : 1
nb_multiply; : 1
nb_remainder; : 1
nb_divmod; : 1
nb_power; : 1
unaryfunc : 20
nb_negative; : 1
nb_positive; : 1
nb_absolute; : 1
nb_bool; : 1
nb_invert; : 1
nb_lshift; : 1
nb_rshift; : 1
nb_and; : 1
nb_xor; : 1
nb_or; : 1
nb_int; : 1
*nb_reserved; : 1
nb_float; : 1
nb_inplace_add; : 1
nb_inplace_subtract; : 1
nb_inplace_multiply; : 1
nb_inplace_remainder; : 1
nb_inplace_power; : 1
nb_inplace_lshift; : 1
nb_inplace_rshift; : 1
nb_inplace_and; : 1
nb_inplace_xor; : 1
nb_inplace_or; : 1
nb_floor_divide; : 1
nb_true_divide; : 1
nb_inplace_floor_divide; : 1
nb_inplace_true_divide; : 1
nb_index; : 1
nb_matrix_multiply; : 1
nb_inplace_matrix_multiply; : 1
PyNumberMethods; : 1
ternary : 2
operands : 3
previously : 3
"nb_long" : 1
renamed : 2
3.0.1 : 1
PyNumberMethods.nb_add : 1
PyNumberMethods.nb_subtract : 1
PyNumberMethods.nb_multiply : 1
PyNumberMethods.nb_remainder : 1
PyNumberMethods.nb_divmod : 1
PyNumberMethods.nb_power : 1
PyNumberMethods.nb_negative : 1
PyNumberMethods.nb_positive : 1
PyNumberMethods.nb_absolute : 1
PyNumberMethods.nb_bool : 1
PyNumberMethods.nb_invert : 1
PyNumberMethods.nb_lshift : 1
PyNumberMethods.nb_rshift : 1
PyNumberMethods.nb_and : 1
PyNumberMethods.nb_xor : 1
PyNumberMethods.nb_or : 1
PyNumberMethods.nb_int : 1
*PyNumberMethods.nb_reserved : 1
PyNumberMethods.nb_float : 1
PyNumberMethods.nb_inplace_add : 1
PyNumberMethods.nb_inplace_subtract : 1
PyNumberMethods.nb_inplace_multiply : 1
PyNumberMethods.nb_inplace_remainder : 1
PyNumberMethods.nb_inplace_power : 1
PyNumberMethods.nb_inplace_lshift : 1
PyNumberMethods.nb_inplace_rshift : 1
PyNumberMethods.nb_inplace_and : 1
PyNumberMethods.nb_inplace_xor : 1
PyNumberMethods.nb_inplace_or : 1
PyNumberMethods.nb_floor_divide : 1
PyNumberMethods.nb_true_divide : 1
PyNumberMethods.nb_inplace_floor_divide : 1
PyNumberMethods.nb_inplace_true_divide : 1
PyNumberMethods.nb_index : 1
PyNumberMethods.nb_matrix_multiply : 1
PyNumberMethods.nb_inplace_matrix_multiply : 1
members: : 1
lenfunc : 2
PyMappingMethods.mp_length : 1
PyMappingMethods.mp_subscript : 1
objobjargproc : 1
PyMappingMethods.mp_ass_subscript : 1
"PyObject_SetSlice()" : 1
"PyObject_DelSlice()" : 1
deletion : 5
PySequenceMethods.sq_length : 1
PySequenceMethods.sq_concat : 1
"+" : 1
ssizeargfunc : 3
PySequenceMethods.sq_repeat : 1
"*" : 1
PySequenceMethods.sq_item : 1
subscription : 1
indexes : 1
compute : 5
ssizeobjargproc : 1
PySequenceMethods.sq_ass_item : 1
objobjproc : 1
PySequenceMethods.sq_contains : 1
traverses : 1
PySequenceMethods.sq_inplace_concat : 1
operand : 2
fall : 7
augmented : 2
"+=" : 1
PySequenceMethods.sq_inplace_repeat : 1
"*=" : 1
PyBufferProcs.bf_getbuffer : 1
(PyObject : 2
flags); : 1
Except : 2
(3) : 1
steps: : 2
Check : 6
met : 1
view->obj : 6
5 : 1
tree : 4
schemes : 1
used: : 1
Re-export: : 1
Redirect: : 1
redirected : 1
root : 2
react : 1
belongs : 1
"internal" : 2
read- : 1
exposing : 1
dealing : 3
wraps : 3
releasebufferproc : 1
PyBufferProcs.bf_releasebuffer : 1
*view); : 1
track : 2
buffer- : 1
breaking : 1
cycles) : 1
am_await; : 1
am_aiter; : 1
am_anext; : 1
sendfunc : 2
am_send; : 1
PyAsyncMethods; : 1
PyAsyncMethods.am_await : 1
*am_await(PyObject : 1
PyAsyncMethods.am_aiter : 1
*am_aiter(PyObject : 1
"__anext__()" : 2
asynchronous : 3
PyAsyncMethods.am_anext : 1
*am_anext(PyObject : 1
PyAsyncMethods.am_send : 1
PySendResult : 4
am_send(PyObject : 1
**result); : 1
*(*allocfunc)(PyTypeObject : 1
*cls : 1
adequate : 1
suitably : 1
aligned : 1
zeros : 6
"ob_refcnt" : 1
*nitems* : 2
"tp_basicsize : 1
nitems*tp_itemsize" : 1
rounded : 2
"sizeof(void*)"; : 1
memory; : 1
(*destructor)(PyObject*) : 1
(*freefunc)(void*) : 1
*(*newfunc)(PyObject* : 1
(*initproc)(PyObject* : 1
*(*reprfunc)(PyObject*) : 1
*(*getattrfunc)(PyObject : 1
*attr) : 2
(*setattrfunc)(PyObject : 1
*(*getattrofunc)(PyObject : 1
(*setattrofunc)(PyObject : 1
*(*descrgetfunc)(PyObject* : 1
(*descrsetfunc)(PyObject* : 1
(*hashfunc)(PyObject*) : 1
*(*richcmpfunc)(PyObject* : 1
int) : 2
*(*getiterfunc)(PyObject*) : 1
*(*iternextfunc)(PyObject*) : 1
(*lenfunc)(PyObject*) : 1
(*getbufferproc)(PyObject* : 1
Py_buffer* : 1
(*releasebufferproc)(PyObject* : 1
Py_buffer*) : 1
*(*unaryfunc)(PyObject*) : 1
*(*binaryfunc)(PyObject* : 1
(*sendfunc)(PyObject* : 1
PyObject**) : 1
*(*ternaryfunc)(PyObject* : 1
*(*ssizeargfunc)(PyObject* : 1
Py_ssize_t) : 1
(*ssizeobjargproc)(PyObject* : 1
(*objobjproc)(PyObject* : 1
(*objobjargproc)(PyObject* : 1
******** : 2
encounter : 1
demonstrate : 1
tricky : 1
practical : 1
info : 4
tutorial : 1
Types: : 2
Tutorial : 1
Assorted : 1
Topics : 1
*data; : 2
MyObject; : 4
MyObject_Type : 5
PyVarObject_HEAD_INIT(NULL : 6
.tp_name : 5
"mymod.MyObject" : 5
.tp_basicsize : 4
sizeof(MyObject) : 4
.tp_doc : 3
PyDoc_STR("My : 3
objects") : 3
.tp_new : 2
myobj_new : 3
.tp_dealloc : 2
(destructor)myobj_dealloc : 3
.tp_repr : 3
(reprfunc)myobj_repr : 4
(especially : 1
initializer: : 1
tp_name : 1
tp_itemsize : 1
tp_vectorcall_offset : 1
tp_getattr : 1
tp_setattr : 1
tp_as_async : 1
tp_repr : 1
tp_as_number : 1
tp_as_sequence : 1
tp_as_mapping : 1
tp_hash : 1
tp_call : 1
tp_str : 1
tp_getattro : 1
tp_setattro : 1
tp_as_buffer : 1
tp_flags : 1
tp_doc : 1
tp_traverse : 1
tp_clear : 1
tp_richcompare : 1
tp_weaklistoffset : 1
tp_iter : 1
tp_iternext : 1
tp_methods : 1
tp_members : 1
tp_getset : 1
tp_base : 1
tp_dict : 1
tp_descr_get : 1
tp_descr_set : 1
tp_dictoffset : 1
tp_init : 1
tp_alloc : 1
tp_new : 1
weakrefs : 1
dicts : 1
hashing: : 1
*inst_dict; : 1
*weakreflist; : 1
.tp_weaklistoffset : 1
offsetof(MyObject : 2
weakreflist) : 1
.tp_dictoffset : 1
inst_dict) : 1
.tp_flags : 2
.tp_traverse : 1
(traverseproc)myobj_traverse : 1
.tp_clear : 1
(inquiry)myobj_clear : 1
.tp_alloc : 1
PyType_GenericNew : 1
.tp_hash : 1
(hashfunc)myobj_hash : 1
.tp_richcompare : 1
PyBaseObject_Type.tp_richcompare : 1
func) : 1
flag: : 1
PyUnicodeObject : 2
raw; : 1
*extra; : 1
MyStr; : 1
MyStr_Type : 1
"mymod.MyStr" : 1
sizeof(MyStr) : 1
.tp_base : 1
&PyUnicode_Type : 1
PyDoc_STR("my : 1
str") : 1
simplest : 3
instances: : 2
*data[1]; : 1
sizeof(char : 2
*) : 6
.tp_itemsize : 1
Manual : 1
documents : 1
who : 2
companion : 1
principles : 1
Handling : 4
Printing : 2
Raising : 2
Issuing : 2
Querying : 2
Classes : 3
Warning : 4
Categories : 3
Reflection : 4
Codec : 5
Process-wide : 2
Thread : 7
Sub-interpreter : 2
Asynchronous : 2
Notifications : 2
Profiling : 2
Tracing : 2
Advanced : 2
Debugger : 2
Local : 3
Storage : 6
Overview : 3
Allocator : 3
Domains : 2
Raw : 4
Allocators : 5
Customize : 4
3.7.1: : 1
3.7.1 : 1
signatures : 1
**changed** : 1
"PyContext" : 1
"PyContextVar" : 1
"PyContextToken" : 1
e.g.: : 2
3.7.0: : 1
PyContext : 2
*PyContext_New(void); : 2
3.7.1+: : 1
bpo-34762 : 1
"contextvars" : 1
"contextvars.Context" : 1
PyContextVar : 1
"contextvars.ContextVar" : 1
PyContextToken : 1
"contextvars.Token" : 1
PyContext_Type : 1
*context* : 3
PyContextVar_Type : 1
*context : 2
variable* : 1
PyContextToken_Type : 1
token* : 1
Type-check : 2
macros: : 2
PyContext_CheckExact(PyObject : 1
"PyContext_Type" : 1
PyContextVar_CheckExact(PyObject : 1
"PyContextVar_Type" : 1
PyContextToken_CheckExact(PyObject : 1
"PyContextToken_Type" : 1
*PyContext_New(void) : 1
*PyContext_Copy(PyObject : 1
*ctx) : 4
shallow : 2
*ctx* : 6
*PyContext_CopyCurrent(void) : 1
PyContext_Enter(PyObject : 1
PyContext_Exit(PyObject : 1
Deactivate : 1
*PyContextVar_New(const : 1
"ContextVar" : 1
introspection : 1
PyContextVar_Get(PyObject : 1
*var : 3
*default_value : 1
**value) : 1
*default_value* : 1
*var* : 3
*PyContextVar_Set(PyObject : 1
PyContextVar_Reset(PyObject : 1
*token) : 1
"PyContextVar_Set()" : 1
*token* : 1
"Cell" : 1
scopes : 2
outer : 3
de- : 1
referencing : 1
byte-code; : 1
de-referenced : 1
elsewhere : 1
PyCellObject : 1
PyCell_Type : 1
PyCell_Check(ob) : 1
*PyCell_New(PyObject : 1
*PyCell_Get(PyObject : 1
*cell) : 2
*cell* : 7
*PyCell_GET(PyObject : 1
PyCell_Set(PyObject : 1
*cell : 2
non-"NULL"; : 1
PyCell_SET(PyObject : 1
adjusted : 2
safety; : 1
***************************************** : 1
functions; : 4
"PyInitFrozenExtensions()" : 1
"PyMem_SetupDebugHooks()" : 5
"PyObject_SetArenaAllocator()" : 1
Informative : 1
"PyMem_GetAllocator()" : 1
"PyObject_GetArenaAllocator()" : 1
Utilities: : 1
"PyMem_RawCalloc()" : 4
**should : 1
called** : 1
"Py_Initialize()": : 1
============================== : 1
"Py_BytesWarningFlag" : 2
"-bb" : 1
Py_BytesWarningFlag : 1
Issue : 5
Py_DebugFlag : 1
Turn : 1
Py_DontWriteBytecodeFlag : 1
Py_FrozenFlag : 1
Suppress : 1
"_freeze_module" : 1
"frozenmain" : 1
Py_HashRandomizationFlag : 1
secret : 1
Py_IgnoreEnvironmentFlag : 1
"PYTHON*" : 1
Py_InspectFlag : 1
Py_InteractiveFlag : 1
Py_IsolatedFlag : 1
Run : 1
neither : 1
site-packages : 2
Py_LegacyWindowsFSEncodingFlag : 1
"mbcs" : 1
"replace" : 1
"surrogatepass" : 1
529** : 1
Availability: : 8
Py_LegacyWindowsStdioFlag : 1
"WindowsConsoleIO" : 1
Py_NoSiteFlag : 1
Py_NoUserSiteDirectory : 1
Don't : 2
"user : 1
directory" : 1
Py_OptimizeFlag : 1
Py_QuietFlag : 1
Py_UnbufferedStdioFlag : 1
Force : 1
Py_VerboseFlag : 1
=========================================== : 2
Py_Initialize() : 1
("sys.modules") : 2
"sys.argv"; : 1
no-op : 5
first) : 2
"O_TEXT" : 1
"O_BINARY" : 1
non-Python : 2
Runtime : 2
Py_InitializeEx(int : 1
initsigs) : 1
*initsigs* : 2
skips : 1
Py_IsInitialized() : 1
(zero) : 1
After : 4
Py_FinalizeEx() : 1
Undo : 1
initializations : 1
destroy : 3
frees : 1
(flushing : 1
restart : 2
DLL) : 1
unloading : 1
DLL : 1
During : 1
hunt : 1
**Bugs : 1
caveats:** : 1
destruction : 1
random : 1
order; : 1
destructors : 1
("__del__()" : 1
methods) : 1
Dynamically : 1
unloaded : 1
Small : 1
amounts : 1
leak : 1
it) : 3
tied : 1
once; : 1
"cpython._PySys_ClearAuditHooks" : 1
Py_Finalize() : 1
disregards : 1
Py_SetStandardStreamEncoding(const : 1
*errors) : 23
"PyConfig.stdio_encoding" : 1
"PyConfig.stdio_errors" : 1
IO : 2
"str.encode()" : 1
and/or : 2
(depending : 1
settings) : 1
"backslashreplace" : 1
other) : 1
nonzero : 9
initialized) : 3
Py_SetProgramName(const : 1
characters) : 1
run-time : 2
"'python'" : 1
zero-terminated : 2
wchar_* : 5
wchar : 1
*Py_GetProgramName() : 1
storage; : 10
*Py_GetPrefix() : 1
*prefix* : 1
platform-independent : 1
variables; : 2
"'/usr/local/bin/python'" : 2
"'/usr/local'" : 2
**prefix** : 1
"Makefile" : 2
"-- : 2
prefix" : 1
*Py_GetExecPrefix() : 1
*exec-prefix* : 1
platform-*dependent* : 1
exec-prefix : 3
**exec_prefix** : 1
"--exec-prefix" : 1
Background: : 1
differs : 2
dependent : 4
executables : 1
libraries) : 1
"/usr/local/plat" : 2
subtree : 1
"/usr/local" : 2
Generally : 1
speaking : 1
hardware : 1
software : 1
families : 1
Sparc : 1
machines : 3
Solaris : 3
Intel : 2
Linux : 1
Different : 1
major : 3
revisions : 1
Non-Unix : 1
story; : 1
strategies : 2
meaningless : 1
compiled!) : 1
administrators : 1
**mount** : 1
**automount** : 1
*Py_GetProgramFullPath() : 1
executable; : 1
side-effect : 1
deriving : 1
(set : 2
*Py_GetPath() : 1
path; : 1
"':'" : 2
"';'" : 2
startup; : 1
is) : 1
Py_SetPath(const : 1
wchar_t*) : 1
knowledge : 1
components : 2
"Py_GetProgramFullPath()") : 1
completes : 1
*Py_GetVersion() : 1
something : 4
"3.0a5+ : 1
(py3k:63103M : 1
May : 2
12 : 2
2008 : 1
00:53:55) : 1
\n[GCC : 1
4.2.3]" : 1
word : 1
(up : 2
character) : 6
version; : 1
"sys.version" : 3
*Py_GetPlatform() : 1
identifier : 4
formed : 1
"official" : 1
revision : 1
number; : 1
SunOS : 1
5.x : 1
"'sunos5'" : 1
"'darwin'" : 1
"'win'" : 1
"sys.platform" : 1
*Py_GetCopyright() : 1
official : 1
"'Copyright : 1
1991-1995 : 1
Stichting : 1
Mathematisch : 1
Centrum : 1
Amsterdam'" : 1
"sys.copyright" : 1
*Py_GetCompiler() : 1
indication : 1
"[GCC : 1
2.7.2.2]" : 1
*Py_GetBuildInfo() : 1
date : 3
"#67 : 1
Aug : 1
1997 : 1
22:34:28" : 1
PySys_SetArgvEx(int : 1
**argv : 1
updatepath) : 1
"PyConfig.safe_path" : 1
hosting : 1
signalled : 1
*updatepath* : 5
modifies : 1
algorithm: : 1
prepended : 3
name) : 1
prepending : 1
(""."") : 1
CVE-2008-5983.On : 1
3.1.3 : 2
popping : 1
using: : 1
PyRun_SimpleString("import : 1
sys.path.pop(0)\n"); : 1
PySys_SetArgv(int : 1
**python** : 1
started : 1
Py_SetPythonHome(const : 1
*home) : 1
"home" : 2
*Py_GetPythonHome() : 1
============================================ : 1
multi-threaded : 2
*global : 2
lock* : 2
*GIL* : 17
problems : 3
program: : 1
emulate : 1
concurrency : 1
regularly : 2
switch : 4
"sys.setswitchinterval()") : 1
blocking : 4
meantime : 1
keeps : 2
thread-specific : 2
bookkeeping : 1
"PyThreadState": : 1
Releasing : 1
------------------------------------- : 1
structure: : 1
Reacquire : 1
it: : 2
Py_BEGIN_ALLOW_THREADS : 2
Py_END_ALLOW_THREADS : 2
opens : 1
declares : 1
closes : 1
PyThreadState : 11
*_save; : 2
_save : 2
PyEval_SaveThread(); : 1
PyEval_RestoreThread(_save); : 1
work: : 1
protect : 2
releasing : 5
saving : 1
(since : 1
variable) : 1
acquiring : 3
restoring : 1
storing : 3
long- : 1
computations : 1
compression : 1
cryptographic : 1
"zlib" : 1
"hashlib" : 1
compressing : 1
hashing : 1
Non-Python : 1
dedicated : 1
"threading" : 1
showed : 1
management) : 1
aforementioned : 1
library) : 1
register : 1
finally : 3
reset : 8
PyGILState_STATE : 2
gstate; : 1
gstate : 1
PyGILState_Ensure(); : 1
actions : 3
CallSomeFunction(); : 1
evaluate : 1
beyond : 1
PyGILState_Release(gstate); : 1
"PyGILState_*" : 3
"Py_NewInterpreter()") : 1
unsupported : 1
Cautions : 1
--------------------- : 2
face : 1
forks : 1
issued : 2
concrete : 1
impact : 1
"current" : 1
remains : 4
solves : 1
"os.fork()" : 3
afterwards : 1
resets : 1
inform : 1
(non-Python) : 1
facilities : 2
"pthread_atfork()" : 1
accomplish : 1
deadlock : 4
defunct : 1
go : 2
cleaned : 1
Due : 3
originally : 2
"exec()" : 1
High-level : 1
-------------- : 3
commonly : 1
PyInterpreterState : 7
cooperating : 1
open : 2
belong : 2
"interp" : 1
(PyInterpreterState*) : 1
PyEval_InitThreads() : 1
didn't : 1
PyEval_ThreadsInitialized() : 1
holding : 4
threaded : 1
*PyEval_SaveThread() : 1
created) : 2
PyEval_RestoreThread(PyThreadState : 1
*tstate) : 13
Acquire : 3
*tstate* : 14
ensues : 3
"_Py_IsFinalizing()" : 4
"sys.is_finalizing()" : 4
*PyThreadState_Get() : 1
(so : 1
needn't : 2
*PyThreadState_Swap(PyThreadState : 1
Swap : 1
thread-local : 3
sub-interpreters: : 1
PyGILState_Ensure() : 1
ready : 4
matched : 4
thread-related : 1
restored : 1
Release() : 1
acceptable : 1
"handle" : 1
recursive : 4
*cannot* : 1
unique : 6
PyGILState_Release(PyGILState_STATE) : 1
hence : 1
GILState : 2
Every : 1
*PyGILState_GetThisThreadState() : 1
thread-state : 1
auto-thread- : 1
helper/diagnostic : 2
PyGILState_Check() : 1
contexts : 2
knowing : 1
locked : 1
sensitive : 1
semicolon; : 1
"{ : 1
PyEval_SaveThread();" : 1
opening : 2
brace; : 2
"PyEval_RestoreThread(_save); : 1
closing : 2
Py_BLOCK_THREADS : 1
"PyEval_RestoreThread(_save);": : 1
brace : 2
Py_UNBLOCK_THREADS : 1
"_save : 1
PyEval_SaveThread();": : 1
*PyInterpreterState_New() : 1
serialize : 2
"cpython.PyInterpreterState_New" : 1
PyInterpreterState_Clear(PyInterpreterState : 1
*interp) : 8
"cpython.PyInterpreterState_Clear" : 1
PyInterpreterState_Delete(PyInterpreterState : 1
Destroy : 5
*PyThreadState_New(PyInterpreterState : 1
PyThreadState_Clear(PyThreadState : 1
"PyThreadState.on_delete" : 1
happened : 1
PyThreadState_Delete(PyThreadState : 1
PyThreadState_DeleteCurrent(void) : 1
PyFrameObject : 5
*PyThreadState_GetFrame(PyThreadState : 1
uint64_t : 1
PyThreadState_GetID(PyThreadState : 1
*PyThreadState_GetInterpreter(PyThreadState : 1
PyThreadState_EnterTracing(PyThreadState : 1
Suspend : 1
Resume : 2
"PyThreadState_LeaveTracing()" : 1
PyThreadState_LeaveTracing(PyThreadState : 1
suspended : 1
"PyThreadState_EnterTracing()" : 1
"PyEval_SetTrace()" : 3
"PyEval_SetProfile()" : 3
*PyInterpreterState_Get(void) : 1
int64_t : 1
PyInterpreterState_GetID(PyInterpreterState : 1
*PyInterpreterState_GetDict(PyInterpreterState : 1
interpreter-specific : 3
*(*_PyFrameEvalFunction)(PyThreadState : 1
*tstate : 1
_PyInterpreterFrame : 1
generators: : 1
"PyFrameObject*" : 1
"_PyInterpreterFrame*" : 1
_PyFrameEvalFunction : 2
_PyInterpreterState_GetEvalFrameFunc(PyInterpreterState : 1
523** : 2
"Adding : 2
CPython" : 3
_PyInterpreterState_SetEvalFrameFunc(PyInterpreterState : 1
*interp : 1
eval_frame) : 1
*PyThreadState_GetDict() : 1
okay : 1
PyThreadState_SetAsyncExc(unsigned : 1
Asynchronously : 1
*id* : 2
thread; : 1
naive : 1
misuse : 1
states : 6
modified; : 1
pending : 3
any) : 1
PyEval_AcquireThread(PyThreadState : 1
Updated : 2
"Py_END_ALLOW_THREADS()" : 2
PyEval_ReleaseThread(PyThreadState : 1
PyEval_AcquireLock() : 1
PyEval_ReleaseLock() : 1
perhaps : 1
Sub-interpreters : 1
process- : 1
"PyInterpreterState_Main()" : 1
*Py_NewInterpreter() : 1
sub-interpreter : 3
(almost) : 1
totally : 1
(however : 1
descriptors) : 1
(Like : 1
returns; : 1
entry.) : 1
(sub-)interpreters : 3
(shallow) : 1
squirreled : 1
(sub-)interpreter : 2
copy; : 1
extension's : 2
"init" : 1
Bugs : 2
caveats : 3
re- : 1
"Py_Initialize()"; : 1
"initmodule" : 1
*is* : 1
Py_EndInterpreter(PyThreadState : 1
returns.) : 1
haven't : 1
insulation : 1
perfect : 1
"os.close()" : 1
(accidentally : 1
maliciously) : 1
other's : 1
properly; : 1
especially : 1
(static) : 1
(sub-)interpreter; : 1
avoided : 1
(sub-)interpreter's : 1
combining : 1
delicate : 1
bijection : 1
assumption : 1
broken : 2
highly : 2
matching : 4
Furthermore : 1
"ctypes") : 1
========================== : 2
notifications : 2
Py_AddPendingCall(int : 1
(*func)(void*) : 1
Schedule : 1
queued : 2
*eventually* : 1
asynchronously : 1
conditions : 1
met: : 1
*bytecode* : 1
boundary; : 1
(*func* : 1
interrupted : 3
recursively : 2
subinterpreter : 4
scheduled : 3
busy : 1
PyGILState : 1
===================== : 2
attaching : 1
coverage : 1
Python-level : 4
direct : 4
essential : 1
changed; : 1
trace : 7
(*Py_tracefunc)(PyObject : 1
*what* : 12
"PyTrace_CALL" : 2
"PyTrace_EXCEPTION" : 3
"PyTrace_LINE" : 3
"PyTrace_RETURN" : 2
"PyTrace_C_CALL" : 3
"PyTrace_C_EXCEPTION" : 3
"PyTrace_C_RETURN" : 3
"PyTrace_OPCODE" : 3
*what*: : 1
+--------------------------------+------------------------------------------+ : 9
|================================|==========================================| : 1
PyTrace_CALL : 1
"Py_tracefunc" : 8
transfer : 1
PyTrace_EXCEPTION : 1
propagation : 1
unwind : 1
propagates : 1
events; : 1
profiler : 2
PyTrace_LINE : 1
line-number : 2
"f_trace_lines" : 1
*0* : 1
PyTrace_RETURN : 1
PyTrace_C_CALL : 1
PyTrace_C_EXCEPTION : 1
PyTrace_C_RETURN : 1
PyTrace_OPCODE : 1
opcode : 1
default: : 1
"f_trace_opcodes" : 1
*1* : 1
PyEval_SetProfile(Py_tracefunc : 1
func : 2
maintain : 1
monitored : 1
"sys.setprofile()" : 1
PyEval_SetTrace(Py_tracefunc : 1
per-opcode : 1
related : 2
"sys.settrace()" : 1
advanced : 1
*PyInterpreterState_Head() : 1
*PyInterpreterState_Main() : 1
*PyInterpreterState_Next(PyInterpreterState : 1
*interp* : 2
*PyInterpreterState_ThreadHead(PyInterpreterState : 1
*PyThreadState_Next(PyThreadState : 1
(TLS) : 2
TLS : 6
("threading.local") : 1
offered : 1
pthreads : 1
associate : 1
"pythread.h" : 1
behalf : 1
deallocate : 1
Specific : 2
(TSS) : 2
TSS : 5
supersede : 1
"Py_tss_t" : 5
"A : 1
Thread-Local : 1
539**) : 1
Py_tss_t : 2
key's : 2
"Py_tss_NEEDS_INIT" : 3
Py_tss_NEEDS_INIT : 1
Dynamic : 2
Allocation : 1
~~~~~~~~~~~~~~~~~~ : 1
*PyThread_tss_alloc() : 1
PyThread_tss_free(Py_tss_t : 1
Free : 1
locals : 1
unassigned : 1
~~~~~~~ : 1
behaviors : 1
PyThread_tss_is_created(Py_tss_t : 1
PyThread_tss_create(Py_tss_t : 1
repeatedly : 2
PyThread_tss_delete(Py_tss_t : 1
forget : 1
PyThread_tss_set(Py_tss_t : 1
*key : 8
associating : 1
*PyThread_tss_get(Py_tss_t : 1
no-ops : 1
PyThread_create_key() : 1
PyThread_delete_key(int : 1
key) : 3
PyThread_set_key_value(int : 1
*PyThread_get_key_value(int : 1
PyThread_delete_key_value(int : 1
PyThread_ReInitTLS() : 1
Providing : 1
PyCapsule : 1
pointer) : 1
PyCapsule_Destructor : 5
capsule : 22
Defined : 1
(*PyCapsule_Destructor)(PyObject : 1
PyCapsule_CheckExact(PyObject : 1
"PyCapsule" : 2
*PyCapsule_New(void : 1
destructor) : 2
encapsulating : 1
*pointer* : 5
outlive : 2
(Though : 1
permitted : 1
*destructor*.) : 1
*destructor* : 2
"modulename.attributename" : 1
*PyCapsule_GetPointer(PyObject : 1
*capsule : 6
compare : 4
PyCapsule_GetDestructor(PyObject : 1
*capsule) : 3
legal : 3
somewhat : 4
ambiguous; : 3
disambiguate : 16
*PyCapsule_GetContext(PyObject : 1
*PyCapsule_GetName(PyObject : 1
*PyCapsule_Import(const : 1
no_block) : 1
"module.attribute" : 1
capsule's : 1
*no_block* : 1
PyCapsule_IsValid(PyObject : 1
Determines : 1
*capsule* : 5
"PyCapsule_CheckExact()" : 1
compared.) : 1
accessors : 1
(any : 1
"PyCapsule_Get()") : 1
PyCapsule_SetContext(PyObject : 1
*context) : 3
PyCapsule_SetDestructor(PyObject : 1
PyCapsule_SetName(PyObject : 1
PyCapsule_SetPointer(PyObject : 1
*pointer) : 1
protocols: : 1
"callable(*args : 2
**kwargs)" : 2
*tp_call*: : 1
590** : 1
prefer : 1
hard : 2
(rather : 1
"PyObject_Call()") : 1
bears : 1
repeating: : 1
slower : 1
callee : 4
args : 4
kwargs : 3
enabling : 1
*(*vectorcallfunc)(PyObject : 1
nargsf : 4
consisting : 1
*nargsf* : 5
"PY_VECTORCALL_ARGUMENTS_OFFSET" : 3
"PyVectorcall_NARGS()" : 1
*kwnames* : 2
arguments; : 1
(instances : 1
subclass) : 1
PY_VECTORCALL_ARGUMENTS_OFFSET : 1
"args[-1]" : 2
vector : 2
"PyObject_VectorcallMethod()" : 2
"args[0]" : 2
cheaply : 1
allocation) : 1
encouraged : 1
Doing : 1
bound : 6
argument) : 2
"PyObject_Vectorcall()" : 3
provisionally : 1
underscore: : 1
"_PyObject_Vectorcall" : 1
"_Py_TPFLAGS_HAVE_VECTORCALL" : 1
"_PyObject_VectorcallMethod" : 1
"_PyVectorcall_Function" : 1
"_PyObject_CallOneArg" : 1
"_PyObject_CallMethodNoArgs" : 1
"_PyObject_CallMethodOneArg" : 1
"PyObject_VectorcallDict" : 1
"_PyObject_FastCallDict" : 1
aliases : 3
underscored : 1
callees : 1
recursion: : 1
vectorcall: : 1
*Py_EnterRecursiveCall* : 1
*Py_LeaveRecursiveCall* : 1
---------------------- : 1
PyVectorcall_NARGS(size_t : 1
nargsf) : 1
(Py_ssize_t)(nargsf : 1
~PY_VECTORCALL_ARGUMENTS_OFFSET) : 1
"PyVectorcall_NARGS" : 1
PyVectorcall_Function(PyObject : 1
"PyVectorcall_Function(op) : 1
*PyVectorcall_Call(PyObject : 1
*dict) : 3
*callable*'s : 1
specialized : 1
little : 5
pick : 1
fits : 1
summarizes : 1
+--------------------------------------------+--------------------+----------------------+-----------------+ : 14
|============================================|====================|======================|=================| : 1
"PyObject : 8
dict/"NULL" : 2
"PyObject_CallOneArg()" : 1
tuple/"NULL" : 1
obj : 4
"char*" : 1
variadic : 2
"PyObject_CallMethodNoArgs()" : 1
"PyObject_CallMethodOneArg()" : 1
"PyObject_VectorcallDict()" : 1
arg : 1
*PyObject_Call(PyObject : 1
*kwargs) : 1
*NULL*; : 1
expression: : 5
*PyObject_CallNoArgs(PyObject : 1
*callable) : 1
*PyObject_CallOneArg(PyObject : 1
*PyObject_CallObject(PyObject : 1
"callable(*args)" : 2
*PyObject_CallFunction(PyObject : 1
*PyObject_CallMethod(PyObject : 1
"obj.name(arg1 : 1
arg2 : 2
*PyObject_CallFunctionObjArgs(PyObject : 1
"callable(arg1 : 1
*PyObject_CallMethodObjArgs(PyObject : 1
*PyObject_CallMethodNoArgs(PyObject : 1
*PyObject_CallMethodOneArg(PyObject : 1
*PyObject_Vectorcall(PyObject : 1
*PyObject_VectorcallDict(PyObject : 1
*kwdict) : 1
*kwdict* : 1
Regardless : 1
*PyObject_VectorcallMethod(PyObject : 1
*args[0]* : 2
*args[1]* : 1
"Py_TPFLAGS_METHOD_DESCRIPTOR" : 1
PyCallable_Check(PyObject : 1
Determine : 3
=============================== : 1
*by : 1
value* : 1
dereferencing : 1
throughout : 1
Py_complex : 13
portion : 1
real; : 1
imag; : 1
Py_complex; : 1
_Py_c_sum(Py_complex : 1
right) : 3
_Py_c_diff(Py_complex : 1
_Py_c_neg(Py_complex : 1
num) : 1
*num* : 3
_Py_c_prod(Py_complex : 1
product : 1
_Py_c_quot(Py_complex : 1
dividend : 1
divisor) : 1
quotient : 1
*divisor* : 1
"errno" : 6
"EDOM" : 2
_Py_c_pow(Py_complex : 1
num : 1
exp) : 1
exponentiation : 1
*exp* : 2
================================= : 1
PyComplexObject : 1
PyComplex_Type : 1
"complex" : 1
PyComplex_Check(PyObject : 1
"PyComplexObject" : 5
PyComplex_CheckExact(PyObject : 1
*PyComplex_FromCComplex(Py_complex : 1
v) : 10
*PyComplex_FromDoubles(double : 1
imag) : 1
*real* : 1
*imag* : 1
PyComplex_RealAsDouble(PyObject : 1
PyComplex_ImagAsDouble(PyObject : 1
imaginary : 1
PyComplex_AsCComplex(PyObject : 1
"__complex__()" : 2
"__float__()" : 4
"__index__()" : 16
PyFloatObject : 1
PyFloat_Type : 1
"float" : 1
PyFloat_Check(PyObject : 1
"PyFloatObject" : 6
PyFloat_CheckExact(PyObject : 1
*PyFloat_FromString(PyObject : 1
*PyFloat_FromDouble(double : 1
PyFloat_AsDouble(PyObject : 1
*pyfloat) : 2
*pyfloat* : 4
PyFloat_AS_DOUBLE(PyObject : 1
*PyFloat_GetInfo(void) : 1
structseq : 1
It's : 1
"float.h" : 1
PyFloat_GetMax() : 1
representable : 1
*DBL_MAX* : 1
PyFloat_GetMin() : 1
*DBL_MIN* : 1
pack : 2
unpack : 4
platform- : 1
suffix : 2
(2 : 1
8) : 1
IEEE : 12
754 : 11
2-byte : 1
identical : 3
binary16 : 3
half-precision : 3
4-byte : 1
(32-bit) : 1
binary32 : 3
8-byte : 1
binary64 : 3
packing : 1
INFs : 1
NaNs : 1
platform) : 1
INF : 1
NaN : 3
non-IEEE : 4
packed; : 1
smaller : 3
unpacked : 2
What : 2
partly : 1
accidental : 1
(alas) : 1
*le* : 2
(exponent : 4
"p+1" : 2
"p+3" : 2
"p+6" : 2
"p+7") : 2
big-endian : 2
*p*) : 2
"PY_BIG_ENDIAN" : 2
endian: : 2
OK : 1
infinity : 2
"-0.0" : 1
"+0.0" : 1
PyFloat_Pack2(double : 1
x : 3
le) : 6
PyFloat_Pack4(double : 1
PyFloat_Pack8(double : 1
big- : 1
PyFloat_Unpack2(const : 1
PyFloat_Unpack4(const : 1
PyFloat_Unpack8(const : 1
********* : 1
tasks : 1
ranging : 1
helping : 1
portable : 1
constructing : 1
Registry : 2
********** : 1
*PyEval_GetBuiltins(void) : 1
builtins : 1
*PyEval_GetLocals(void) : 1
*PyEval_GetGlobals(void) : 1
*PyEval_GetFrame(void) : 1
state's : 1
*PyEval_GetFuncName(PyObject : 1
*func) : 3
*func*s : 1
*PyEval_GetFuncDesc(PyObject : 1
"()" : 1
constructor" : 1
instance" : 1
object" : 1
Concatenated : 1
PyIter_Check(PyObject : 1
PyAIter_Check(PyObject : 1
"AsyncIterator" : 3
*PyIter_Next(PyObject : 1
this) : 1
retrieving : 1
*iterator : 1
PyObject_GetIter(obj); : 1
(iterator : 1
propagate : 2
((item : 1
PyIter_Next(iterator))) : 1
Py_DECREF(iterator); : 1
(PyErr_Occurred()) : 1
enum : 1
PyIter_Send(PyObject : 1
*iter : 1
**presult) : 1
Sends : 1
*iter* : 1
Returns: : 1
"PYGEN_RETURN" : 1
*presult* : 3
"PYGEN_NEXT" : 1
Yielded : 1
"PYGEN_ERROR" : 1
"datetime" : 1
"datetime.h" : 1
"Python.h") : 1
"PyDateTime_IMPORT" : 1
initialisation : 1
puts : 1
"PyDateTimeAPI" : 1
UTC : 2
singleton: : 1
*PyDateTime_TimeZone_UTC : 1
zone : 1
"datetime.timezone.utc" : 1
PyDate_Check(PyObject : 1
"PyDateTime_DateType" : 3
PyDate_CheckExact(PyObject : 1
PyDateTime_Check(PyObject : 1
"PyDateTime_DateTimeType" : 3
PyDateTime_CheckExact(PyObject : 1
PyTime_Check(PyObject : 1
"PyDateTime_TimeType" : 3
PyTime_CheckExact(PyObject : 1
PyDelta_Check(PyObject : 1
"PyDateTime_DeltaType" : 3
PyDelta_CheckExact(PyObject : 1
PyTZInfo_Check(PyObject : 1
"PyDateTime_TZInfoType" : 3
PyTZInfo_CheckExact(PyObject : 1
*PyDate_FromDate(int : 1
year : 7
month : 7
day) : 1
"datetime.date" : 2
day : 6
*PyDateTime_FromDateAndTime(int : 1
hour : 10
minute : 10
usecond) : 2
"datetime.datetime" : 3
microsecond : 6
*PyDateTime_FromDateAndTimeAndFold(int : 1
usecond : 2
fold) : 2
fold : 4
*PyTime_FromTime(int : 1
"datetime.time" : 2
*PyTime_FromTimeAndFold(int : 1
*PyDelta_FromDSU(int : 1
days : 3
seconds : 4
useconds) : 1
"datetime.timedelta" : 2
microseconds : 3
Normalization : 1
lie : 1
ranges : 1
*PyTimeZone_FromOffset(PyDateTime_DeltaType : 1
*offset) : 1
"datetime.timezone" : 2
*offset* : 2
*PyTimeZone_FromOffsetAndName(PyDateTime_DeltaType : 1
*offset : 1
PyUnicode : 2
tzname : 1
"PyDateTime_Date" : 1
"PyDateTime_DateTime") : 1
checked: : 4
PyDateTime_GET_YEAR(PyDateTime_Date : 1
PyDateTime_GET_MONTH(PyDateTime_Date : 1
PyDateTime_GET_DAY(PyDateTime_Date : 1
31 : 1
datetime : 1
"PyDateTime_DateTime" : 1
PyDateTime_DATE_GET_HOUR(PyDateTime_DateTime : 1
23 : 2
PyDateTime_DATE_GET_MINUTE(PyDateTime_DateTime : 1
59 : 4
PyDateTime_DATE_GET_SECOND(PyDateTime_DateTime : 1
PyDateTime_DATE_GET_MICROSECOND(PyDateTime_DateTime : 1
999999 : 3
PyDateTime_DATE_GET_FOLD(PyDateTime_DateTime : 1
*PyDateTime_DATE_GET_TZINFO(PyDateTime_DateTime : 1
tzinfo : 2
"PyDateTime_Time" : 1
PyDateTime_TIME_GET_HOUR(PyDateTime_Time : 1
PyDateTime_TIME_GET_MINUTE(PyDateTime_Time : 1
PyDateTime_TIME_GET_SECOND(PyDateTime_Time : 1
PyDateTime_TIME_GET_MICROSECOND(PyDateTime_Time : 1
PyDateTime_TIME_GET_FOLD(PyDateTime_Time : 1
*PyDateTime_TIME_GET_TZINFO(PyDateTime_Time : 1
delta : 1
"PyDateTime_Delta" : 1
PyDateTime_DELTA_GET_DAYS(PyDateTime_Delta : 1
-999999999 : 1
999999999 : 1
PyDateTime_DELTA_GET_SECONDS(PyDateTime_Delta : 1
86399 : 1
PyDateTime_DELTA_GET_MICROSECONDS(PyDateTime_Delta : 1
DB : 1
*PyDateTime_FromTimestamp(PyObject : 1
"datetime.datetime.fromtimestamp()" : 1
*PyDate_FromTimestamp(PyObject : 1
"datetime.date.fromtimestamp()" : 1
Booleans : 1
booleans : 2
PyBool_Check(PyObject : 1
*Py_False : 1
*Py_True : 1
Py_RETURN_FALSE : 1
Py_RETURN_TRUE : 1
*PyBool_FromLong(long : 1
What's : 1
PyFrame_Type : 1
"types.FrameType" : 1
"<frameobject.h>" : 2
PyFrame_Check(PyObject : 1
*PyFrame_GetBack(PyFrameObject : 1
*frame) : 9
*PyFrame_GetBuiltins(PyFrameObject : 1
*frame*'s : 4
"f_builtins" : 1
PyCodeObject : 5
*PyFrame_GetCode(PyFrameObject : 1
(frame : 1
*PyFrame_GetGenerator(PyFrameObject : 1
async : 1
*PyFrame_GetGlobals(PyFrameObject : 1
"f_globals" : 1
PyFrame_GetLasti(PyFrameObject : 1
"f_lasti" : 1
"frame.f_lasti" : 1
*PyFrame_GetLocals(PyFrameObject : 1
"f_locals" : 1
PyFrame_GetLineNumber(PyFrameObject : 1
*Py_NotImplemented : 1
"NotImplemented" : 1
Py_RETURN_NOTIMPLEMENTED : 1
NotImplemented : 1
PyObject_Print(PyObject : 1
PyObject_HasAttr(PyObject : 1
*attr_name) : 6
*attr_name* : 8
"hasattr(o : 2
attr_name)" : 2
"__getattr__()" : 2
"__getattribute__()" : 2
PyObject_HasAttrString(PyObject : 1
*PyObject_GetAttr(PyObject : 1
"o.attr_name" : 2
*PyObject_GetAttrString(PyObject : 1
*PyObject_GenericGetAttr(PyObject : 1
MRO : 2
present) : 8
outlined : 1
Descriptors : 1
preference : 2
non-data : 1
PyObject_SetAttr(PyObject : 1
*attr_name : 2
"o.attr_name : 2
v" : 6
favour : 3
"PyObject_DelAttr()" : 1
plans : 1
PyObject_SetAttrString(PyObject : 1
"PyObject_DelAttrString()" : 1
PyObject_GenericSetAttr(PyObject : 1
deleter : 1
PyObject_DelAttr(PyObject : 1
Delete : 4
"del : 7
o.attr_name" : 2
PyObject_DelAttrString(PyObject : 1
*PyObject_GenericGetDict(PyObject : 1
PyObject_GenericSetDict(PyObject : 1
**_PyObject_GetDictPtr(PyObject : 1
*PyObject_RichCompare(PyObject : 1
opid) : 2
Compare : 4
*opid* : 4
op : 2
"op" : 2
PyObject_RichCompareBool(PyObject : 1
*PyObject_Format(PyObject : 1
*format_spec) : 1
*format_spec* : 2
"format(obj : 1
format_spec)" : 1
"format(obj)" : 1
*PyObject_Repr(PyObject : 1
Compute : 4
"repr(o)" : 1
Called : 4
*PyObject_ASCII(PyObject : 1
escape : 1
non-ASCII : 2
"\x" : 1
"\u" : 2
"\U" : 1
escapes : 4
generates : 1
"ascii()" : 2
*PyObject_Str(PyObject : 1
"str(o)" : 1
*PyObject_Bytes(PyObject : 1
"bytes(o)" : 2
TypeError : 1
zero-initialized : 1
PyObject_IsSubclass(PyObject : 1
*derived : 1
*cls) : 2
*derived* : 2
*cls* : 13
3119** : 2
indirect : 1
"cls.__mro__" : 1
"__bases__" : 2
PyObject_IsInstance(PyObject : 1
*inst : 1
*inst* : 3
"__instancecheck__()" : 1
"__class__" : 1
PyObject_Hash(PyObject : 1
"hash(o)" : 1
PyObject_HashNotImplemented(PyObject : 1
"type(o)" : 2
*hashable* : 1
treatment : 2
hashable : 1
PyObject_IsTrue(PyObject : 1
"not : 2
o" : 5
PyObject_Not(PyObject : 1
*PyObject_Type(PyObject : 1
increments : 1
really : 1
PyObject_TypeCheck(PyObject : 1
PyObject_Size(PyObject : 1
PyObject_Length(PyObject : 1
"len(o)" : 3
PyObject_LengthHint(PyObject : 1
defaultvalue) : 1
estimated : 1
estimate : 1
"__length_hint__()" : 1
"operator.length_hint(o : 1
defaultvalue)" : 1
*PyObject_GetItem(PyObject : 1
"o[key]" : 2
PyObject_SetItem(PyObject : 1
"o[key] : 3
*does : 6
not* : 6
PyObject_DelItem(PyObject : 1
o[key]" : 3
*PyObject_Dir(PyObject : 1
"dir(o)" : 1
empty) : 1
"dir()" : 1
locals; : 1
*PyObject_GetIter(PyObject : 1
"iter(o)" : 1
iterated : 2
*PyObject_GetAIter(PyObject : 1
"aiter(o)" : 1
Takes : 1
"AsyncIterable" : 1
understand : 3
basics : 1
POSIX : 1
variable: : 1
(per : 1
supposed : 2
(exception: : 1
"PyArg_*" : 1
failure) : 1
Concretely : 1
pointers: : 1
exception's : 3
non-set : 1
forbidden : 1
indicator; : 1
cleaning : 1
allocations); : 1
mysterious : 1
caught : 2
propagating) : 2
stopped : 1
PyErr_Clear() : 1
PyErr_PrintEx(int : 1
set_sys_last_vars) : 1
**Unless** : 1
**only** : 1
*set_sys_last_vars* : 1
"sys.last_type" : 1
"sys.last_value" : 1
"sys.last_traceback" : 1
PyErr_Print() : 1
Alias : 1
"PyErr_PrintEx(1)" : 1
PyErr_WriteUnraisable(PyObject : 1
"sys.unraisablehook()" : 1
prints : 1
identifies : 1
unraisable : 1
repr : 1
"return" : 1
PyErr_SetString(PyObject : 1
message; : 2
PyErr_SetObject(PyObject : 1
lets : 1
"value" : 2
*PyErr_Format(PyObject : 1
*exception : 3
NULL.** : 16
*exception* : 1
ASCII-encoded : 4
*PyErr_FormatV(PyObject : 1
"va_list" : 1
PyErr_SetNone(PyObject : 1
shorthand : 4
"PyErr_SetObject(type : 2
Py_None)" : 1
PyErr_BadArgument() : 1
"PyErr_SetString(PyExc_TypeError : 1
message)" : 2
*message* : 4
*PyErr_NoMemory() : 1
"PyErr_SetNone(PyExc_MemoryError)"; : 1
"return : 2
PyErr_NoMemory();" : 1
*PyErr_SetFromErrno(PyObject : 1
constructs : 2
(gotten : 2
"strerror()") : 1
object)" : 2
"EINTR" : 1
PyErr_SetFromErrno(type);" : 1
*PyErr_SetFromErrnoWithFilenameObject(PyObject : 1
*filenameObject) : 1
*filenameObject* : 1
"OSError" : 2
"filename" : 1
*PyErr_SetFromErrnoWithFilenameObjects(PyObject : 1
*filenameObject : 1
*filenameObject2) : 1
*PyErr_SetFromErrnoWithFilename(PyObject : 1
*PyErr_SetFromWindowsErr(int : 1
ierr) : 2
"WindowsError" : 1
*ierr* : 3
"GetLastError()" : 2
Win32 : 2
"FormatMessage()" : 1
"FormatMessage()") : 1
"PyErr_SetObject(PyExc_WindowsError : 1
*PyErr_SetExcFromWindowsErr(PyObject : 1
*PyErr_SetFromWindowsErrWithFilename(int : 1
ierr : 4
"PyErr_SetFromWindowsErrWithFilenameObject()" : 2
("os.fsdecode()") : 1
*PyErr_SetExcFromWindowsErrWithFilenameObject(PyObject : 1
*PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject : 1
*filename2) : 1
*PyErr_SetExcFromWindowsErrWithFilename(PyObject : 1
*PyErr_SetImportError(PyObject : 1
*msg : 2
"ImportError" : 3
*msg* : 1
"ImportError"'s : 1
respective : 1
"path" : 1
*PyErr_SetImportErrorSubclass(PyObject : 1
Much : 1
PyErr_SyntaxLocationObject(PyObject : 1
lineno : 4
col_offset) : 2
subsystem : 1
think : 2
PyErr_SyntaxLocationEx(const : 1
"PyErr_SyntaxLocationObject()" : 1
PyErr_SyntaxLocation(const : 1
lineno) : 1
*col_offset* : 1
PyErr_BadInternalCall() : 1
"PyErr_SetString(PyExc_SystemError : 1
mirror : 1
*sys.stderr*; : 1
turned : 1
(It : 1
intentional.) : 1
PyErr_WarnEx(PyObject : 1
*category : 4
*message : 3
stack_level) : 1
*category* : 2
category : 2
*stack_level* : 2
frames; : 1
forth : 1
categories : 4
"PyExc_Warning"; : 1
"PyExc_Exception"; : 1
enumerated : 1
PyErr_WarnExplicitObject(PyObject : 1
*registry) : 2
"warnings.warn_explicit()"; : 1
*registry* : 1
PyErr_WarnExplicit(PyObject : 1
"PyErr_WarnExplicitObject()" : 1
PyErr_WarnFormat(PyObject : 1
stack_level : 2
PyErr_ResourceWarning(PyObject : 1
*source : 1
"ResourceWarning" : 2
*source* : 1
"warnings.WarningMessage()" : 1
*PyErr_Occurred() : 1
"PyErr_Set*" : 1
"PyErr_Restore()") : 1
exception.) : 1
PyErr_ExceptionMatches(PyObject : 1
"PyErr_GivenExceptionMatches(PyErr_Occurred() : 1
exc)" : 1
set; : 1
violation : 1
PyErr_GivenExceptionMatches(PyObject : 1
*given : 1
*given* : 2
subtuples) : 1
PyErr_Fetch(PyObject : 1
**ptype : 2
**pvalue : 2
**ptraceback) : 2
catch : 5
*traceback; : 1
PyErr_Fetch(&type : 1
&value : 1
&traceback); : 1
PyErr_Restore(type : 1
traceback); : 1
PyErr_Restore(PyObject : 1
*traceback) : 2
(Violating : 1
later.) : 1
(If : 1
warned : 1
you.) : 1
PyErr_NormalizeException(PyObject : 1
**exc : 1
**val : 1
**tb) : 1
circumstances : 2
"unnormalized" : 1
"*exc" : 1
"*val" : 1
instantiate : 1
delayed : 1
normalization : 1
implicitly : 2
"__traceback__" : 2
snippet : 1
needed: : 1
(tb : 1
PyException_SetTraceback(val : 1
tb); : 1
*PyErr_GetHandledException(void) : 1
"sys.exception()" : 2
*already : 4
caught* : 4
freshly : 4
PyErr_SetHandledException(PyObject : 1
PyErr_GetExcInfo(PyObject : 1
backwards : 2
Prefer : 2
PyErr_SetExcInfo(PyObject : 1
"traceback" : 1
PyErr_CheckSignals() : 1
sent : 1
processes : 1
"signal" : 1
attempts : 1
yet: : 1
invocation) : 1
non-main : 1
long-running : 1
interruptible : 1
pressing : 1
Ctrl-C) : 1
"SIGINT" : 2
"KeyboardInterrupt" : 2
PyErr_SetInterrupt() : 1
Simulate : 2
arriving : 2
"PyErr_SetInterruptEx(SIGINT)" : 1
async-signal-safe : 2
PyErr_SetInterruptEx(int : 1
signum) : 1
interruption : 1
presses : 1
Ctrl-C : 1
interrupt : 1
operation) : 1
"signal.SIG_DFL" : 1
"signal.SIG_IGN") : 1
*signum* : 1
PySignal_SetWakeupFd(int : 1
fd) : 1
received : 1
non-blocking : 1
feature; : 1
"signal.set_wakeup_fd()" : 1
socket : 1
*PyErr_NewException(const : 1
*base : 2
"module.classname" : 1
*dict* : 2
(accessible : 1
"PyExc_Exception") : 1
dot) : 2
(after : 2
*PyErr_NewExceptionWithDoc(const : 1
*doc : 1
docstring: : 1
*doc* : 1
*PyException_GetTraceback(PyObject : 1
*ex) : 3
PyException_SetTraceback(PyObject : 1
*ex : 3
*tb) : 1
*tb* : 1
*PyException_GetContext(PyObject : 1
(another : 1
*ex* : 1
raised) : 2
"__context__" : 1
PyException_SetContext(PyObject : 1
*PyException_GetCause(PyObject : 1
"raise : 1
...") : 1
"__cause__" : 1
PyException_SetCause(PyObject : 1
*cause) : 1
*cause* : 3
"__suppress_context__" : 1
*PyUnicodeDecodeError_Create(const : 1
*reason) : 4
"UnicodeDecodeError" : 3
*reason* : 5
*PyUnicodeDecodeError_GetEncoding(PyObject : 1
*PyUnicodeEncodeError_GetEncoding(PyObject : 1
*PyUnicodeDecodeError_GetObject(PyObject : 1
*PyUnicodeEncodeError_GetObject(PyObject : 1
*PyUnicodeTranslateError_GetObject(PyObject : 1
PyUnicodeDecodeError_GetStart(PyObject : 1
*exc : 15
*start) : 3
PyUnicodeEncodeError_GetStart(PyObject : 1
PyUnicodeTranslateError_GetStart(PyObject : 1
**start* : 1
PyUnicodeDecodeError_SetStart(PyObject : 1
PyUnicodeEncodeError_SetStart(PyObject : 1
PyUnicodeTranslateError_SetStart(PyObject : 1
PyUnicodeDecodeError_GetEnd(PyObject : 1
*end) : 3
PyUnicodeEncodeError_GetEnd(PyObject : 1
PyUnicodeTranslateError_GetEnd(PyObject : 1
**end* : 1
PyUnicodeDecodeError_SetEnd(PyObject : 1
end) : 5
PyUnicodeEncodeError_SetEnd(PyObject : 1
PyUnicodeTranslateError_SetEnd(PyObject : 1
*PyUnicodeDecodeError_GetReason(PyObject : 1
*PyUnicodeEncodeError_GetReason(PyObject : 1
*PyUnicodeTranslateError_GetReason(PyObject : 1
PyUnicodeDecodeError_SetReason(PyObject : 1
PyUnicodeEncodeError_SetReason(PyObject : 1
PyUnicodeTranslateError_SetReason(PyObject : 1
tracks : 1
recursion : 6
depth : 2
automatically) : 1
implementations : 1
Py_EnterRecursiveCall(const : 1
*where) : 1
Marks : 1
overflowed : 1
"RecursionError" : 3
*where* : 1
"" : 1
check"" : 1
concatenated : 1
Py_LeaveRecursiveCall(void) : 1
Ends : 2
*successful* : 1
protecting : 1
facilitate : 1
Effectively : 1
"reprlib.recursive_repr()" : 1
Py_ReprEnter(PyObject : 1
"dict" : 3
"{...}" : 1
"[...]" : 1
Py_ReprLeave(PyObject : 1
"PyExc_" : 2
PyObject*; : 2
completeness : 2
variables: : 2
+-------------------------------------------+-----------------------------------+------------+ : 54
Notes : 3
|===========================================|===================================|============| : 1
"BaseException" : 1
"ArithmeticError" : 1
"AssertionError" : 1
"BlockingIOError" : 1
"BrokenPipeError" : 1
"BufferError" : 1
"ChildProcessError" : 1
"ConnectionAbortedError" : 1
"ConnectionError" : 1
"ConnectionRefusedError" : 1
"ConnectionResetError" : 1
"FileExistsError" : 1
"FileNotFoundError" : 1
"FloatingPointError" : 1
"GeneratorExit" : 1
"IndentationError" : 1
"InterruptedError" : 1
"IsADirectoryError" : 1
"LookupError" : 4
"ModuleNotFoundError" : 1
"NameError" : 1
"NotADirectoryError" : 1
"NotImplementedError" : 1
"PermissionError" : 1
"ProcessLookupError" : 1
"ReferenceError" : 1
"RuntimeError" : 1
"StopAsyncIteration" : 1
"TabError" : 1
"TimeoutError" : 1
"UnboundLocalError" : 1
"UnicodeTranslateError" : 2
"ZeroDivisionError" : 1
3151** : 1
"PyExc_OSError": : 1
+---------------------------------------+------------+ : 4
|=======================================|============| : 1
Notes: : 2
Windows; : 1
"MS_WINDOWS" : 1
=========================== : 2
+--------------------------------------------+-----------------------------------+------------+ : 12
|============================================|===================================|============| : 1
"Warning" : 1
[3] : 2
"DeprecationWarning" : 1
"FutureWarning" : 1
"ImportWarning" : 1
"PendingDeprecationWarning" : 1
"SyntaxWarning" : 1
"UnicodeWarning" : 1
"UserWarning" : 1
bind : 2
"PyMethod_New(func : 1
class)" : 1
PyInstanceMethod_Type : 1
PyInstanceMethod_Check(PyObject : 1
"PyInstanceMethod_Type") : 1
*PyInstanceMethod_New(PyObject : 1
*PyInstanceMethod_Function(PyObject : 1
*im) : 2
*im* : 1
*PyInstanceMethod_GET_FUNCTION(PyObject : 1
"PyInstanceMethod_Function()" : 1
Unbound : 1
PyMethod_Type : 1
"types.MethodType" : 1
PyMethod_Check(PyObject : 1
"PyMethod_Type") : 1
*PyMethod_New(PyObject : 1
*PyMethod_Function(PyObject : 1
*meth* : 2
*PyMethod_GET_FUNCTION(PyObject : 1
"PyMethod_Function()" : 1
*PyMethod_Self(PyObject : 1
*PyMethod_GET_SELF(PyObject : 1
"PyMethod_Self()" : 1
PyCode_Type : 1
"code" : 2
PyCode_Check(PyObject : 1
*co* : 2
PyCode_GetNumFree(PyCodeObject : 1
*PyCode_New(int : 1
kwonlyargcount : 2
nlocals : 2
stacksize : 2
*consts : 2
*names : 2
*varnames : 2
*freevars : 2
*cellvars : 2
firstlineno : 2
*linetable : 2
*exceptiontable) : 2
dummy : 1
"PyCode_NewEmpty()" : 1
"PyCode_New()" : 2
precise : 1
inter-dependent : 1
incorrect : 1
VM : 1
extreme : 1
"exceptiontable" : 2
*PyCode_NewWithPosOnlyArgs(int : 1
posonlyargcount : 1
"posonlyargcount" : 1
"PyCode_New" : 1
*PyCode_NewEmpty(const : 1
*funcname : 1
firstlineno) : 1
PyCode_Addr2Line(PyCodeObject : 1
byte_offset) : 1
instruction : 2
"byte_offset" : 2
iterating : 4
626 : 1
PyCode_Addr2Location(PyObject : 1
byte_offset : 1
*start_line : 1
*start_column : 1
*end_line : 1
*end_column) : 1
*PyCode_GetCode(PyCodeObject : 1
"getattr(co : 4
'co_code')" : 1
"PyBytesObject" : 2
on-demand : 1
primary : 1
debuggers : 1
profilers : 1
*PyCode_GetVarnames(PyCodeObject : 1
'co_varnames')" : 1
*PyCode_GetCellvars(PyCodeObject : 1
'co_cellvars')" : 1
*PyCode_GetFreevars(PyCodeObject : 1
'co_freevars')" : 1
PyMapping_Check(PyObject : 1
PyMapping_Size(PyObject : 1
PyMapping_Length(PyObject : 1
*PyMapping_GetItemString(PyObject : 1
PyMapping_SetItemString(PyObject : 1
PyMapping_DelItem(PyObject : 1
PyMapping_DelItemString(PyObject : 1
PyMapping_HasKey(PyObject : 1
"key : 3
PyMapping_HasKeyString(PyObject : 1
*PyMapping_Keys(PyObject : 1
*PyMapping_Values(PyObject : 1
*PyMapping_Items(PyObject : 1
key-value : 7
PyCodec_Register(PyObject : 1
*search_function) : 2
"encodings" : 2
PyCodec_Unregister(PyObject : 1
Unregister : 1
registry's : 1
PyCodec_KnownEncoding(const : 1
*encoding) : 3
*PyCodec_Encode(PyObject : 1
encoder : 6
*PyCodec_Decode(PyObject : 1
decoder : 7
lower-case : 1
case-insensitive : 1
*PyCodec_Encoder(const : 1
*PyCodec_Decoder(const : 1
*PyCodec_IncrementalEncoder(const : 1
"IncrementalEncoder" : 1
*PyCodec_IncrementalDecoder(const : 1
"IncrementalDecoder" : 1
*PyCodec_StreamReader(const : 1
*stream : 2
"StreamReader" : 1
*PyCodec_StreamWriter(const : 1
"StreamWriter" : 1
================================================ : 1
PyCodec_RegisterError(const : 1
*error) : 1
characters/undecodable : 1
encode/decode : 1
information) : 1
two-item : 1
encoding/decoding : 1
resumed : 1
*PyCodec_LookupError(const : 1
Lookup : 1
"strict" : 15
*PyCodec_StrictErrors(PyObject : 1
*PyCodec_IgnoreErrors(PyObject : 1
skipping : 1
faulty : 1
*PyCodec_ReplaceErrors(PyObject : 1
Replace : 5
"?" : 1
"U+FFFD" : 1
*PyCodec_XMLCharRefReplaceErrors(PyObject : 1
XML : 1
*PyCodec_BackslashReplaceErrors(PyObject : 1
backslash : 1
("\x" : 1
"\U") : 1
*PyCodec_NameReplaceErrors(PyObject : 1
"\N{...}" : 1
PyDictObject : 1
PyDict_Type : 1
PyDict_Check(PyObject : 1
PyDict_CheckExact(PyObject : 1
*PyDict_New() : 1
*PyDictProxy_New(PyObject : 1
*mapping) : 2
"types.MappingProxyType" : 1
enforces : 1
non-dynamic : 1
PyDict_Clear(PyObject : 1
pairs : 12
PyDict_Contains(PyObject : 1
p" : 1
*PyDict_Copy(PyObject : 1
PyDict_SetItem(PyObject : 1
*val) : 2
*hashable*; : 2
PyDict_SetItemString(PyObject : 1
"PyUnicode_FromString(key)" : 1
PyDict_DelItem(PyObject : 1
PyDict_DelItemString(PyObject : 1
*PyDict_GetItem(PyObject : 1
*without* : 1
"__hash__()" : 2
"__eq__()" : 2
*PyDict_GetItemWithError(PyObject : 1
Variant : 1
**with** : 1
**without** : 1
*PyDict_GetItemString(PyObject : 1
*PyDict_SetDefault(PyObject : 1
*defaultobj) : 1
"dict.setdefault()" : 1
*defaultobj* : 2
evaluating : 1
independently : 1
insertion : 1
*PyDict_Items(PyObject : 1
"PyListObject" : 4
*PyDict_Keys(PyObject : 1
*PyDict_Values(PyObject : 1
PyDict_Size(PyObject : 1
"len(p)" : 1
PyDict_Next(PyObject : 1
*ppos : 1
**pkey : 1
**pvalue) : 1
Iterate : 2
*ppos* : 2
iteration; : 1
*pkey* : 1
*pvalue* : 1
altered : 2
offsets : 2
sparse : 1
*value; : 2
(PyDict_Next(self->dict : 2
&pos : 2
&key : 2
&value)) : 2
values.. : 1
mutated : 1
iterate : 1
PyLong_AsLong(value); : 1
PyLong_FromLong(i : 1
1); : 1
(o : 1
(PyDict_SetItem(self->dict : 1
o) : 1
Py_DECREF(o); : 2
PyDict_Merge(PyObject : 1
*b : 1
override) : 2
*override* : 2
PyDict_Update(PyObject : 1
"PyDict_Merge(a : 1
b : 1
1)" : 4
"a.update(b)" : 1
"keys" : 1
PyDict_MergeFromSeq2(PyObject : 1
*seq2 : 1
Update : 1
merge : 1
*seq2* : 2
duplicate : 1
wins : 2
value): : 1
PyDict_MergeFromSeq2(a : 1
seq2 : 1
override): : 1
seq2: : 1
a: : 1
a[key] : 1
PySequence_Check(PyObject : 1
PySequence_Size(PyObject : 1
PySequence_Length(PyObject : 1
*PySequence_Concat(PyObject : 1
concatenation : 2
*PySequence_Repeat(PyObject : 1
count) : 3
repeating : 2
*count* : 2
"o : 2
count" : 2
*PySequence_InPlaceConcat(PyObject : 1
*PySequence_InPlaceRepeat(PyObject : 1
*PySequence_GetItem(PyObject : 1
*i*th : 5
"o[i]" : 1
*PySequence_GetSlice(PyObject : 1
i1 : 3
i2) : 2
*i1* : 3
*i2* : 3
"o[i1:i2]" : 1
PySequence_SetItem(PyObject : 1
Assign : 2
"o[i] : 2
PySequence_DelItem(PyObject : 1
o[i]" : 1
PySequence_SetSlice(PyObject : 1
i2 : 1
"o[i1:i2] : 1
PySequence_DelSlice(PyObject : 1
o[i1:i2]" : 1
PySequence_Count(PyObject : 1
occurrences : 4
"o.count(value)" : 1
PySequence_Contains(PyObject : 1
"value : 1
PySequence_Index(PyObject : 1
"o.index(value)" : 1
*PySequence_List(PyObject : 1
"list(o)" : 1
*PySequence_Tuple(PyObject : 1
"tuple(o)" : 1
*PySequence_Fast(PyObject : 1
"PySequence_Fast*" : 2
PySequence_Fast_GET_SIZE(PyObject : 1
"PySequence_Fast_GET_SIZE()" : 1
*PySequence_Fast_GET_ITEM(PyObject : 1
**PySequence_Fast_ITEMS(PyObject : 1
Assumes : 1
relocate : 1
*PySequence_ITEM(PyObject : 1
Faster : 1
adjustment : 1
393** : 2
representations : 2
staying : 1
128 : 1
256 : 3
65536; : 1
1114112 : 1
range) : 1
Py_UNICODE* : 5
demand : 2
inefficient : 2
transition : 1
created: : 1
"canonical" : 8
"legacy" : 2
(typically : 1
"PyUnicode_FromUnicode()") : 1
bear : 1
representation; : 1
"PyUnicode_READY()" : 3
623** : 1
------------ : 4
Py_UCS4 : 18
Py_UCS2 : 2
Py_UCS1 : 2
"narrow" : 1
"wide" : 1
PyASCIIObject : 1
PyCompactUnicodeObject : 1
shouldn't : 1
PyUnicode_Type : 1
fast : 2
PyUnicode_Check(PyObject : 1
PyUnicode_CheckExact(PyObject : 1
PyUnicode_READY(PyObject : 1
"PyUnicode_FromUnicode()" : 2
PyUnicode_GET_LENGTH(PyObject : 1
checked) : 6
*PyUnicode_1BYTE_DATA(PyObject : 1
*PyUnicode_2BYTE_DATA(PyObject : 1
*PyUnicode_4BYTE_DATA(PyObject : 1
canonical : 5
UCS1 : 3
UCS2 : 1
UCS4 : 4
"PyUnicode_KIND()" : 3
Make : 1
PyUnicode_WCHAR_KIND : 1
PyUnicode_1BYTE_KIND : 1
PyUnicode_2BYTE_KIND : 1
PyUnicode_4BYTE_KIND : 1
"PyUnicode_WCHAR_KIND" : 1
PyUnicode_KIND(PyObject : 1
*PyUnicode_DATA(PyObject : 1
PyUnicode_WRITE(int : 1
"PyUnicode_DATA()") : 2
sanity : 1
*kind* : 2
(starts : 1
PyUnicode_READ(int : 1
PyUnicode_READ_CHAR(PyObject : 1
"PyUnicode_READ()" : 2
PyUnicode_MAX_CHAR_VALUE(PyObject : 1
PyUnicode_GET_SIZE(PyObject : 1
units) : 2
"PyUnicode_GET_LENGTH()" : 3
PyUnicode_GET_DATA_SIZE(PyObject : 1
*PyUnicode_AS_UNICODE(PyObject : 1
*PyUnicode_AS_DATA(PyObject : 1
"AS_DATA" : 1
casts : 1
(return : 1
port : 1
"PyUnicode_nBYTE_DATA()" : 2
"PyUnicode_WRITE()" : 1
PyUnicode_IsIdentifier(PyObject : 1
Identifiers : 1
---------------------------- : 1
mapped : 3
Py_UNICODE_ISSPACE(Py_UCS4 : 1
ch) : 17
*ch* : 21
Py_UNICODE_ISLOWER(Py_UCS4 : 1
lowercase : 1
Py_UNICODE_ISUPPER(Py_UCS4 : 1
uppercase : 1
Py_UNICODE_ISTITLE(Py_UCS4 : 1
titlecase : 1
Py_UNICODE_ISLINEBREAK(Py_UCS4 : 1
linebreak : 1
Py_UNICODE_ISDECIMAL(Py_UCS4 : 1
Py_UNICODE_ISDIGIT(Py_UCS4 : 1
digit : 2
Py_UNICODE_ISNUMERIC(Py_UCS4 : 1
Py_UNICODE_ISALPHA(Py_UCS4 : 1
alphabetic : 1
Py_UNICODE_ISALNUM(Py_UCS4 : 1
alphanumeric : 1
Py_UNICODE_ISPRINTABLE(Py_UCS4 : 1
printable : 3
Nonprintable : 1
database : 1
"Other" : 1
"Separator" : 1
excepting : 1
(0x20) : 1
bearing : 1
"sys.stderr".) : 1
conversions: : 1
Py_UNICODE_TOLOWER(Py_UCS4 : 1
Py_UNICODE_TOUPPER(Py_UCS4 : 1
upper : 1
Py_UNICODE_TOTITLE(Py_UCS4 : 1
title : 1
Py_UNICODE_TODECIMAL(Py_UCS4 : 1
Py_UNICODE_TODIGIT(Py_UCS4 : 1
Py_UNICODE_TONUMERIC(Py_UCS4 : 1
surrogates: : 1
Py_UNICODE_IS_SURROGATE(ch) : 1
("0xD800 : 2
ch : 4
0xDFFF") : 2
Py_UNICODE_IS_HIGH_SURROGATE(ch) : 1
0xDBFF") : 1
Py_UNICODE_IS_LOW_SURROGATE(ch) : 1
("0xDC00 : 1
Py_UNICODE_JOIN_SURROGATES(high : 1
low) : 1
Join : 2
surrogates : 1
-------------------------------------- : 1
APIs: : 10
*PyUnicode_New(Py_ssize_t : 1
maxchar) : 1
*maxchar* : 1
nearest : 1
127 : 1
255 : 2
65535 : 1
1114111 : 1
*PyUnicode_FromKindAndData(int : 1
*buffer : 2
(possible : 1
"PyUnicode_1BYTE_KIND" : 1
etc. : 1
"PyUnicode_KIND()") : 1
transformed : 2
("PyUnicode_4BYTE_KIND") : 1
codepoints : 1
("PyUnicode_1BYTE_KIND") : 1
*PyUnicode_FromStringAndSize(const : 1
*u : 4
*u* : 9
favor : 1
"PyUnicode_New()" : 3
*PyUnicode_FromString(const : 1
*u) : 2
*PyUnicode_FromFormat(const : 1
+---------------------+-----------------------+------------------------------------+ : 23
|=====================|=======================|====================================| : 1
"%li" : 1
"printf("%li")" : 1
"%lld" : 1
"printf("%lld")" : 1
"%lli" : 1
"printf("%lli")" : 1
"%llu" : 1
"printf("%llu")" : 1
"%zi" : 1
"printf("%zi")" : 1
"%A" : 1
"%U" : 1
"%V" : 1
"%S" : 1
"%R" : 1
formatter : 3
""%s"" : 2
""%V"" : 3
""%A"" : 2
""%U"" : 2
""%S"" : 2
""%R"" : 2
li : 1
lld : 1
lli : 1
llu : 1
zi : 1
""%lld"" : 1
""%llu"" : 1
""%li"" : 1
""%lli"" : 1
""%zi"" : 1
*PyUnicode_FromFormatV(const : 1
*PyUnicode_FromEncodedObject(PyObject : 1
details) : 1
PyUnicode_GetLength(PyObject : 1
PyUnicode_CopyCharacters(PyObject : 1
*to : 1
to_start : 1
*from : 1
from_start : 1
how_many) : 1
"memcpy()" : 1
PyUnicode_Fill(PyObject : 1
*unicode : 11
fill_char) : 1
character: : 1
*fill_char* : 2
"unicode[start:start+length]" : 1
Fail : 1
bigger : 1
PyUnicode_WriteChar(PyObject : 1
hashed : 1
PyUnicode_ReadChar(PyObject : 1
contrast : 1
"PyUnicode_READ_CHAR()" : 1
*PyUnicode_Substring(PyObject : 1
substring : 1
(included) : 1
(excluded) : 1
*PyUnicode_AsUCS4(PyObject : 1
buflen : 1
copy_null) : 1
*copy_null* : 1
*buflen* : 1
*u*) : 1
*PyUnicode_AsUCS4Copy(PyObject : 1
aware : 1
hits : 1
*PyUnicode_FromUnicode(const : 1
"PyUnicode_FromKindAndData()" : 1
*PyUnicode_AsUnicode(PyObject : 1
*PyUnicode_AsUnicodeAndSize(PyObject : 1
"PyUnicode_AsUnicode()" : 1
saves : 1
"Py_UNICODE()" : 1
terminator) : 1
PyUnicode_GetSize(PyObject : 1
*PyUnicode_FromObject(PyObject : 1
subtype) : 1
--------------- : 3
*PyUnicode_DecodeLocaleAndSize(const : 1
VxWorks : 2
383**) : 2
startup) : 2
"surrogateescape" : 4
*PyUnicode_DecodeLocale(const : 1
"strlen()" : 1
*PyUnicode_EncodeLocale(PyObject : 1
-------------------- : 2
383** : 1
529**) : 1
""O&"" : 2
PyUnicode_FSConverter(PyObject : 1
*result) : 2
ParseTuple : 2
converter: : 2
"PyUnicode_EncodeFSDefault()"; : 1
*result* : 2
PyBytesObject* : 1
Accepts : 2
*path-like : 2
PyUnicode_FSDecoder(PyObject : 1
"PyUnicode_DecodeFSDefaultAndSize()"; : 1
PyUnicodeObject* : 1
*PyUnicode_DecodeFSDefaultAndSize(const : 1
*PyUnicode_DecodeFSDefault(const : 1
*PyUnicode_EncodeFSDefault(PyObject : 1
*PyUnicode_FromWideChar(const : 1
*w : 2
*w* : 2
wcslen : 1
PyUnicode_AsWideChar(PyObject : 1
wchar_t* : 5
*PyUnicode_AsWideCharString(PyObject : 1
**size* : 2
"PyMem_Alloc()" : 1
read-only: : 1
setlocale) : 1
("ValueError" : 1
deviations : 1
*PyUnicode_Decode(const : 1
*PyUnicode_AsEncodedString(PyObject : 1
"encode()" : 1
*PyUnicode_DecodeUTF8(const : 1
*PyUnicode_DecodeUTF8Stateful(const : 1
*consumed) : 5
*consumed* : 15
*PyUnicode_AsUTF8String(PyObject : 1
*PyUnicode_AsUTF8AndSize(PyObject : 1
*size*) : 1
caches : 1
*PyUnicode_AsUTF8(PyObject : 1
*PyUnicode_DecodeUTF32(const : 1
*byteorder) : 2
*byteorder* : 4
*byteorder : 8
-1: : 2
1: : 2
"*byteorder" : 5
mark : 6
(BOM) : 2
switches : 2
BOM : 4
completion : 2
**byteorder* : 1
*PyUnicode_DecodeUTF32Stateful(const : 1
divisible : 1
four) : 1
*PyUnicode_AsUTF32String(PyObject : 1
*PyUnicode_DecodeUTF16(const : 1
"\ufeff" : 1
"\ufffe" : 1
*PyUnicode_DecodeUTF16Stateful(const : 1
odd : 1
pair) : 1
*PyUnicode_AsUTF16String(PyObject : 1
*PyUnicode_DecodeUTF7(const : 1
*PyUnicode_DecodeUTF7Stateful(const : 1
base-64 : 1
sections : 1
"Unicode : 1
Escape" : 2
*PyUnicode_DecodeUnicodeEscape(const : 1
Unicode- : 1
Escape : 1
*PyUnicode_AsUnicodeEscapeString(PyObject : 1
------------------------- : 1
"Raw : 1
*PyUnicode_DecodeRawUnicodeEscape(const : 1
Raw- : 1
*PyUnicode_AsRawUnicodeEscapeString(PyObject : 1
ordinals : 4
*PyUnicode_DecodeLatin1(const : 1
*PyUnicode_AsLatin1String(PyObject : 1
7-bit : 1
*PyUnicode_DecodeASCII(const : 1
*PyUnicode_AsASCIIString(PyObject : 1
interface; : 2
dictionaries : 3
*PyUnicode_DecodeCharmap(const : 1
*mapping : 1
*mapping* : 5
Else : 1
map : 3
255) : 1
ordinals) : 1
Unmapped : 3
"0xFFFE" : 1
"'\ufffe'" : 1
*PyUnicode_AsCharmapString(PyObject : 1
ordinal : 3
(ones : 2
"LookupError") : 2
"undefined : 1
mapping" : 1
maps : 1
*PyUnicode_Translate(PyObject : 1
*table : 1
Translate : 1
applying : 1
(causing : 1
usual : 3
----------------------- : 1
converters : 1
DBCS) : 1
settings : 1
machine : 1
*PyUnicode_DecodeMBCS(const : 1
*PyUnicode_DecodeMBCSStateful(const : 1
*PyUnicode_AsMBCSString(PyObject : 1
*PyUnicode_EncodeCodePage(int : 1
code_page : 1
"CP_ACP" : 1
capable : 1
(we : 1
descriptions) : 1
*PyUnicode_Concat(PyObject : 1
*left : 3
*right) : 2
*PyUnicode_Split(PyObject : 1
*sep : 1
maxsplit) : 1
Split : 2
*sep* : 1
splitting : 1
substrings : 1
splits : 2
separator : 1
*maxsplit* : 1
Separators : 1
*PyUnicode_Splitlines(PyObject : 1
keepend) : 1
breaks : 1
CRLF : 1
*keepend* : 1
*PyUnicode_Join(PyObject : 1
*separator : 1
*separator* : 1
PyUnicode_Tailmatch(PyObject : 1
*substr : 4
direction) : 3
*substr* : 4
"str[start:end]" : 5
tail : 1
(*direction* : 3
*direction* : 5
match) : 1
PyUnicode_Find(PyObject : 1
forward : 2
search) : 2
match; : 2
"-2" : 4
PyUnicode_FindChar(PyObject : 1
PyUnicode_Count(PyObject : 1
non-overlapping : 1
*PyUnicode_Replace(PyObject : 1
*replstr : 1
maxcount) : 1
*maxcount* : 2
*replstr* : 1
PyUnicode_Compare(PyObject : 1
PyUnicode_CompareWithASCIIString(PyObject : 1
*uni : 1
*uni* : 1
interprets : 1
ISO-8859-1 : 1
*PyUnicode_RichCompare(PyObject : 1
*right : 1
Rich : 1
following: : 1
Possible : 1
*PyUnicode_Format(PyObject : 1
args" : 1
PyUnicode_Contains(PyObject : 1
*container : 1
*element) : 1
*element* : 2
*container* : 1
accordingly : 1
PyUnicode_InternInPlace(PyObject : 1
**string) : 1
Intern : 1
**string* : 4
(decrementing : 1
alone : 1
interns : 1
(incrementing : 1
(Clarification: : 1
lot : 1
talk : 1
reference-count-neutral; : 1
call.) : 1
*PyUnicode_InternFromString(const : 1
("owned") : 1
ensured : 1
*Python : 1
manager* : 1
manager : 11
aspects : 1
segmentation : 1
preallocation : 1
caching : 1
Python-related : 1
interacting : 1
top : 2
object-specific : 2
policies : 1
adapted : 1
peculiarities : 1
imply : 1
requirements : 1
speed/space : 1
tradeoffs : 1
delegates : 1
corruption : 1
library: : 1
"calloc()" : 3
"realloc()" : 3
mixed : 1
consequences : 1
algorithms : 1
heaps : 2
*res; : 3
malloc(BUFSIZ); : 2
(buf : 3
PyErr_NoMemory(); : 3
...Do : 3
involving : 4
buf.. : 3
PyBytes_FromString(buf); : 3
free(buf); : 1
malloc'ed : 1
desire : 1
*inform* : 1
exclusively : 1
delegating : 1
accurate : 1
footprint : 1
Consequently : 1
trigger : 1
compaction : 1
preventive : 1
procedures : 1
"PYTHONMALLOC" : 4
arena : 7
shutdown : 1
allocating : 10
"domains" : 1
"PyMemAllocatorDomain") : 1
domains : 6
domain : 14
allocates : 2
hinted : 1
practice) : 1
domain: : 3
"Mem" : 1
domain,the : 1
"free()"; : 1
"malloc(1)" : 1
"calloc(1 : 1
1)") : 1
requesting : 6
*PyMem_RawMalloc(size_t : 1
Allocates : 6
Requesting : 6
"PyMem_RawMalloc(1)" : 1
*PyMem_RawCalloc(size_t : 1
nelem : 4
elsize) : 3
*nelem* : 3
*elsize* : 3
"PyMem_RawCalloc(1 : 1
*PyMem_RawRealloc(void : 1
Resizes : 3
sizes : 3
"PyMem_RawMalloc(n)"; : 1
PyMem_RawFree(void : 1
Frees : 3
"PyMem_RawFree(p)" : 1
ANSI : 2
*PyMem_Malloc(size_t : 1
"PyMem_Malloc(1)" : 1
*PyMem_Calloc(size_t : 1
"PyMem_Calloc(1 : 1
*PyMem_Realloc(void : 1
"PyMem_Malloc(n)"; : 1
PyMem_Free(void : 1
"PyMem_Free(p)" : 1
type-oriented : 2
*PyMem_New(TYPE : 1
"(n : 2
sizeof(TYPE))" : 2
TYPE* : 2
*PyMem_Resize(void : 1
macro; : 1
reassigned : 1
losing : 1
PyMem_Del(void : 1
"PyMem_MALLOC(size)" : 1
"PyMem_NEW(type : 1
"PyMem_REALLOC(ptr : 1
"PyMem_RESIZE(ptr : 1
"PyMem_FREE(ptr)" : 1
"PyMem_DEL(ptr)" : 1
intercepting : 1
*PyObject_Malloc(size_t : 1
"PyObject_Malloc(1)" : 1
*PyObject_Calloc(size_t : 1
"PyObject_Calloc(1 : 1
*PyObject_Realloc(void : 1
"PyObject_Malloc(n)"; : 1
PyObject_Free(void : 1
"PyObject_Free(p)" : 1
+---------------------------------+----------------------+--------------------+-----------------------+----------------------+ : 5
PyMem_RawMalloc : 1
PyMem_Malloc : 2
PyObject_Malloc : 1
|=================================|======================|====================|=======================|======================| : 1
""pymalloc"" : 1
"malloc" : 8
"pymalloc" : 4
""pymalloc_debug"" : 1
""malloc"" : 1
""malloc_debug"" : 1
Legend: : 1
Name: : 1
"malloc": : 1
"pymalloc": : 1
"+ : 1
debug": : 1
"Debug : 1
build": : 1
PyMemAllocatorEx : 3
+------------------------------------------------------------+-----------------------------------------+ : 6
|============================================================|=========================================| : 1
"void : 4
*ctx" : 2
"void* : 4
malloc(void : 1
*ctx : 6
calloc(void : 1
elsize)" : 1
realloc(void : 1
new_size)" : 1
free(void : 2
*ptr)" : 1
"PyMemAllocator" : 1
"PyMemAllocatorEx" : 1
"calloc" : 1
PyMemAllocatorDomain : 1
Enum : 1
identify : 1
Domains: : 1
PYMEM_DOMAIN_RAW : 1
Functions: : 3
PYMEM_DOMAIN_MEM : 1
PYMEM_DOMAIN_OBJ : 1
PyMem_GetAllocator(PyMemAllocatorDomain : 1
*allocator) : 4
PyMem_SetAllocator(PyMemAllocatorDomain : 1
"PYMEM_DOMAIN_RAW" : 2
thread- : 1
safe: : 1
(does : 1
allocator) : 1
reinstall : 1
contract: : 1
restrictions : 1
imposed : 1
Domain : 1
held) : 1
called) : 1
Substituting : 1
**not : 1
supported** : 1
PyMem_SetupDebugHooks(void) : 1
Setup : 1
setup : 1
"PYTHONMALLOC=debug") : 1
recognizable : 1
Newly : 1
"0xCD" : 2
("PYMEM_CLEANBYTE") : 2
"0xDD" : 2
("PYMEM_DEADBYTE") : 2
surrounded : 1
"forbidden : 1
bytes" : 1
"0xFD" : 2
("PYMEM_FORBIDDENBYTE") : 2
floats : 1
checks: : 1
Detect : 3
(buffer : 2
underflow) : 1
overflow) : 1
"PYMEM_DOMAIN_OBJ" : 4
"PyObject_Malloc()") : 2
"PYMEM_DOMAIN_MEM" : 4
"PyMem_Malloc()") : 2
"tracemalloc" : 5
displayed : 1
traced : 1
Let : 1
*S* : 1
"sizeof(size_t)" : 1
"2*S" : 1
*N* : 1
p : 1
malloc-like : 2
realloc-like : 4
("p[i:j]" : 1
"*(p+i)" : 1
inclusive : 2
"*(p+j)" : 1
slice): : 1
"p[-2*S:-S]" : 1
asked : 1
(easier : 1
dump) : 1
"p[-S]" : 1
(ASCII : 1
character): : 1
"'m'" : 1
"'o'" : 1
"p[-S+1:0]" : 1
Copies : 2
PYMEM_FORBIDDENBYTE : 3
under- : 1
writes : 2
"p[0:N]" : 1
PYMEM_CLEANBYTE : 3
excess : 2
free-like : 2
overwritten : 1
PYMEM_DEADBYTE : 3
realloc- : 1
"p[N:N+S]" : 1
over- : 1
"p[N+S:N+2*S]" : 1
"PYMEM_DEBUG_SERIALNO" : 1
default) : 1
serial : 3
Big-endian : 1
"size_t" : 4
"bad : 1
memory" : 1
excellent : 1
breakpoint : 2
capture : 1
instant : 1
bumpserialno() : 1
obmalloc.c : 1
intact : 1
they've : 1
diagnostic : 1
aborted : 1
Py_FatalError() : 1
provoking : 1
debugger : 1
(meaning : 2
used) : 2
"0xCB" : 1
"0xDB" : 1
"0xFB" : 1
CRT : 1
*pymalloc* : 2
(smaller : 1
512 : 2
"arenas" : 1
KiB : 1
"VirtualAlloc()" : 1
"VirtualFree()" : 1
"mmap()" : 1
"munmap()" : 1
configured : 1
without-pymalloc" : 1
"PYTHONMALLOC=malloc") : 1
Arena : 1
---------------------------------- : 1
PyObjectArenaAllocator : 1
+----------------------------------------------------+-----------------------------------------+ : 4
|====================================================|=========================================| : 1
PyObject_GetArenaAllocator(PyObjectArenaAllocator : 1
PyObject_SetArenaAllocator(PyObjectArenaAllocator : 1
PyTraceMalloc_Track(unsigned : 1
uintptr_t : 2
Track : 1
(failed : 1
trace) : 1
PyTraceMalloc_Untrack(unsigned : 1
ptr) : 1
Untrack : 1
rewritten : 1
PyMem_Malloc(BUFSIZ); : 2
PyMem_Free(buf); : 1
PyMem_New(char : 2
BUFSIZ); : 2
PyMem_Del(buf); : 1
PyMem_New : 1
Indeed : 1
reduced : 1
labeled : 1
*fatal* : 1
mixes : 1
*buf1 : 1
*buf2 : 1
*buf3 : 1
PyMem_Del(buf3); : 1
Wrong : 1
PyMem_Free() : 1
free(buf2); : 1
Right : 1
malloc() : 1
free(buf1); : 1
Fatal : 1
PyMem_Del() : 1
aimed : 1
"PyLong_As*" : 1
"(return : 1
type)-1" : 1
distinguished : 1
PyLongObject : 1
PyLong_Type : 1
PyLong_Check(PyObject : 1
PyLong_CheckExact(PyObject : 1
*PyLong_FromLong(long : 1
"-5" : 1
"256" : 2
*PyLong_FromUnsignedLong(unsigned : 1
*PyLong_FromSsize_t(Py_ssize_t : 1
*PyLong_FromSize_t(size_t : 1
*PyLong_FromLongLong(long : 1
*PyLong_FromUnsignedLongLong(unsigned : 1
*PyLong_FromDouble(double : 1
*PyLong_FromString(const : 1
**pend : 1
radix : 1
*pend* : 1
**pend* : 1
follows : 1
literals : 1
definition; : 1
"36" : 1
Leading : 1
spaces : 1
underscores : 1
"int.to_bytes()" : 1
"int.from_bytes()" : 1
to/from : 1
*PyLong_FromUnicodeObject(PyObject : 1
*PyLong_FromVoidPtr(void : 1
PyLong_AsLong(PyObject : 1
"__int__()" : 6
PyLong_AsLongAndOverflow(PyObject : 1
*overflow) : 2
"LONG_MAX" : 1
"LONG_MIN" : 1
**overflow* : 6
PyLong_AsLongLong(PyObject : 1
PyLong_AsLongLongAndOverflow(PyObject : 1
"LLONG_MAX" : 1
"LLONG_MIN" : 1
PyLong_AsSsize_t(PyObject : 1
*pylong) : 6
*pylong* : 18
PyLong_AsUnsignedLong(PyObject : 1
"(unsigned : 4
long)-1" : 4
PyLong_AsSize_t(PyObject : 1
PyLong_AsUnsignedLongLong(PyObject : 1
PyLong_AsUnsignedLongMask(PyObject : 1
reduction : 2
modulo : 2
"ULONG_MAX : 1
PyLong_AsUnsignedLongLongMask(PyObject : 1
"ULLONG_MAX : 1
PyLong_AsDouble(PyObject : 1
*PyLong_AsVoidPtr(PyObject : 1
assured : 1
"PyGen_New()" : 1
"PyGen_NewWithQualName()" : 1
PyGenObject : 1
PyGen_Type : 1
PyGen_Check(PyObject : 1
PyGen_CheckExact(PyObject : 1
"PyGen_Type"; : 1
*PyGen_New(PyFrameObject : 1
*PyGen_NewWithQualName(PyFrameObject : 1
