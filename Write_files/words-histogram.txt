Python : 7760
Documentation : 193
contents : 358
***************************** : 7
* : 26569
What's : 81
New : 2696
in : 25347
In : 1805
3.11 : 275
Summary : 34
-- : 687
Release : 77
highlights : 32
Features : 72
PEP : 766
657: : 3
Fine-grained : 3
error : 1855
locations : 72
tracebacks : 89
654: : 3
Exception : 146
Groups : 16
and : 26898
"except*" : 25
678: : 3
Exceptions : 146
can : 6516
be : 13993
enriched : 3
with : 9410
notes : 34
Windows : 1495
"py.exe" : 13
launcher : 90
improvements : 76
Related : 13
to : 34594
Type : 241
Hints : 19
646: : 3
Variadic : 4
generics : 27
655: : 3
Marking : 6
individual : 155
"TypedDict" : 30
items : 395
as : 9655
required : 412
or : 9115
not-required : 4
673: : 3
"Self" : 6
type : 2819
675: : 3
Arbitrary : 18
literal : 226
string : 3498
681: : 3
Data : 139
class : 4777
transforms : 20
563 : 8
may : 2482
not : 7416
the : 77295
future : 305
Other : 265
Language : 86
Changes : 293
CPython : 275
Implementation : 35
Modules : 209
Improved : 124
asyncio : 282
contextlib : 52
dataclasses : 43
datetime : 122
enum : 153
fcntl : 15
fractions : 35
functools : 36
hashlib : 47
IDLE : 458
idlelib : 44
inspect : 50
locale : 305
logging : 512
math : 58
operator : 236
os : 104
pathlib : 47
re : 51
shutil : 30
socket : 804
sqlite3 : 34
sys : 116
sysconfig : 22
tempfile : 13
threading : 80
time : 1275
tkinter : 65
traceback : 324
typing : 127
unicodedata : 18
unittest : 94
venv : 52
warnings : 281
zipfile : 67
Optimizations : 47
Faster : 16
Startup : 15
Frozen : 10
imports : 182
/ : 297
Static : 33
code : 2849
objects : 2653
Runtime : 21
Cheaper : 2
lazy : 20
frames : 136
Inlined : 3
function : 5337
calls : 874
659: : 2
Specializing : 3
Adaptive : 2
Interpreter : 60
Misc : 2
FAQ : 55
How : 229
should : 2473
I : 235
write : 585
my : 53
utilize : 5
these : 1049
speedups : 10
Will : 20
use : 3827
more : 2083
memory : 1026
don't : 493
see : 726
any : 2162
workload : 7
Why : 75
Is : 47
there : 1076
a : 33982
JIT : 2
compiler : 279
About : 27
bytecode : 245
changes : 560
opcodes : 47
Replaced : 12
Changed/removed : 2
Deprecated : 398
Language/Builtins : 2
Standard : 138
Library : 229
Pending : 5
Removal : 13
3.12 : 46
Removed : 180
Porting : 83
Build : 264
C : 1922
API : 1343
3.10 : 224
Parenthesized : 5
context : 932
managers : 113
Better : 9
messages : 517
SyntaxErrors : 3
IndentationErrors : 2
AttributeErrors : 4
NameErrors : 3
626: : 3
Precise : 3
line : 1966
numbers : 465
for : 15885
debugging : 175
other : 1987
tools : 192
634: : 2
Structural : 14
Pattern : 27
Matching : 12
Syntax : 75
operations : 531
Declarative : 2
approach : 144
Simple : 88
pattern: : 8
match : 700
Behavior : 28
without : 909
wildcard : 27
Patterns : 50
variable : 969
classes : 1014
positional : 268
parameters : 666
Nested : 25
patterns : 195
Complex : 27
Guard : 7
Key : 27
Optional : 153
"EncodingWarning" : 11
"encoding="locale"" : 8
option : 1142
604: : 2
Union : 20
Operator : 14
612: : 2
Parameter : 54
Specification : 39
Variables : 44
613: : 2
TypeAlias : 5
647: : 2
User-Defined : 4
Guards : 7
argparse : 74
array : 276
asynchat : 9
asyncore : 15
smtpd : 13
base64 : 62
bdb : 2
bisect : 9
codecs : 80
collections.abc : 26
curses : 127
__slots__ : 26
Keyword-only : 5
fields : 396
distutils : 105
doctest : 86
encodings : 74
fileinput : 10
faulthandler : 22
gc : 18
glob : 17
hmac : 19
importlib.metadata : 15
itertools : 29
linecache : 8
os.path : 10
platform : 311
pprint : 28
py_compile : 8
pyclbr : 6
shelve : 7
statistics : 87
site : 54
ssl : 99
_thread : 3
types : 1274
urllib.parse : 29
xml : 13
zipimport : 13
syntax : 521
652: : 2
Maintaining : 2
Stable : 704
ABI : 223
3.9 : 221
You : 646
check : 483
DeprecationWarning : 34
your : 1289
Dictionary : 55
Merge : 7
& : 94
Update : 302
Operators : 27
String : 142
Methods : 131
Remove : 355
Prefixes : 5
Suffixes : 2
Hinting : 8
Generics : 13
Collections : 16
Parser : 39
zoneinfo : 7
graphlib : 2
ast : 24
compileall : 21
concurrent.futures : 16
ftplib : 12
http : 26
imaplib : 18
importlib : 44
ipaddress : 25
multiprocessing : 114
nntplib : 11
pdb : 38
poplib : 17
pydoc : 45
random : 181
signal : 432
smtplib : 28
tracemalloc : 37
Notable : 54
3.9.1 : 5
macOS : 366
11.0 : 3
(Big : 4
Sur) : 3
Apple : 24
Silicon : 5
Mac : 63
support : 1762
3.9.2 : 3
3.8 : 240
Assignment : 32
expressions : 402
Positional-only : 6
Parallel : 4
filesystem : 117
cache : 245
compiled : 236
files : 1482
Debug : 36
build : 527
uses : 938
same : 1910
release : 304
f-strings : 31
"=" : 18
self-documenting : 7
578: : 2
Audit : 11
Hooks : 11
587: : 2
Initialization : 53
Configuration : 123
590: : 2
Vectorcall: : 3
fast : 94
calling : 806
protocol : 650
Pickle : 14
5 : 394
out-of-band : 12
data : 2237
buffers : 99
builtins : 58
collections : 95
cProfile : 15
csv : 24
ctypes : 163
gettext : 25
gzip : 41
io : 37
json.tool : 11
mmap : 31
pickle : 153
plistlib : 20
shlex : 18
tarfile : 52
tokenize : 16
weakref : 29
xmlrpc : 11
Feature : 19
Removals : 22
behavior : 483
Demos : 2
Tools : 27
3.8.1 : 4
3.8.8 : 3
3.8.12 : 5
3.7 : 278
Highlights : 13
563: : 2
Postponed : 5
Evaluation : 11
of : 28439
Annotations : 36
538: : 2
Legacy : 16
Locale : 17
Coercion : 6
540: : 4
Forced : 4
UTF-8 : 308
Mode : 104
553: : 2
Built-in : 57
"breakpoint()" : 19
539: : 3
Thread-Local : 9
Storage : 19
562: : 2
Customization : 15
Access : 70
Module : 294
Attributes : 56
564: : 2
Time : 47
Functions : 233
With : 186
Nanosecond : 2
Resolution : 11
565: : 3
Show : 28
"__main__" : 77
560: : 2
Core : 199
Support : 256
"typing" : 69
module : 5306
Generic : 85
Types : 149
552: : 2
Hash-based : 7
.pyc : 8
Files : 91
545: : 2
Translations : 4
Development : 63
(-X : 3
dev) : 3
contextvars : 9
importlib.resources : 10
binascii : 13
calendar : 54
crypt : 12
dbm : 20
decimal : 275
dis : 12
http.client : 21
http.server : 24
mimetypes : 11
msilib : 4
queue : 247
socketserver : 16
subprocess : 155
unittest.mock : 18
uu : 6
uuid : 13
xml.etree : 8
xmlrpc.server : 14
zipapp : 20
modules : 1246
functions : 2435
methods : 2034
aifc : 7
macpath : 3
sunau : 6
wave : 6
Platform : 37
Windows-only : 8
implementation : 1002
3.7.1 : 9
3.7.2 : 8
3.7.6 : 4
3.7.10 : 3
3.6 : 192
498: : 2
Formatted : 19
literals : 237
526: : 2
annotations : 202
515: : 2
Underscores : 10
Numeric : 43
Literals : 22
525: : 2
Asynchronous : 69
Generators : 34
530: : 3
Comprehensions : 16
487: : 4
Simpler : 8
customization : 25
creation : 223
Descriptor : 23
Protocol : 112
Enhancements : 9
519: : 2
Adding : 68
file : 4004
system : 968
path : 1023
495: : 2
Local : 19
Disambiguation : 5
529: : 2
Change : 114
encoding : 817
528: : 2
console : 108
520: : 2
Preserving : 7
Class : 141
Attribute : 46
Definition : 15
Order : 19
468: : 2
Keyword : 24
Argument : 207
*dict* : 9
523: : 2
frame : 309
evaluation : 66
PYTHONMALLOC : 8
environment : 759
DTrace : 21
SystemTap : 24
probing : 7
secrets : 14
cmath : 10
email : 251
json : 26
pickletools : 3
readline : 55
rlcompleter : 6
struct : 132
telnetlib : 7
timeit : 33
urllib.request : 56
urllib.robotparser : 3
winreg : 6
winsound : 5
xmlrpc.client : 14
zlib : 51
Improvements : 15
Keywords : 9
grp : 6
Options : 106
'python' : 6
Command : 88
3.6.2 : 16
"make : 83
regen-all" : 20
target : 274
touch" : 12
3.6.4 : 11
3.6.5 : 9
3.6.7 : 4
3.6.10 : 4
3.6.13 : 3
3.5 : 224
492 : 5
- : 954
Coroutines : 28
async : 227
await : 180
465 : 3
A : 2522
dedicated : 18
infix : 5
matrix : 29
multiplication : 41
448 : 3
Additional : 72
Unpacking : 15
Generalizations : 4
461 : 3
percent : 10
formatting : 241
bytes : 1264
bytearray : 99
484 : 5
471 : 2
os.scandir() : 19
better : 266
faster : 308
directory : 1191
iterator : 357
475: : 2
Retry : 7
failing : 73
EINTR : 6
479: : 5
StopIteration : 35
handling : 448
inside : 270
generators : 110
485: : 2
testing : 171
approximate : 21
equality : 89
486: : 2
Make : 259
Launcher : 29
aware : 107
virtual : 224
environments : 96
488: : 2
Elimination : 4
PYO : 4
489: : 3
Multi-phase : 11
extension : 725
initialization : 261
bz2 : 18
cgi : 10
configparser : 21
difflib : 13
heapq : 7
imghdr : 9
lzma : 21
selectors : 16
sndhdr : 5
Memory : 41
BIO : 18
Application-Layer : 3
Negotiation : 7
urllib : 35
wsgiref : 8
xml.sax : 5
module-level : 63
Unsupported : 4
Operating : 17
Systems : 11
3.5.4 : 18
3.4 : 261
453: : 2
Explicit : 28
Bootstrapping : 11
PIP : 2
Installations : 2
pip : 112
By : 321
Default : 82
446: : 2
Newly : 5
Created : 4
File : 420
Descriptors : 34
Are : 12
Non-Inheritable : 2
Codec : 30
Handling : 60
451: : 3
ModuleSpec : 9
Import : 66
System : 64
ensurepip : 19
abc : 36
audioop : 10
colorsys : 3
filecmp : 4
html : 34
marshal : 19
pty : 7
resource : 160
select : 92
stat : 26
textwrap : 6
445: : 2
Allocators : 9
442: : 2
Safe : 22
Object : 157
Finalization : 10
456: : 2
Secure : 14
Interchangeable : 2
Hash : 20
Algorithm : 3
436: : 2
Clinic : 181
Significant : 6
Deprecations : 5
No : 153
Longer : 3
Supported : 42
Code : 129
Cleanups : 2
Changed : 1981
3.4.3 : 6
476: : 4
Enabling : 22
certificate : 142
verification : 28
by : 13211
default : 2583
stdlib : 39
clients : 51
3.3 : 392
405: : 4
Virtual : 34
Environments : 13
420: : 3
Implicit : 10
Namespace : 25
Packages : 49
3118: : 7
memoryview : 55
buffer : 609
documentation : 782
393: : 3
Flexible : 5
Representation : 13
Functionality : 11
Performance : 30
usage : 297
397: : 3
3151: : 3
Reworking : 6
OS : 188
IO : 46
exception : 2457
hierarchy : 99
380: : 4
Delegating : 6
Subgenerator : 6
409: : 4
Suppressing : 7
414: : 4
Unicode : 707
3155: : 3
Qualified : 4
name : 2505
412: : 4
Key-Sharing : 4
362: : 3
Function : 137
Signature : 19
421: : 3
sys.implementation : 5
SimpleNamespace : 2
Using : 369
APIs : 222
Visible : 4
Finer-Grained : 3
Lock : 30
Builtin : 11
Policy : 18
Framework : 8
Provisional : 5
Header : 11
sched : 3
webbrowser : 16
xml.etree.ElementTree : 17
features : 310
Building : 44
extensions : 283
Line : 67
Switch : 14
3.2 : 306
384: : 3
Defining : 43
389: : 6
Argparse : 7
Parsing : 64
391: : 6
Based : 116
Logging : 96
3148: : 3
The : 13713
"concurrent.futures" : 26
3147: : 3
PYC : 6
Repository : 9
Directories : 15
3149: : 3
Version : 36
Tagged : 4
.so : 7
3333: : 3
Web : 16
Server : 52
Gateway : 13
Interface : 132
v1.0.1 : 4
elementtree : 2
reprlib : 8
ftp : 22
popen : 3
nntp : 2
certificates : 104
mailbox : 128
turtledemo : 14
Multi-threading : 9
Codecs : 41
3.1 : 142
372: : 8
Ordered : 12
Dictionaries : 26
378: : 7
Format : 102
Specifier : 9
Thousands : 9
Separator : 18
3.0 : 132
Common : 63
Stumbling : 3
Blocks : 10
Print : 81
Views : 10
And : 92
Iterators : 28
Instead : 149
Of : 59
Lists : 48
Ordering : 7
Comparisons : 36
Integers : 27
Text : 95
Vs : 4
8-bit : 59
Overview : 27
Already : 3
Present : 3
2.6 : 111
**PEP : 1149
3101**: : 3
Approach : 7
To : 804
Formatting : 43
Miscellaneous : 32
Special : 84
Builtins : 172
2.7 : 92
Future : 85
2.x : 53
Deprecation : 21
Warnings : 33
an : 9270
Lines : 20
Dictionary-Based : 4
For : 2287
3106: : 3
3137: : 3
module: : 127
ttk: : 4
Themed : 4
Widgets : 22
Tk : 149
Updated : 59
ElementTree : 52
1.3 : 58
Capsules : 15
Port-Specific : 18
Changes: : 12
X : 177
FreeBSD : 73
Fixes : 81
Added : 776
Maintenance : 4
Releases : 8
Two : 77
new : 3039
variables : 634
debug : 262
mode : 835
434: : 2
Enhancement : 12
All : 402
Branches : 2
466: : 2
Network : 27
Security : 126
477: : 2
Backport : 2
(PEP : 23
453) : 2
493: : 2
HTTPS : 40
migration : 9
Acknowledgements : 34
Process : 69
Issue : 25
Tracker: : 2
Roundup : 10
Format: : 2
reStructuredText : 12
Sphinx : 26
343: : 8
'with' : 20
statement : 876
Writing : 72
Context : 110
Managers : 21
366: : 4
Relative : 28
Imports : 23
From : 62
Main : 26
370: : 4
Per-user : 5
"site-packages" : 7
Directory : 32
371: : 4
"multiprocessing" : 74
Package : 84
3101: : 4
Advanced : 27
3105: : 4
"print" : 32
As : 439
3110: : 4
Exception-Handling : 4
3112: : 4
Byte : 21
3116: : 4
I/O : 221
Revised : 4
Buffer : 42
3119: : 4
Abstract : 93
Base : 110
Classes : 122
3127: : 4
Integer : 40
Literal : 18
3129: : 4
Decorators : 23
3141: : 4
Hierarchy : 8
Numbers : 24
"fractions" : 13
"ast" : 36
"future_builtins" : 5
"json" : 36
JavaScript : 20
Notation : 9
"plistlib" : 13
Property-List : 2
SSL : 220
IRIX : 3
2.5 : 86
308: : 4
Conditional : 11
Expressions : 35
309: : 3
Partial : 12
Application : 34
314: : 3
Metadata : 14
Software : 49
v1.1 : 4
328: : 7
Absolute : 5
338: : 3
Executing : 18
Scripts : 14
341: : 4
Unified : 11
try/except/finally : 3
342: : 5
Generator : 48
352: : 3
New-Style : 3
353: : 5
ssize_t : 8
index : 274
357: : 3
'__index__' : 3
method : 3808
Interactive : 36
package : 843
2.4 : 56
218: : 6
Built-In : 5
Set : 519
Objects : 838
237: : 6
Unifying : 9
Long : 22
289: : 3
292: : 3
Substitutions : 4
318: : 3
322: : 3
Reverse : 11
Iteration : 18
324: : 3
327: : 3
Decimal : 71
is : 30235
needed : 329
"Decimal" : 70
"Context" : 24
Multi-line : 5
331: : 3
Locale-Independent : 4
Float/String : 4
Conversions : 15
cookielib : 2
2.3 : 72
Datatype : 3
255: : 7
263: : 4
Source : 24
Encodings : 39
273: : 3
Importing : 40
from : 6086
ZIP : 117
Archives : 5
277: : 3
NT : 15
278: : 3
Universal : 7
Newline : 7
279: : 4
enumerate() : 5
282: : 3
285: : 4
Boolean : 87
293: : 3
Error : 74
Callbacks : 21
301: : 4
Index : 46
Distutils : 156
302: : 5
305: : 4
Comma-separated : 5
307: : 4
Extended : 22
Slices : 4
Date/Time : 2
optparse : 20
Pymalloc: : 3
Specialized : 9
Allocator : 9
2.2 : 82
Introduction : 55
PEPs : 23
252 : 4
253: : 3
Old : 23
Multiple : 53
Inheritance: : 2
Diamond : 2
Rule : 3
Links : 7
234: : 3
238: : 3
Changing : 26
Division : 16
227: : 6
Scopes : 16
2.1 : 60
236: : 3
__future__ : 51
Directives : 6
207: : 3
Rich : 6
230: : 3
Warning : 38
229: : 3
205: : 4
Weak : 29
References : 29
232: : 3
235: : 4
on : 6901
Case-Insensitive : 4
Platforms : 17
217: : 3
Display : 41
Hook : 10
208: : 3
Model : 22
241: : 3
2.0 : 101
What : 95
1.6 : 25
List : 60
Augmented : 11
Garbage : 19
Collection : 13
Cycles : 3
Minor : 6
Extending/Embedding : 6
Distutils: : 7
Making : 20
Easy : 3
Install : 53
XML : 293
SAX2 : 11
DOM : 129
Relationship : 5
PyXML : 13
Deleted : 6
Changelog : 3
next : 311
Tests : 174
3.11.3 : 18
final : 168
3.11.2 : 3
Tools/Demos : 80
3.11.1 : 6
3.11.0 : 49
candidate : 83
2 : 1224
1 : 1471
beta : 79
4 : 595
3 : 870
alpha : 123
7 : 184
6 : 242
3.10.0 : 27
3.9.0 : 25
3.8.0 : 18
3.7.0 : 38
3.6.6 : 7
3.6.3 : 11
3.6.1 : 12
3.6.0 : 37
3.5.5 : 7
3.5.3 : 11
3.5.2 : 24
3.5.1 : 13
3.5.0 : 46
Tutorial : 57
Whetting : 3
Your : 25
Appetite : 3
Invoking : 14
2.1.1 : 17
Passing : 57
2.1.2 : 10
Its : 82
Environment : 23
2.2.1 : 13
Encoding : 51
An : 704
Informal : 3
Calculator : 3
3.1.1 : 6
3.1.2 : 6
Strings : 54
3.1.3 : 8
First : 78
Steps : 5
Towards : 3
Programming : 45
More : 122
Control : 40
Flow : 7
4.1 : 18
"if" : 60
Statements : 23
4.2 : 16
"for" : 79
4.3 : 14
"range()" : 21
4.4 : 9
"break" : 32
"continue" : 36
"else" : 33
Clauses : 3
Loops : 3
4.5 : 14
"pass" : 12
4.6 : 12
"match" : 31
4.7 : 12
4.8 : 9
4.8.1 : 6
Values : 59
4.8.2 : 6
Arguments : 67
4.8.3 : 6
4.8.3.1 : 3
Positional-or-Keyword : 3
4.8.3.2 : 3
Positional-Only : 3
Parameters : 38
4.8.3.3 : 3
Keyword-Only : 3
4.8.3.4 : 3
Examples : 246
4.8.3.5 : 3
Recap : 3
4.8.4 : 7
4.8.5 : 6
4.8.6 : 6
Lambda : 7
4.8.7 : 6
4.8.8 : 6
4.9 : 6
Intermezzo: : 6
Coding : 6
Style : 4
Structures : 43
5.1 : 17
5.1.1 : 6
Stacks : 3
5.1.2 : 6
Queues : 15
5.1.3 : 6
5.1.4 : 3
5.2 : 16
"del" : 25
5.3 : 18
Tuples : 24
Sequences : 19
5.4 : 15
Sets : 50
5.5 : 18
5.6 : 15
Looping : 4
Techniques : 5
5.7 : 8
Conditions : 5
5.8 : 8
Comparing : 14
6.1 : 14
6.1.1 : 3
scripts : 198
6.1.2 : 3
Search : 20
Path : 75
6.1.3 : 3
"Compiled" : 3
6.2 : 8
6.3 : 10
"dir()" : 27
6.4 : 8
6.4.1 : 4
6.4.2 : 4
Intra-package : 4
6.4.3 : 5
Input : 24
Output : 42
7.1 : 19
Fancier : 3
7.1.1 : 3
7.1.2 : 3
format() : 6
Method : 57
7.1.3 : 3
Manual : 31
7.1.4 : 3
7.2 : 9
Reading : 41
7.2.1 : 5
7.2.2 : 5
Saving : 6
structured : 40
8 : 214
Errors : 27
8.1 : 19
8.2 : 9
8.3 : 8
8.4 : 8
Raising : 25
8.5 : 20
Chaining : 5
8.6 : 16
User-defined : 22
8.7 : 8
Clean-up : 6
Actions : 11
8.8 : 6
Predefined : 4
8.9 : 6
Unrelated : 3
8.10 : 3
Enriching : 3
Notes : 64
9 : 116
9.1 : 8
Word : 8
Names : 38
9.2 : 9
Namespaces : 16
9.2.1 : 3
Example : 240
9.3 : 10
Look : 23
at : 2332
9.3.1 : 3
9.3.2 : 3
9.3.3 : 3
Instance : 28
9.3.4 : 3
9.3.5 : 3
9.4 : 8
Random : 20
Remarks : 3
9.5 : 5
Inheritance : 14
9.5.1 : 3
9.6 : 5
Private : 15
9.7 : 5
Odds : 5
Ends : 8
9.8 : 5
9.9 : 5
9.10 : 5
10 : 255
Brief : 6
Tour : 9
10.1 : 6
10.2 : 3
Wildcards : 3
10.3 : 5
10.4 : 5
Redirection : 6
Program : 14
Termination : 4
10.5 : 11
10.6 : 8
Mathematics : 5
10.7 : 4
Internet : 34
10.8 : 6
Dates : 3
Times : 4
10.9 : 4
Compression : 18
10.10 : 4
Measurement : 3
10.11 : 3
Quality : 3
10.12 : 8
Batteries : 3
Included : 6
11 : 92
--- : 1438
Part : 719
II : 6
11.1 : 6
11.2 : 4
Templating : 3
11.3 : 8
Working : 16
Binary : 66
Record : 19
Layouts : 7
11.4 : 4
11.5 : 4
11.6 : 3
11.7 : 3
11.8 : 3
Floating : 31
Point : 17
Arithmetic : 19
12 : 77
12.1 : 3
12.2 : 3
Creating : 94
12.3 : 5
Managing : 12
13 : 50
Now : 178
14 : 30
Editing : 13
History : 31
Substitution : 6
14.1 : 3
Tab : 19
Completion : 14
14.2 : 3
Alternatives : 4
15 : 48
Arithmetic: : 5
Issues : 7
Limitations : 10
15.1 : 3
16 : 139
Appendix : 4
16.1 : 3
16.1.1 : 3
16.1.2 : 3
Executable : 4
16.1.3 : 3
16.1.4 : 3
Setup : 15
Usage : 45
1.1 : 40
1.1.1 : 28
options : 673
1.1.2 : 3
1.1.3 : 4
1.1.4 : 4
you : 4079
shouldn't : 39
1.2 : 37
1.2.1 : 3
Debug-mode : 3
Unix : 742
platforms : 554
Getting : 22
installing : 79
latest : 52
version : 5484
On : 744
Linux : 294
OpenBSD : 26
2.1.3 : 6
OpenSolaris : 3
Python-related : 8
paths : 275
Custom : 58
OpenSSL : 316
Configure : 21
General : 68
WebAssembly : 111
3.1.4 : 3
3.1.5 : 3
3.1.6 : 4
3.1.7 : 3
Linker : 10
3.1.8 : 3
Libraries : 4
3.1.9 : 3
3.1.10 : 3
3.1.11 : 3
Cross : 10
Compiling : 15
3.2.1 : 5
3.2.2 : 3
steps : 58
3.2.3 : 6
Makefile : 15
targets : 59
3.2.4 : 5
Compiler : 31
linker : 45
flags : 409
3.3.1 : 11
Preprocessor : 4
3.3.2 : 7
3.3.3 : 7
full : 356
installer : 161
4.1.1 : 3
Installation : 17
4.1.2 : 3
Removing : 7
MAX_PATH : 5
Limitation : 3
4.1.3 : 3
Installing : 60
Without : 54
UI : 17
4.1.4 : 3
Downloading : 5
4.1.5 : 3
Modifying : 19
install : 250
Microsoft : 65
Store : 52
4.2.1 : 6
Known : 5
issues : 121
4.2.1.1 : 3
local : 426
registry : 140
temporary : 138
nuget.org : 9
packages : 289
embeddable : 11
4.4.1 : 3
4.4.2 : 3
Embedding : 33
Alternative : 20
bundles : 5
Configuring : 21
4.6.1 : 3
Excursus: : 6
Setting : 90
4.6.2 : 3
Finding : 23
executable : 190
started : 162
4.8.1.1 : 3
command-line : 220
4.8.1.2 : 3
4.8.1.3 : 3
script : 608
4.8.1.4 : 3
associations : 8
Shebang : 5
shebang : 25
lines : 487
4.8.4.1 : 3
via : 391
INI : 19
4.8.4.2 : 3
Customizing : 27
versions : 510
Diagnostics : 3
Dry : 3
Run : 76
demand : 25
Return : 2162
codes : 113
4.10 : 3
4.10.1 : 3
PyWin32 : 6
4.10.2 : 3
cx_Freeze : 5
4.11 : 4
4.12 : 3
MacPython : 10
run : 757
Running : 72
GUI : 66
IDE : 16
Distributing : 19
Applications : 46
Resources : 20
Editors : 4
IDEs : 10
Reference : 109
Alternate : 21
Implementations : 14
Lexical : 5
analysis : 51
structure : 349
Logical : 15
Physical : 3
Comments : 13
2.1.4 : 2
declarations : 53
2.1.5 : 2
joining : 15
2.1.6 : 2
2.1.7 : 2
Blank : 6
2.1.8 : 2
Indentation : 5
2.1.9 : 2
Whitespace : 13
between : 748
tokens : 84
Identifiers : 23
keywords : 105
2.3.1 : 4
2.3.2 : 5
Soft : 4
2.3.3 : 3
Reserved : 13
identifiers : 69
2.4.1 : 8
Bytes : 44
2.4.2 : 2
concatenation : 52
2.4.3 : 2
2.4.4 : 3
2.4.5 : 2
2.4.6 : 3
point : 581
2.4.7 : 3
Imaginary : 4
Delimiters : 4
model : 77
values : 1780
standard : 1051
names : 1062
Basic : 84
attribute : 1774
access : 618
3.3.2.1 : 2
3.3.2.2 : 2
Implementing : 23
3.3.2.3 : 2
3.3.2.4 : 2
3.3.2.4.1 : 2
using : 2949
*__slots__* : 21
3.3.3.1 : 2
Metaclasses : 8
3.3.3.2 : 2
Resolving : 6
MRO : 13
entries : 231
3.3.3.3 : 2
Determining : 5
appropriate : 308
metaclass : 83
3.3.3.4 : 2
Preparing : 2
namespace : 415
3.3.3.5 : 2
body : 176
3.3.3.6 : 2
object : 5213
3.3.3.7 : 2
Uses : 26
metaclasses : 26
3.3.4 : 3
instance : 1716
subclass : 531
checks : 198
3.3.5 : 2
Emulating : 8
generic : 209
3.3.5.1 : 2
purpose : 101
*__class_getitem__* : 4
3.3.5.2 : 2
versus : 21
*__getitem__* : 2
3.3.6 : 2
callable : 411
3.3.7 : 2
container : 110
3.3.8 : 2
numeric : 269
3.3.9 : 3
Statement : 5
3.3.10 : 2
arguments : 2201
pattern : 415
matching : 275
3.3.11 : 2
lookup : 133
3.4.1 : 5
Awaitable : 2
3.4.2 : 5
Coroutine : 21
3.4.4 : 5
Execution : 27
Structure : 30
program : 591
Naming : 9
binding : 105
Binding : 8
4.2.2 : 3
4.2.3 : 2
restricted : 70
execution : 296
4.2.4 : 2
Interaction : 3
dynamic : 90
import : 2270
"importlib" : 59
5.2.1 : 3
Regular : 67
5.2.2 : 4
Searching : 9
5.3.1 : 2
5.3.2 : 2
Finders : 3
loaders : 38
5.3.3 : 2
hooks : 110
5.3.4 : 2
meta : 30
Loading : 17
5.4.1 : 2
Loaders : 11
5.4.2 : 2
Submodules : 3
5.4.3 : 2
spec : 105
5.4.4 : 2
Import-related : 3
attributes : 1006
5.4.5 : 2
module.__path__ : 2
5.4.6 : 2
reprs : 7
5.4.7 : 2
Cached : 7
invalidation : 20
Finder : 12
5.5.1 : 2
entry : 396
finders : 53
5.5.2 : 2
finder : 80
Replacing : 34
considerations : 32
__main__ : 20
5.8.1 : 2
__main__.__spec__ : 3
5.9 : 3
conversions : 71
Atoms : 4
6.2.1 : 3
(Names) : 3
6.2.2 : 3
6.2.3 : 2
forms : 85
6.2.4 : 2
Displays : 7
lists : 315
sets : 337
dictionaries : 166
6.2.5 : 2
displays : 90
6.2.6 : 2
6.2.7 : 2
6.2.8 : 2
6.2.9 : 2
Yield : 14
6.2.9.1 : 2
Generator-iterator : 3
6.2.9.2 : 2
6.2.9.3 : 2
generator : 424
6.2.9.4 : 2
generator-iterator : 6
Primaries : 6
6.3.1 : 3
references : 338
6.3.2 : 3
Subscriptions : 2
6.3.3 : 3
Slicings : 3
6.3.4 : 3
Calls : 71
Await : 4
expression : 731
6.5 : 5
power : 54
6.6 : 3
Unary : 7
arithmetic : 116
bitwise : 57
6.7 : 3
6.8 : 3
Shifting : 4
6.9 : 3
6.10 : 3
6.10.1 : 2
Value : 64
comparisons : 111
6.10.2 : 2
Membership : 2
test : 1021
6.10.3 : 2
Identity : 5
6.11 : 3
6.12 : 3
6.13 : 3
6.14 : 3
Lambdas : 4
6.15 : 3
Expression : 34
6.16 : 3
order : 887
6.17 : 3
precedence : 49
statements : 292
assignment : 181
Annotated : 3
7.3 : 5
"assert" : 15
7.4 : 3
7.5 : 7
7.6 : 5
"return" : 62
7.7 : 3
"yield" : 81
7.8 : 5
"raise" : 23
7.9 : 3
7.10 : 3
7.11 : 3
"import" : 80
7.11.1 : 2
7.12 : 3
"global" : 38
7.13 : 3
"nonlocal" : 28
Compound : 9
"while" : 20
"try" : 71
8.4.1 : 2
"except" : 68
clause : 159
8.4.2 : 2
8.4.3 : 2
8.4.4 : 2
"finally" : 57
"with" : 204
8.6.1 : 2
8.6.2 : 2
8.6.3 : 3
Irrefutable : 2
Case : 12
8.6.4 : 2
8.6.4.1 : 2
OR : 185
8.6.4.2 : 2
AS : 17
8.6.4.3 : 2
8.6.4.4 : 2
Capture : 7
8.6.4.5 : 2
Wildcard : 4
8.6.4.6 : 2
8.6.4.7 : 2
Group : 37
8.6.4.8 : 2
Sequence : 81
8.6.4.9 : 2
Mapping : 47
8.6.4.10 : 2
definitions : 155
8.9.1 : 2
definition : 316
8.9.2 : 2
"async : 109
for" : 43
8.9.3 : 2
with" : 35
Top-level : 13
components : 120
Complete : 9
programs : 199
input : 712
Full : 11
Grammar : 8
specification : 162
availability : 26
Constants : 68
added : 1135
"site" : 44
Truth : 6
Testing : 29
Operations : 32
"and" : 13
"or" : 17
"not" : 12
"int" : 167
"float" : 109
"complex" : 25
Bitwise : 13
Float : 5
Hashing : 7
Iterator : 24
"list" : 89
"tuple" : 66
"range" : 14
Immutable : 6
Mutable : 12
Ranges : 7
"str" : 276
"printf"-style : 4
"bytes" : 346
"bytearray" : 100
"memoryview" : 33
Bytearray : 10
"set" : 73
"frozenset" : 42
"dict" : 122
view : 100
Manager : 35
Annotation : 4
*Generic : 2
Alias* : 2
*Union* : 2
Alias : 57
"GenericAlias" : 21
Instances : 77
Null : 4
Ellipsis : 8
NotImplemented : 26
Internal : 20
conversion : 211
length : 493
limitation : 39
Affected : 5
limit : 228
Recommended : 8
configuration : 500
Inheriting : 3
built-in : 637
exceptions : 539
Concrete : 31
groups : 144
Processing : 18
Services : 35
"string" : 37
constants : 337
Mini-Language : 9
examples : 271
Template : 14
strings : 1041
Helper : 4
"re" : 57
Contents : 28
Flags : 37
Match : 27
Checking : 26
Pair : 5
Simulating : 3
scanf() : 4
search() : 7
vs : 19
match() : 5
Phonebook : 3
Munging : 3
all : 3035
Adverbs : 6
their : 946
Positions : 3
Raw : 21
Tokenizer : 7
"difflib" : 13
Helpers : 13
computing : 40
deltas : 7
SequenceMatcher : 7
Differ : 8
interface : 666
"textwrap" : 9
wrapping : 54
filling : 19
"unicodedata" : 19
Database : 23
"stringprep" : 10
Preparation : 4
"readline" : 41
GNU : 81
Init : 4
list : 2239
"rlcompleter" : 13
Completer : 4
"struct" : 36
Interpret : 6
packed : 49
binary : 629
Size : 16
Alignment : 5
Characters : 26
Native : 12
Formats : 21
"codecs" : 24
base : 650
Handlers : 35
Stateless : 3
Decoding : 15
Incremental : 15
IncrementalEncoder : 3
IncrementalDecoder : 3
Stream : 10
StreamWriter : 6
StreamReader : 6
StreamReaderWriter : 3
StreamRecoder : 3
Specific : 21
Transforms : 11
"encodings.idna" : 5
Internationalized : 9
Domain : 9
"encodings.mbcs" : 3
ANSI : 29
codepage : 7
"encodings.utf_8_sig" : 3
codec : 182
BOM : 34
signature : 174
"datetime" : 146
date : 190
Aware : 6
Naive : 10
Available : 23
Properties : 15
if : 7085
"timedelta" : 43
usage: : 97
"date" : 44
Usage: : 45
"time" : 83
"tzinfo" : 80
"timezone" : 20
"strftime()" : 18
"strptime()" : 27
Codes : 9
Technical : 9
Detail : 3
"zoneinfo" : 20
IANA : 21
zone : 85
"ZoneInfo" : 27
sources : 63
Compile-time : 4
representations : 49
serialization : 48
Globals : 7
"calendar" : 11
calendar-related : 5
"collections" : 46
Container : 9
datatypes : 13
"ChainMap" : 17
Recipes : 31
"Counter" : 18
"deque" : 16
"defaultdict" : 15
"namedtuple()" : 19
Factory : 5
Named : 21
Fields : 10
"OrderedDict" : 36
"UserDict" : 10
"UserList" : 11
"UserString" : 11
"collections.abc" : 27
Containers : 5
Detailed : 4
Descriptions : 7
"heapq" : 13
Heap : 27
algorithm : 185
Priority : 8
Queue : 23
Theory : 4
"bisect" : 10
Array : 18
bisection : 5
Sorted : 4
"array" : 27
Efficient : 4
arrays : 69
"weakref" : 19
Finalizer : 3
finalizers : 11
"__del__()" : 37
"types" : 9
Dynamic : 17
Creation : 18
Utility : 15
"copy" : 10
Shallow : 6
deep : 31
copy : 405
"pprint" : 15
pretty : 24
printer : 5
PrettyPrinter : 3
"reprlib" : 7
"repr()" : 82
Repr : 6
Subclassing : 14
"enum" : 15
enumerations : 22
"__dunder__" : 5
"_sunder_" : 5
Utilities : 63
"graphlib" : 8
operate : 71
graph-like : 5
structures : 123
Mathematical : 16
"numbers" : 11
abstract : 227
tower : 8
implementors : 6
ABCs : 47
"math" : 28
Number-theoretic : 3
representation : 428
Power : 8
logarithmic : 10
Trigonometric : 6
Angular : 3
Hyperbolic : 7
"cmath" : 23
complex : 240
polar : 8
coordinates : 62
Classification : 3
"decimal" : 27
fixed : 149
floating : 150
Quick-start : 3
operands : 50
Rounding : 8
modes : 35
Signals : 16
Mitigating : 3
round-off : 6
increased : 14
precision : 193
threads : 354
Rational : 6
"random" : 24
Generate : 37
pseudo-random : 21
Bookkeeping : 3
integers : 307
sequences : 259
Real-valued : 3
distributions : 91
Reproducibility : 3
"statistics" : 8
Averages : 3
measures : 7
central : 26
location : 225
Measures : 4
spread : 9
Statistics : 8
relations : 6
two : 1081
inputs : 89
details : 505
"NormalDist" : 12
Functional : 20
"itertools" : 19
creating : 350
iterators : 95
efficient : 117
looping : 20
Itertool : 3
Itertools : 4
"functools" : 19
Higher-order : 4
"partial" : 11
"operator" : 22
operators : 159
In-place : 6
"pathlib" : 15
Object-oriented : 6
Pure : 18
properties : 119
Accessing : 41
parts : 105
Correspondence : 3
"os" : 69
"os.path" : 26
pathname : 91
manipulations : 17
"fileinput" : 10
Iterate : 8
over : 521
multiple : 602
streams : 144
"stat" : 19
Interpreting : 4
"stat()" : 26
results : 354
"filecmp" : 8
"dircmp" : 13
"tempfile" : 14
directories : 310
"glob" : 14
style : 145
expansion : 34
"fnmatch" : 9
filename : 335
"linecache" : 9
text : 802
"shutil" : 21
High-level : 23
Platform-dependent : 10
copytree : 5
example : 2144
rmtree : 3
Archiving : 17
*base_dir* : 21
Querying : 13
size : 632
output : 1064
terminal : 131
Persistence : 9
"pickle" : 79
Comparison : 24
"marshal" : 28
stream : 430
format : 1089
pickled : 104
unpickled : 23
Pickling : 17
External : 11
Dispatch : 6
Tables : 10
Stateful : 5
Reduction : 4
Out-of-band : 3
Buffers : 8
Provider : 3
Consumer : 3
Restricting : 6
"copyreg" : 10
Register : 58
"shelve" : 16
persistence : 7
Restrictions : 7
"dbm" : 18
Interfaces : 12
"databases" : 4
"dbm.gnu" : 11
GNU's : 4
reinterpretation : 3
"dbm.ndbm" : 12
based : 389
ndbm : 5
"dbm.dumb" : 13
Portable : 11
DBM : 7
"sqlite3" : 93
DB-API : 16
SQLite : 190
databases : 24
Connection : 17
Cursor : 9
Row : 3
Blob : 4
PrepareProtocol : 4
adapters : 13
converters : 50
How-to : 5
guides : 11
placeholders : 45
bind : 69
SQL : 81
queries : 26
adapt : 19
custom : 389
adaptable : 5
register : 60
adapter : 13
callables : 59
convert : 253
Adapter : 3
converter : 92
recipes : 27
connection : 411
shortcut : 33
manager : 352
work : 665
URIs : 16
create : 882
row : 94
factories : 22
Explanation : 20
Transaction : 7
control : 403
"zlib" : 30
compatible : 217
**gzip** : 14
"gzip" : 25
"bz2" : 25
**bzip2** : 4
compression : 154
(De)compression : 3
(de)compression : 8
One-shot : 3
"lzma" : 25
LZMA : 14
writing : 373
compressed : 86
Compressing : 4
decompressing : 20
Specifying : 39
filter : 140
chains : 22
"zipfile" : 27
Work : 7
archives : 67
ZipFile : 29
PyZipFile : 3
ZipInfo : 4
Command-Line : 32
Command-line : 16
Decompression : 6
pitfalls : 7
itself : 354
limitations : 41
Interruption : 7
behaviors : 35
extraction : 12
"tarfile" : 36
Read : 128
tar : 85
archive : 267
TarFile : 8
TarInfo : 4
formats : 146
"csv" : 22
CSV : 33
Dialects : 7
Reader : 9
Writer : 6
"configparser" : 23
parser : 548
Quick : 18
Start : 65
Datatypes : 3
Fallback : 7
Interpolation : 7
Behaviour : 7
ConfigParser : 10
RawConfigParser : 5
"tomllib" : 7
Parse : 44
TOML : 27
Conversion : 18
Table : 26
"netrc" : 11
netrc : 16
processing : 207
parse : 179
".plist" : 5
Cryptographic : 4
"hashlib" : 39
hashes : 19
message : 1304
digests : 21
algorithms : 59
SHAKE : 14
hashing : 54
derivation : 11
BLAKE2 : 21
hash : 261
different : 851
digest : 54
sizes : 38
Keyed : 4
Randomized : 7
Personalization : 5
Tree : 16
Credits : 3
"hmac" : 17
Keyed-Hashing : 4
Message : 26
Authentication : 31
"secrets" : 16
secure : 71
managing : 27
Generating : 16
many : 512
best : 171
practices : 31
operating : 207
interfaces : 118
extended : 117
Management : 22
scheduler : 18
Information : 28
"io" : 30
working : 211
Opt-in : 6
EncodingWarning : 9
Buffered : 10
Streams : 12
Reentrancy : 3
Clock : 8
ID : 107
Timezone : 4
"argparse" : 49
sub-commands : 10
add_argument() : 6
ArgumentParser : 15
prog : 9
description : 203
epilog : 10
parents : 14
formatter_class : 6
prefix_chars : 4
fromfile_prefix_chars : 4
argument_default : 4
allow_abbrev : 7
conflict_handler : 4
add_help : 4
exit_on_error : 4
action : 140
nargs : 15
const : 222
choices : 19
help : 411
metavar : 12
dest : 18
Action : 14
parse_args() : 3
Option : 66
value : 3938
Invalid : 18
containing : 803
"-" : 52
abbreviations : 7
(prefix : 3
matching) : 8
Beyond : 9
"sys.argv" : 30
utilities : 35
Sub-commands : 3
FileType : 6
Mutual : 3
exclusion : 3
defaults : 429
Printing : 14
parsing : 319
Exiting : 8
Intermixed : 3
Upgrading : 6
"getopt" : 12
C-style : 11
command : 1048
"logging" : 48
facility : 27
Logger : 8
Levels : 13
Handler : 17
Formatter : 8
Filter : 25
LogRecord : 27
LoggerAdapter : 7
Thread : 44
Safety : 3
Module-Level : 8
Integration : 3
"logging.config" : 13
dictionary : 947
schema : 23
Schema : 4
Details : 15
connections : 116
external : 144
internal : 428
resolution : 104
importers : 17
"logging.handlers" : 27
handlers : 316
StreamHandler : 3
FileHandler : 6
NullHandler : 3
WatchedFileHandler : 3
BaseRotatingHandler : 3
RotatingFileHandler : 3
TimedRotatingFileHandler : 4
SocketHandler : 3
DatagramHandler : 3
SysLogHandler : 5
NTEventLogHandler : 3
SMTPHandler : 5
MemoryHandler : 4
HTTPHandler : 7
QueueHandler : 7
QueueListener : 6
"getpass" : 7
password : 102
"curses" : 28
Terminal : 12
character-cell : 6
Window : 30
"curses.textpad" : 10
widget : 244
Textbox : 4
"curses.ascii" : 7
ASCII : 315
characters : 910
"curses.panel" : 7
panel : 36
stack : 425
Panel : 7
"platform" : 17
underlying : 445
platform's : 20
identifying : 37
Java : 39
"errno" : 56
errno : 18
symbols : 69
"ctypes" : 87
foreign : 40
library : 863
tutorial : 74
link : 176
libraries : 221
loaded : 162
dlls : 9
Calling : 134
Fundamental : 10
continued : 13
variadic : 11
own : 369
argument : 2916
(function : 4
prototypes) : 3
pointers : 84
(or: : 3
passing : 294
reference) : 11
unions : 23
Structure/union : 3
alignment : 43
byte : 435
Bit : 7
Arrays : 13
Pointers : 5
Incomplete : 3
Callback : 26
exported : 46
Surprises : 3
Variable-sized : 3
reference : 871
shared : 321
Foreign : 4
prototypes : 12
Structured : 13
Concurrent : 3
"threading" : 51
Thread-based : 4
parallelism : 12
RLock : 5
Condition : 12
Semaphore : 10
"Semaphore" : 11
Event : 56
Timer : 6
Barrier : 10
locks : 54
conditions : 110
semaphores : 15
Process-based : 4
"Process" : 25
Contexts : 8
start : 595
Exchanging : 3
processes : 300
Synchronization : 12
Sharing : 6
state : 669
pool : 98
workers : 44
Pipes : 4
primitives : 40
Shared : 13
"multiprocessing.sharedctypes" : 5
Customized : 9
remote : 98
Proxy : 16
Cleanup : 18
Pools : 3
Listeners : 4
Clients : 6
Address : 32
keys : 443
"multiprocessing.dummy" : 5
guidelines : 16
*spawn* : 19
*forkserver* : 18
"multiprocessing.shared_memory" : 5
direct : 82
across : 132
"concurrent" : 4
Launching : 5
parallel : 57
tasks : 170
Executor : 3
ThreadPoolExecutor : 12
ProcessPoolExecutor : 11
"subprocess" : 60
Subprocess : 23
management : 102
Frequently : 13
Used : 78
Popen : 23
Constructor : 16
Considerations : 21
Older : 13
high-level : 58
**/bin/sh** : 4
shell : 221
substitution : 36
pipeline : 8
"os.system()" : 15
"os.spawn" : 4
family : 110
"os.popen()" : 15
"os.popen2()" : 3
"os.popen3()" : 3
"popen2" : 5
Shell : 77
Invocation : 12
Converting : 20
sequence : 824
Disabling : 5
"vfork()" : 8
"posix_spawn()" : 10
"sched" : 6
Scheduler : 3
"queue" : 20
synchronized : 17
SimpleQueue : 3
"contextvars" : 15
"_thread" : 13
Low-level : 25
Networking : 5
Interprocess : 5
Communication : 6
"asyncio" : 79
Runners : 3
Runner : 3
Keyboard : 4
Tasks : 40
Awaitables : 3
Task : 87
Cancellation : 8
Sleeping : 3
Concurrently : 3
Shielding : 3
Timeouts : 7
Waiting : 9
Primitives : 6
Threads : 25
Scheduling : 13
Introspection : 10
TCP : 68
echo : 49
client : 294
server : 640
Get : 166
HTTP : 337
headers : 368
open : 397
wait : 158
BoundedSemaphore : 3
Subprocesses : 15
Interacting : 2
LIFO : 8
Loop : 28
stopping : 12
loop : 541
callbacks : 93
delayed : 16
Futures : 15
Opening : 15
network : 273
servers : 106
Transferring : 3
TLS : 171
Upgrade : 35
Watching : 3
descriptors : 240
directly : 589
DNS : 13
pipes : 48
signals : 112
thread : 731
process : 1091
pools : 16
Handles : 13
Hello : 36
World : 19
call_soon() : 5
current : 1327
call_later() : 2
Watch : 5
descriptor : 529
read : 658
events : 281
SIGINT : 21
SIGTERM : 7
Transports : 30
Protocols : 34
Transport : 14
Read-only : 21
Write-only : 2
Datagram : 8
Streaming : 7
Echo : 12
Client : 19
UDP : 41
Connecting : 2
Existing : 13
Sockets : 28
loop.subprocess_exec() : 3
SubprocessProtocol : 2
Policies : 11
Watchers : 3
Extending : 31
private : 176
constructors : 69
lifetime : 28
Obtaining : 5
Developing : 6
Concurrency : 3
Multithreading : 3
Blocking : 6
Detect : 16
never-awaited : 2
coroutines : 68
never-retrieved : 2
"socket" : 77
networking : 15
Socket : 29
families : 14
sockets : 189
timeouts : 31
"connect" : 5
"accept" : 5
"ssl" : 50
TLS/SSL : 11
wrapper : 141
generation : 72
Certificate : 10
Certificates : 8
CA : 40
Combined : 3
key : 744
Self-signed : 2
Client-side : 3
operation : 398
Server-side : 3
non-blocking : 97
session : 74
Best : 25
settings : 150
Verifying : 2
Cipher : 3
selection : 101
Multi-processing : 2
"select" : 35
completion : 74
"/dev/poll" : 8
Polling : 10
Edge : 8
Level : 45
Trigger : 7
(epoll) : 3
Kqueue : 3
Kevent : 3
"selectors" : 13
multiplexing : 10
"signal" : 29
asynchronous : 203
rules : 176
Note : 825
SIGPIPE : 6
Signal : 16
"mmap" : 15
Memory-mapped : 6
MADV_* : 3
MAP_* : 3
"email" : 44
MIME : 152
"email.message": : 4
Representing : 14
"email.parser": : 4
FeedParser : 5
"email.generator": : 4
documents : 55
"email.policy": : 4
"email.errors": : 4
Defect : 4
"email.headerregistry": : 4
"email.contentmanager": : 4
Content : 24
"email": : 4
"email.message.Message": : 4
"compat32" : 23
"email.mime": : 4
scratch : 17
"email.header": : 4
"email.charset": : 4
character : 926
"email.encoders": : 4
Encoders : 7
"email.utils": : 4
"email.iterators": : 4
JSON : 130
encoder : 53
decoder : 57
Decoders : 3
Compliance : 3
Interoperability : 3
Character : 39
Infinite : 5
NaN : 47
Number : 52
Repeated : 10
Within : 10
Non-Object : 3
Non-Array : 3
"mailbox" : 13
Manipulate : 8
mailboxes : 26
various : 337
"Mailbox" : 43
"Maildir" : 11
"mbox" : 10
"MH" : 11
"Babyl" : 5
"MMDF" : 5
"Message" : 93
"MaildirMessage" : 18
"mboxMessage" : 19
"MHMessage" : 16
"BabylMessage" : 18
"MMDFMessage" : 17
"mimetypes" : 14
Map : 11
filenames : 131
MimeTypes : 3
"base64" : 23
Base16 : 8
Base32 : 10
Base64 : 16
Base85 : 5
"binascii" : 14
Convert : 191
"quopri" : 5
Encode : 43
decode : 105
quoted-printable : 15
Markup : 12
"html" : 10
HyperText : 7
"html.parser" : 6
HTML : 123
XHTML : 13
"HTMLParser" : 18
"html.entities" : 7
Definitions : 9
general : 180
entities : 43
vulnerabilities : 21
"defusedxml" : 3
"xml.etree.ElementTree" : 22
tree : 269
elements : 485
Pull : 8
interesting : 42
XPath : 12
XInclude : 7
Element : 15
QName : 7
TreeBuilder : 6
XMLParser : 8
XMLPullParser : 5
"xml.dom" : 10
Document : 99
DOMImplementation : 4
Node : 8
NodeList : 4
DocumentType : 4
Attr : 5
NamedNodeMap : 3
Comment : 15
CDATASection : 4
ProcessingInstruction : 4
Conformance : 4
Accessor : 3
"xml.dom.minidom" : 22
Minimal : 10
minidom : 9
"xml.dom.pulldom" : 7
building : 193
partial : 62
trees : 28
DOMEventStream : 3
"xml.sax" : 12
parsers : 48
SAXException : 3
"xml.sax.handler" : 11
SAX : 66
ContentHandler : 3
DTDHandler : 4
EntityResolver : 3
ErrorHandler : 3
LexicalHandler : 4
"xml.sax.saxutils" : 6
"xml.sax.xmlreader" : 6
XMLReader : 5
IncrementalParser : 4
Locator : 6
InputSource : 6
"Attributes" : 8
"AttributesNS" : 7
"xml.parsers.expat" : 11
Fast : 11
Expat : 45
ExpatError : 6
"webbrowser" : 14
Convenient : 4
web-browser : 4
controller : 14
Browser : 19
Controller : 3
"wsgiref" : 9
WSGI : 86
"wsgiref.util" : 5
"wsgiref.headers" : 3
response : 166
header : 770
"wsgiref.simple_server" : 6
simple : 380
"wsgiref.validate" : 4
conformance : 12
checker : 59
"wsgiref.handlers" : 6
server/gateway : 3
"wsgiref.types" : 4
static : 414
checking : 218
"urllib" : 18
URL : 227
"urllib.request" : 33
Extensible : 8
opening : 109
URLs : 77
Request : 37
OpenerDirector : 6
BaseHandler : 3
HTTPRedirectHandler : 4
HTTPCookieProcessor : 3
ProxyHandler : 3
HTTPPasswordMgr : 9
HTTPPasswordMgrWithPriorAuth : 4
AbstractBasicAuthHandler : 3
HTTPBasicAuthHandler : 4
ProxyBasicAuthHandler : 3
AbstractDigestAuthHandler : 3
HTTPDigestAuthHandler : 3
ProxyDigestAuthHandler : 3
HTTPSHandler : 3
DataHandler : 3
FTPHandler : 3
CacheFTPHandler : 3
UnknownHandler : 3
HTTPErrorProcessor : 3
"urllib.response" : 6
Response : 5
used : 4730
"urllib.parse" : 12
into : 1427
Encoded : 5
Results : 12
Quoting : 6
"urllib.error" : 8
raised : 1297
"urllib.robotparser" : 5
robots.txt : 6
"http" : 11
status : 178
"http.client" : 24
HTTPConnection : 5
HTTPResponse : 6
HTTPMessage : 3
"ftplib" : 16
FTP : 48
FTP_TLS : 3
"poplib" : 12
POP3 : 25
"imaplib" : 19
IMAP4 : 31
"smtplib" : 22
SMTP : 94
"uuid" : 12
UUID : 58
according : 161
**RFC : 419
4122** : 12
"socketserver" : 14
framework : 78
"socketserver.TCPServer" : 6
"socketserver.UDPServer" : 3
Mixins : 3
"http.server" : 23
"http.cookies" : 12
Cookie : 18
Morsel : 9
"http.cookiejar" : 16
CookieJar : 4
FileCookieJar : 7
subclasses : 293
co-operation : 4
web : 134
browsers : 43
CookiePolicy : 3
DefaultCookiePolicy : 4
"xmlrpc" : 6
XMLRPC : 9
"xmlrpc.client" : 16
XML-RPC : 80
ServerProxy : 5
DateTime : 6
Fault : 7
ProtocolError : 3
MultiCall : 3
Convenience : 11
"xmlrpc.server" : 10
SimpleXMLRPCServer : 16
CGIXMLRPCRequestHandler : 4
Documenting : 4
DocXMLRPCServer : 3
DocCGIXMLRPCRequestHandler : 3
"ipaddress" : 33
IPv4/IPv6 : 5
manipulation : 36
factory : 120
IP : 101
Addresses : 15
Prefix : 6
net : 14
mask : 79
host : 193
Networks : 9
containers : 41
addresses : 174
Multimedia : 5
"wave" : 14
WAV : 9
Wave_read : 4
Wave_write : 4
"colorsys" : 6
color : 130
systems : 317
Internationalization : 10
"gettext" : 25
Multilingual : 7
internationalization : 9
services : 54
**gettext** : 14
Class-based : 3
"NullTranslations" : 4
"GNUTranslations" : 8
Solaris : 47
catalog : 36
Catalog : 3
constructor : 542
Internationalizing : 3
Localizing : 6
application : 526
languages : 124
fly : 6
Deferred : 3
translations : 11
"locale" : 22
Background : 8
hints : 37
tips : 8
caveats : 13
writers : 15
that : 10890
embed : 34
catalogs : 11
Frameworks : 4
"turtle" : 20
Turtle : 42
graphics : 23
available : 1203
Screen : 19
TurtleScreen/Screen : 7
RawTurtle/Turtle : 5
corresponding : 517
motion : 6
Tell : 9
Turtle's : 4
Settings : 39
measurement : 13
Pen : 4
Drawing : 4
Color : 17
Filling : 5
drawing : 26
Visibility : 4
Appearance : 4
shapes : 20
Animation : 4
screen : 125
special : 490
specific : 463
inherited : 170
TurtleScreen : 23
Public : 13
Help : 43
Translation : 4
docstrings : 139
configure : 140
Turtles : 6
"turtledemo" : 6
Demo : 5
since : 961
"cmd" : 16
line-oriented : 8
interpreters : 41
Cmd : 8
"shlex" : 31
lexical : 40
Rules : 9
Compatibility : 10
Shells : 5
Graphical : 4
User : 67
"tkinter" : 54
Tcl/Tk : 82
Architecture : 3
Tkinter : 108
Life : 7
Preserver : 3
Important : 10
Concepts : 9
Understanding : 7
Wraps : 16
do : 1054
I... : 6
does... : 3
Navigating : 4
Threading : 9
Handy : 4
Packer : 9
Coupling : 3
Widget : 22
Bindings : 5
Events : 16
Images : 4
"tkinter.colorchooser" : 7
choosing : 24
dialog : 139
"tkinter.font" : 6
font : 79
Dialogs : 7
"tkinter.simpledialog" : 5
dialogs : 30
"tkinter.filedialog" : 5
Load/Save : 3
"tkinter.commondialog" : 6
Dialog : 6
window : 438
templates : 12
"tkinter.messagebox" : 7
prompts : 28
"tkinter.scrolledtext" : 6
Scrolled : 4
"tkinter.dnd" : 6
Drag : 6
drop : 38
"tkinter.ttk" : 17
themed : 10
widgets : 114
Ttk : 23
Scrollable : 4
Label : 5
States : 5
ttk.Widget : 3
Combobox : 4
ttk.Combobox : 3
Spinbox : 3
ttk.Spinbox : 3
Notebook : 4
ttk.Notebook : 5
Progressbar : 3
ttk.Progressbar : 3
Sizegrip : 3
Platform-specific : 8
Bugs : 12
Treeview : 5
Item : 7
Tag : 6
Column : 13
ttk.Treeview : 3
Styling : 4
"tkinter.tix" : 18
Extension : 83
Tix : 35
Selectors : 3
Hierarchical : 5
ListBox : 6
Tabular : 3
Image : 6
Form : 10
Geometry : 4
Commands : 11
Menus : 4
menu : 118
(Shell : 21
Editor) : 15
Edit : 11
(Editor : 8
only) : 43
menus : 11
Navigation : 4
Editor : 18
windows : 88
bindings : 45
Automatic : 13
indentation : 59
Replace : 78
Completions : 10
Calltips : 7
colors : 39
failure : 367
user : 596
applications : 298
Preferences : 11
preferences : 22
Extensions : 45
Relevant : 3
aliases : 94
NewType : 8
Callable : 11
"Any" : 22
Nominal : 3
structural : 15
subtyping : 6
directives : 29
concrete : 90
Corresponding : 14
programming : 100
decorators : 72
helpers : 13
Constant : 27
Timeline : 4
Major : 6
"pydoc" : 40
online : 14
Effects : 7
ResourceWarning : 16
Bad : 10
"doctest" : 49
Test : 93
interactive : 205
Docstrings : 11
It : 1777
Works : 14
Which : 15
Examined : 3
are : 9667
Docstring : 7
Recognized : 3
Unittest : 6
DocTest : 5
DocTestFinder : 4
DocTestParser : 4
DocTestRunner : 5
OutputChecker : 4
Debugging : 20
Soapbox : 3
"unittest" : 70
Unit : 9
Discovery : 8
Organizing : 4
Re-using : 3
old : 260
Skipping : 6
tests : 697
expected : 319
failures : 77
Distinguishing : 5
iterations : 16
subtests : 10
cases : 449
Grouping : 16
running : 506
load_tests : 7
Fixtures : 5
setUpClass : 3
tearDownClass : 3
setUpModule : 3
tearDownModule : 3
"unittest.mock" : 16
mock : 369
Guide : 42
Mock : 61
Deleting : 10
Attaching : 3
Mocks : 13
patchers : 8
patch : 418
patch.object : 5
patch.dict : 6
patch.multiple : 3
methods: : 134
stop : 123
TEST_PREFIX : 4
Nesting : 7
Patch : 2117
Where : 28
Patching : 8
MagicMock : 11
magic : 73
Mocking : 29
Magic : 8
sentinel : 25
DEFAULT : 8
call : 1956
create_autospec : 6
ANY : 75
FILTER_DIR : 3
mock_open : 5
Autospeccing : 7
Sealing : 3
mocks : 68
getting : 86
Tracking : 8
Side : 6
effect : 252
iterables : 72
Further : 14
chained : 38
mocking : 13
Applying : 6
every : 298
Unbound : 4
Coping : 3
mutable : 150
Patches : 24
less : 263
verbose : 46
assertions : 44
2to3 : 53
Automated : 6
translation : 61
Fixers : 3
"lib2to3" : 13
2to3's : 4
"test" : 28
Regression : 12
"test.support" : 16
suite : 159
"test.support.socket_helper" : 5
"test.support.script_helper" : 5
"test.support.bytecode_helper" : 6
correct : 208
"test.support.threading_helper" : 5
"test.support.os_helper" : 5
"test.support.import_helper" : 5
"test.support.warnings_helper" : 5
Profiling : 11
table : 266
"bdb" : 10
Debugger : 18
"faulthandler" : 25
Dump : 10
Dumping : 9
handler : 675
after : 1026
timeout : 248
"pdb" : 42
Profilers : 5
profilers : 10
Instant : 3
User's : 4
"profile" : 24
"cProfile" : 21
"Stats" : 19
Deterministic : 5
Calibration : 3
timer : 64
"timeit" : 13
Measure : 5
small : 171
snippets : 11
"trace" : 14
Trace : 17
track : 48
Modifiers : 3
Filters : 16
Programmatic : 9
"tracemalloc" : 41
allocations : 34
top : 188
Compute : 28
differences : 86
block : 567
Pretty : 4
peak : 13
traced : 14
blocks : 195
DomainFilter : 3
Frame : 15
Snapshot : 5
Statistic : 5
StatisticDiff : 3
Traceback : 282
Packaging : 42
Distribution : 42
"distutils" : 49
"ensurepip" : 28
"pip" : 92
"venv" : 38
venvs : 4
extending : 24
"EnvBuilder" : 13
"zipapp" : 11
Manage : 5
zip : 73
Standalone : 4
Caveats : 5
Zip : 11
Archive : 5
"sys" : 54
System-specific : 4
"sysconfig" : 33
Provide : 34
Python's : 346
information : 1109
"builtins" : 25
"__name__ : 7
== : 717
'__main__'" : 16
"top-level : 5
environment" : 5
Idiomatic : 6
"__main__.py" : 34
"import : 62
__main__" : 4
"warnings" : 30
Categories : 9
Describing : 10
Overriding : 6
Temporarily : 6
Updating : 3
Versions : 6
Dependencies : 4
"dataclasses" : 10
Post-init : 3
Init-only : 5
instances : 660
Re-ordering : 3
keyword-only : 149
"__init__()" : 92
Descriptor-typed : 3
"contextlib" : 14
"with"-statement : 5
contexts : 55
Supporting : 15
number : 1999
Catching : 9
"__enter__" : 14
Cleaning : 3
up : 897
"try-finally" : 4
flag : 651
decorator : 231
Single : 20
reusable : 9
reentrant : 30
Reentrant : 4
Reusable : 3
"abc" : 26
"atexit" : 28
Exit : 41
"traceback" : 29
retrieve : 97
"TracebackException" : 10
"StackSummary" : 12
"FrameSummary" : 12
"__future__" : 32
"gc" : 18
Collector : 7
"inspect" : 33
Inspect : 10
live : 41
members : 253
Retrieving : 4
source : 854
Introspecting : 3
interpreter : 936
Fetching : 7
statically : 48
Current : 25
State : 35
Site-specific : 4
hook : 102
Readline : 32
Interpreters : 5
"code" : 28
Console : 7
"codeop" : 11
Compile : 22
"zipimport" : 15
zipimporter : 7
"pkgutil" : 8
utility : 72
"modulefinder" : 8
Find : 27
"ModuleFinder" : 4
"runpy" : 23
Locating : 4
executing : 141
"importlib.abc" : 9
related : 165
"importlib.machinery" : 4
Importers : 3
"importlib.util" : 6
programmatically : 23
imported : 251
importer : 15
Approximating : 3
"importlib.import_module()" : 16
"importlib.resources" : 14
"importlib.resources.abc" : 6
resources : 143
"importlib.metadata" : 19
Entry : 9
points : 265
metadata : 126
requirements : 57
distribution : 270
Distributions : 7
search : 357
"sys.path" : 176
_pth : 3
Embedded : 7
Trees : 4
Subscripting : 5
flow : 45
Async : 10
"symtable" : 12
compiler's : 9
symbol : 89
tables : 57
Symbol : 9
Examining : 3
"token" : 6
"keyword" : 10
"tokenize" : 15
Tokenizing : 3
"tabnanny" : 6
Detection : 4
ambiguous : 32
"pyclbr" : 5
browser : 102
"py_compile" : 14
"compileall" : 16
Byte-compile : 7
"dis" : 23
Disassembler : 4
Bytecode : 9
Analysis : 4
Instructions : 4
Opcode : 5
"pickletools" : 9
developers : 82
MS : 16
"msvcrt" : 11
Useful : 29
routines : 38
VC++ : 4
runtime : 268
"winreg" : 7
HKEY_* : 21
Rights : 13
64-bit : 107
Registry : 22
Handle : 51
"winsound" : 5
Sound-playing : 4
"posix" : 18
most : 841
common : 385
POSIX : 192
Large : 9
"pwd" : 16
database : 331
"grp" : 9
group : 382
"termios" : 11
tty : 27
"tty" : 7
"pty" : 8
Pseudo-terminal : 5
"fcntl" : 13
"ioctl" : 4
"resource" : 15
Resource : 26
Limits : 4
"syslog" : 12
syslog : 28
Superseded : 3
"aifc" : 13
AIFF : 18
AIFC : 4
"asynchat" : 13
command/response : 4
"asyncore" : 18
basic : 189
"audioop" : 13
raw : 179
audio : 94
"cgi" : 17
Higher : 5
Caring : 3
about : 751
security : 135
CGI : 78
problems : 122
solutions : 22
"cgitb" : 13
"chunk" : 6
IFF : 6
chunked : 11
"crypt" : 16
passwords : 18
"imghdr" : 9
Determine : 35
image : 76
"imp" : 17
*import* : 3
internals : 18
"mailcap" : 8
Mailcap : 6
"msilib" : 14
Installer : 9
View : 5
CAB : 19
Precomputed : 3
"nis" : 11
Sun's : 4
NIS : 14
(Yellow : 4
Pages) : 4
"nntplib" : 19
NNTP : 25
"optparse" : 132
Terminology : 5
actions : 98
store : 164
boolean : 95
(flag) : 3
handles : 158
errors : 511
Putting : 8
it : 6977
together : 135
Populating : 3
manipulating : 26
Conflicts : 6
callback : 263
called : 1926
1: : 47
trivial : 24
2: : 35
3: : 13
(generalized) : 3
4: : 9
arbitrary : 331
condition : 185
5: : 19
6: : 6
"ossaudiodev" : 12
OSS-compatible : 4
devices : 27
Audio : 14
Device : 11
Mixer : 4
"pipes" : 9
pipelines : 4
"smtpd" : 12
SMTPServer : 3
DebuggingServer : 3
PureProxy : 3
SMTPChannel : 7
"sndhdr" : 7
sound : 56
"spwd" : 12
shadow : 16
"sunau" : 12
Sun : 35
AU : 9
AU_read : 4
AU_write : 4
"telnetlib" : 8
Telnet : 17
"uu" : 10
uuencode : 7
"xdrlib" : 9
XDR : 12
Unpacker : 3
third : 100
party : 47
C++ : 139
Back : 14
1.4 : 10
Module's : 5
1.5 : 22
Compilation : 8
Linkage : 3
1.7 : 5
Extracting : 7
1.8 : 5
1.9 : 3
1.10 : 4
Counts : 12
1.10.1 : 2
Counting : 5
1.10.2 : 2
Ownership : 5
1.10.3 : 2
Thin : 2
Ice : 2
1.10.4 : 2
NULL : 176
1.11 : 3
1.12 : 4
Providing : 18
Types: : 9
Basics : 5
finer : 12
cyclic : 30
garbage : 233
collection : 208
Assorted : 5
Topics : 7
De-allocation : 3
Presentation : 3
Type-specific : 4
Suggestions : 3
Cookbook : 19
Differences : 4
Between : 17
DLLs : 18
Practice : 3
larger : 127
Another : 117
Very : 15
High : 13
Embedding: : 3
overview : 34
Linking : 3
under : 327
Unix-like : 10
Python/C : 33
standards : 38
Include : 46
macros : 137
Count : 7
Builds : 4
Stability : 7
Limited : 40
Scope : 4
Layer : 22
clearing : 27
Issuing : 3
indicator : 50
Recursion : 9
marshalling : 8
Reflection : 5
Call : 105
*tp_call* : 12
Vectorcall : 9
request : 358
request-independent : 3
readonly : 19
shape : 47
strides : 21
suboffsets : 16
contiguity : 7
requests : 163
compound : 36
NumPy-style: : 3
PIL-style: : 3
Buffer-related : 3
Heap-Allocated : 3
"None" : 1428
Pack : 14
Unpack : 19
Direct : 12
Macros : 12
accessing : 108
Py_UNICODE : 15
wchar_t : 68
UTF-32 : 20
UTF-16 : 25
UTF-7 : 9
Unicode-Escape : 5
Raw-Unicode-Escape : 4
Latin-1 : 22
MBCS : 17
Slots : 14
Slot : 18
Tuple : 11
Struct : 7
Cell : 5
Initializing : 9
Single-phase : 4
Slice : 12
MemoryView : 3
Before : 71
Global : 17
finalizing : 17
Process-wide : 3
Releasing : 2
GIL : 84
Non-Python : 2
created : 1025
Cautions : 2
fork() : 13
Sub-interpreter : 3
Notifications : 3
Tracing : 5
(TSS) : 6
Allocation : 2
(TLS) : 11
PyWideStringList : 10
PyStatus : 29
PyPreConfig : 12
Preinitialize : 13
PyConfig : 12
Isolated : 9
Py_RunMain() : 3
Py_GetArgcArgv() : 3
Multi-Phase : 3
Domains : 5
allocators : 47
Customize : 8
pymalloc : 46
allocator : 98
Arena : 2
Allocating : 4
"tp : 3
slots" : 3
sub-slots : 7
slot : 148
typedefs : 10
PyTypeObject : 76
PyObject : 908
PyVarObject : 8
Cyclic : 9
Controlling : 3
Versioning : 4
terms : 70
Open : 120
licensing : 4
collaboration : 2
.. : 3249
choose : 70
project : 100
distribute : 46
... : 67
prior : 87
just : 608
scientific : 12
installed : 307
installation : 226
Pip : 2
HOWTOs : 4
Short : 6
Drop : 15
older : 146
sure : 177
specify : 445
proper : 67
"setup.py" : 52
Have : 15
good : 135
coverage : 45
Learn : 4
Use : 557
feature : 277
detection : 47
instead : 1601
Prevent : 100
compatibility : 291
regressions : 6
Check : 68
which : 4150
dependencies : 49
transition : 27
denote : 22
continuous : 13
integration : 19
stay : 11
Consider : 37
optional : 906
Curses : 4
Starting : 39
ending : 64
Pads : 3
Displaying : 8
HowTo : 6
Primer : 3
example: : 401
returns : 1745
constant : 209
lookups : 40
Managed : 3
Closing : 11
thoughts : 4
Practical : 6
Validator : 3
validators : 5
introduction : 46
invocation : 45
super : 10
logic : 64
notification : 17
ORM : 3
Equivalents : 3
Kinds : 3
Member : 5
Enum : 66
HOWTO : 47
enumeration : 43
Duplicating : 2
Ensuring : 2
unique : 111
automatic : 71
Allowed : 9
Restricted : 2
subclassing : 65
Derived : 16
Enumerations : 5
IntEnum : 8
StrEnum : 4
IntFlag : 6
Flag : 44
Others : 12
When : 1252
"__new__()" : 39
Finer : 12
Points : 3
_Private__names : 2
"Enum" : 53
member : 260
mixed : 41
Combining : 7
"Flag" : 32
"IntFlag" : 36
minutia : 2
Enums : 14
Members : 11
(aka : 11
instances) : 9
Omitting : 8
"auto" : 19
"object" : 52
descriptive : 11
OrderedEnum : 3
DuplicateFreeEnum : 2
Planet : 4
TimePeriod : 3
EnumType : 3
Formal : 4
provability : 3
Modularity : 3
Ease : 3
Composability : 3
That : 120
comprehensions : 93
Selecting : 4
Combinatoric : 2
Small : 6
lambda : 56
Revision : 2
Python-specific : 9
displayed : 126
date/time : 16
Next : 23
Loggers : 14
Formatters : 6
happens : 102
no : 2880
provided : 673
during : 449
Optimization : 12
formatters : 18
destinations : 11
levels : 90
Dealing : 6
Sending : 5
receiving : 48
listener : 53
production : 31
contextual : 33
LoggerAdapters : 2
impart : 5
than : 1787
dicts : 40
pass : 581
Imparting : 2
single : 823
concurrent.futures.ProcessPoolExecutor : 4
Deploying : 2
Gunicorn : 4
uWSGI : 4
rotation : 22
alternative : 169
styles : 25
"LogRecord" : 53
ZeroMQ : 7
dictionary-based : 5
rotator : 8
namer : 12
customize : 75
log : 265
elaborate : 11
Inserting : 2
sent : 213
"dictConfig()" : 22
particular : 388
throughout : 27
filters : 100
Speaking : 2
Buffering : 3
outputting : 5
them : 799
conditionally : 7
buffering : 48
times : 364
UTC : 119
(GMT) : 2
selective : 5
CLI : 21
starter : 2
template : 53
Qt : 7
RFC5424 : 3
treat : 51
logger : 301
like : 1137
avoid : 335
loggers : 79
"NullHandler" : 12
lot : 62
Repeating : 2
Things : 4
Backslash : 6
Plague : 3
Performing : 5
Matches : 39
Metacharacters : 3
Non-capturing : 2
Lookahead : 3
Assertions : 2
Splitting : 7
Problems : 5
Greedy : 2
Non-Greedy : 2
re.VERBOSE : 3
Feedback : 2
IPC : 9
Disconnecting : 2
Die : 2
Non-blocking : 4
Sorting : 13
HOW : 9
TO : 36
Ascending : 2
Descending : 2
Sort : 10
Sorts : 3
Decorate-Sort-Undecorate : 3
Tips : 4
Unicode-aware : 3
Programs : 15
Unknown : 16
Fetch : 12
Headers : 23
URLError : 7
HTTPError : 7
Wrapping : 2
Up : 10
info : 55
geturl : 4
Openers : 3
Proxies : 2
Layers : 2
Footnotes : 54
basics : 6
Introducing : 12
Positional : 16
little : 65
advanced : 63
Conflicting : 2
Conclusion : 2
Address/Network/Interface : 4
Host : 9
Inspecting : 3
detail : 103
when : 4881
fails : 300
How-To : 3
Goals : 2
Symbolic : 15
Renaming : 2
generated : 312
PyArg_UnpackTuple : 2
real : 156
"legacy : 6
converters" : 7
Py_buffer : 17
"NULL" : 696
specified : 1392
return : 3350
Cloning : 3
existing : 492
"self : 7
converter" : 3
"defining : 4
class" : 5
METH_O : 4
METH_NOARGS : 12
tp_new : 3
tp_init : 3
redirecting : 12
Clinic's : 22
#ifdef : 10
trick : 8
Instrumenting : 5
markers : 21
probes : 8
Tapsets : 2
Practices : 15
Dict : 14
Newer : 3
Manually : 6
Un-Stringizing : 2
Stringized : 2
"__annotations__" : 53
Any : 185
Quirks : 2
Isolating : 3
Who : 2
this : 5648
Enter : 28
Per-Module : 4
Surprising : 2
Cases : 3
Opt-Out: : 3
Limiting : 6
One : 173
per : 163
Garbage-Collection : 2
Getters : 2
Setters : 2
Lifetime : 2
Per-Class : 2
Lossless : 2
Asked : 4
Questions : 10
world : 42
(Tuples/Lists) : 2
Design : 5
does : 1314
grouping : 37
am : 8
strange : 12
floating-point : 102
calculations : 23
so : 1379
inaccurate : 6
immutable : 118
must : 1968
'self' : 5
explicitly : 377
can't : 179
some : 1314
functionality : 210
(e.g : 331
list.index()) : 2
but : 2407
len(list)) : 2
join() : 5
tuple : 872
isn't : 248
switch : 105
case : 1053
Can't : 9
emulate : 28
relying : 39
OS-specific : 6
contain : 472
Can : 48
machine : 87
language : 245
manage : 39
doesn't : 545
traditional : 29
scheme : 131
freed : 52
exits : 90
separate : 217
implemented : 453
list.sort() : 3
sorted : 119
enforce : 21
goto : 21
(r-strings) : 2
end : 651
backslash : 79
have : 2875
assignments : 55
colons : 12
if/while/def/class : 2
allow : 403
commas : 26
tuples : 239
Network/Internet : 2
Databases : 2
Numerics : 2
hard; : 3
alternatives : 31
execute : 159
evaluate : 55
extract : 73
Py_BuildValue() : 7
object's : 183
catch : 75
PyErr_Print() : 3
(or : 379
anything : 138
prints : 132
stdout/stderr) : 2
written : 693
make : 685
fails; : 4
why : 57
want : 641
compile : 118
missing : 216
tell : 59
"incomplete : 2
input" : 4
"invalid : 10
find : 276
undefined : 87
g++ : 5
__builtin_new : 2
__pure_virtual : 2
others : 93
through : 535
inheritance) : 2
sometimes : 115
take : 352
long : 504
"*.pyd" : 2
DLL : 46
keep : 110
editors : 10
inserting : 31
tabs : 52
keypress : 10
blocking : 141
solve : 13
api-ms-win-crt-runtime-l1-1-0.dll : 2
Graphic : 3
toolkits : 4
exist : 252
questions : 19
"Why : 5
Installed : 3
Computer?" : 3
delete : 113
Glossary : 3
Contributors : 2
bugs : 97
issue : 185
tracker : 23
contributing : 9
yourself : 63
Copyright : 37
License : 33
software : 134
Terms : 2
otherwise : 625
PSF : 21
LICENSE : 15
AGREEMENT : 12
FOR : 45
PYTHON : 18
BEOPEN.COM : 2
CNRI : 16
1.6.1 : 18
CWI : 8
0.9.0 : 3
THROUGH : 2
ZERO-CLAUSE : 2
BSD : 31
CODE : 2
IN : 58
THE : 85
DOCUMENTATION : 2
Licenses : 3
Incorporated : 4
Mersenne : 6
Twister : 6
tracing : 103
UUencode : 2
UUdecode : 2
Remote : 7
Procedure : 6
test_epoll : 2
Select : 16
kqueue : 7
SipHash24 : 3
strtod : 3
dtoa : 3
expat : 21
libffi : 20
cfuhash : 3
libmpdec : 8
W3C : 27
C14N : 8
Audioop : 2
********* : 4
is: : 109
© : 8
2001-2023 : 2
Foundation : 12
rights : 26
reserved : 63
2000 : 28
BeOpen.com : 4
1995-2000 : 1
Corporation : 5
National : 4
Research : 4
Initiatives : 3
1991-1995 : 4
Stichting : 6
Mathematisch : 6
Centrum : 6
====================================================================== : 291
See : 1568
complete : 264
license : 31
permissions : 32
***************** : 12
mature : 1
has : 3104
established : 19
reputation : 2
stability : 12
maintain : 48
would : 807
know : 164
deficiencies : 1
fix : 179
contribute : 13
patches : 53
streamlines : 2
involves : 10
people : 78
how : 754
================== : 74
If : 5257
bug : 251
propose : 3
improvement : 16
please : 74
submit : 16
report : 101
suggestion : 17
include : 440
well : 365
also : 2538
discussion : 54
item : 415
our : 136
Discourse : 1
forum : 1
you're : 168
short : 146
reports : 54
docs@python.org : 1
(behavioral : 1
python- : 9
list@python.org) : 1
'docs@' : 1
mailing : 27
volunteers; : 1
will : 6285
noticed : 11
though : 170
while : 595
processed : 119
also: : 469
been : 1871
submitted : 26
involved : 44
reporting : 64
Helping : 1
Comprehensive : 2
guide : 42
individuals : 1
interested : 35
GitHub : 20
pages : 47
primary : 92
contacts : 1
============================== : 39
(https://github.com/python/cpython/issues) : 1
offers : 70
form : 542
allows : 575
pertinent : 3
entered : 44
first : 1392
step : 97
filing : 1
determine : 199
whether : 530
problem : 204
already : 510
reported : 111
advantage : 49
doing : 143
aside : 7
saving : 47
developers' : 1
learn : 37
what : 471
done : 398
it; : 14
additional : 478
(in : 144
welcome : 16
provide : 547
can!) : 1
box : 60
page : 191
account : 55
"Sign : 1
up" : 1
possible : 903
anonymously : 1
Being : 7
now : 4965
logged : 85
Click : 2
"New : 2
issue" : 1
button : 50
bar : 75
submission : 5
"Title" : 2
"Comment" : 7
field : 564
enter : 49
*very* : 9
problem; : 2
fewer : 25
ten : 14
words : 126
describe : 62
including : 340
happen : 77
did : 98
Be : 27
were : 768
hardware : 36
(including : 103
appropriate) : 1
Each : 234
reviewed : 6
developer : 38
who : 71
needs : 248
receive : 105
update : 131
each : 1075
taken : 109
Report : 16
Effectively : 4
Article : 2
goes : 63
useful : 588
This : 5657
describes : 96
kind : 108
Bug : 3
Guidelines : 2
Some : 311
Mozilla : 10
=============================================== : 14
get : 644
patching : 27
Developer's : 5
core-mentorship : 1
friendly : 8
place : 200
answers : 9
pertaining : 11
fixing : 23
********************* : 3
These : 536
document : 294
processor : 26
specifically : 47
its : 1703
toolchain : 4
entirely : 53
volunteer : 3
effort : 25
look : 227
volunteers : 6
always : 1025
Many : 79
thanks : 26
go : 97
to: : 97
Fred : 14
L : 57
Drake : 12
Jr. : 4
creator : 12
original : 378
toolset : 7
writer : 39
much : 240
content; : 1
Docutils : 3
suite; : 2
Fredrik : 29
Lundh : 25
his : 19
got : 24
ideas : 9
======================================== : 20
contributed : 105
Misc/ACKS : 1
contributors : 10
only : 2476
contributions : 9
community : 19
such : 1307
wonderful : 3
Thank : 2
******************* : 10
======================= : 77
was : 2420
early : 42
1990s : 2
Guido : 71
van : 94
Rossum : 66
(CWI : 1
https://www.cwi.nl/) : 1
Netherlands : 2
successor : 3
ABC : 109
remains : 61
principal : 11
author : 45
although : 76
includes : 251
1995 : 6
(CNRI : 1
https://www.cnri.reston.va.us/) : 1
Reston : 2
Virginia : 3
where : 1224
he : 6
released : 99
several : 350
May : 45
core : 116
development : 79
team : 14
moved : 85
BeOpen : 7
PythonLabs : 5
October : 9
year : 131
Digital : 3
Creations : 1
(now : 2
Zope : 6
Corporation; : 1
https://www.zope.org/) : 1
2001 : 16
(PSF : 1
https://www.python.org/psf/) : 1
formed : 23
non- : 140
profit : 1
organization : 2
Intellectual : 1
Property : 6
sponsoring : 1
releases : 136
(see : 381
https://opensource.org/ : 1
Definition) : 1
Historically : 3
GPL-compatible; : 1
below : 321
summarizes : 9
+------------------+----------------+--------------+--------------+-------------------+ : 12
| : 18271
Year : 7
Owner : 9
GPL : 3
|==================|================|==============|==============|===================| : 1
thru : 2
n/a : 1
yes : 56
1.5.2 : 17
1995-1999 : 1
2.0+1.6.1 : 2
2.0.1 : 2
2.1+2.0.1 : 1
2002 : 9
above : 526
2001-now : 1
Note: : 678
GPL-compatible : 2
mean : 110
we're : 19
distributing : 11
licenses : 8
unlike : 55
let : 70
modified : 183
making : 182
GPL- : 1
combine : 32
GPL; : 1
Thanks : 30
outside : 125
worked : 26
Guido's : 2
direction : 25
============================================================ : 6
licensed : 5
Agreement : 27
3.8.6 : 1
dual : 9
Zero-Clause : 1
incorporated : 10
listed : 153
falling : 16
incomplete : 46
--------------------------------------- : 16
("PSF") : 1
Individual : 11
Organization : 5
("Licensee") : 3
associated : 277
Subject : 5
hereby : 17
grants : 3
Licensee : 23
nonexclusive : 2
royalty-free : 3
world-wide : 3
reproduce : 17
analyze : 9
perform : 162
and/or : 102
display : 253
publicly : 7
prepare : 23
derivative : 17
works : 324
alone : 27
however : 167
PSF's : 4
notice : 71
copyright : 55
i.e. : 15
"Copyright : 2
Foundation; : 1
Reserved" : 2
retained : 40
prepared : 19
event : 820
prepares : 5
incorporates : 9
part : 582
thereof : 9
wants : 45
herein : 2
then : 1476
agrees : 5
brief : 36
summary : 42
made : 410
"AS : 11
IS" : 11
basis : 36
MAKES : 7
NO : 24
REPRESENTATIONS : 3
WARRANTIES : 34
EXPRESS : 14
IMPLIED : 29
BY : 17
WAY : 11
OF : 129
EXAMPLE : 3
BUT : 23
NOT : 37
LIMITATION : 3
AND : 50
DISCLAIMS : 9
REPRESENTATION : 4
WARRANTY : 8
MERCHANTABILITY : 20
FITNESS : 21
PARTICULAR : 16
PURPOSE : 15
THAT : 3
USE : 34
WILL : 4
INFRINGE : 3
THIRD : 3
PARTY : 3
RIGHTS : 3
SHALL : 20
BE : 21
LIABLE : 20
LICENSEE : 3
OTHER : 18
USERS : 4
INCIDENTAL : 11
SPECIAL : 17
CONSEQUENTIAL : 17
DAMAGES : 26
LOSS : 17
RESULT : 3
MODIFYING : 3
DISTRIBUTING : 3
OTHERWISE : 5
USING : 4
DERIVATIVE : 3
THEREOF : 6
EVEN : 11
IF : 12
ADVISED : 11
POSSIBILITY : 11
automatically : 443
terminate : 51
upon : 133
material : 19
breach : 3
Nothing : 10
shall : 24
deemed : 23
relationship : 19
agency : 4
partnership : 3
joint : 4
venture : 3
grant : 5
permission : 87
trademarks : 3
trade : 4
trademark : 3
sense : 65
endorse : 8
promote : 10
products : 12
copying : 89
bound : 207
------------------------------------------- : 7
BEOPEN : 4
OPEN : 1
SOURCE : 4
VERSION : 3
("BeOpen") : 1
having : 164
office : 2
160 : 5
Saratoga : 1
Avenue : 2
Santa : 1
Clara : 1
95051 : 1
("the : 1
Software") : 1
non-exclusive : 1
SOFTWARE : 43
governed : 3
interpreted : 173
respects : 14
law : 9
California : 2
excluding : 19
conflict : 18
provisions : 3
"BeOpen : 1
Python" : 7
logos : 1
http://www.pythonlabs.com/logos.html : 1
granted : 16
1895 : 1
Preston : 2
White : 5
Drive : 1
VA : 1
20191 : 1
("CNRI") : 1
CNRI's : 4
1995-2001 : 1
Initiatives; : 1
Alternately : 3
lieu : 2
substitute : 17
following : 1616
(omitting : 1
quotes): : 2
"Python : 23
subject : 109
located : 71
internet : 42
persistent : 50
identifier : 139
(known : 3
handle): : 1
1895.22/1013 : 1
obtained : 69
proxy : 146
URL: : 2
http://hdl.handle.net/1895.22/1013." : 1
federal : 3
intellectual : 1
property : 156
United : 2
extent : 11
U.S : 1
apply : 111
Commonwealth : 2
Virginia's : 1
Notwithstanding : 1
foregoing : 2
regard : 12
incorporate : 7
non-separable : 1
previously : 204
distributed : 34
(GPL) : 1
govern : 4
arising : 6
respect : 49
Paragraphs : 1
clicking : 17
"ACCEPT" : 1
indicated : 48
-------------------------------------------------- : 12
1991 : 6
Amsterdam : 2
Permission : 15
modify : 188
fee : 8
appear : 196
copies : 77
both : 703
supporting : 82
advertising : 9
publicity : 6
STICHTING : 2
MATHEMATISCH : 2
CENTRUM : 3
ALL : 12
WITH : 21
REGARD : 6
THIS : 30
INCLUDING : 17
EVENT : 17
INDIRECT : 14
WHATSOEVER : 6
RESULTING : 6
FROM : 41
DATA : 18
PROFITS : 6
WHETHER : 17
AN : 9
ACTION : 15
CONTRACT : 17
NEGLIGENCE : 14
TORTIOUS : 6
ARISING : 17
OUT : 17
CONNECTION : 9
PERFORMANCE : 6
------------------------------------------------------------------- : 4
IS : 16
PROVIDED : 13
AUTHOR : 10
DIRECT : 9
======================================================= : 7
section : 656
growing : 6
acknowledgements : 1
third-party : 81
---------------- : 70
"_random" : 1
download : 36
http://ww : 1
w.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html : 1
verbatim : 6
comments : 104
code: : 92
C-program : 1
MT19937 : 1
improved : 80
2002/1/26 : 1
Coded : 1
Takuji : 2
Nishimura : 3
Makoto : 3
Matsumoto : 3
initialize : 72
init_genrand(seed) : 1
init_by_array(init_key : 1
key_length) : 1
(C) : 8
1997 : 5
Redistribution : 8
modification : 76
permitted : 41
met: : 12
Redistributions : 17
retain : 25
disclaimer : 18
materials : 10
derived : 161
COPYRIGHT : 9
HOLDERS : 6
CONTRIBUTORS : 14
LIMITED : 19
ARE : 8
DISCLAIMED : 8
OWNER : 3
EXEMPLARY : 8
(INCLUDING : 16
PROCUREMENT : 8
SUBSTITUTE : 8
GOODS : 8
SERVICES; : 8
PROFITS; : 8
BUSINESS : 8
INTERRUPTION) : 8
HOWEVER : 8
CAUSED : 8
ON : 9
THEORY : 8
LIABILITY : 19
STRICT : 11
TORT : 11
OTHERWISE) : 8
SUCH : 8
DAMAGE : 8
feedback : 5
very : 254
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html : 1
email: : 4
m-mat : 1
@ : 15
math.sci.hiroshima-u.ac.jp : 1
(remove : 2
space) : 11
------- : 289
"getaddrinfo()" : 12
"getnameinfo()" : 3
coded : 17
WIDE : 2
Project : 8
https://www.wide.ad.jp/ : 1
1996 : 2
1998 : 5
Neither : 9
nor : 87
PROJECT : 4
``AS : 5
IS'' : 5
---------------------------- : 44
notice: : 8
Sam : 11
Rushing : 3
SAM : 4
RUSHING : 2
----------------- : 130
contains : 626
Timothy : 4
O'Malley : 5
<timo@alum.mit.edu> : 1
portions : 21
Autonomous : 1
Zones : 1
Industries : 1
Inc. : 4
rights.. : 1
err.. : 1
offered : 13
public : 156
Author: : 28
Zooko : 1
O'Whielacronx : 1
http://zooko.com/ : 1
mailto:zooko@zooko.com : 1
Mojam : 2
Media : 5
Skip : 70
Montanaro : 8
1999 : 4
Bioreason : 2
Andrew : 56
Dalke : 5
1995-1997 : 1
Automatrix : 2
appears : 89
neither : 66
------------------------------- : 29
1994 : 2
Lance : 3
Ellinghouse : 3
Cathedral : 1
City : 2
Republic : 1
America : 2
LANCE : 2
ELLINGHOUSE : 2
Modified : 4
Jack : 15
Jansen : 11
July : 8
1995: : 1
actual : 231
line-by-line : 4
ascii : 14
1000-fold : 1
speedup : 28
still : 459
compliant : 30
-------------------------- : 45
(c) : 15
1999-2002 : 2
Secret : 3
Labs : 7
AB : 15
obtaining : 11
agree : 1
understood : 20
comply : 5
conditions: : 6
SECRET : 2
LABS : 2
MERCHANT- : 1
ABILITY : 1
---------- : 64
"test_epoll" : 1
2001-2006 : 1
Twisted : 3
Matrix : 3
Laboratories : 1
free : 170
charge : 7
person : 10
(the : 416
"Software") : 3
deal : 36
restriction : 34
merge : 23
publish : 10
sublicense : 4
sell : 6
permit : 19
persons : 4
whom : 4
furnished : 4
included : 308
substantial : 12
WITHOUT : 5
KIND : 4
NONINFRINGEMENT : 3
AUTHORS : 3
CLAIM : 3
DEALINGS : 3
------------- : 119
interface: : 11
Doug : 2
2006 : 15
James : 16
Knight : 2
2007 : 3
Christian : 116
Heimes : 95
--------- : 87
"Python/pyhash.c" : 1
Marek : 2
Majkowski' : 1
Dan : 10
Bernstein's : 1
note: : 11
<MIT : 1
License> : 2
2013 : 9
Majkowski : 1
<marek@popcount.org> : 1
</MIT : 1
Original : 126
location: : 3
https://github.com/majek/csiphash/ : 1
Solution : 2
inspired : 20
from: : 4
Samuel : 5
Neves : 2
(supercop/crypto_auth/siphash24/little) : 1
djb : 1
(supercop/crypto_auth/siphash24/little2) : 1
Jean-Philippe : 1
Aumasson : 1
(https://131002.net/siphash/siphash24.c) : 1
--------------- : 82
"Python/dtoa.c" : 2
supplies : 27
doubles : 4
David : 73
M : 29
Gay : 2
currently : 293
https : 1
://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c : 1
retrieved : 81
March : 9
2009 : 5
/**************************************************************** : 1
Lucent : 1
Technologies : 1
entire : 145
BEING : 1
NEITHER : 1
NOR : 1
LUCENT : 1
CONCERNING : 1
ITS : 2
***************************************************************/ : 1
performance : 200
Additionally : 51
installers : 38
we : 536
here: : 11
ISSUES : 1
============== : 67
toolkit : 13
stays : 5
i.e : 81
SSLeay : 2
texts : 12
Actually : 13
BSD-style : 1
contact : 3
openssl-core@openssl.org : 2
/* : 245
==================================================================== : 6
1998-2008 : 1
mentioning : 3
acknowledgment: : 2
"This : 7
product : 40
developed : 17
Toolkit : 4
(http://www.openssl.org/)" : 2
"OpenSSL : 2
Toolkit" : 1
Project" : 1
Products : 1
"OpenSSL" : 2
whatsoever : 2
EXPRESSED : 1
cryptographic : 17
Eric : 71
Young : 5
(eay@cryptsoft.com) : 3
Tim : 69
Hudson : 11
(tjh@cryptsoft.com) : 2
*/ : 243
----------------------- : 38
1995-1998 : 1
conform : 37
Netscapes : 1
commercial : 9
non-commercial : 1
aheared : 1
found : 598
RC4 : 4
RSA : 9
lhash : 1
DES : 3
etc. : 14
code; : 16
covered : 44
except : 504
holder : 5
Young's : 1
notices : 3
removed : 641
given : 1351
attribution : 1
textual : 28
startup : 105
(online : 1
textual) : 1
acknowledgement: : 2
(eay@cryptsoft.com)" : 1
word : 76
'cryptographic' : 1
left : 289
out : 479
rouines : 1
being : 821
:-) : 7
thereof) : 8
apps : 8
(application : 1
code) : 15
(tjh@cryptsoft.com)" : 1
ERIC : 1
YOUNG : 1
licence : 2
publically : 1
cannot : 568
changed : 386
simply : 204
copied : 119
put : 143
another : 440
[including : 1
Licence.] : 1
----- : 294
"pyexpat" : 15
built : 220
unless : 237
configured : 115
"--with-system-expat": : 1
Thai : 5
Center : 4
Ltd : 3
Clark : 4
Cooper : 5
------ : 99
"_ctypes" : 7
"--with-system-libffi": : 1
1996-2008 : 1
Red : 7
Hat : 6
Inc : 5
``Software'') : 1
---- : 134
too : 207
build: : 3
1995-2011 : 1
Jean-loup : 2
Gailly : 2
Mark : 176
Adler : 2
'as-is' : 1
express : 12
implied : 20
warranty : 4
authors : 30
held : 67
liable : 7
damages : 2
anyone : 10
alter : 20
redistribute : 2
freely : 13
restrictions: : 3
origin : 24
misrepresented; : 1
claim : 9
wrote : 12
acknowledgment : 1
appreciated : 2
Altered : 2
plainly : 1
marked : 95
misrepresented : 1
altered : 18
jloup@gzip.org : 1
madler@alumni.caltech.edu : 1
project: : 4
2005 : 5
Don : 2
Owens : 1
license: : 2
-------- : 116
"_decimal" : 4
"--with-system-libmpdec": : 1
2008-2020 : 1
Stefan : 35
Krah : 6
------------------- : 67
("Lib/test/xmltestdata/c14n-20/") : 1
website : 10
https://www.w3.org/TR/xml-c14n2-testcases/ : 1
3-clause : 1
W3C(R) : 1
(MIT : 1
ERCIM : 1
Keio : 1
Beihang) : 1
g771.c : 1
SoX : 1
AdLib/Sound : 1
Blaster : 1
FM : 1
Music : 1
Chips : 1
(24 : 1
Feb : 10
1992) : 1
1992 : 1
Jeffrey : 18
S : 31
Lee : 12
jlee@smylex.uucp : 1
Warranty : 1
"as-is" : 1
makes : 336
quality : 13
fitness : 1
indirect : 13
incidental : 3
consequential : 1
inability : 2
contained : 152
within : 408
risk : 32
applicable : 37
modifications : 22
money : 2
charged : 1
beyond : 41
reasonable : 23
shipping : 5
duplication : 9
costs : 3
proprietary : 4
published : 19
consent : 1
******** : 4
">>>" : 5
prompt : 123
Often : 18
seen : 71
executed : 346
interactively : 23
"..." : 18
refer : 162
entering : 22
indented : 66
pair : 169
right : 264
delimiters : 20
(parentheses : 1
square : 80
brackets : 57
curly : 22
braces : 30
triple : 18
quotes) : 4
specifying : 249
"Ellipsis" : 13
tool : 105
tries : 77
3.x : 40
incompatibilities : 9
detected : 89
traversing : 14
"lib2to3"; : 1
standalone : 32
"Tools/scripts/2to3" : 1
complement : 11
*duck-typing* : 1
providing : 146
way : 748
define : 367
techniques : 10
"hasattr()" : 14
clumsy : 1
subtly : 7
wrong : 112
(for : 258
methods) : 22
introduce : 32
inherit : 90
recognized : 69
"isinstance()" : 33
"issubclass()"; : 1
comes : 70
module) : 60
annotation : 80
label : 62
parameter : 1450
convention : 120
*type : 49
hint* : 1
accessed : 165
global : 380
stored : 344
respectively : 165
*variable : 6
annotation* : 6
*function : 4
484** : 32
526** : 15
Also : 261
passed : 1095
*function* : 34
*method*) : 1
There : 496
kinds : 58
argument: : 38
*keyword : 5
argument*: : 2
preceded : 29
"name=") : 1
"**" : 34
"3" : 23
"5" : 15
keyword : 766
"complex()": : 1
complex(real=3 : 1
imag=5) : 1
complex(**{'real': : 1
'imag': : 1
5}) : 1
*positional : 2
beginning : 143
*iterable* : 105
"*" : 76
calls: : 15
complex(3 : 1
5) : 61
complex(*(3 : 1
5)) : 7
assigned : 145
named : 618
governing : 5
Syntactically : 1
represent : 205
argument; : 15
evaluated : 114
*parameter* : 5
glossary : 11
question : 32
difference : 155
362** : 3
controls : 93
defining : 109
"__aenter__()" : 9
"__aexit__()" : 11
Introduced : 12
492** : 23
*asynchronous : 48
iterator* : 27
looks : 132
coroutine : 272
defined : 1023
def" : 32
producing : 49
series : 72
usable : 79
Usually : 50
refers : 94
intended : 211
meaning : 261
clear : 121
avoids : 72
ambiguity : 16
"await" : 85
generator* : 8
"__anext__()" : 11
awaitable : 44
until : 448
temporarily : 69
suspends : 5
remembering : 4
pending : 72
try-statements) : 2
effectively : 39
resumes : 14
returned : 1438
picks : 4
off : 129
525** : 8
iterable : 298
Must : 23
"__aiter__()" : 6
implements : 204
"__anext__" : 8
*awaitable* : 25
resolves : 26
awaitables : 15
iterator's : 16
raises : 577
"StopAsyncIteration" : 13
usually : 265
referenced : 76
dotted : 42
*o* : 156
*a* : 87
*o.a* : 1
give : 108
whose : 287
"setattr()" : 8
Such : 59
accessible : 90
need : 842
"getattr()" : 26
*coroutine* : 20
"__await__()" : 13
BDFL : 1
Benevolent : 2
Dictator : 2
a.k.a : 4
*file : 67
object* : 321
able : 188
*bytes-like : 134
objects* : 58
opened : 193
("'rb'" : 1
"'wb'" : 10
"'rb+'") : 1
"sys.stdin.buffer" : 1
"sys.stdout.buffer" : 1
"io.BytesIO" : 15
"gzip.GzipFile" : 5
*text : 22
file* : 14
borrowed : 34
count : 252
becomes : 114
dangling : 16
pointer : 345
destroyed : 50
remove : 223
last : 443
*strong : 17
reference* : 27
destroy : 11
"Py_INCREF()" : 15
*borrowed : 8
recommended : 200
in-place : 49
before : 1014
"Py_NewRef()" : 7
bytes-like : 29
supports : 771
export : 27
C-*contiguous* : 3
"array.array" : 13
Bytes-like : 1
data; : 10
sending : 82
often : 196
"read-write : 1
objects" : 4
require : 209
("read-only : 1
objects"); : 1
cached : 74
".pyc" : 104
second : 459
(recompilation : 1
avoided) : 1
"intermediate : 1
language" : 1
said : 26
*virtual : 6
machine* : 2
executes : 69
Do : 135
note : 161
bytecodes : 30
machines : 57
stable : 67
instructions : 77
possibly : 93
set : 2799
*argument*) : 1
syntax: : 22
callable(argument1 : 1
argument2 : 1
...) : 48
*method* : 25
"__call__()" : 9
subroutine : 2
user-defined : 82
normally : 189
level : 539
(i.e. : 40
class) : 19
familiar : 30
expressed : 43
sum : 41
imaginary : 43
multiples : 8
unit : 71
root : 267
"-1") : 2
"i" : 29
mathematics : 6
"j" : 8
engineering : 5
latter : 126
notation; : 2
suffix : 66
e.g. : 28
"3+1j" : 1
equivalents : 12
fairly : 26
mathematical : 35
it's : 442
almost : 69
certain : 212
safely : 55
ignore : 122
"__enter__()" : 43
"__exit__()" : 49
343** : 7
depending : 190
similar : 368
However : 335
one : 2075
main : 313
concurrent : 24
contiguous : 23
considered : 239
exactly : 227
either : 789
*C-contiguous* : 1
*Fortran : 1
contiguous* : 1
Zero-dimensional : 2
Fortran : 10
one-dimensional : 3
laid : 4
increasing : 21
indexes : 32
starting : 206
zero : 474
multidimensional : 4
C-contiguous : 6
varies : 26
fastest : 12
visiting : 6
address : 464
generalized : 10
subroutines : 5
Subroutines : 3
exited : 45
resumed : 20
They : 319
introduced : 167
canonical : 59
python.org : 21
term : 37
"CPython" : 3
necessary : 252
distinguish : 34
Jython : 20
IronPython : 6
returning : 277
applied : 145
transformation : 26
"@wrapper" : 2
"classmethod()" : 19
"staticmethod()" : 18
merely : 18
syntactic : 29
sugar : 8
semantically : 15
equivalent: : 13
def : 1642
f(arg): : 3
f : 99
= : 6304
staticmethod(f) : 2
@staticmethod : 9
concept : 37
exists : 223
commonly : 83
defines : 400
"__get__()" : 27
"__set__()" : 16
"__delete__()" : 8
triggered : 46
Normally : 43
*a.b* : 1
*b* : 101
respective : 32
gets : 116
understanding : 13
because : 642
they : 1313
descriptors' : 1
associative : 2
mapped : 74
"__hash__()" : 51
"__eq__()" : 33
Called : 131
Perl : 16
comprehension : 53
compact : 34
"results : 2
{n: : 1
n : 157
** : 53
range(10)}" : 2
generates : 67
"n" : 36
"n : 10
2" : 15
"dict.keys()" : 7
"dict.values()" : 9
"dict.items()" : 8
views : 26
dictionary’s : 1
means : 579
reflects : 16
force : 59
become : 130
"list(dictview)" : 1
docstring : 110
While : 131
ignored : 348
"__doc__" : 32
enclosing : 36
Since : 217
introspection : 46
duck-typing : 3
interface; : 5
("If : 1
duck : 5
quacks : 1
duck.") : 1
emphasizing : 4
rather : 558
well-designed : 1
improves : 30
flexibility : 34
allowing : 100
polymorphic : 3
Duck-typing : 1
"type()" : 10
(Note : 49
complemented : 1
*abstract : 25
classes*.) : 1
typically : 170
employs : 2
*EAFP* : 3
EAFP : 2
Easier : 1
ask : 26
forgiveness : 1
coding : 31
assumes : 50
existence : 29
valid : 354
catches : 24
assumption : 12
proves : 2
false : 266
clean : 47
characterized : 2
presence : 61
technique : 36
contrasts : 5
*LBYL* : 1
piece : 24
accumulation : 2
contrast : 33
constructs : 36
*statement*s : 1
Assignments : 9
interact : 25
f-string : 26
prefixed : 43
"'f'" : 19
"'F'" : 15
"f-strings" : 1
formatted : 182
498** : 5
exposing : 7
file-oriented : 1
(with : 42
"read()" : 74
"write()") : 1
Depending : 31
mediate : 1
on- : 3
disk : 75
storage : 68
communication : 36
device : 112
input/output : 4
in-memory : 18
etc.) : 61
*file-like : 11
*streams* : 1
actually : 251
three : 337
categories : 30
objects: : 43
*binary : 16
files* : 5
buffered : 86
Their : 32
"open()" : 142
file-like : 130
synonym : 19
encode : 74
guarantee : 48
successfully : 67
128 : 21
raise : 929
"UnicodeError" : 16
"sys.getfilesystemencoding()" : 11
"sys.getfilesystemencodeerrors()" : 3
*filesystem : 39
handler* : 30
"PyConfig_Read()" : 12
function: : 126
"filesystem_encoding" : 7
"filesystem_errors" : 7
"PyConfig" : 18
*locale : 11
encoding* : 21
*loader* : 27
finder: : 1
*meta : 11
finders* : 8
"sys.meta_path" : 29
*path : 38
"sys.path_hooks" : 26
302** : 35
420** : 13
451** : 13
floor : 27
division : 92
rounds : 16
down : 86
nearest : 43
integer : 899
"//" : 21
"11 : 1
// : 73
4" : 3
evaluates : 44
"2" : 56
"2.75" : 1
float : 237
true : 656
"(-11) : 1
"-3" : 8
"-2.75" : 1
rounded : 51
*downward* : 1
238** : 5
caller : 169
*arguments* : 7
*annotation* : 4
hints*: : 2
value: : 417
sum_two_numbers(a: : 1
int : 1067
b: : 15
int) : 28
-> : 205
int: : 12
+ : 517
b : 327
explained : 33
"from : 92
<feature>" : 1
directs : 5
semantics : 157
*feature* : 4
importing : 110
evaluating : 35
did) : 1
default: : 19
>>> : 7894
__future__.division : 1
_Feature((2 : 1
0 : 791
'alpha' : 2
2) : 126
(3 : 48
0) : 120
8192) : 1
freeing : 7
anymore : 58
performs : 67
counting : 49
collector : 101
detect : 85
break : 140
cycles : 55
controlled : 48
*generator : 8
normal : 280
for-loop : 4
"next()" : 26
*generator* : 21
fresh : 23
invocation) : 2
followed : 201
range : 312
combined : 76
sum(i*i : 2
i : 310
range(10)) : 9
# : 2965
squares : 20
81 : 9
285 : 2
composed : 14
implementing : 143
determined : 115
dispatch : 38
*single : 2
dispatch* : 1
"functools.singledispatch()" : 5
443** : 2
*type* : 61
parameterized; : 1
hints* : 3
*annotations* : 3
alias : 190
483** : 4
585** : 46
*global : 6
lock* : 6
lock : 326
mechanism : 134
*CPython* : 8
assure : 8
*bytecode* : 14
simplifies : 19
critical : 17
"dict") : 5
implicitly : 122
safe : 82
against : 181
Locking : 2
easier : 157
multi-threaded : 23
expense : 8
afforded : 1
multi-processor : 1
designed : 105
computationally : 1
intensive : 3
Past : 1
efforts : 10
"free-threaded" : 1
(one : 13
granularity) : 1
successful : 60
suffered : 2
single- : 13
believed : 7
overcoming : 1
complicated : 83
therefore : 124
costlier : 1
hash-based : 28
pyc : 12
last- : 2
validity : 15
hashable : 26
*hashable* : 43
never : 290
(it : 39
method) : 31
compared : 126
Hashable : 1
compare : 128
equal : 328
Hashability : 1
internally : 123
Most : 159
hashable; : 1
(such : 229
dictionaries) : 2
not; : 7
frozensets) : 4
user- : 18
unequal : 13
(except : 49
themselves) : 3
"id()" : 13
Integrated : 4
Learning : 6
editor : 77
ships : 9
play : 19
important : 146
role : 13
places : 80
entries*) : 1
searched : 80
finder* : 26
During : 21
subpackages : 11
come : 50
parent : 218
package's : 46
"__path__" : 40
finds : 51
loads : 30
module; : 23
*finder* : 19
immediately : 222
Just : 35
launch : 28
"python" : 35
(possibly : 33
selecting : 21
computer's : 4
menu) : 2
powerful : 35
(remember : 3
"help(x)") : 1
opposed : 25
distinction : 25
blurry : 2
Interpreted : 1
shorter : 23
development/debug : 1
cycle : 91
ones : 90
generally : 113
slowly : 4
*interactive* : 1
shutdown : 69
asked : 25
shut : 8
enters : 7
phase : 27
gradually : 3
allocated : 192
*garbage : 5
collector* : 2
trigger : 66
destructors : 6
encounter : 14
relies : 23
(common : 1
machinery) : 1
reason : 107
finished : 60
capable : 18
"tuple") : 2
non-sequence : 2
"__iter__()" : 39
"__getitem__()" : 68
*sequence* : 20
Iterables : 1
("zip()" : 1
"map()" : 31
"iter()" : 19
unnamed : 11
hold : 84
duration : 43
*iterator* : 39
representing : 268
"__next__()" : 34
"next()") : 1
successive : 22
"StopIteration" : 53
At : 110
exhausted : 42
further : 172
again : 198
accepted : 172
notable : 18
attempts : 79
iteration : 142
passes : 79
"list") : 3
produces : 141
Attempting : 19
previous : 286
empty : 800
**CPython : 40
detail:** : 40
consistently : 32
requirement : 33
collation : 5
sorting : 55
ordering : 84
"locale.strxfrm()" : 2
produce : 174
sort : 103
conventions : 30
accept : 319
ordered : 61
grouped : 26
"min()" : 14
"max()" : 16
"sorted()" : 27
"list.sort()" : 20
"heapq.merge()" : 1
"heapq.nsmallest()" : 2
"heapq.nlargest()" : 2
"itertools.groupby()" : 2
ways : 155
"str.lower()" : 2
serve : 28
insensitive : 9
sorts : 27
Alternatively : 37
"lambda" : 26
"lambda : 6
r: : 6
(r[0] : 1
r[2])" : 1
"operator.attrgetter()" : 2
"operator.itemgetter()" : 2
"operator.methodcaller()" : 1
*argument* : 13
anonymous : 22
inline : 90
consisting : 60
*expression* : 23
[parameters]: : 1
expression" : 6
LBYL : 2
leap : 16
pre- : 9
introducing : 18
race : 83
"the : 12
looking" : 1
leaping" : 1
"if : 29
mapping: : 6
mapping[key]" : 1
fail : 194
removes : 57
*key* : 178
*mapping* : 24
solved : 13
LC_CTYPE : 21
"locale.setlocale(locale.LC_CTYPE : 1
new_locale)" : 1
(ex: : 36
""cp1252"") : 1
Android : 62
VxWorks : 41
""utf-8"" : 11
"locale.getencoding()" : 7
Despite : 8
akin : 3
linked : 63
O(1) : 8
"result : 2
['{:#04x}'.format(x) : 1
x : 449
range(256) : 1
% : 244
0]" : 1
even : 515
hex : 41
(0x..) : 1
255 : 45
omitted : 190
"range(256)" : 1
loader : 101
"load_module()" : 16
"importlib.abc.Loader" : 2
class* : 24
informal : 8
*special : 4
method* : 3
mapping : 381
"collections.abc.Mapping" : 13
"collections.abc.MutableMapping" : 6
"collections.defaultdict" : 8
"collections.OrderedDict" : 18
"collections.Counter" : 7
Meta : 4
"importlib.abc.MetaPathFinder" : 9
implement : 356
responsible : 66
taking : 51
those : 503
oriented : 20
users : 264
arises : 7
elegant : 7
adding : 178
thread-safety : 4
tracking : 36
singletons : 19
(which : 226
"self") : 3
*nested : 3
scope* : 1
serves : 35
organizational : 2
*importing* : 2
*package* : 28
import-related : 8
load : 128
"importlib.machinery.ModuleSpec" : 3
*method : 6
order* : 5
change : 647
*immutable* : 9
"named : 3
tuple" : 2
applies : 102
inherits : 83
indexable : 4
Several : 52
"time.localtime()" : 10
"os.stat()" : 43
"sys.float_info": : 1
sys.float_info[1] : 1
indexed : 27
1024 : 18
sys.float_info.max_exp : 1
isinstance(sys.float_info : 1
tuple) : 17
True : 336
examples) : 3
regular : 479
hand : 73
"collections.namedtuple()" : 15
adds : 198
extra : 158
hand-written : 2
namespaces : 38
nested : 190
modularity : 1
preventing : 12
naming : 30
conflicts : 25
"builtins.open" : 2
"os.open()" : 16
distinguished : 10
aid : 11
readability : 33
maintainability : 1
"random.seed()" : 4
"itertools.islice()" : 4
physical : 42
*regular : 3
package* : 7
"__init__.py" : 24
*module* : 60
scope : 155
ability : 96
outer : 40
scopes : 32
innermost : 15
Likewise : 18
new-style : 22
flavor : 10
earlier : 172
could : 539
newer : 104
versatile : 4
"__slots__" : 42
"__getattribute__()" : 25
(attributes : 3
value) : 122
(methods) : 2
ultimate : 3
*new-style : 2
submodules : 38
recursively : 67
Technically : 2
*namespace : 9
entity : 70
specifies : 327
arguments) : 21
five : 33
parameter: : 10
*positional-or-keyword*: : 1
*positionally* : 1
argument* : 2
*foo* : 9
*bar* : 4
following: : 62
func(foo : 2
bar=None): : 1
*positional-only*: : 1
supplied : 258
position : 327
"/" : 55
*posonly1* : 1
*posonly2* : 1
func(posonly1 : 1
posonly2 : 1
positional_or_keyword): : 1
*keyword-only*: : 1
var-positional : 5
bare : 30
*kw_only1* : 1
*kw_only2* : 1
func(arg : 1
kw_only1 : 1
kw_only2): : 1
*var-positional*: : 1
addition : 306
parameters) : 8
prepending : 7
*args* : 105
func(*args : 3
**kwargs): : 39
*var-keyword*: : 1
arbitrarily : 21
*kwargs* : 33
"inspect.Parameter" : 3
*import : 14
path* : 9
consults : 3
(i.e : 116
hook*) : 1
knows : 37
locate : 34
entry* : 6
"importlib.abc.PathEntryFinder" : 4
"sys.path_hook" : 1
searches : 51
path-like : 22
"os.PathLike" : 26
converted : 309
"os.fspath()" : 5
function; : 33
"os.fsdecode()" : 6
"os.fsencode()" : 7
result : 1099
519** : 2
Proposal : 5
design : 79
describing : 94
concise : 20
technical : 13
rationale : 27
proposed : 25
mechanisms : 43
proposing : 4
major : 97
collecting : 20
documenting : 7
decisions : 10
gone : 21
consensus : 3
dissenting : 2
opinions : 2
1** : 3
portion : 56
file) : 36
provisional : 27
deliberately : 12
excluded : 38
library's : 23
backwards : 72
guarantees : 34
incompatible : 41
(up : 9
removal : 63
interface) : 14
occur : 129
gratuitously : 1
serious : 9
fundamental : 28
flaws : 7
uncovered : 2
missed : 16
inclusion : 20
Even : 51
"solution : 1
resort" : 2
attempt : 156
identified : 38
continue : 116
evolve : 2
locking : 48
problematic : 21
periods : 11
411** : 5
*provisional : 11
API* : 6
3000 : 6
Nickname : 1
(coined : 1
ago : 5
something : 184
distant : 2
future.) : 3
abbreviated : 23
"Py3k" : 1
Pythonic : 4
idea : 67
closely : 26
follows : 84
idioms : 7
concepts : 24
idiom : 26
construct : 82
unfamiliar : 6
numerical : 28
counter : 84
instead: : 16
range(len(food)): : 1
print(food[i]) : 1
cleaner : 8
method: : 67
food: : 1
print(piece) : 1
qualified : 61
showing : 46
"path" : 90
module's : 248
3155** : 2
top-level : 95
name: : 46
C: : 52
D: : 9
meth(self): : 4
C.__qualname__ : 1
'C' : 14
C.D.__qualname__ : 2
'C.D' : 2
C.D.meth.__qualname__ : 2
'C.D.meth' : 2
*fully : 2
name* : 9
e.g : 223
"email.mime.text": : 1
email.mime.text : 1
email.mime.text.__name__ : 1
'email.mime.text' : 1
drops : 14
deallocated : 27
visible : 78
element : 465
Programmers : 9
"sys.getrefcount()" : 1
declaration : 98
saves : 18
pre-declaring : 1
space : 194
eliminating : 11
Though : 14
popular : 37
somewhat : 33
tricky : 14
rare : 36
large : 211
memory-critical : 1
indices : 69
"__len__()" : 18
"collections.abc.Sequence" : 13
richer : 2
"count()" : 10
"index()" : 9
"__contains__()" : 18
"__reversed__()" : 9
expanded : 59
registered : 156
"register()" : 20
{c : 1
c : 166
'abracadabra' : 5
'abc'}" : 2
"{'r' : 1
'd'}" : 1
*generic : 8
function* : 19
chosen : 55
slice : 120
subscript : 18
notation : 121
"[]" : 17
"variable_name[1:3:5]" : 1
bracket : 6
(subscript) : 1
"slice" : 7
double : 136
underscores : 56
documented : 149
(a : 163
"block" : 14
strong : 41
increments : 17
decrements : 10
deleted : 101
"Py_DECREF()" : 34
exiting : 34
leaking : 25
"U+0000"--"U+10FFFF") : 1
transfer : 37
serialized : 49
Serializing : 3
known : 177
"encoding" : 27
recreating : 4
"decoding" : 1
variety : 50
collectively : 3
referred : 56
"text : 1
encodings" : 1
accesses : 36
byte-oriented : 2
datastream : 1
("'r'" : 1
"'w'") : 2
"sys.stdin" : 39
"sys.stdout" : 69
"io.StringIO" : 13
triple-quoted : 9
quotation : 13
mark : 83
(") : 2
apostrophe : 1
(') : 2
single-quoted : 2
reasons : 58
unescaped : 11
quotes : 59
span : 19
continuation : 31
especially : 94
determines : 78
is; : 2
"__class__" : 21
"type(obj)" : 2
assigning : 43
simplifying : 8
remove_gray_shades( : 1
colors: : 4
list[tuple[int : 2
int]]) : 1
int]]: : 1
readable : 90
this: : 174
tuple[int : 2
int] : 23
remove_gray_shades(colors: : 1
list[Color]) : 1
list[Color]: : 1
hint : 19
enforced : 15
refactoring : 6
"typing.get_type_hints()" : 26
universal : 24
newlines : 69
manner : 37
interpreting : 12
line: : 46
end-of-line : 6
"'\n'" : 28
"'\r\n'" : 8
Macintosh : 4
"'\r'" : 7
278** : 2
3116** : 2
"bytes.splitlines()" : 1
annotating : 10
optional: : 5
field: : 4
'annotation' : 2
Variable : 20
values: : 56
count: : 3
cooperatively : 1
isolated : 58
upgrade : 22
interfering : 6
behaviour : 203
computer : 40
emitted : 111
Zen : 3
Listing : 8
principles : 4
philosophies : 1
helpful : 58
listing : 48
""import : 1
this"" : 1
************************* : 9
Email: : 3
distutils-sig@python.org : 3
active : 110
share : 69
collaborate : 3
benefiting : 2
(and : 192
rare!) : 2
potentially : 68
covers : 47
sharing : 30
projects : 30
corporate : 2
institutional : 2
organisations : 2
policies : 35
around : 199
Please : 72
========= : 37
preferred : 94
environment* : 2
semi-isolated : 1
wide : 53
"virtualenv" : 4
predecessor) : 1
aren't : 86
repository : 13
Authority : 7
maintenance : 29
evolution : 3
packaging : 28
trackers : 6
Bitbucket : 3
phased : 6
foundation : 7
infrastructure : 13
lives : 19
coordinate : 31
development) : 3
3.5: : 230
Guide: : 8
=========== : 54
Index: : 2
python : 262
-m : 206
SomePackage : 10
users) : 3
assume : 58
environment*.For : 2
adjust : 25
PATH : 11
selected : 111
It's : 148
exact : 173
minimum : 98
comparator : 2
">" : 36
"<" : 32
enclosed : 43
quotes: : 11
SomePackage==1.0.4 : 1
"SomePackage>=1.0.4" : 1
suitable : 139
attempting : 68
requested : 146
explicitly: : 4
--upgrade : 5
regarding : 27
capabilities : 44
commands : 222
shown : 116
============= : 72
quick : 24
links : 122
------------------------------------------------------------ : 7
bundling : 14
"bootstrapped" : 1
described : 422
Requirements : 2
----------------------------------------------- : 11
"--user" : 3
"python : 77
install" : 20
easy : 118
Scientific : 4
---------------------------------------------------------------- : 3
versioned : 5
combination : 80
"-m" : 46
"pip": : 1
python2 : 1
python2.7 : 1
python3 : 86
python3.4 : 1
Appropriately : 1
"py" : 13
switch: : 1
py : 17
-2 : 17
-2.7 : 1
-3 : 10
-3.4 : 1
========================== : 45
------------------------------------------ : 14
requires : 247
interfere : 6
component : 78
unexpectedly : 15
upgraded : 15
per-user : 5
potential : 83
--default-pip : 1
relied : 14
heavily : 11
"wheel" : 4
wheels : 3
least : 236
diminish : 1
regularly : 8
pre-built : 2
needing : 33
themselves : 76
yet : 136
locally : 31
********************** : 16
=========================================================== : 4
believes : 1
extremely : 13
contributes : 3
clarity : 16
average : 30
love : 6
begin/end : 6
disagreement : 1
perceived : 2
human : 15
reader : 70
Occasionally : 6
programmers : 38
fragment : 46
(x : 22
<= : 182
y) : 59
x++; : 1
y--; : 1
z++; : 1
Only : 142
"x++" : 2
leads : 20
believe : 3
experienced : 2
stare : 1
wondering : 3
"y" : 37
decremented : 9
"x : 115
> : 109
y" : 63
Because : 109
prone : 5
coding-style : 1
After : 127
becoming : 8
reading : 324
feel : 16
uneasy : 1
write) : 2
considerably : 8
longer : 1011
wastes : 1
valuable : 8
harder : 9
Ideally : 9
fit : 62
(say : 7
20--30 : 1
lines) : 8
20 : 70
solely : 33
due : 184
lack : 30
indentation- : 1
certainly : 13
helps : 46
=================================================================== : 7
================================================== : 12
Users : 34
surprised : 6
1.0 : 64
0.19999999999999996 : 1
think : 40
"double" : 6
(typically : 21
53 : 17
bits) : 5
turn : 86
rely : 50
far : 61
concerned : 8
behaves : 76
easily : 89
after: : 2
"x" : 89
(very : 2
good) : 1
approximation : 23
"1.2" : 1
typical : 73
1.0011001100110011001100110011001100110011001100110011 : 1
(binary) : 8
exactly: : 2
1.1999999999999999555910790149937383830547332763671875 : 1
(decimal) : 3
bits : 191
provides : 766
floats : 74
15--16 : 1
digits : 200
accuracy : 17
fuller : 2
explanation : 50
chapter : 73
================================= : 16
advantages : 9
performance: : 1
knowing : 14
allocate : 47
unchanging : 1
"elemental" : 1
amount : 101
activity : 29
else : 197
"eight" : 1
Modula-3 : 9
turns : 25
obvious : 32
"self.x" : 1
"self.meth()" : 1
absolutely : 13
heart : 2
(assuming : 15
globals : 75
recognizable) : 1
you'd : 34
"m_" : 1
prefix : 229
explicitness : 1
Second : 20
overridden : 138
"::" : 1
"baseclass.methodname(self : 1
<argument : 1
list>)" : 1
particularly : 39
extend : 56
thus : 98
somehow : 9
Finally : 58
solves : 18
assignment: : 9
(by : 52
definition!) : 1
declared : 108
global) : 2
meant : 61
assign : 67
preferably : 8
efficiency : 22
reasons) : 2
pity : 1
explicit : 166
"self.var" : 2
nicely : 9
Similarly : 45
unqualified : 6
instance's : 52
walrus : 9
":=" : 6
expression: : 15
chunk : 69
:= : 22
fp.read(200): : 1
print(chunk) : 2
572** : 7
================================================================================================================ : 2
said: : 3
(a) : 3
reads : 86
postfix : 1
infix!) : 1
tradition : 2
likes : 7
notations : 8
visuals : 1
mathematician : 1
thinking : 7
Compare : 17
rewrite : 12
formula : 8
x*(a+b) : 1
x*a : 1
x*b : 1
clumsiness : 1
thing : 108
OO : 1
(b) : 11
says : 18
len(x) : 2
*know* : 2
asking : 9
tells : 46
me : 19
things: : 9
contrary : 3
x.len() : 1
inheriting : 27
len() : 7
Witness : 1
confusion : 27
occasionally : 30
get() : 15
keys() : 13
write() : 8
https://mail.python.org/pipermail/python-3000/2006-November/004 : 1
643.html : 1
================================================================ : 5
became : 32
widely : 27
uncomfortable : 1
" : 79
".join(['1' : 1
'2' : 16
'4' : 3
'8' : 3
'16']) : 1
gives : 138
result: : 31
"1 : 18
16" : 1
runs : 165
along : 122
of: : 23
"It : 5
really : 95
ugly : 10
(string : 3
constant)" : 1
answer : 28
might : 322
allowed : 261
logical : 63
unavailable : 30
objection : 1
cast : 37
as: : 42
"I : 1
telling : 12
join : 23
constant" : 1
Sadly : 3
seems : 14
difficulty : 4
"split()" : 31
16".split(" : 1
") : 25
instruction : 107
substrings : 14
delimited : 14
separator : 146
white : 20
"join()" : 29
iterate : 46
insert : 61
adjacent : 22
obeys : 2
Similar : 107
======================== : 54
try/except : 6
catching : 29
expensive : 31
idiom: : 8
try: : 208
mydict[key] : 6
KeyError: : 18
getvalue(key) : 2
dict : 269
wasn't : 30
mydict: : 1
else: : 152
"value : 2
dict.setdefault(key : 2
getvalue(key))" : 1
"getvalue()" : 4
cheap : 8
enough : 84
===================================================== : 9
"if.. : 2
elif.. : 3
else" : 2
"match : 1
case" : 2
possibilities : 10
{'a': : 18
function_1 : 1
'b': : 21
function_2 : 1
'c': : 10
self.method_1} : 1
func : 37
functions[value] : 1
func() : 5
simplify : 46
MyVisitor: : 1
visit_a(self): : 1
dispatch(self : 1
value): : 44
method_name : 1
'visit_' : 1
str(value) : 4
getattr(self : 1
method_name) : 1
method() : 1
suggested : 29
"visit_" : 1
coming : 12
untrusted : 32
attacker : 10
======================================================================================================== : 1
Answer : 3
Unfortunately : 30
pushes : 15
back : 290
moments : 5
Therefore : 76
Fortunately : 6
Stackless : 1
completely : 105
redesigned : 3
================================================ : 10
handle : 445
Unlike : 99
add : 524
lambdas : 11
shorthand : 32
invent : 3
that's : 117
yields) : 1
================================================================= : 2
Cython : 8
compiles : 28
Nuitka : 2
up-and-coming : 1
aiming : 3
depend : 91
inaccessible : 16
collect : 22
periodically : 10
deletes : 21
obtain : 69
tune : 7
collector's : 2
implementations : 240
PyPy) : 1
full-blown : 2
cause : 316
subtle : 18
porting : 31
depends : 153
fine : 40
CPython) : 2
probably : 119
descriptors: : 3
very_long_list_of_files: : 2
open(file) : 2
f.read(1) : 4
Indeed : 2
CPython's : 17
destructor : 45
*f* : 25
closes : 43
GC : 52
collected : 86
closed) : 1
varying : 8
intervals : 16
close : 172
statement; : 8
regardless : 101
scheme: : 5
f: : 86
===================================================================== : 2
hence : 35
portable : 42
(Yes : 4
Boehm : 1
assembler : 1
*most* : 1
mostly : 68
transparent : 18
transparent; : 1
it.) : 5
Traditional : 4
embedded : 111
replace : 129
malloc() : 4
free() : 3
embedding : 50
*own* : 2
Right : 10
properly : 161
============================================== : 12
circular : 24
impossible : 38
Purify : 3
complain : 10
these) : 2
aggressive : 6
cleaning : 11
exit : 302
try : 181
things : 116
deallocation : 17
deletions : 9
================================================= : 20
fundamentally : 4
thought : 15
Pascal : 11
records : 67
structs; : 1
they're : 61
operated : 6
Cartesian : 6
appropriately : 32
represented : 175
tend : 9
one-by-one : 1
"os.listdir('.')" : 1
once : 352
list's : 3
===================================== : 16
variable-length : 14
Lisp-style : 2
keeps : 39
array's : 5
head : 22
indexing : 42
"a[i]" : 5
cost : 28
independent : 65
appended : 71
inserted : 81
resized : 20
cleverness : 1
improve : 70
appending : 28
repeatedly; : 1
grown : 3
few : 174
resize : 18
============================================ : 16
resizable : 4
Compared : 6
B-trees : 1
far) : 2
circumstances : 45
simpler : 65
"hash()" : 14
per-process : 5
seed; : 1
"Python" : 8
-539294296 : 1
differs : 34
bit : 238
1142331976 : 1
calculate : 34
Assuming : 10
storing : 57
Big-O : 1
====================================== : 16
calculated : 34
But : 74
whoever : 1
move : 56
Then : 41
won't : 128
tried : 31
wouldn't : 26
bin : 5
first; : 8
"tuple(L)" : 1
creates : 236
"L" : 9
unacceptable : 4
proposed: : 1
(object : 1
ID) : 2
found; : 8
e.g.: : 35
mydict : 4
{[1 : 1
2]: : 2
'12'} : 1
print(mydict[[1 : 1
2]]) : 1
"KeyError" : 79
id : 110
"[1 : 5
2]" : 5
"==" : 34
"is" : 22
infinite : 67
Allow : 108
hard-to-track : 1
forgot : 3
accident : 11
invalidates : 4
invariant : 15
dictionaries: : 8
"d.keys()" : 1
read-only : 158
value; : 40
Entering : 2
marking : 17
reachable : 18
self- : 2
referential : 1
risk: : 2
wrap : 77
reside : 8
structure) : 3
remain : 58
ListWrapper: : 1
__init__(self : 109
the_list): : 1
self.the_list : 3
the_list : 1
__eq__(self : 6
other): : 18
other.the_list : 1
__hash__(self): : 4
l : 10
98767 : 1
len(l)*555 : 1
el : 6
enumerate(l): : 1
(hash(el) : 1
9999999) : 1
1001 : 2
Exception: : 16
(result : 5
7777777) : 1
333 : 5
computation : 31
possibility : 31
unhashable : 26
overflow : 109
Furthermore : 23
"o1 : 30
o2" : 30
(ie : 15
"o1.__eq__(o2) : 1
True") : 1
"hash(o1) : 1
hash(o2)" : 1
"o1.__hash__() : 1
o2.__hash__()") : 1
meet : 19
restrictions : 46
misbehave : 2
ListWrapper : 1
whenever : 93
wrapped : 131
anomalies : 2
Don't : 95
hard : 74
consequences : 7
meeting : 3
correctly : 332
warned : 4
situations : 59
matters : 13
wasteful : 2
remind : 5
fact : 113
fooled : 1
accidentally : 19
overwriting : 20
unsorted : 1
here's : 21
order: : 20
sorted(mydict): : 1
whatever : 69
mydict[key].. : 1
compile-time : 13
enforcement : 2
specifications : 29
construction : 26
lets : 74
(ABCs) : 5
"issubclass()" : 26
"Iterable" : 11
"Container" : 5
"MutableMapping" : 7
discipline : 3
regression : 185
test." : 1
tested : 45
isolation : 8
"stub" : 1
emulations : 3
frameworks : 35
exhaustive : 6
suites : 32
exercise : 13
"append()" : 21
list; : 14
increasingly : 5
test-driven : 1
course : 90
sloppy : 1
===================== : 76
1970s : 2
realized : 4
unrestricted : 2
lead : 77
messy : 4
"spaghetti" : 1
understand : 59
revise : 1
unneeded : 10
branch : 38
"if-else" : 1
expressions) : 5
"break") : 2
"structured : 1
goto" : 1
conveniently : 14
"go" : 1
"goto" : 2
label(Exception): : 1
declare : 40
condition: : 5
label() : 1
label: : 4
jump : 30
middle : 35
abuse : 3
anyway : 21
sparingly : 1
precisely : 18
odd : 29
backslashes: : 3
unpaired : 2
escapes : 64
closing : 76
quote : 42
leaving : 59
unterminated : 3
ease : 19
processors : 20
(chiefly : 1
engines) : 1
escape : 112
consider : 94
unmatched : 5
trailing : 185
disallow : 17
escaping : 17
r-strings : 1
trying : 100
pathnames : 13
forward : 77
slashes : 21
too: : 2
open("/mydir/file.txt") : 1
DOS : 13
dir : 12
r"\this\is\my\dos\dir" : 1
"\\" : 8
r"\this\is\my\dos\dir\ : 1
"[:-1] : 1
"\\this\\is\\my\\dos\\dir\\" : 1
wraps : 43
entrance : 1
obj: : 14
equivalent : 632
obj.a : 1
total : 131
obj.total : 2
Delphi : 1
unambiguous : 8
*always* : 15
advance : 13
referenced: : 1
snippet: : 6
foo(a): : 1
a: : 10
print(x) : 11
snippet : 26
"a" : 34
nothing : 158
us : 29
say : 61
nature : 26
benefit : 36
(reduction : 1
volume) : 4
achieved : 18
function(args).mydict[index][index].a : 1
21 : 32
function(args).mydict[index][index].b : 1
42 : 37
function(args).mydict[index][index].c : 1
63 : 3
ref : 6
function(args).mydict[index][index] : 1
ref.a : 1
ref.b : 1
ref.c : 1
side-effect : 10
speed : 111
resolved : 51
run-time : 25
"contextlib.closing(generator)" : 1
============================================================== : 5
colon : 57
primarily : 49
enhance : 6
experimental : 20
language) : 2
print(a) : 7
Notice : 39
slightly : 100
answer; : 1
English : 16
minor : 90
highlighting; : 1
decide : 31
comma : 69
[1 : 88
3,] : 1
('a' : 20
'b' : 68
'c',) : 1
d : 143
{ : 890
"A": : 2
5] : 16
"B": : 2
[6 : 2
7] : 6
} : 820
remember : 30
reordered : 1
Accidentally : 1
omitting : 9
diagnose : 5
[ : 48
"fee" : 2
"fie" : 1
"foo" : 70
"fum" : 2
] : 59
four : 74
three: : 1
"fiefoo" : 1
Always : 52
Allowing : 8
programmatic : 7
****************** : 15
=================== : 62
object-oriented : 18
high : 66
paradigms : 2
procedural : 7
functional : 41
combines : 10
remarkable : 2
extensible : 7
programmable : 2
portable: : 1
variants : 58
Beginner's : 3
introductory : 7
tutorials : 11
learning : 19
non-profit : 1
holds : 76
mission : 2
technology : 4
publicize : 1
home : 70
https://www.python.org/psf/ : 1
Donations : 1
tax-exempt : 1
US : 9
donation : 1
------------------------------------------------------ : 9
leave : 58
copyrights : 2
honor : 8
OK : 25
(modified : 1
unmodified) : 1
We : 126
explanations : 5
logo : 2
trademarked : 1
Consult : 27
Trademark : 1
Here's : 125
Rossum: : 1
had : 179
extensive : 25
experience : 20
learned : 11
very-high-level : 1
(although : 23
Python) : 23
gripes : 1
liked : 1
implementation) : 7
remedy : 1
complaints : 1
extensibility : 3
biggest : 11
Modula-2+ : 1
talked : 1
designers : 5
Amoeba : 5
administration : 7
Bourne : 2
My : 6
acutely : 1
importance : 5
occurred : 124
scripting : 8
fill : 52
foolish : 1
Amoeba-specific : 1
decided : 8
1989 : 3
Christmas : 1
holidays : 1
success : 185
colleagues : 1
February : 7
post : 11
USENET : 1
rest : 88
"Misc/HISTORY" : 1
------------------------ : 46
general-purpose : 8
areas : 15
(regular : 1
calculating : 16
files) : 31
protocols : 125
(HTTP : 4
XML- : 4
RPC : 14
POP : 7
IMAP) : 1
(unit : 2
profiling : 43
(system : 1
filesystems : 15
TCP/IP : 4
sockets) : 6
what's : 20
interest : 36
numbering : 4
numbered : 13
"A.B.C" : 6
"A.B": : 1
*A* : 11
incremented : 33
*B* : 10
earth- : 1
shattering : 1
*C* : 5
micro : 3
bugfix : 11
6** : 1
Not : 75
run-up : 1
denoted : 8
Alphas : 1
finalized; : 3
unexpected : 59
Betas : 1
preserving : 21
candidates : 6
frozen : 72
Alpha : 2
suffix: : 2
"aN" : 1
*N* : 22
"bN" : 1
"rcN" : 1
labeled : 5
*2.0aN* : 1
precede : 25
*2.0bN* : 1
*2.0rcN* : 1
*those* : 1
"+" : 42
"2.2+" : 1
unreleased : 1
practice : 64
"a0" : 1
"2.4a0" : 1
"sys.version" : 10
"sys.hexversion" : 2
"sys.version_info" : 13
-------------------------------------------- : 17
https://www.python.org/downloads/ : 2
https://github.com/python/cpython/ : 1
gzipped : 7
Sphinx-formatted : 1
pieces : 22
distributable : 1
UNIX : 40
Started : 3
compiling : 81
------------------------------------- : 9
https://docs.python.org/3/ : 4
PDF : 6
plain : 57
downloadable : 3
https://docs.python.org/3/download.html : 1
I've : 4
programmed : 3
--------------------------------------------------------- : 6
numerous : 8
books : 5
newsgroup : 9
devoted : 4
------------------------------------------------------- : 4
*comp.lang.python* : 4
gatewayed : 2
news : 8
unnecessary : 57
subscribe : 3
high-traffic : 1
hundreds : 5
postings : 8
day : 112
Usenet : 3
readers : 22
cope : 4
volume : 10
Announcements : 1
comp.lang.python.announce : 2
low-traffic : 1
moderated : 2
receives : 50
python-announce : 1
newsgroups : 2
https://www.python.org/community/lists/ : 1
announced : 1
comp.lang.python : 6
https://www.python.org/; : 1
RSS : 2
feed : 24
Git : 3
--------------------------------------------------- : 10
https://github.com/python/cpython/issues : 1
consult : 43
articles : 11
cite : 1
favorite : 5
book : 21
article : 64
quite : 59
outdated : 19
Jelke : 1
de : 23
Boer : 1
"Interactively : 1
Servers : 6
Language" : 3
Quarterly : 1
Volume : 3
(December : 1
1991) : 1
pp : 7
283--303 : 1
------------------------------ : 38
Yes : 18
wiki : 8
https://wiki.python.org/moin/PythonBooks : 1
bookstores : 1
Monty : 12
references; : 6
perhaps : 43
"language" : 1
www.python.org : 1
--------------------------------------------- : 10
project's : 3
managed : 40
Infrastructure : 2
Team : 6
here : 237
began : 10
"Monty : 7
Flying : 5
Circus" : 4
BBC : 2
comedy : 1
Van : 5
mysterious : 5
------------------------------------------------- : 8
:) : 2
--------------------- : 67
roughly : 23
18 : 30
months : 11
likely : 92
(**PEP : 111
602**) : 1
"bugfix" : 1
Bugfix : 2
3.6.2) : 1
stability; : 1
fixes : 96
guaranteed : 126
production-ready : 1
Python: : 25
supported : 638
Although : 38
maintained : 37
--------------------------------- : 40
millions : 2
difficult : 44
sales : 1
figures : 16
sites : 9
packaged : 9
whole : 98
story : 5
significant : 108
https://www.python.org/about/success : 1
Consulting : 1
proceedings : 1
past : 27
conferences : 4
reveal : 5
companies : 1
organizations : 2
High-profile : 1
Mailman : 2
notably : 16
Companies : 1
Google : 9
Yahoo : 1
Lucasfilm : 2
developments : 1
https://peps.python.org/ : 2
Proposals : 3
(PEPs) : 2
titled : 9
X.Y : 10
Schedule" : 1
hasn't : 42
discussed : 28
python-dev : 15
----------------------------------------------------------- : 8
fraction : 33
frowned : 2
there's : 96
updating : 27
documentation; : 6
invalidate : 10
stroke : 2
gradual : 1
5** : 2
procedure : 24
backward-incompatible : 1
minimizing : 5
disruption : 1
---------------------------------------------------- : 12
students : 13
typed : 37
subset : 69
Students : 1
served : 6
consistent : 99
importantly : 3
concentrate : 4
skills : 2
decomposition : 7
quickly : 45
loops : 78
procedures : 5
student : 11
unnatural : 1
presents : 17
complexity : 18
master : 20
slows : 3
pace : 5
decompose : 5
encapsulate : 11
necessarily : 76
topic : 14
students' : 2
aspects : 19
Like : 101
*do* : 4
four- : 1
calculator : 6
balancing : 2
gain : 8
satisfaction : 2
realistic : 9
fundamentals : 1
teaches : 2
reuse : 24
Third-party : 9
PyGame : 1
reach : 13
enables : 75
program's : 23
[] : 109
dir(L) : 2
['__add__' : 1
'__class__' : 4
'__contains__' : 3
'__delattr__' : 1
'__delitem__' : 2
'__dir__' : 1
'__doc__' : 11
'__eq__' : 2
'__format__' : 1
'__ge__' : 1
'__getattribute__' : 1
'__getitem__' : 3
'__gt__' : 1
'__hash__' : 3
'__iadd__' : 1
'__imul__' : 1
'__init__' : 2
'__iter__' : 3
'__le__' : 1
'__len__' : 3
'__lt__' : 1
'__mul__' : 1
'__ne__' : 1
'__new__' : 1
'__reduce__' : 1
'__reduce_ex__' : 1
'__repr__' : 2
'__reversed__' : 1
'__rmul__' : 1
'__setattr__' : 1
'__setitem__' : 2
'__sizeof__' : 1
'__str__' : 1
'__subclasshook__' : 1
'append' : 1
'clear' : 3
'copy' : 2
'count' : 2
'extend' : 2
'index' : 2
'insert' : 2
'pop' : 3
'remove' : 2
'reverse' : 3
'sort'] : 2
[d : 1
'__' : 5
d] : 1
['append' : 1
help(L.append) : 1
append: : 1
append(...) : 1
L.append(object) : 1
None : 310
append : 41
L.append(1) : 1
[1] : 327
cross-platform : 21
Emacs : 11
happy : 3
highlighting : 13
auto- : 1
indenting : 6
editing : 40
discuss : 15
education : 1
edu-sig : 1
************************** : 12
=================================== : 16
builds : 179
easiest : 21
(since : 24
fully : 123
platform(s) : 1
platform-specific : 42
================= : 66
freeze : 15
Freeze : 5
stand-alone : 7
freezing : 4
truly : 16
Tcl : 73
solution : 57
ship : 7
"TCL_LIBRARY" : 1
"TK_LIBRARY" : 1
integrated : 11
(stand-alone : 1
modules) : 15
(https://tix.sourceforge.net/) : 1
enabled : 213
"Tclsam_init()" : 1
etc : 101
"Modules/tkappinit.c" : 1
libtclsam : 1
libtksam : 1
(you : 8
well) : 8
handled : 201
waiting : 109
you'll : 86
restructure : 2
Xt's : 1
"XtAddInput()" : 1
mainloop : 10
Tkinter: : 1
often-heard : 1
complaint : 8
"bind()" : 4
pressed : 13
"keyboard : 1
focus" : 1
focus : 29
keyboard : 20
(but : 73
labels; : 1
takefocus : 2
option) : 15
*************** : 12
debugger : 102
breakpoints : 31
single-stepping : 1
------------------------------------------------------------------------------ : 2
debuggers : 13
adequate : 6
console-mode : 1
"documented : 1
Manual" : 1
(normally : 11
Tools/scripts/idle3) : 1
graphical : 12
PythonWin : 6
cool : 1
non-PythonWin : 1
pywin32 : 2
ActivePython : 2
PyQt : 1
Scintilla : 1
trepan3k : 1
gdb-like : 1
Visual : 43
Studio : 30
integrates : 3
version-control : 1
include: : 31
Wing : 1
Komodo : 1
PyCharm : 2
------------------------------------------------------------- : 3
Pylint : 3
Pyflakes : 1
sooner : 3
checkers : 38
Mypy : 1
Pyre : 1
Pytype : 1
Tools/freeze : 1
converts : 75
arrays; : 1
scanning : 14
forms) : 4
looking : 77
(array : 1
initializers : 4
turned : 57
custom-made : 1
config : 95
self-contained : 6
acts : 43
executables: : 1
(Cross-platform) : 4
PyInstaller : 1
PyOxidizer : 1
py2app : 2
(macOS : 4
py2exe : 2
(Windows : 11
8** : 11
UnboundLocalError : 12
-------------------------------------------------------------------- : 4
surprise : 3
"UnboundLocalError" : 8
somewhere : 18
bar(): : 2
bar() : 3
foo(): : 12
+= : 106
"UnboundLocalError": : 1
foo() : 9
(most : 293
recent : 354
last): : 270
UnboundLocalError: : 1
'x' : 27
shadows : 1
similarly : 52
foo : 105
assigns : 19
recognizes : 31
Consequently : 12
"print(x)" : 2
print : 268
uninitialized : 40
declaring : 17
global: : 1
foobar(): : 1
foobar() : 1
(unlike : 1
superficially : 3
analogous : 21
situation : 50
variables) : 10
modifying : 56
scope: : 8
keyword: : 7
nonlocal : 12
anywhere : 42
function's : 62
assumed : 101
surprising : 22
moment's : 1
consideration : 9
explains : 41
requiring : 41
unintended : 7
side-effects : 12
You'd : 4
built- : 18
clutter : 2
defeat : 2
usefulness : 4
---------------------------------------------------------------------------------- : 1
Assume : 7
functions) : 8
range(5): : 8
squares.append(lambda: : 1
x**2) : 2
"x**2" : 2
expect : 82
"0" : 443
"1" : 263
"4" : 15
"9" : 24
"16" : 4
"16": : 1
squares[2]() : 3
squares[4]() : 2
"4**2" : 1
verify : 55
changing : 97
change: : 7
64 : 52
save : 77
"x": : 7
squares.append(lambda : 1
n=x: : 1
n**2) : 1
Here : 187
"n=x" : 1
computed : 69
peculiar : 5
(often : 10
cfg) : 1
application; : 4
reflected : 25
everywhere : 5
config.py: : 1
setting : 419
mod.py: : 1
config.x : 1
main.py: : 1
mod : 6
print(config.x) : 1
singleton : 46
"best : 1
practices" : 1
modulename : 2
*" : 93
Doing : 13
clutters : 1
importer's : 3
linters : 3
(anything : 2
site- : 5
directory) : 26
"dateutil" : 1
"requests" : 2
"PIL.Image" : 1
Gordon : 7
McMillan : 2
says: : 3
Circular : 5
<module>" : 1
2nd : 8
grab : 7
("from : 4
name") : 1
That's : 30
1st : 5
busy : 10
initializing : 34
avoiding : 27
reduce : 57
ever : 40
loading : 115
virtually : 4
costing : 1
couple : 33
"sys.modules" : 71
---------------------------------------------- : 9
bites : 2
neophyte : 1
foo(mydict={}): : 2
Danger: : 1
compute : 71
"mydict" : 3
"foo()" : 3
begins : 46
starts : 132
subsequent : 89
list/dictionary/whatever : 1
write: : 14
but: : 1
foo(mydict=None): : 1
None: : 93
{} : 42
time- : 2
consuming : 19
resulting : 266
"memoizing" : 1
Callers : 3
optionally : 81
_cache : 3
expensive(arg1 : 1
arg2 : 18
_cache={}): : 1
(arg1 : 2
arg2) : 1
_cache: : 1
_cache[(arg1 : 2
arg2)] : 2
Calculate : 7
matter : 44
taste : 1
--------------------------------------------------------------------------- : 2
Collect : 1
specifiers : 28
"**": : 3
f(x : 1
*args : 133
kwargs['width'] : 1
'14.3c' : 1
g(x : 1
**kwargs) : 91
-------------------------------------------------------- : 7
*Parameters* : 1
whereas : 53
*kind : 1
arguments* : 4
definition: : 18
bar=None : 1
"func" : 8
func(42 : 1
bar=314 : 1
extra=somevar) : 1
"42" : 3
"314" : 1
"somevar" : 1
'y' : 16
like: : 38
y : 166
y.append(10) : 1
[10] : 2
factors : 4
"y : 9
x" : 34
list) : 24
*mutable* : 5
content : 164
"[10]" : 2
ints : 20
mutated : 25
1" : 49
mutating : 5
incrementing : 12
"6") : 2
(that : 61
to) : 15
"6" : 13
"5") : 2
("x" : 7
"y.append(10)" : 1
"y.sort()") : 1
mutate : 15
[10]" : 1
"sorted(y)") : 1
library) : 9
mutates : 8
confused : 11
So : 132
mistakenly : 7
"y.sort()" : 1
generate : 153
diagnosed : 1
types: : 30
augmented : 24
"+=" : 13
("a_list : 1
3]" : 4
"a_list.extend([1 : 1
3])" : 2
"a_list" : 3
"some_tuple : 1
(1 : 117
3)" : 6
"some_int : 1
objects) : 24
words: : 5
("list" : 3
("str" : 19
transform : 26
(call : 4
--------------------------------------------------------------------- : 3
Remember : 19
callee : 6
call-by- : 1
se : 1
achieve : 37
desired : 138
results: : 8
func1(a : 1
b): : 17
'new-value' : 6
'old-value' : 2
99 : 16
func1(x : 1
('new-value' : 1
100) : 5
clearest : 2
thread-safe : 44
(changeable : 1
in-place) : 2
object: : 64
func2(a): : 1
a[0] : 9
'a' : 49
a[1] : 4
args : 158
['old-value' : 1
99] : 4
func2(args) : 1
['new-value' : 1
100] : 3
mutated: : 1
func3(args): : 1
args['a'] : 1
args['b'] : 2
99} : 1
func3(args) : 1
100} : 2
Or : 42
bundle : 8
instance: : 28
Namespace: : 1
**args): : 1
args.items(): : 1
setattr(self : 2
func4(args): : 1
args.a : 1
args.b : 2
Namespace(a='old-value' : 1
b=99) : 1
func4(args) : 1
vars(args) : 2
There's : 48
choice : 48
higher : 98
choices: : 3
suppose : 13
wanted : 28
"linear(a,b)" : 1
"f(x)" : 3
computes : 25
"a*x+b" : 1
scopes: : 1
linear(a : 1
result(x): : 1
linear: : 1
self.a : 9
self.b : 5
__call__(self : 8
x): : 16
taxes : 2
linear(0.3 : 1
"taxes(10e6) : 1
0.3 : 11
10e6 : 1
disadvantage : 16
slower : 36
inheritance: : 4
exponential(linear): : 1
__init__ : 10
self.b) : 1
counter: : 4
set(self : 2
self.value : 17
up(self): : 1
down(self): : 1
counter() : 1
inc : 1
dec : 1
reset : 106
count.up : 1
count.down : 1
count.set : 1
"inc()" : 1
"dec()" : 1
"reset()" : 5
act : 27
---------------------------------- : 18
"copy.copy()" : 10
"copy.deepcopy()" : 11
"copy()" : 23
newdict : 1
olddict.copy() : 1
slicing: : 5
new_l : 1
l[:] : 1
"dir(x)" : 1
alphabetized : 1
discover : 19
Generally : 23
speaking : 16
Essentially : 5
binds : 21
"def" : 18
"class" : 27
A: : 15
B : 76
B() : 6
print(b) : 4
<__main__.A : 2
0x16D07CC> : 2
Arguably : 1
invoked : 175
"B" : 29
"A" : 34
"b" : 37
"know : 1
names" : 4
Unless : 37
introspective : 1
indication : 16
beneficial : 3
gave : 6
excellent : 11
analogy : 5
question: : 1
cat : 8
porch: : 1
(object) : 8
care : 94
neighbours : 1
(namespaces) : 1
(object).. : 1
....and : 1
operator's : 1
Comma : 1
session: : 3
(False : 2
'a') : 7
entered: : 1
("a" : 3
"b") : 1
not: : 4
("b" : 5
"a") : 3
("=" : 2
etc) : 22
C's : 17
"?:" : 1
ternary : 5
follows: : 115
[on_true] : 2
[expression] : 4
[on_false] : 2
50 : 18
25 : 30
< : 232
operators: : 5
unsafe : 29
*on_true* : 1
".. : 1
..." : 34
obfuscated : 1
one-liners : 1
nesting : 14
adapted : 10
Ulf : 1
Bartelt: : 1
Primes : 1
1000 : 29
print(list(filter(None,map(lambda : 1
y:y*reduce(lambda : 1
x,y:x*y!=0 : 1
map(lambda : 1
x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000))))) : 1
Fibonacci : 13
print(list(map(lambda : 1
x,f=lambda : 1
x,f:(f(x-1,f)+f(x-2,f)) : 1
x>1 : 1
f(x,f) : 1
range(10)))) : 1
Mandelbrot : 1
print((lambda : 1
Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda : 1
x,y:x+'\n'+y,map(lambda : 1
Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda : 1
yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM : 1
Sx=Sx,Sy=Sy:reduce(lambda : 1
x,y:x+y,map(lambda : 1
x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro : 1
i=i,Sx=Sx,F=lambda : 1
xc,yc,x,y,k,f=lambda : 1
xc,yc,x,y,k,f:(k<=0)or : 1
(x*x+y*y : 1
>=4.0) : 1
1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr( : 1
64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy : 1
))))(-2.1 : 1
0.7 : 2
-1.2 : 1
30 : 60
80 : 15
24)) : 1
\___ : 2
___/ : 2
|__ : 1
V : 23
|______ : 1
columns : 38
|__________ : 1
maximum : 195
"iterations" : 1
|_________________ : 1
axis : 20
|____________________________ : 1
kids : 2
slash(/) : 4
slash : 30
denotes : 14
positional-only : 66
externally : 8
Upon : 8
accepts : 380
"divmod()" : 12
help(divmod) : 1
divmod : 1
builtins: : 3
divmod(x : 2
/) : 127
(x//y : 2
x%y) : 1
Invariant: : 1
div*y : 1
Thus : 71
error: : 63
divmod(x=3 : 1
y=4) : 1
"<stdin>" : 152
<module> : 129
TypeError: : 62
divmod() : 2
takes : 390
hexadecimal : 71
octal : 57
------------------------------------------------ : 12
digit : 64
lower : 101
uppercase : 43
"o" : 13
"10" : 10
(8 : 3
decimal) : 4
type: : 62
0o10 : 1
Hexadecimal : 5
Simply : 5
interpreter: : 6
0xa5 : 1
165 : 1
0XB2 : 1
178 : 1
-22 : 1
----------------------------- : 33
driven : 20
desire : 6
"i : 12
j" : 7
sign : 136
want: : 3
(i : 18
j) : 3
j : 11
identity : 67
compilers : 30
truncate : 22
negative : 282
positive : 184
">= : 5
0" : 37
clock : 62
200 : 20
hours : 14
"-190 : 2
useful; : 1
-10" : 1
bite : 4
SyntaxError : 28
---------------------------------------------------------- : 3
Trying : 8
"SyntaxError" : 86
period : 38
point: : 10
1.__class__ : 2
^ : 45
SyntaxError: : 20
invalid : 349
parentheses : 129
.__class__ : 1
<class : 38
'int'> : 9
(1).__class__ : 1
-------------------------------------- : 23
"int()" : 29
"int('144') : 1
144" : 2
"float()" : 17
"float('144') : 1
144.0" : 1
interpret : 19
"int('0144') : 1
"int('0x144')" : 1
"ValueError" : 365
"int(string : 3
base)" : 4
"int( : 1
'0x144' : 1
16) : 7
324" : 1
rules: : 7
leading : 179
'0o' : 2
indicates : 190
'0x' : 2
"eval()" : 46
significantly : 53
someone : 15
unwanted : 11
side : 184
effects : 52
"__import__('os').system("rm : 1
-rf : 7
$HOME")" : 1
erase : 5
"eval('09')" : 1
'0' : 5
'0') : 3
"144" : 1
"'144'" : 1
"str()" : 77
"hex()" : 9
"oct()" : 9
fancy : 9
sections : 87
""{:04d}".format(144)" : 1
yields : 79
"'0144'" : 1
""{:.3f}".format(1.0/3.0)" : 1
"'0.333'" : 1
assemble : 5
unicode : 93
s : 165
"Hello : 13
world" : 7
sio : 1
io.StringIO(s) : 1
sio.getvalue() : 2
'Hello : 15
world' : 10
sio.seek(7) : 1
sio.write("there!") : 1
there!' : 1
array.array('u' : 1
s) : 18
array('u' : 3
world') : 9
'yello : 2
a.tounicode() : 1
functions/methods : 3
maps : 43
construct: : 1
a(): : 1
b(): : 1
{'go': : 1
'stop': : 1
b} : 2
parens : 6
funcs : 2
dispatch[get_input()]() : 1
"getattr()": : 1
getattr(foo : 1
'bar')() : 1
Foo: : 14
do_foo(self): : 1
do_bar(self): : 1
getattr(foo_instance : 1
'do_' : 1
opname) : 1
f() : 20
"locals()" : 12
resolve : 55
myFunc(): : 1
print("hello") : 2
fname : 4
"myFunc" : 1
locals()[fname] : 1
Perl's : 5
chomp() : 1
removing : 75
------------------------------------------------------------------------------------- : 1
"S.rstrip("\r\n")" : 1
occurrences : 49
terminator : 18
"S" : 6
whitespace : 200
represents : 217
terminators : 2
blank : 78
removed: : 19
("line : 1
\r\n" : 1
"\r\n" : 13
"\r\n") : 1
lines.rstrip("\n\r") : 1
'line : 4
' : 217
"S.rstrip()" : 1
sscanf() : 1
split : 73
whitespace-delimited : 1
"sep" : 3
"sscanf" : 1
suited : 4
task : 198
'UnicodeDecodeError' : 2
'UnicodeEncodeError' : 2
backslashes : 38
string's : 7
quote: : 2
r'C:\this\will\not\work\' : 2
(detected : 1
1) : 195
workarounds : 9
'C:\\this\\will\\work\\' : 4
concatenate : 14
escaped : 44
string: : 38
r'C:\this\will\work' : 1
'\\' : 4
"os.path.join()" : 5
Windows: : 17
os.path.join(r'C:\this\will\work' : 1
'') : 21
"escape" : 7
purposes : 114
determining : 19
ends : 89
occurs : 197
present : 334
r'backslash\'preserved' : 1
"backslash\\'preserved" : 1
slow : 43
tough : 1
diving : 1
further: : 1
characteristics : 5
vary : 38
focuses : 6
talking : 7
multi-threading : 3
hot : 2
spots : 1
*before* : 14
optimize : 19
benchmark : 27
searching : 75
highly : 27
(through : 5
technique) : 1
hidden : 27
sophisticated : 20
optimizations : 50
tricks : 9
towards : 32
reaching : 10
acceptable : 35
levels: : 3
ones) : 2
yield : 197
benefits : 15
sprinkle : 1
micro-optimization : 1
Study : 3
primitive : 24
guaranteed) : 1
doubly : 4
moderately : 8
usage) : 1
Abstractions : 1
indirections : 2
indirection : 3
outweigh : 1
excessive : 7
abstraction : 18
tiny : 14
detrimental : 1
readability) : 1
reached : 74
pure : 97
away : 45
compilation : 70
annotations) : 1
confident : 4
concatenating : 5
inefficient : 8
quadratic : 20
accumulate : 14
"str.join()" : 6
end: : 8
chunks : 33
my_strings: : 1
chunks.append(s) : 1
''.join(chunks) : 1
(another : 3
reasonably : 13
"io.StringIO") : 1
operator): : 1
bytearray() : 2
my_bytes_objects: : 1
"tuple(seq)" : 1
(actually : 6
iterable) : 11
"tuple([1 : 1
"(1 : 8
"tuple('abc')" : 2
"('a' : 3
'c')" : 2
"tuple()" : 8
"list(seq)" : 1
"list((1 : 1
3))" : 1
"list('abc')" : 2
"['a' : 2
'c']" : 2
"seq[:]" : 1
forth : 27
-1 : 92
penultimate : 1
(next : 3
last) : 9
Think : 3
"seq[-n]" : 1
"seq[len(seq)-n]" : 1
convenient : 93
"S[:-1]" : 1
newline : 153
reverse : 69
"reversed()" : 20
reversed(sequence): : 1
touch : 5
reversed : 18
duplicates : 28
----------------------------------------- : 10
https://code.activestate.com/recipes/52560/ : 1
mind : 31
reordering : 9
scan : 20
deleting : 50
go: : 1
mylist: : 6
mylist.sort() : 1
mylist[-1] : 1
range(len(mylist)-2 : 1
-1): : 2
mylist[i]: : 1
del : 60
mylist[i] : 2
*hashable*) : 1
mylist : 3
list(set(mylist)) : 1
thereby : 8
iterating : 59
replacement : 126
implicit : 86
variations.: : 1
mylist[:] : 3
filter(keep_function : 1
mylist) : 1
keep_condition) : 1
[x : 8
keep_condition] : 1
----------------------------------- : 24
list: : 16
["this" : 1
"an" : 1
"array"] : 1
complexity; : 1
NumPy : 22
array-like : 3
*cons : 1
cells* : 1
tuples: : 5
lisp_list : 1
("like" : 1
("this" : 1
("example" : 1
None) : 35
) : 96
mutability : 9
analogue : 3
Lisp : 3
*car* : 1
"lisp_list[0]" : 1
*cdr* : 1
"lisp_list[1]" : 1
---------------------------------------- : 15
[[None] : 2
2] : 16
it: : 58
[[None : 1
None] : 9
[None : 2
None]] : 2
shows : 145
places: : 6
A[0][0] : 1
[[5 : 1
[5 : 9
replicating : 1
"*3" : 1
show : 167
rows : 37
newly : 66
[None] : 2
range(3): : 5
A[i] : 1
comprehension: : 5
w : 17
h : 37
range(h)] : 1
datatype; : 1
*list : 13
comprehension* : 6
solution: : 3
[obj.method() : 1
obj : 90
mylist] : 2
[function(obj) : 1
suffice: : 1
obj.method() : 1
function(obj) : 1
a_tuple[i] : 2
['item'] : 3
*assignment* : 1
we'll : 41
exemplar : 1
wrote: : 3
a_tuple : 2
a_tuple[0] : 6
'tuple' : 6
clear: : 3
"a_tuple[0]" : 2
("1") : 1
Under : 35
approximately : 16
(['foo'] : 1
'bar') : 4
worked: : 1
['foo' : 7
'item'] : 1
"__iadd__()" : 7
"extend()" : 8
"shorthand" : 1
"list.extend()": : 1
a_list : 5
a_list.__iadd__([1]) : 1
pointed : 38
no-op : 28
pointing : 46
happening : 11
a_tuple[0].__iadd__(['item']) : 1
succeeds : 119
"result" : 5
sort: : 2
Schwartzian : 2
Transform : 9
attributed : 3
Randal : 2
Schwartz : 2
metric : 1
"sort : 1
value" : 18
"key" : 67
Isorted : 1
L[:] : 1
Isorted.sort(key=lambda : 1
s: : 16
int(s[10:15])) : 1
pick : 9
list1 : 1
["what" : 1
"I'm" : 1
"sorting" : 1
"by"] : 1
list2 : 1
["something" : 1
"to" : 4
"sort"] : 1
pairs : 130
zip(list1 : 1
list2) : 1
sorted(pairs) : 1
[("I'm" : 1
'else') : 2
('by' : 1
'sort') : 1
('sorting' : 1
'to') : 1
('what' : 1
'something')] : 1
[x[1] : 1
pairs] : 1
['else' : 1
'sort' : 1
'to' : 3
'something'] : 1
======= : 44
embody : 3
(attributes) : 1
datatype : 42
class(es) : 1
successively : 4
refined : 4
inheritance : 65
accessor : 10
"MboxMailbox" : 1
"MaildirMailbox" : 1
"OutlookMailbox" : 1
"x.name(arguments...)" : 1
meth(self : 1
arg): : 20
arg : 36
self.attribute : 1
self : 69
Self : 5
conventional : 16
"meth(self : 1
c)" : 10
"x.meth(a : 1
occurs; : 1
"meth(x : 1
calls? : 1
----------------------------------------------------------------------------------- : 1
"isinstance(obj : 15
cls)" : 3
(class1 : 1
class2 : 1
...))" : 1
str)" : 4
(int : 18
complex))" : 1
"True" : 847
indirectly : 32
"true : 3
inheritance" : 2
*MRO* : 2
class: : 58
P: : 1
C(P): : 1
Mapping.register(P) : 1
C() : 15
isinstance(c : 4
C) : 14
P) : 6
Mapping) : 1
Actual : 3
chain : 84
type(c).__mro__ : 2
(<class : 3
'C'> : 1
'P'> : 1
'object'>) : 1
False : 234
developing : 11
something: : 1
search(obj): : 1
isinstance(obj : 10
Mailbox): : 1
elif : 56
Document): : 1
"search()" : 23
Mailbox: : 1
search(self): : 2
Document: : 1
obj.search() : 1
delegation : 13
Delegation : 1
(also : 26
pattern) : 13
Let's : 56
delegates : 23
uppercase: : 1
UpperOut: : 1
outfile): : 2
self._outfile : 1
outfile : 5
write(self : 4
s): : 2
self._outfile.write(s.upper()) : 1
__getattr__(self : 3
name): : 25
getattr(self._outfile : 1
name) : 64
"UpperOut" : 1
redefines : 2
"write()" : 57
"self._outfile.write()" : 1
delegated : 10
"self._outfile" : 1
accomplished : 10
"__getattr__()" : 34
method; : 25
controlling : 38
trickier : 2
"__setattr__()" : 12
carefully : 25
X: : 4
__setattr__(self : 3
self.__dict__[name] : 1
"self.__dict__" : 3
causing : 63
recursion : 88
extends : 37
------------------------------------------------------------------------------------ : 1
"super()" : 37
Derived(Base): : 2
super().meth() : 1
Base.meth : 1
"self" : 95
(MRO) : 1
"type(self).__mro__" : 1
"Derived" : 5
MRO: : 1
"Base" : 3
organize : 7
---------------------------------------------------------------------- : 8
derive : 22
Incidentally : 4
handy : 24
dynamically : 80
resources) : 2
Example: : 119
Base: : 10
BaseAlias : 1
Derived(BaseAlias): : 1
Both : 105
Java) : 2
C.__init__ : 1
__init__(self): : 21
C.count : 5
getcount(self): : 1
self.count : 9
"c.count" : 1
"C.count" : 1
"c" : 15
"isinstance(c : 1
C)" : 4
base-class : 1
"c.__class__" : 1
"C" : 43
Caution: : 10
"self.count : 1
42" : 6
unrelated : 14
"count" : 5
"self"'s : 1
Rebinding : 1
class-static : 1
314 : 1
possible: : 5
static(arg1 : 1
arg3): : 1
straightforward : 34
getcount(): : 1
tightly : 8
hierarchy) : 6
encapsulation : 5
overload : 4
cout : 2
<< : 14
"No : 6
arguments\n"; : 1
C(int : 1
i) : 28
"Argument : 2
"\n"; : 1
i=None): : 1
print("No : 3
arguments") : 2
print("Argument : 1
is" : 11
*args): : 10
__spam : 1
_SomeClassName__spam : 1
------------------------------------------------------------------ : 2
"mangled" : 1
effective : 59
"__spam" : 3
(at : 26
underscore) : 3
textually : 6
replaced : 262
"_classname__spam" : 3
"classname" : 2
stripped : 39
privacy: : 1
"__dict__" : 76
bother : 9
__del__ : 4
----------------------------------------------------------------------- : 1
reaches : 24
child : 410
children) : 1
counts : 72
Once : 113
vanishes : 3
inconvenient : 9
Worse : 3
"gc.collect()" : 6
*are* : 5
pathological : 4
"close()" : 97
subobjects : 3
cyclical : 1
weak : 106
sibling : 9
(if : 215
them!) : 1
warning : 342
printed : 159
"sys.stderr" : 70
type) : 38
class's : 44
keeping : 30
builtin : 146
frequently : 29
freshly : 8
illustrated : 6
id(1000) : 1
13901272 : 3
id(2000) : 1
ids : 33
belong : 14
examine : 21
alive : 60
1000; : 1
id(a) : 1
id(b) : 1
13891296 : 1
*is* : 10
"a : 123
b" : 79
"id(a) : 1
id(b)" : 1
identical : 82
a" : 11
"False" : 554
*only* : 23
substituted : 19
assured : 4
guaranteed: : 1
"new : 3
old" : 2
stores : 80
"s[0] : 3
3) : 146
None" : 33
"b : 6
inadvisable : 1
singletons: : 2
500 : 13
'Python' : 12
'Py' : 6
'thon' : 5
identical: : 3
tests: : 10
Detecting : 1
distinct : 57
"dict.pop()": : 1
_sentinel : 1
object() : 17
pop(self : 1
default=_sentinel): : 1
self: : 8
self[key] : 2
_sentinel: : 1
KeyError(key) : 2
augment : 8
prevents : 55
"float('NaN')" : 2
"collections.abc.Sequence.__contains__()": : 1
__contains__(self : 3
v : 50
------------------------------------------------------------------------ : 2
override : 232
*after* : 19
late : 13
FirstOfMonthDate(date): : 1
"Always : 1
month" : 2
__new__(cls : 7
month : 74
day): : 2
super().__new__(cls : 3
NamedInt(int): : 1
"Allow : 1
numbers" : 3
xlat : 1
{'zero': : 1
'one': : 2
'ten': : 1
10} : 2
cls.xlat.get(value : 1
TitleStr(str): : 1
"Convert : 1
str : 168
path" : 4
s.lower().replace(' : 1
'-') : 5
''.join([c : 1
c.isalnum() : 1
'-']) : 1
FirstOfMonthDate(2012 : 2
14) : 2
NamedInt('ten') : 1
NamedInt(20) : 1
TitleStr('Blog: : 1
Rocks') : 1
'blog-why-python-rocks' : 1
caching : 32
"functools.cached_property()" : 4
"functools.lru_cache()" : 9
former : 60
*cached_property* : 7
kept : 101
accumulated : 14
grow : 13
*lru_cache* : 3
recently : 28
bounded : 15
*maxsize* : 17
age : 19
cleared : 62
techniques: : 1
Weather: : 2
"Lookup : 1
weather : 1
government : 1
website" : 1
station_id): : 3
self._station_id : 1
station_id : 6
_station_id : 1
current_temperature(self): : 1
"Latest : 1
hourly : 1
observation" : 1
@cached_property : 3
location(self): : 1
"Return : 15
longitude/latitude : 1
station" : 1
Result : 24
@lru_cache(maxsize=20) : 2
historic_rainfall(self : 2
units='mm'): : 1
"Rainfall : 1
date" : 1
Depends : 4
units : 49
*station_id* : 2
relevant : 109
updates: : 2
"Example : 6
station : 1
identifier" : 2
self.station_id : 3
change_station(self : 1
other.station_id : 1
hash(self.station_id) : 1
units='cm'): : 1
'Rainfall : 1
date' : 1
created) : 6
"__pycache__" : 13
subdirectory : 52
".py" : 32
(See : 65
3147** : 17
details.) : 13
develop : 4
"PYTHONDONTWRITEBYTECODE" : 7
(permissions : 1
etc...) : 3
"foo.py" : 7
"xyz.py" : 1
foo.py" : 1
command) : 12
"xyz" : 2
manually : 75
"compile()" : 49
interactively: : 1
py_compile.compile('foo.py') : 1
"cfile") : 1
"compileall.py" : 1
compile: : 1
 : 123
predefined : 49
"__name__" : 76
"'__main__'" : 6
self-test : 2
"__name__": : 1
main(): : 69
print('Running : 2
test...') : 1
__name__ : 110
'__main__': : 65
main() : 35
mutually : 23
Suppose : 16
modules: : 24
"foo.py": : 1
bar_var : 2
foo_var : 2
"bar.py": : 1
steps: : 9
Empty : 20
"bar" : 23
"foo") : 4
"foo_var" : 1
"bar.foo_var : 1
foo.foo_var" : 1
foo" : 12
"foo.foo_var" : 1
least) : 9
recommends : 9
placing : 10
Initializations : 1
everything : 72
"<module>.<name>" : 3
Jim : 19
Roskind : 2
suggests : 7
performing : 37
exports : 22
(globals : 1
classes) : 16
initialized : 222
values) : 27
Matthias : 19
Urlichs : 1
restructuring : 2
recursive : 93
exclusive : 38
__import__('x.y.z') : 1
<module : 9
'x'>; : 1
z : 39
convenience : 136
"import_module()" : 7
importlib.import_module('x.y.z') : 1
edit : 31
reimport : 1
------------------------------------------------------------------------------------------------- : 1
consistency : 35
didn't : 64
parsed : 126
re-parsed : 1
re-reading : 1
modname : 2
importlib.reload(modname) : 1
Warning: : 99
100% : 14
fool-proof : 1
some_objects : 1
*not* : 156
updated : 189
paradoxical : 2
behaviour: : 4
cls : 21
cls.C() : 1
Create : 287
importlib.reload(cls) : 1
'cls' : 1
'cls.py'> : 1
cls.C) : 1
isinstance : 3
false?! : 1
"identity" : 2
hex(id(c.__class__)) : 1
'0x7352a0' : 1
hex(id(cls.C)) : 1
'0x4198d0' : 1
seem : 21
obvious; : 1
guidance : 5
*typing* : 1
"Command : 1
window" : 2
recognize : 20
"command : 2
prompt" : 1
C:\> : 2
letter : 75
D:\YourName\Projects\Python> : 1
realize : 9
*interpreter* : 6
arrange : 7
recognises : 1
hitting : 8
return: : 4
C:\Users\YourName> : 3
(v3.6.4:d48eceb : 1
Dec : 11
19 : 22
2017 : 5
06:04:45) : 1
[MSC : 1
v.1900 : 1
32 : 66
(Intel)] : 1
win32 : 8
"help" : 24
"copyright" : 7
"credits" : 7
"license" : 11
"interactive : 1
mode" : 5
strongest : 7
seeing : 13
print("Hello") : 1
"Hello" : 4
'HelloHelloHello' : 1
"exit()" : 10
"Ctrl" : 1
"Z" : 5
hit : 17
""Enter"" : 1
Start-menu : 1
‣ : 12
(command : 5
line) : 29
disappear : 7
"Ctrl-Z" : 1
character; : 12
You'll : 21
absolute : 185
relative : 308
desktop : 3
"hello.py" : 2
path: : 9
Desktop\hello.py : 1
hello : 18
associates : 5
.py : 13
(Python.File) : 1
("D:\Program : 1
Files\Python\python.exe : 1
"%1" : 2
%*") : 1
'foo.py' : 1
'foo' : 32
PATHEXT : 2
suddenly : 1
puzzling : 3
identically : 11
caused : 141
misconfiguration : 3
virus : 3
scanners : 1
overhead : 73
orders : 4
magnitude : 18
scanner : 11
monitor : 13
Try : 27
ensure : 179
indeed : 6
McAfee : 1
offender : 1
executables : 20
==================================== : 21
.pyd : 4
dll's : 1
"foo.pyd" : 1
"PyInit_foo()" : 2
foo.pyd : 4
(as : 165
foo.py : 10
foo.pyc) : 1
.exe : 9
foo.lib : 1
PYTHONPATH : 5
foo.dll : 1
dll : 7
linkage : 6
"__declspec(dllexport)" : 1
app : 24
summarized : 5
**not** : 17
DLL's : 2
(This : 61
undocumented : 81
fact.) : 2
"python*NN*.dll"; : 1
"C:\Windows\System" : 1
*NN* : 1
"33" : 1
Load-time : 1
linking : 34
"python*NN*.lib" : 2
"python*NN*.dll" : 4
(General : 1
so-called : 12
lib" : 2
linker.) : 1
Run-time : 1
greatly : 21
options; : 8
"LoadLibraryEx()" : 1
routine : 47
API's) : 1
"GetProcAddress()" : 1
SWIG : 14
"extension : 1
module" : 6
app's : 2
grungy : 1
*into* : 2
(!) : 1
init : 19
function) : 53
leo : 3
initleo() : 1
initleoc() : 1
initializes : 21
helper : 67
#include : 24
<Python.h> : 13
Py_Initialize(); : 6
Initialize : 24
initmyAppc(); : 1
(import) : 1
PyRun_SimpleString("import : 2
myApp"); : 1
apparent : 7
MSVC : 17
pythonNN.dll : 2
Problem : 2
"Very : 1
Level" : 1
"FILE : 3
multi-compiler : 1
notion : 25
"struct : 6
FILE" : 4
standpoint : 1
low : 60
generating : 57
wrappers : 18
void : 250
functions: : 122
Py_INCREF(Py_None); : 3
_resultobj : 1
Py_None; : 3
_resultobj; : 1
Alas : 1
Py_None : 1
macro : 274
expands : 28
_Py_NoneStruct : 2
Again : 18
mult-compiler : 1
by: : 18
Py_BuildValue(""); : 1
SWIG's : 1
"%typemap" : 1
(I'm : 5
newbie) : 1
idea; : 2
windowing : 5
Rather : 25
wxPythonWindow : 1
"native" : 1
connect : 45
redirect : 22
i/o : 1
_any_ : 1
(defined : 14
read() : 8
recommend : 20
spaces : 127
python-mode : 1
mixing : 20
bad : 85
spaces: : 1
Take : 12
Tabs : 5
"Default" : 2
"Tab : 1
size" : 6
"Indent : 1
"Insert : 1
spaces" : 1
radio : 5
"IndentationError" : 7
"TabError" : 4
batch : 15
Windows-specific : 8
"kbhit()" : 1
"getch()" : 16
echoing : 6
later : 206
updates : 53
visit : 28
========================= : 44
(Eventually : 2
skip : 71
step.) : 2
engine : 34
plus : 62
math.py : 1
(socket.py : 1
regex.py : 1
"mathmodule.c" : 1
(not : 85
Path) : 1
(.py); : 1
(.dll : 1
.sl : 1
etc); : 1
interpreter; : 9
print(sys.builtin_module_names) : 1
file's : 47
begin : 52
"#!" : 11
"chmod : 3
+x : 3
scriptfile" : 2
755 : 2
#!/usr/local/bin/python : 3
**env** : 2
Almost : 6
assuming : 40
user's : 63
"PATH": : 2
#!/usr/bin/env : 14
*Don't* : 1
"PATH" : 50
minimal : 46
**/usr/bin/env** : 1
env : 16
hack : 8
(due : 6
Alex : 37
Rezinsky): : 1
/bin/sh : 3
""":" : 1
exec : 15
$0 : 1
${1+"$@"} : 1
""" : 113
script's : 14
__doc__ : 9
"""...Whatever...""" : 1
curses/termcap : 1
variants: : 5
Windows.) : 4
ncurses : 31
SYSV : 3
colour : 5
pads : 11
mouse : 29
OSes : 11
fall : 49
category : 73
onexit() : 1
"onexit()" : 1
handler(signum : 4
frame) : 10
parameters: : 17
frame): : 3
============ : 59
comparing : 62
fancier : 7
modelled : 4
Smalltalk : 8
modular : 8
encapsulated : 8
delightful : 1
(because : 15
accesses) : 1
"global : 3
logic" : 1
"__main__": : 17
main_logic() : 1
bottom : 47
organized : 7
tractable : 1
behaviours : 7
automates : 3
sounds : 5
terse : 3
flexible : 49
surprisingly : 2
pleasant : 6
fun : 10
"production : 1
code" : 11
"Support : 2
modules" : 2
self_test() : 1
"fake" : 2
doc : 72
purely : 17
epydoc : 1
abstractions : 2
low-level : 87
run: : 9
------------------------------------ : 28
soon : 45
killed : 26
giving : 122
sleep : 25
finish: : 1
thread_task(name : 2
n): : 8
range(n): : 3
print(name : 3
range(10): : 18
T : 40
threading.Thread(target=thread_task : 2
args=(str(i) : 2
i)) : 3
T.start() : 2
time.sleep(10) : 2
<--------------------------- : 1
(on : 36
platforms) : 8
sequentially : 6
blocked : 45
time.sleep(0.001) : 1
<-------------------- : 1
guess : 21
delay : 34
"time.sleep()" : 11
semaphore : 35
token : 88
finishes : 23
parcel : 5
among : 29
bunch : 23
worker : 93
"ThreadPoolExecutor" : 20
dispatching : 8
jobs : 13
"Queue" : 25
maintains : 21
".put(obj)" : 1
".get()" : 1
job : 32
handed : 3
(Realistically : 1
terminated.) : 1
worker(): : 2
worker') : 1
time.sleep(0.1) : 2
True: : 51
q.get(block=False) : 1
queue.Empty: : 1
print('Worker' : 2
threading.current_thread() : 4
end=' : 12
') : 34
print('queue : 1
empty') : 1
print('running : 1
argument' : 2
arg) : 9
time.sleep(0.5) : 2
q : 26
queue.Queue() : 2
t : 59
threading.Thread(target=worker : 3
name='worker : 3
%i' : 2
(i+1)) : 1
t.start() : 4
Begin : 5
range(50): : 1
q.put(i) : 1
Give : 8
print('Main : 2
sleeping') : 1
time.sleep(5) : 4
output: : 38
sleeping : 3
Worker : 11
<Thread(worker : 6
130283832797456)> : 2
130283824404752)> : 1
130283816012048)> : 1
130283807619344)> : 1
130283799226640)> : 1
details; : 2
featureful : 2
mutation : 6
(GIL) : 3
VM : 6
instructions; : 2
switches : 29
"sys.setswitchinterval()" : 5
atomic : 24
theory : 5
accounting : 7
PVM : 1
(ints : 1
"look : 2
atomic" : 1
(L : 1
L1 : 2
L2 : 3
D : 57
D1 : 1
D2 : 2
ints): : 1
L.append(x) : 1
L1.extend(L2) : 1
L[i] : 5
L.pop() : 1
L1[i:j] : 1
L.sort() : 3
x.field : 1
D[x] : 3
D1.update(D2) : 1
D.keys() : 1
aren't: : 1
i+1 : 1
L.append(L[-1]) : 1
L[j] : 1
invoke : 71
objects' : 3
affect : 112
mass : 5
doubt : 7
mutex : 8
rid : 14
hindrance : 1
deployment : 7
high-end : 2
multiprocessor : 2
CPU : 42
insistence : 1
(almost) : 7
days : 45
Greg : 26
Stein : 5
comprehensive : 15
"free : 2
threading" : 1
patches) : 1
fine-grained : 10
Adam : 13
Olsen : 1
experiment : 12
python-safethread : 1
experiments : 1
exhibited : 1
sharp : 1
30% : 22
slower) : 1
fine- : 1
grained : 4
compensate : 3
multi-CPU : 1
creative : 1
dividing : 12
*processes* : 5
*threads* : 2
"ProcessPoolExecutor" : 22
so; : 1
lower-level : 10
Judicious : 1
help; : 3
time-consuming : 2
per-interpreter-state : 1
global; : 1
tremendous : 1
cached; : 1
caches : 43
finite : 36
3rd : 7
rate : 19
finally : 39
gained : 63
================ : 77
(And : 5
questions...) : 1
----------------------------------------------------- : 7
"os.remove(filename)" : 1
"os.unlink(filename)"; : 1
identical; : 2
"unlink()" : 10
"os.rmdir()"; : 1
"os.mkdir()" : 2
"os.makedirs(path)" : 1
intermediate : 32
"os.removedirs(path)" : 1
empty; : 1
"shutil.rmtree()" : 9
rename : 29
"os.rename(old_path : 1
new_path)" : 1
"f : 8
open(filename : 8
"rb+")" : 1
"f.truncate(offset)"; : 1
offset : 189
seek : 8
"os.ftruncate(fd : 1
offset)" : 3
*fd* : 86
integer) : 13
"copyfile()" : 6
"copytree()" : 7
"rmtree()" : 5
NTFS : 1
volumes : 6
alternate : 87
forks : 3
HFS+ : 1
rarely : 30
"shutil.copy2()" : 6
preserve : 69
(though : 25
all) : 12
(usually : 39
numbers) : 9
objects; : 19
vice : 22
versa : 17
2-byte : 8
4-byte : 8
big-endian : 26
file: : 46
"rb") : 6
f.read(8) : 1
struct.unpack(">hhl" : 1
'>' : 8
forces : 9
'h' : 17
"short : 2
integer" : 5
(2 : 66
bytes) : 40
'l' : 16
"long : 6
(4 : 23
homogeneous : 13
floats) : 4
mandatory : 20
(here : 4
""rb"" : 4
"open()") : 3
""r"" : 5
default) : 207
"f.read()" : 2
os.read() : 3
pipe : 103
os.popen(); : 1
"os.read()" : 1
*n* : 166
*p* : 67
"p.read(n)" : 1
serial : 5
(RS232) : 1
port : 169
Win32 : 25
OSX : 10
IronPython: : 1
https://pypi.org/project/pyserial/ : 1
Mitch : 1
Chapman: : 1
https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com : 1
sys.stdout : 15
(stdin : 1
stderr) : 7
--------------------------------------------------------------- : 2
layer : 34
low- : 6
"f.close()" : 4
marks : 28
closed : 275
arranges : 9
"f"'s : 1
"f" : 18
stdin : 30
stdout : 103
stderr : 83
treated : 149
specially : 24
"sys.stdout.close()" : 1
Python-level : 6
(e.g. : 48
confuse : 9
I/O) : 1
"os.close()": : 1
os.close(stdin.fileno()) : 1
os.close(stdout.fileno()) : 1
os.close(stderr.fileno()) : 1
============================ : 34
WWW : 1
chapters : 12
server-side : 16
client-side : 14
Paul : 34
Boddie : 2
https://wiki.python.org/moin/WebProgramming : 1
Cameron : 1
Laird : 1
technologies : 2
https://web.archive.org/web/20210224183619/http://pha : 1
seit.net/claird/comp.lang.python/web_python : 1
mimic : 7
(METHOD=POST) : 1
POSTing : 1
"urllib.request": : 1
query : 121
qs : 1
"First=Josephine&MI=Q&Last=Public" : 1
send : 167
req : 19
urllib.request.urlopen('http://www.some-server.out-there' : 1
'/cgi-bin/some-cgi-script' : 1
data=qs) : 1
req: : 1
msg : 73
hdrs : 2
req.read() : 1
req.info() : 1
percent-encoded : 8
POST : 35
quoted : 56
"urllib.parse.urlencode()" : 8
"name=Guy : 1
Steele : 3
Jr.": : 1
urllib.parse.urlencode({'name': : 1
'Guy : 1
Jr.'}) : 1
'name=Guy+Steele%2C+Jr.' : 1
mail : 38
sender : 2
fromaddr : 6
input("From: : 1
toaddrs : 8
input("To: : 1
").split(',') : 1
print("Enter : 2
^D:") : 1
'' : 65
sys.stdin.readline() : 1
smtplib.SMTP('localhost') : 7
server.sendmail(fromaddr : 2
msg) : 7
server.quit() : 3
Unix-only : 1
sendmail : 4
systems; : 2
"/usr/lib/sendmail" : 1
"/usr/sbin/sendmail" : 2
manual : 80
sample : 120
SENDMAIL : 2
p : 170
os.popen("%s : 1
-t : 11
-i" : 2
"w") : 6
p.write("To: : 1
receiver@example.com\n") : 1
p.write("Subject: : 1
test\n") : 1
p.write("\n") : 1
separating : 19
p.write("Some : 1
text\n") : 2
p.write("some : 1
sts : 10
p.close() : 2
!= : 80
0: : 40
print("Sendmail : 1
status" : 1
sts) : 1
connect() : 3
prevent : 180
"socket.connect()" : 4
(unlikely) : 3
".errno" : 1
"errno.EINPROGRESS" : 1
progress : 40
Different : 15
going : 73
"socket.connect_ex()" : 3
poll : 15
"errno.EISCONN" : 1
indicate : 175
connected : 64
"select.select()" : 8
writable : 64
single-threaded : 6
feature-rich : 1
disk-based : 4
"DBM" : 1
"GDBM" : 1
lightweight : 15
relational : 6
DatabaseProgramming : 1
windows) : 3
(g)dbm : 1
mappings : 73
simple: : 14
random.random() : 4
[0 : 57
specialized : 80
"randrange(a : 2
b)" : 99
chooses : 12
[a : 6
b) : 124
"uniform(a : 1
"normalvariate(mean : 1
sdev)" : 1
samples : 62
(Gaussian) : 2
higher-level : 36
"choice(S)" : 1
"shuffle(L)" : 1
shuffles : 1
permutes : 1
randomly : 16
"Random" : 5
instantiate : 43
********************************* : 13
*********************** : 13
cover : 43
Place : 2
"extern : 7
}" : 6
"C"" : 4
Pyrex : 2
SIP : 1
CXX : 2
Boost : 2
Weave : 1
highest-level : 1
"PyRun_SimpleString()" : 3
"-1" : 231
"SyntaxError") : 2
"PyRun_String()"; : 1
"Python/pythonrun.c" : 1
========================================================= : 2
"PyRun_String()" : 2
"Py_eval_input"; : 1
parses : 39
"PyTuple_Size()" : 2
"PyTuple_GetItem()" : 4
"PyListSize()" : 1
"PyList_GetItem()" : 7
"PyBytes_Size()" : 3
"PyBytes_AsStringAndSize()" : 3
null : 106
"strlen()" : 3
"PyBytes_Check()" : 2
"PyTuple_Check()" : 1
"PyList_Check()" : 1
'abstract' : 1
"Include/abstract.h" : 1
interfacing : 1
"PySequence_Length()" : 2
"PySequence_GetItem()" : 8
("PyNumber_Index()" : 1
et : 8
al.) : 2
PyMapping : 1
"PyTuple_Pack()" : 2
"PyObject_CallMethod()" : 6
"Py_BuildValue()" : 23
PyObject_CallMethod(PyObject : 1
*object : 5
char : 431
*method_name : 1
*arg_format : 1
...); : 4
eventually : 35
"Py_DECREF()"'ing : 1
"seek" : 4
"f"): : 1
res : 27
PyObject_CallMethod(f : 1
"(ii)" : 1
0); : 14
(res : 2
NULL) : 67
Py_DECREF(res); : 1
"PyObject_CallObject()" : 10
"()" : 15
surround : 5
"(i)" : 1
======================================================================================== : 1
Assign : 7
print_error : 1
wherever : 20
sends : 59
io.StringIO() : 4
print('foo') : 2
print('hello : 5
world!') : 6
sys.stderr.write(sys.stdout.getvalue()) : 1
StdoutCatcher(io.TextIOBase): : 1
self.data : 8
stuff): : 1
self.data.append(stuff) : 1
StdoutCatcher() : 1
sys.stderr.write(''.join(sys.stdout.data)) : 1
PyImport_ImportModule("<modulename>"); : 1
"sys.modules") : 5
"sys.modules["<modulename>"]" : 1
ensures : 46
attr : 18
PyObject_GetAttrString(module : 1
"<attrname>"); : 1
"PyObject_SetAttrString()" : 2
approaches : 21
"Extending : 1
Embedding" : 1
Realize : 1
strategy : 29
(pointer) : 1
alternatives? : 1
(Fixing : 1
hackery : 1
worth : 23
effort.) : 1
GDB : 4
breakpoint : 65
".gdbinit" : 2
interactively) : 3
command: : 20
br : 2
_PyImport_LoadDynamicModule : 1
GDB: : 1
$ : 244
gdb : 13
/local/bin/python : 1
gdb) : 5
myscript.py : 4
repeat : 27
finish : 30
myfunction.c:50 : 1
====================================================================================== : 2
"/usr/lib/python2.*x*/config/" : 1
python-devel : 1
RPM : 22
Debian : 10
"apt-get : 1
python-dev" : 1
====================================================== : 9
Sometimes : 55
interpreter's : 40
approximates : 3
parser's : 6
sufficiently : 7
"PyRun_InteractiveLoop()" : 2
(perhaps : 12
thread) : 10
"PyOS_ReadlineFunctionPointer()" : 3
"Modules/readline.c" : 1
"Parser/myreadline.c" : 1
recompile : 10
relink : 1
(change : 1
LINKCC : 2
Makefile) : 4
"g++ : 2
-shared : 3
-o : 11
mymodule.so : 1
mymodule.o") : 1
(BPL : 1
https://www.boost.org/libs/python/doc/index.html) : 1
BPL) : 1
********************************************* : 9
=============== : 83
schools : 1
colleges : 1
professional : 6
NASA : 1
wish : 66
gotten : 10
Perhaps : 13
figure : 23
who's : 1
administrative : 6
computers : 9
Hewlett-Packard : 1
Compaq : 1
Apparently : 1
HP/Compaq's : 1
Unix-compatible : 1
default; : 11
==================== : 89
came : 20
hurting : 1
Add/Remove : 1
icon : 9
application's : 13
uninstaller : 2
Reinstalling : 1
aims : 11
(MSI : 1
packages) : 11
years : 46
application-local : 1
11** : 8
considers : 4
downsides : 1
corrupting : 5
launching : 19
installations : 22
updateable : 4
------------------------- : 46
Four : 6
32-bit : 98
*web : 1
installer* : 2
initial : 180
*offline : 1
downloading : 3
selected: : 2
[image] : 5
"Install : 1
Now": : 1
administrator : 13
(unless : 22
Shortcuts : 3
"Customize : 2
installation" : 2
post-install : 2
binaries : 20
all-users : 2
case: : 3
credentials : 16
approval : 3
pre-compiled : 4
historically : 7
limited : 214
lengths : 23
260 : 5
32,000 : 1
activate : 18
"Enable : 1
paths" : 4
policy : 164
"LongPathsEnabled" : 1
"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem" : 1
3.6: : 304
scripted : 2
replicate : 2
interaction : 30
suppressing : 14
hide : 30
silently : 109
"/quiet" : 2
"/passive" : 1
"/uninstall" : 1
confirmation : 3
"name=value" : 2
disable : 111
enable : 143
+-----------------------------+----------------------------------------+----------------------------+ : 26
Name : 81
Description : 43
|=============================|========================================|============================| : 1
InstallAllUsers : 2
Perform : 29
system-wide : 26
TargetDir : 4
Selected : 2
DefaultAllUsersTargetDir : 1
"%ProgramFiles%\Python : 1
all-user : 1
installs : 38
X.Y" : 2
"%ProgramFiles(x8 : 1
6)%\Python : 1
DefaultJustForMeTargetDir : 1
"%LocalAppData%\Programs\ : 1
just-for-me : 1
Python\PythonXY" : 1
"%Loc : 1
alAppData%\Programs\Pytho : 1
n\PythonXY-32" : 1
"%Local : 1
AppData%\Programs\Python\ : 1
PythonXY-64" : 1
DefaultCustomTargetDir : 1
(empty) : 6
AssociateFiles : 1
CompileAll : 1
PrependPath : 1
Prepend : 1
".PY" : 2
"PATHEXT" : 7
AppendPath : 1
Append : 18
shortcuts : 8
Include_doc : 1
Include_debug : 1
Include_dev : 1
unusable : 16
Include_exe : 1
"python.exe" : 14
Include_launcher : 1
InstallLauncherAllUsers : 1
Installs : 5
"Include_launcher" : 1
Include_lib : 1
Include_pip : 1
bundled : 56
setuptools : 41
Include_symbols : 1
("*.pdb") : 1
Include_tcltk : 1
Include_test : 1
Include_tools : 1
LauncherOnly : 1
SimpleInstall : 1
Disable : 36
SimpleInstallDescription : 1
simplified : 52
(from : 28
elevated : 1
prompt): : 1
python-3.9.0.exe : 3
/quiet : 1
InstallAllUsers=1 : 1
PrependPath=1 : 1
Include_test=0 : 2
personal : 12
customization: : 2
InstallAllUsers=0 : 1
Include_launcher=0 : 1
SimpleInstall=1 : 1
SimpleInstallDescription="Just : 1
suite." : 3
omits : 10
system- : 8
launcher.) : 1
"unattend.xml" : 1
alongside : 12
<Options> : 1
<Option : 5
Name="InstallAllUsers" : 1
Value="no" : 2
/> : 11
Name="Include_launcher" : 1
Value="0" : 1
Name="Include_test" : 1
Name="SimpleInstall" : 1
Value="yes" : 1
Name="SimpleInstallDescription">Just : 1
suite</Option> : 1
</Options> : 1
downloaded : 18
*layout* : 1
bigger : 9
performed : 105
Execute : 31
Prompt : 6
"python-3.9.0.exe" : 1
layouts : 8
collisions : 10
/layout : 1
[optional : 1
directory] : 1
--------------------------- : 27
"Uninstall/Change" : 1
"Modify" : 1
checkboxes : 4
unchanged : 101
directory; : 7
reinstall : 3
"Repair" : 1
"Uninstall" : 1
================================ : 45
installable : 1
mainly : 30
3.11" : 1
Ensure : 68
pay : 10
launched : 15
finding : 38
PowerShell : 9
"idle" : 2
suffixes : 24
"python3.exe" : 2
"python3.x.exe" : 2
(where : 32
"3.x" : 1
3.11) : 9
"Manage : 1
App : 3
Aliases" : 1
whichever : 14
venv" : 5
activated : 21
prefer : 29
Apps : 3
right-click : 3
Uninstall : 2
Uninstalling : 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
"TEMP" : 2
well-known : 16
folders : 8
"%APPDATA%" : 1
"c:\Users\<user>\AppData\" : 1
"C:\Users\<user>\AppData\Local" : 1
"C:\Users\<user>\AppDat : 1
a\Local\Packages\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\Lo : 1
calCache\Local\" : 1
folder : 31
"C:\Windows\System32" : 2
"C:\Program : 4
Files\WindowsApps\package_name\VFS\SystemX86" : 1
"os.path.realpath()": : 1
test_file : 1
'C:\\Users\\example\\AppData\\Local\\test.txt' : 1
os.path.realpath(test_file) : 1
'C:\\Users\\example\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0\\LocalCache\\Local\\test.txt' : 1
exist: : 7
"HKLM\\Software" : 3
merged : 27
"registry.dat" : 1
key/value : 27
Microsoft's : 4
full-trust : 1
docs.microsoft.com/en-us/windows/msix/desktop : 1
/desktop-to-uwp-behind-the-scenes : 1
=========================== : 38
reduced : 34
nuget : 4
.NET" : 1
perfectly : 11
build-time : 3
Visit : 2
up-to-date : 16
sufficient : 42
"nuget.exe" : 1
"https://aka.ms/nugetclidl" : 1
curl : 3
using: : 8
nuget.exe : 2
-ExcludeVersion : 4
-OutputDirectory : 2
pythonx86 : 1
"-Version : 1
3.x.y" : 1
"." : 30
"-ExcludeVersion" : 1
Inside : 9
"tools" : 2
installation: : 8
.\python.3.5.2\tools\python.exe : 1
-V : 5
.\python\tools\python.exe : 1
upgradeable : 1
side-by-side : 3
CI : 14
Alongside : 1
"build\native" : 1
MSBuild : 3
"python.props" : 1
Including : 5
www.nuget.org/packages/python : 1
www.nuget.org/packages/pythonx86 : 1
acting : 4
end-users : 2
extracted : 34
optimized : 68
"python3.dll" : 8
"python37.dll" : 2
"pythonw.exe" : 6
Tcl/tk : 1
dependants : 1
Idle) : 1
responsibility : 29
"ucrtbase.dll" : 1
("vendoring") : 1
conversely : 2
appear) : 1
customized : 65
indications : 2
icons : 7
company : 5
behave : 86
"Py_Main" : 1
hard-coded : 15
trouble : 6
distinguishing : 3
opportunity : 7
native : 122
majority : 15
extracting : 16
loadable : 11
Otherwise : 276
Besides : 13
features: : 28
multi-platform : 2
Anaconda : 1
Popular : 1
numpy : 7
scipy : 1
pandas) : 1
"conda" : 1
Enthought : 3
Deployment : 1
"The : 14
Generation : 1
Manager" : 1
Previously : 284
Canopy : 1
life : 11
2016 : 10
WinPython : 1
prebuilt : 1
reliable : 32
permanently : 9
**set** : 1
C:\>set : 2
PATH=C:\Program : 1
Files\Python : 2
3.9;%PATH% : 1
PYTHONPATH=%PYTHONPATH%;C:\My_python_lib : 1
C:\>python : 1
signs : 13
expand : 20
**python.exe** : 1
click : 13
'edit : 1
variables' : 3
non-restricted : 1
Administrator : 1
rights) : 2
"PATH".The : 1
"PYTHONPATH" : 26
https://docs.microsoft.com/en-us/windows/win32/procthread : 1
/environment-variables : 1
https://docs.microsoft.com/en-us/windows-server/administration : 2
/windows-commands/set_1 : 1
/windows-commands/setx : 1
"setx" : 1
labelled : 4
"Add : 2
PATH" : 1
"Scripts\" : 1
**python** : 7
**pip** : 3
re-run : 10
Modify : 37
directions : 6
semicolon : 8
existed): : 1
C:\WINDOWS\system32;C:\WINDOWS;C:\Program : 1
legacy : 114
Page) : 2
"locale.getencoding()") : 3
WSL : 1
Subsystem : 3
Linux) : 6
"-X : 68
utf8" : 8
"PYTHONUTF8=1" : 2
"PYTHONUTF8" : 8
enabling : 23
"mbcs" : 5
3.7+ : 2
disabled : 133
for: : 4
528** : 4
details) : 40
529** : 11
aids : 2
locating : 8
command-line) : 2
preference : 23
originally : 51
397** : 2
---------------------- : 39
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
System-wide : 2
Prompt: : 1
command- : 9
-3.7 : 1
installed: : 6
'py' : 3
operable : 1
--list : 4
version(s) : 1
"-x.y" : 1
"-V:Company/Tag" : 1
514** : 4
discoverable : 5
"--list" : 1
runtimes : 9
"-V:" : 3
Company : 2
provider : 3
providers : 4
implies : 36
tag: : 13
'3.*' : 1
tagged : 3
-V:3 : 1
'PythonCore' : 1
-V:PythonCore/ : 1
PythonCore's : 1
-V:PythonCore/3 : 1
("-3") : 1
selects : 43
("-V:3") : 1
matched : 109
case-insenitive : 1
oneither : 1
dot : 41
hyphen : 7
"-V:3.1" : 1
"3.1-32" : 2
"3.10" : 2
Tags : 2
("3.10" : 1
"3.1") : 2
("-V:3.01" : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 4
(created : 11
tool) : 3
environment's : 11
deactivate : 9
~~~~~~~~~~~~~~~~~~~~~~ : 5
sys.stdout.write("hello : 1
%s\n" : 3
(sys.version,)) : 1
hello.py : 4
be: : 17
Re-executing : 1
qualifier : 13
"# : 13
python3.7" : 1
backward : 96
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
".pyw" : 4
double-click : 8
explorer : 1
facilities : 19
-------------------- : 55
"shebang" : 7
demonstrate : 6
'virtual' : 1
are: : 135
"/usr/bin/env" : 3
"/usr/bin/python" : 2
"/usr/local/bin/python" : 3
/usr/bin/python : 3
hope : 8
"/usr" : 6
suffixed : 1
(either : 32
version) : 22
"-32" : 5
I.e : 2
"/usr/bin/python3.7-32" : 1
3.7: : 226
Beginning : 3
"-64" : 7
architecture : 28
"/usr/bin/python3-64") : 1
3.11: : 205
deprecated : 683
"any : 2
provably : 2
i386/32-bit" : 1
"-V:<TAG>" : 1
tag : 117
corresponds : 79
"env" : 11
"PYLAUNCHER_NO_SEARCH_PATH" : 1
(to : 41
looked : 57
"[commands]" : 1
launcher's : 1
.INI : 4
(no : 32
executable) : 3
(additional : 1
filename) : 8
[commands] : 1
/bin/xpython=C:\Program : 1
Files\XPython\python.exe : 1
**Windows** : 1
Unix-style : 7
shells : 25
-v : 37
"-v" : 22
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
.ini : 4
"py.ini" : 4
("%LOCALAPPDATA%" : 1
"$env:LocalAppData") : 1
'console' : 3
py.exe) : 1
'windows' : 2
pyw.exe) : 1
"application : 4
directory" : 6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
dictate : 3
('.') : 1
specifier : 55
"#!python" : 1
"#!python3" : 1
qualifiers : 9
"PY_PYTHON" : 1
"3.7" : 1
"3.7-32" : 1
"3.7-64" : 1
newer.) : 2
"PY_PYTHON{major}" : 1
"{major}" : 1
above) : 36
enumerate : 4
(major.minor) : 1
predicted : 3
PC : 8
noted : 30
Examples: : 29
"python2" : 1
"python3" : 7
"python3.7" : 1
"PY_PYTHON=3" : 3
"PY_PYTHON=3.7-32" : 1
(PY_PYTHON : 1
specified.) : 1
"PY_PYTHON3=3.7" : 2
"[defaults]" : 1
"PY_" : 1
insensitive.) : 1
"PY_PYTHON=3.7" : 1
containing: : 2
[defaults] : 2
python=3.7 : 1
python=3 : 1
python3=3.7 : 1
------------------ : 45
"PYLAUNCHER_DEBUG" : 1
diagnostic : 13
console) : 2
manages : 20
simultaneously : 39
*and* : 9
-------------- : 47
"PYLAUNCHER_DRYRUN" : 1
encoded : 281
render : 6
"PYLAUNCHER_ALLOW_INSTALL" : 2
"PYLAUNCHER_ALWAYS_INSTALL" : 1
causes : 141
"PYLAUNCHER_DRYRUN") : 1
apart : 12
Entries : 12
alphabetical : 11
+---------------------+---------+-------------------------------------------------+ : 8
|=====================|=========|=================================================| : 1
RC_BAD_VENV_CFG : 1
107 : 2
"pyvenv.cfg" : 12
corrupt : 10
RC_CREATE_PROCESS : 1
101 : 13
Failed : 7
RC_INSTALLING : 1
111 : 8
completes : 38
RC_INTERNAL_ERROR : 1
109 : 3
Unexpected : 4
RC_NO_COMMANDLINE : 1
108 : 2
Unable : 2
RC_NO_PYTHON : 1
103 : 10
RC_NO_VENV_CFG : 1
106 : 6
supplement : 1
sys.path : 34
detailed : 93
"._pth" : 10
populated : 25
separated : 92
semicolons : 5
drive : 32
("C:\" : 1
subkeys : 9
"\SOFTWARE\Python\PythonCore{version}\PythonPath" : 1
"HKEY_CURRENT_USER" : 1
"HKEY_LOCAL_MACHINE" : 2
hives : 1
Subkeys : 1
semicolon-delimited : 1
HKLM : 1
HKCU : 1
empty.) : 1
"PYTHONHOME" : 19
Home" : 4
"landmark : 1
file" : 14
"Lib\os.py" : 2
"pythonXY.zip") : 1
deduce : 3
sub-directories : 4
("Lib" : 1
"plat-win" : 1
constructed : 110
PythonPath : 1
Home : 10
".\Lib;.\plat-win" : 1
variations : 18
apply: : 4
"home" : 11
deducing : 2
PCbuild : 1
deduced : 5
hosted : 7
(different : 2
COM : 12
(frozen : 1
setup) : 1
advice : 12
installations: : 1
site" : 4
"Py_SetPath()" : 9
"Py_SetProgramName()" : 13
"Py_Initialize()" : 56
Clear : 31
overwrite : 28
suggestions : 32
directly) : 5
landmark : 4
("Lib\os.py") : 1
instead.) : 3
susceptible : 5
non-standard : 30
site-packages : 41
Adds : 55
"applocal" : 1
"pythonXX.zip" : 1
"Modules" : 1
"PythonPath") : 1
"importlib.machinery.WindowsRegistryFinder" : 2
Hammond : 9
Component : 4
(COM) : 1
(MFC) : 1
MFC : 1
shipped : 14
Golden : 3
Distutils) : 1
("***.exe" : 1
release's : 2
checkout : 3
official : 28
"PCbuild" : 4
"PCbuild/readme.txt" : 1
ongoing : 2
developers) : 2
unsupported : 58
CE : 4
was) : 1
Cygwin : 26
======================================================== : 4
preinstalled : 2
distro's : 1
repositories : 1
distro : 9
links: : 4
https://www.debian.org/doc/manuals/maint-guide/first.en.html : 1
https://en.opensuse.org/Portal:Packaging : 1
OpenSuse : 1
https://docs-old.fedoraproject.org/en- : 1
US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-creating- : 1
rpms.html : 1
Fedora : 13
http://www.slackbook.org/html/package-management-making- : 1
packages.html : 1
Slackware : 1
use: : 30
pkg : 2
pkg_add : 3
-r : 13
ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert : 1
here>/python-<version>.tgz : 1
i386 : 3
2.5.1 : 2
ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2.tgz : 1
OpenCSW : 1
Various : 29
"pkgutil : 1
-i : 8
python27" : 1
clone : 17
(If : 29
clone.) : 1
consists : 71
usual : 98
commands: : 7
./configure : 5
extensively : 11
README.rst : 3
masquerade : 2
altinstall" : 4
"*exec_prefix*/bin/python*version*" : 1
conventions; : 1
"prefix" : 20
"exec_prefix" : 14
installation-dependent : 4
software; : 1
+-------------------------------------------------+--------------------------------------------+ : 4
File/directory : 1
Meaning : 74
|=================================================|============================================| : 1
"*exec_prefix*/bin/python3" : 1
"*prefix*/lib/python*version*" : 3
"*exec_prefix*/lib/python*version*" : 2
"*prefix*/include/python*version*" : 1
"*exec_prefix*/include/python*version*" : 1
chmod : 2
Unices : 2
hardcode : 3
"/usr/bin/python3" : 1
vendor's : 2
trust : 16
"openssl.cnf" : 2
symlink : 53
"/etc" : 1
"/etc/ssl" : 1
"/etc/pki/tls" : 1
"cert.pem" : 1
"certs" : 1
/etc/ : 1
-name : 1
openssl.cnf : 1
-printf : 1
"%h\n" : 1
/etc/ssl : 1
Download : 5
"install_sw" : 2
"install" : 4
-O : 7
https://www.openssl.org/source/openssl-VERSION.tar.gz : 1
xzf : 1
openssl-VERSION : 2
pushd : 2
./config : 2
\ : 42
--prefix=/usr/local/custom-openssl : 1
--libdir=lib : 1
--openssldir=/etc/ssl : 1
-j1 : 4
-j8 : 2
install_sw : 1
popd : 1
"--with- : 4
openssl" : 1
"--with-openssl-rpath" : 2
options) : 11
python-3.x.x : 1
-C : 10
--with-openssl=/usr/local/custom-openssl : 1
--with-openssl-rpath=auto : 1
--prefix=/usr/local/python-3.x.x : 1
altinstall : 1
====================== : 81
"./configure" : 12
--help : 71
"Misc/SpecialBuilds.txt" : 3
--enable-loadable-sqlite-extensions : 1
"_sqlite" : 1
(default : 73
no) : 13
"sqlite3.Connection.enable_load_extension()" : 3
--disable-ipv6 : 1
IPv6 : 110
(enabled : 6
supported) : 3
--enable-big-digits=[15|30] : 1
Define : 30
digits: : 9
"PYLONG_BITS_IN_DIGIT" : 3
"15" : 3
"30" : 2
"sys.int_info.bits_per_digit" : 1
--with-cxx-main : 1
--with-cxx-main=COMPILER : 1
"main()" : 12
compiler: : 3
"$CXX" : 1
*COMPILER* : 1
--with-suffix=SUFFIX : 1
*SUFFIX* : 1
".exe" : 4
("python.exe" : 1
".js" : 2
Emscripten : 172
node : 219
".html" : 2
".wasm" : 3
WASI : 192
("python" : 1
WASM : 7
--with-tzpath=<list : 1
pathsep> : 1
"zoneinfo.TZPATH" : 4
Default: : 76
"/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zon : 1
einfo:/etc/zoneinfo" : 1
"os.pathsep" : 5
--without-decimal-contextvar : 3
thread-local : 18
coroutine-local : 2
(default) : 45
"decimal.HAVE_CONTEXTVAR" : 1
--with-dbmliborder=<list : 1
backend : 9
names> : 1
Override : 17
db : 5
backends : 1
(":") : 1
names: : 19
"ndbm"; : 1
"gdbm"; : 1
--without-c-locale-coercion : 1
coercion : 23
"PY_COERCE_C_LOCALE" : 1
"PYTHONCOERCECLOCALE" : 3
538** : 6
--with-platlibdir=DIRNAME : 1
"lib") : 1
SuSE : 6
"lib64" : 2
"sys.platlibdir" : 11
--with-wheel-pkg-dir=PATH : 1
wheel : 22
(none : 1
"/usr/share/python-wheels/" : 3
"ensurepip._bundled" : 3
--with-pkg-config=[check|yes|no] : 1
Whether : 42
**pkg-config** : 4
"check" : 8
(default): : 5
"yes": : 1
"no": : 2
--enable-pystats : 1
Turn : 17
gathering : 7
dumped : 11
(probably : 4
unique) : 1
"/tmp/py_stats/" : 1
"C:\temp\py_stats\" : 1
"Tools/scripts/summarize_stats.py" : 1
stats : 10
--with-emscripten-target=[browser|node] : 1
"wasm32-emscripten" : 51
"browser" : 1
preload : 1
MEMFS : 1
"node": : 1
NODERAWFS : 1
pthread : 7
--enable-wasm-dynamic-linking : 1
"dlopen" : 3
increases : 12
dead : 19
elimination : 2
--enable-wasm-pthreads : 1
pthreads : 6
--prefix=PREFIX : 1
architecture-independent : 1
PREFIX : 1
"/usr/local" : 10
retrived : 2
"sys.prefix" : 11
"--prefix="$HOME/.local/"" : 1
--exec-prefix=EPREFIX : 1
architecture-dependent : 1
EPREFIX : 1
"-- : 29
prefix" : 8
"sys.exec_prefix" : 9
--disable-test-modules : 1
"_testcapi" : 2
(built : 3
--with-ensurepip=[upgrade|install|no] : 1
"upgrade" : 2
--altinstall : 1
--upgrade" : 2
"install": : 1
--altinstall" : 1
command; : 6
ensurepip; : 1
"--enable-optimizations : 1
--with-lto" : 1
(PGO : 1
LTO) : 1
--enable-optimizations : 4
Enable : 67
Profile : 12
Guided : 3
(PGO) : 5
"PROFILE_TASK" : 1
(disabled : 5
Clang : 7
"llvm-profdata" : 2
PGO : 22
GCC : 15
semantic : 18
interposition : 1
libpython : 10
"--enable- : 7
shared" : 2
used: : 26
"-fno-semantic-interposition" : 3
3.10: : 187
PROFILE_TASK : 1
Makefile: : 1
"-m : 8
--pgo : 3
--timeout=$(TESTTIMEOUT)" : 1
--with-lto=[full|thin|no|yes] : 1
Link : 20
(LTO) : 3
"llvm-ar" : 2
LTO : 11
("ar" : 1
macOS) : 8
LTO-aware : 1
("ld.gold" : 1
"lld") : 1
ThinLTO : 2
"--with-lto=thin" : 2
--with-computed-gotos : 1
gotos : 5
compilers) : 1
--without-pymalloc : 2
"PYTHONMALLOC" : 12
--without-doc-strings : 1
footprint : 10
affected : 73
"WITH_DOC_STRINGS" : 2
"PyDoc_STRVAR()" : 1
--enable-profiling : 1
C-level : 18
"gprof" : 1
"--with-pydebug" : 6
Add : 1084
"d" : 9
"sys.abiflags" : 3
"sys.gettotalrefcount()" : 1
showrefcount" : 6
"PYTHONTHREADDEBUG" : 2
"__lltrace__" : 3
variable: : 18
"Py_DEBUG" : 13
"Py_REF_DEBUG" : 3
checks: : 7
surrounded : 20
"#ifdef : 6
Py_DEBUG" : 1
"#endif" : 1
"assert(...)" : 1
"_PyObject_ASSERT(...)" : 1
assertions: : 2
"NDEBUG" : 2
assertions" : 1
sanity : 11
filled : 64
deallocator : 28
("gc.collect()" : 1
"Py_SAFE_DOWNCAST()" : 1
underflow : 7
downcasting : 1
narrow : 8
"--with-trace-refs" : 7
3.8: : 221
compatible: : 5
"Py_TRACE_REFS" : 10
introduces : 38
incompatibility : 4
--with-pydebug : 2
mode: : 26
--with-trace-refs : 4
Effects: : 1
"sys.getobjects()" : 5
"PYTHONDUMPREFS" : 5
build) : 5
("Py_DEBUG" : 1
macros) : 2
--with-assertions : 1
no): : 1
"assert(...);" : 1
"_PyObject_ASSERT(...);" : 1
"OPT" : 5
(debug : 1
--with-valgrind : 1
Valgrind : 10
--with-dtrace : 2
--with-address-sanitizer : 1
AddressSanitizer : 2
detector : 12
"asan" : 1
--with-memory-sanitizer : 2
MemorySanitizer : 1
allocation : 78
"msan" : 1
--with-undefined-behavior-sanitizer : 1
UndefinedBehaviorSanitizer : 1
"ubsan" : 1
--enable-shared : 1
library: : 12
"libpython" : 8
--without-static-libpython : 2
"libpythonMAJOR.MINOR.a" : 3
"python.o" : 4
--with-libs='lib1 : 1
...' : 3
--with-system-expat : 1
"expat" : 3
--with-system-ffi : 1
"ffi" : 1
system-dependent) : 2
--with-system-libmpdec : 2
"mpdec" : 1
--with-readline=editline : 1
"editline" : 1
"WITH_EDITLINE" : 1
--without-readline : 1
"HAVE_LIBREADLINE" : 1
--with-libm=STRING : 1
"libm" : 2
*STRING* : 3
dependent) : 4
--with-libc=STRING : 1
"libc" : 2
--with-openssl=DIR : 1
Root : 6
--with-openssl-rpath=[no|auto|DIR] : 1
(rpath) : 3
libraries: : 1
"no" : 2
rpath; : 1
"auto": : 4
auto-detect : 4
rpath : 3
"--with-openssl" : 1
"pkg-config"; : 1
*DIR*: : 1
--with-hash-algorithm=[fnv|siphash13|siphash24] : 1
"Python/pyhash.c": : 1
"siphash13" : 4
(default); : 1
"siphash24"; : 1
"fnv" : 1
--with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2 : 1
"md5"; : 1
"sha1"; : 1
"sha256"; : 1
"sha512"; : 1
"sha3" : 1
shake); : 1
"blake2" : 1
--with-ssl-default-suites=[python|openssl|STRING] : 1
cipher : 47
selection; : 1
"openssl": : 1
OpenSSL's : 24
untouched; : 1
*STRING*: : 1
"Mac/README.rst" : 1
--enable-universalsdk : 1
--enable-universalsdk=SDKDIR : 1
*SDKDIR* : 1
SDK : 19
--enable-framework : 1
--enable-framework=INSTALLDIR : 1
Python.framework : 1
*INSTALLDIR* : 1
--with-universal-archs=ARCH : 1
Specify : 24
"--enable-universalsdk" : 3
Options: : 12
"universal2"; : 1
"32-bit"; : 1
"64-bit"; : 1
"3-way"; : 1
"intel"; : 1
"intel-32"; : 1
"intel-64"; : 1
"all" : 8
--with-framework-name=FRAMEWORK : 1
"--enable-framework" : 2
(default: : 62
"Python") : 1
cross : 24
--build=BUILD : 1
BUILD : 1
guessed : 12
**config.guess** : 1
--host=HOST : 1
cross-compile : 3
HOST : 13
(target : 2
platform) : 9
--with-build-python=path/to/python : 1
CONFIG_SITE=file : 1
overrides : 49
*config.site* : 1
config.site-aarch64 : 1
ac_cv_buggy_getaddrinfo=no : 1
ac_cv_file__dev_ptmx=yes : 1
ac_cv_file__dev_ptc=no : 1
CONFIG_SITE=config.site-aarch64 : 1
../configure : 1
--build=x86_64-pc-linux-gnu : 1
--host=aarch64-unknown-linux-gnu : 1
--with-build-python=../x86_64/python : 1
"configure.ac" : 4
=> : 69
"configure"; : 1
"Makefile.pre.in" : 1
"Makefile" : 15
"configure"); : 2
"pyconfig.h" : 8
"Modules/Setup": : 1
"Module/makesetup" : 1
script; : 5
"setup.py": : 1
(".c") : 1
(".o") : 2
(".a") : 2
"Modules/Setup") : 1
setup.py : 98
build" : 2
"make": : 1
platform:": : 1
profile-opt": : 1
"--enable-optimizations" : 7
"make" : 4
("make : 1
all" : 2
"make") : 1
buildbottest": : 1
buildbots : 10
"TESTTIMEOUT" : 1
seconds) : 18
(1200 : 1
minutes) : 3
install": : 1
regen-all": : 1
Regenerate : 2
files; : 10
regen-stdlib-module-names" : 1
"autoconf" : 2
separately : 42
remaining : 118
clean": : 1
distclean": : 1
Same : 56
clean" : 6
"Py_BUILD_CORE_BUILTIN" : 2
"__file__" : 47
attribute: : 39
'sys' : 4
(built-in)> : 3
sys.__file__ : 1
AttributeError: : 29
'__file__' : 3
"_asyncio" : 2
"Py_BUILD_CORE_MODULE" : 6
x86-64: : 1
_asyncio : 2
'_asyncio' : 1
'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'> : 1
_asyncio.__file__ : 1
'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so' : 1
"Modules/Setup" : 19
"*shared*" : 3
marker : 33
"PyAPI_FUNC()" : 2
"PyAPI_API()" : 1
"PyMODINIT_FUNC()" : 1
"Include/pyport.h" : 2
differently : 48
defined: : 18
"Py_EXPORTED_SYMBOL" : 1
"Py_IMPORTED_SYMBOL" : 1
mistake : 27
"PyInit_xxx()" : 1
"ImportError" : 62
CONFIGURE_CPPFLAGS : 1
"CPPFLAGS" : 6
CPPFLAGS : 3
(Objective) : 1
C/C++ : 17
preprocessor : 24
"-I<include : 1
dir>" : 4
nonstandard : 5
"<include : 1
"LDFLAGS" : 9
shell's : 9
BASECPPFLAGS : 1
PY_CPPFLAGS : 1
Extra : 11
"$(BASECPPFLAGS) : 1
-I : 6
-I$(srcdir)/Include : 1
$(CONFIGURE_CPPFLAGS) : 1
$(CPPFLAGS)" : 1
CC : 6
"gcc : 2
-pthread" : 2
MAINCC : 1
"--with-cxx-main" : 2
"$(CC)" : 1
CFLAGS : 6
CFLAGS_NODIST : 1
"CFLAGS_NODIST" : 9
"CFLAGS" : 13
(bpo-21121) : 1
contain: : 2
"-I" : 24
package- : 2
hardening : 1
"-Werror" : 2
heightened : 1
EXTRA_CFLAGS : 1
CONFIGURE_CFLAGS : 1
CONFIGURE_CFLAGS_NODIST : 1
BASECFLAGS : 1
OPT : 1
CFLAGS_ALIASING : 1
Strict : 1
non-strict : 1
aliasing : 4
CCSHARED : 1
"-fPIC" : 2
CFLAGSFORSHARED : 1
"$(CCSHARED)" : 1
"--enable-shared" : 7
PY_CFLAGS : 1
"$(BASECFLAGS) : 1
$(OPT) : 1
$(CONFIGURE_CFLAGS) : 1
$(CFLAGS) : 1
$(EXTRA_CFLAGS)" : 1
PY_CFLAGS_NODIST : 1
"$(CONFIGURE_CFLAGS_NODIST) : 1
$(CFLAGS_NODIST) : 1
-I$(srcdir)/Include/internal" : 1
PY_STDMODULE_CFLAGS : 2
"$(PY_CFLAGS) : 1
$(PY_CFLAGS_NODIST) : 1
$(PY_CPPFLAGS) : 1
$(CFLAGSFORSHARED)" : 1
PY_CORE_CFLAGS : 1
"$(PY_STDMODULE_CFLAGS) : 2
-DPy_BUILD_CORE" : 1
PY_BUILTIN_MODULE_CFLAGS : 1
-DPy_BUILD_CORE_BUILTIN" : 1
PURIFY : 1
used) : 27
"_testembed" : 1
"$(PURIFY) : 1
$(MAINCC)" : 1
CONFIGURE_LDFLAGS : 1
Avoid : 117
stomping : 1
pre-set : 4
LDFLAGS_NODIST : 1
"LDFLAGS_NODIST" : 2
(bpo-35257) : 1
"-L" : 4
libraries) : 7
package-supplied : 1
CONFIGURE_LDFLAGS_NODIST : 1
LDFLAGS : 2
"-L<lib : 1
"<lib : 1
LIBS : 1
"-lrt" : 1
LDSHARED : 1
"@LDSHARED@ : 1
$(PY_LDFLAGS)" : 1
BLDSHARED : 1
"@BLDSHARED@ : 1
$(PY_CORE_LDFLAGS)" : 1
PY_LDFLAGS : 1
"$(CONFIGURE_LDFLAGS) : 1
$(LDFLAGS)" : 1
PY_LDFLAGS_NODIST : 1
"$(CONFIGURE_LDFLAGS_NODIST) : 1
$(LDFLAGS_NODIST)" : 1
PY_CORE_LDFLAGS : 1
******************************* : 9
scans : 9
implementations' : 1
schemes : 41
differ : 46
invoking : 53
options: : 70
[-bBdEhiIOqsSuvVWx?] : 1
[-c : 2
module-name : 1
[args] : 1
script: : 23
resembles : 5
invocation: : 2
EOF : 63
(an : 33
end-of-file : 11
"Ctrl-D" : 1
"Ctrl-Z : 1
Enter" : 1
Windows) : 37
"-c : 1
command" : 7
statement(s) : 3
*command* : 21
Leading : 20
module-name" : 3
non-interactive : 4
terminates : 42
consumed : 47
consecutive : 25
("sys.argv[0]") : 2
reflecting : 3
-c : 28
<command> : 2
""-c"" : 1
(allowing : 7
Raises : 305
auditing : 239
"cpython.run_command" : 1
"command" : 7
<module-name> : 1
(".py") : 1
hyphen) : 1
"<pkg>.__main__" : 1
zipfiles : 10
precompiled : 3
(while : 3
""-m"") : 1
"-c" : 27
"PYTHON*" : 7
-s : 19
'setup : 1
here' : 4
'benchmarked : 1
-h : 62
"cpython.run_module" : 1
"module-name" : 2
"runpy.run_module()" : 2
Equivalent : 100
338** : 4
3.1: : 49
Supply : 2
submodule : 41
3.4: : 222
("sys.stdin") : 1
"-i" : 18
""-"" : 2
"cpython.run_stdin" : 1
<script> : 1
*script* : 5
(absolute : 8
relative) : 1
referring : 24
"cpython.run_file" : 1
"filename" : 31
"runpy.run_path()" : 2
"sys.argv[0]" : 19
("""") : 1
tab-completion : 5
history : 60
configuration) : 7
--help-env : 1
--help-xoptions : 1
implementation-specific : 12
"-X" : 35
--help-all : 1
--version : 3
3.8.0b2+ : 2
twice : 74
(3.8:0c076caaa8 : 1
Apr : 5
2019 : 6
21:55:00) : 1
[GCC : 6
6.2.0 : 1
20161005] : 1
"-VV" : 1
-b : 11
("-bb") : 1
Affects : 1
-B : 1
--check-hash-based-pycs : 2
default|always|never : 1
validation : 46
"default" : 32
checked : 108
unchecked : 7
validated : 15
"always" : 4
"never" : 1
timestamp-based : 4
unaffected : 18
-d : 6
expert : 7
"PYTHONDEBUG" : 3
-E : 4
Ignore : 33
"-P" : 11
(isolated) : 2
"PYTHONSTARTUP" : 9
trace : 132
"PYTHONINSPECT" : 4
"-E" : 13
"-s" : 21
imposed : 9
injecting : 1
malicious : 19
assert : 181
conditional : 32
"__debug__" : 23
Augment : 5
(*bytecode*) : 2
".opt-1" : 1
488**) : 3
"PYTHONOPTIMIZE" : 3
488** : 11
-OO : 5
"-O" : 19
discard : 15
".opt-2" : 1
-P : 2
prepend : 24
"sys.path": : 3
script.py" : 4
symbolic : 126
(REPL) : 3
lines: : 8
"PYTHONSAFEPATH" : 7
-q : 20
-R : 3
randomization : 21
"PYTHONHASHSEED" : 10
"salted" : 2
unpredictable : 9
predictable : 9
repeated : 72
invocations : 13
protection : 10
denial-of-service : 2
exploit : 4
worst : 15
O(n^2) : 2
http://www.ocert.org/advisories/ocert-2011-003.html : 2
seed : 20
secret : 15
"user : 5
370** : 6
Per : 7
-S : 4
site-dependent : 3
entails : 3
"site.main()" : 4
triggered) : 3
-u : 12
Force : 13
unbuffered : 12
"PYTHONUNBUFFERED" : 5
(filename : 4
("-vv") : 1
cleanup : 89
".pth" : 11
"PYTHONVERBOSE" : 3
-W : 6
machinery : 86
simplest : 61
unconditionally : 36
(even : 32
default): : 4
-Wdefault : 2
Warn : 12
-Werror : 1
-Walways : 1
-Wmodule : 1
-Wonce : 1
-Wignore : 1
Never : 12
warn : 15
"-Wi" : 1
"-Wignore" : 1
action:message:category:module:lineno : 1
values; : 10
"-W : 5
ignore::DeprecationWarning" : 1
ignores : 72
*action* : 12
*message* : 54
message; : 13
case-insensitive : 33
*category* : 18
matches : 306
"DeprecationWarning") : 3
name; : 16
(fully : 1
qualified) : 1
case-sensitive : 6
*lineno* : 20
"-W" : 25
given; : 2
issued) : 2
"PYTHONWARNINGS" : 13
"warnings.filterwarnings()" : 2
-x : 8
non-Unix : 7
"#!cmd" : 2
-X : 14
faulthandler" : 4
"faulthandler"; : 1
tracemalloc" : 2
tracemalloc=NFRAME" : 1
*NFRAME* : 1
"tracemalloc.start()" : 4
int_max_str_digits" : 7
configures : 11
"PYTHONINTMAXSTRDIGITS" : 5
importtime" : 5
cumulative : 32
imports) : 2
(excluding : 9
broken : 98
Typical : 12
"python3 : 19
importtime : 1
'import : 5
asyncio'" : 1
"PYTHONPROFILEIMPORTTIME" : 4
dev": : 1
utf8=0" : 1
disables : 42
automatically) : 4
pycache_prefix=PATH" : 2
rooted : 11
"PYTHONPYCACHEPREFIX" : 6
warn_default_encoding" : 5
locale-specific : 11
"PYTHONWARNDEFAULTENCODING" : 4
no_debug_ranges" : 4
(end : 4
column : 135
offset) : 4
smaller : 86
visual : 5
indicators : 3
"PYTHONNODEBUGRANGES" : 4
frozen_modules" : 2
"on" : 5
"off" : 5
case) : 28
(running : 7
tree) : 5
"importlib_bootstrap" : 1
"importlib_bootstrap_external" : 1
retrieving : 23
"sys._xoptions" : 3
3.2: : 191
3.3: : 285
showalloccount" : 5
dev" : 10
pycache_prefix" : 1
logs : 70
"io.IOBase" : 6
3.9: : 170
*encoding* : 171
*errors* : 148
decoding : 139
operations.The : 1
oldparser" : 2
-------------------------------- : 20
-J : 1
influence : 3
customary : 4
environmental : 8
PYTHONHOME : 1
"*prefix*" : 13
"*exec_prefix*" : 2
defaulting : 29
replaces : 54
"*prefix*:*exec_prefix*" : 1
Non-existent : 1
form) : 1
dependent : 80
front : 36
manipulated : 13
PYTHONSAFEPATH : 1
non-empty : 66
PYTHONPLATLIBDIR : 1
PYTHONSTARTUP : 4
qualification : 3
"sys.ps1" : 7
"sys.ps2" : 7
"sys.__interactivehook__" : 2
"cpython.run_startup" : 1
PYTHONOPTIMIZE : 1
PYTHONBREAKPOINT : 1
dotted-path : 1
"sys.breakpointhook()" : 13
"pdb.set_trace" : 1
PYTHONDEBUG : 1
"-d" : 9
PYTHONINSPECT : 1
"os.environ" : 32
termination : 34
PYTHONUNBUFFERED : 1
"-u" : 9
PYTHONVERBOSE : 1
PYTHONCASEOK : 3
PYTHONDONTWRITEBYTECODE : 1
"-B" : 7
PYTHONPYCACHEPREFIX : 1
mirror : 5
"pycache_prefix=PATH" : 2
PYTHONHASHSEED : 1
hash() : 2
repeatable : 1
selftests : 1
cluster : 1
[0,4294967295] : 1
PYTHONINTMAXSTRDIGITS : 1
PYTHONIOENCODING : 3
stdin/stdout/stderr : 2
"encodingname:errorhandler" : 1
"encodingname" : 2
":errorhandler" : 2
"str.encode()" : 12
ignored; : 8
"'backslashreplace'" : 10
"PYTHONLEGACYWINDOWSSTDIO" : 5
redirected : 24
PYTHONNOUSERSITE : 1
PYTHONUSERBASE : 1
Defines : 5
--user" : 1
PYTHONEXECUTABLE : 1
PYTHONWARNINGS : 2
PYTHONWARNINGS=default : 1
PYTHONWARNINGS=error : 1
PYTHONWARNINGS=always : 1
PYTHONWARNINGS=module : 1
PYTHONWARNINGS=once : 1
PYTHONWARNINGS=ignore : 1
PYTHONFAULTHANDLER : 1
"faulthandler.enable()" : 8
startup: : 3
"SIGSEGV" : 7
"SIGFPE" : 7
"SIGABRT" : 8
"SIGBUS" : 5
"SIGILL" : 6
dump : 47
PYTHONTRACEMALLOC : 1
"PYTHONTRACEMALLOC=1" : 1
PYTHONPROFILEIMPORTTIME : 1
PYTHONASYNCIODEBUG : 1
"default": : 2
"malloc": : 2
"malloc()" : 46
domains : 29
("PYMEM_DOMAIN_RAW" : 1
"PYMEM_DOMAIN_MEM" : 8
"PYMEM_DOMAIN_OBJ") : 1
"pymalloc": : 2
"PYMEM_DOMAIN_OBJ" : 7
"PYMEM_DOMAIN_RAW" : 3
domain : 114
hooks: : 3
"debug": : 1
"malloc_debug": : 1
"malloc" : 10
"pymalloc_debug": : 1
"pymalloc" : 6
""default"" : 3
PYTHONMALLOCSTATS : 1
arena : 13
PYTHONLEGACYWINDOWSFSENCODING : 1
revert : 9
pre-3.6 : 2
'mbcs' : 2
'replace' : 2
'utf-8' : 9
'surrogatepass' : 1
"sys._enablelegacywindowsfsencoding()" : 2
Availability: : 379
PYTHONLEGACYWINDOWSSTDIO : 2
utf-8 : 21
pipes) : 4
PYTHONCOERCECLOCALE : 3
coercing : 1
ASCII-based : 4
locales : 23
"0") : 8
"LC_ALL" : 6
"LC_CTYPE" : 22
"POSIX" : 7
runtime: : 1
"C.UTF-8" : 3
"C.utf8" : 3
"UTF-8" : 9
accordingly : 17
locale-aware : 12
subprocesses : 33
(regardless : 7
interpreter) : 15
"locale.getdefaultlocale()") : 1
coercion) : 3
"surrogateescape" : 25
("sys.stderr" : 2
continues : 49
"backslashreplace" : 9
locale) : 9
"PYTHONIOENCODING" : 8
"PYTHONCOERCECLOCALE=warn" : 2
emit : 51
"stderr" : 25
activates : 4
*would* : 1
"ASCII" : 18
PYTHONDEVMODE : 1
PYTHONUTF8 : 3
initialisation : 7
PYTHONWARNDEFAULTENCODING : 1
PYTHONNODEBUGRANGES : 1
PYTHONTHREADDEBUG : 1
Need : 6
PYTHONDUMPREFS : 1
shutting : 13
PYTHONDUMPREFSFILE=FILENAME : 1
*FILENAME* : 1
setup : 142
************************ : 31
Bob : 7
Savage : 1
<bobsavage@mac.com> : 1
principle : 9
pre-installed : 2
invited : 2
(https://www.python.org) : 1
"universal : 2
binary" : 1
natively : 21
Mac's : 1
Intel : 12
PPC : 1
CPU's : 2
3.12" : 1
"Applications" : 1
distributions; : 1
PythonLauncher : 1
double-clicking : 9
"/Library/Frameworks/Python.framework" : 2
uninstall : 6
placed : 52
/usr/local/bin/ : 1
Apple-provided : 1
"/System/Library/Frameworks/Python.framework" : 1
Apple-controlled : 1
Apple- : 2
usages : 5
**vim** : 1
**emacs** : 1
Mac-like : 1
**BBEdit** : 1
**TextWrangler** : 1
Bare : 1
Bones : 1
http://www.barebones.com/products/bbedit/index.html) : 1
**TextMate** : 1
https://macromates.com/) : 1
**Gvim** : 1
(https://macvim-dev.github.io/macvim/) : 1
**Aquamacs** : 1
(http://aquamacs.org/) : 1
"/usr/local/bin" : 4
**PythonLauncher** : 3
script) : 6
Info : 2
Option-dragging : 1
globally : 15
quirk : 2
talk : 18
Aqua : 6
GUI) : 1
**pythonw** : 3
honors : 6
".profile" : 2
".cshrc" : 1
"~/.MacOSX/environment.plist" : 1
Apple's : 5
QA1067 : 1
http://www.hashcollision.org/hkn/python/idle_intro/index.html : 1
========================================== : 8
packages: : 8
("python : 9
install") : 1
**setuptools** : 1
https://pip.pypa.io/ : 1
=============================== : 37
*PyObjC* : 1
Objective-C/Cocoa : 1
modern : 50
PyObjC : 1
https://pypi.org/project/pyobjc/ : 1
cross- : 3
(https://www.tcl.tk) : 1
Aqua-native : 1
https://www.activestate.com; : 1
*wxPython* : 1
https://www.wxpython.org : 1
*PyQt* : 1
https://riverbankcomputing.com/software/pyqt/intro : 1
deploying : 3
**py2app** : 1
https://pypi.org/project/py2app/ : 1
Mac: : 1
https://www.python.org/community/sigs/current/pythonmac-sig/ : 1
wiki: : 1
https://wiki.python.org/moin/MacPython : 1
************************************** : 13
dozens : 2
interacting : 5
system: : 6
os.getcwd() : 5
'C:\\Python311' : 1
os.chdir('/server/accesslogs') : 1
os.system('mkdir : 1
today') : 1
mkdir : 5
os" : 1
shadowing : 2
operates : 23
"help()" : 23
"os": : 1
dir(os) : 1
<returns : 2
functions> : 1
help(os) : 1
docstrings> : 1
daily : 4
shutil.copyfile('data.db' : 1
'archive.db') : 1
'archive.db' : 1
shutil.move('/build/executables' : 1
'installdir') : 1
'installdir' : 1
searches: : 3
glob.glob('*.py') : 1
['primes.py' : 1
'random.py' : 1
'quote.py'] : 1
*argv* : 12
demo.py : 1
three" : 1
print(sys.argv) : 1
['demo.py' : 1
'one' : 3
'two' : 7
'three'] : 3
extracts : 9
displayed: : 4
argparse.ArgumentParser( : 8
prog='top' : 1
description='Show : 1
file') : 3
parser.add_argument('filenames' : 1
nargs='+') : 2
parser.add_argument('-l' : 2
'--lines' : 2
type=int : 31
default=10) : 2
parser.parse_args() : 38
print(args) : 2
top.py : 1
--lines=5 : 1
alpha.txt : 1
beta.txt" : 1
"args.lines" : 1
"args.filenames" : 1
"['alpha.txt' : 1
'beta.txt']" : 1
*stdin* : 28
*stdout* : 36
*stderr* : 37
emitting : 12
redirected: : 1
sys.stderr.write('Warning : 1
one\n') : 1
"sys.exit()" : 16
============================= : 42
offer : 35
succinct : 4
solutions: : 1
re.findall(r'\bf[a-z]*' : 2
'which : 2
foot : 5
fell : 6
fastest') : 2
['foot' : 2
'fell' : 2
'fastest'] : 2
re.sub(r'(\b[a-z]+) : 1
\1' : 1
r'\1' : 1
'cat : 3
hat') : 1
hat' : 1
debug: : 1
'tea : 2
too'.replace('too' : 1
'two') : 3
two' : 1
math: : 1
math.cos(math.pi : 1
4) : 85
0.70710678118654757 : 1
math.log(1024 : 1
10.0 : 4
selections: : 1
random.choice(['apple' : 1
'pear' : 9
'banana']) : 1
'apple' : 12
random.sample(range(100) : 1
10) : 40
sampling : 16
[30 : 1
83 : 2
41 : 3
33] : 1
0.17970987693706186 : 1
random.randrange(6) : 1
range(6) : 1
calculates : 13
statistical : 9
median : 22
variance : 29
data: : 20
[2.75 : 2
1.75 : 3
1.25 : 11
0.25 : 8
0.5 : 23
3.5] : 2
statistics.mean(data) : 2
1.6071428571428572 : 1
statistics.median(data) : 2
statistics.variance(data) : 1
1.3720238095238095 : 3
SciPy : 4
<https://scipy.org> : 2
computations : 18
mail: : 1
urlopen : 12
urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') : 1
response: : 9
line.decode() : 1
line.startswith('datetime'): : 1
print(line.rstrip()) : 1
datetime: : 1
2022-01-01T01:36:47.689215+00:00 : 1
server.sendmail('soothsayer@example.org' : 1
'jcaesar@example.org' : 1
"""To: : 1
jcaesar@example.org : 1
From: : 5
soothsayer@example.org : 1
Beware : 6
Ides : 1
""") : 35
mailserver : 2
localhost.) : 1
dates : 24
timezone : 74
date.today() : 4
datetime.date(2003 : 1
now.strftime("%m-%d-%y : 1
%d : 22
%b : 8
%Y : 6
%A : 2
%B.") : 1
'12-02-03 : 1
02 : 6
2003 : 11
Tuesday : 2
December.' : 1
birthday : 2
date(1964 : 1
31) : 6
age.days : 1
14368 : 1
archiving : 12
including: : 6
b'witch : 2
witches : 2
wrist : 2
watch' : 2
len(s) : 8
zlib.compress(s) : 1
len(t) : 1
37 : 7
zlib.decompress(t) : 1
zlib.crc32(s) : 1
226805979 : 1
tempting : 4
packing : 18
unpacking : 65
swapping : 1
demonstrates : 38
modest : 3
advantage: : 1
Timer('t=a; : 1
a=b; : 1
b=t' : 1
'a=1; : 2
b=2').timeit() : 2
0.57535828626024577 : 1
Timer('a,b : 1
b,a' : 1
0.54962537085770791 : 1
"timeit"'s : 1
granularity : 7
"pstats" : 6
validating : 6
cutting-and-pasting : 1
documentation: : 8
average(values): : 1
"""Computes : 1
print(average([20 : 1
70])) : 1
40.0 : 4
sum(values) : 2
len(values) : 2
doctest.testmod() : 4
validate : 20
effortless : 1
TestStatisticalFunctions(unittest.TestCase): : 1
test_average(self): : 1
self.assertEqual(average([20 : 1
70]) : 1
40.0) : 1
self.assertEqual(round(average([1 : 1
7]) : 4
4.3) : 1
self.assertRaises(ZeroDivisionError): : 2
average([]) : 1
self.assertRaises(TypeError): : 2
average(20 : 1
70) : 1
unittest.main() : 6
invokes : 25
"batteries : 1
included" : 1
philosophy : 3
robust : 22
modules' : 4
knowledge : 14
2822**-based : 1
attachments) : 1
interchange : 10
Comma-Separated : 1
spreadsheets : 3
Together : 3
"/usr/local/bin/python3.11" : 1
available; : 8
putting : 16
python3.11 : 2
possible; : 5
guru : 1
(E.g. : 2
"/usr/local/python" : 3
location.) : 1
"python3.11" : 1
py.exe : 12
Typing : 5
("Control-D" : 1
"Control-Z" : 1
"quit()" : 5
line-editing : 2
quickest : 2
"Control-P" : 4
beeps : 1
editing; : 1
"^P" : 1
echoed : 10
backspace : 6
shell: : 3
interactively; : 1
[arg] : 3
advised : 11
entirety : 1
spelled : 12
afterwards : 13
thereafter : 4
"argv" : 21
sys" : 1
one; : 4
"'-'" : 19
(meaning : 11
input) : 6
"'-c'" : 3
*interactive : 1
mode* : 11
*primary : 1
prompt* : 2
greater-than : 3
(">>>"); : 1
*secondary : 1
dots : 27
("...") : 5
stating : 10
printing : 93
prompt: : 5
April : 8
2021 : 2
09:25:04) : 1
10.2.0] : 1
linux : 3
Continuation : 1
multi-line : 35
statement: : 35
the_world_is_flat : 1
the_world_is_flat: : 1
print("Be : 1
careful : 51
off!") : 1
follow : 98
comment : 106
*first* : 29
-*- : 18
coding: : 10
Windows-1252 : 1
cp1252 : 3
*first : 6
line* : 4
rule : 55
-[ : 96
]- : 96
************* : 10
reinforced : 1
eager : 2
solving : 3
real- : 2
Library: : 5
browse : 7
terse) : 1
*lot* : 2
compress : 17
Skimming : 1
Reference: : 1
heavy : 8
resources: : 3
https://www.python.org: : 2
https://docs.python.org: : 1
https://pypi.org: : 1
nicknamed : 1
Cheese : 2
Shop : 3
user-created : 1
releasing : 17
https://code.activestate.com/recipes/langs/python/: : 1
sizable : 3
Particularly : 4
(O'Reilly : 1
Associates : 3
ISBN : 1
0-596-00797-3.) : 1
https://pyvideo.org : 1
collects : 14
videos : 1
user-group : 1
meetings : 1
https://scipy.org: : 1
linear : 33
algebra : 1
Fourier : 1
solvers : 1
python-list@python.org : 1
posted : 10
forwarded : 8
answering) : 1
suggesting : 1
announcing : 1
Mailing : 2
https://mail.python.org/pipermail/ : 1
posting : 7
FAQ) : 1
"Cheese : 1
Shop" : 1
sketch: : 1
customer : 1
cheese : 4
shop : 1
asks : 8
clerk : 1
you've : 31
list.append(x) : 1
"a[len(a):] : 2
[x]" : 1
list.extend(iterable) : 1
Extend : 5
iterable" : 3
list.insert(i : 1
x) : 27
Insert : 31
"a.insert(0 : 1
x)" : 25
inserts : 25
"a.insert(len(a) : 1
"a.append(x)" : 1
list.remove(x) : 1
*x* : 286
list.pop([i]) : 1
"a.pop()" : 1
(The : 65
*i* : 48
Reference.) : 1
list.clear() : 1
"del : 30
a[:]" : 1
list.index(x[ : 1
start[ : 27
end]]) : 24
zero-based : 8
*start* : 67
*end* : 34
subsequence : 30
list.count(x) : 1
list.sort(* : 1
key=None : 5
reverse=False) : 4
explanation) : 1
list.reverse() : 1
list.copy() : 1
shallow : 28
"a[:]" : 1
fruits : 4
['orange' : 1
'banana' : 6
'kiwi' : 4
'banana'] : 3
fruits.count('apple') : 1
fruits.count('tangerine') : 1
fruits.index('banana') : 1
fruits.index('banana' : 1
banana : 3
fruits.reverse() : 1
['banana' : 3
'orange'] : 1
fruits.append('grape') : 1
'orange' : 12
'grape'] : 1
fruits.sort() : 1
['apple' : 4
'grape' : 1
'pear'] : 1
fruits.pop() : 1
"insert" : 2
"remove" : 3
"sort" : 4
"[None : 1
'hello' : 12
10]" : 1
*None* : 4
relation : 3
"3+4j : 1
5+7j" : 1
comparison : 262
("last-in : 1
first- : 5
out") : 1
"pop()" : 6
[3 : 20
stack.append(6) : 1
stack.append(7) : 1
stack.pop() : 3
6] : 9
4] : 16
("first-in : 1
first-out"); : 1
appends : 25
pops : 19
shifted : 14
one) : 14
"collections.deque" : 14
deque : 52
deque(["Eric" : 1
"John" : 1
"Michael"]) : 1
queue.append("Terry") : 1
Terry : 48
arrives : 5
queue.append("Graham") : 1
Graham : 9
queue.popleft() : 2
arrive : 8
leaves : 34
'Eric' : 1
'John' : 2
Remaining : 2
arrival : 2
deque(['Michael' : 1
'Terry' : 1
'Graham']) : 1
satisfy : 13
squares.append(x**2) : 1
36 : 9
49 : 10
81] : 3
overwrites) : 1
list(map(lambda : 1
x: : 63
x**2 : 6
range(10))) : 4
equivalently: : 1
[x**2 : 1
range(10)] : 4
clauses : 41
listcomp : 4
equal: : 6
[(x : 4
[1,2,3] : 6
[3,1,4] : 1
y] : 2
[(1 : 11
4)] : 7
combs : 2
[1,2,3]: : 1
[3,1,4]: : 1
y: : 36
combs.append((x : 1
y)) : 5
"(x : 11
y)" : 22
example) : 33
parenthesized : 27
vec : 4
[-4 : 1
doubled : 6
[x*2 : 1
vec] : 2
[-8 : 1
-4 : 13
8] : 7
exclude : 27
>= : 145
0] : 8
[abs(x) : 1
[4 : 8
freshfruit : 1
[' : 9
banana' : 1
loganberry : 1
'passion : 2
fruit : 1
'] : 2
[weapon.strip() : 1
weapon : 1
freshfruit] : 1
'loganberry' : 1
fruit'] : 1
2-tuples : 25
(number : 12
square) : 1
range(6)] : 5
[(0 : 3
9) : 5
(5 : 14
25)] : 1
^^^^^^^ : 1
forget : 18
flatten : 2
'for' : 9
[[1,2,3] : 1
[4,5,6] : 1
[7,8,9]] : 1
[num : 1
elem : 16
num : 23
elem] : 1
9] : 19
pi : 14
[str(round(pi : 1
range(1 : 7
6)] : 5
['3.1' : 1
'3.14' : 2
'3.142' : 1
'3.1416' : 1
'3.14159'] : 1
3x4 : 1
[9 : 8
12] : 3
transpose : 1
columns: : 2
[[row[i] : 1
matrix] : 1
range(4)] : 2
[[1 : 3
[2 : 15
10] : 5
11] : 6
12]] : 3
saw : 4
inner : 35
transposed : 4
range(4): : 8
transposed.append([row[i] : 1
matrix]) : 1
transposed_row : 1
matrix: : 1
transposed_row.append(row[i]) : 1
transposed.append(transposed_row) : 1
"zip()" : 23
great : 13
list(zip(*matrix)) : 1
11) : 6
12)] : 3
asterisk : 7
slices : 24
slice) : 2
[-1 : 5
66.25 : 3
1234.5] : 3
a[2:4] : 1
a[:] : 2
variables: : 19
Referencing : 1
hereafter : 2
it) : 22
We'll : 14
slicing : 57
range) : 4
evolving : 4
*tuple* : 3
12345 : 5
54321 : 4
'hello!' : 1
t[0] : 2
(12345 : 1
'hello!') : 2
nested: : 2
u : 25
((12345 : 1
immutable: : 2
88888 : 1
([1 : 2
3] : 36
1]) : 6
correctly; : 1
surrounding : 14
expression) : 5
heterogeneous : 7
section) : 8
"namedtuples") : 1
items: : 19
quirks : 10
accommodate : 9
parentheses; : 1
enclose : 11
parentheses) : 4
Ugly : 1
() : 16
<-- : 2
len(empty) : 1
len(singleton) : 1
('hello',) : 1
"t : 1
'hello!'" : 1
*tuple : 3
packing*: : 1
"12345" : 1
"54321" : 1
"'hello!'" : 1
*sequence : 2
unpacking* : 3
right-hand : 15
equals : 57
*sets* : 2
unordered : 5
duplicate : 60
membership : 33
union : 55
intersection : 10
symmetric : 11
Curly : 3
"set()" : 31
"{}"; : 2
demonstration: : 1
basket : 5
{'apple' : 1
'banana'} : 1
print(basket) : 1
{'orange' : 1
'apple'} : 1
'crabgrass' : 1
Demonstrate : 2
letters : 73
set('abracadabra') : 2
set('alacazam') : 2
{'a' : 3
'r' : 26
'c' : 26
'd'} : 2
{'r' : 3
'd' : 29
'b'} : 1
'm' : 6
'z' : 7
'l'} : 2
'c'} : 1
supported: : 15
{x : 1
'abc'} : 1
*dictionary* : 2
dict) : 8
"associative : 2
memories" : 1
arrays" : 1
*keys* : 1
type; : 26
tuples; : 2
*key: : 1
value* : 4
(within : 6
dictionary) : 18
dictionary: : 11
"{}" : 14
Placing : 1
comma- : 6
key:value : 3
dictionary; : 10
forgotten : 3
non-existent : 10
"list(d)" : 1
insertion : 55
"sorted(d)" : 1
instead) : 9
"in" : 42
tel : 5
{'jack': : 3
4098 : 9
'sape': : 2
4139} : 1
tel['guido'] : 1
4127 : 9
4139 : 3
'guido': : 4
4127} : 2
tel['jack'] : 1
tel['sape'] : 1
tel['irv'] : 1
'irv': : 1
list(tel) : 1
['jack' : 1
'guido' : 2
'irv'] : 1
sorted(tel) : 1
['guido' : 1
'irv' : 1
'jack'] : 1
'jack' : 2
"dict()" : 10
key-value : 18
pairs: : 4
dict([('sape' : 1
4139) : 1
('guido' : 1
4127) : 1
('jack' : 1
4098)]) : 1
{'sape': : 2
'jack': : 2
4098} : 2
expressions: : 12
{x: : 2
6)} : 1
{2: : 1
36} : 1
arguments: : 93
dict(sape=4139 : 1
guido=4127 : 1
jack=4098) : 1
"items()" : 21
knights : 2
{'gallahad': : 1
'the : 11
pure' : 1
'robin': : 1
brave'} : 1
k : 45
knights.items(): : 1
print(k : 1
v) : 23
gallahad : 1
robin : 1
brave : 1
"enumerate()" : 16
enumerate(['tic' : 1
'tac' : 1
'toe']): : 1
print(i : 8
tic : 1
tac : 1
toe : 1
paired : 7
['name' : 4
'quest' : 1
'favorite : 1
color'] : 1
['lancelot' : 1
holy : 3
grail' : 1
'blue'] : 3
zip(questions : 1
answers): : 1
print('What : 1
{0} : 7
{1}.'.format(q : 1
a)) : 10
lancelot : 1
quest : 2
grail : 1
blue : 11
reversed(range(1 : 1
2)): : 1
print(i) : 14
unaltered : 2
sorted(basket): : 1
apple : 3
orange : 5
pear : 2
eliminates : 10
idiomatic : 5
sorted(set(basket)): : 1
print(f) : 1
safer : 11
raw_data : 1
[56.2 : 2
float('NaN') : 3
51.7 : 2
55.3 : 2
52.5 : 3
47.8] : 2
filtered_data : 2
raw_data: : 1
math.isnan(value): : 1
filtered_data.append(value) : 1
"not : 31
in" : 15
in) : 6
"is : 11
not" : 7
priority : 94
c" : 7
moreover : 2
outcome : 15
negated : 5
priorities : 11
operators; : 2
highest : 37
lowest : 33
"A : 11
C" : 6
"(A : 3
B)) : 1
composition : 4
*short-circuit* : 1
stops : 30
short-circuit : 3
string1 : 4
string2 : 2
string3 : 2
'Trondheim' : 2
'Hammer : 1
Dance' : 1
non_null : 2
encountered : 96
programs: : 3
*lexicographical* : 1
ordering: : 5
comparison; : 1
lexicographical : 1
carried : 12
sub-sequence : 1
(lesser) : 1
Lexicographical : 2
'ABC' : 2
'Pascal' : 1
-1) : 6
(1.0 : 5
3.0) : 2
('aa' : 1
'ab')) : 1
('abc' : 3
legal : 45
0.0 : 23
"TypeError" : 310
chaining : 18
"d->insert("a")->remove("b")->sort();" : 1
****************************************************** : 7
Floating-point : 4
**decimal** : 1
"0.125" : 1
1/10 : 11
2/100 : 1
5/1000 : 1
**binary** : 1
"0.001" : 1
0/2 : 2
0/4 : 1
1/8 : 1
fractional : 26
consequence : 19
approximated : 6
1/3 : 5
fraction: : 2
0.33 : 1
0.333 : 1
willing : 7
0.1 : 14
infinitely : 9
repeating : 16
0.0001100110011001100110011001100110011001100110011.. : 1
Stop : 55
today : 16
numerator : 10
denominator : 14
"3602879701896397 : 2
55" : 2
0.1000000000000000055511151231257827021181583404541015625 : 2
manageable : 1
displaying : 34
representable : 37
Interestingly : 2
"0.1" : 5
"0.10000000000000001" : 2
"0.1000000000000000055511151231257827021181583404541015625" : 2
"eval(repr(x)) : 1
17 : 27
systems) : 4
shortest : 16
floating-point: : 1
hardware's : 1
*display* : 4
modes) : 1
format(math.pi : 2
'.12g') : 1
'3.14159265359' : 2
'.2f') : 2
repr(math.pi) : 2
'3.141592653589793' : 3
illusion: : 1
rounding : 93
illusion : 2
beget : 1
summing : 2
either: : 2
.1 : 22
.3 : 1
closer : 15
3/10 : 1
"round()" : 14
help: : 2
round(.1 : 4
round(.3 : 2
post-rounding : 1
inexact : 9
comparable : 16
another: : 5
surprises : 6
precise : 36
"Representation : 1
Error" : 1
Perils : 1
near : 27
"there : 1
answers." : 1
Still : 5
unduly : 1
wary : 3
2**53 : 2
suffer : 2
casual : 1
floating- : 5
round : 24
suffices : 1
"str.format()" : 47
method's : 24
high-precision : 1
rational : 16
(so : 23
exactly) : 1
occasions : 7
"float.as_integer_ratio()" : 1
expresses : 3
3.14159 : 1
x.as_integer_ratio() : 1
(3537115888337719 : 1
1125899906842624) : 1
ratio : 12
losslessly : 6
recreate : 7
3537115888337719 : 1
1125899906842624 : 1
"float.hex()" : 4
(base : 6
computer: : 1
x.hex() : 1
'0x1.921f9f01b866ep+1' : 1
reconstruct : 6
float.fromhex('0x1.921f9f01b866ep+1') : 1
reliably : 15
(platform : 1
independence) : 1
exchanging : 6
C99) : 2
"math.fsum()" : 3
mitigate : 8
loss-of-precision : 1
summation : 2
tracks : 7
"lost : 1
digits" : 1
onto : 43
overall : 24
total: : 1
sum([0.1] : 1
math.fsum([0.1] : 1
familiarity : 2
*Representation : 1
error* : 1
actually) : 1
chief : 2
others) : 12
(November : 1
2000) : 2
IEEE-754 : 5
map : 74
"double : 1
precision" : 2
754 : 46
strives : 2
closest : 11
*J*/2***N* : 1
*J* : 4
Rewriting : 1
~= : 2
J : 35
(2**N) : 1
2**N : 1
recalling : 1
(is : 3
2**52" : 2
"< : 2
2**53") : 1
56: : 1
2**52 : 1
2**56 : 1
56 : 5
quotient : 15
rounded: : 2
r : 61
divmod(2**56 : 1
remainder : 42
half : 13
up: : 3
q+1 : 1
7205759403792794 : 2
Dividing : 2
reduces : 27
3602879701896397 : 2
55 : 22
1/10; : 1
*exactly* : 5
"sees" : 1
1/10: : 1
sees : 10
get: : 5
3602879701896397.0 : 1
multiply : 10
10**55 : 1
1000000000000000055511151231257827021181583404541015625 : 1
format(0.1 : 1
'.17f') : 1
'0.10000000000000001' : 2
easy: : 7
Fraction : 14
Fraction.from_float(0.1) : 1
Fraction(3602879701896397 : 1
36028797018963968) : 2
(0.1).as_integer_ratio() : 1
(3602879701896397 : 1
Decimal.from_float(0.1) : 2
Decimal('0.1000000000000000055511151231257827021181583404541015625') : 2
format(Decimal.from_float(0.1) : 1
'.17') : 1
twists : 1
int(input("Please : 2
integer: : 13
")) : 3
print('Negative : 1
zero') : 2
print('Zero') : 1
print('Single') : 1
print('More') : 1
"elif" : 6
'"elif"' : 1
'else : 2
if' : 1
"switch" : 3
"case" : 21
progression : 1
(like : 86
Pascal) : 1
halting : 2
iterates : 18
string) : 56
pun : 1
intended): : 1
strings: : 19
['cat' : 1
'window' : 2
'defenestrate'] : 1
print(w : 1
len(w)) : 1
defenestrate : 1
modifies : 30
straight-forward : 3
collection: : 2
{'Hans': : 1
'active' : 1
'Éléonore': : 1
'inactive' : 1
'景太郎': : 1
'active'} : 1
Strategy: : 2
users.copy().items(): : 1
'inactive': : 1
users[user] : 1
active_users : 1
users.items(): : 1
'active': : 1
active_users[user] : 1
progressions: : 1
sequence; : 4
"range(10)" : 1
increment : 36
negative; : 4
'step'): : 1
list(range(5 : 1
10)) : 3
list(range(0 : 4
3)) : 10
list(range(-10 : 1
-100 : 1
-30)) : 1
[-10 : 1
-40 : 1
-70] : 1
"len()" : 24
['Mary' : 1
'had' : 1
'little' : 3
'lamb'] : 1
range(len(a)): : 2
a[i]) : 1
Mary : 1
lamb : 1
range: : 3
range(10) : 10
range(0 : 17
supply : 104
"sum()": : 1
sum(range(4)) : 1
Later : 8
"list()" : 14
breaks : 35
clause; : 1
exhaustion : 14
"for") : 2
"while") : 1
terminated : 84
exemplified : 2
prime : 19
numbers: : 10
range(2 : 5
10): : 5
print(n : 3
'equals' : 1
'*' : 37
n//x) : 1
factor : 22
'is : 4
number') : 1
closely: : 1
belongs : 20
statement.) : 2
statements: : 5
statement's : 10
loop's : 4
loop: : 16
print("Found : 2
number" : 8
num) : 4
Found : 19
syntactically : 11
Busy-wait : 1
interrupt : 25
(Ctrl+C) : 1
classes: : 27
MyEmptyClass: : 1
place-holder : 1
ignored: : 3
initlog(*args): : 1
compares : 39
languages) : 4
Rust : 1
Haskell : 6
(sequence : 1
attributes) : 15
literals: : 10
http_error(status): : 3
status: : 7
400: : 4
"Bad : 5
request" : 3
404: : 6
"Not : 7
found" : 5
418: : 3
"I'm : 9
teapot" : 4
_: : 15
"Something's : 3
internet" : 3
block: : 8
"variable : 1
name" : 26
"_" : 37
*wildcard* : 2
none : 70
branches : 9
"|" : 37
("or"): : 2
401 : 6
403 : 3
allowed" : 2
(0 : 39
0): : 8
print("Origin") : 3
y): : 30
print(f"Y={y}") : 3
print(f"X={x}") : 3
print(f"X={x} : 3
Y={y}") : 2
ValueError("Not : 2
point") : 4
*binds* : 2
("point") : 2
fourth : 15
captures : 7
conceptually : 10
point" : 3
resembling : 5
capture : 38
Point: : 14
where_is(point): : 1
Point(x=0 : 4
y=0): : 4
y=y): : 2
Point(x=x : 2
Point(): : 2
print("Somewhere : 1
else") : 2
print("Not : 3
dataclasses) : 2
"__match_args__" : 10
"y") : 2
"var" : 3
variable): : 2
Point(1 : 4
var) : 5
y=var) : 4
Point(x=1 : 2
Point(y=var : 2
x=1) : 2
Dotted : 2
"foo.bar") : 1
"x=" : 1
"y=" : 1
(recognized : 2
"(...)" : 4
"Point" : 4
points: : 6
[]: : 2
points") : 1
[Point(0 : 4
0)]: : 2
print("The : 6
origin") : 1
[Point(x : 2
y)]: : 2
print(f"Single : 1
{x} : 2
{y}") : 1
y1) : 4
Point(0 : 3
y2)]: : 2
print(f"Two : 2
Y : 17
{y1} : 2
{y2}") : 1
print("Something : 2
"guard" : 11
guard : 35
evaluated: : 2
Point(x : 6
print(f"Y=X : 1
{x}") : 1
print(f"Not : 1
diagonal") : 1
unpacking: : 1
"[x : 5
*rest]" : 2
*rest)" : 2
*_)" : 2
patterns: : 9
"{"bandwidth": : 2
"latency": : 2
l}" : 2
""bandwidth"" : 2
""latency"" : 2
"**rest" : 2
(But : 5
"**_" : 2
redundant : 35
allowed.) : 2
Subpatterns : 3
captured : 34
"as" : 34
(Point(x1 : 2
Point(x2 : 2
y2) : 3
p2): : 2
"p2" : 1
points) : 2
Color(Enum): : 14
RED : 33
'red' : 13
GREEN : 34
'green' : 5
BLUE : 31
'blue' : 8
Color(input("Enter : 1
'green': : 4
color: : 6
Color.RED: : 2
print("I : 3
red!") : 2
Color.GREEN: : 2
print("Grass : 2
green") : 2
Color.BLUE: : 2
print("I'm : 2
feeling : 3
blues : 2
:(") : 2
636** : 5
writes : 86
boundary: : 2
fib(n): : 3
"""Print : 3
n.""" : 2
n: : 14
print(a : 8
a+b : 8
print() : 19
fib(2000) : 1
34 : 17
89 : 14
144 : 10
233 : 8
377 : 8
610 : 2
987 : 2
1597 : 1
*definition* : 2
formal : 40
literal; : 1
*docstring* : 6
(More : 2
Strings.) : 1
habit : 3
*execution* : 2
table; : 2
statement) : 16
(arguments) : 1
called; : 17
*call : 2
*value* : 151
*reference* : 3
object) : 43
fib : 8
<function : 12
10042ed0> : 1
f(100) : 1
Coming : 1
"fib" : 2
albeit : 3
boring : 2
(it's : 4
suppressed : 38
"print()": : 2
fib(0) : 1
print(fib(0)) : 1
fib2(n): : 2
"""Return : 12
result.append(a) : 2
f100 : 2
fib2(100) : 1
89] : 2
Falling : 1
"result.append(a)" : 1
'belongs' : 1
"obj.methodname" : 1
"obj" : 49
(this : 68
"methodname" : 1
(It : 9
*classes* : 2
Classes) : 1
[a]" : 1
ask_ok(prompt : 1
retries=4 : 1
reminder='Please : 1
again!'): : 1
ok : 27
input(prompt) : 3
('y' : 2
'ye' : 1
'yes'): : 1
('n' : 1
'no' : 6
'nop' : 1
'nope'): : 1
retries : 20
ValueError('invalid : 1
response') : 2
print(reminder) : 1
ways: : 27
"ask_ok('Do : 1
quit?')" : 1
"ask_ok('OK : 2
file?' : 2
2)" : 10
'Come : 1
no!')" : 1
*defining* : 1
f(arg=i): : 1
print(arg) : 10
**Important : 1
warning:** : 1
accumulates : 5
f(a : 9
L=[]): : 1
L.append(a) : 2
print(f(1)) : 1
print(f(2)) : 1
print(f(3)) : 1
L=None): : 1
"kwarg=value" : 1
parrot(voltage : 2
state='a : 2
stiff' : 2
action='voom' : 1
type='Norwegian : 1
Blue'): : 1
print("-- : 6
parrot : 4
wouldn't" : 2
print("if : 2
put" : 2
voltage : 2
"volts : 2
it.") : 3
Lovely : 4
plumage : 2
the" : 1
It's" : 1
"!") : 3
("voltage") : 1
("state" : 1
"action" : 15
"type") : 1
parrot(1000) : 1
parrot(voltage=1000) : 1
parrot(voltage=1000000 : 1
action='VOOOOOM') : 1
parrot(action='VOOOOOM' : 1
voltage=1000000) : 1
parrot('a : 2
million' : 1
'bereft : 1
life' : 1
'jump') : 1
thousand' : 1
state='pushing : 1
daisies') : 1
invalid: : 4
parrot() : 1
parrot(voltage=5.0 : 1
'dead') : 1
non-keyword : 2
parrot(110 : 1
voltage=220) : 1
parrot(actor='John : 1
Cleese') : 1
unknown : 39
"actor" : 1
"parrot" : 1
non-optional : 2
"parrot(voltage=1000)" : 1
too) : 7
restriction: : 1
function(a): : 1
function(0 : 1
a=0) : 1
function() : 2
"**name" : 1
"*name" : 1
(described : 4
subsection) : 1
("*name" : 1
"**name".) : 1
cheeseshop(kind : 1
*arguments : 1
**keywords): : 2
any" : 1
"?") : 1
I'm : 15
sorry : 2
of" : 1
kind) : 4
print("-" : 1
40) : 2
kw : 5
keywords: : 5
print(kw : 1
":" : 43
keywords[kw]) : 1
cheeseshop("Limburger" : 1
"It's : 2
runny : 4
sir." : 2
VERY : 2
shopkeeper="Michael : 1
Palin" : 1
client="John : 1
Cleese" : 1
sketch="Cheese : 1
Sketch") : 1
print: : 5
Limburger : 2
sir : 2
shopkeeper : 1
: : 104
Michael : 75
Palin : 1
John : 38
Cleese : 4
sketch : 3
Sketch : 1
restrict : 20
f(pos1 : 2
pos2 : 2
pos_or_kwd : 2
kwd1 : 2
kwd2): : 2
----------- : 96
positional-or-keyword : 6
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
Looking : 1
*positional-only* : 2
parameters' : 6
(forward-slash) : 1
logically : 5
*positional-or-keyword* : 1
*keyword-only* : 3
indicating : 138
~~~~~~~~~~~~~~~~~~~~~~~~~~ : 10
paying : 3
attention : 11
"*": : 2
standard_arg(arg): : 1
pos_only_arg(arg : 1
/): : 2
kwd_only_arg(* : 1
combined_example(pos_only : 1
kwd_only): : 1
print(pos_only : 1
kwd_only) : 1
"standard_arg" : 1
standard_arg(2) : 1
standard_arg(arg=2) : 1
"pos_only_arg" : 1
pos_only_arg(1) : 1
pos_only_arg(arg=1) : 1
pos_only_arg() : 1
'arg' : 1
"kwd_only_args" : 1
kwd_only_arg(3) : 1
kwd_only_arg() : 1
kwd_only_arg(arg=3) : 1
combined_example(1 : 3
combined_example() : 2
kwd_only=3) : 3
standard=2 : 2
combined_example(pos_only=1 : 1
'pos_only' : 1
collision : 11
"name" : 122
"**kwds" : 7
key: : 10
foo(name : 2
**kwds): : 9
'name' : 15
kwds : 7
"'name'" : 4
foo(1 : 2
**{'name': : 2
2}) : 9
(positional : 4
~~~~~~~~~~~~~~ : 4
guidance: : 1
understandable : 5
breaking : 28
parameter's : 7
Sequences) : 1
write_multiple_items(file : 1
file.write(separator.join(args)) : 1
*variadic* : 4
scoop : 2
"*args" : 24
'keyword-only' : 1
concat(*args : 1
sep="/"): : 1
sep.join(args) : 1
concat("earth" : 2
"mars" : 2
"venus") : 1
'earth/mars/venus' : 1
"venus" : 1
sep=".") : 1
'earth.mars.venus' : 1
unpacked : 31
expects : 51
*stop* : 23
"*"-operator : 1
unpack : 37
tuple: : 12
list(range(3 : 1
6)) : 3
list(range(*args)) : 1
fashion : 27
deliver : 6
"**"-operator: : 1
action='voom'): : 1
it." : 1
print("E's" : 1
{"voltage": : 1
"four : 1
million" : 1
"state": : 1
"bleedin' : 1
demised" : 1
"action": : 1
"VOOM"} : 1
parrot(**d) : 1
VOOM : 1
million : 3
volts : 1
E's : 1
bleedin' : 1
demised : 1
a+b" : 1
Semantically : 4
make_incrementor(n): : 1
make_incrementor(42) : 1
f(0) : 1
f(1) : 2
43 : 5
'one') : 2
'three') : 4
'four')] : 2
pairs.sort(key=lambda : 1
pair: : 1
pair[1]) : 1
[(4 : 1
'four') : 2
'two')] : 1
brevity : 5
verb : 1
operation) : 5
capital : 5
visually : 5
paragraphs : 7
strip : 25
non-blank : 8
(We : 1
literal.) : 1
"equivalent" : 1
Equivalence : 1
normally) : 1
docstring: : 7
my_function(): : 1
"""Do : 1
print(my_function.__doc__) : 1
3107** : 3
information) : 17
*Annotations* : 1
"->" : 2
denoting : 7
annotated: : 1
f(ham: : 1
eggs: : 1
'eggs') : 6
str: : 9
print("Annotations:" : 1
f.__annotations__) : 1
print("Arguments:" : 1
ham : 4
eggs) : 1
eggs : 10
f('spam') : 2
Annotations: : 1
{'ham': : 1
'str'> : 5
'return': : 1
'eggs': : 3
'str'>} : 1
Arguments: : 6
spam : 33
'spam : 4
eggs' : 3
*coding : 1
style* : 1
*formatted*) : 1
styles; : 1
adopting : 3
nice : 25
tremendously : 1
emerged : 2
adhere : 6
to; : 3
promotes : 1
eye-pleasing : 1
Every : 24
point; : 6
you: : 6
4-space : 1
compromise : 5
(allows : 2
greater : 137
depth) : 1
(easier : 2
read) : 3
Wrap : 11
exceed : 18
79 : 2
bracketing : 1
constructs: : 2
f(1 : 6
g(3 : 1
4)" : 6
consistently; : 2
"UpperCamelCase" : 1
"lowercase_with_underscores" : 1
international : 6
non-ASCII : 108
slightest : 1
chance : 26
(items : 1
********** : 7
*instances* : 2
attached : 57
maintaining : 13
mixture : 7
Oriented : 1
Programming: : 1
amounts : 11
partake : 1
terminology : 14
members) : 4
*public* : 1
Variables) : 1
*virtual* : 1
shorthands : 1
referencing : 11
renaming : 10
(arithmetic : 1
subscripting : 46
redefined : 4
(Lacking : 1
universally : 6
occasional : 4
heard : 1
individuality : 1
scopes) : 3
glance : 2
dealing : 30
(numbers : 2
tuples) : 6
involving : 42
implementation; : 2
neat : 2
programmer : 32
*namespace* : 3
noticeable : 13
performance) : 1
(containing : 4
"abs()" : 9
names); : 2
namespaces; : 1
"maximize" : 1
*attribute* : 11
"z.real" : 4
"real" : 5
"z" : 16
Strictly : 5
references: : 4
"modname.funcname" : 1
"modname" : 2
"funcname" : 2
writable: : 1
"modname.the_answer : 1
Writable : 20
modname.the_answer" : 1
"the_answer" : 1
lifetimes : 2
in; : 5
quits : 3
"builtins".) : 1
(Actually : 5
forgetting : 3
happens.) : 1
*scope* : 3
region : 26
"Directly : 1
accessible" : 1
accessible: : 2
non-local : 2
next-to-last : 2
outermost : 8
(searched : 1
rebind : 3
used; : 16
*new* : 21
unchanged) : 6
(textually) : 1
Outside : 2
textually: : 1
"compile" : 2
(In : 17
statically.) : 1
deletions: : 1
rebound : 5
there; : 2
demonstrating : 8
binding: : 1
scope_test(): : 1
do_local(): : 1
"local : 1
spam" : 6
do_nonlocal(): : 1
"nonlocal : 2
do_global(): : 1
"test : 1
do_local() : 1
print("After : 3
assignment:" : 3
spam) : 5
do_nonlocal() : 1
do_global() : 1
scope_test() : 1
print("In : 1
scope:" : 1
*local* : 3
*scope_test*'s : 2
*spam* : 3
ClassName: : 1
<statement-1> : 3
<statement-N> : 3
("def" : 1
statements) : 9
(You : 5
conceivably : 3
function.) : 5
dictated : 3
(via : 13
end) : 11
*class : 4
basically : 11
definition; : 3
entered) : 3
reinstated : 3
("ClassName" : 1
operations: : 24
instantiation : 42
*Attribute : 1
references* : 6
"obj.name" : 1
Valid : 21
MyClass: : 2
"""A : 5
class""" : 1
f(self): : 4
'hello : 7
"MyClass.i" : 3
"MyClass.f" : 3
belonging : 30
""A : 1
class"" : 1
*instantiation* : 1
pretend : 8
parameterless : 2
class): : 1
MyClass() : 2
*instance* : 11
("calling" : 1
Complex: : 1
realpart : 2
imagpart): : 1
self.r : 1
self.i : 1
imagpart : 1
Complex(3.0 : 1
-4.5) : 2
x.r : 1
x.i : 1
(3.0 : 1
*data : 6
attributes* : 1
correspond : 57
"instance : 1
variables" : 2
"data : 2
members" : 1
declared; : 1
spring : 1
"MyClass" : 5
trace: : 1
x.counter : 5
10: : 4
print(x.counter) : 1
"belongs : 1
to" : 1
instances: : 11
exclusively : 12
stated : 14
otherwise.) : 1
"x.f" : 3
"x.i" : 1
bound: : 2
x.f() : 1
"'hello : 1
world'" : 1
away: : 1
xf : 2
x.f : 1
print(xf()) : 1
"hello : 2
"x.f()" : 2
"f()" : 6
happened : 25
Surely : 1
used.. : 1
answer: : 3
"MyClass.f(x)" : 1
clarify : 17
non-data : 16
(pointers : 1
Dog: : 3
'canine' : 3
self.name : 21
Dog('Fido') : 3
e : 41
Dog('Buddy') : 3
d.kind : 1
dogs : 3
e.kind : 1
d.name : 1
'Fido' : 1
e.name : 1
'Buddy' : 1
*tricks* : 1
*Dog* : 1
mistaken : 3
add_trick(self : 2
trick): : 2
self.tricks.append(trick) : 2
d.add_trick('roll : 2
over') : 2
e.add_trick('play : 2
dead') : 2
d.tricks : 2
['roll : 2
over' : 1
'play : 1
dead'] : 2
Correct : 33
self.tricks : 1
dog : 1
over'] : 1
e.tricks : 1
['play : 1
prioritizes : 1
Warehouse: : 1
'storage' : 1
'west' : 1
w1 : 1
Warehouse() : 2
print(w1.purpose : 1
w1.region) : 1
west : 8
w2 : 1
w2.region : 1
'east' : 1
print(w2.purpose : 1
w2.region) : 1
east : 9
ordinary : 37
("clients") : 1
hiding : 7
(On : 8
necessary; : 2
C.) : 1
mess : 6
invariants : 13
stamping : 1
affecting : 17
avoided : 23
headaches : 1
methods!) : 1
confusing : 39
glancing : 1
convention: : 7
conceivable : 2
browser* : 1
f1(self : 1
min(x : 2
x+y) : 1
f1 : 2
g(self): : 2
g : 32
"g" : 6
"h" : 7
consequently : 2
Bag: : 1
add(self : 5
self.data.append(x) : 1
addtwice(self : 1
self.add(x) : 2
(A : 10
scope.) : 2
encounters : 37
legitimate : 1
*class* : 13
*type*) : 1
"object.__class__" : 2
worthy : 1
DerivedClassName(BaseClassName): : 1
"BaseClassName" : 2
DerivedClassName(modname.BaseClassName): : 1
proceeds : 16
remembered : 4
resolving : 20
"DerivedClassName()" : 1
descending : 6
privileges : 14
(For : 24
programmers: : 1
"virtual".) : 1
overriding : 46
directly: : 14
"BaseClassName.methodname(self : 1
arguments)" : 1
int)" : 7
"obj.__class__" : 1
"issubclass(bool : 1
"bool" : 27
"issubclass(float : 1
DerivedClassName(Base1 : 1
Base2 : 1
Base3): : 1
depth-first : 4
left-to- : 1
overlap : 9
"DerivedClassName" : 1
"Base1" : 2
(recursively) : 3
"Base2" : 1
that; : 2
cooperative : 8
multiple-inheritance : 2
call-next-method : 1
single-inheritance : 1
exhibit : 6
diamond : 2
relationships : 9
bottommost : 1
linearizes : 1
preserves : 47
left-to-right : 8
monotonic : 21
subclassed : 33
parents) : 3
Taken : 3
https://www.python.org/download/releases/2.3/mro/ : 2
"Private" : 1
underscore : 42
"_spam") : 1
non-public : 3
(whether : 11
member) : 5
use-case : 5
class-private : 1
(namely : 2
clashes : 8
subclasses) : 14
*name : 35
mangling* : 1
underscore(s) : 1
mangling : 7
letting : 17
intraclass : 1
Mapping: : 1
iterable): : 13
self.items_list : 1
self.__update(iterable) : 1
update(self : 2
iterable: : 19
self.items_list.append(item) : 2
__update : 1
update() : 3
MappingSubclass(Mapping): : 1
values): : 3
__init__() : 2
zip(keys : 1
"MappingSubclass" : 2
"__update" : 1
"_Mapping__update" : 1
"Mapping" : 10
"_MappingSubclass__update" : 1
accidents; : 1
"exec()" : 37
classname : 3
class; : 15
likewise : 11
byte-compiled : 10
"delattr()" : 2
"record" : 2
purpose: : 2
dataclass : 48
@dataclass : 26
Employee: : 1
dept: : 1
salary: : 1
john : 1
Employee('john' : 1
'computer : 2
lab' : 2
1000) : 1
john.dept : 1
john.salary : 1
emulates : 9
"readline()" : 39
"m.__self__" : 2
"m()" : 1
"m.__func__" : 2
looped : 7
3]: : 3
print(element) : 2
3): : 4
{'one':1 : 1
'two':2}: : 1
print(key) : 2
"123": : 1
print(char) : 3
open("myfile.txt"): : 2
print(line : 5
end='') : 4
pervades : 1
unifies : 3
Behind : 2
scenes : 2
works: : 9
'abc' : 12
iter(s) : 1
<str_iterator : 1
0x10c90e650> : 1
next(it) : 20
Having : 8
mechanics : 9
behind : 18
"self": : 2
Reverse: : 1
"""Iterator : 1
backwards.""" : 1
data): : 15
self.index : 4
len(data) : 3
__iter__(self): : 8
__next__(self): : 3
self.data[self.index] : 1
rev : 1
Reverse('spam') : 1
iter(rev) : 1
<__main__.Reverse : 1
0x00A1DB50> : 1
rev: : 1
m : 100
*Generators* : 1
remembers : 3
executed) : 5
trivially : 3
create: : 2
reverse(data): : 1
range(len(data)-1 : 2
data[index] : 1
reverse('golf'): : 1
o : 17
Anything : 6
class- : 1
saved : 66
"self.index" : 1
"self.data" : 1
succinctly : 2
xvec : 1
[10 : 3
30] : 2
yvec : 1
[7 : 2
sum(x*y : 2
x,y : 4
zip(xvec : 1
yvec)) : 1
unique_words : 1
set(word : 1
line.split()) : 1
valedictorian : 1
max((student.gpa : 1
student.name) : 1
graduates) : 1
'golf' : 1
list(data[i] : 1
-1)) : 4
['f' : 1
'o' : 13
'g'] : 8
Except : 23
namespace; : 5
Obviously : 11
violates : 4
post-mortem : 9
************************************* : 16
absence : 18
(*>>>* : 1
*...*): : 1
appears; : 1
secondary : 18
line; : 10
multi- : 14
"#" : 19
examples: : 28
quotes." : 1
long.) : 1
calculator: : 1
straightforward: : 2
C); : 1
("()") : 2
5*6 : 1
(50 : 5
5*6) : 1
5.0 : 6
"20") : 1
"5.0" : 1
"1.6") : 1
("/") : 3
*floor : 3
division* : 3
operator; : 3
"%": : 1
classic : 25
5.666666666666667 : 1
discards : 10
floored : 2
divisor : 3
powers : 9
[1]: : 1
squared : 1
("=") : 1
Afterwards : 7
width : 136
height : 35
900 : 1
"defined" : 1
(assigned : 1
NameError: : 11
'n' : 7
operand : 101
3.75 : 3
14.0 : 4
desk : 3
tax : 4
12.5 : 1
100 : 55
price : 7
100.50 : 1
12.5625 : 1
_ : 36
113.0625 : 1
round(_ : 1
113.06 : 1
masking : 7
"Fraction" : 23
"J" : 1
"3+5j") : 1
manipulate : 33
("'...'") : 2
(""..."") : 2
[2] : 46
"\" : 13
'doesn\'t' : 1
\' : 1
quote.. : 1
"doesn't" : 3
...or : 1
'"Yes," : 3
said.' : 7
"\"Yes,\" : 1
said." : 1
'"Isn\'t," : 4
change) : 3
"print()" : 34
characters: : 13
print('"Isn\'t," : 1
said.') : 1
"Isn't," : 1
'First : 3
line.\nSecond : 3
line.' : 3
\n : 6
print(s) : 3
prefaced : 1
*raw : 3
strings* : 7
"r" : 16
print('C:\some\name') : 1
C:\some : 1
ame : 1
print(r'C:\some\name') : 1
C:\some\name : 1
aspect : 4
characters; : 11
triple- : 1
""""..."""" : 1
"'''...'''" : 1
End : 23
print("""\ : 1
thingy : 2
[OPTIONS] : 2
-H : 2
hostname : 80
Hostname : 6
(note : 23
included): : 1
concatenated : 27
(glued : 1
together) : 2
'un' : 2
'ium' : 4
'unununium' : 1
*string : 2
literals* : 1
('Put : 1
'to : 1
joined : 30
together.') : 2
'Put : 1
together.' : 1
^^^^^^ : 2
('un' : 2
^^^^^ : 1
"+": : 1
*indexed* : 1
(subscripted) : 1
one: : 8
word[0] : 2
'P' : 3
word[5] : 1
Indices : 1
right: : 4
word[-1] : 1
word[-2] : 1
second-last : 2
word[-6] : 1
-0 : 3
*slicing* : 2
substring: : 1
word[0:2] : 1
(included) : 5
(excluded) : 4
word[2:5] : 1
'tho' : 1
defaults; : 3
sliced : 4
word[:2] : 3
word[4:] : 2
'on' : 3
word[-2:] : 1
"s[:i] : 1
s[i:]" : 1
"s": : 1
word[2:] : 2
word[:4] : 1
*between* : 2
edge : 27
+---+---+---+---+---+---+ : 2
P : 46
-6 : 4
-5 : 7
0...6 : 1
string; : 27
*j* : 20
edges : 7
non-negative : 32
bounds : 25
"word[1:3]" : 1
word[42] : 1
IndexError: : 8
gracefully : 13
word[4:42] : 1
word[42:] : 1
'J' : 2
'str' : 11
word[1:] : 1
'Jython' : 2
'Pypy' : 1
'supercalifragilisticexpialidocious' : 1
types* : 4
transformations : 4
printf-style : 7
"%" : 36
------------ : 66
*compound* : 1
*list* : 25
comma-separated : 17
(items) : 1
25] : 5
types) : 7
sliced: : 1
squares[0] : 1
squares[-1] : 1
squares[-3:] : 1
squares[:] : 1
concatenation: : 1
[36 : 1
content: : 3
cubes : 4
27 : 13
65 : 6
125] : 2
something's : 2
cube : 6
cubes[3] : 1
(we : 3
later): : 1
cubes.append(216) : 1
cubes.append(7 : 1
125 : 3
216 : 3
343] : 1
entirely: : 2
['a' : 25
'e' : 20
'f' : 20
letters[2:5] : 2
['C' : 1
'D' : 8
'E'] : 1
'E' : 4
replacing : 48
letters[:] : 1
lists: : 11
'd'] : 3
len(letters) : 1
nest : 5
(create : 1
lists) : 3
'c'] : 11
n] : 1
[['a' : 1
3]] : 2
x[0] : 2
x[0][1] : 1
sub- : 7
series: : 1
*multiple : 2
assignment*: : 1
right- : 3
(here: : 1
10") : 1
non-zero : 126
true; : 3
(less : 7
than) : 6
(greater : 3
(equal : 2
"<=" : 21
">=" : 19
"!=" : 23
*body* : 11
*indented*: : 1
tab : 138
space(s) : 1
editor; : 1
decent : 2
auto-indent : 1
argument(s) : 6
quantities : 6
256*256 : 1
print('The : 12
is' : 4
65536 : 2
1000: : 1
end=',') : 1
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987 : 1
"-3**2" : 1
"-(3**2)" : 1
"-9" : 1
"(-3)**2" : 1
"\n" : 30
"\'") : 1
Until : 10
haven't : 19
mentioned : 54
distinguishable : 2
errors: : 7
*syntax : 1
errors* : 1
*exceptions* : 2
print('Hello : 4
repeats : 12
offending : 3
'arrow' : 1
earliest : 10
at) : 1
*preceding* : 1
arrow: : 1
("':'") : 3
fatal: : 1
(1/0) : 1
ZeroDivisionError: : 11
spam*3 : 1
'spam' : 19
"int") : 4
message: : 16
"ZeroDivisionError" : 11
"NameError" : 23
convention) : 4
keywords) : 4
preceding : 47
lines; : 2
meanings : 25
(using : 50
"Control-C" : 8
supports); : 1
user-generated : 2
interruption : 8
signalled : 7
raising : 160
"KeyboardInterrupt" : 39
number: : 16
ValueError: : 56
print("Oops : 1
again...") : 1
*try : 5
clause* : 14
*except : 10
skipped : 62
statements; : 5
*unhandled : 1
exception* : 2
(RuntimeError : 1
TypeError : 68
NameError): : 1
B(Exception): : 1
C(B): : 2
D(C): : 3
[B : 1
D]: : 1
cls() : 2
print("D") : 1
print("C") : 1
B: : 5
print("B") : 1
clauses* : 2
"except : 14
B" : 2
first) : 15
exception's : 19
"args" : 42
"__str__()" : 26
".args" : 1
Exception('spam' : 1
inst: : 1
print(type(inst)) : 1
print(inst.args) : 1
.args : 1
print(inst) : 1
__str__ : 4
inst.args : 1
print('x : 1
=' : 8
print('y : 1
'Exception'> : 1
('spam' : 8
('detail') : 1
unhandled : 34
"BaseException" : 30
"Exception" : 47
non-fatal : 3
"SystemExit" : 29
wishes : 12
intend : 11
propagate : 33
re-raise : 7
well): : 1
open('myfile.txt') : 1
f.readline() : 6
int(s.strip()) : 1
OSError : 26
err: : 8
print("OS : 1
error:" : 1
err) : 5
print("Could : 1
integer.") : 1
print(f"Unexpected : 1
{err=} : 1
{type(err)=}") : 1
*else : 1
sys.argv[1:]: : 1
open(arg : 2
'r') : 10
OSError: : 15
print('cannot : 1
open' : 1
print(arg : 2
'has' : 2
len(f.readlines()) : 1
'lines') : 1
f.close() : 6
protected : 13
indirectly) : 7
this_fails(): : 1
1/0 : 6
this_fails() : 1
ZeroDivisionError : 11
print('Handling : 1
error:' : 1
NameError('HiThere') : 2
HiThere : 2
sole : 17
derives : 16
instantiated : 72
ValueError : 71
'raise : 1
ValueError()' : 1
exception: : 34
print('An : 2
flew : 2
by!') : 1
open("database.sqlite") : 1
RuntimeError("unable : 1
error") : 2
FileNotFoundError: : 8
[Errno : 5
directory: : 16
'database.sqlite' : 1
occurred: : 3
RuntimeError: : 9
unable : 17
"from" : 28
clause: : 2
exc : 11
RuntimeError : 28
transforming : 6
func(): : 4
ConnectionError : 5
exc: : 6
RuntimeError('Failed : 1
database') : 1
disabling : 14
open('database.sqlite') : 1
offering : 19
"Error" : 21
clean-up : 14
KeyboardInterrupt : 22
finally: : 43
print('Goodbye : 2
Goodbye : 1
occurs: : 8
re-raised : 19
clause's : 6
bool_return(): : 1
bool_return() : 1
divide(x : 3
print("division : 1
zero!") : 1
print("result : 1
result) : 7
print("executing : 1
clause") : 1
divide(2 : 2
divide("2" : 1
"1") : 1
divide : 4
type(s) : 7
/: : 1
connections) : 2
undertaken : 1
succeeded : 16
failed : 123
end="") : 9
indeterminate : 6
cleaned : 19
promptly : 4
open("myfile.txt") : 1
concurrency : 11
desirable : 24
"ExceptionGroup" : 16
caught : 54
f(): : 27
excs : 3
[OSError('error : 1
1') : 5
SystemError('error : 1
2')] : 1
ExceptionGroup('there : 1
problems' : 2
excs) : 6
ExceptionGroup: : 5
+-+---------------- : 5
+---------------- : 3
SystemError: : 1
+------------------------------------ : 4
e: : 24
print(f'caught : 3
{type(e)}: : 1
e') : 2
'ExceptionGroup'>: : 1
selectively : 6
reraised : 7
ExceptionGroup("group1" : 1
[OSError(1) : 1
SystemError(2) : 1
ExceptionGroup("group2" : 1
[OSError(3) : 1
RecursionError(4)])]) : 1
except* : 8
print("There : 5
OSErrors") : 1
SystemError : 36
SystemErrors") : 1
OSErrors : 1
SystemErrors : 1
group1 : 3
group2 : 3
RecursionError: : 2
test.run() : 1
excs.append(e) : 2
excs: : 1
ExceptionGroup("Test : 1
Failures" : 1
"add_note(note)" : 1
rendering : 12
TypeError('bad : 1
type') : 1
e.add_note('Add : 2
information') : 4
OSError('operation : 1
failed') : 4
e.add_note(f'Happened : 1
{i+1}') : 1
ExceptionGroup('We : 1
sub-exceptions) : 1
Happened : 3
************ : 11
prompt; : 2
nonzero : 44
(Exceptions : 1
context.) : 1
fatal : 37
exit; : 3
inconsistencies : 7
stream; : 5
"Delete") : 2
cancels : 10
BSD'ish : 1
python3.5 : 1
"PATH") : 4
("'\n'") : 1
("'\r\n'") : 1
pound : 3
"'#'" : 15
**chmod** : 1
"executable : 2
start-up : 10
sessions : 18
"/dev/tty" : 2
session) : 2
os.path.isfile('.pythonrc.py'): : 1
exec(open('.pythonrc.py').read())" : 1
os.environ.get('PYTHONSTARTUP') : 1
os.path.isfile(filename): : 1
open(filename) : 4
fobj: : 1
startup_file : 1
fobj.read() : 1
exec(startup_file) : 1
"sitecustomize" : 11
"usercustomize" : 8
site.getusersitepackages() : 3
'/home/user/.local/lib/python3.5/site-packages' : 1
"usercustomize.py" : 1
ideal : 7
rapid : 3
https://www.python.org/ : 1
customizable : 7
informally : 2
hands-on : 1
off-line : 2
covering : 4
depth : 47
noteworthy : 4
language's : 5
ready : 74
automate : 7
search-and-replace : 2
rearrange : 4
photo : 2
game : 4
C/C++/Java : 2
write/compile/test/re- : 1
tedious : 14
maybe : 13
moving : 30
well-suited : 2
games : 3
first-draft : 1
*very-high-level : 1
language* : 1
Awk : 1
reused : 17
considerable : 6
throw-away : 1
bottom-up : 5
compactly : 3
readably : 1
reasons: : 2
brackets; : 1
*extensible*: : 1
vendor-specific : 2
hooked : 2
reptiles : 1
skits : 1
encouraged : 19
excited : 1
invites : 1
mundane : 1
essential : 11
touching : 2
quit : 14
(functions : 6
lost : 43
*module*; : 1
*imported* : 1
*main* : 4
mode) : 59
"fibo.py" : 1
contents: : 3
fibo : 8
"fibo" : 3
details); : 1
fibo.fib(1000) : 1
fibo.fib2(100) : 1
fibo.__name__ : 1
'fibo' : 2
fibo.fib : 2
fib(500) : 3
(They : 4
script.) : 1
worrying : 1
accidental : 7
"modname.itemname" : 1
matter) : 2
(outside : 1
variant : 81
fib2 : 1
defined) : 12
defines: : 1
("_") : 3
poorly : 5
okay : 7
fib.fib(500) : 1
fibo" : 1
utilising : 1
effects: : 3
fibonacci : 2
fibonacci(500) : 1
restart : 39
"importlib.reload()" : 7
importlib; : 1
importlib.reload(modulename)" : 1
fibo.py : 2
<arguments> : 1
""__main__"" : 2
fib(int(sys.argv[1])) : 1
importable : 21
"main" : 25
suite) : 2
"spam" : 25
"sys.builtin_module_names" : 3
"spam.py" : 2
locations: : 1
specified) : 11
"site- : 1
packages" : 4
symlinks : 62
ahead : 12
"module.*version*.pyc" : 1
encodes : 15
file; : 26
spam.py : 1
"__pycache__/spam.cpython-33.pyc" : 1
coexist : 4
recompiled : 8
platform-independent : 7
architectures : 10
recompiles : 1
non-source : 2
(compiled : 1
experts: : 1
"-OO" : 7
"Optimized" : 1
"opt-" : 4
optimization : 81
chart : 2
("Library : 1
Reference" : 2
hereafter) : 2
nevertheless : 3
deserves : 2
attention: : 1
prompts: : 1
sys.ps1 : 5
'>>> : 3
sys.ps2 : 2
'.. : 3
'C> : 1
C> : 2
print('Yuck!') : 1
Yuck : 1
sys.path.append('/ufs/guido/lib/python') : 1
dir(fibo) : 1
['__name__' : 1
'fib' : 2
'fib2'] : 1
dir(sys) : 1
['__breakpointhook__' : 1
'__displayhook__' : 1
'__excepthook__' : 1
'__interactivehook__' : 1
'__loader__' : 3
'__name__' : 6
'__package__' : 3
'__spec__' : 1
'__stderr__' : 1
'__stdin__' : 1
'__stdout__' : 1
'__unraisablehook__' : 1
'_clear_type_cache' : 1
'_current_frames' : 1
'_debugmallocstats' : 1
'_framework' : 1
'_getframe' : 1
'_git' : 1
'_home' : 1
'_xoptions' : 1
'abiflags' : 1
'addaudithook' : 1
'api_version' : 1
'argv' : 2
'audit' : 1
'base_exec_prefix' : 1
'base_prefix' : 1
'breakpointhook' : 1
'builtin_module_names' : 1
'byteorder' : 1
'call_tracing' : 1
'callstats' : 1
'copyright' : 2
'displayhook' : 1
'dont_write_bytecode' : 1
'exc_info' : 1
'excepthook' : 1
'exec_prefix' : 1
'executable' : 1
'exit' : 3
'flags' : 1
'float_info' : 1
'float_repr_style' : 1
'get_asyncgen_hooks' : 1
'get_coroutine_origin_tracking_depth' : 1
'getallocatedblocks' : 1
'getdefaultencoding' : 1
'getdlopenflags' : 1
'getfilesystemencodeerrors' : 1
'getfilesystemencoding' : 1
'getprofile' : 1
'getrecursionlimit' : 1
'getrefcount' : 1
'getsizeof' : 1
'getswitchinterval' : 1
'gettrace' : 1
'hash_info' : 1
'hexversion' : 1
'implementation' : 1
'int_info' : 1
'intern' : 1
'is_finalizing' : 1
'last_traceback' : 1
'last_type' : 1
'last_value' : 1
'maxsize' : 1
'maxunicode' : 1
'meta_path' : 1
'modules' : 1
'path' : 4
'path_hooks' : 1
'path_importer_cache' : 1
'platform' : 1
'prefix' : 1
'ps1' : 1
'ps2' : 1
'pycache_prefix' : 1
'set_asyncgen_hooks' : 1
'set_coroutine_origin_tracking_depth' : 1
'setdlopenflags' : 1
'setprofile' : 1
'setrecursionlimit' : 1
'setswitchinterval' : 1
'settrace' : 1
'stderr' : 2
'stdin' : 1
'stdout' : 2
'thread_info' : 1
'unraisablehook' : 1
'version' : 1
'version_info' : 1
'warnoptions'] : 1
currently: : 1
dir() : 5
['__builtins__' : 2
'sys'] : 1
"builtins": : 1
dir(builtins) : 1
['ArithmeticError' : 1
'AssertionError' : 1
'AttributeError' : 1
'BaseException' : 1
'BlockingIOError' : 1
'BrokenPipeError' : 1
'BufferError' : 1
'BytesWarning' : 1
'ChildProcessError' : 1
'ConnectionAbortedError' : 1
'ConnectionError' : 1
'ConnectionRefusedError' : 1
'ConnectionResetError' : 1
'DeprecationWarning' : 1
'EOFError' : 1
'Ellipsis' : 1
'EnvironmentError' : 1
'Exception' : 1
'False' : 4
'FileExistsError' : 1
'FileNotFoundError' : 1
'FloatingPointError' : 1
'FutureWarning' : 1
'GeneratorExit' : 1
'IOError' : 1
'ImportError' : 1
'ImportWarning' : 1
'IndentationError' : 1
'IndexError' : 1
'InterruptedError' : 1
'IsADirectoryError' : 1
'KeyError' : 1
'KeyboardInterrupt' : 1
'LookupError' : 1
'MemoryError' : 1
'NameError' : 1
'None' : 4
'NotADirectoryError' : 1
'NotImplemented' : 1
'NotImplementedError' : 1
'OSError' : 1
'OverflowError' : 1
'PendingDeprecationWarning' : 1
'PermissionError' : 1
'ProcessLookupError' : 1
'ReferenceError' : 1
'ResourceWarning' : 1
'RuntimeError' : 1
'RuntimeWarning' : 1
'StopIteration' : 1
'SyntaxError' : 1
'SyntaxWarning' : 1
'SystemError' : 1
'SystemExit' : 1
'TabError' : 1
'TimeoutError' : 1
'True' : 4
'TypeError' : 1
'UnboundLocalError' : 1
'UnicodeError' : 1
'UnicodeTranslateError' : 1
'UnicodeWarning' : 1
'UserWarning' : 1
'ValueError' : 1
'Warning' : 1
'ZeroDivisionError' : 1
'_' : 11
'__build_class__' : 1
'__debug__' : 1
'__import__' : 1
'abs' : 1
'all' : 1
'any' : 1
'ascii' : 7
'bin' : 5
'bool' : 1
'bytearray' : 1
'bytes' : 3
'callable' : 1
'chr' : 1
'classmethod' : 1
'compile' : 1
'complex' : 2
'credits' : 1
'delattr' : 1
'dict' : 1
'dir' : 1
'divmod' : 2
'enumerate' : 1
'eval' : 1
'exec' : 3
'filter' : 3
'float' : 1
'format' : 3
'frozenset' : 2
'getattr' : 1
'globals' : 1
'hasattr' : 1
'hash' : 1
'help' : 1
'hex' : 4
'id' : 1
'input' : 1
'int' : 11
'isinstance' : 1
'issubclass' : 1
'iter' : 1
'len' : 1
'license' : 1
'list' : 3
'locals' : 1
'map' : 2
'max' : 1
'memoryview' : 1
'min' : 1
'next' : 1
'object' : 1
'oct' : 1
'open' : 2
'ord' : 1
'pow' : 4
'print' : 3
'property' : 1
'quit' : 1
'range' : 2
'repr' : 1
'reversed' : 1
'round' : 1
'set' : 4
'setattr' : 1
'slice' : 2
'sorted' : 1
'staticmethod' : 1
'sum' : 1
'super' : 2
'type' : 4
'vars' : 1
'zip'] : 1
structuring : 1
"dotted : 2
"A.B" : 3
designates : 1
worry : 28
other's : 8
multi-module : 1
Pillow : 3
"package") : 1
uniform : 13
".wav" : 1
".aiff" : 1
".au") : 1
applying : 16
equalizer : 2
artificial : 3
stereo : 8
effect) : 7
never-ending : 1
(expressed : 1
hierarchical : 16
filesystem): : 1
sound/ : 1
__init__.py : 21
formats/ : 1
Subpackage : 5
wavread.py : 1
wavwrite.py : 1
aiffread.py : 1
aiffwrite.py : 1
auread.py : 1
auwrite.py : 1
effects/ : 1
echo.py : 2
surround.py : 1
reverse.py : 1
filters/ : 1
equalizer.py : 1
vocoder.py : 1
karaoke.py : 1
unintentionally : 13
"__all__" : 24
sound.effects.echo : 3
"sound.effects.echo" : 1
sound.effects.echo.echofilter(input : 1
delay=0.7 : 3
atten=4) : 3
sound.effects : 6
"echo" : 10
echo.echofilter(input : 1
Yet : 3
variation : 8
echofilter : 1
"echofilter()" : 1
available: : 31
echofilter(input : 1
item" : 3
subpackage) : 1
package; : 6
Contrarily : 1
item.subitem.subsubitem" : 1
sub-modules : 3
sub-module : 6
"sound/effects/__init__.py" : 1
__all__ : 10
["echo" : 1
"surround" : 3
"reverse"] : 1
"sound.effects" : 5
"__init__.py") : 2
loaded) : 4
sound.effects.surround : 1
"from...import" : 2
defined.) : 1
specific_submodule" : 1
"sound" : 1
siblings : 1
"sound.filters.vocoder" : 1
echo" : 1
. : 14
..filters : 1
holding : 56
modified; : 4
affects : 89
'statements' : 1
'executed'; : 1
obsolete : 45
conflicting : 15
A's : 2
tutorial-env : 1
"tutorial-env" : 1
".venv" : 1
clashing : 2
".env" : 1
tooling : 1
tutorial-env\Scripts\activate.bat : 1
MacOS : 25
tutorial-env/bin/activate : 1
bash : 1
**csh** : 2
**fish** : 2
"activate.csh" : 1
"activate.fish" : 1
Activating : 1
~/envs/tutorial-env/bin/activate : 1
(tutorial-env) : 9
10:59:36) : 1
['' : 6
'/usr/local/lib/python35.zip' : 1
'~/envs/tutorial-env/lib/python3.5/site-packages'] : 1
subcommands: : 3
"uninstall" : 1
"freeze" : 2
(Consult : 1
"pip".) : 1
novas : 7
Collecting : 7
novas-3.1.1.3.tar.gz : 1
(136kB) : 1
Successfully : 5
novas-3.1.1.3 : 2
requests==2.6.0 : 2
requests-2.6.0-py2.py3-none-any.whl : 1
requests-2.6.0 : 2
version: : 9
2.6.0 : 4
requests-2.6.0: : 1
uninstalled : 2
requests-2.7.0 : 2
uninstall" : 1
show" : 1
package: : 7
Metadata-Version: : 1
Name: : 7
Version: : 1
2.7.0 : 1
Summary: : 1
Humans : 1
Home-page: : 1
http://python-requests.org : 1
Kenneth : 1
Reitz : 1
Author-email: : 1
me@kennethreitz.com : 1
License: : 1
Apache : 8
Location: : 5
/Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages : 1
Requires: : 1
list" : 8
environment: : 6
(3.1.1.3) : 1
(1.9.2) : 1
(7.0.3) : 1
(2.7.0) : 1
(16.0) : 1
freeze" : 1
"requirements.txt" : 4
requirements.txt : 7
novas==3.1.1.3 : 2
numpy==1.9.2 : 2
requests==2.7.0 : 2
committed : 14
"install : 1
-r": : 1
(line : 5
1)) : 6
2)) : 12
numpy-1.9.2 : 1
************************************************** : 12
tour : 2
deeply : 13
containers: : 1
reprlib.repr(set('supercalifragilisticexpialidocious')) : 1
"{'a' : 1
'g' : 7
...}" : 2
"pretty : 1
printer" : 1
clearly : 18
structure: : 15
[[[['black' : 2
'cyan'] : 2
'white' : 2
['green' : 2
'red']] : 2
[['magenta' : 2
'yellow'] : 2
'blue']]] : 2
pprint.pprint(t : 1
width=30) : 1
width: : 5
"""The : 1
wrap() : 2
fill() : 2
big : 52
lines.""" : 1
print(textwrap.fill(doc : 1
width=40)) : 1
culture : 1
locale's : 14
separators: : 2
locale.setlocale(locale.LC_ALL : 6
'English_United : 2
States.1252') : 1
States.1252' : 1
conv : 2
locale.localeconv() : 2
1234567.8 : 1
locale.format("%d" : 1
grouping=True) : 2
'1,234,567' : 2
locale.format_string("%s%.*f" : 1
(conv['currency_symbol'] : 1
conv['frac_digits'] : 1
'$1,234,567.80' : 1
"Template" : 7
placeholder : 33
"$" : 25
(alphanumeric : 1
underscores) : 5
Surrounding : 2
alphanumeric : 22
intervening : 9
"$$" : 3
"$": : 1
Template('${village}folk : 1
$$10 : 1
$cause.') : 1
t.substitute(village='Nottingham' : 1
cause='the : 1
ditch : 2
fund') : 1
'Nottinghamfolk : 1
$10 : 1
fund.' : 1
"substitute()" : 5
mail-merge : 1
"safe_substitute()" : 3
missing: : 2
Template('Return : 1
$item : 1
$owner.') : 1
dict(item='unladen : 1
swallow') : 1
t.substitute(d) : 1
'owner' : 1
t.safe_substitute(d) : 1
'Return : 4
unladen : 1
swallow : 8
$owner.' : 1
delimiter : 36
elect : 1
format: : 15
photofiles : 1
['img_1074.jpg' : 1
'img_1076.jpg' : 1
'img_1077.jpg'] : 1
BatchRename(Template): : 1
'%' : 7
fmt : 17
input('Enter : 1
(%d-date : 2
%n-seqnum : 2
%f-format): : 2
Ashley_%n%f : 1
BatchRename(fmt) : 1
time.strftime('%d%b%y') : 1
enumerate(photofiles): : 1
ext : 8
os.path.splitext(filename) : 1
newname : 1
t.substitute(d=date : 1
n=i : 1
f=ext) : 1
print('{0} : 2
--> : 103
{1}'.format(filename : 1
newname)) : 1
img_1074.jpg : 1
Ashley_0.jpg : 1
img_1076.jpg : 1
Ashley_1.jpg : 1
img_1077.jpg : 1
Ashley_2.jpg : 1
templating : 5
============================================= : 10
"pack()" : 8
"unpack()" : 5
record : 145
""H"" : 1
""I"" : 1
unsigned : 131
""<"" : 3
little-endian : 21
open('myfile.zip' : 1
'rb') : 19
f.read() : 15
struct.unpack('<IIIHH' : 1
data[start:start+16]) : 1
crc32 : 5
comp_size : 3
uncomp_size : 1
filenamesize : 2
extra_size : 2
data[start:start+filenamesize] : 1
data[start:start+extra_size] : 1
print(filename : 1
hex(crc32) : 1
uncomp_size) : 1
decoupling : 1
responsiveness : 2
background : 86
AsyncZip(threading.Thread): : 1
infile : 7
threading.Thread.__init__(self) : 1
self.infile : 1
self.outfile : 1
run(self): : 2
zipfile.ZipFile(self.outfile : 1
'w' : 30
zipfile.ZIP_DEFLATED) : 1
f.write(self.infile) : 1
print('Finished : 1
of:' : 1
self.infile) : 1
AsyncZip('mydata.txt' : 1
'myarchive.zip') : 1
background.start() : 1
foreground.') : 1
background.join() : 1
Wait : 52
waited : 10
done.') : 2
challenge : 12
coordinating : 2
synchronization : 38
coordination : 2
inter-thread : 1
featured : 4
"sys.stderr": : 1
logging.debug('Debugging : 2
logging.info('Informational : 2
message') : 38
logging.warning('Warning:config : 2
%s : 27
found' : 4
'server.conf') : 2
logging.error('Error : 2
occurred') : 2
logging.critical('Critical : 2
down') : 2
WARNING:root:Warning:config : 2
server.conf : 2
ERROR:root:Error : 2
CRITICAL:root:Critical : 2
informational : 10
routing : 4
datagrams : 3
priority: : 9
"DEBUG" : 18
"INFO" : 23
"WARNING" : 23
"ERROR" : 18
"CRITICAL" : 13
editable : 6
altering : 3
(reference : 1
collection* : 4
eliminate : 11
cycles) : 3
shortly : 6
eliminated : 6
permanent : 10
__repr__(self): : 12
str(self.value) : 1
A(10) : 1
weakref.WeakValueDictionary() : 2
d['primary'] : 4
fetch : 46
gc.collect() : 5
"C:/python311/lib/weakref.py" : 1
46 : 4
__getitem__ : 12
self.data[key]() : 1
'primary' : 1
================================== : 22
met : 12
trade-offs : 4
"array()" : 1
(typecode : 1
""H"") : 1
array('H' : 2
[4000 : 1
700 : 1
22222]) : 1
sum(a) : 1
26932 : 1
a[1:3] : 3
700]) : 1
"deque()" : 1
queues : 31
breadth : 2
deque(["task1" : 1
"task2" : 1
"task3"]) : 1
d.append("task4") : 1
print("Handling" : 1
d.popleft()) : 1
task1 : 5
unsearched : 1
deque([starting_node]) : 1
breadth_first_search(unsearched): : 1
unsearched.popleft() : 1
gen_moves(node): : 1
is_goal(m): : 1
unsearched.append(m) : 1
scores : 4
[(100 : 2
'perl') : 3
(200 : 2
'tcl') : 2
(400 : 4
'lua') : 2
(500 : 2
'python')] : 2
bisect.insort(scores : 1
(300 : 2
'ruby')) : 1
'ruby') : 1
heaps : 9
valued : 11
repeatedly : 26
smallest : 43
heapify : 2
heappop : 1
heappush : 1
heapify(data) : 1
heap : 113
heappush(data : 1
-5) : 2
[heappop(data) : 1
range(3)] : 2
[-5 : 1
1] : 16
======================================= : 10
financial : 1
regulatory : 1
5% : 9
70 : 6
cent : 1
phone : 2
cent: : 1
round(Decimal('0.70') : 1
Decimal('1.05') : 1
Decimal('0.74') : 1
round(.70 : 1
1.05 : 1
0.73 : 1
inferring : 1
significance : 19
multiplicands : 2
reproduces : 3
arise : 20
Exact : 3
modulo : 33
unsuitable : 9
Decimal('1.00') : 2
Decimal('.10') : 1
Decimal('0.00') : 1
1.00 : 2
0.10 : 1
0.09999999999999995 : 1
sum([Decimal('0.1')]*10) : 1
Decimal('1.0') : 1
sum([0.1]*10) : 1
needed: : 7
getcontext().prec : 20
Decimal(1) : 9
Decimal(7) : 5
Decimal('0.142857142857142857142857142857142857') : 1
Korn : 1
Bash : 3
"Tab" : 6
"string.a" : 1
"'.'" : 26
suggest : 9
completions : 7
application-defined : 2
".python_history" : 2
enormous : 2
left: : 2
indent : 37
next) : 1
suggest) : 1
enhanced : 29
IPython : 3
exploration : 2
thoroughly : 5
bpython : 1
program; : 4
human-readable : 16
we've : 15
*expression : 1
statements* : 2
this.) : 1
space-separated : 1
"F" : 6
"{" : 12
"}" : 10
'Referendum' : 1
f'Results : 1
{year} : 1
{event}' : 1
'Results : 1
Referendum' : 1
yes_votes : 2
42_572_654 : 1
no_votes : 1
43_132_495 : 1
percentage : 4
(yes_votes : 1
no_votes) : 1
'{:-9} : 1
YES : 2
votes : 3
{:2.2%}'.format(yes_votes : 1
percentage) : 1
42572654 : 1
49.67%' : 1
layout : 52
imagine : 4
padding : 47
syntax) : 4
consumption : 17
world.' : 2
str(s) : 1
repr(s) : 2
"'Hello : 1
world.'" : 1
str(1/7) : 1
'0.14285714285714285' : 1
3.25 : 5
'The : 24
repr(x) : 1
repr(y) : 1
'...' : 10
32.5 : 1
40000.. : 1
repr() : 16
world\n' : 3
hellos : 1
repr(hello) : 1
print(hellos) : 1
repr((x : 2
'eggs'))) : 1
"(32.5 : 1
40000 : 1
'eggs'))" : 1
"$x" : 1
short) : 3
prefixing : 2
"{expression}" : 1
decimal: : 1
print(f'The : 6
{math.pi:.3f}.') : 1
3.142 : 2
"':'" : 9
{'Sjoerd': : 3
'Jack': : 3
'Dcab': : 3
7678} : 1
table.items(): : 1
print(f'{name:10} : 1
==> : 18
{phone:10d}') : 1
Sjoerd : 3
Dcab : 1
7678 : 1
modifiers : 13
"'!a'" : 3
"ascii()" : 8
"'!s'" : 3
"'!r'" : 4
"repr()": : 1
animals : 4
'eels' : 2
print(f'My : 2
hovercraft : 4
{animals}.') : 1
eels : 1
{animals!r}.') : 1
'roaches' : 1
area : 44
'living : 1
room' : 2
print(f'Debugging : 1
{bugs=} : 1
{count=} : 1
{area=}') : 1
bugs='roaches' : 1
count=13 : 1
area='living : 1
print('We : 3
"{}!"'.format('knights' : 1
'Ni')) : 1
"Ni!" : 1
(called : 9
fields) : 2
{1}'.format('spam' : 1
'eggs')) : 2
print('{1} : 1
{0}'.format('spam' : 1
print('This : 2
{food} : 1
{adjective}.'.format( : 1
food='spam' : 1
adjective='absolutely : 1
horrible')) : 1
horrible : 1
combined: : 2
{1} : 6
{other}.'.format('Bill' : 1
'Manfred' : 1
other='Georg')) : 1
Bill : 4
Manfred : 1
Georg : 47
"'[]'" : 1
8637678} : 2
print('Jack: : 2
{0[Jack]:d}; : 1
Sjoerd: : 4
{0[Sjoerd]:d}; : 1
'Dcab: : 1
{0[Dcab]:d}'.format(table)) : 1
Jack: : 2
4098; : 2
4127; : 2
Dcab: : 3
8637678 : 2
"table" : 2
{Jack:d}; : 1
{Sjoerd:d}; : 1
{Dcab:d}'.format(**table)) : 1
"vars()" : 4
tidily : 1
aligned : 12
cubes: : 1
11): : 3
print('{0:2d} : 1
{1:3d} : 1
{2:4d}'.format(x : 1
x*x : 6
x*x*x)) : 1
343 : 2
512 : 11
729 : 2
manually: : 2
print(repr(x).rjust(2) : 1
repr(x*x).rjust(3) : 1
'end' : 1
print(repr(x*x*x).rjust(4)) : 1
arguments.) : 3
"str.rjust()" : 1
right-justifies : 1
"str.ljust()" : 1
"str.center()" : 1
unchanged; : 3
lay-out : 2
lying : 2
truncation : 8
"x.ljust(n)[:n]".) : 1
"str.zfill()" : 1
zeros : 62
understands : 12
minus : 23
signs: : 1
'12'.zfill(5) : 1
'00012' : 1
'-3.14'.zfill(7) : 1
'-003.14' : 1
'3.14159265359'.zfill(5) : 1
(modulo) : 4
Given : 32
"'string' : 1
values" : 5
"values" : 14
interpolation : 39
%5.3f.' : 1
math.pi) : 1
"open(filename : 1
encoding=None)" : 1
open('workfile' : 3
encoding="utf-8") : 4
*mode* : 120
"'r'" : 56
"'w'" : 36
erased) : 1
"'a'" : 54
opens : 37
appending; : 2
"'r+'" : 2
optional; : 8
de-facto : 5
"encoding="utf-8"" : 3
Appending : 4
"'b'" : 22
endings : 20
("\n" : 1
behind-the-scenes : 1
"JPEG" : 1
"EXE" : 1
"try"-"finally" : 1
blocks: : 6
read_data : 2
f.closed : 1
"f.write()" : 2
**might** : 1
"f.read(size)" : 1
quantity : 6
*size* : 91
returned; : 12
machine's : 6
("''") : 8
'This : 9
file.\n' : 2
"f.readline()" : 2
("\n") : 3
unambiguous; : 1
'Second : 1
file\n' : 1
"list(f)" : 1
"f.readlines()" : 1
"f.write(string)" : 1
*string* : 50
f.write('This : 1
test\n') : 1
them: : 12
('the : 1
answer' : 1
42) : 6
f.write(s) : 1
"f.tell()" : 2
opaque : 46
"f.seek(offset : 1
whence)" : 1
*offset* : 55
*whence* : 13
'rb+') : 1
f.write(b'0123456789abcdef') : 1
f.seek(5) : 1
Go : 8
6th : 3
b'5' : 1
f.seek(-3 : 1
b'd' : 1
(those : 6
seeks : 3
seeking : 9
"seek(0 : 1
2)") : 2
"isatty()" : 3
"truncate()" : 14
"'123'" : 1
123 : 18
serializing : 29
constantly : 2
(JavaScript : 3
Notation) : 3
hierarchies : 1
representations; : 1
*serializing* : 1
Reconstructing : 1
*deserializing* : 1
deserializing : 12
exchange : 21
interoperability : 9
'simple' : 4
'list'] : 1
json.dumps(x) : 1
'[1 : 1
"simple" : 10
"list"]' : 1
"dumps()" : 10
"dump()" : 18
serializes : 3
json.dump(x : 1
f) : 8
reading: : 2
json.load(f) : 3
Contrary : 2
*pickle* : 3
communicate : 24
insecure : 14
crafted : 5
skilled : 1
(Legacy : 11
****************************************** : 12
Ward : 9
"setuptools" : 22
https://setuptools.readthedocs.io/en/latest/setuptools.html : 12
independently : 29
Third : 10
Refer : 42
recommendations : 12
maintainers : 11
converting : 77
administrators : 8
coupling : 2
distribution's : 5
prominently : 2
"foo-1.0.tar.gz" : 5
"widget-0.9.7.zip" : 1
"foo-1.0" : 3
"widget-0.9.7" : 1
"README.txt" : 4
"README" : 1
explain : 18
terminal: : 3
(Start : 2
Accessories): : 1
downloaded: : 1
unpacks : 4
gunzip : 1
foo-1.0.tar.gz : 1
foo-1.0 : 2
cd : 6
"foo-1.0.zip" : 1
"C:\Temp" : 1
"C:\Temp\foo-1.0"; : 1
manipulator : 1
WinZip) : 1
**unzip** : 1
**pkunzip**) : 1
c:\Temp\foo-1.0 : 1
"setup.py : 5
incrementally---especially : 1
wrong---you : 1
users--- : 1
super-user : 3
privileges) : 1
twice: : 5
**install** : 12
**build** : 6
which---in : 1
case---quickly : 1
"build" : 8
'net : 1
lots : 21
*build : 1
directory* : 1
root; : 1
excessively : 3
pristine : 1
"--build-base" : 1
--build-base=/path/to/pybuild/foo-1.0 : 1
(Or : 6
directive : 37
Files.) : 3
build/ : 2
lib/ : 1
lib.<plat>/ : 1
temp.<plat>/ : 1
"<plat>" : 2
OS/hardware : 1
"lib" : 10
"pure : 3
distributions"---that : 1
(modules : 1
C/C++) : 1
"temp.*plat*" : 1
compile/link : 3
"lib.*plat*") : 1
(pure : 1
extensions) : 6
you) : 3
relatively : 25
"build/lib" : 1
"build/lib.*plat*") : 1
directory---i.e. : 1
install"---then : 1
built/installed : 1
Unix-based) : 1
("non-pure"): : 1
+-------------------+-------------------------------------------------------+----------------------------------------------------+---------+ : 4
|===================|=======================================================|====================================================|=========| : 1
(pure) : 1
"*prefix*/lib/python*X.Y*/site-packages" : 2
"/usr/local/lib/python*X.Y*/site-packages" : 3
(1) : 53
(non-pure) : 1
"*exec-prefix*/lib/python*X.Y*/site-packages" : 2
"*prefix*\Lib\site-packages" : 2
"C:\Python*XY*\Lib\site-packages" : 1
(2) : 36
Notes: : 28
"*exec-prefix*" : 4
system) : 13
Files\Python" : 2
1.6a1 : 1
stand : 5
"*exec-prefix*": : 1
(#26 : 1
Aug : 8
2004 : 4
17:19:02) : 1
sys.prefix : 4
'/usr' : 7
sys.exec_prefix : 3
document: : 3
"*X.Y*" : 1
stands : 17
"3.2"; : 1
"*abiflags*" : 1
flags; : 5
"*distname*" : 1
Dots : 1
capitalization : 1
paths; : 4
"python3.2" : 1
"Python32" : 1
upgrading : 9
present: : 5
painless : 1
*installation : 1
scheme*) : 1
exclusive: : 1
"--home" : 3
"--prefix" : 8
exec-prefix" : 3
"--install-base" : 1
"--install-platbase" : 1
mix : 23
option: : 35
--user : 3
subdirectories : 41
"site.USER_BASE" : 2
(written : 4
"*userbase*" : 3
"site.USER_SITE") : 1
macOS: : 5
+-----------------+-------------------------------------------------------------+ : 15
|=================|=============================================================| : 3
"*userbase*/lib/python*X.Y*/site-packages" : 1
"*userbase*/bin" : 1
"*userbase*/include/python*X.Y**abiflags*/*distname*" : 1
"*userbase*\Python*XY*\site-packages" : 1
"*userbase*\Python*XY*\Scripts" : 1
"*userbase*\Python*XY*\Include{distname}" : 1
finalize : 5
**build_ext** : 7
"*userbase*/include" : 1
"*userbase*/lib" : 1
"home : 1
scheme" : 4
stash : 1
scheme's : 1
unusual : 19
"/usr/" : 1
"/usr/local/" : 1
--home=<dir> : 1
typists : 1
tilde : 4
("~"); : 1
--home=~ : 3
"site") : 2
"site.addsitedir()" : 1
"*home*/lib/python" : 1
"*home*/bin" : 1
"*home*" : 1
"*home*/include/python/*distname*" : 1
(Mentally : 1
scheme) : 2
"prefix : 3
build/install : 1
installation) : 5
trifle : 1
is---that's : 1
system" : 1
add-on : 2
"/usr/local/lib/python2.*X*" : 2
"/usr/lib/python2.*X*" : 1
--prefix=/usr/local : 1
"/mnt/*@server*/export/lib/python2.*X*" : 1
/usr/local/bin/python : 1
--prefix=/mnt/@server/export : 1
"--exec-prefix" : 6
(Currently : 1
non-pure : 4
"--exec- : 1
+-------------------+------------------------------------------------------------+ : 6
|===================|============================================================| : 1
"*prefix*/bin" : 1
"*prefix*/include/python*X.Y**abiflags*/*distname*" : 1
installation; : 1
built: : 1
("Python.h" : 1
friends) : 3
(Of : 3
immaterial.) : 1
traditionally : 4
--prefix="\Temp\Python" : 1
"\Temp\Python" : 1
option; : 4
+-----------------+------------------------------------------------------------+ : 5
|=================|============================================================| : 1
"*prefix*\Scripts" : 1
"*prefix*\Include{distname}" : 1
tweak : 4
redefine : 7
*custom : 1
scheme* : 1
+------------------------+-------------------------+ : 7
|========================|=========================| : 1
"--install-purelib" : 2
"--install-platlib" : 2
"--install-lib" : 1
"--install-scripts" : 3
"--install-data" : 1
"--install-headers" : 1
(There : 8
---they : 1
"--install- : 1
modules.) : 3
Unix---but : 1
"~/scripts" : 1
"~/bin" : 1
(your : 3
case): : 1
--install-scripts=scripts : 2
wind : 2
"/usr/local/python/bin" : 1
--install-scripts=/usr/local/bin : 1
with--- : 1
case.) : 2
customizing : 14
directory---you : 1
--install-lib=Site : 1
module-related : 1
--install-purelib=python/lib : 1
--install-platlib=python/lib.$PLAT : 1
--install-scripts=python/scripts : 1
--install-data=python/data : 1
equivalently : 10
--home=~/python : 1
--install-purelib=lib : 1
--install-platlib='lib.$PLAT' : 1
--install-data=data : 1
"$PLAT" : 3
(necessarily) : 1
variable---it : 1
file(s) : 6
Files): : 1
[install] : 2
install-base=$HOME : 1
install-purelib=python/lib : 1
install-platlib=python/lib.$PLAT : 1
install-scripts=python/scripts : 1
install-data=python/data : 1
install-base=$HOME/python : 1
install-purelib=lib : 1
install-platlib=lib.$PLAT : 1
install-scripts=scripts : 1
install-data=data : 1
--install-base=/tmp : 1
"/tmp/python/lib" : 1
"/tmp/lib" : 1
"/tmp/python".) : 1
"$HOME" : 1
bear : 4
resemblance : 3
additionally : 14
use.) : 3
inadvertently : 13
(#11 : 1
Oct : 10
13:31:27) : 1
2.96 : 1
20000731 : 1
(Red : 2
2.96-112)] : 1
linux2 : 2
'/usr/local/lib/python2.3' : 1
'/usr/local/lib/python2.3/plat-linux2' : 1
'/usr/local/lib/python2.3/lib-tk' : 1
'/usr/local/lib/python2.3/lib-dynload' : 1
'/usr/local/lib/python2.3/site-packages'] : 1
"*...*/site-packages/" : 1
"/www" : 1
Add-on : 1
"/www/python" : 2
".../site- : 1
packages/" : 1
(Because : 1
Paths : 8
"site.py" : 13
"-S" : 13
suppress : 47
sys.path.append('/www/python/') : 1
2.2.2 : 4
overwritten : 20
stock : 2
"['' : 1
'/www/python/lib/pythonX.Y/' : 1
'/www/python/lib/pythonX.Y/plat-linux2' : 1
...]" : 9
"/www/python:/opt/py" : 1
"['/www/python' : 1
'/opt/py']" : 1
"sys.path"; : 3
exist.) : 1
(depending : 21
consulted : 9
"earlier" : 1
"later" : 1
Location : 8
processed) : 2
+----------------+------------------------------------------------------------+---------+ : 4
|================|============================================================|=========| : 1
"*prefix*/lib/python*ver*/distutils/distutils.cfg" : 1
"$HOME/.pydistutils.cfg" : 1
"setup.cfg" : 12
(3) : 35
+----------------+---------------------------------------------------+---------+ : 4
|================|===================================================|=========| : 1
"*prefix*\Lib\distutils\distutils.cfg" : 1
(4) : 17
"%HOME%\pydistutils.cfg" : 1
(5) : 23
"personal" : 1
"--no-user-cfg" : 2
installed; : 5
"*prefix*/lib/python1.5/site- : 1
packages/distutils" : 1
"HOME" : 13
"getpwuid()" : 1
"os.path.expanduser()" : 13
I.e. : 1
(1).) : 1
"installation : 1
"C:\Python" : 1
"C:\Python\Lib\distutils\distutils.cfg" : 1
library---so : 1
Files\Python\distutils\distutils.cfg" : 1
"USERPROFILE" : 5
"HOMEDRIVE" : 2
"HOMEPATH" : 2
"option=value" : 1
quietly : 3
[global] : 1
verbose=0 : 12
them) : 13
"build : 2
base" : 2
**build*** : 1
forcibly : 4
rebuild : 8
[build] : 1
build-base=blib : 1
force=1 : 1
--build-base=blib : 1
--force : 1
implication; : 1
file.) : 5
"--help" : 15
help" : 1
"Reference" : 1
"Distributing : 1
Modules" : 2
Extensions: : 1
Tricks : 2
Whenever : 18
inappropriate : 7
discusses : 9
Tweaking : 1
compiler/linker : 2
foreseen : 1
"Setup" : 8
[sourcefile : 1
...] : 29
[cpparg : 1
[library : 1
(edits : 1
needed) : 6
*sourcefile* : 1
judging : 1
Filenames : 2
".c" : 4
".C" : 1
".cc" : 2
".c++" : 1
".m" : 1
".mm" : 1
Objective : 1
*cpparg* : 1
"-D" : 1
"-U" : 3
"-C" : 1
*library* : 2
".a" : 2
"-l" : 9
foomodule.c : 3
"libm.a" : 1
"-lm" : 1
-lm : 3
"-Xcompiler" : 3
*arg* : 44
"-Xlinker" : 2
-Xcompiler : 2
-o32 : 1
-Xlinker : 1
"-o32" : 1
"-shared" : 2
"-x : 2
c++" : 2
"-Xcompiler : 1
non-Microsoft : 1
Borland/CodeGear : 1
~~~~~~~~~~~~~~~~~~~~ : 12
subsection : 14
Borland : 11
Borland's : 4
(OMF) : 1
ActiveState : 3
(Python : 22
COFF : 1
format.) : 2
"python25.lib" : 3
coff2omf : 1
python25.lib : 1
python25_bcpp.lib : 1
"coff2omf" : 1
"Libs" : 1
(zlib : 4
(eg : 20
"_bcpp" : 1
"foo_bcpp.lib") : 1
("foo.lib".) : 1
--compiler=bcpp : 1
C++Builder : 1
Free : 9
MinGW : 11
--compiler=cygwin : 1
no-cygwin : 2
[3] : 30
--compiler=mingw32 : 1
options/compilers : 1
"""""""""""""""""""""""""""""""""" : 1
inferior : 2
3.0.0 : 6
binutils-2.13.90-20030111-1) : 1
htt : 1
ps://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/) : 1
pexports : 1
python25.dll : 2
>python25.def : 1
"python25.dll" : 1
"just : 2
me" : 1
gcc : 14
/cygwin/bin/dlltool : 1
--dllname : 2
--def : 2
python25.def : 1
--output-lib : 2
libpython25.a : 1
(Should : 1
"libs" : 2
directory.) : 3
(zlib,...) : 1
COFF-libraries : 1
OMF-libraries : 1
https://www.sourceware.org/cygwin/ : 1
emulation : 22
"cygwin1.dll" : 1
*************************** : 5
(largely) : 1
drop-in : 7
unmodified : 18
context) : 8
"bdist_wheel" : 9
"distutils"/setuptools : 1
"wheels" : 1
"wheel : 1
files" : 1
427**) : 1
granting : 2
efficiently : 43
spend : 3
focusing : 3
organisation : 2
twine : 1
publishing : 6
Uploading : 2
.pypirc : 5
tips: : 1
hosting : 2
considering : 5
******************************************* : 14
briefly : 4
explanatory : 5
Python; : 10
mentions : 11
"XY"; : 1
"'X'" : 10
"'Y'" : 2
"XY" : 1
"22" : 1
Unix: : 6
extensions; : 3
instructive : 2
study : 3
========================================= : 13
(".so") : 3
dynamic-link : 1
(".dll") : 1
memory; : 2
libraries; : 1
(both : 10
".lib") : 2
reassure : 1
dynamic-load : 1
"A.a" : 1
"B.so" : 1
"C.so"; : 1
"A.dll" : 1
"A.lib" : 3
spam"; : 1
spam's : 1
*"; : 2
C++; : 1
MSVC++ : 2
"pythonXY.lib" : 3
ni : 1
cl : 2
/LD : 2
/I/python/include : 2
spam.c : 1
../libs/pythonXY.lib : 2
ni.c : 1
spam.lib : 1
files: : 23
"spam.obj" : 1
"spam.dll" : 1
"spam.lib" : 1
"Spam.dll" : 1
"PyArg_ParseTuple()") : 1
"ni.dll" : 1
".obj" : 1
"_declspec(dllexport)" : 1
"void : 8
_declspec(dllexport) : 2
initspam(void)" : 1
"PyObject : 19
*NiGetSpamData(void)" : 1
Developer : 5
throw : 20
100K : 1
*ignore : 1
libraries* : 1
"msvcrtxx.lib" : 1
******************************** : 8
".so" : 6
".pyd" : 6
*initialization : 1
signature: : 7
*PyInit_modulename(void) : 1
"PyModuleDef" : 13
ASCII-only : 16
"PyInit_<modulename>" : 1
"<modulename>" : 2
"PyInitU_<modulename>" : 1
*punycode* : 1
hyphens : 11
initfunc_name(name): : 1
b'_' : 2
name.encode('ascii') : 1
UnicodeEncodeError: : 3
b'U_' : 1
name.encode('punycode').replace(b'-' : 1
b'_') : 1
b'PyInit' : 1
*"Multiple : 1
library"* : 1
489** : 11
driver : 14
distutils.core : 23
module1 : 2
Extension('demo' : 2
['demo.c']) : 2
(name : 21
'PackageName' : 2
'1.0' : 3
demo : 21
package' : 2
ext_modules : 3
[module1]) : 2
"demo.c" : 3
"demo" : 2
"build/lib.system" : 1
"demo.so" : 1
"demo.pyd" : 1
"setup" : 5
Specifically : 26
meta-information : 2
distutils; : 1
pre-compute : 1
"setup()" : 27
"ext_modules" : 5
"Extension" : 11
demonstrated : 6
define_macros : 2
[('MAJOR_VERSION' : 1
'1') : 2
('MINOR_VERSION' : 1
'0')] : 1
include_dirs : 2
['/usr/local/include'] : 1
['tcl83'] : 1
library_dirs : 2
['/usr/local/lib'] : 1
'Martin : 2
Loewis' : 1
author_email : 1
'martin@v.loewis.de' : 1
url : 30
'https://docs.python.org/extending/building' : 1
long_description : 2
''' : 14
-DNDEBUG : 2
-g : 6
-O3 : 2
-Wall : 2
-Wstrict-prototypes : 1
-fPIC : 1
-DMAJOR_VERSION=1 : 1
-DMINOR_VERSION=0 : 1
-I/usr/local/include : 1
-I/usr/local/include/python2.2 : 1
demo.c : 1
build/temp.linux-i686-2.2/demo.o : 2
-L/usr/local/lib : 1
-ltcl83 : 1
build/lib.linux-i686-2.2/demo.so : 1
demonstration : 10
only; : 2
End-users : 1
packages; : 2
sdist : 8
distribution; : 1
"MANIFEST.in" : 8
bdist_rpm : 4
bdist_dumb : 1
******************************************** : 16
fly-by : 1
"PyTypeObject" : 41
omitted: : 1
typedef : 62
_typeobject : 4
PyObject_VAR_HEAD : 5
*tp_name; : 3
Py_ssize_t : 250
tp_basicsize : 4
tp_itemsize; : 3
tp_dealloc; : 3
tp_vectorcall_offset; : 2
getattrfunc : 4
tp_getattr; : 3
setattrfunc : 4
tp_setattr; : 3
PyAsyncMethods : 5
*tp_as_async; : 2
formerly : 11
tp_compare : 2
tp_reserved : 2
reprfunc : 8
tp_repr; : 3
PyNumberMethods : 5
*tp_as_number; : 3
PySequenceMethods : 5
*tp_as_sequence; : 3
PyMappingMethods : 5
*tp_as_mapping; : 3
compatibility) : 5
hashfunc : 4
tp_hash; : 3
ternaryfunc : 8
tp_call; : 3
tp_str; : 3
getattrofunc : 4
tp_getattro; : 3
setattrofunc : 4
tp_setattro; : 3
PyBufferProcs : 4
*tp_as_buffer; : 2
optional/expanded : 2
tp_flags; : 2
*tp_doc; : 3
Assigned : 4
traverseproc : 4
tp_traverse; : 2
inquiry : 11
tp_clear; : 2
rich : 32
richcmpfunc : 4
tp_richcompare; : 3
enabler : 7
tp_weaklistoffset; : 2
getiterfunc : 4
tp_iter; : 3
iternextfunc : 4
tp_iternext; : 3
stuff : 14
PyMethodDef : 23
*tp_methods; : 3
PyMemberDef : 18
*tp_members; : 3
PyGetSetDef : 10
*tp_getset; : 3
Strong : 3
*tp_base; : 2
*tp_dict; : 2
descrgetfunc : 3
tp_descr_get; : 2
descrsetfunc : 3
tp_descr_set; : 2
tp_dictoffset; : 2
initproc : 3
tp_init; : 2
allocfunc : 3
tp_alloc; : 2
newfunc : 4
tp_new; : 2
freefunc : 4
tp_free; : 2
free-memory : 2
tp_is_gc; : 2
PyObject_IS_GC : 2
*tp_bases; : 2
*tp_mro; : 2
*tp_cache; : 2
*tp_subclasses; : 2
*tp_weaklist; : 2
tp_del; : 2
tp_version_tag; : 2
tp_finalize; : 2
vectorcallfunc : 4
tp_vectorcall; : 2
PyTypeObject; : 2
chances : 1
handful : 2
historical : 24
baggage : 1
impacts : 5
suit : 6
(think: : 1
"tp_itemsize" : 12
dealt : 6
address) : 15
"obj.__doc__" : 1
reclaim : 5
newdatatype_dealloc(newdatatypeobject : 2
*obj) : 20
free(obj->obj_UnderlyingDatatypePtr); : 1
Py_TYPE(obj)->tp_free((PyObject : 2
*)obj); : 2
"PyObject_GC_UnTrack()" : 12
fields: : 17
PyObject_GC_UnTrack(obj); : 1
Py_CLEAR(obj->other_obj); : 1
deallocators : 2
unwinds : 3
stack; : 4
unwound : 5
(rather : 25
returns) : 5
protect : 25
misleading : 19
restoring : 14
"PyErr_Fetch()" : 6
"PyErr_Restore()" : 2
my_dealloc(PyObject : 1
MyObject : 1
*self : 62
(MyObject : 1
*) : 33
obj; : 2
*cbresult; : 1
(self->my_callback : 1
*err_type : 1
*err_value : 1
*err_traceback; : 1
PyErr_Fetch(&err_type : 1
&err_value : 1
&err_traceback); : 1
cbresult : 1
PyObject_CallNoArgs(self->my_callback); : 1
(cbresult : 1
PyErr_WriteUnraisable(self->my_callback); : 1
Py_DECREF(cbresult); : 1
restores : 16
PyErr_Restore(err_type : 1
err_value : 1
err_traceback); : 1
Py_DECREF(self->my_callback); : 1
Py_TYPE(obj)->tp_free((PyObject*)self); : 1
"tp_traverse" : 43
"tp_clear") : 1
finalized : 26
"tp_dealloc" : 23
unstable : 9
state: : 6
non-trivial : 7
crash.Starting : 1
finalization : 31
"tp_finalize" : 8
442** : 7
"str()".) : 1
"tp_repr" : 13
newdatatype_repr(newdatatypeobject : 1
obj) : 7
PyUnicode_FromFormat("Repr-ified_newdatatype{{size:%d}}" : 1
obj->obj_UnderlyingDatatypePtr->size); : 2
type's : 56
"tp_name" : 5
uniquely : 11
"tp_str" : 3
"repr()"; : 2
newdatatype_str(newdatatypeobject : 1
PyUnicode_FromFormat("Stringified_newdatatype{{size:%d}}" : 1
allowed) : 2
handlers; : 2
char* : 15
PyObject* : 55
implementation's : 6
shortly) : 1
type-specific : 6
disappeared : 2
*simple* : 1
"PyType_Ready()" : 26
*descriptor*s : 4
"tp_getattro" : 11
"tp_setattro" : 11
"tp_methods" : 4
"PyMethodDef" : 19
*ml_name; : 1
PyCFunction : 10
ml_meth; : 1
ml_flags; : 1
*ml_doc; : 1
PyMethodDef; : 1
end; : 1
"ml_name" : 1
read-write : 5
*name; : 4
offset; : 3
*doc; : 1
PyMemberDef; : 1
*descriptor* : 6
"type" : 92
"structmember.h" : 4
header; : 1
"flags" : 23
"structmember.h"; : 1
bitwise-OR : 1
+-----------------------------+------------------------------------------------+ : 3
|=============================|================================================| : 1
"READONLY" : 4
"PY_AUDIT_READ" : 2
Emit : 9
"object.__getattr__" : 5
audit : 37
"RESTRICTED" : 2
"READ_RESTRICTED" : 3
"WRITE_RESTRICTED" : 1
"tp_members" : 3
simplicity : 10
here; : 7
flavors : 5
"tp_getattr" : 7
look-up : 5
newdatatype_getattr(newdatatypeobject : 1
*obj : 27
*name) : 20
(strcmp(name : 1
"data") : 1
PyLong_FromLong(obj->data); : 1
PyErr_Format(PyExc_AttributeError : 1
"'%.50s' : 1
'%.400s'" : 1
tp->tp_name : 1
name); : 2
NULL; : 66
"tp_setattr" : 8
"__delattr__()" : 5
exception; : 13
newdatatype_setattr(newdatatypeobject : 1
*v) : 11
PyErr_Format(PyExc_RuntimeError : 1
"Read-only : 1
%s" : 15
-1; : 37
"tp_richcompare" : 12
"__lt__()" : 15
"PyObject_RichCompare()" : 3
"PyObject_RichCompareBool()" : 6
"Py_EQ" : 6
"Py_NE" : 6
"Py_LE" : 5
"Py_GE" : 5
"Py_LT" : 5
"Py_GT" : 5
"Py_True" : 7
"Py_False" : 6
"Py_NotImplemented" : 8
newdatatype_richcmp(PyObject : 1
*obj1 : 1
*obj2 : 1
op) : 3
*result; : 3
size1 : 8
size2; : 7
newdatatype : 1
obj1->obj_UnderlyingDatatypePtr->size; : 1
size2 : 1
obj2->obj_UnderlyingDatatypePtr->size; : 1
(op) : 1
Py_LT: : 1
break; : 6
Py_LE: : 1
Py_EQ: : 1
Py_NE: : 1
Py_GT: : 1
Py_GE: : 1
Py_True : 1
Py_False; : 1
Py_INCREF(result); : 1
result; : 11
*abstract* : 1
'protocols;' : 1
slots : 47
non-"NULL" : 43
unfilled.) : 1
"PyNumberMethods" : 5
"PySequenceMethods" : 2
"PyMappingMethods" : 3
"Objects" : 2
Py_hash_t : 8
newdatatype_hash(newdatatypeobject : 1
obj->some_size : 1
32767 : 2
obj->some_number; : 1
-2; : 1
"Py_hash_t" : 2
signed : 55
platform-varying : 1
Returning : 11
"tp_hash" : 14
"called" : 3
"obj1" : 2
"obj1('hello')" : 2
"tp_call" : 14
*self* : 42
"PyArg_ParseTuple()" : 46
*kwds* : 13
"PyArg_ParseTupleAndKeywords()" : 20
saying : 7
toy : 2
implementation: : 12
newdatatype_call(newdatatypeobject : 1
*kwds) : 13
*arg1; : 1
*arg2; : 1
*arg3; : 1
(!PyArg_ParseTuple(args : 5
"sss:call" : 1
&arg1 : 1
&arg2 : 1
&arg3)) : 1
PyUnicode_FromFormat( : 1
"Returning : 1
[%d] : 1
arg1: : 1
[%s] : 2
arg2: : 1
arg3: : 1
[%s]\n" : 1
obj->obj_UnderlyingDatatypePtr->size : 1
arg1 : 20
arg3); : 1
"tp_iter" : 13
"tp_iternext" : 11
iterated : 37
*in : 1
addition* : 1
"NULL"; : 14
goals : 5
participate : 20
incurring : 2
performance-critical : 3
weakly : 11
referencable : 4
"tp_alloc") : 1
"tp_weaklistoffset" : 7
aforementioned : 4
Concretely : 2
PyObject_HEAD : 13
*weakreflist; : 2
TrivialObject; : 1
TrivialType : 1
PyVarObject_HEAD_INIT(NULL : 14
.tp_weaklistoffset : 2
offsetof(TrivialObject : 1
weakreflist) : 2
}; : 43
"PyObject_ClearWeakRefs()") : 1
non-"NULL": : 1
Trivial_dealloc(TrivialObject : 1
*self) : 14
weakrefs : 10
(self->weakreflist : 1
PyObject_ClearWeakRefs((PyObject : 1
self); : 7
destruction : 10
Py_TYPE(self)->tp_free((PyObject : 7
"tp_" : 1
"tp_richcompare") : 1
"PyObject_TypeCheck()" : 2
(!PyObject_TypeCheck(some_object : 1
&MyType)) : 1
PyErr_SetString(PyExc_TypeError : 12
"arg : 1
#1 : 6
mything"); : 1
https://www.python.org/downloads/source/ : 1
https://github.com/python/cpython : 1
gentle : 5
"base : 3
type" : 4
"PyObject" : 94
*reference : 3
count* : 2
"type : 9
object" : 16
multiplied : 13
methods" : 5
"Custom" : 28
"custom": : 1
*static* : 2
heap-allocated : 8
"PyType_FromSpec()" : 13
#define : 26
PY_SSIZE_T_CLEAN : 15
CustomObject; : 6
CustomType : 5
.tp_name : 12
"custom.Custom" : 4
.tp_doc : 10
PyDoc_STR("Custom : 6
objects") : 10
.tp_basicsize : 11
sizeof(CustomObject) : 6
.tp_itemsize : 8
.tp_flags : 11
Py_TPFLAGS_DEFAULT : 12
.tp_new : 9
PyType_GenericNew : 4
PyModuleDef : 15
custommodule : 4
PyModuleDef_HEAD_INIT : 8
.m_name : 5
"custom" : 5
.m_doc : 5
type." : 5
.m_size : 5
PyMODINIT_FUNC : 12
PyInit_custom(void) : 1
*m; : 8
(PyType_Ready(&CustomType) : 5
PyModule_Create(&custommodule); : 4
(m : 11
Py_INCREF(&CustomType); : 5
(PyModule_AddObject(m : 9
(PyObject : 13
&CustomType) : 5
Py_DECREF(&CustomType); : 5
Py_DECREF(m); : 9
m; : 10
hopefully : 6
**object** : 2
contains: : 8
"CustomObject" : 1
**type** : 1
behaves: : 1
"CustomType" : 3
inspects : 9
"PyInit_custom" : 1
"custommodule" : 1
"PyObject_HEAD" : 5
"ob_base" : 3
(these : 3
"Py_TYPE" : 3
"Py_REFCNT" : 3
respectively) : 8
accident: : 1
besides : 10
boilerplate; : 1
floats: : 1
ob_fval; : 1
PyFloatObject; : 1
C99-style : 1
designated : 6
caring : 2
fields' : 1
"object.h" : 2
We're : 5
time: : 15
boilerplate : 18
"" : 13
custom.Custom() : 2
"custom.Custom") : 1
variable-sized : 3
subclassable : 4
"tp_basicsize" : 11
"__bases__" : 13
ensuring : 19
"Py_TPFLAGS_DEFAULT" : 1
"tp_doc" : 6
"tp_new" : 39
"PyType_GenericNew()" : 5
Everything : 6
"PyInit_custom()": : 1
return; : 6
"ob_type" : 6
initially : 43
mycustom : 1
"custom.c" : 1
and: : 5
setup(name="custom" : 2
version="1.0" : 2
ext_modules=[Extension("custom" : 1
["custom.c"])]) : 1
"setup.py"; : 1
"custom.so" : 1
subdirectory; : 2
fire : 2
custom" : 1
uninteresting : 2
showcases : 3
real-world : 4
better-maintained : 1
"custom2" : 2
capabilities: : 2
*first; : 4
*last; : 4
number; : 9
Custom_dealloc(CustomObject : 5
Py_XDECREF(self->first); : 4
Py_XDECREF(self->last); : 3
Custom_new(PyTypeObject : 4
CustomObject : 4
*self; : 4
(CustomObject : 5
type->tp_alloc(type : 5
(self : 9
self->first : 18
PyUnicode_FromString(""); : 8
(self->first : 6
Py_DECREF(self); : 8
self->last : 11
(self->last : 6
self->number : 4
0; : 52
self; : 4
Custom_init(CustomObject : 5
*kwlist[] : 7
{"first" : 10
"last" : 14
"number" : 8
NULL}; : 6
*last : 5
*tmp; : 9
(!PyArg_ParseTupleAndKeywords(args : 6
"|OOi" : 2
kwlist : 6
&first : 5
&last : 5
&self->number)) : 5
(first) : 8
tmp : 16
self->first; : 11
Py_INCREF(first); : 6
Py_XDECREF(tmp); : 5
(last) : 7
self->last; : 8
Py_INCREF(last); : 5
last; : 6
Custom_members[] : 5
T_OBJECT_EX : 5
offsetof(CustomObject : 9
"first : 5
name"} : 4
{"last" : 5
"last : 5
{"number" : 5
T_INT : 6
number) : 21
"custom : 5
number"} : 5
{NULL} : 15
Sentinel : 14
Custom_name(CustomObject : 4
*Py_UNUSED(ignored)) : 4
PyErr_SetString(PyExc_AttributeError : 4
"first"); : 2
"last"); : 2
PyUnicode_FromFormat("%S : 4
%S" : 4
self->last); : 4
Custom_methods[] : 4
{"name" : 4
(PyCFunction) : 5
Custom_name : 4
combining : 27
"custom2.Custom" : 1
Py_TPFLAGS_BASETYPE : 8
Custom_new : 4
.tp_init : 5
(initproc) : 5
Custom_init : 4
.tp_dealloc : 6
(destructor) : 4
Custom_dealloc : 4
.tp_members : 4
Custom_members : 4
.tp_methods : 5
Custom_methods : 4
PyInit_custom2(void) : 1
We've : 8
<structmember.h> : 1
*last* : 15
*number* : 14
accordingly: : 2
member: : 10
clears : 29
"Py_XDECREF()" : 16
midway) : 1
"tp_free" : 7
(computed : 3
"Py_TYPE(self)") : 1
"destructor" : 6
"Custom_dealloc" : 2
"CustomObject : 1
polymorphism : 1
initializing) : 1
exposed : 79
"first" : 11
instantiated) : 1
initializer : 25
(a.k.a : 11
"tp_init" : 17
"__init__" : 27
"tp_alloc" : 9
memory: : 7
proceeding : 4
ourselves : 7
fills : 11
co-operative : 1
"__new__()") : 2
"type->tp_base->tp_new" : 1
Python-defined : 1
(Specifically : 1
"TypeError".) : 1
Initializers : 2
Anyone : 1
tempted : 4
risky : 3
Our : 11
member; : 6
*Global : 4
Lock* : 4
paranoid : 1
reassign : 3
decrementing : 16
1; : 19
*GIL* : 27
expose : 40
definitions: : 7
slot: : 3
"Custom.name()" : 1
outputs : 49
subclass) : 14
name(self): : 2
"%s : 1
(self.first : 1
self.last) : 1
deletion : 37
"METH_NOARGS" : 6
expecting : 22
*self*) : 4
assumptions : 8
"Py_TPFLAGS_BASETYPE" : 2
"PyInit_custom()" : 1
"PyInit_custom2()" : 1
ext_modules=[ : 1
Extension("custom" : 1
["custom.c"]) : 1
Extension("custom2" : 1
["custom2.c"]) : 1
]) : 5
non-string : 18
"|UUi" : 3
Py_DECREF(tmp); : 9
Custom_getfirst(CustomObject : 3
*closure) : 12
Py_INCREF(self->first); : 3
Custom_setfirst(CustomObject : 3
*value : 12
(value : 9
"Cannot : 7
attribute"); : 5
(!PyUnicode_Check(value)) : 5
string"); : 5
Py_INCREF(value); : 5
Custom_getlast(CustomObject : 2
Py_INCREF(self->last); : 2
Custom_setlast(CustomObject : 2
Custom_getsetters[] : 3
(getter) : 6
Custom_getfirst : 3
(setter) : 6
Custom_setfirst : 3
NULL} : 12
Custom_getlast : 3
Custom_setlast : 3
"custom3.Custom" : 1
.tp_getset : 3
Custom_getsetters : 3
"custom3" : 1
PyInit_custom3(void) : 1
getter : 19
setter : 16
"closure" : 3
closure : 27
closure.) : 1
"PyGetSetDef" : 9
structures: : 4
"tp_getset" : 2
attributes: : 94
passed: : 3
*cyclic : 2
(GC)* : 1
identify : 47
consider: : 3
l.append(l) : 1
[4] : 23
cycles: : 3
custom3 : 1
Derived(custom3.Custom): : 1
Derived() : 1
n.some_attribute : 1
participating : 1
slots: : 1
Custom_traverse(CustomObject : 3
visitproc : 8
*arg) : 12
Py_VISIT(self->first); : 2
Py_VISIT(self->last); : 2
Custom_clear(CustomObject : 2
Py_CLEAR(self->first); : 3
Py_CLEAR(self->last); : 3
PyObject_GC_UnTrack(self); : 3
Custom_clear(self); : 2
"custom4.Custom" : 1
Py_TPFLAGS_HAVE_GC : 6
.tp_traverse : 2
(traverseproc) : 1
Custom_traverse : 1
.tp_clear : 2
(inquiry) : 1
Custom_clear : 1
"custom4" : 1
PyInit_custom4(void) : 1
traversal : 33
vret; : 3
(self->first) : 1
vret : 2
visit(self->first : 1
arg); : 3
(vret : 2
(self->last) : 1
visit(self->last : 1
subobject : 2
"visit()" : 4
"Py_VISIT()" : 7
minimize : 10
"Custom_traverse": : 1
*visit* : 9
"Py_CLEAR()" : 5
attribute's : 10
(*especially* : 1
cycle) : 3
writing: : 4
Nevertheless : 11
error-prone : 9
micro- : 1
robustness : 2
untrack : 2
reimplemented : 13
"Custom_clear": : 1
"Py_TPFLAGS_HAVE_GC" : 28
flags: : 16
we'd : 3
"SubList" : 4
"increment()" : 1
sublist : 4
sublist.SubList(range(3)) : 1
s.extend(s) : 1
print(len(s)) : 1
print(s.increment()) : 2
PyListObject : 3
state; : 6
SubListObject; : 2
SubList_increment(SubListObject : 1
*unused) : 1
self->state++; : 1
PyLong_FromLong(self->state); : 1
SubList_methods[] : 1
{"increment" : 1
SubList_increment : 1
PyDoc_STR("increment : 1
counter")} : 1
SubList_init(SubListObject : 2
(PyList_Type.tp_init((PyObject : 2
kwds) : 4
self->state : 2
SubListType : 1
"sublist.SubList" : 1
PyDoc_STR("SubList : 1
sizeof(SubListObject) : 1
SubList_init : 1
SubList_methods : 1
sublistmodule : 1
"sublist" : 1
PyInit_sublist(void) : 2
SubListType.tp_base : 2
&PyList_Type; : 2
(PyType_Ready(&SubListType) : 2
PyModule_Create(&sublistmodule); : 2
Py_INCREF(&SubListType); : 2
&SubListType) : 2
Py_DECREF(&SubListType); : 2
"PyObject_HEAD()" : 1
"PyListObject : 1
"SubListObject : 1
*": : 1
"tp_base" : 6
Due : 48
"PyList_Type"; : 1
deriving : 7
deallocating : 12
********************************************** : 15
Those : 22
time) : 19
cffi : 3
Numba : 1
assistance : 12
creators : 2
attaching : 10
around: : 1
enrich : 2
purposes; : 5
tailor : 2
stdio : 5
identification : 7
"PyRun_SimpleFile()" : 3
main(int : 5
argc : 15
*argv[]) : 3
*program : 2
Py_DecodeLocale(argv[0] : 2
NULL); : 5
(program : 2
fprintf(stderr : 7
"Fatal : 2
argv[0]\n"); : 2
exit(1); : 4
Py_SetProgramName(program); : 2
PyRun_SimpleString("from : 1
time,ctime\n" : 1
"print('Today : 1
ctime(time()))\n"); : 1
(Py_FinalizeEx() : 2
exit(120); : 1
PyMem_RawFree(program); : 2
inform : 7
run- : 3
"Py_FinalizeEx()" : 16
shuts : 5
text-editor : 1
allocating : 26
cumbersome : 4
despite : 10
intent : 10
topics : 13
does: : 5
swapped : 7
cross-language : 2
*pName : 1
*pModule : 1
*pFunc; : 1
*pArgs : 1
*pValue; : 1
i; : 2
(argc : 1
fprintf(stderr,"Usage: : 1
pythonfile : 1
funcname : 22
[args]\n"); : 1
pName : 4
PyUnicode_DecodeFSDefault(argv[1]); : 2
pModule : 2
PyImport_Import(pName); : 2
Py_DECREF(pName); : 1
(pModule : 1
pFunc : 4
PyObject_GetAttrString(pModule : 2
argv[2]); : 3
(pFunc : 2
&& : 13
PyCallable_Check(pFunc)) : 2
pArgs : 1
PyTuple_New(argc : 1
3); : 1
3; : 4
++i) : 1
pValue : 4
PyLong_FromLong(atoi(argv[i : 1
3])); : 1
(!pValue) : 1
Py_DECREF(pArgs); : 2
Py_DECREF(pModule); : 3
argument\n"); : 1
stolen : 8
PyTuple_SetItem(pArgs : 1
pValue); : 1
PyObject_CallObject(pFunc : 2
pArgs); : 2
(pValue : 1
printf("Result : 1
call: : 30
%ld\n" : 1
PyLong_AsLong(pValue)); : 1
Py_DECREF(pValue); : 1
Py_DECREF(pFunc); : 1
PyErr_Print(); : 4
fprintf(stderr,"Call : 1
failed\n"); : 1
(PyErr_Occurred()) : 2
\"%s\"\n" : 2
Py_XDECREF(pFunc); : 2
"Failed : 2
argv[1]); : 1
120; : 1
"argv[1]" : 3
"argv[2]" : 1
(let's : 2
**call**) : 1
multiply(a,b): : 1
print("Will : 1
compute" : 1
"times" : 3
a): : 4
"PyImport_Import()" : 3
"PyUnicode_FromString()" : 3
"PyObject_GetAttrString()" : 4
constructing : 27
with: : 17
"pValue" : 1
examining : 8
glue : 3
numargs=0; : 1
emb_numargs(PyObject : 1
*args) : 28
if(!PyArg_ParseTuple(args : 1
":numargs")) : 1
PyLong_FromLong(numargs); : 1
EmbMethods[] : 1
{"numargs" : 1
emb_numargs : 1
METH_VARARGS : 6
received : 166
process."} : 1
{NULL : 5
EmbModule : 1
"emb" : 1
EmbMethods : 1
PyInit_emb(void) : 1
PyModule_Create(&EmbModule); : 1
"Py_Initialize()": : 2
numargs : 1
argc; : 1
PyImport_AppendInittab("emb" : 1
&PyInit_emb); : 1
"numargs" : 1
"emb.numargs()" : 1
emb : 1
print("Number : 1
arguments" : 8
emb.numargs()) : 1
linker) : 1
(".so" : 2
"python*X.Y*-config" : 2
"python3-config" : 1
available) : 36
"pythonX.Y-config : 2
--cflags" : 1
compiling: : 1
/opt/bin/python3.11-config : 2
--cflags : 1
-I/opt/include/python3.11 : 2
-Wsign-compare : 1
-fwrapv : 1
--ldflags : 2
--embed" : 5
linking: : 1
--embed : 1
-L/opt/lib/python3.11/config-3.11-x86_64-linux-gnu : 1
-L/opt/lib : 1
-lpython3.11 : 1
-lpthread : 1
-ldl : 2
-lutil : 1
platforms; : 6
reports) : 1
system's : 43
(use : 21
"sysconfig.get_makefile_filename()" : 1
location) : 3
sysconfig.get_config_var('LIBS') : 1
'-lpthread : 1
-lutil' : 1
sysconfig.get_config_var('LINKFORSHARED') : 1
'-Xlinker : 1
-export-dynamic' : 1
*extension : 3
modules* : 2
(Application : 2
Interface) : 9
""Python.h"" : 2
setup; : 1
portability : 15
food : 2
fans...) : 1
let's : 24
"system()" : 6
null-terminated : 15
spam.system("ls : 1
-l") : 1
"spammodule.c" : 1
(Historically : 1
"spammodule.c"; : 1
"spammify" : 1
"spammify.c".) : 1
pulls : 3
like) : 1
pre-processor : 4
*must* : 23
"Python.h" : 15
included.It : 2
"PY_SSIZE_T_CLEAN" : 14
user-visible : 3
"Py" : 6
"PY" : 1
"<stdio.h>" : 4
"<string.h>" : 4
"<errno.h>" : 4
"<stdlib.h>" : 4
declares : 11
"free()" : 26
"realloc()" : 5
"spam.system(string)" : 1
(we'll : 1
called): : 1
spam_system(PyObject : 3
*command; : 3
sts; : 3
"s" : 35
&command)) : 4
system(command); : 4
PyLong_FromLong(sts); : 4
""ls : 1
-l"") : 1
conventionally : 6
functions; : 14
call's : 4
(nonzero) : 3
(zero) : 4
pointer) : 3
"sys.exc_info()" : 23
"PyErr_SetString()" : 5
"PyExc_ZeroDivisionError" : 4
"associated : 3
"PyErr_SetFromErrno()" : 3
inspection : 10
"PyErr_SetObject()" : 2
non-destructively : 3
"PyErr_Occurred()" : 26
*g* : 15
detects : 46
"PyErr_*" : 3
*f*'s : 1
supposed : 25
*its* : 2
*without* : 4
aborts : 6
lost: : 1
reasons.) : 3
"PyErr_Clear()" : 7
pretending : 1
went : 14
wrong) : 1
"realloc()") : 1
"PyErr_NoMemory()" : 2
object-creating : 1
"PyLong_FromLong()") : 1
friends : 9
yours : 3
predeclared : 1
wisely : 1
"PyExc_TypeError" : 4
couldn't : 19
"PyExc_IOError") : 1
"PyExc_ValueError" : 3
*SpamError; : 1
("PyInit_spam()") : 1
PyInit_spam(void) : 3
PyModule_Create(&spammodule); : 3
SpamError : 1
PyErr_NewException("spam.error" : 1
Py_XINCREF(SpamError); : 1
"error" : 18
SpamError) : 1
Py_XDECREF(SpamError); : 1
Py_CLEAR(SpamError); : 1
"spam.error" : 2
"PyErr_NewException()" : 5
"NULL") : 11
"SpamError" : 2
retains : 5
intentional : 8
owned : 30
discarded : 42
Should : 30
"PyMODINIT_FUNC" : 3
below: : 9
(sts : 1
PyErr_SetString(SpamError : 1
"System : 2
failed"); : 1
Going : 1
pointers) : 1
"const : 23
*command") : 1
"PyArg_ParseTuple()": : 3
"spam.system()" : 2
"sts" : 1
"PyLong_FromLong()" : 6
Python!) : 1
void) : 1
"Py_RETURN_NONE" : 2
macro): : 1
"Py_None" : 18
genuine : 5
========================================================== : 7
promised : 2
"spam_system()" : 2
"method : 1
table": : 1
SpamMethods[] : 1
{"system" : 1
spam_system : 1
"Execute : 1
command."} : 1
("METH_VARARGS") : 1
"METH_VARARGS" : 5
"METH_VARARGS : 2
METH_KEYWORDS"; : 1
Python- : 1
"PyArg_ParseTuple()"; : 2
"METH_KEYWORDS" : 1
spammodule : 2
spam_doc : 1
per-interpreter : 9
SpamMethods : 1
"PyInit_name()" : 1
*name* : 305
non-"static" : 1
"PyInit_spam()" : 3
Python.) : 5
"PyModule_Create()" : 6
structures) : 1
abort : 20
satisfactorily : 1
"PyImport_Inittab" : 2
"PyImport_AppendInittab()" : 7
Py_Initialize : 3
(PyImport_AppendInittab("spam" : 1
PyInit_spam) : 1
"Error: : 2
in-built : 1
table\n"); : 1
Pass : 37
argv[0] : 1
Required : 15
Optionally : 20
alternatively : 9
deferred : 11
*pmodule : 1
PyImport_ImportModule("spam"); : 1
(!pmodule) : 1
'spam'\n"); : 1
"fork()" : 34
"exec()") : 1
caution : 3
"Modules/xxmodule.c" : 1
"xxmodule" : 1
*multi-phase : 1
initialization* : 1
(new : 3
3.5) : 4
"PyInit_spam" : 1
multi-phase : 37
extension: : 5
uses; : 1
(chapter : 2
Extensions) : 5
pertains : 5
Luckily : 5
("spammodule.c" : 1
"Modules/" : 3
"Modules/Setup.local" : 2
spammodule.o : 2
**make** : 2
toplevel : 20
'**make** : 1
Makefile' : 1
-lX11 : 1
concentrated : 1
useful: : 4
"callback" : 20
programmer; : 1
imaginable : 1
(I : 2
dwell : 1
"Modules/main.c" : 1
code.) : 5
(be : 1
it!) : 1
*my_callback : 1
my_set_callback(PyObject : 1
*dummy : 1
*result : 3
*temp; : 1
(PyArg_ParseTuple(args : 1
"O:set_callback" : 1
&temp)) : 1
(!PyCallable_Check(temp)) : 1
"parameter : 1
callable"); : 1
Py_XINCREF(temp); : 1
Py_XDECREF(my_callback); : 1
Dispose : 1
my_callback : 1
temp; : 1
Boilerplate : 1
flag; : 3
"Py_XINCREF()" : 6
increment/decrement : 4
*temp* : 1
tuple; : 6
arg; : 1
*arglist; : 2
123; : 1
arglist : 2
Py_BuildValue("(i)" : 2
PyObject_CallObject(my_callback : 2
arglist); : 2
Py_DECREF(arglist); : 2
pointer: : 1
"reference-count-neutral" : 1
"Py_DECREF()"-ed : 1
"new": : 1
brand : 7
(especially!) : 1
...use : 1
result.. : 1
Py_DECREF(result); : 3
integral : 24
Py_BuildValue("(l)" : 1
eventcode); : 1
placement : 6
"Py_DECREF(arglist)" : 1
strictly : 25
complete: : 2
"PyObject_Call()" : 7
*dict; : 1
Py_BuildValue("{s:i}" : 1
val); : 1
PyObject_Call(my_callback : 1
dict); : 1
Py_DECREF(dict); : 1
PyArg_ParseTuple(PyObject : 2
*arg : 5
*format : 32
*format* : 58
mistakes : 5
crash : 252
*borrowed* : 2
decrement : 21
"s#" : 14
ok; : 1
j; : 1
l; : 1
*s; : 1
size; : 9
PyArg_ParseTuple(args : 8
""); : 5
&s); : 2
Possible : 37
f('whoops!') : 1
"lls" : 1
&k : 1
&l : 1
longs : 6
"(ii)s#" : 1
&i : 1
&j : 1
&s : 1
&size); : 1
f((1 : 1
*file; : 1
*mode : 2
"r"; : 1
bufsize : 10
"s|si" : 1
&file : 1
&mode : 1
&bufsize); : 1
f('spam' : 2
'w') : 27
'wb' : 3
100000) : 1
v; : 1
"((ii)(ii))(ii)" : 1
&left : 1
&top : 1
&right : 1
&bottom : 1
&h : 1
&v); : 1
rectangle : 11
f(((0 : 1
300)) : 1
(10 : 4
Py_complex : 14
c; : 1
"D:myfunction" : 1
&c); : 1
myfunction(1+2j) : 1
PyArg_ParseTupleAndKeywords(PyObject : 2
*kwdict : 1
*kwdict* : 2
*kwlist* : 2
"NULL"-terminated : 7
parameters; : 7
Geoff : 3
Philbrick : 1
(philbrick@hks.com): : 1
keywdarg_parrot(PyObject : 1
*keywds) : 1
voltage; : 1
*state : 7
stiff"; : 1
*action : 1
"voom"; : 1
"Norwegian : 1
Blue"; : 1
{"voltage" : 1
"state" : 2
keywds : 1
"i|sss" : 1
&voltage : 1
&state : 1
&action : 1
&type)) : 1
printf("-- : 2
%i : 1
Volts : 1
it.\n" : 1
voltage); : 1
%s!\n" : 1
state); : 1
Py_RETURN_NONE; : 1
keywdarg_methods[] : 1
keywdarg_parrot() : 1
{"parrot" : 1
(PyCFunction)(void(*)(void))keywdarg_parrot : 1
METH_KEYWORDS : 4
"Print : 1
lovely : 1
skit : 2
output."} : 1
keywdargmodule : 1
"keywdarg" : 1
keywdarg_methods : 1
PyInit_keywdarg(void) : 1
PyModule_Create(&keywdargmodule); : 1
counterpart : 16
*Py_BuildValue(const : 2
output) : 17
internally) : 1
"None"; : 10
parenthesize : 3
Py_BuildValue("") : 1
Py_BuildValue("i" : 1
123) : 2
Py_BuildValue("iii" : 1
456 : 3
789) : 2
(123 : 4
Py_BuildValue("s" : 1
"hello") : 3
Py_BuildValue("y" : 1
b'hello' : 2
Py_BuildValue("ss" : 1
"hello" : 5
"world") : 2
('hello' : 1
'world') : 2
Py_BuildValue("s#" : 1
'hell' : 1
Py_BuildValue("y#" : 1
b'hell' : 1
Py_BuildValue("()") : 1
(123,) : 1
Py_BuildValue("(ii)" : 1
456) : 6
Py_BuildValue("(i,i)" : 1
Py_BuildValue("[i,i]" : 1
[123 : 1
456] : 1
Py_BuildValue("{s:i,s:i}" : 1
{'abc': : 1
'def': : 1
456} : 1
Py_BuildValue("((ii)(ii)) : 1
(ii)" : 1
6) : 18
(((1 : 1
4)) : 5
"new" : 14
"delete" : 2
essentially : 25
block's : 6
occupies : 4
*memory : 2
leak* : 1
re-use : 6
*using : 1
memory* : 1
dumps : 11
crashes : 83
leaks : 66
calculation : 35
prematurely : 4
premature : 5
undetected : 3
plenty : 2
leak : 130
long-running : 13
minimizes : 3
counting* : 1
*automatic : 1
(Sometimes : 1
"automatic" : 1
two.) : 1
(Another : 1
claimed : 7
however.) : 2
portably : 3
guarantees) : 1
Maybe : 11
weakness : 1
consist : 30
indirect) : 4
exposes : 52
"collect()" : 3
"Py_INCREF(x)" : 2
"Py_DECREF(x)" : 2
frees : 6
remains: : 2
Nobody : 2
"owns" : 1
object; : 61
*own : 1
owner : 43
transferred : 13
dispose : 6
reference: : 4
Forgetting : 1
*borrow* : 2
borrower : 2
disposed : 2
risks : 5
borrowing : 4
owning : 5
disposing : 2
seemingly : 5
responsibilities : 10
owner) : 1
ownership : 36
receiver : 6
picture : 4
exceptions: : 16
"PyDict_GetItem()" : 6
"PyDict_GetItemString()" : 2
borrow : 3
"PyImport_AddModule()" : 2
returns: : 3
borrows : 5
rule: : 4
"PyTuple_SetItem()" : 9
"PyList_SetItem()" : 8
"PyDict_SetItem()" : 3
"normal.") : 1
owns : 19
reference's : 2
harmless : 5
bug(PyObject : 2
*list) : 9
*item : 4
PyList_GetItem(list : 4
PyList_SetItem(list : 2
PyLong_FromLong(0L)); : 2
PyObject_Print(item : 3
BUG : 2
"list[0]" : 1
"list[1]" : 1
Looks : 3
Could : 4
"item" : 5
"bug()" : 2
bet : 1
list[0]" : 1
invalidating : 6
reads: : 1
no_bug(PyObject : 1
Py_INCREF(item); : 1
Py_DECREF(item); : 4
spent : 16
fail.. : 1
protecting : 3
"Py_BEGIN_ALLOW_THREADS" : 7
re-acquire : 1
"Py_END_ALLOW_THREADS" : 6
Py_BEGIN_ALLOW_THREADS : 3
...some : 1
call.. : 1
Py_END_ALLOW_THREADS : 3
dumps) : 1
"source:" : 1
("Pytype_Check()") : 1
("args" : 1
severe : 4
{...}" : 1
"__cplusplus" : 1
(all : 22
symbol) : 2
"collection" : 1
permits : 13
sight : 2
(without : 28
"static" : 5
course) : 5
visibility : 7
system; : 4
(AIX : 1
strategies : 13
Unices) : 1
Portability : 1
Function) : 1
*should* : 3
(pointers) : 1
Capsule : 10
(void*) : 1
Whichever : 1
"PyCapsule_New()" : 3
(const : 2
char*); : 1
strongly : 16
encourage : 8
Properly : 15
degree : 6
type-safety; : 1
feasible : 7
modulename.attributename : 1
"PyCapsule_Import()" : 4
Capsule's : 1
certainty : 2
puts : 16
burden : 5
exporting : 14
(just : 5
example!) : 1
pointers; : 1
"PySpam_System()" : 4
reality : 6
PySpam_System(const : 1
*command) : 3
way: : 17
PySpam_System(command); : 1
added: : 31
SPAM_MODULE : 2
"spammodule.h" : 3
"#define" : 4
array: : 4
*PySpam_API[PySpam_API_pointers]; : 1
*c_api_object; : 1
PySpam_API[PySpam_System_NUM] : 1
(void : 2
*)PySpam_System; : 1
c_api_object : 1
PyCapsule_New((void : 1
*)PySpam_API : 1
"spam._C_API" : 1
"_C_API" : 1
c_api_object) : 1
Py_XDECREF(c_api_object); : 1
"PySpam_API" : 1
"static"; : 1
bulk : 4
#ifndef : 2
Py_SPAMMODULE_H : 2
__cplusplus : 2
extern : 3
#endif : 22
PySpam_System_NUM : 1
PySpam_System_RETURN : 2
PySpam_System_PROTO : 1
Total : 6
PySpam_API_pointers : 1
spammodule.c : 1
PySpam_System : 2
PySpam_System_PROTO; : 1
#else : 6
spammodule's : 1
**PySpam_API; : 1
(*(PySpam_System_RETURN : 1
(*)PySpam_System_PROTO) : 1
PySpam_API[PySpam_System_NUM]) : 1
PyCapsule_Import : 1
import_spam(void) : 1
PySpam_API : 1
**)PyCapsule_Import("spam._C_API" : 1
(PySpam_API : 1
!defined(Py_SPAMMODULE_H) : 1
macro) : 6
"import_spam()" : 1
PyInit_client(void) : 1
PyModule_Create(&clientmodule); : 1
(import_spam() : 1
(files : 9
"Include/pycapsule.h" : 1
"Objects/pycapsule.c" : 1
distribution) : 3
metaphor : 5
"borrowing" : 1
correct: : 3
**does : 1
work** : 1
"old" : 2
A.M : 15
Kuchling : 20
Moshe : 8
Zadka : 7
exciting : 3
rewriting : 4
steady : 1
2.0; : 3
CVS : 25
paid : 1
SourceForge : 8
Contractual : 1
Obligations : 1
forward-compatible : 1
Probably : 5
1.6final : 1
2.0beta1 : 1
(September : 1
plan : 17
breakage : 10
straight : 13
September : 6
developed: : 1
submissions : 1
https://sourceforge.net/projects/python/ : 1
version-controlled : 1
inspected : 7
scalable : 1
people; : 2
fourfold : 1
increase : 44
large-scale : 1
attempted : 40
they'd : 2
filtered : 13
Peter : 26
Schneider-Kamp : 1
took : 8
K&R : 2
flurry : 2
checkins : 1
lasted : 1
week : 61
viewed : 14
"nice : 2
needed" : 1
shift : 17
SourceForge's : 4
resulted : 17
commented : 2
revised : 15
submitter : 1
bounced : 2
tracked : 36
measure : 30
cost: : 2
e-mail : 12
unhelpful : 2
Ka-Ping : 6
Yee : 4
screen-scraper : 1
pains : 1
agreement : 3
Developers : 6
vote : 3
+1 : 8
+0 : 2
patch; : 1
acceptance : 4
rejection : 1
indifferent : 1
slight : 8
slant : 1
voting : 1
advisory : 4
opinion : 2
He : 1
approve : 3
reject : 15
disagrees : 1
him : 1
Producing : 2
Discussions : 3
explode : 2
lengthy : 19
RFC : 83
draft : 7
continually : 2
accepting : 43
rejecting : 4
proposal : 18
"PEP : 1
Purpose : 6
Guidelines": : 1
editorial : 1
PEPS : 2
ranging : 4
201** : 1
"Lockstep : 1
Iteration" : 1
225 : 1
"Elementwise/Objectwise : 1
Operators" : 1
largest : 42
16-bit : 28
65,536 : 1
arrived : 5
countless : 1
often-stormy : 1
discussions : 6
Marc-André : 15
Lemburg : 14
100** : 1
Integration" : 1
"u"string"" : 1
"\uHHHH" : 1
*HHHH* : 1
4-digit : 4
0000 : 1
FFFF : 1
"\xHHHH" : 1
U+01FF : 1
"\777" : 1
"encode( : 1
[encoding] : 1
)" : 7
"'ascii'" : 3
"'utf-8'" : 27
"'iso-8859-1'" : 2
registering : 26
7-bit : 9
"sys.setdefaultencoding(encoding)" : 1
coerces : 7
encoding; : 6
"'a' : 2
u'bc'" : 1
"u'abc'" : 1
built-ins : 7
Unicode: : 1
"unichr(ch)" : 1
*ch* : 44
"ord(u)" : 1
*u* : 10
1-character : 6
"unicode(string : 1
encoding] : 1
errors] : 1
"errors" : 18
treatment : 11
"'strict'" : 20
"'ignore'" : 15
"'replace'" : 18
U+FFFD : 1
"exec" : 17
(It's : 3
built-ins; : 1
bug.) : 1
"unicodedata.category(u'A')" : 1
2-character : 1
'Lu' : 2
'L' : 9
'u' : 7
"unicodedata.bidirectional(u'\u0660')" : 1
'AN' : 2
U+0660 : 2
Arabic : 8
"codecs.lookup(encoding)" : 1
4-element : 2
"(encode_func : 1
decode_func : 1
stream_reader : 1
stream_writer)" : 1
*encode_func* : 2
2-tuple : 41
"(string : 1
length)" : 6
*length* : 38
*decode_func* : 1
opposite : 20
"(ustring : 1
*ustring* : 1
*stream_reader* : 1
*stream_reader(file_obj)* : 1
"readlines()" : 7
translate : 7
*stream_writer* : 1
*stream_writer(file_obj)* : 1
"writelines()" : 3
translating : 11
UTF-8: : 3
unistr : 2
u'\u0660\u2000ab : 1
(UTF8_encode : 1
UTF8_decode : 1
UTF8_streamreader : 1
UTF8_streamwriter) : 1
codecs.lookup('UTF-8') : 1
UTF8_streamwriter( : 1
open( : 2
'/tmp/output' : 3
'wb') : 11
output.write( : 1
output.close() : 2
UTF8_streamreader( : 1
repr(input.read()) : 1
input.close() : 1
SRE : 3
future-proofing : 1
workhorse : 1
criterion : 4
pull : 8
substring : 50
"filter()" : 19
scoping : 14
paragraph : 29
filter( : 1
substring=S: : 1
string.find(s : 2
substring) : 2
L) : 4
cleaner: : 1
S) : 2
form: : 26
expr : 30
sequence1 : 2
expr2 : 9
sequence2 : 2
exprN : 4
sequenceN : 2
"for"..."in" : 2
right; : 3
*condition* : 7
expr1 : 5
sequence1: : 2
sequence2: : 2
sequenceN: : 2
(condition): : 1
long: : 4
seq1 : 9
seq2 : 4
(1,2,3) : 1
(x,y) : 5
seq2] : 6
[('a' : 5
('b' : 19
('c' : 11
3)] : 9
grammar : 49
(https://www.haskell.org) : 1
Ewing : 3
argued : 2
endless : 4
up-to- : 1
long-requested : 2
"-=" : 5
"*=" : 6
lengthier : 2
"/=" : 3
"%=" : 3
"**=" : 3
"&=" : 4
"|=" : 7
"^=" : 3
">>=" : 3
"<<=" : 3
"__isub__()" : 1
"Number" : 5
Number: : 1
__iadd__(self : 1
increment): : 1
Number( : 1
increment) : 1
Number(5) : 1
n.value : 3
left-hand : 13
C-derived : 1
**awk** : 1
PHP : 1
Thomas : 48
Wouters : 10
string-manipulation : 1
front-end : 6
"strop" : 2
posed : 1
rewritten : 43
"string.replace()" : 1
eight : 14
permutations : 8
correspondingly : 10
'andrew'.capitalize() : 1
'Andrew' : 2
'hostname'.replace('os' : 1
'linux') : 1
'hlinuxtname' : 1
'moshe'.find('sh') : 1
Fools' : 1
joke : 1
notwithstanding : 2
pre-2.0 : 1
JPython : 1
"startswith()" : 3
"endswith()" : 3
"s.startswith(t)" : 1
"s[:len(t)] : 1
t" : 7
"s.endswith(t)" : 1
"s[-len(t):] : 1
mention : 17
"string.join()" : 1
"s.join(seq)" : 1
"string.join(seq : 1
s)" : 2
adjusts : 3
properties: : 8
reacts : 2
realise : 1
itself: : 9
SomeClass() : 2
instance.myself : 1
"instance" : 2
2; : 2
"'instance'" : 1
"myself" : 2
instance" : 5
decreased : 6
leaked : 12
tuning : 4
hoped : 3
benchmarking : 5
crucially : 1
destroys : 2
afford : 1
penalty : 8
suspect : 2
buggy : 10
"--without- : 2
cycle-gc" : 1
**configure** : 33
tackled : 2
Toby : 4
Kelsey : 1
Tiedemann : 1
Neil : 25
Schemenauer : 15
Lots : 5
way; : 4
"Reference : 1
"Finalization : 1
again" : 1
far-reaching : 5
conveniences : 2
"apply()" : 6
"apply(f : 2
kw)" : 1
*kw* : 11
"f(*args : 1
**kw)" : 1
clearer : 25
symmetrical : 2
f(*args : 6
**kw): : 3
directed : 9
">> : 1
redirection : 20
lacks : 15
restore : 54
>> : 10
sys.stderr : 15
"Warning: : 1
supplied" : 1
renamed : 50
othername" : 1
'%r' : 1
symmetry : 4
'%s' : 2
"'%r : 1
%s' : 41
'abc')" : 1
"'abc' : 1
abc" : 1
overrode : 2
"obj : 4
seq" : 2
*obj* : 110
*seq*; : 1
"IndexError" : 37
Earlier : 13
Deeply : 1
crash; : 1
Tismer : 2
rewrote : 3
recursed : 4
crashed; : 1
Jeremy : 13
Hylton : 7
a.append(a) : 1
b.append(b) : 1
"a==b" : 2
isomorphic : 1
"trashcan : 1
PR#7" : 1
"cmp(a,b)" : 1
"__cmp__()" : 5
swallowed : 5
Itanium : 2
Trent : 4
Mick : 1
(Confusingly : 1
"sys.platform" : 12
"'win32'" : 2
Win64 : 2
treats : 15
Itanium.) : 1
CE; : 1
https://pythonce.sourceforge.net/ : 1
Darwin/MacOS : 1
X; : 1
"configure : 10
--with- : 5
dyld : 1
--with-suffix=.x" : 1
README : 5
alleviate : 5
warts : 2
often-confusing : 1
"i=",i : 1
They're : 3
improperly : 7
"zip(seq1 : 1
...)" : 20
i-th : 1
"map(None : 2
seq2)" : 2
truncates : 8
"long()" : 3
"base" : 3
"int('123' : 2
10)" : 5
16)" : 2
291 : 1
"int(123 : 1
"can't : 2
"(major : 3
serial)" : 1
hypothetical : 6
2.0.1beta1 : 1
"(2 : 3
'beta' : 1
1)" : 16
*level* : 54
""alpha"" : 1
""beta"" : 1
""final"" : 1
"setdefault(key : 1
default)" : 3
"get()" : 38
"setdefault()" : 6
*default* : 54
dict.has_key( : 1
): : 6
dict[key] : 5
"return : 17
[])" : 4
runaway : 1
GPF. : 1
"sys.getrecursionlimit()" : 4
"sys.setrecursionlimit()" : 2
rough : 5
"Misc/find_recursionlimit.py" : 1
actively : 6
tightening : 2
"insert()" : 5
"L.append( : 2
1,2 : 1
"(1,2)" : 1
'append : 1
given' : 1
(1,2) : 2
forgiving : 2
arguments; : 10
modernizes : 1
multi-argument : 2
"Objects/listobject.c" : 1
"NO_STRICT_LIST_APPEND" : 1
behaviour; : 3
"socket.connect( : 2
('hostname' : 1
25) : 2
)()" : 2
'hostname' : 1
"socket.bind()" : 1
easy-going : 1
2.0alpha1 : 1
tightened : 3
erroneous : 11
stricter : 12
GvR : 7
backed : 15
face : 10
reaction : 2
deprecated; : 10
*will* : 3
"\x" : 3
consume : 38
"\x123456" : 1
"\x56" : 1
"AttributeError" : 82
"'Spam' : 1
'eggs'" : 1
"name : 3
'eggs' : 17
defined" : 3
"eggs" : 2
interchangeable : 10
large-file : 1
GiB; : 1
"tell()" : 9
subtract : 6
offsets : 47
it'll : 5
intuitively : 3
"3L : 1
'abc'" : 1
'abcabcabc' : 1
"(0,1,2,3)[2L:4L]" : 1
(2,3) : 2
"seek()" : 10
("%d" : 1
"%i" : 5
"%x" : 7
""%d" : 1
2L**64" : 1
"18446744073709551616" : 1
subtlest : 1
annoyed : 2
chop : 3
"str(longval)[:-1]" : 1
lose : 16
Taking : 3
"%.17g" : 1
"sprintf()" : 4
"%.12g" : 1
"repr(8.1)" : 1
"'8.0999999999999996'" : 1
str(8.1) : 1
"'8.1'" : 1
removed; : 7
"exceptions" : 1
translated : 41
Barry : 46
Warsaw : 26
1.5.x : 1
Fulton's : 1
ExtensionClass : 1
pleased : 1
ExtensionClasses : 1
type(obj) : 5
myExtensionClass" : 1
natural : 33
myExtensionClass)" : 1
"Python/importdl.c" : 1
#ifdefs : 1
reorganised : 1
"importdl.c" : 1
"Python/dynload_*.c" : 1
cleanup: : 1
"my*.h" : 1
Include/ : 1
hacks; : 1
they've : 7
Vladimir : 8
Marangozov's : 1
long-awaited : 2
malloc : 1
completed : 64
"Include/pymem.h" : 1
"Include/objimpl.h" : 1
hammered : 1
'patches' : 1
'python-dev' : 2
Recent : 6
GUSI : 1
user-space : 4
"pth" : 1
kernel : 53
contention; : 1
contention : 2
threaded : 22
unthreaded : 2
version; : 8
10% : 28
Yakov : 1
Markovitch : 1
2.0's : 3
limiting : 4
source; : 6
Charles : 9
G : 23
Waldman : 1
"2**16" : 1
"2**32" : 7
Three : 24
"PyModule_AddObject()" : 7
"PyModule_AddIntConstant()" : 2
"PyModule_AddStringConstant()" : 2
"PyOS_getsig()" : 2
"PyOS_setsig()" : 2
affair : 1
arduous : 1
ritual : 1
Makefiles : 2
faced : 3
wildly : 1
differing : 15
varied : 4
administering : 1
chore : 3
SIG : 4
shepherded : 2
tarball : 5
""python : 2
install"" : 1
non-default : 8
"1.0" : 16
py_modules : 2
["module1" : 1
"module2"]) : 1
["package" : 1
"package.subpackage"]) : 1
case; : 3
expat_extension : 2
Extension('xml.parsers.pyexpat' : 1
[('XML_NS' : 1
None)] : 4
'extensions/expat/xmltok' : 1
'extensions/expat/xmlparse' : 1
'extensions/pyexpat.c' : 1
'extensions/expat/xmltok/xmltok.c' : 1
'extensions/expat/xmltok/xmlrole.c' : 1
"PyXML" : 1
"0.5.4" : 1
=[ : 1
"sdist" : 3
sdist"' : 1
"bdist_rpm" : 2
"bdist_wininst" : 6
".pkg" : 1
stages : 5
*Distributing : 1
Modules* : 1
joins : 2
"xmllib" : 3
Mullender : 2
1.5.2's : 1
common: : 2
(version : 5
XML) : 3
event-driven : 5
similarities : 2
(Document : 1
Model) : 1
tree-based : 2
nodes : 157
traversed : 13
stripped-down : 1
"xml" : 14
interfaces; : 1
"startElement()" : 4
"endElement()" : 3
"characters()" : 1
resident : 3
huge : 7
"hamlet.xml" : 1
sax : 2
SimpleHandler(sax.ContentHandler): : 1
startElement(self : 1
attrs): : 4
'Start : 1
element:' : 4
attrs.keys() : 1
endElement(self : 1
'End : 1
sax.make_parser() : 1
SimpleHandler() : 1
parser.setContentHandler( : 1
parser.parse( : 1
'hamlet.xml' : 1
http://pyxml.sourceforge.net/topics/howto/xml-howto.html : 1
"Document" : 22
"Element" : 45
children : 83
traverse : 22
rearranging : 6
subtrees : 3
"<tag1>"..."</tag1>" : 1
"parse()" : 24
"parseString()" : 5
tree: : 10
xml.dom : 6
minidom.parse('hamlet.xml') : 1
"doc" : 6
"Text" : 9
"Node" : 19
"toxml()" : 5
own; : 1
Continuing : 6
2-line : 1
perslist : 1
doc.getElementsByTagName( : 1
'PERSONA' : 1
perslist[0].toxml() : 1
perslist[1].toxml() : 1
*Hamlet* : 1
<PERSONA>CLAUDIUS : 1
king : 3
Denmark : 1
</PERSONA> : 1
<PERSONA>HAMLET : 1
son : 1
nephew : 1
king.</PERSONA> : 1
"doc.documentElement" : 1
nodes: : 2
doc.documentElement : 1
root.removeChild( : 1
root.childNodes[0] : 3
Move : 74
root.appendChild( : 1
(originally : 3
child) : 4
20th : 1
root.insertBefore( : 1
root.childNodes[20] : 1
Interest : 2
XML-related : 1
SIG's : 1
https://www.python.org/community/sigs/current/xml-sig : 1
0.6.0 : 1
strict : 52
superset : 11
4DOM : 1
FourThought : 1
xmlproc : 1
Lars : 13
Marius : 2
Garshol : 1
"sgmlop" : 1
accelerator : 9
bugfixes : 29
library; : 5
"ConfigParser" : 23
"chunk : 1
wave" : 1
patch-by-patch : 1
Brian : 27
Gallew : 1
encrypts : 2
"socket.ssl(socket : 1
keyfile : 4
certfile)" : 1
"httplib" : 8
"https://" : 1
HTTP/1.1 : 59
Backward : 3
pipelining : 1
"Tkinter" : 7
7.x : 1
dropped : 34
"create_line" : 1
"create_polygon" : 1
Oliver : 1
Andrich's : 1
partially : 26
funded : 4
Hewlett : 1
Packard : 1
descriptions; : 1
"atexit": : 2
"sys.exitfunc" : 2
"atexit.register()" : 4
(Contributed : 2161
Montanaro.) : 5
"encodings" : 4
"unicodedata": : 1
"filecmp": : 1
Supersedes : 1
"cmp" : 2
"cmpcache" : 2
MacMillan : 1
Zadka.) : 1
"gettext": : 1
(I18N) : 3
localization : 4
(L10N) : 3
(Integrated : 1
Martin : 83
von : 41
Löwis : 23
Funk : 2
Henstridge.) : 1
"linuxaudiodev": : 1
"/dev/audio" : 2
twin : 1
"sunaudiodev" : 2
Bosch : 1
Hylton.) : 4
"mmap": : 2
memory-mapped : 8
Kuchling.) : 1
"pyexpat": : 1
Prescod.) : 1
"robotparser": : 1
"robots.txt" : 18
spiders : 2
politely : 1
fetchability : 1
"tabnanny": : 1
module/script : 1
Peters.) : 12
"UserString": : 1
"webbrowser": : 1
*BROWSER* : 1
(Originally : 4
Raymond's : 1
"Tools/idle/BrowserControl.py" : 1
Fred.) : 1
"_winreg": : 1
"_winreg" : 6
adaptation : 4
Tutt : 1
"zipfile": : 2
ZIP-format : 5
produced : 101
**PKZIP** : 1
DOS/Windows : 2
**zip** : 3
**gzip**-format : 3
Ahlstrom.) : 1
"imputil": : 1
"ihooks" : 5
(Implemented : 39
dev : 5
way.) : 1
0.6 : 4
auto-indentation : 1
settable : 7
adapts : 6
largely : 15
vanilla : 1
line/column : 2
keystroke : 7
("Alt-F5") : 1
("F5") : 1
("Ctrl-F5") : 1
"stdwin" : 1
gone; : 4
"lib-old" : 4
subdirectory: : 3
"dump" : 2
"find" : 3
"grep" : 2
"packmail" : 1
"poly" : 1
"util" : 1
"whatsound" : 1
"zmod" : 1
thank : 9
drafts : 9
article: : 10
Bolen : 1
Gregg : 1
Hauser : 1
Detlef : 2
Lannert : 2
Aahz : 3
Maruch : 1
Marangozov : 3
Tobias : 1
Polzin : 1
Russ : 1
Schmidt : 1
3000" : 1
"Py3K" : 1
*intentionally : 1
incompatible* : 1
December : 4
2008 : 17
digesting : 1
annoyances : 3
cruft : 1
constraints : 19
"Misc/NEWS" : 7
wealth : 1
trip : 3
3105**) : 1
Old: : 5
2*2 : 1
New: : 6
2*2) : 1
Trailing : 7
suppresses : 9
print(x : 2
end=" : 14
Appends : 4
Prints : 13
>>sys.stderr : 1
"fatal : 1
error" : 7
print("fatal : 1
file=sys.stderr) : 9
print((x : 1
<" : 1
2**32 : 2
"> : 1
possibilities!" : 1
sep="") : 1
produces: : 1
<4294967296> : 1
"softspace" : 2
"print : 5
"A\n" : 1
"B"" : 1
""A\nB\n""; : 1
"print("A\n" : 1
"B")" : 1
""A\n : 1
B\n"" : 1
Initially : 11
retrain : 1
fingers : 1
"2to3" : 6
source-to-source : 2
non-issue : 1
"views" : 1
"k : 9
d.keys(); : 1
k.sort()" : 1
sorted(d)" : 1
efficient) : 1
"dict.iterkeys()" : 2
"dict.iteritems()" : 2
"dict.itervalues()" : 2
"list(map(...))" : 1
(especially : 5
"lambda") : 1
wasteful) : 1
"itertools.zip_longest()" : 3
"map(func : 3
*sequences)" : 1
"list(map(func : 1
itertools.zip_longest(*sequences)))" : 1
"xrange()" : 5
comparisons: : 3
("<" : 6
">") : 3
meaningful : 33
''" : 1
"0 : 29
"len : 1
len" : 2
"None : 1
corollary : 1
incomparable : 1
"builtin.sorted()" : 1
*cmp* : 7
N.B : 2
*reverse* : 12
"keyword- : 1
only" : 1
"cmp()" : 3
"(a : 4
"cmp(a : 2
b)".) : 1
237**: : 1
"long" : 12
"int"; : 1
238**: : 2
"1/2" : 2
"1//2" : 2
truncating : 9
existed : 14
2.2.) : 1
"sys.maxint" : 3
"sys.maxsize" : 12
practical : 25
conforms : 24
"natural" : 1
strips : 11
(Use : 5
Octal : 8
"0720"; : 1
"0o720" : 2
knew : 3
*text* : 61
*data* : 158
Unicode; : 2
*encoded* : 1
(ASCII) : 1
"UnicodeDecodeError" : 17
value-specific : 1
sad : 1
faces : 1
unencoded : 4
"unicode" : 10
"u"..."" : 1
"b"..."" : 2
"bytes.decode()" : 13
"bytes(s : 1
encoding=...)" : 2
"str(b : 1
Nearly : 1
"collections.MutableSequence" : 2
literally : 6
"'\U'" : 4
"'\u'" : 4
"r'\u20ac'" : 1
"ur'\u20ac'" : 1
"euro" : 1
literals; : 3
euro : 2
"'\u20ac'" : 1
3.0.) : 2
"basestring" : 7
warrant : 2
below) : 41
occurrence : 41
(still : 1
memory) : 5
disk) : 1
(opened : 3
argument) : 26
incorrect : 115
loudly : 1
(text : 4
binary) : 5
platform-dependent : 17
Unixy : 1
"LANG" : 8
platform- : 12
locale-related : 1
UTF-8; : 1
encoding-aware : 1
unicode-only : 1
"io.TextIOBase") : 1
"io.TextIOBase.buffer" : 1
(Unicode) : 5
Unicode.) : 1
work- : 1
"os.listdir()" : 13
"os.getcwdb()" : 3
decoded : 105
interpretable : 4
rerunning : 2
3138**: : 1
non-printable : 1
3120**: : 1
3131**: : 1
Non-ASCII : 4
(However : 3
contributor : 4
comments.) : 1
"StringIO" : 12
"cStringIO" : 2
*syntactic* : 1
3107**: : 1
standardized : 13
introspected : 7
experimentation : 7
3102**: : 1
occurring : 22
3104**: : 1
non-global) : 1
3132**: : 1
Iterable : 9
*rest : 2
some_sequence" : 1
"*rest : 1
stuff" : 3
"rest" : 6
empty) : 15
range(5) : 1
*rest* : 11
comprehensions: : 2
"{k: : 2
stuff}" : 2
"dict(stuff)" : 1
274** : 1
vindicated : 1
"{1 : 1
2}" : 1
supported; : 5
"{x : 1
"set(stuff)" : 1
(already : 3
2.6) : 4
("0720") : 1
"0b1010" : 1
"bin()" : 7
"bytes()" : 9
3109** : 1
3134**: : 3
"raise : 15
[*expr* : 1
[from : 1
*expr*]]" : 1
(Since : 2
actually.) : 1
(2.6 : 1
already.) : 1
*exc* : 19
*var* : 14
3110** : 2
3115**: : 1
Metaclass : 3
__metaclass__ : 2
C(metaclass=M): : 2
module-global : 2
"__metaclass__" : 2
crutch : 1
"object".) : 2
"[.. : 2
*item1* : 1
*item2* : 2
(*item1* : 1
...)]" : 2
semantics: : 3
*ellipsis* : 1
(Previously : 3
slices.) : 1
." : 1
mere : 2
grammar.) : 1
3113**: : 1
"def : 10
foo(a : 7
(b : 3
c)): : 1
b_c): : 1
b_c" : 1
backticks : 1
"<>" : 4
keyword; : 2
(Fortunately : 1
2.x.) : 1
"exec(f)" : 1
"exec(f.read())" : 1
"l" : 13
"u" : 17
"U" : 8
.[*module*] : 1
*name*" : 1
328**) : 2
Classic : 4
presumably : 8
reminds : 1
back-ported : 2
descriptions : 29
enhances : 2
"format()" : 44
support) : 6
deprecating : 4
optional.) : 1
"b'...'" : 1
"b"""..."""" : 1
"br"..."") : 1
"io.open()" : 12
*newline* : 33
*closefd* : 5
"IOError" : 24
"f.buffer" : 1
beware : 5
operations) : 4
"buffer()" : 1
"memoryview()" : 3
(mostly) : 3
plays : 2
prominent : 1
"collections.MutableMapping" : 1
"numeric : 1
tower" : 1
"numbers.Rational" : 4
exhaustively : 1
3108** : 2
capsule : 28
review: : 1
"gopherlib" : 2
"md5" : 4
(replaced : 5
"hashlib") : 1
4** : 1
Irix : 2
BeOS : 2
11**) : 1
"bsddb3" : 2
proved : 4
instability : 1
Berkeley : 3
DB's : 1
schedule : 18
https://www.jcea.es/programacion/pybsddb.htm : 1
disobeyed : 1
+-------------------------+-------------------------+ : 9
|=========================|=========================| : 1
_winreg : 1
copy_reg : 1
copyreg : 2
SocketServer : 1
markupbase : 1
_markupbase : 1
repr : 68
test.test_support : 1
test.support : 7
accelerated : 8
extension; : 4
"cPickle" : 7
falls : 51
("anydbm" : 1
"dbhash" : 1
"dumbdbm" : 4
"gdbm" : 10
"whichdb") : 1
("HTMLParser" : 1
"htmlentitydefs") : 1
("httplib" : 1
"BaseHTTPServer" : 1
"CGIHTTPServer" : 1
"SimpleHTTPServer" : 1
"Cookie" : 16
"cookielib") : 1
"Tkinter"-related : 1
"turtle") : 2
audience : 5
("urllib" : 1
"urllib2" : 4
"urlparse" : 5
"robotparse") : 1
("xmlrpclib" : 1
"DocXMLRPCServer" : 8
"SimpleXMLRPCServer") : 1
3108**: : 1
Killed : 1
"sets" : 5
"sys.exitfunc()" : 3
"sys.exc_clear()" : 2
"sys.exc_type" : 2
"sys.exc_value" : 2
"sys.exc_traceback" : 2
"sys.last_type" : 2
remain.) : 1
"fromfile()" : 2
"tofile()" : 2
"'c'" : 13
typecode : 8
"'u'" : 16
"sequenceIncludes()" : 1
"isCallable()" : 1
"thread" : 7
"acquire_lock()" : 1
"release_lock()" : 1
"acquire()" : 24
"release()" : 24
"jumpahead()" : 1
"os.tmpnam()" : 1
"os.tempnam()" : 1
"os.tmpfile()" : 1
favor : 60
"tokenize.tokenize()" : 4
generate_tokens : 1
"string.letters" : 4
("string.lowercase" : 1
"string.uppercase") : 1
"string.ascii_letters" : 2
attractively : 2
"constants".) : 1
Renamed : 5
"__builtin__" : 2
(removing : 1
's') : 1
"__builtins__" : 15
time.) : 1
3101** : 4
352**: : 1
(directly : 11
recommendation : 15
*requirement* : 1
catch.) : 1
utterly : 2
"Exception"; : 1
"StandardError" : 3
3109**: : 1
*Exception*(*args*)" : 1
*Exception* : 1
*args*" : 1
traceback; : 4
*have* : 2
"__traceback__" : 12
3110**: : 1
*SomeException* : 2
*variable*" : 2
Moreover : 25
*variable* : 5
cases: : 10
block; : 5
*secondary* : 1
handled) : 1
"__context__" : 16
SecondaryException() : 1
primary_exception : 1
*primary_exception* : 1
caught) : 2
"__cause__" : 16
walks : 3
(Java : 1
behavior.) : 3
removed) : 5
"error : 1
193" : 1
"%1 : 1
application" : 3
non-English : 1
"NotImplemented" : 45
"unbound : 1
"__getslice__()" : 1
"__setslice__()" : 1
"__delslice__()" : 1
"a[i:j]" : 2
translates : 10
"a.__getitem__(slice(i : 1
j))" : 3
"__setitem__()" : 15
"__delitem__()" : 8
3114**: : 1
"__oct__()" : 2
"__hex__()" : 2
"__index__()" : 51
"__members__" : 7
"__methods__" : 2
"func_X" : 1
"__X__" : 1
wit : 1
"func_closure" : 1
"func_code" : 1
"func_defaults" : 1
"func_dict" : 1
"func_doc" : 1
"func_globals" : 1
"func_name" : 2
"__closure__" : 2
"__code__" : 6
"__defaults__" : 2
"__globals__" : 3
"__nonzero__()" : 2
"__bool__()" : 11
3135**: : 1
3111**: : 1
"raw_input()" : 2
"input()" : 12
"EOFError" : 24
"eval(input())" : 1
halfway : 2
"round(2.5)" : 1
"3".) : 1
"round(x[ : 2
n])" : 2
"x.__round__([n])" : 1
Moved : 8
"intern()" : 3
"sys.intern()" : 2
Removed: : 1
args)" : 1
"f(*args)" : 2
"callable()" : 3
"callable(f)" : 1
"isinstance(f : 2
collections.Callable)" : 1
"operator.isCallable()" : 2
"coerce()" : 1
"execfile()" : 4
"execfile(fn)" : 1
"exec(open(fn).read())" : 1
"file" : 35
"reduce()" : 5
"functools.reduce()" : 11
"reload()" : 8
"imp.reload()" : 2
"dict.has_key()" : 1
RISCOS : 2
Tru64 : 1
3118**: : 1
3121**: : 1
3123**: : 1
"PyNumber_Coerce()" : 1
"PyNumber_CoerceEx()" : 1
"PyMember_Get()" : 1
"PyMember_Set()" : 1
"PyImport_ImportModuleNoBlock()" : 5
"PyImport_ImportModule()" : 10
(returning : 3
"nb_nonzero" : 1
"nb_bool" : 2
"METH_OLDARGS" : 3
"WITH_CYCLE_GC" : 1
generalizations : 4
pystone : 6
special-casing : 3
room : 9
(Prerequisite:) : 1
Port : 79
2.(x+1) : 1
(Still : 1
2.6:) : 1
translator : 2
tool.) : 1
3.0; : 3
contorted : 1
"cleanup : 1
release" : 1
aimed : 6
irregularities : 1
dark : 5
corners : 1
amazing : 1
longest : 12
I'll : 17
summary: : 2
*properties* : 2
*slots* : 3
safeguard : 1
typos : 5
voiced : 1
concern : 7
Sure : 1
lend : 2
weren't : 11
Personally : 1
esoteric : 2
teaching : 1
corner : 55
paint : 2
broad : 6
strokes : 2
"Related : 1
Links" : 1
2.2's : 4
old-style : 27
divergence : 1
forever; : 1
"object": : 1
C(object): : 6
(self): : 9
253** : 5
clever : 9
<type : 3
int('123') : 1
"file()" : 1
"lock()" : 3
LockableFile(file): : 1
length=0 : 1
start=0 : 2
whence=0): : 1
fcntl.lockf(self.fileno() : 1
whence) : 1
now-obsolete : 1
"posixfile" : 2
emulated : 8
"LockableFile" : 1
inspecting : 12
*descriptors* : 4
formalized : 1
exotic : 4
own: : 2
"__get__(object)" : 1
retrieves : 25
*object* : 72
"__set__(object : 1
value)" : 34
"__delete__(object : 1
"obj.x" : 2
obj.__class__.x : 1
descriptor.__get__(obj) : 1
"descriptor.__get__()" : 1
resemble : 5
f(arg1 : 2
arg2): : 5
g(cls : 1
classmethod(g) : 1
("def : 1
f" : 3
"defstatic : 1
f()" : 1
that) : 3
yet; : 3
novel : 6
Eiffel-style : 1
preconditions : 3
postconditions : 2
eiffel : 1
eiffelmethod : 1
f(self : 2
pre_f(self): : 1
post_f(self): : 1
eiffelmethod(f : 1
pre_f : 1
post_f) : 1
"eiffelmethod()" : 2
wizards : 6
ZODB : 1
(diagram : 1
Rossum): : 1
save(self): : 2
smart; : 1
"D.save()" : 2
"D" : 9
"save()" : 6
"C.save()" : 2
"C"'s : 1
New-style : 4
graphs.) : 1
visited : 15
["D" : 2
"A"] : 2
Scan : 4
duplicated : 15
dropping : 11
Following : 19
superclasses : 4
reimplement : 2
"super(class : 1
obj)" : 3
superclass : 18
superclass; : 1
"D"'s : 1
(B,C): : 1
.save() : 1
super(D : 1
self).save() : 1
Save : 33
D's : 1
unbound : 32
"super(class)" : 1
"super(class1 : 1
class2)" : 1
fair : 5
"__getattr__()"; : 1
"obj.parent" : 1
"obj.get_parent" : 1
"__getattr__(attr_name)" : 1
"obj.foo" : 1
"__getattribute__(attr_name)" : 1
trap : 14
"__repr__()" : 32
"__coerce__()" : 2
loss : 38
"property" : 12
"size" : 31
get_size : 1
set_size : 2
size): : 1
'delete : 1
attribute' : 2
property(get_size : 1
"Storage : 1
instance") : 1
"__getattr__()"/"__setattr__()" : 1
Accesses : 1
constrain : 3
dynamic; : 1
"obj.new_attr=1" : 1
('template' : 1
'name') : 2
obj.template : 3
'Test' : 1
obj.newattr : 1
'newattr' : 1
whetted : 1
appetite : 1
252** : 3
"Making : 1
Classes" : 1
"Subtyping : 1
Types" : 1
subtype : 114
meta-types : 1
Corp : 1
authority: : 1
"Objects/typeobject.c" : 1
resort : 4
avenues : 1
python-list : 1
callers : 12
"for : 22
obj" : 2
__getitem__(self : 10
index): : 5
<next : 1
item> : 1
"obj[5]" : 1
sixth : 5
over; : 1
*index* : 24
meaningless : 5
"file[5]" : 1
"iter(obj)" : 4
"iter(C : 2
sentinel)" : 2
*sentinel* : 4
iter(L) : 5
<iterator : 1
0x8116870> : 1
i.next() : 4
[1,2,3]" : 2
Wherever : 3
a,b,c : 3
keys: : 10
{'Jan': : 2
'Feb': : 2
'Mar': : 2
'Apr': : 2
'May': : 2
'Jun': : 2
'Jul': : 2
'Aug': : 2
'Sep': : 2
'Oct': : 2
'Nov': : 2
'Dec': : 2
12} : 2
m: : 7
m[key] : 1
Mar : 7
Sep : 2
Jun : 8
Jul : 4
Jan : 60
Nov : 9
"iterkeys()" : 4
"itervalues()" : 3
"iteritems()" : 3
"key : 6
dict" : 2
"dict.has_key(key)" : 2
iterator; : 5
234** : 1
Written : 39
GvR; : 1
crew : 3
Peters : 32
interacts : 7
You're : 6
doubtless : 5
thrown : 15
resume : 26
provide; : 3
resumable : 4
generate_ints(N): : 3
range(N): : 3
generators" : 2
generator's : 36
suspended : 23
preserved : 37
"try"..."finally" : 3
255** : 5
exceptions.) : 2
"generate_ints()" : 3
generator: : 5
gen : 7
generate_ints(3) : 3
<generator : 3
0x8117f90> : 2
gen.next() : 8
generate_ints : 4
equally : 13
generate_ints(5)" : 3
"a,b,c : 2
generate_ints(3)" : 3
procession : 3
5" : 5
"self.count" : 6
messier : 5
"Lib/test/test_generators.py" : 4
in-order : 6
inorder(t): : 3
t: : 8
inorder(t.left): : 3
t.label : 3
inorder(t.right): : 3
N-Queens : 3
(placing : 4
$N$ : 2
queens : 3
$NxN$ : 4
chess : 3
board : 6
queen : 5
threatens : 3
another) : 5
Knight's : 3
route : 6
knight : 3
chessboard : 3
twice) : 3
Icon : 13
(https://www.cs.arizona.edu/icon/) : 2
"An : 2
https://www.cs.arizona.edu/icon/docs/ipd266.htm : 2
sentence : 11
"Store : 2
neighboring : 3
harbor" : 2
find("or" : 2
sentence)) : 2
write(i) : 2
"find()" : 18
found: : 7
23 : 36
33 : 21
nearly : 21
compulsory; : 2
Icon's : 2
iterator) : 3
Magnus : 2
Lie : 2
Hetland : 2
Implemented : 34
annoyance : 5
"'abc'[1L:]" : 1
'slice : 1
int' : 1
(Using : 2
discouraged : 22
triggering : 13
"OverflowError" : 61
1234567890123 : 1
1234567890123L : 1
18446744073709551616L : 1
237** : 4
controversial : 2
heralds : 1
flaw : 4
Currently : 66
presented : 27
truncated : 49
"3/2" : 1
"(-1)/2" : 1
-0.5 : 1
controversy : 1
*really* : 1
erupted : 1
storm : 1
acidly : 1
sarcastic : 1
argue : 1
stick : 10
counter-arguments.) : 1
"True : 3
division" : 7
non-programmers : 1
3/2 : 1
1/4 : 1
"Floor : 1
operands; : 1
"Classic : 1
"/"; : 1
introduces: : 1
C++'s : 2
symbol.) : 1
"1.0 : 2
2.0" : 1
2.2; : 2
"__truediv__()" : 4
"__floordiv__()" : 3
"-Q : 1
warn" : 1
issued : 40
warning; : 1
Rossum. : 1
UCS-2 : 3
UCS-4 : 5
supplying : 29
unicode=ucs4" : 1
"--disable-unicode" : 1
support.) : 1
"wide : 1
Python") : 2
U+000000 : 1
U+110000 : 1
"unichr()" : 2
"narrow : 1
65535 : 3
261** : 2
'wide' : 2
characters"; : 1
"encode()" : 15
"decode([*encoding*])" : 1
strings) : 28
"decode()" : 16
decodes : 19
uu- : 1
MIME's : 1
"""Here : 1
overly : 5
repetitive : 5
s.encode('zlib') : 1
'x\x9c\r\xc9\xc1\r\x80 : 1
\x10\x04\xc0?Ul...' : 1
data.decode('zlib') : 1
'Here : 1
verbose,\nand : 1
text.\n' : 1
s.encode('uu') : 1
666 : 1
<data> : 4
M2&5R92!I<R!A(&QE;F=T:'D@<&EE8V4@;V8@<F5D=6YD86YT+"!O=F5R;'D@ : 1
>=F5R8F]S92P*86YD(')E<&5T:71I=F4@=&5X="X* : 1
"sheesh".encode('rot-13') : 1
'furrfu' : 1
"__unicode__()" : 3
Marc- : 1
André : 1
Prescod : 3
nested_scopes" : 1
"What's : 11
2.1" : 1
document; : 4
intuitive : 10
expectations : 6
work: : 10
g(value): : 2
g(value-1) : 2
"g()" : 4
(how : 2
interior : 5
this?) : 2
clumsier : 2
find(self : 2
'name'" : 2
filter(lambda : 2
name=name: : 2
self.list_attribute) : 2
suffers : 3
"name=name" : 2
Put : 21
dissection : 2
unlikely : 17
illegal : 42
unknowable : 2
'x=2' : 2
g(): : 2
poor : 8
anyway) : 3
227** : 2
Statically : 5
"xmlrpclib" : 11
channels : 40
O'Reilly : 6
headlines : 1
channel: : 1
xmlrpclib : 2
xmlrpclib.Server( : 1
'http://www.oreillynet.com/meerkat/xml-rpc/server.php') : 1
s.meerkat.getChannels() : 1
[{'id': : 1
'title': : 6
'Freshmeat : 1
Daily : 1
News'} : 1
{'id': : 3
190 : 2
'32Bits : 1
Online'} : 1
4549 : 1
'3DGamers'} : 1
channel : 54
s.meerkat.getItems( : 1
{'channel': : 1
4} : 7
'items' : 2
[{'link': : 1
'http://freshmeat.net/releases/52719/' : 1
'description': : 7
'A : 9
XSL : 1
FO.' : 1
'html2fo : 1
(Default)'} : 1
"SimpleXMLRPCServer" : 10
http://xmlrpc.scripting.com/ : 1
HMAC : 18
2104** : 2
Gerhard : 6
Häring.) : 3
pseudo-sequences : 1
mnemonic : 8
memberst_mtime : 1
"tm_year" : 2
"fstat()" : 6
"statvfs()" : 4
"fstatvfs()" : 2
"localtime()" : 28
"gmtime()" : 23
"file_size : 2
os.stat(filename)[stat.ST_SIZE]" : 1
os.stat(filename).st_size" : 1
Nick : 67
Mathewson : 2
profiler : 28
reworked : 10
corrected : 4
Jr : 2
IPv6; : 1
enable-ipv6" : 1
Jun-ichiro : 1
"itojun" : 1
Hagino.) : 1
"q" : 4
"Q" : 4
"help(object)" : 1
Yee's : 1
module.) : 7
"re.sub()" : 13
"re.split()" : 9
speeds : 17
ranges : 25
"finditer()" : 6
non-overlapping : 10
(SRE : 1
BIGCHARSET : 1
Löwis.) : 9
2487** : 1
"Secure : 2
TLS" : 1
encrypt : 2
traffic : 10
transport : 132
agent : 14
authentication : 112
Piers : 2
Lauder : 2
extensions: : 7
NAMESPACE : 1
2342** : 2
SORT : 1
GETACL : 1
SETACL : 1
Anthony : 46
Baxter : 4
Michel : 11
Pelletier.) : 1
"rfc822" : 4
2822** : 12
822** : 10
"rfc2822".) : 1
Mailman.) : 1
"Differ" : 5
"delta") : 1
"ndiff()" : 6
"restore()" : 1
delta : 32
(Grunt : 1
Goodger : 3
ndiff.py : 1
generatorization.) : 1
"ascii_letters" : 3
"ascii_lowercase" : 2
"ascii_uppercase" : 2
A-Za-z : 1
(Reported : 5
person; : 1
Jr.) : 4
MIME- : 4
"MimeTypes" : 2
"Timer" : 7
scheduling : 29
Itamar : 1
Shtull-Trauring.) : 1
hacking : 2
Python-based : 2
"PyEval_SetProfile()" : 5
"PyEval_SetTrace()" : 5
"sys.setprofile()" : 5
"sys.settrace()" : 6
"PyInterpreterState_Head()" : 1
"PyInterpreterState_Next()" : 1
walk : 10
"PyInterpreterState_ThreadHead()" : 1
"PyThreadState_Next()" : 1
states : 26
Beazley.) : 1
misuses : 1
Rename : 34
"Py_TPFLAGS_GC()" : 1
"PyTPFLAGS_HAVE_GC()" : 1
"PyObject_GC_New()" : 6
"PyObject_GC_NewVar()" : 5
"PyObject_GC_Del()" : 6
deallocate : 5
"PyObject_GC_Init()" : 1
"PyObject_GC_Track()" : 6
"PyObject_GC_Fini()" : 1
"PyGC_HEAD_SIZE()" : 1
"PyObject_AS_GC()" : 1
"PyObject_FROM_GC()" : 1
"et" : 4
"es" : 5
M.-A : 2
section.) : 2
"PyArg_UnpackTuple()" : 5
"METH_O" : 5
untyped : 1
officially : 16
"PyOS_snprintf()" : 4
"PyOS_vsnprintf()" : 3
"snprintf()" : 4
"vsnprintf()" : 4
lib : 2
"vsprintf()" : 1
overruns : 2
Lemburg.) : 3
"_PyTuple_Resize()" : 1
unused : 61
scattered : 3
527 : 1
683 : 1
139 : 1
143 : 1
bugs; : 1
82 : 1
underestimates : 5
According : 5
"glue" : 1
choice) : 1
immediate : 25
OSA : 1
more." : 1
toolbox : 3
QuickTime : 1
ported : 8
People : 3
uncomment : 2
"*function* : 1
new- : 2
"ReferenceError" : 3
"Tools/scripts/cleanfuture.py" : 1
*flags* : 95
observed : 17
simulated : 6
264** : 1
Hudson.) : 2
GPLed : 2
"locale.nl_langinfo(CODESET)" : 1
"Tools/scripts/ftpmirror.py" : 1
".netrc" : 7
Mike : 11
Romberg.) : 1
accessed; : 1
they'll : 10
"xrange" : 2
"tolist()" : 3
"start" : 25
"stop" : 13
"step" : 15
"PyRange_New()" : 2
"repeat" : 3
sneakily : 1
rhythm : 1
Stephen : 4
Hansen : 4
progress...) : 1
enhancement: : 1
Wise : 2
Solutions : 1
generously : 2
InstallerMaster : 1
5.0a : 1
(Packaged : 1
PYTHONW.EXE : 1
PYTHON.EXE : 1
popping : 7
Bolen.) : 1
"dlopen()" : 5
"sys.getdlopenflags()" : 1
"sys.setdlopenflags()" : 2
Bram : 2
Stolk.) : 1
"pow()" : 14
"pow(x : 4
z)" : 1
"(x**y) : 3
z" : 15
unpredictably : 1
"pow(2.0 : 1
8.0 : 1
7.0)" : 1
corrections : 7
Bremmer : 1
Keith : 1
Briggs : 1
Carel : 4
Fellinger : 1
McLay : 1
Moore : 13
Gustavo : 14
Niemeyer : 6
O'Donnell : 1
Joonas : 1
Paalasma : 1
Jens : 2
Quade : 1
Tom : 6
Reinhardt : 1
Edward : 2
Welbourne : 1
medium-sized : 1
radical : 1
conservative : 4
expressions; : 6
481 : 1
502 : 1
"set(iterable)" : 1
"frozenset(iterable)" : 1
intersections : 2
set(['a' : 5
'd']) : 2
''.join(a) : 1
'arbcd' : 1
set(['r' : 2
'b']) : 4
'l']) : 4
'c']) : 2
a.add('z') : 1
a.update('wxy') : 1
'z']) : 2
a.remove('x') : 1
"frozenset()" : 5
"Set" : 12
"ImmutableSet" : 3
plans : 8
deprecate : 9
218** : 2
Originally : 11
Wilson : 11
ultimately : 11
Raymond : 177
Hettinger : 89
begun : 4
int/long : 1
unification : 1
"FutureWarning" : 13
shifts : 3
"2 : 5
32" : 1
8589934592 : 1
Kalle : 3
Svensson : 1
unavoidably : 3
functionally : 9
styled : 4
[link : 1
get_all_links() : 2
link.followed] : 1
get_all_links(): : 1
link.followed: : 1
materialize : 3
(link : 5
link.followed) : 1
signalling : 7
sum(obj.count : 2
list_all_objects()) : 2
(*obj* : 1
289** : 1
Proposed : 1
Jiwon : 2
Seo : 1
steered : 2
Hye-Shik : 4
Chang : 4
substituting : 9
strings; : 12
untrained : 1
operator: : 6
'%(page)i: : 1
%(title)s' : 1
{'page':2 : 1
Times'} : 1
'2: : 3
Times' : 2
parenthesis : 16
"Unsupported : 1
character" : 4
edited : 10
292 : 1
substitution: : 1
string.Template('$page: : 2
$title') : 2
t.substitute({'page':2 : 1
Times'}) : 1
t.safe_substitute({'page':3}) : 1
'3: : 2
$title' : 1
292** : 2
meth : 3
(cls): : 2
classmethod(meth) : 1
Rebind : 1
wrapped-up : 1
miss : 9
intention : 11
Today : 3
*still* : 1
feature; : 2
"function : 4
decorators" : 1
*decorating* : 1
"'@'" : 8
written: : 4
@classmethod : 25
"@classmethod" : 8
"meth=classmethod(meth)" : 1
@A : 1
@B : 2
@C : 1
(): : 3
pre-decorator : 1
A(B(C(f))) : 1
"@A : 2
decorate : 12
decorated : 81
is) : 4
deco(func): : 1
func.attr : 1
'decorated' : 2
@deco : 1
0x402ef0d4> : 1
f.attr : 1
require_int : 1
(func): : 1
(arg): : 2
isinstance(arg : 1
func(arg) : 1
@require_int : 2
p1 : 12
p2(arg): : 1
arg*2 : 1
318** : 3
Decorator : 24
@C(args)" : 1
becomes: : 6
_deco : 1
C(args) : 1
A(B(_deco(f))) : 1
brain-bending : 1
Kevin : 11
Smith : 49
Jewett : 3
#979728 : 1
Russell : 1
https://wiki.python.org/moin/PythonDecoratorLibrary : 1
Wiki : 2
"reversed(seq)" : 2
reversed(xrange(1,4)): : 1
"range(1,4)[::-1]" : 1
substantially : 12
open('/etc/passwd' : 3
reversed(list(input)): : 1
root:*:0:0:System : 1
Administrator:/var/root:/bin/tcsh : 1
322** : 1
"os.system(command)" : 1
dangerous : 9
metacharacters) : 1
cleans : 8
unified : 10
"popen2"'s : 1
"Popen" : 42
Popen(args : 2
bufsize=0 : 1
executable=None : 2
stdin=None : 11
stdout=None : 8
stderr=None : 8
preexec_fn=None : 2
close_fds=False : 1
shell=False : 6
cwd=None : 6
env=None : 3
universal_newlines=False : 1
startupinfo=None : 2
creationflags=0): : 1
*shell* : 11
interpretation : 41
does.) : 1
subprocess's : 9
"subprocess.PIPE" : 7
*close_fds* : 17
*cwd* : 15
(defaulting : 8
parent's : 14
*env* : 14
*preexec_fn* : 9
*universal_newlines* : 15
child's : 16
*universal : 11
newlines* : 11
"wait()" : 35
pause : 7
"poll()" : 20
pausing : 5
"communicate(data)" : 2
"(stdout_data : 3
stderr_data)" : 3
"call()" : 5
waits : 47
analog : 8
"os.system()": : 1
subprocess.call(['dpkg' : 1
'-i' : 1
'/tmp/new-package.deb']) : 1
Success : 5
dpkg : 1
"shell=True" : 18
sequence: : 5
subprocess.call('dpkg : 1
/tmp/new-package.deb' : 1
shell=True) : 5
324** : 2
Åstrand : 1
(FP) : 1
programmers) : 1
unaware : 1
accurately : 6
user-specified : 2
FP : 3
components: : 6
mantissa : 10
single-digit : 4
"1.01" : 1
base-2 : 4
1/4" : 1
exponent : 70
1.01 : 1
shifted) : 1
2); : 1
Modern : 7
IEEE : 50
52 : 13
endlessly : 5
cut : 19
decimals : 8
"1.0001100110011 : 1
..."; : 1
1/16 : 1
1/32 : 1
1/256 : 1
inaccuracy : 5
printed: : 5
1.1000000000000001 : 2
FP-to-decimal-string : 1
sensible : 25
magnify : 1
plotting : 1
Reports : 7
Hence : 13
numbers; : 6
decimal.Decimal(1972) : 1
Decimal("1972") : 1
decimal.Decimal("1.1") : 1
Decimal("1.1") : 2
exponent: : 2
decimal.Decimal((1 : 1
-2)) : 2
Decimal("-14.75") : 1
Cautionary : 1
poses : 2
problem: : 14
inaccuracies : 1
decision : 17
dodge : 1
constructor: : 21
decimal.Decimal(str(f)) : 1
decimal.Decimal('%.12f' : 1
Decimal("1.100000000000") : 1
limitation: : 1
exponentiation : 7
decimal.Decimal('35.72') : 1
decimal.Decimal('1.73') : 1
Decimal("37.45") : 1
a-b : 1
Decimal("33.99") : 1
a*b : 1
Decimal("61.7956") : 1
a/b : 2
Decimal("20.64739884393063583815028902") : 1
Decimal("1275.9184") : 1
a**b : 1
decimal.InvalidOperation: : 2
(non-integer) : 3
Decimal("39.72") : 1
decimal.Decimal('123456789012.345') : 1
math.sqrt(d) : 1
351364.18288201344 : 1
cmath.sqrt(-d) : 1
351364.18288201344j : 1
"sqrt()" : 1
trigonometric : 2
d.sqrt() : 1
Decimal("351364.1828820134592177245001") : 1
"prec" : 4
"rounding" : 3
possibilities: : 4
"ROUND_DOWN" : 2
"ROUND_CEILING" : 2
"ROUND_HALF_EVEN" : 6
"traps" : 4
encountering : 12
"getcontext()"; : 1
context: : 11
decimal.getcontext().prec : 2
28 : 13
decimal.Decimal(1) : 4
decimal.Decimal(7) : 2
Decimal("0.1428571428571428571428571429") : 1
Decimal("0.142857143") : 1
selectable; : 1
infinity : 42
not-a-number : 5
raised: : 10
decimal.Decimal(0) : 2
decimal.DivisionByZero: : 1
decimal.getcontext().traps[decimal.DivisionByZero] : 1
Decimal("Infinity") : 1
"to_eng_string()" : 1
"to_sci_string()" : 1
quick-start : 1
327** : 1
Facundo : 9
Batista : 3
Price : 5
http://www.lahey.com/float.htm : 1
illustrate : 21
http://speleotrove.com/decimal/ : 1
decimal-based : 1
underlies : 3
Much : 8
Cowlishaw : 1
designer : 3
Rexx : 1
*names* : 7
SimpleXMLRPCServer,\ : 1
SimpleXMLRPCRequestHandler,\ : 1
CGIXMLRPCRequestHandler,\ : 1
resolve_dotted_attribute : 1
(SimpleXMLRPCServer : 1
SimpleXMLRPCRequestHandler : 3
resolve_dotted_attribute) : 1
proposes : 1
328** : 7
Imports: : 3
Multi-Line : 4
Absolute/Relative : 3
Dima : 1
Dorfman : 1
==================================================== : 10
localized : 3
country : 7
"'C'" : 10
"atof()" : 3
motivating : 2
GTK+ : 2
ignoring : 34
setting: : 1
"PyOS_ascii_strtod(str : 1
ptr)" : 2
"PyOS_ascii_atof(str : 1
"PyOS_ascii_formatd(buffer : 1
buf_len : 1
d)" : 3
GLib : 1
(https://developer.gnome.org/glib/stable/) : 1
kindly : 2
relicensed : 1
donated : 1
331** : 1
R : 53
Reis : 1
Carneiro : 1
318**) : 1
218**) : 1
322**) : 1
289**) : 1
Certain : 12
237**) : 1
"dict.update()" : 4
Hettinger.) : 64
"ljust()" : 2
"rjust()" : 2
"center()" : 2
"rsplit()" : 6
splits : 22
Sean : 10
Reifschneider.) : 2
'www.python.org'.split('.' : 1
['www' : 1
'python.org'] : 1
'www.python.org'.rsplit('.' : 1
['www.python' : 1
'org'] : 1
"sort()" : 13
single-parameter : 4
case-insensitively: : 1
['A' : 6
'D'] : 4
Case-sensitive : 1
'key' : 3
L.sort(key=lambda : 1
x.lower()) : 1
Old-fashioned : 1
L.sort(cmp=lambda : 1
x,y: : 4
cmp(x.lower() : 1
y.lower())) : 1
"lower()" : 3
L.sort(key=str.lower) : 1
"L.sort(); : 1
L.reverse()" : 1
"L.sort(reverse=True)" : 1
name-sorted : 1
(All : 5
"sorted(iterable)" : 2
iterable; : 1
intact; : 1
[9,7,8,3,2,4,1,6,5] : 2
[10+i : 1
sorted(L)] : 1
[11 : 2
19] : 5
sorted('Monty : 1
Python') : 7
'M' : 2
't' : 4
'y'] : 3
colormap : 1
dict(red=1 : 2
blue=2 : 2
green=3 : 2
black=4 : 1
yellow=5) : 1
sorted(colormap.iteritems()): : 1
black : 7
green : 12
red : 15
yellow : 3
"OverflowWarning" : 4
profile" : 1
Coghlan.) : 2
"eval(expr : 1
locals)" : 3
"execfile(filename : 1
*locals* : 24
"itertools.izip()" : 4
transpose(array): : 1
zip(*array) : 1
transpose([(1,2,3) : 1
(4,5,6)]) : 1
transpose([]) : 1
Encountering : 2
fool : 1
succeeding : 2
(Fixed : 31
constant; : 3
one-third : 3
boosts : 2
"keys()" : 20
"values()" : 16
shrinking : 3
frequent : 7
"list.extend()" : 1
"list.__getitem__()" : 1
"dict.__getitem__()" : 1
"dict.__contains__()" : 1
"method_descriptor" : 1
"wrapper_descriptor" : 1
functionals: : 1
"map(mydict.__getitem__ : 1
keylist)" : 1
opcode : 87
"LIST_APPEND" : 2
peephole : 9
optimizer : 19
bytecode; : 3
remarkably : 2
(Enhanced : 1
concatenations : 3
"s : 10
"abc"" : 4
Armin : 17
Rigo.) : 2
35% : 3
(pystone : 1
2.4.) : 1
enhancements : 24
alphabetically : 15
"loop()" : 4
*count* : 40
polling : 28
forever : 14
3548** : 3
folding : 31
alphabets : 3
Warsaw.) : 7
Dmitry : 6
Vasiliev.) : 1
CJKCodecs : 2
East : 1
Asian : 1
Hye- : 1
Shik : 1
Chinese : 11
(PRC): : 1
gb2312 : 2
gbk : 2
gb18030 : 2
big5hkscs : 2
hz : 2
(ROC): : 1
big5 : 2
cp950 : 2
Japanese: : 2
cp932 : 2
euc-jis-2004 : 1
euc-jp : 1
euc-jisx0213 : 1
iso-2022-jp : 2
iso-2022-jp-1 : 2
iso-2022-jp-2 : 2
iso-2022-jp-3 : 2
iso-2022-jp-ext : 2
iso-2022-jp-2004 : 2
shift-jis : 1
shift-jisx0213 : 1
shift-jis-2004 : 1
Korean: : 2
cp949 : 2
euc-kr : 1
johab : 2
iso-2022-kr : 2
HP : 3
Roman8 : 1
ISO_8859-11 : 1
ISO_8859-16 : 1
PCTP-154 : 1
TIS-620 : 1
"StreamReader" : 27
Walter : 7
Dörwald.) : 4
double-ended : 3
deque('ghi') : 2
d.append('j') : 2
d.appendleft('f') : 2
deque(['f' : 2
'i' : 12
'j']) : 2
d.pop() : 4
rightmost : 17
'j' : 6
d.popleft() : 4
leftmost : 25
list(d) : 7
['g' : 2
'i'] : 2
Belmonte : 5
Goodger.) : 1
"use_default_colors()" : 2
transparency : 4
Jörg : 1
Lehmann.) : 1
"HtmlDiff" : 3
Gass.) : 1
incremental : 40
"email.FeedParser" : 1
malformed; : 1
"defect" : 1
(Developed : 2
others.) : 1
tenfold : 1
"nlargest()" : 2
"nsmallest()" : 2
N : 49
dataset : 10
HTTP-related : 1
"OK" : 3
"CREATED" : 2
"CONTINUE" : 2
"MOVED_PERMANENTLY"; : 1
Eland.) : 1
IMAP's : 1
THREAD : 1
(contributed : 14
Yves : 2
Dionne) : 1
"deleteacl()" : 1
"myrights()" : 1
Arnaud : 2
Mazin) : 1
"groupby(iterable[ : 1
*func*])" : 1
*func* : 69
"groupby()" : 11
subsequences : 10
14] : 2
key_val : 2
itertools.groupby(L : 1
2): : 3
list(it) : 1
[7] : 1
[8] : 1
[12 : 1
"uniq" : 2
elements: : 6
sorted(word) : 1
'r'] : 3
itertools.groupby(letters): : 1
list(g) : 1
'a'] : 2
['b' : 2
'b'] : 6
['c'] : 1
['d'] : 1
['r' : 1
[k : 2
groupby(letters)] : 2
[(k : 1
len(list(g))) : 1
('d' : 2
('r' : 2
2)] : 10
Chang.) : 1
"tee(iterator : 1
N)" : 3
i1 : 7
i2 : 5
itertools.tee(L) : 1
i1,i2 : 1
(<itertools.tee : 1
0x402c2080> : 1
<itertools.tee : 1
0x402c2090>) : 1
list(i1) : 1
list(i2) : 1
"tee()" : 7
separation : 9
bookmarking : 1
lookahead : 14
"bind_textdomain_codeset()" : 4
"l*gettext()" : 5
Niemeyer.) : 4
"basicConfig()" : 12
logging.basicConfig(filename='/var/log/application.log' : 1
level=0 : 2
Log : 14
format='%(levelname):%(process):%(thread):%(message)') : 1
additions : 22
"log(level : 1
msg)" : 1
"TimedRotatingFileHandler" : 12
rotates : 2
timed : 22
interval : 47
"RotatingFileHandler" : 9
rotated : 5
exceeded : 12
"BaseRotatingHandler" : 3
rotating : 11
(Changes : 1
Vinay : 26
Sajip.) : 3
shares : 11
interned : 34
shrink : 3
"NNTP" : 12
"description()" : 1
"descriptions()" : 2
Jürgen : 1
Erhard.) : 1
"attrgetter(attr)" : 1
"itemgetter(index)" : 1
item; : 3
extractors : 2
[('c' : 1
map(operator.itemgetter(0) : 1
['c' : 2
map(operator.itemgetter(1) : 2
sorted(L : 1
key=operator.itemgetter(1)) : 1
[('d' : 1
"gettext.gettext()" : 2
internationalize : 3
Optik's : 1
"'%default'" : 1
option's : 10
Ward.) : 3
long-term : 3
"email.Utils.formatdate()" : 1
"rfc822.formatdate()" : 1
(Change : 3
Baxter.) : 1
"urandom(n)" : 1
randomness : 13
"/dev/urandom" : 12
CryptoAPI : 1
Trevor : 1
Perrin.) : 1
"os.path.lexists(path)" : 1
*path* : 217
"os.path.exists(path)" : 1
destination : 81
Beni : 1
Cherniavsky.) : 1
"getsid()" : 2
Raynor.) : 1
Hector : 1
Urtubia.) : 1
profile : 52
Bastin.) : 1
"getrandbits(N)" : 1
"randrange()" : 8
"getrandbits()" : 8
"(?(group)A|B)" : 1
*group* : 18
"(?P<group>...)" : 1
massive : 3
30000-byte : 1
"(a|b)+" : 1
"RuntimeError" : 103
sidestep : 1
unlucky : 2
segfault : 40
2.4's : 1
tighter : 4
error-checking : 1
"signal.signal()" : 6
"SIGKILL" : 6
signal; : 3
"socketpair()" : 1
"getservbyport(port)" : 1
service : 54
Dave : 5
Cole : 2
Eventually : 2
GNU-format : 2
Gustäbel.) : 3
elegantly : 1
"local" : 3
threading.local() : 2
data.number : 1
data.url : 1
('www.python.org' : 1
80) : 9
"url" : 9
Fulton.) : 2
periodic : 1
timing : 30
timings : 7
wider : 10
frozensets : 15
deques : 14
multi-call : 1
transmitting : 3
Quinlan.) : 2
"mpz" : 1
"rotor" : 2
"xreadlines" : 1
"cookielib" : 2
cookies : 114
mirroring : 2
cookie : 78
Cookies : 5
jars; : 1
transparently : 21
jar : 3
fetches : 9
connecting : 17
jars : 1
provided: : 14
Netscape : 30
Lynx : 3
libwww : 1
"cookielib": : 1
"HTTPCookieProcessor" : 2
underwent : 6
Loper : 1
"doctest.testmod()" : 4
refactorings : 2
"DocTestFinder" : 4
docstrings: : 2
""">>> : 4
f(2,2) : 1
f(3,2) : 1
x*y : 1
doctest.DocTestFinder() : 1
finder.find(f) : 1
"DocTestRunner" : 13
runner : 24
doctest.DocTestRunner() : 1
runner.run(t) : 1
runner.summarize(verbose=1) : 1
"OutputChecker" : 9
ambitious : 1
"doctest.ELLIPSIS" : 1
ellipsis : 12
(n): : 3
o(1) : 1
<__main__.C : 2
0x...> : 13
"<BLANKLINE>" : 3
p(1) : 1
<BLANKLINE> : 1
capability : 27
diff-style : 1
"doctest.REPORT_UDIFF" : 2
(unified : 2
diffs) : 3
"doctest.REPORT_CDIFF" : 1
(context : 1
"doctest.REPORT_NDIFF" : 1
(delta-style) : 1
g(4) : 2
>>>""" : 1
'here : 2
words'.split() : 1
L[:n]: : 1
********************************************************************** : 4
"t.py" : 4
diff : 26
-expected : 1
+actual): : 1
@@ : 4
-2,3 : 1
+2,3 : 1
-lengthy : 1
+rather : 1
"Py_RETURN_TRUE" : 1
"Py_RETURN_FALSE" : 1
Brett : 65
Cannon.) : 5
"Py_CLEAR" : 1
decreases : 4
"PyTuple_Pack(N : 1
obj1 : 1
obj2 : 1
objN)" : 1
"PyDict_Contains(d : 1
k)" : 5
Py_IS_NAN(X) : 1
*X* : 13
"PyEval_ThreadsInitialized()" : 4
"PyArg_VaParseTupleAndKeywords()" : 2
"va_list" : 4
Chapman.) : 1
"METH_COEXISTS" : 1
co-exist : 2
"PyCFunction" : 10
halve : 1
"set.__contains__()" : 1
"--enable-profiling" : 1
**gprof** : 1
"--with-tsc" : 2
Pentium's : 1
Time-Stamp-Counter : 1
misnamed : 2
PowerPC : 3
TSC : 1
register" : 2
"tracebackobject" : 1
"PyTracebackObject" : 1
Left : 8
hexadecimal/octal : 1
bits; : 2
"dircache.listdir()" : 1
"LexicalHandler.startDTD()" : 1
IDs : 14
corrected; : 1
"fcntl.ioctl()" : 2
warns : 11
*mutate* : 1
"signals.signal()" : 1
Koray : 1
Dyck : 1
Hurt : 1
Hamish : 1
Lawson : 1
Reifschneider : 3
Sadruddin : 1
Rejeb : 1
scheduled : 62
August : 1
2006; : 1
356** : 1
planned : 9
("xml.etree") : 1
("sqlite") : 1
middling : 1
syntax; : 3
'"with"' : 31
(section : 8
Features) : 1
Imports) : 1
try/except/finally) : 1
worthwhile : 3
another; : 2
SVN : 3
353 : 1
458 : 1
(Both : 2
underestimates.) : 1
features; : 2
https://docs.python.org : 2
welcome; : 2
requesting : 15
true_value : 2
false_value : 2
voters : 1
Candidates : 1
"cond : 1
true_v : 2
false_v" : 2
cond : 4
chose : 5
jumps : 14
*true_value* : 1
*false_value* : 1
backwards; : 1
*middle* : 1
"c : 6
'common : 1
case' : 2
'exceptional : 1
rarer : 1
obvious: : 2
((doc : 1
'\n') : 1
"here : 1
*contents* : 2
"doc+'\n'"; : 1
*doc* : 5
returned." : 1
uncommon : 5
reader's : 3
eye : 3
'level : 1
1' : 8
'if : 5
logging' : 1
0' : 1
decides : 9
brackets: : 3
combinations : 28
308** : 3
Hettinger; : 20
functional- : 1
"partial()" : 9
"f(a : 3
c)"; : 3
"g(b : 2
"f(1 : 2
"partial : 2
"(function : 2
kwarg1=value1 : 2
kwarg2=value2)" : 2
filled-in : 5
(message : 4
subsystem): : 2
"Write : 2
'message' : 3
subsystem." : 1
'%s: : 1
(subsystem : 2
message) : 17
server_log : 2
functools.partial(log : 2
subsystem='server') : 2
server_log('Unable : 2
socket') : 5
PyGTK : 1
context-sensitive : 1
pop-up : 2
"open_item()" : 1
Application: : 1
open_item(self : 1
path): : 2
open_func : 2
functools.partial(self.open_item : 1
item_path) : 1
popup_menu.append( : 1
("Open" : 1
"update_wrapper(wrapper : 1
wrapped)" : 1
well- : 4
behaved : 4
"update_wrapper()" : 3
my_decorator(f): : 3
wrapper(*args : 4
'Calling : 2
function' : 2
**kwds) : 27
functools.update_wrapper(wrapper : 2
"wraps()" : 1
@functools.wraps(f) : 1
309** : 1
Harris; : 1
Coghlan : 50
adaptations : 1
=================================================== : 6
dependency : 21
"requires" : 2
"provides" : 2
"obsoletes" : 2
recorded : 36
"PKG-INFO" : 7
"download_url" : 2
setup(name='PyPackage' : 1
version=VERSION : 1
requires=['numarray' : 1
'zlib : 1
(>=1.1.4)'] : 1
obsoletes=['OldPackage'] : 1
download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz' : 1
VERSION) : 1
enhancement : 6
https://pypi.org : 2
**upload** : 3
upload : 19
uploaded : 6
**sdist** : 17
upload" : 2
PyPI : 28
GPG-sign : 1
sign" : 1
"--identity" : 1
uploading : 4
Richard : 18
Jones : 8
314** : 2
Drake; : 1
2.4: : 1
2.5: : 1
toward : 13
pkg/ : 1
pkg/__init__.py : 1
pkg/main.py : 1
pkg/string.py : 1
"pkg" : 4
"pkg.main" : 3
"pkg.string" : 6
"main.py" : 4
string" : 8
"pkg/string.py" : 1
unclean : 3
Holger : 2
Krekel's : 1
"py.std" : 2
tidier : 1
py; : 1
py.std.string.join()" : 1
packages' : 2
submodule's : 1
"import"'s : 1
absolute_import" : 1
absolute-import : 1
2.7) : 1
preferable : 19
import" : 7
pkg.string : 2
.string : 1
name1 : 1
name2 : 1
*name1* : 1
*name2* : 1
do: : 10
A.B.D : 1
E : 106
A.E : 1
..F : 1
A.F.G : 1
modname" : 1
Aahz; : 1
https://pylib.readthedocs.io/ : 1
Krekel : 1
abilities : 1
"pychecker.checker" : 1
.zip : 6
archive's : 3
flavours : 6
clarified : 4
block-1 : 1
Exception1: : 1
handler-1 : 1
Exception2: : 1
handler-2 : 1
else-block : 1
final-block : 1
*block-1* : 1
tested: : 1
"Exception1" : 1
*handler-1* : 1
executed; : 5
"Exception2" : 1
*handler-2* : 1
*else-block* : 2
*final-block* : 2
341** : 1
try-except : 2
try-finally : 1
Brandl; : 7
output; : 12
Hackish : 1
variable's : 1
refresh : 6
(maximum): : 2
maximum: : 3
"counter(10)" : 1
picking : 1
on: : 5
val : 26
(yield : 13
342** : 6
"yield"-expression : 2
"val : 4
i" : 5
12".) : 2
"send(value)" : 2
counter(10) : 2
it.next() : 6
it.send(8) : 2
"send()" : 28
generators: : 5
"throw(type : 1
value=None : 1
traceback=None)" : 1
generator; : 3
paused : 8
"GeneratorExit" : 17
"RuntimeError"; : 1
propagated : 46
garbage-collected : 11
"try: : 3
finally:" : 2
one- : 5
producers : 7
consumers : 12
*coroutines* : 1
"try...finally" : 6
work; : 4
trivia : 1
"gi_frame" : 4
Enhanced : 10
Phillip : 8
Eby; : 1
Eby : 6
Includes : 7
288** : 1
325** : 1
Samuele : 2
Pedroni : 2
https://en.wikipedia.org/wiki/Coroutine : 1
Wikipedia : 9
https://web.archive.org/web/20160321211320/http://www.sidhe.org/~da : 1
n/blog/archives/000178.html : 1
Sugalski : 1
clarifies : 3
control-flow : 2
[as : 4
variable]: : 2
with-block : 2
*with-block* : 4
set-up : 10
*expression*.) : 2
with_statement : 2
part-way : 2
"file.__enter__()" : 2
threading.Lock() : 6
lock: : 8
Critical : 3
acquired : 57
"localcontext()" : 4
encapsulates : 12
computations: : 3
localcontext : 4
Decimal('578') : 2
v.sqrt() : 4
localcontext(Context(prec=16)): : 2
restored : 38
hood : 8
Authors : 4
"context : 2
manager" : 2
manager's : 15
*VAR* : 2
"'as : 1
VAR'" : 1
*BLOCK* : 6
"__exit__(type : 1
traceback)" : 5
re-raised: : 2
re-raises : 4
*traceback* : 5
transactions : 16
terminology: : 3
transaction : 61
Transactions : 3
rolled : 10
textbook : 6
information.) : 7
goal : 25
db_connection : 4
DatabaseConnection() : 4
cursor: : 4
cursor.execute('insert : 2
...') : 20
cursor.execute('delete : 2
flawlessly : 3
"DatabaseConnection" : 2
assume: : 2
DatabaseConnection: : 6
cursor : 122
"Returns : 5
transaction" : 6
commit : 17
"Commits : 2
rollback : 6
"Rolls : 2
"as : 7
cursor" : 2
__enter__ : 6
self.cursor() : 2
wished : 2
__exit__ : 6
tb): : 5
tb : 4
self.commit() : 2
self.rollback() : 2
"contextmanager()" : 11
yielded : 22
contextmanager : 8
@contextmanager : 7
db_transaction : 1
(connection): : 1
connection.cursor() : 2
except: : 11
connection.rollback() : 2
connection.commit() : 2
db_transaction(db) : 2
"nested(mgr1 : 2
mgr2 : 2
acquires : 8
(db_transaction(db) : 2
lock) : 4
(cursor : 2
locked): : 2
"closing(object)" : 1
"object.close" : 1
closing(urllib.urlopen('http://www.yahoo.com')) : 2
sys.stdout.write(line) : 2
Coghlan; : 9
Bland : 2
Neal : 11
Norwitz : 8
("NameError" : 1
rearranged : 1
BaseException : 7
|- : 4
SystemExit : 12
exceptions) : 6
rearrangement : 2
"except:" : 4
(KeyboardInterrupt : 1
SystemExit): : 1
error.. : 1
Continue : 7
program.. : 1
Exception" : 3
descendant : 9
constraint : 10
"Error : 3
occurred"" : 2
aim : 7
string-exception : 1
352** : 2
Superclass : 2
Cannon : 55
Rossum; : 1
wide-ranging : 2
"Py_ssize_t" : 46
capacity : 15
counts; : 2
"2**31 : 2
2147483647 : 4
models : 10
https://unix.org/version2/whatsnew/lp64_wp.html : 1
bits.) : 1
2147483647*4 : 1
GiB : 25
unreasonable : 1
*all* : 24
painful : 3
then.) : 1
"PyList_Size()" : 3
"PyArg_ParseTuple()"'s : 1
"t#" : 2
353** : 6
"[start:stop:step]" : 1
*step* : 18
Slicing : 5
"__int__()" : 25
undesirable : 4
__index__ : 3
"nb_index" : 3
"PyNumber_Index(obj)" : 1
357** : 1
Travis : 7
Oliphant : 4
dictionary's : 9
"__missing__(key)" : 2
zerodict : 1
(dict): : 1
__missing__ : 1
key): : 11
zerodict({1:1 : 1
2:2}) : 1
d[1] : 2
d[2] : 1
d[3] : 1
d[4] : 1
"partition(sep)" : 2
"rpartition(sep)" : 2
"find(S)" : 1
condenses : 1
3-tuple : 28
('http://www.python.org').partition('://') : 1
('http' : 1
'://' : 1
'www.python.org') : 3
('file:/usr/share/doc/index.html').partition('://') : 1
('file:/usr/share/doc/index.html' : 1
(u'Subject: : 1
question').partition(':') : 1
(u'Subject' : 1
u':' : 1
u' : 2
question') : 1
'www.python.org'.rpartition('.') : 1
('www.python' : 1
'.' : 27
'org') : 1
'www.python.org'.rpartition(':') : 1
('' : 3
is_image_file : 1
(filename): : 1
filename.endswith(('.gif' : 1
'.jpg' : 1
'.tiff')) : 1
Brandl : 27
Lynn.) : 1
"min()"/"max()" : 2
smallest/largest : 1
['medium' : 1
'longest' : 3
'short'] : 1
max(L : 1
key=len) : 2
'short' : 3
lexicographically : 6
max(L) : 1
Steven : 12
Bethard : 5
"any()" : 4
"all()" : 4
(Suggested : 15
"id(self)" : 1
discouraged) : 1
263** : 7
latin1 : 6
"UnicodeWarning" : 5
false: : 11
chr(128) : 2
unichr(128) : 1
__main__:1: : 3
UnicodeWarning: : 1
chr(127) : 2
unichr(127) : 1
"unichr(128)" : 1
"chr(128)" : 1
"dictobject.c" : 1
"ImportWarning" : 16
picked : 4
"-Wd" : 3
Wouters.) : 4
legal: : 1
C(): : 1
"quit" : 5
"exit" : 3
quit: : 1
'Use : 1
Ctrl-D : 3
EOF) : 3
exit.' : 1
Newbies : 1
Brandl.) : 11
"--version"; : 1
"/?" : 1
NeedForSpeed : 10
sprint : 6
Reykjavik : 1
Iceland : 1
21--28 : 1
focused : 1
EWT : 1
LLC : 1
CCP : 1
Games : 1
splitting : 28
(Substring : 1
Dörwald : 2
"long(str : 1
800--1000 : 1
Alan : 7
McIntyre : 2
sprint.) : 7
"read()"/"readline()"/"readlines()" : 1
"read*()" : 2
Mixing : 1
yielding : 23
20% : 15
Ippolito : 4
2% : 2
switching : 13
Diederich : 1
2+3" : 1
(Proposed : 6
"zombie : 1
frame") : 1
reusing : 11
(Original : 5
Rigo : 7
Jones; : 2
locality : 5
Norwitz.) : 3
recording : 18
a-LAW : 6
u-LAW : 8
Immisch.) : 1
"codec.lookup()" : 1
"CodecInfo" : 6
4-tuple : 4
"encode" : 1
"decode" : 1
"incrementalencoder" : 1
"incrementaldecoder" : 1
"streamwriter" : 1
"streamreader" : 1
chunks; : 5
fed : 10
non-incremental : 1
(Designed : 1
"defaultdict"'s : 1
"""Nel : 1
mezzo : 1
cammin : 1
di : 1
nostra : 1
vita : 1
mi : 5
ritrovai : 1
una : 1
selva : 1
oscura : 1
che : 1
la : 2
diritta : 1
era : 3
smarrita""".lower().split() : 1
defaultdict(list) : 2
init_letter : 1
w[0] : 1
index[init_letter].append(w) : 1
"index" : 8
defaultdict(<type : 1
'list'> : 4
{'c': : 2
['cammin' : 1
'che'] : 1
'e': : 2
['era'] : 1
'd': : 5
['del' : 1
'di' : 1
'diritta'] : 1
'm': : 2
['mezzo' : 1
'mi'] : 1
'l': : 2
['la'] : 1
'o': : 2
['oscura'] : 1
'n': : 3
['nel' : 1
'nostra'] : 1
'p': : 3
['per'] : 1
's': : 2
['selva' : 1
'smarrita'] : 1
'r': : 3
['ritrovai'] : 1
'u': : 1
['una'] : 1
'v': : 1
['vita' : 1
'via']} : 1
Rossum.) : 3
"remove(value)" : 1
"profile": : 1
"cProfile.run('main()')" : 1
Hotshot : 1
analyzing : 6
measured : 31
directing : 1
*stream* : 31
"csv.field_size_limit(new_limit)" : 1
*new_limit* : 2
"reader" : 8
"line_num" : 2
ended : 8
terminating : 19
carriage : 16
McNamara.) : 1
"strptime(string : 1
format)" : 3
Josh : 15
Spoerri : 1
"time.strptime()" : 2
"time.strftime()": : 1
ts : 7
datetime.strptime('10:13:15 : 1
2006-03-07' : 1
'%H:%M:%S : 1
%Y-%m-%d') : 1
"SequenceMatcher.get_matching_blocks()" : 1
(Enhancement : 1
"SKIP" : 1
"testfile()" : 12
"DocFileSuite" : 1
Bjorn : 2
Tillenius.) : 1
4.0 : 10
*openhook* : 8
"FileInput" : 9
"fileno()" : 33
"get_count()" : 1
generations : 3
collector; : 1
threshold : 9
sweep : 1
*generation* : 5
["short" : 1
'medium' : 1
'longer : 1
still'] : 1
heapq.nsmallest(2 : 2
['longer : 1
still' : 1
'longest'] : 1
['short' : 1
'medium'] : 1
slice(5) : 1
itertools.islice(iterable : 3
s.start : 2
s.stop : 2
s.step) : 1
"format_string()" : 5
"currency()" : 2
*val* : 16
%char : 6
appeared; : 1
*monetary* : 4
currency : 12
"add(message)" : 1
"remove(key)" : 1
"lock()"/"unlock()" : 1
lock/unlock : 1
maildir- : 1
mbox-format : 1
'factory=None' : 1
email.Message.Message : 1
src : 6
mailbox.Maildir('maildir' : 1
factory=None) : 2
mailbox.mbox('/tmp/mbox') : 1
src: : 1
dest.add(msg) : 1
Gregory : 35
K : 3
Johnson : 5
Funding : 1
Google's : 2
Summer : 2
Code.) : 1
".msi" : 4
*domain* : 22
"nis.match()" : 1
"nis.maps()" : 1
Ben : 17
Bell.) : 1
"itemgetter()" : 4
"attrgetter()" : 4
"operator.attrgetter('a' : 1
'b')" : 2
1.5.1 : 1
Optik : 2
"OptionParser" : 10
"epilog" : 2
"destroy()" : 3
"stat_float_times" : 1
second; : 2
precision.) : 2
"os.SEEK_SET" : 3
"os.SEEK_CUR" : 3
"os.SEEK_END" : 3
added; : 3
"os.lseek()" : 1
"os.O_SHLOCK" : 1
"os.O_EXLOCK" : 1
"wait3()" : 7
"wait4()" : 8
"waitpid()" : 18
*process-id* : 1
*exit- : 1
status* : 1
*resource-usage* : 1
"resource.getrusage()" : 3
"wait4(pid)" : 1
Chad : 7
Schroeder.) : 1
nanosecond : 16
"st_gen" : 1
"st_birthtime" : 1
"st_flags" : 1
Antti : 1
Louko : 1
Diego : 2
Pettenò.) : 1
"commands : 1
finishing : 7
"end" : 10
"next" : 10
Grégoire : 1
Dooms.) : 1
"__reduce__()" : 12
302**'s : 1
Eby.) : 1
pybench : 5
"Tools/pybench" : 1
"pystone.py" : 2
reducing : 19
Mick.) : 1
"task_done()" : 13
"regex" : 5
"regsub" : 1
"statcache" : 1
"tzparse" : 1
"whrandom" : 1
deleted: : 1
ancient : 3
"ni" : 1
(Patch : 43
Robert : 23
Kiendl.) : 1
"rpc_paths" : 4
constrains : 4
"'/'" : 7
"'/RPC2'" : 2
"AF_NETLINK" : 2
Philippe : 2
Biondi : 1
Netlink : 1
Linux-specific : 8
communications : 6
https://www.linuxjournal.com/article/7356 : 1
netlink : 1
"(pid : 4
group_mask)" : 1
"recv_into(buffer)" : 1
"recvfrom_into(buffer)" : 1
"getfamily()" : 1
"gettype()" : 1
"getproto()" : 1
"Struct" : 6
struct.Struct('ih3s') : 1
s.pack(1972 : 1
187 : 1
'abc') : 1
s.unpack(data) : 1
pack : 18
"pack_into(buffer : 1
v1 : 5
v2 : 9
"unpack_from(buffer : 1
("Struct" : 1
Blais : 1
switched : 13
Subversion : 12
"sys.subversion" : 1
"(interpreter-name : 1
branch-name : 1
revision-range)" : 1
"('CPython' : 1
'trunk' : 1
'45313:45315')" : 1
"Py_GetBuildInfo()" : 4
""trunk:45355:45356M : 2
07:42:19"" : 2
"sys._current_frames()" : 1
topmost : 7
"TarFile" : 17
"extractall()" : 5
autodetected : 2
"'r|*'" : 2
"stack_size([*size*])" : 1
OS/2 : 6
MacIntyre.) : 2
4.1.0 : 1
3.2.0 : 5
"unicodedata.ucd_3_2_0" : 1
(UUIDs) : 1
"UUID" : 5
"uuid1()" : 5
"uuid3()" : 3
"uuid4()" : 4
"uuid5()" : 3
(Version : 1
UUIDs : 9
uuid.uuid1() : 2
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e') : 2
MD5 : 16
uuid.uuid3(uuid.NAMESPACE_DNS : 2
'python.org') : 5
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e') : 2
uuid.uuid4() : 3
UUID('16fd2706-8baf-433b-82eb-8c7fada847da') : 2
SHA-1 : 6
uuid.uuid5(uuid.NAMESPACE_DNS : 2
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d') : 2
Yee.) : 1
"WeakKeyDictionary" : 7
"WeakValueDictionary" : 7
"iterkeyrefs()" : 1
"keyrefs()" : 2
"itervaluerefs()" : 1
"valuerefs()" : 1
webbrowser" : 1
("-n" : 2
"-t" : 5
tab) : 4
module- : 4
"open_new()" : 4
"open_new_tab()" : 1
*autoraise* : 2
Firefox : 5
Opera : 2
Konqueror : 2
elinks : 1
Oleg : 19
Broytmann : 1
"use_datetime=True" : 1
"loads()" : 10
"Unmarshaller" : 1
ZIP64 : 10
Ronald : 10
Oussoren.) : 2
"Compress" : 2
"Decompress" : 2
Chris : 19
AtLee.) : 1
Heller : 2
Long-time : 1
"dl" : 2
"CDLL" : 7
libc : 16
ctypes.CDLL('libc.so.6') : 1
libc.printf("Line : 1
output\n") : 1
"c_int()" : 1
"c_float()" : 1
"c_double()" : 1
"c_char_p()" : 2
(equivalent : 5
char*) : 2
mutable; : 2
"value" : 78
*must*; : 1
crashing : 26
segmentation : 23
fault.) : 1
immutable; : 3
modifiable : 2
"create_string_buffer()": : 1
"this : 3
buf : 11
ctypes.create_string_buffer(s) : 1
libc.strfry(buf) : 1
"restype" : 8
libc.atof('2.71828') : 2
-1783957616 : 1
libc.atof.restype : 1
ctypes.c_double : 2
2.71828 : 1
"ctypes.pythonapi" : 1
"py_object()" : 1
ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d) : 1
ctypes.py_object("abc") : 1
ctypes.py_object(1)) : 1
{'abc' : 1
1} : 5
"py_object()"; : 1
fault : 48
hand-coded : 1
atop : 3
https://web.archive.org/web/20180410025338/http://starship.python.n : 1
et/crew/theller/ctypes/ : 1
pre-stdlib : 1
Lundh's : 2
"xml.etree" : 4
"ElementTree" : 17
"ElementPath" : 1
"ElementInclude" : 1
1.2.6 : 1
"cElementTree" : 1
https://web.archive.org/web/20201124024954/http://effbot.org/zone : 2
/element-index.htm : 2
"text" : 15
"tail" : 4
Model; : 1
"TextNode".) : 1
(assumed : 1
ET : 4
ET.parse('ex-1.xml') : 1
urllib.urlopen( : 1
'http://planet.python.org/rss10.xml') : 1
ET.parse(feed) : 1
"getroot()" : 1
"XML()" : 2
"ElementTree") : 1
tidy : 2
fragments : 24
approaching : 1
literal: : 3
svg : 1
ET.XML("""<svg : 1
width="10px" : 1
version="1.0"> : 2
</svg>""") : 1
svg.set('height' : 1
'320px') : 1
svg.append(elem1) : 1
dictionary-like : 19
list-like : 7
Dictionary-like : 1
+---------------------------------+----------------------------------------------+ : 13
Operation : 20
|=================================|==============================================| : 1
"elem[n]" : 1
Returns : 601
n'th : 3
"elem[m:n]" : 1
m'th : 1
"len(elem)" : 2
"list(elem)" : 2
"elem.append(elem2)" : 1
*elem2* : 2
"elem.insert(index : 1
elem2)" : 1
Inserts : 4
elem[n]" : 1
Deletes : 5
"elem.keys()" : 1
"elem.get(name)" : 1
"elem.set(name : 1
"elem.attrib" : 1
Retrieves : 10
elem.attrib[name]" : 1
instructions: : 7
elem.tag : 2
ET.Comment: : 1
ET.ProcessingInstruction: : 1
"ElementTree.write()" : 6
US-ASCII : 1
tree.write('output.xml') : 3
open('output.xml' : 1
tree.write(f : 1
encoding='utf-8') : 7
(Caution: : 1
element's : 14
127 : 8
character.) : 1
Official : 2
"sha" : 3
(SHA-224 : 1
SHA-256 : 7
SHA-384 : 1
SHA-512) : 1
md5.md5() : 1
md5.new() : 1
hashlib.md5() : 1
sha.sha() : 1
sha.new() : 1
hashlib.sha1() : 1
hashlib.sha224() : 1
hashlib.sha256() : 2
hashlib.sha384() : 1
hashlib.sha512() : 1
hashlib.new('md5') : 1
before: : 5
"update(string)" : 1
"digest()" : 9
"hexdigest()" : 5
pysqlite : 5
(https://www.pysqlite.org) : 1
prototype : 16
PostgreSQL : 2
Oracle : 4
Häring : 3
249** : 7
"Connection" : 22
"/tmp/example" : 1
conn : 22
sqlite3.connect('/tmp/example') : 1
":memory:" : 1
RAM : 9
"Cursor" : 19
"execute()" : 12
conn.cursor() : 5
c.execute('''create : 1
stocks : 7
(date : 1
trans : 1
qty : 1
real)''') : 1
c.execute("""insert : 1
('2006-01-05','BUY','RHAT',100,35.14)""") : 1
insecure; : 1
vulnerable : 15
injection : 25
attack : 17
DB-API's : 2
"?" : 29
cursor's : 3
(Other : 2
"%s" : 22
":1".) : 1
'IBM' : 3
c.execute(".. : 1
'%s'" : 2
(symbol,) : 1
c.execute('select : 2
symbol=?' : 1
t) : 6
Larger : 2
(('2006-03-28' : 1
'BUY' : 2
45.00) : 1
('2006-04-05' : 1
'MSOFT' : 1
72.00) : 1
('2006-04-06' : 1
'SELL' : 1
53.00) : 1
c.execute('insert : 1
(?,?,?,?,?)' : 1
SELECT : 6
"fetchone()" : 1
"fetchall()" : 1
price') : 1
c: : 5
(u'2006-01-05' : 1
u'BUY' : 3
u'RHAT' : 1
35.140000000000001) : 1
(u'2006-03-28' : 1
u'IBM' : 2
45.0) : 1
(u'2006-04-06' : 1
u'SELL' : 1
53.0) : 1
(u'2006-04-05' : 1
u'MSOFT' : 1
72.0) : 1
dialect : 28
https://www.sqlite.org : 3
https://www.pysqlite.org : 1
page; : 2
(WSGI) : 2
v1.0 : 2
333** : 2
simple_server : 2
wsgi_app : 1
8000 : 11
httpd : 4
simple_server.make_server(host : 1
wsgi_app) : 1
httpd.serve_forever() : 8
https://web.archive.org/web/20160331090247/http://wsgi.readthedocs : 1
org/en/latest/ : 1
WSGI-related : 1
supervised : 1
347** : 1
Coverity : 1
markets : 1
examination : 3
60 : 12
refcounting : 4
error-handling : 6
https://scan.coverity.com : 1
AST) : 2
AST : 85
"_ast.PyCF_ONLY_AST" : 1
_ast : 1
PyCF_ONLY_AST : 2
compile("""a=0 : 1
"<string>" : 2
PyCF_ONLY_AST) : 1
ast.body[0] : 1
for_loop : 1
ast.body[1] : 1
339** : 1
"Parser/Python.asdl" : 2
"Include/Python-ast.h" : 1
"PyParser_ASTFromString()" : 3
"PyParser_ASTFromFile()" : 3
"Include/pythonrun.h" : 1
"PyAST_Compile()" : 3
Hylton's : 1
order) : 19
Grant : 2
Edwards : 2
Ehresman : 2
Kurt : 1
Kaiser : 2
participants : 2
sprints : 1
PyCon : 7
Evan : 2
Jones's : 1
obmalloc : 7
DC : 3
256K- : 1
sized : 12
arenas : 8
"PyMem_Malloc()" : 19
"PyMem_Realloc()" : 10
"PyMem_Free()" : 12
allocates : 12
"PyObject_Malloc()" : 10
"PyObject_Realloc()" : 7
"PyObject_Free()" : 9
"PyMem()" : 1
"PyObject()" : 1
2.5's : 2
mismatches : 2
"PySet_New()" : 2
"PyFrozenSet_New()" : 2
"PySet_Add()" : 2
"PySet_Discard()" : 2
"PySet_Contains()" : 2
"PySet_Size()" : 3
set's : 4
revision : 7
"Py_LOCAL(type)" : 1
fast-calling : 1
"Py_LOCAL_INLINE(type)" : 1
inlined : 6
"PY_LOCAL_AGGRESSIVE()" : 1
"python.h" : 1
"PyErr_NewException(name : 1
dict)" : 1
*base* : 29
"PyErr_Warn()" : 1
issuing : 9
favour : 19
"PyErr_WarnEx(category : 1
stacklevel)" : 1
*stacklevel* : 7
"PyErr_WarnEx()" : 4
(Added : 36
dangerously : 1
lax : 1
PyObject_CallFunction((PyObject*) : 1
&PyRange_Type : 1
"lll" : 1
step); : 2
(10.3 : 1
higher): : 1
MacOS-specific : 1
Oussoren; : 4
bpo-2573.) : 1
".dll" : 2
appeared : 9
*bin* : 1
API: : 25
"PyMem_*" : 1
"PyObject_*" : 3
family's : 2
"*_Malloc" : 1
"*_Free" : 1
Gustäbel : 3
Ralf : 4
W : 9
Grosse-Kunstleve : 1
Kent : 7
Iain : 1
Lowe : 1
McNamara : 2
Pryor : 1
Rovner : 1
Scott : 6
Weikart : 1
Editor: : 5
Łukasz : 20
Langa : 16
2020 : 2
changelog : 12
596** : 1
Schedule : 22
584** : 12
"dict"; : 2
hinting : 5
collections; : 1
614** : 4
relaxed : 7
616** : 3
prefixes : 52
593** : 5
annotations; : 3
"os.pidfd_open()" : 4
races : 4
improvements: : 21
573** : 3
types; : 5
617** : 7
PEG; : 1
(range : 1
frozenset : 15
sped : 12
590** : 19
vectorcall; : 1
resurrected : 4
("_abc" : 1
"_bz2" : 2
"_codecs" : 1
"_contextvars" : 1
"_crypt" : 3
"_functools" : 2
"_json" : 3
"_locale" : 4
"_weakref") : 1
multiphase : 50
489; : 1
("audioop" : 1
"_hashlib" : 3
"_posixsubprocess" : 2
"zlib") : 1
384 : 1
615** : 4
Zone : 3
topological : 9
graph : 34
changes: : 5
602** : 1
adopts : 2
annual : 2
layers : 5
"DeprecationWarning" : 96
"collections.Mapping" : 2
emits : 47
2012 : 8
"PendingDeprecationWarning" : 21
Aliases : 15
pre-existing : 7
deprecations : 14
("|") : 11
("|=") : 7
"dict.update" : 1
"{**d1 : 1
**d2}" : 1
merging : 13
{"key1": : 1
"value1 : 1
"key2": : 1
"value2 : 2
x"} : 1
{"key2": : 1
"key3": : 1
"value3 : 1
y"} : 1
{'key1': : 2
'value1 : 2
x' : 8
'key2': : 2
'value2 : 2
y' : 4
'key3': : 3
'value3 : 2
y'} : 1
{'key2': : 1
'key1': : 1
x'} : 1
Brandt : 19
Bucher : 20
bpo-36144.) : 1
"str.removeprefix(prefix)" : 1
"str.removesuffix(suffix)" : 1
"collections.UserString" : 1
Dennis : 17
Sweeney : 15
bpo-39939.) : 1
capitalized : 6
"List" : 5
"Dict") : 1
"queue.Queue" : 8
greet_all(names: : 1
list[str]) : 2
print("Hello" : 1
Ethan : 26
Batuhan : 34
Taşkaya : 4
bpo-39481.) : 1
PEG : 23
LL(1) : 7
formalism : 1
designing : 2
(primarily : 3
"parser" : 28
deprecated) : 4
("-X : 1
oldparser") : 1
("PYTHONOLDPARSER=1") : 1
Pablo : 239
Galindo : 233
Lysandros : 6
Nikolaou : 6
bpo-40334.) : 2
"__import__()" : 43
Ngalim : 3
Siregar : 3
bpo-37444.) : 2
script.py"): : 2
"os.chdir()" : 2
Victor : 427
Stinner : 408
bpo-20443.) : 1
encoding/decoding : 7
bpo-37388.) : 1
""".replace("" : 3
n)" : 14
Serhiy : 259
Storchaka : 254
bpo-28029.) : 1
*decorator* : 17
restrictive : 3
bpo-39702.) : 1
"Union" : 7
"List") : 2
"List[int]" : 2
correspondent : 2
bpo-40257.) : 2
"aclose()" : 8
"asend()" : 4
"athrow()" : 1
prohibited : 14
"ag_running" : 1
Yury : 102
Selivanov : 94
bpo-30773.) : 1
"__iter__" : 21
masked : 10
"contains()" : 2
"indexOf()" : 3
"countOf()" : 3
bpo-40824.) : 1
Unparenthesized : 1
bpo-41848 : 1
bpo-43755 : 1
brings : 13
"zoneinfo.ZoneInfo" : 2
"datetime.tzinfo" : 5
ZoneInfo : 2
timedelta : 25
Daylight : 4
dt : 26
datetime(2020 : 5
31 : 19
tzinfo=ZoneInfo("America/Los_Angeles")) : 3
print(dt) : 4
2020-10-31 : 2
12:00:00-07:00 : 2
dt.tzname() : 2
'PDT' : 2
timedelta(days=7) : 1
2020-11-07 : 1
12:00:00-08:00 : 2
print(dt.tzname()) : 1
PST : 3
fall-back : 1
"tzdata" : 1
first-party : 3
Ganssle : 19
"graphlib.TopologicalSorter" : 2
graphs : 4
Larry : 18
Hastings : 14
bpo-17005.) : 1
*indent* : 20
multiline : 21
bpo-37995.) : 1
"ast.unparse()" : 7
unparse : 4
"ast.AST" : 12
Taskaya : 30
bpo-38870.) : 1
ASDL : 4
bpo-39638.) : 1
concerns : 17
*reuse_address* : 11
"asyncio.loop.create_datagram_endpoint()" : 7
"SO_REUSEADDR" : 13
"loop.create_datagram_endpoint()" : 10
Kyle : 20
Stanley : 16
Antoine : 133
Pitrou : 102
bpo-37228.) : 5
"shutdown_default_executor()" : 1
schedules : 6
executor : 33
"asyncio.run()" : 21
bpo-34037.) : 2
"asyncio.PidfdChildWatcher" : 2
watcher : 23
polls : 9
(bpo-38692) : 2
"asyncio.to_thread()" : 6
IO-bound : 6
"run_in_executor()" : 3
bpo-32309.) : 1
cancelling : 15
"asyncio.wait_for()" : 11
cancellation : 45
*timeout* : 166
Elvis : 7
Pranskevichus : 7
bpo-32751.) : 2
"TyperError" : 2
"ssl.SSLSocket" : 8
Ido : 3
bpo-37404.) : 1
hardlinks : 3
*hardlink_dupes* : 5
--hardlink-dupes : 2
Lumír : 2
'Frenzy' : 2
Balhar : 2
bpo-40495.) : 1
*stripdir* : 5
*prependdir* : 5
*limit_sl_dest* : 5
-p : 12
-e : 11
bpo-38112.) : 1
*cancel_futures* : 6
"concurrent.futures.Executor.shutdown()" : 2
futures : 26
bpo-39349.) : 1
daemon : 28
subinterpreters : 17
predictability : 2
bpo-39812.) : 1
Workers : 3
spawned : 18
idle : 10
optimizes : 6
bpo-39207.) : 1
"curses.get_escdelay()" : 2
"curses.set_escdelay()" : 2
"curses.get_tabsize()" : 2
"curses.set_tabsize()" : 2
Sottile : 36
bpo-38312.) : 1
"isocalendar()" : 5
"datetime.date" : 22
"datetime.datetime" : 24
Dong-hee : 124
Na : 127
bpo-24416.) : 1
SHA2-256 : 2
Blake2b-256 : 2
skips : 26
bpo-40698.) : 1
"F_OFD_GETLK" : 3
"F_OFD_SETLK" : 3
"F_OFD_SETLKW" : 3
bpo-38602.) : 1
"FTP" : 12
"FTP_TLS" : 8
bpo-39259.) : 4
resurrect : 6
(they : 11
unreachable : 23
bpo-38379.) : 1
"gc.is_finalized()" : 3
bpo-39322.) : 1
SHA3 : 7
XOF : 2
bpo-37630.) : 1
"./configure : 9
--without- : 2
builtin-hashlib-hashes" : 1
--with-builtin-hashlib-hashes=sha3,blake2" : 1
bpo-40479) : 1
"103 : 3
EARLY_HINTS" : 3
"418 : 2
IM_A_TEAPOT" : 2
"425 : 3
TOO_EARLY" : 3
"http.HTTPStatus" : 4
bpo-39509 : 1
Ross : 8
Rhodes : 2
bpo-39507.) : 1
toggle : 5
blink : 3
Zackery : 61
Spytz : 61
bpo-4603.) : 2
Escape : 15
Johnny : 4
Najera : 4
bpo-38944.) : 2
Reedy : 48
bpo-37765.) : 2
"sys.excepthook()" : 10
(when : 29
'-n') : 2
Ken : 24
Hilton : 3
bpo-43008.) : 2
backported : 28
Rearrange : 4
Split : 21
Shell/Ed : 2
shorten : 4
screens : 5
bpo-40468.) : 2
Font : 10
Roseman : 27
bpo-33962.) : 2
Apply : 22
".pyi" : 3
Waygood : 12
bpo-45447.) : 3
"IMAP4" : 12
"IMAP4_SSL" : 6
"IMAP4_stream" : 3
bpo-38615.) : 1
"imaplib.IMAP4.unselect()" : 4
server's : 39
authenticated : 4
"imaplib.IMAP4.close()" : 2
bpo-40375.) : 1
"importlib.util.resolve_name()" : 2
Dino : 4
Viehland : 4
bpo-39336.) : 1
"importlib.resources.files()" : 4
backport : 10
"importlib_resources" : 4
Jason : 13
Coombs : 4
bpo-39791.) : 1
Refreshed : 1
"importlib_metadata" : 8
"inspect.BoundArguments.arguments" : 2
Inada : 51
Naoki : 69
bpo-36350 : 1
bpo-39775.) : 1
Scoped : 2
(IPv6 : 1
"%<scope_id>") : 1
"ipaddress.IPv6Address" : 1
"scope_id" : 1
Oleksandr : 2
Pavliuk : 2
bpo-34788.) : 1
3.9.5 : 3
IPv4 : 91
bpo-36384) : 2
Expanded : 5
"math.gcd()" : 8
Formerly : 25
bpo-39648.) : 2
"math.lcm()": : 1
Dickinson : 31
Ananthakrishnan : 1
bpo-39479 : 1
"math.nextafter()": : 2
*y* : 70
bpo-39288.) : 1
"math.ulp()": : 2
bpo-39310.) : 1
"multiprocessing.SimpleQueue" : 1
bpo-30966.) : 1
"NNTP_SSL" : 5
"CLD_KILLED" : 3
"CLD_STOPPED" : 3
"si_code" : 5
bpo-38493.) : 1
Exposed : 2
"os.P_PIDFD" : 2
(bpo-38713) : 1
"os.unsetenv()" : 5
bpo-39413.) : 1
"os.putenv()" : 6
bpo-39395.) : 2
"os.waitstatus_to_exitcode()" : 3
bpo-40094.) : 1
"pathlib.Path.readlink()" : 1
"os.readlink()" : 9
Girts : 2
Folkmanis : 2
bpo-30618) : 1
"Pdb" : 6
"~/.pdbrc" : 1
Hopper : 2
Lidral-Porter : 2
bpo-20523.) : 1
"POP3" : 8
"POP3_SSL" : 5
pretty-print : 5
"types.SimpleNamespace" : 6
Carl : 11
Bordum : 2
bpo-37376.) : 1
"random.Random.randbytes" : 1
bpo-40286.) : 1
"signal.pidfd_send_signal()" : 2
pid : 20
(bpo-38712) : 1
"SMTP" : 19
"SMTP_SSL" : 7
"LMTP" : 3
bpo-39329.) : 1
"CAN_RAW_JOIN_FILTERS" : 2
Tatschner : 1
bpo-25780.) : 1
"CAN_J1939" : 3
Karl : 5
Ding : 2
bpo-40291.) : 1
"socket.send_fds()" : 2
"socket.recv_fds()" : 1
Joannah : 23
Nanjekye : 20
Shinya : 2
Okano : 2
bpo-28724.) : 1
AIX : 62
"thread_time()" : 4
"thread_cputime()" : 2
"clock_gettime(CLOCK_THREAD_CPUTIME_ID)" : 3
milliseconds : 30
bpo-40192) : 1
""lib"" : 4
""lib64"" : 3
Matějek : 4
Matěj : 3
Cepl : 5
Charalampos : 3
Stratakis : 3
bpo-1294959.) : 2
block-buffered : 2
line-buffered : 5
Jendrik : 2
Seipp : 2
bpo-13601.) : 2
"tracemalloc.reset_peak()" : 1
Huon : 1
bpo-40630.) : 1
"typing.Annotated" : 5
context-specific : 6
"include_extras" : 4
Till : 3
Varoquaux : 3
Konstantin : 2
Kashin.) : 1
13.0.0 : 2
(bpo-39926) : 1
activation : 18
"__VENV_PROMPT__" : 5
"__VENV_NAME__" : 3
bpo-37663.) : 1
EOLNs : 1
normalized : 36
2.11 : 1
Mefistotelis : 1
bpo-39011.) : 1
Optimized : 42
[expr]" : 2
expr" : 2
sums : 4
[s : 2
[0] : 3
x]] : 1
bpo-32856.) : 1
multithreaded : 10
interrupted : 74
bpo-40010.) : 1
"closefrom()" : 2
Ed : 6
Maste : 3
Conrad : 3
Meyer : 8
Evans : 3
Kubilay : 3
Kocak : 3
bpo-38061.) : 1
"PyLong_FromDouble()" : 3
1.87x : 1
Sergey : 18
Fedoseev : 14
bpo-37986.) : 1
("range" : 1
vectorcall : 46
Shannon : 31
Jeroen : 13
Demeyer : 13
Petr : 28
Viktorin : 24
bpo-37207.) : 1
"difference_update()" : 3
Evgeny : 2
Kapun : 2
Michele : 6
Orrù : 4
bpo-8425.) : 1
("obmalloc.c") : 2
thrashing : 2
anew : 4
bpo-37257.) : 1
bpo-39434.) : 1
15% : 6
bpo-37348.) : 1
access: : 22
read_local : 2
read_nonlocal : 2
read_global : 2
15.5 : 2
19.0 : 8
14.3 : 2
13.6 : 2
read_builtin : 2
21.1 : 3
21.6 : 4
18.5 : 3
read_classvar_from_class : 2
25.6 : 2
26.5 : 2
20.7 : 2
19.5 : 5
18.4 : 5
17.9 : 2
read_classvar_from_instance : 2
22.8 : 2
23.5 : 4
18.8 : 2
17.1 : 2
16.4 : 2
16.9 : 1
read_instancevar : 2
32.4 : 2
33.1 : 2
28.0 : 2
26.3 : 2
25.4 : 3
25.3 : 1
read_instancevar_slots : 2
27.8 : 2
31.3 : 2
20.8 : 8
20.2 : 5
20.5 : 2
read_namedtuple : 2
73.8 : 2
57.5 : 2
45.0 : 4
46.8 : 2
18.7 : 1
read_boundmethod : 2
37.6 : 2
37.9 : 2
29.6 : 2
26.9 : 2
27.7 : 2
41.1 : 1
write_local : 2
write_nonlocal : 2
write_global : 2
19.7 : 3
21.2 : 5
18.0 : 4
15.8 : 2
16.7 : 1
write_classvar : 2
92.9 : 2
96.0 : 2
104.6 : 2
102.1 : 2
39.2 : 2
39.8 : 1
write_instancevar : 2
44.6 : 2
45.8 : 2
38.9 : 2
35.5 : 2
37.4 : 1
write_instancevar_slots : 2
35.6 : 2
36.1 : 2
27.3 : 2
26.6 : 2
25.7 : 4
25.8 : 1
read_list : 2
24.2 : 2
24.5 : 3
read_deque : 2
24.7 : 4
25.5 : 2
20.6 : 2
19.8 : 2
read_dict : 2
24.3 : 4
22.3 : 3
23.0 : 2
21.0 : 2
22.4 : 1
read_strdict : 2
22.6 : 2
18.9 : 2
21.5 : 1
write_list : 2
27.1 : 2
28.5 : 2
22.5 : 2
20.0 : 5
write_deque : 2
28.7 : 3
30.1 : 2
22.7 : 2
21.8 : 2
21.7 : 1
write_dict : 2
31.4 : 2
33.3 : 2
29.3 : 2
29.2 : 2
write_strdict : 2
28.4 : 2
29.9 : 2
27.5 : 3
25.2 : 2
23.1 : 2
Stack : 10
queue) : 7
list_append_pop : 2
93.4 : 2
112.7 : 2
75.4 : 2
74.2 : 2
50.8 : 2
50.6 : 1
deque_append_pop : 2
43.5 : 2
57.0 : 2
49.4 : 2
49.2 : 2
42.5 : 2
44.2 : 1
deque_append_popleft : 2
43.7 : 2
57.3 : 2
49.7 : 4
42.8 : 2
46.4 : 1
Timing : 2
loop_overhead : 2
0.4 : 5
at: : 1
"Tools/scripts/var_access_benchmark.py" : 3
nanoseconds : 19
benchmarks : 12
Intel® : 2
Core™ : 2
i7-4960HQ : 2
========== : 43
"bdist_msi" : 5
(wheel : 6
Hugo : 18
Kemenade : 17
bpo-39586.) : 1
"math.factorial()" : 3
"5.0") : 4
non-integral : 3
bpo-37315.) : 1
"symbol" : 3
leverage : 2
(AST) : 1
stage : 6
"PyParser_SimpleParseStringFlags()" : 1
"PyParser_SimpleParseStringFlagsFilename()" : 1
"PyParser_SimpleParseFileFlags()" : 1
"PyNode_Compile()" : 1
Rosenberg : 7
bpo-35712.) : 1
deterministic : 21
seeds : 5
"GzipFile" : 19
silencing : 5
bpo-28286.) : 1
"_tkinter.TkappType" : 4
"splitlist()" : 2
predicable : 2
bpo-38371.) : 2
"asyncio.wait()" : 8
bpo-34790.) : 2
binhex4 : 3
hexbin4 : 2
"binhex" : 4
deprecated: : 6
"b2a_hqx()" : 2
"a2b_hqx()" : 3
"rlecode_hqx()" : 3
"rledecode_hqx()" : 3
bpo-39353.) : 1
"Index" : 2
"ExtSlice" : 2
"Index(value)" : 3
"Tuple(slices : 3
Load())" : 3
"ExtSlice(slices)" : 3
bpo-34822.) : 2
"Suite" : 1
"Param" : 1
"AugLoad" : 1
"AugStore" : 1
bpo-39639 : 1
bpo-39969 : 1
bpo-39988.) : 1
"PyEval_InitThreads()" : 8
bpo-39877.) : 1
"shlex.split()" : 4
bpo-33262.) : 1
"smtpd.MailmanProxy()" : 1
"mailman" : 3
Colvin : 2
bpo-35800.) : 2
617**) : 2
parsable : 4
lib2to3's : 2
LibCST : 3
parso : 2
bpo-40360.) : 2
*random* : 4
"random.shuffle()" : 2
bpo-40465) : 1
"unittest.mock.__version__" : 1
"nntplib.NNTP": : 1
"xpath()" : 2
"xgtitle()" : 3
"nntplib.NNTP.descriptions()" : 1
"nntplib.NNTP.description()" : 1
bpo-39366.) : 1
"array.array": : 2
"tostring()" : 6
"fromstring()" : 4
"tobytes()" : 4
"frombytes()" : 4
bpo-38916.) : 1
"sys.callstats()" : 4
"CALL_PROFILE" : 3
bpo-37414.) : 1
"sys.getcheckinterval()" : 3
"sys.setcheckinterval()" : 2
"sys.getswitchinterval()" : 2
bpo-37392.) : 1
"PyImport_Cleanup()" : 1
"Empty : 3
only." : 1
bpo-36710.) : 1
"_dummy_thread" : 3
"dummy_threading" : 4
bpo-37312.) : 1
"aifc.openfp()" : 3
"aifc.open()" : 4
"sunau.openfp()" : 3
"sunau.open()" : 4
"wave.openfp()" : 3
"wave.open()" : 4
bpo-37320.) : 1
"isAlive()" : 2
"threading.Thread" : 15
"is_alive()" : 5
bpo-37804.) : 1
"getchildren()" : 4
"getiterator()" : 4
"iter(x)" : 1
"list(x)" : 3
"x.getchildren()" : 1
"x.iter()" : 1
"list(x.iter())" : 1
"x.getiterator()" : 1
bpo-36543.) : 1
"load()" : 17
*use_builtin_types* : 14
Jon : 5
Janzen : 2
bpo-36409.) : 1
"PyGen_NeedsFinalizing" : 2
bpo-15088) : 1
"base64.encodestring()" : 2
"base64.decodestring()" : 2
"base64.encodebytes()" : 3
"base64.decodebytes()" : 3
bpo-39351.) : 1
"fractions.gcd()" : 3
(bpo-22486): : 2
bpo-39350.) : 1
*buffering* : 10
"bz2.BZ2File" : 13
bpo-39357.) : 2
"json.loads()" : 3
bpo-39377) : 1
"with : 13
(await : 2
asyncio.lock):" : 4
lock" : 8
"asyncio.Condition" : 7
"asyncio.Semaphore" : 5
Svetlov : 23
bpo-34793.) : 1
"sys.getcounts()" : 1
"show_alloc_count" : 2
"COUNT_ALLOCS" : 4
bpo-39489.) : 2
"_field_types" : 5
"typing.NamedTuple" : 8
bpo-40182.) : 1
"symtable.SymbolTable.has_exec()" : 2
bpo-40208) : 1
"asyncio.Task.current_task()" : 4
"asyncio.Task.all_tasks()" : 4
"asyncio.current_task()" : 3
"asyncio.all_tasks()" : 5
Rémi : 22
Lapeyre : 22
bpo-40967) : 1
"unescape()" : 2
"html.parser.HTMLParser" : 4
3.4) : 4
"html.unescape()" : 2
(ImportError : 2
ValueError):" : 1
special-case : 3
"""" : 9
"select.epoll.unregister()" : 2
"EBADF" : 4
bpo-39239.) : 1
*compresslevel* : 17
Simplified : 10
subscription : 26
"PYTHONCASEOK" : 4
"ftplib.FTP" : 6
"ftplib.FTP_TLS" : 2
2640** : 5
"asyncio.loop.shutdown_default_executor()" : 1
"AbstractEventLoop" : 3
"PyCF_ALLOW_TOP_LEVEL_AWAIT" : 3
"CO_FUTURE_DIVISION" : 1
bpo-39562) : 1
"array('u')" : 2
"wchar_t" : 8
"Py_UNICODE" : 31
bpo-34538.) : 1
"logging.getLogger()" : 2
"'root'" : 3
non-root : 10
instantiates : 9
"logging.getLogger(__name__)" : 2
"'root.py'" : 1
Sajip : 22
bpo-37742.) : 1
"PurePath" : 12
Roger : 10
Aiudi : 2
bpo-34775) : 1
"socket.inet_aton()" : 3
notatation : 1
glibc : 26
"inet_pton()" : 8
"codecs.lookup()" : 5
normalizes : 5
"encodings.normalize_encoding()" : 4
""latex+latin1"" : 1
""latex_latin1"" : 1
Jordon : 1
Xu : 3
bpo-37751.) : 1
APIs) : 2
"Changes : 1
API" : 1
vast : 6
foo_traverse(foo_struct : 1
Rest : 1
#if : 14
PY_VERSION_HEX : 18
0x03090000 : 2
35810 : 1
40217) : 1
Py_VISIT(Py_TYPE(self)); : 3
"Py_TYPE(self)" : 7
includes: : 5
base->tp_traverse(self : 2
add: : 2
(bpo-35810 : 1
bpo-40217) : 1
(base->tp_flags : 2
Py_TPFLAGS_HEAPTYPE) : 2
tp_traverse : 4
Py_TYPE(self) : 3
bpo-35810 : 1
bpo-40217 : 1
"PyEval_CallObject" : 4
"PyEval_CallFunction" : 2
"PyEval_CallMethod" : 2
"PyEval_CallObjectWithKeywords" : 2
bpo-29548.) : 1
"LOAD_ASSERTION_ERROR" : 1
"AssertionError" : 23
shadowed : 5
bpo-34880.) : 1
"COMPARE_OP" : 7
"IS_OP" : 1
'is' : 9
not' : 3
"CONTAINS_OP" : 1
'in' : 11
'not : 4
in' : 2
"JUMP_IF_NOT_EXC_MATCH" : 3
'try-except' : 3
bpo-39156.) : 1
"--with-platlibdir" : 2
"configure" : 30
non-Windows : 21
"setenv()" : 4
"unsetenv()" : 4
bpo-10945 : 1
"_tkinter" : 10
non-system : 2
"/Library/Frameworks" : 2
universalsdk" : 1
"-isysroot" : 2
"--with-tcltk- : 3
includes" : 2
"--with-tcltk-libs" : 3
Ned : 8
Deily : 5
bpo-34956.) : 1
ARM64 : 9
Steve : 31
Dower : 16
bpo-33125.) : 1
"--pgo" : 3
15x : 3
[..] : 2
PROFILE_TASK="-m : 2
--pgo-extended"" : 1
bpo-36044 : 1
bpo-37707 : 1
573**: : 1
"PyType_FromModuleAndSpec()" : 15
associate : 16
"PyType_GetModule()" : 6
"PyType_GetModuleState()" : 6
"PyCMethod" : 7
"METH_METHOD" : 2
Marcel : 3
Plch : 3
bpo-38787.) : 1
"PyFrame_GetCode()" : 5
"PyFrame_GetBack()" : 7
bpo-40421.) : 2
"PyFrame_GetLineNumber()" : 8
"PyThreadState_GetInterpreter()" : 2
"PyInterpreterState_Get()" : 3
"PyThreadState_GetFrame()" : 9
"PyThreadState_GetID()" : 3
bpo-39947.) : 1
"PyObject_CallNoArgs()" : 4
bpo-37194.) : 1
"Py_LIMITED_API" : 28
defined): : 2
"Py_EnterRecursiveCall()" : 6
"Py_LeaveRecursiveCall()" : 4
"PyThreadState.recursion_depth" : 2
API) : 15
"PyObject_INIT()" : 7
"PyObject_INIT_VAR()" : 5
"opaque" : 1
bpo-38644 : 2
bpo-39542.) : 2
"PyModule_AddType()" : 5
bpo-40024.) : 1
"PyObject_GC_IsTracked()" : 3
"PyObject_GC_IsFinalized()" : 3
Salgado : 12
bpo-40241.) : 2
"_PyObject_FunctionStr()" : 2
user-friendly : 8
function-like : 3
bpo-37645.) : 1
"PyObject_CallOneArg()" : 2
bpo-37483.) : 1
"PyInterpreterState.eval_frame" : 1
523**) : 1
*tstate* : 16
("PyThreadState*") : 1
bpo-38500.) : 1
"m_traverse" : 4
"m_clear" : 4
"m_free" : 5
("Py_mod_exec" : 5
"m_size" : 9
"PyModule_GetState()") : 6
("m_size : 2
0") : 5
"Py_AddPendingCall()" : 4
subinterpreter : 28
bpo-39984.) : 1
"PyConfig.use_environment" : 3
bpo-8901.) : 1
"PyStructSequence_UnnamedField" : 5
bpo-38650.) : 1
"PyGC_Head" : 6
("pycore_gc.h") : 1
"Py_UNICODE_COPY" : 2
"Py_UNICODE_FILL" : 2
"PyUnicode_WSTR_LENGTH" : 2
"PyUnicode_FromUnicode()" : 4
"PyUnicode_AsUnicode()" : 4
"_PyUnicode_AsUnicode" : 1
"PyUnicode_AsUnicodeAndSize()" : 2
393** : 15
bpo-36346.) : 3
"Py_FatalError()" : 12
bpo-39882.) : 1
bpo-37540 : 1
hidden: : 1
"PyObject_IS_GC()" : 2
"PyObject_NEW()" : 2
"PyObject_New()" : 8
"PyObject_NEW_VAR()" : 2
"PyObject_NewVar()" : 8
"PyTypeObject.tp_basicsize" : 3
"PyObject_GET_WEAKREFS_LISTPTR()" : 2
"PyTypeObject.tp_weaklistoffset" : 2
"PyObject_CheckBuffer()" : 4
"PyTypeObject.tp_as_buffer" : 2
"PyIndex_Check()" : 6
details: : 8
"PyTypeObject.tp_as_number" : 2
bpo-40170 : 1
Excluded : 5
"PyFPE_START_PROTECT()" : 3
"PyFPE_END_PROTECT()" : 3
"pyfpe.h" : 3
bpo-38835.) : 1
"tp_print" : 2
bpo-36974.) : 2
"PyThreadState_DeleteCurrent()" : 2
bpo-37878.) : 1
"_Py_CheckRecursionLimit" : 4
"_Py_NewReference()" : 3
"_Py_ForgetReference()" : 3
"_PyTraceMalloc_NewReference()" : 2
"_Py_GetRefTotal()" : 2
trashcan : 14
"PyTrash_UNWIND_LEVEL" : 2
"Py_TRASHCAN_BEGIN_CONDITION" : 1
"Py_TRASHCAN_BEGIN" : 5
"Py_TRASHCAN_END" : 3
"Py_TRASHCAN_SAFE_BEGIN" : 1
"Py_TRASHCAN_SAFE_END" : 1
"_PyDebug_PrintTotalRefs()" : 1
"_Py_PrintReferences()" : 1
"_Py_PrintReferenceAddresses()" : 1
"_Py_tracemalloc_config" : 1
"_Py_AddToAllObjects()" : 1
(specific : 1
"_PyRuntime.getframe" : 4
"_PyThreadState_GetFrame" : 2
"PyThreadFrameGetter" : 2
bpo-39946.) : 1
"PyGC_Collect()" : 6
bpo-37340 : 1
bpo-38896 : 1
bpo-40428.) : 1
"PyAsyncGen_ClearFreeLists()" : 2
"PyContext_ClearFreeList()" : 2
"PyDict_ClearFreeList()" : 2
"PyFloat_ClearFreeList()" : 2
"PyFrame_ClearFreeList()" : 2
"PyList_ClearFreeList()" : 2
"PyMethod_ClearFreeList()" : 2
"PyCFunction_ClearFreeList()": : 1
"PySet_ClearFreeList()": : 1
"PyTuple_ClearFreeList()" : 2
"PyUnicode_ClearFreeList()": : 1
"_PyUnicode_ClearStaticStrings()" : 2
bpo-39465.) : 1
"Py_UNICODE_MATCH" : 3
"PyUnicode_Tailmatch()" : 4
Cleaned : 4
"_PyBytes_InsertThousandsGroupingLocale" : 2
"_PyBytes_InsertThousandsGrouping" : 2
"_Py_InitializeFromArgs" : 2
"_Py_InitializeFromWideArgs" : 2
"_PyFloat_Repr" : 2
"_PyFloat_Digits" : 2
"_PyFloat_DigitsInit" : 2
"PyFrame_ExtendStack" : 2
"_PyAIterWrapper_Type" : 2
"PyNullImporter_Type" : 2
"PyCmpWrapper_Type" : 2
"PySortWrapper_Type" : 2
"PyNoArgsFunction" : 2
bpo-39372.) : 1
"typing.Literal" : 5
586** : 4
"Literal" : 16
de-duplicates : 3
Equality : 16
"Literal[0] : 2
Literal[False]" : 2
differentiating : 2
Literal[{0}] : 4
Literal[{False}] : 2
Yurii : 33
Karabas : 33
bpo-42345.) : 2
Macs : 4
(based : 5
"ARM64" : 2
architecture) : 1
"universal2" : 1
"Intel : 1
64" : 1
Binaries : 2
deployed : 8
(tested : 3
10.9) : 2
("weaklinking") : 2
Oussoren : 3
Lawrence : 3
D'Anna : 1
bpo-41100.) : 1
"collections.abc.Callable" : 15
flattens : 4
"typing.Callable" : 6
"collections.abc.Callable[[int : 3
str] : 12
str]" : 8
"__args__" : 14
"(int : 3
str)"; : 3
"([int : 3
"types.GenericAlias" : 21
"typing.get_args()" : 6
parameterizing : 4
Jin : 19
bpo-42195.) : 3
";" : 14
"&" : 36
separators : 29
"urllib.parse.parse_qs()" : 7
"urllib.parse.parse_qsl()" : 7
"cgi.parse()" : 5
"cgi.parse_multipart()" : 5
Goldschmidt : 7
Senthil : 12
Kumaran : 10
bpo-42967.) : 5
(amk : 2
amk.ca) : 2
2010 : 4
https://bugs.python.org : 3
bug/patch : 3
migrating : 7
automated : 12
(notably : 2
handling) : 3
migrate : 19
lifecycle : 3
373** : 1
(receiving : 1
fixes) : 1
18--24 : 1
months) : 1
ages : 1
redistributor) : 1
backports : 4
enhancing : 1
publication : 2
exceptional : 11
adequately : 2
wishing : 6
silence : 6
descendants : 18
(Discussed : 1
stdlib-sig : 1
bpo-7319.) : 1
irrelevant : 5
burdening : 1
responding : 3
re-enable : 5
"-Wdefault" : 2
(short : 3
"-Wd") : 2
""d"") : 1
"warnings.simplefilter('default')" : 1
reenables : 1
deprecation : 96
2.7: : 1
("{1,2,3}" : 1
set) : 23
("{i: : 1
i*2 : 1
range(3)}") : 1
ordered-dictionary : 1
"","" : 2
"float(repr(x))" : 1
recovers : 1
Float-to-string : 1
string-to-float : 2
"PyCapsule" : 6
"PyLong_AsLongAndOverflow()" : 4
Python3-mode : 1
"operator.sequenceIncludes()" : 1
"-Qwarn" : 1
Over : 5
experiences : 3
inserted: : 1
OrderedDict : 40
OrderedDict([('first' : 2
('second' : 6
('third' : 5
3)]) : 5
d.items() : 4
[('first' : 3
overwrites : 10
unchanged: : 5
d['second'] : 3
reinserting : 2
5)] : 5
"popitem()" : 8
oldest : 24
od : 1
OrderedDict([(x,0) : 1
range(20)]) : 1
od.popitem() : 2
(19 : 1
(18 : 1
od.popitem(last=False) : 2
same: : 5
od1 : 3
od2 : 3
OrderedDict([('third' : 1
('first' : 1
2)]) : 2
'third' : 1
od2['third']; : 1
od2['third'] : 1
"_asdict()" : 2
appearing : 17
"JSONDecoder" : 5
*object_pairs_hook* : 12
PyYAML : 2
372** : 2
Ronacher : 8
18,446,744,073,709,551,616 : 1
18446744073709551616 : 1
("," : 22
North : 5
Europe) : 1
comma-grouping : 1
mini-language : 4
precision: : 3
'{:20,.2f}'.format(18446744073709551616.0) : 1
'18,446,744,073,709,551,616.00' : 1
'{:20,d}'.format(18446744073709551616) : 1
'18,446,744,073,709,551,616' : 1
all; : 3
three-digit : 4
comma-formatting : 1
378** : 2
"getopt()" : 15
(Making : 1
"optparse"'s : 9
rejected : 6
difficult.) : 1
argparse.ArgumentParser(description='Command-line : 1
example.') : 1
parser.add_argument('-v' : 3
action='store_true' : 14
dest='is_verbose' : 1
help='produce : 1
output') : 2
parser.add_argument('-o' : 3
action='store' : 5
dest='output' : 1
metavar='FILE' : 2
help='direct : 1
FILE : 19
stdout') : 1
parser.add_argument('-C' : 1
dest='context' : 1
metavar='NUM' : 1
default=0 : 2
help='display : 1
NUM : 3
context') : 3
parser.add_argument(nargs='*' : 1
dest='inputs' : 1
help='input : 1
stdin)') : 1
args.__dict__ : 1
"-h" : 12
neatly : 2
./python.exe : 3
argparse-example.py : 4
[-h] : 68
[-v] : 8
[-o : 2
FILE] : 1
[-C : 1
NUM] : 1
[inputs : 2
...]] : 1
stdin) : 1
*dest* : 5
{'output': : 2
'is_verbose': : 2
'context': : 2
'inputs': : 2
[]} : 1
/tmp/output : 1
file1 : 1
file2 : 1
['file1' : 1
'file2']} : 1
"optparse"; : 2
"'*'" : 15
"'+'" : 19
"'?'" : 17
sub-parsers : 1
subcommands : 6
"svn : 5
commit" : 2
checkout" : 2
argument's : 7
"FileType" : 7
389** : 2
flexible; : 1
subsystems : 1
"fileConfig()" : 13
configuring : 20
sources: : 2
JSON; : 1
YAML : 13
"network" : 2
Messages : 14
"network.log" : 1
1MB : 1
logging.config : 11
configdict : 1
'version': : 16
use; : 3
'formatters': : 7
'standard': : 1
'format': : 10
('%(asctime)s : 1
%(name)-15s : 7
'%(levelname)-8s : 1
%(message)s')}} : 1
'handlers': : 24
{'netlog': : 1
{'backupCount': : 1
'class': : 18
'logging.handlers.RotatingFileHandler' : 1
'filename': : 9
'/logs/network.log' : 1
'formatter': : 14
'standard' : 3
'level': : 17
'INFO' : 9
'maxBytes': : 1
1000000} : 1
'syslog': : 1
{'class': : 1
'logging.handlers.SysLogHandler' : 1
'ERROR'}} : 1
subordinate : 6
'loggers': : 4
'network': : 1
['netlog'] : 1
'root': : 9
['syslog'] : 1
logging.config.dictConfig(configdict) : 1
logging.getLogger('/') : 1
logger.error('Database : 1
found') : 2
netlogger : 1
logging.getLogger('network') : 1
netlogger.error('Connection : 1
"SysLogHandler" : 17
syslogging : 1
*socktype* : 3
"socket.SOCK_DGRAM" : 3
"socket.SOCK_STREAM" : 5
"Logger" : 27
"getChild()" : 1
"log : 1
getLogger('app')" : 1
"log.getChild('network.listen')" : 1
"getLogger('app.network.listen')" : 1
"LoggerAdapter" : 13
"isEnabledFor()" : 7
391** : 2
*view* : 13
materialized : 2
"viewkeys()" : 1
"viewvalues()" : 1
"viewitems()" : 1
dict((i*10 : 2
chr(65+i)) : 2
range(26)) : 2
{0: : 2
'A' : 22
130: : 1
'N' : 1
'B' : 40
140: : 1
'O' : 6
20: : 1
250: : 1
'Z'} : 1
d.viewkeys() : 2
dict_keys([0 : 3
130 : 7
140 : 1
150 : 2
250]) : 4
union: : 2
d1 : 1
d2 : 1
dict((i**.5 : 1
range(1000)) : 1
d1.viewkeys() : 2
d2.viewkeys() : 1
set([0.0 : 1
30.0]) : 1
30) : 5
set([0 : 1
120 : 16
modified: : 1
vk : 3
d[260] : 1
'&' : 5
view: : 1
vk: : 1
d[k*2] : 1
3106** : 1
Revamping : 1
dict.keys() : 1
.values() : 1
.items() : 1
Backported : 5
Alexandre : 9
Vassalotti; : 3
bpo-1967 : 1
memoryview(string.letters) : 1
<memory : 3
0x37f850> : 1
len(m) : 2
m[0] : 8
m[25] : 1
m[26] : 1
Indexing : 5
'A') : 2
m2 : 3
m[0:26] : 1
0x37f080> : 1
integers: : 10
m2.tobytes() : 1
'abcdefghijklmnopqrstuvwxyz' : 1
m2.tolist() : 1
[97 : 4
98 : 11
102 : 5
121 : 2
122] : 1
m2[0] : 1
75 : 8
bytearray(string.letters) : 1
bytearray(b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') : 1
mb : 1
memoryview(b) : 4
mb[0] : 1
b[0:5] : 1
bytearray(b'*bcde') : 1
3137** : 1
Pitrou; : 23
bpo-2396 : 1
set; : 14
{1 : 4
5} : 3
set([1 : 1
5]) : 12
set() : 9
set([]) : 1
bpo-2335 : 1
generalizing : 1
list/generator : 1
range(6)} : 2
25} : 1
{('a'*x) : 1
set(['' : 1
'aa' : 1
'aaa' : 1
'aaaa' : 1
'aaaaa']) : 1
bpo-2333 : 1
that: : 7
A() : 8
"contextlib.nested()" : 4
https://codereview.appspot.com/53094; : 1
constructors; : 1
formatting; : 4
modules; : 6
"Decimal"-to-float : 1
round- : 2
half-to-even : 1
icc : 1
suncc : 1
"sys.float_repr_style" : 1
"short" : 2
"legacy" : 3
Gay's : 2
"dtoa.c" : 1
bpo-7117 : 1
295147905179352891391 : 2
float(n) : 2
2.9514790517935283e+20 : 1
long(float(n)) : 2
65535L : 1
2.7's : 1
2.9514790517935289e+20 : 1
-1L : 1
Dickinson; : 27
bpo-3166.) : 1
accurate : 43
(Also : 1
bpo-1811.) : 1
(Removed : 3
Meador : 6
Inge : 5
bpo-5211.) : 1
formatting: : 3
'{}:{}:{}'.format(2009 : 1
04 : 1
'Sunday') : 1
'2009:4:Sunday' : 2
'{}:{}:{day}'.format(2009 : 1
day='Sunday') : 1
auto-numbering : 6
"{...}" : 3
Smith; : 12
bpo-5237.) : 2
right-aligned : 2
"1.5+3j" : 1
bpo-1588 : 1
bpo-7988.) : 1
'F' : 6
'INF' : 1
'NAN' : 1
bpo-3382.) : 1
"object.__format__()" : 3
triggers : 12
"__format__()" : 13
object- : 7
bpo-7994.) : 1
"bit_length" : 2
binary: : 2
bin(n) : 3
'0b100101' : 2
n.bit_length() : 5
2**123-1 : 2
(n+1).bit_length() : 2
124 : 3
Johansson : 2
Stinner; : 7
bpo-3439.) : 2
.os : 1
sep") : 1
Inge; : 1
bpo-7902.) : 1
bpo-1583863.) : 1
"translate()" : 3
bpo-4759.) : 1
"@staticmethod" : 5
"__func__" : 6
Amaury : 11
Forgeot : 11
d'Arc : 6
George : 5
Sakkis; : 2
bpo-5982.) : 1
unset : 22
Fixed : 639
Benjamin : 38
Peterson; : 7
bpo-7604.) : 2
"cp720" : 1
text; : 1
"cp858" : 1
CP : 1
850 : 2
(CP720 : 1
Alexander : 23
Belchenko : 1
bpo-1616979; : 1
CP858 : 1
Hatch : 1
bpo-8016.) : 1
(noted : 1
Kaliszewski; : 1
bpo-4764) : 1
forbids : 3
trusting : 3
(fixed : 3
Krah; : 1
bpo-5677) : 1
tokenizer : 32
line-ending : 2
f((x)): : 1
pass" : 6
Python3-warning : 1
(Noted : 1
Lingard; : 1
bpo-7362.) : 1
weak-referenceable : 1
bpo-8268.) : 1
(bpo-7140) : 1
Curtin; : 4
bpo-7301.) : 2
shells.) : 1
PYTHONWARNINGS=all,error:::Cookie:0 : 1
Peterson.) : 6
grows : 10
survivor : 1
exceeds : 12
bpo-4074.) : 1
Transitively : 1
decreasing : 5
bpo-4688.) : 3
"2**15" : 6
"2**30" : 9
machines; : 2
"--enable-big-digits" : 3
Apart : 10
invisible : 10
structseq : 3
"sys.long_info" : 1
digit: : 2
sys.long_info : 1
sys.long_info(bits_per_digit=30 : 1
sizeof_digit=4) : 2
bpo-4258.) : 2
smaller: : 1
bpo-5260.) : 1
multiplications : 1
50% : 15
150% : 1
divisions : 1
bpo-5512.) : 1
(initial : 2
bpo-1087418) : 1
left-side : 1
special-cases : 2
1--3% : 1
Collin : 9
Winter; : 5
bpo-5176.) : 1
Yasskin; : 2
bpo-4715.) : 1
bases : 31
Gawain : 2
Bolton; : 1
bpo-6713.) : 1
"replace()" : 15
"rindex()" : 3
"rpartition()" : 2
string-like : 4
(strings : 2
reverse-search : 1
character-by-character : 1
Florent : 7
Xicluna; : 4
bpo-7462 : 1
bpo-7622.) : 1
intern : 3
unpickling : 35
Jake : 7
McGuire; : 1
bpo-5084.) : 2
halving : 1
bpo-5670.) : 1
"Bdb" : 5
skipping : 28
glob-style : 8
"django.*"; : 1
Maru : 1
Newby : 1
Kumaran; : 2
bpo-5142.) : 1
(Backported : 2
bpo-7703.) : 1
"bsddb" : 8
4.7.2devel9 : 1
pybsddb : 3
BerkeleyDB : 6
(Updated : 4
Jesús : 6
Cea : 6
Avión; : 1
bpo-8156 : 1
https://hg.jcea.es/pybsddb/file/tip/ChangeLog.) : 1
"BZ2File" : 13
bz2.BZ2File(...) : 1
f:" : 3
Hagen : 4
Fürstenau; : 2
bpo-3860.) : 1
tallying : 1
"KeyError": : 3
Counter : 4
Counter() : 4
english : 2
text': : 1
c[letter] : 1
Counter({' : 1
': : 9
'a': : 2
'i': : 1
'h': : 1
't': : 1
'g': : 1
'f': : 1
'x': : 3
1}) : 6
c['e'] : 3
c['z'] : 1
"most_common()" : 3
"elements()" : 3
"subtract()" : 3
subtracts : 3
adding; : 1
subtracted : 5
c.most_common(5) : 1
[(' : 1
('e' : 1
('s' : 2
('i' : 2
c.elements() : 1
'p' : 3
's' : 10
c.subtract('very : 1
Contributed : 52
bpo-1696199 : 1
"reverse()" : 5
reverses : 5
"maxlen" : 2
"namedtuple" : 9
*rename* : 9
field's : 2
namedtuple : 16
namedtuple('T' : 1
['field1' : 1
'$illegal' : 1
'field2'] : 1
rename=True) : 2
T._fields : 1
('field1' : 1
'_1' : 2
'_2' : 1
'field2') : 1
bpo-1818.) : 2
Daniel : 27
Stutzbach; : 1
bpo-8729.) : 1
Constructors : 10
*allow_no_value* : 6
false; : 6
StringIO : 7
sample_config : 2
[mysqld] : 2
mysql : 2
pid-file : 2
/var/run/mysqld/mysqld.pid : 2
skip-bdb : 2
ConfigParser.RawConfigParser(allow_no_value=True) : 1
config.readfp(StringIO.StringIO(sample_config)) : 1
config.get('mysqld' : 3
'user') : 1
'mysql' : 2
'skip-bdb') : 1
'unknown') : 1
NoOptionError: : 1
'unknown' : 2
section: : 4
'mysqld' : 1
Mats : 1
Kindahl; : 1
bpo-7005.) : 1
Lee; : 1
bpo-3924.) : 1
"deepcopy()" : 3
Collins; : 2
bpo-1515.) : 1
(Changed : 11
Heller; : 3
bpo-4606.) : 1
3.0.9 : 1
Klose; : 1
bpo-8142.) : 1
"total_seconds()" : 1
seconds : 209
Quinlan; : 1
bpo-5788.) : 1
"from_float()" : 4
representation's : 3
"Decimal.from_float(0.1)" : 2
"Decimal('0 : 1
1000000000000000055511151231257827021181583404541015625')" : 1
bpo-4796.) : 1
bpo-2531.) : 1
(added : 5
bpo-8257) : 1
non-European : 1
Arabic-Indic : 2
bpo-6595) : 1
instances; : 6
"canonical()" : 1
"is_canonical()" : 1
Juan : 2
José : 3
Conti; : 1
bpo-7633.) : 1
left-alignment : 2
right-alignment : 2
bpo-6857.) : 2
signaling : 20
"sNAN") : 2
"InvalidOperation" : 12
Quiet : 4
"NaN") : 2
bpo-7279.) : 2
**diff**/**patch** : 1
Anatoly : 1
Techtonik; : 1
bpo-7585.) : 1
regenerates : 4
"MANIFEST" : 11
Tarek : 13
Ziadé; : 3
bpo-8688.) : 1
"IGNORE_EXCEPTION_DETAIL" : 3
Lennart : 2
Regebro; : 1
bpo-7490.) : 1
Unicode- : 3
payload : 79
"output_charset" : 1
Murray; : 1
bpo-1368247.) : 1
rationals : 3
bpo-5812 : 1
float/decimal : 1
bpo-8294.) : 1
">=") : 3
oversight : 6
transfers : 11
Giampaolo : 41
Rodola; : 1
bpo-2054.) : 1
"storbinary()" : 2
uploads : 5
(patch : 14
Mouzo; : 1
bpo-6845.) : 1
decorator: : 7
"total_ordering()" : 4
"__le__()" : 8
"__gt__()" : 10
"__ge__()" : 8
bpo-5479.) : 1
"cmp_to_key()" : 1
"is_tracked()" : 1
gzip.GzipFile(...) : 1
bpo-3860) : 1
"io.BufferedIOBase" : 19
"io.BufferedReader" : 5
Nir : 15
Aides; : 2
bpo-7471) : 1
timestamp : 65
Jacques : 1
Frechet; : 1
bpo-4272.) : 1
padded : 24
bytes; : 8
Tadek : 1
Pietraszek : 1
bpo-2846.) : 2
"algorithms" : 1
"hashlib.algorithms" : 1
"('md5' : 1
'sha1' : 3
'sha224' : 3
'sha256' : 4
'sha384' : 2
'sha512')" : 1
Chenet; : 1
bpo-7418.) : 2
"HTTPResponse" : 5
responses : 38
Kristján : 7
Valur : 7
Jónsson; : 5
bpo-4879.) : 1
"HTTPConnection" : 10
"HTTPSConnection" : 10
*source_address* : 14
"(host : 15
port)" : 16
Eldon : 2
Ziegler; : 2
bpo-3972.) : 2
superseded : 7
"imputil" : 2
(Relative : 1
Schemenauer.) : 1
Derek : 3
Morr; : 3
bpo-1655.) : 1
"getcallargs()" : 2
callable's : 2
getcallargs : 2
b=1 : 3
*pos : 3
**named): : 2
getcallargs(f : 4
'pos': : 4
(3,) : 2
'named': : 4
{}} : 1
a=2 : 2
x=4) : 2
{'x': : 13
4}} : 1
getcallargs(f) : 2
given) : 13
bpo-3135 : 1
"_pyio" : 2
"io.TextIOBase" : 7
"'ignore'") : 1
"io.FileIO" : 6
"OSError" : 187
bpo-4991.) : 1
position; : 6
Chambon; : 1
bpo-6939.) : 1
"itertools.compress(data : 2
selectors)" : 2
Elements : 14
*selectors* : 4
true: : 12
itertools.compress('ABCDEF' : 1
[1,0,1,0,1,1]) : 3
F : 35
"itertools.combinations_with_replacement(iter : 1
r)" : 8
*r*-length : 1
*iter* : 2
"combinations()" : 3
combinations: : 3
itertools.combinations_with_replacement('abc' : 1
'b') : 8
'c') : 10
"itertools.count()" : 3
non-integer : 17
bpo-5032.) : 1
"itertools.combinations()" : 2
"itertools.product()" : 2
*r* : 28
bpo-4816.) : 1
2.0.9 : 1
simplejson : 1
Ippolito; : 1
bpo-4136.) : 2
"json.load()" : 2
bpo-5381.) : 1
re-reads : 1
subsequently : 18
bpo-1607951 : 1
bpo-6896.) : 1
"erf()" : 3
"erfc()" : 2
complementary : 6
"expm1()" : 3
"e**x : 1
"exp()" : 4
subtracting : 8
"gamma()" : 2
Gamma : 5
"lgamma()" : 2
nirinA : 1
raseliarison; : 1
bpo-3366.) : 1
"Manager*" : 1
lekma; : 1
bpo-5585.) : 1
"Pool" : 17
*maxtasksperchild* : 6
Cazabon; : 1
bpo-6963.) : 1
bpo-1664.) : 2
"getresgid()" : 2
"getresuid()" : 2
GIDs : 2
UIDs; : 1
"setresgid()" : 1
"setresuid()" : 1
UIDs : 4
"initgroups()" : 1
(GID/UID : 1
H.; : 1
bpo-6508 : 1
initgroups : 1
Jean-Paul : 3
Calderone; : 2
bpo-7333.) : 1
"os.fork()" : 15
re-initializes : 1
process; : 9
Zsolt : 2
Cserna; : 1
bpo-7242.) : 1
"normpath()" : 4
"abspath()" : 2
("normpath()" : 1
Matt : 12
Giuca : 1
bpo-5827; : 1
Ezio : 15
Melotti : 13
bpo-3426.) : 1
"help('<<')" : 1
"help('@')" : 2
Laban; : 2
bpo-4739.) : 2
"sub()" : 14
"subn()" : 6
Smith.) : 7
"run_path()" : 2
("example.py") : 1
("example.pyc") : 1
("./package/") : 1
("example.zip") : 1
"__main__.py"; : 1
bpo-6816.) : 1
"make_archive()" : 4
(zip : 1
tar-format) : 1
directory's : 9
Ziadé.) : 4
"shutil"'s : 1
"SpecialFileError" : 1
indefinitely : 19
bpo-3002.) : 1
re-installs : 1
robustly : 2
Charles- : 1
Francois : 1
Natali; : 1
bpo-8354.) : 1
user-specific : 6
"getsitepackages()" : 2
"getusersitepackages()" : 3
"getuserbase()" : 3
"USER_BASE" : 4
bpo-6693.) : 2
bpo-3137.) : 1
"create_connection()" : 7
"recv_into()" : 3
"recvfrom_into()" : 1
usefully : 2
bpo-8104.) : 1
"SocketServer" : 2
"TCPServer" : 4
Nagle : 2
"disable_nagle_algorithm" : 1
"False"; : 5
TCP_NODELAY : 6
packet : 14
"timeout" : 13
socket; : 5
"handle_timeout()" : 4
"handle_request()" : 5
bpo-6192 : 1
bpo-6267.) : 2
"enable_load_extension(True)" : 1
"load_extension()" : 2
"SSLSocket" : 20
(fix : 4
bpo-7133) : 1
"SSL_MODE_AUTO_RETRY" : 1
"recv()" : 20
renegotiation : 3
bpo-8222) : 1
"ssl.wrap_socket()" : 5
*ciphers* : 4
encryption : 19
allowed; : 2
bpo-8322.) : 1
ciphers : 25
verified : 8
"unknown : 5
algorithm" : 2
Beda : 1
Kosata : 1
bpo-8484.) : 1
"ssl.OPENSSL_VERSION" : 2
"ssl.OPENSSL_VERSION_INFO" : 2
5-tuple) : 2
"ssl.OPENSSL_VERSION_NUMBER" : 2
bpo-8321.) : 2
"bBhHiIlLqQ"); : 1
"struct.error" : 4
bpo-1523.) : 1
non-integers : 4
bpo-8300.) : 1
"check_output()" : 8
command's : 4
"CalledProcessError" : 9
subprocess.check_output(['df' : 2
'-h' : 3
'.']) : 1
'Filesystem : 1
Avail : 1
Capacity : 1
Mounted : 1
on\n : 1
/dev/disk0s2 : 1
52G : 1
49G : 1
3.0G : 1
94% : 1
/\n' : 1
'/bogus']) : 1
subprocess.CalledProcessError: : 3
'['df' : 1
'/bogus']' : 1
retry : 12
"EINTR" : 7
bpo-1068268.) : 1
"is_declared_global()" : 1
"'python'" : 6
Reifschneider; : 2
bpo-8451.) : 2
"major" : 3
"minor" : 2
"micro" : 1
"releaselevel" : 1
"serial" : 1
Light; : 2
bpo-4285.) : 2
"sys.getwindowsversion()" : 1
"service_pack" : 1
"service_pack_major" : 1
"service_pack_minor" : 1
"suite_mask" : 1
"product_type" : 1
bpo-7766.) : 1
unnoticed : 2
Gustäbel; : 4
bpo-7357.) : 2
filtering : 26
"TarInfo" : 27
"add()" : 14
*filter* : 16
*exclude* : 4
bpo-6856.) : 2
bpo-7232.) : 1
"threading.Event" : 5
Lesher; : 1
bpo-1674032.) : 1
"Unihan.txt" : 1
Anders : 4
Chrigström : 1
d'Arc; : 3
bpo-1571184) : 1
5.2.0 : 1
(updated : 1
bpo-8024) : 1
"urlsplit()" : 9
3986**: : 2
""<something>://..."" : 2
"://" : 2
made-up : 2
2.6.4 : 3
urlparse : 9
urlparse.urlsplit('invented://host/filename?query') : 4
('invented' : 4
'//host/filename?query' : 2
2.6.5) : 2
'host' : 3
'/filename?query' : 2
tuple.) : 2
2732** : 2
bpo-2987) : 1
urlparse.urlparse('http://[1080::8:800:200C:417A]/foo') : 1
ParseResult(scheme='http' : 4
netloc='[1080::8:800:200C:417A]' : 1
path='/foo' : 1
params='' : 9
query='' : 7
fragment='') : 7
"WeakSet" : 2
elements; : 5
Foord.) : 5
ampersands : 2
angle : 29
"<?xml-stylesheet : 2
href="#style1"?>") : 2
"<!-- : 4
-->") : 2
Muller; : 2
bpo-2746.) : 2
keep-alive : 2
exchanged : 3
"encode_threshold" : 1
"SimpleXMLRPCRequestHandler" : 2
"ZipFile" : 17
zipfile.ZipFile(...) : 1
bpo-5511.) : 1
Kuba : 1
Wieczorek; : 1
bpo-4710.) : 1
interleaving : 2
bpo-7610.) : 2
"is_zipfile()" : 1
Gabriel : 2
Genellina; : 2
bpo-4756.) : 1
"writestr()" : 2
*compress_type* : 5
bpo-6003.) : 1
re-implementation : 1
"import_module(name : 1
package=None)" : 1
"..utils.errors" : 1
anchor : 10
import_module : 2
anydbm : 2
import_module('anydbm') : 1
'anydbm' : 1
'/p/python/Lib/anydbm.py'> : 1
file_util : 2
import_module('..file_util' : 1
'distutils.command') : 1
'distutils.file_util' : 1
'/python/Lib/distutils/file_util.pyc'> : 1
pulled : 4
process: : 8
"get_config_var()" : 2
"get_config_vars()" : 6
"get_path()" : 4
site-specific : 12
"is_python_build()" : 1
Ziadé : 6
Distutils2 : 1
(source : 1
https://hg.python.org/distutils2/) : 1
next-generation : 1
re-implement : 2
appearance : 24
Tile : 2
"themed : 1
Tk") : 1
Tcl/Tck : 1
"ttk" : 5
theme : 25
https://www.tcl.tk/man/tcl8.5/TkCmd/ttk_intro.htm : 1
screenshots : 1
Python/Ttk : 1
https://code.google.com/archive/p/python-ttk/wikis/Screenshots.wiki : 1
Guilherme : 10
Polo : 8
bpo-2983 : 1
"Tile.py" : 1
Franklin : 1
Walzer : 4
bpo-2618 : 1
Polo's : 1
enhanced; : 1
Foord : 4
"unittest2" : 1
https://pypi.org/project/unittest2 : 1
py.test : 1
nose : 1
"test/" : 1
"test*.py": : 1
bpo-6001.) : 1
"-b" : 24
"--buffer" : 1
discarded; : 1
"--catch" : 1
control-C : 8
interrupting : 2
impatient : 1
press : 5
noticing : 2
"removeHandler()" : 2
"-f" : 15
"--failfast" : 1
continuing : 12
Cliff : 2
Dyer : 1
Foord; : 3
bpo-8074.) : 1
successes : 2
"SkipTest" : 11
(bpo-1034053) : 1
"assertEqual()" : 19
"assertTrue()" : 6
"assertFalse()" : 4
"longMessage" : 1
"TestCase" : 49
bpo-5663.) : 1
"assertRaises()" : 11
self.assertRaises(KeyError): : 1
{}['foo'] : 1
bpo-4444.) : 1
Module- : 1
class-level : 9
teardown : 4
fixtures : 7
"setUpModule()" : 8
"tearDownModule()" : 8
"setUpClass()" : 8
"tearDownClass()" : 7
equivalent) : 3
"addCleanup()" : 5
"doCleanups()" : 3
(after : 16
"setUp()" : 15
"tearDown()") : 1
(bpo-5679) : 1
engineers : 3
suites; : 1
"assertIsNone()" : 2
"assertIsNotNone()" : 2
"assertIs()" : 1
"assertIsNot()" : 1
bpo-2578.) : 1
"assertIsInstance()" : 1
"assertNotIsInstance()" : 1
bpo-7031.) : 1
"assertGreater()" : 1
"assertGreaterEqual()" : 1
"assertLess()" : 1
"assertLessEqual()" : 1
"assertMultiLineEqual()" : 3
"assertRegexpMatches()" : 3
"assertNotRegexpMatches()" : 1
(bpo-8038) : 1
"assertRaisesRegexp()" : 2
"assertIn()" : 1
"assertNotIn()" : 1
*second* : 15
"assertItemsEqual()" : 1
"assertSetEqual()" : 2
"assertListEqual()" : 3
"assertTupleEqual()" : 3
"assertSequenceEqual()" : 3
"assertDictEqual()" : 3
differences; : 1
"assertDictContainsSubset()" : 4
"assertAlmostEqual()" : 6
"assertNotAlmostEqual()" : 6
*places* : 4
7) : 18
*delta* : 19
"loadTestsFromName()" : 2
"suiteClass" : 1
"TestLoader" : 12
Roddy; : 1
bpo-6866.) : 1
"addTypeEqualityFunc()" : 2
match; : 9
"unittest.main()" : 6
Fernández; : 1
bpo-3379.) : 1
"TestResult" : 20
"startTestRun()" : 2
"stopTestRun()" : 2
bpo-5728.) : 1
"unittest.py" : 1
awkwardly : 1
Peterson) : 1
https://web.archive.org/web/20210619163128/http://www.voidspace.org : 1
.uk/python/articles/unittest2.shtml : 1
Describes : 9
(By : 4
*parser* : 17
"XMLParser" : 20
encoding: : 10
ET.XMLParser(encoding='utf-8') : 1
ET.XML("""<root/>""" : 1
parser=p) : 1
"ParseError" : 1
"position" : 4
(*line* : 1
*column*) : 1
ElementTree's : 1
"Element.write()" : 1
"<empty></empty>" : 1
"<empty/>" : 1
"tag" : 7
"xmlns:<whatever>" : 1
"default_namespace" : 2
"register_namespace()" : 1
true/false : 3
*xml_declaration* : 6
ET.XML("""<list> : 2
<item>1</item> : 2
<item>2</item> : 2
<item>3</item> : 2
</list>""") : 2
ET.XML('<root/>') : 1
new.extend(t) : 1
Outputs : 16
<root><item>1</item>...</root> : 1
ET.tostring(new) : 1
elem:" : 1
"itertext()" : 2
['\n : 1
'1' : 7
'3' : 9
'\n'] : 1
list(t.itertext()) : 1
Deprecated: : 1
elem:") : 1
childless : 1
explicit: : 1
"len(elem) : 1
"elem : 2
develops : 1
https://web.archive.org/web/20 : 1
200703234532/http://effbot.org/zone/elementtree-13-intro.htm : 1
Xicluna : 3
bpo-6472.) : 2
"P-gdb.py" : 1
Malcolm : 6
"python-gdb.py" : 2
"py-up" : 1
"py- : 1
down" : 1
"py-print" : 1
"py-bt" : 1
bpo-8032.) : 1
"pyo" : 1
debugged : 10
GIL; : 1
bpo-3632.) : 1
notifications : 7
bpo-4293.) : 1
"PyCode_NewEmpty()" : 2
"PyCode_New()" : 6
Yasskin.) : 3
"PyErr_NewExceptionWithDoc()" : 3
"char : 20
'lekma' : 1
tracker; : 1
bpo-7033.) : 1
"PyLong_AsLongLongAndOverflow()" : 3
*overflow* : 1
Horsen; : 1
bpo-7528 : 1
bpo-7767.) : 1
stemming : 1
"PyOS_string_to_double()" : 4
"PyOS_ascii_strtod()" : 3
"PyOS_ascii_atof()" : 3
"PySys_SetArgvEx()" : 10
*updatepath* : 8
hole : 6
"PySys_SetArgv()" : 8
ran : 8
attackers : 3
Trojan-horse : 1
"os.py") : 1
embeds : 6
CVE-2008-5983; : 1
bpo-5753 : 1
macros: : 5
"Py_ISALNUM" : 1
"Py_ISALPHA" : 1
"Py_ISDIGIT" : 1
"Py_ISLOWER" : 1
"Py_ISSPACE" : 1
"Py_ISUPPER" : 1
"Py_ISXDIGIT" : 1
"Py_TOLOWER" : 1
"Py_TOUPPER" : 1
classifying : 1
locale-independent : 2
bpo-5793.) : 1
1997; : 1
bpo-8276.) : 1
codes: : 2
"PyFormat_FromString()" : 1
"PyFormat_FromStringV()" : 1
"PyErr_Format()" : 4
"%lld" : 2
"%llu" : 2
bpo-7228.) : 1
forking : 10
fork : 40
"held" : 1
replicated : 4
clean- : 1
Wouters; : 2
bpo-1590864.) : 1
"Py_Finalize()" : 4
"threading._shutdown()" : 2
Olsen; : 2
bpo-1722344.) : 1
"PyMemberDef" : 10
"T_STRING_INPLACE" : 1
bpo-3102.) : 1
"--with-system-expat" : 2
Arfrever : 11
Frehtes : 10
Taifersar : 10
Arahesis; : 4
bpo-7609.) : 1
"--with-valgrind" : 2
memory- : 1
detecting : 15
Henstridge; : 1
bpo-2422.) : 1
dbmliborder=" : 1
bpo-6491.) : 1
chips : 1
"X87_DOUBLE_ROUNDING" : 1
bpo-2937.) : 1
"LDCXXSHARED" : 1
bpo-1222585.) : 1
pkg-config : 11
Clinton : 1
Roy; : 1
bpo-3585.) : 1
bpo-6094.) : 1
attribute; : 12
"socket.CAPI" : 1
"ucnhash_CAPI" : 1
"PyCObject" : 5
safety : 16
Evil : 1
*vtable; : 1
(!PyCapsule_IsValid(capsule : 1
"mymodule.CAPI") : 1
PyErr_SetString(PyExc_ValueError : 1
"argument : 1
invalid"); : 1
vtable : 1
PyCapsule_GetPointer(capsule : 1
"mymodule.CAPI"); : 1
"vtable" : 1
"PyCapsule_IsValid()" : 6
mismatched : 6
capsules : 3
extension- : 1
"PyCObject_AsVoidPtr()" : 2
"CObject" : 1
silent : 13
Hastings; : 2
bpo-5630 : 1
"crtassem.h" : 1
"CRT_ASSEMBLY_VERSION" : 1
"VC_ASSEMBLY_PUBLICKEYTOKEN" : 1
"LIBRARIES_ASSEMBLY_NAME_PREFIX" : 1
Cournapeau; : 1
bpo-4365.) : 1
"CreateKeyEx()" : 1
"DeleteKeyEx()" : 1
"DisableReflectionKey()" : 2
"EnableReflectionKey()" : 2
"QueryReflectionKey()" : 2
Curtin: : 1
bpo-7347.) : 1
"_beginthreadex()" : 1
bpo-3582.) : 1
"os.kill()" : 7
"CTRL_C_EVENT" : 2
"CTRL_BREAK_EVENT" : 2
"Control-Break" : 1
subprocesses; : 2
"TerminateProcess()" : 5
Miki : 2
Tebeka; : 1
bpo-1220212.) : 1
Hirokazu : 3
Yamamoto; : 1
bpo-5913.) : 1
"mimelib" : 1
bpo-4969.) : 1
"/Library/Python/2.7/site-packages" : 2
user-installed : 5
bpo-4865.) : 1
2.7.13: : 1
2.7.13 : 1
Apple-supplied : 1
Pythons : 3
(bpo-28440) : 1
7.1's : 1
"SO_SETFIB" : 1
"getsockopt()"/"setsockopt()" : 1
VanderBeek; : 1
bpo-8235.) : 1
"iobench" : 2
"ccbench" : 2
"Tools" : 1
throughput : 4
latency : 5
bandwidth : 3
"Tools/i18n/msgfmt.py" : 1
plural : 24
".po" : 4
Löwis; : 5
bpo-5464.) : 1
".pyo" : 14
"co_filename" : 4
Ziga : 1
Seilnacht : 1
bpo-1180193.) : 1
"regrtest.py" : 3
"--randseed=" : 1
"-r" : 5
Winter.) : 1
"-j" : 4
multi-core : 3
"-R" : 4
bpo-6152.) : 1
"-F" : 2
bpo-7312.) : 1
"py_compile.py" : 1
Piotr : 1
Ożarowski; : 1
bpo-8233.) : 1
non-float : 1
Belopolsky; : 5
bpo-1533.) : 1
bpo-5920.) : 1
(derived : 1
"object") : 3
(bpo-6101.) : 1
*exc_value* : 4
bpo-7853.) : 1
Leander : 1
Anand : 2
Pillai : 2
bpo-7150.) : 1
(bpo-7348) : 1
"PyArg_Parse*" : 6
(bpo-5080) : 1
genuinely : 2
compelling : 2
addressed : 4
proposals : 3
exemption : 3
"[xxx : 1
refs]" : 1
statistic : 2
"PYTHONSHOWREFCOUNT" : 1
bpo-31733.) : 1
"COUNT_ALLOC" : 1
anymore: : 6
"PYTHONSHOWALLOCCOUNT" : 1
bpo-31692.) : 1
2.7.15 : 2
434** : 1
NEWS : 1
466** : 4
approved : 4
2.7.7 : 1
2.7.7: : 1
"hmac.compare_digest()" : 3
resistant : 6
Gaynor; : 3
bpo-21306.) : 1
1.0.1g : 1
Zachary : 9
Ware; : 1
bpo-21462.) : 1
2.7.8: : 1
"hashlib.pbkdf2_hmac()" : 3
broadly : 2
bpo-21304.) : 1
1.0.1h : 1
Ware : 8
bpo-21671 : 1
CVE-2014-0224) : 1
2.7.9: : 1
3.4's : 1
Indication : 3
TLS1.x : 1
"SSLContext" : 40
Gaynor : 7
Reid; : 1
bpo-21308.) : 1
"Version : 1
2.7.9" : 1
"os.urandom()" : 21
reopening : 1
bpo-21305.) : 1
"hashlib.algorithms_guaranteed" : 1
"hashlib.algorithms_available" : 2
bpo-21307) : 1
477** : 1
approves : 1
453** : 6
2.7.9 : 5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 6
453**) : 4
bootstrap : 16
1.5.6 : 1
2.7.x : 1
"pipX" : 6
"pipX.Y" : 4
(users : 2
opt : 17
process) : 9
"py : 10
pip" : 5
packagers : 6
manager) : 4
~~~~~~~~~~~~~~~~~~~~~ : 6
bootstrapping : 15
Donald : 6
Stufft : 4
----------------------------------------------------------------------------- : 2
476** : 1
improving : 15
urllib2 : 2
ssl._create_unverified_context() : 2
ssl.create_default_context(cafile="/path/to/file.crt") : 2
urllib2.urlopen("https://invalid-cert" : 1
context=context) : 2
493** : 1
permissive : 4
establishing : 5
2.7.12 : 1
"PYTHONHTTPSVERIFY" : 1
2.7.8 : 1
establishment : 3
"ssl._https_verify_certificates()" : 1
cross-compilation : 5
autotools-based : 3
regeneration : 14
pregenerated : 4
versions) : 4
Makefile.pre.in : 3
bpo-23404.) : 6
2.7.14 : 2
Philip : 5
Jenvey : 2
Ryan : 7
Lovett : 1
Murray : 20
Hugh : 1
Secker-Walker : 1
Editors: : 2
<elvis@magic.io> : 3
<yury@magic.io> : 2
2015 : 7
478** : 1
"typing": : 1
"zipapp": : 1
441 : 1
Improving : 2
"bytes : 5
args" : 8
"bytearray : 2
args": : 1
"bytes.hex()" : 5
"bytearray.hex()" : 2
"memoryview.hex()" : 2
Arnon : 5
Yaari : 5
bpo-9951.) : 1
dimensional) : 1
bpo-23632.) : 1
"gi_yieldfrom" : 2
"yield : 33
from" : 27
Benno : 2
Leslie : 2
bpo-24450.) : 1
"RecursionError" : 16
bpo-19235.) : 2
"LC_TYPE" : 2
("C" : 2
"strict" : 26
bpo-19977.) : 1
488 : 1
overview.) : 2
489 : 2
decouples : 1
"os.scandir()" : 14
"subprocess.run()" : 8
streamlined : 2
SSLv3 : 10
instantiating : 23
"ssl.SSLContext" : 24
bpo-22638 : 1
2.7.) : 1
attacks : 29
bpo-22796.) : 1
MSI : 23
user-facing : 6
*awaitable : 3
*coroutine : 12
functions* : 5
iteration* : 1
managers* : 1
coro(): : 1
suspend : 13
*awaited* : 2
rudimentary : 1
http_get(domain): : 1
asyncio.open_connection(domain : 1
writer.write(b'\r\n'.join([ : 1
b'GET : 1
HTTP/1.1' : 1
b'Host: : 1
%b' : 1
domain.encode('latin-1') : 1
b'Connection: : 2
close' : 2
b'' : 11
])) : 1
reader: : 7
print('>>>' : 1
writer.close() : 7
asyncio.get_event_loop() : 3
loop.run_until_complete(http_get('example.com')) : 1
loop.close() : 8
coro(name : 1
lock): : 1
print('coro : 3
{}: : 4
lock'.format(name)) : 3
asyncio.sleep(1) : 10
asyncio.Lock() : 3
coros : 2
asyncio.gather(coro(1 : 1
coro(2 : 1
lock)) : 1
loop.run_until_complete(coros) : 1
coro : 10
3.5.2: : 5
"__aiter__" : 12
iterators* : 1
"PendingDeprecationWarning".See : 1
-------------------------------------------------------------- : 2
465** : 4
"@" : 19
"__matmul__()" : 2
"__rmatmul__()" : 1
"__imatmul__()" : 1
in- : 9
science : 4
(H : 2
r).T : 2
inv(H : 1
H.T) : 1
r) : 6
dot((dot(H : 1
beta) : 8
dot(inv(dot(dot(H : 1
V) : 1
H.T)) : 1
dot(H : 1
r)) : 4
numpy.ones(3) : 1
array([ : 4
1. : 6
1.]) : 2
numpy.eye(3) : 1
array([[ : 1
0. : 4
0.] : 2
1.]]) : 1
Nathaniel : 10
Peterson : 16
448** : 9
unpackings : 7
print(*[1] : 1
*[2] : 1
*[4 : 1
fn(a : 1
d): : 1
d) : 3
fn(**{'a': : 1
3} : 11
**{'b': : 1
4}) : 3
displays): : 1
*range(4) : 1
[*range(4) : 1
{*range(4) : 1
*(5 : 1
7)} : 1
{0 : 2
7} : 2
**{'y': : 1
2}} : 1
'y': : 12
2} : 11
Joshua : 9
Landau; : 1
Girdhar : 3
Landau : 1
461** : 3
"bytearrays" : 1
detracts : 1
wire : 9
b'Hello : 14
%b!' : 2
b'World' : 1
World!' : 2
b'x=%i : 1
y=%f' : 1
2.5) : 4
b'x=1 : 1
y=2.500000' : 1
"%b" : 3
"%a" : 5
"repr(obj).encode('ascii' : 2
'backslashreplace')"): : 1
'World' : 1
__bytes__ : 3
b'price: : 1
%a' : 1
'10€' : 1
b"price: : 1
'10\\u20ac'" : 1
"%r" : 3
codebases : 2
Furman; : 2
Furman : 20
3107**) : 1
Experience : 1
evident : 1
module* : 4
annotations: : 3
greeting(name: : 2
str) : 30
*no : 2
runtime* : 1
mypy) : 1
on-demand : 2
assignable : 3
from) : 6
Jukka : 2
Lehtosalo : 1
Langa; : 1
------------------------------------------------------------------------- : 2
471** : 2
"os.walk()" : 5
"scandir" : 2
directories) : 8
"entry.is_file()" : 2
os.scandir(path): : 1
entry.name.startswith('.') : 2
entry.is_file(): : 2
print(entry.name) : 2
Hoyt : 8
"errno.EINTR" : 1
"InterruptedError" : 33
intermittently : 1
unreadable : 10
Compare: : 2
print("Hello : 5
World") : 3
InterruptedError: : 1
475** : 28
retried : 18
Below : 10
signal: : 6
"io.open()"; : 1
"fchdir()" : 1
"fchmod()" : 1
"fchown()" : 1
"fdatasync()" : 1
"fsync()" : 2
"ftruncate()" : 2
"mkfifo()" : 3
"mknod()" : 2
"posix_fadvise()" : 2
"posix_fallocate()" : 1
"pread()" : 1
"pwrite()" : 1
"readv()" : 1
"sendfile()" : 9
"waitid()" : 9
"writev()"; : 1
"os.close()" : 5
"os.dup2()" : 4
errors; : 1
syscall : 32
rationale); : 1
"devpoll.poll()" : 1
"epoll.poll()" : 1
"kqueue.control()" : 1
"poll.poll()" : 1
"select()"; : 1
"accept()" : 11
"connect()" : 23
"recvfrom()" : 2
"recvmsg()" : 13
"sendall()" : 3
"sendmsg()" : 8
"sendto()"; : 1
"signal.sigtimedwait()" : 2
"signal.sigwaitinfo()"; : 1
Charles-François : 5
Natali : 5
French : 9
connection) : 5
conceal : 1
obscure : 14
driving : 4
479** : 11
unguarded : 1
pernicious : 1
*__future__* : 1
necessary: : 3
generator_stop : 2
gen(): : 4
next(iter([])) : 1
next(gen()) : 1
Angelico : 4
485** : 5
"math.isclose()" : 1
"cmath.isclose()" : 1
"close" : 17
tolerances : 3
tolerance : 10
"isclose" : 1
4.99998 : 2
math.isclose(a : 5
rel_tol=1e-5) : 1
rel_tol=1e-6) : 1
abs_tol=0.00003) : 1
abs_tol=0.00001) : 1
Christopher : 3
Barker; : 1
Barker : 4
Tal : 16
Einat : 16
486** : 3
397**) : 1
"VIRTUAL_ENV" : 3
unoptimized : 2
regenerate : 7
"importlib.util.cache_from_source()" : 4
opt- : 2
Behnel : 22
""namereplace"" : 1
""backslashreplace"" : 2
bpo-19676 : 1
bpo-22286.) : 1
bpo-23681.) : 1
Kazakh : 3
"kz1048" : 1
Tajik : 2
"koi8_t" : 1
bpo-22682 : 1
bpo-22681.) : 1
Berker : 32
Peksag : 31
bpo-24064.) : 2
bpo-17636.) : 1
*provisional* : 6
(specified : 6
441**) : 1
bpo-1739468 : 1
publicized : 1
"myapp" : 5
running: : 8
myapp : 8
myapp.pyz : 3
bpo-23491 : 1
441** : 1
"ArgumentParser" : 46
Jonathan : 9
Paugh : 2
paul : 2
j3 : 2
Eriksson : 2
bpo-14910.) : 1
3.4.x : 3
3.4.0: : 1
APIs: : 16
"loop.set_debug()" : 3
"loop.get_debug()" : 2
Stinner.) : 8
proactor : 9
bpo-22560.) : 1
"loop.is_closed()" : 2
bpo-21326.) : 1
"loop.create_task()" : 10
"Task" : 22
"create_task" : 1
"asyncio.gather()" : 4
"transport.get_write_buffer_limits()" : 2
inquire : 2
*high-* : 1
*low-* : 1
water : 6
limits : 56
"async()" : 1
"ensure_future()" : 7
Selivanov.) : 8
"loop.set_task_factory()" : 2
"loop.get_task_factory()" : 2
"Queue.join()" : 1
"Queue.task_done()" : 1
"JoinableQueue" : 4
"asyncio.Queue" : 3
Updates : 23
3.5.1: : 4
"loop.run_until_complete()" : 4
"run_coroutine_threadsafe()" : 4
Vincent : 11
Michel.) : 2
"Transport.is_closing()" : 2
"loop.create_server()" : 17
hosts : 23
Yann : 3
Sionneau.) : 2
"loop.create_future()" : 5
uvloop : 3
"asyncio.Future" : 14
"loop.get_exception_handler()" : 3
"StreamReader.readuntil()" : 2
Korenberg.) : 2
"loop.create_connection()" : 20
"getaddrinfo" : 2
Jesse : 16
Jiryu : 10
Davis.) : 3
"loop.sock_connect(sock : 1
address)" : 8
*address* : 67
"BZ2Decompressor.decompress" : 1
*max_length* : 16
decompressed : 15
Nikolaus : 11
Rath : 11
bpo-15955.) : 2
"FieldStorage" : 16
*context : 35
manager* : 41
bpo-20289.) : 1
"isclose()" : 2
bpo-24270.) : 2
"InteractiveInterpreter.showtraceback()" : 1
Claudiu : 44
Popa : 44
bpo-17442.) : 1
Snow : 17
bpo-16991.) : 1
"OrderedDict.items()" : 1
"OrderedDict.keys()" : 1
"OrderedDict.values()" : 1
bpo-19505.) : 1
"MutableSequence" : 6
substitutability : 2
bpo-23704.) : 1
updated: : 2
namedtuple('Point' : 2
['x' : 5
'y']) : 3
Point.__doc__ : 1
coodinate' : 1
Point.x.__doc__ : 1
'abscissa' : 1
Point.y.__doc__ : 1
'ordinate' : 1
"__getnewargs__()" : 6
"__rmod__()" : 1
"casefold()" : 5
"format_map()" : 1
"isprintable()" : 1
"maketrans()" : 1
Joe : 9
Jevnik : 9
bpo-22189.) : 1
"Sequence.index()" : 1
Devin : 4
Jeanpierre : 3
bpo-23086.) : 1
"Generator" : 26
bpo-24018.) : 1
"Awaitable" : 4
"Coroutine" : 4
"AsyncIterator" : 6
"AsyncIterable" : 4
bpo-24184.) : 1
"-j : 1
*N*" : 1
"compile_dir()" : 3
"workers" : 1
bpo-16104.) : 1
bpo-19628.) : 1
"-q" : 13
"quiet" : 3
"compile_file()" : 1
"compile_path()" : 1
suppression : 8
Kluyver : 10
bpo-21338.) : 1
"Executor.map()" : 4
*chunksize* : 12
batching : 2
"ProcessPoolExecutor()" : 1
bpo-11271.) : 1
CPUs : 14
bpo-21527.) : 1
Converters : 1
proxies : 29
conv['list'] : 1
v: : 5
[e.strip() : 1
v.split() : 1
e.strip()] : 1
cfg : 3
configparser.ConfigParser(converters=conv) : 1
cfg.read_string(""" : 1
[s] : 1
cfg.get('s' : 1
'list') : 2
'a : 6
g' : 1
cfg.getlist('s' : 1
cfg['s'] : 1
section.getlist('list') : 1
bpo-18159.) : 1
"redirect_stderr()" : 1
(similar : 8
"redirect_stdout()") : 1
inflexible : 2
contextlib.redirect_stderr(f): : 1
logging.warning('warning') : 1
f.getvalue() : 2
'WARNING:root:warning\n' : 1
bpo-22389.) : 1
"writerow()" : 3
bpo-23171.) : 1
"update_lines_cols()" : 1
"LINES" : 7
"COLS" : 2
resizing : 9
bpo-4254.) : 1
"dumb.open" : 1
""n"" : 2
bpo-18039.) : 1
charset : 38
"HtmlDiff.make_file()" : 1
*charset* : 35
""ISO-8859-1"" : 1
bpo-2052.) : 1
"diff_bytes()" : 1
bpo-17445.) : 1
"build_ext" : 1
bpo-5309.) : 1
"xz" : 2
"xztar" : 12
"bdist : 1
--format" : 1
bpo-16314.) : 1
"DocTestSuite()" : 5
"unittest.TestSuite" : 13
Glenn : 1
bpo-15916.) : 1
"Policy.mangle_from_" : 1
""From : 3
bodies : 14
"">"" : 3
Milan : 14
Oberkirch : 13
bpo-20098.) : 1
"Message.get_content_disposition()" : 1
*Content-Disposition* : 8
Abhilash : 4
Raj : 4
bpo-21083.) : 1
"EmailPolicy.utf8" : 1
"Messages" : 1
6532** : 4
6531** : 3
"SMTPUTF8" : 13
bpo-24211.) : 1
"mime.text.MIMEText" : 1
"charset.Charset" : 1
Claude : 4
Paroz : 4
bpo-16324.) : 1
Animal : 5
enum.Enum('Animal' : 1
dog' : 1
start=10) : 1
Animal.cat : 1
<Animal.cat: : 1
10> : 2
Animal.dog : 1
<Animal.dog: : 1
11> : 1
bpo-21706.) : 1
"enable()" : 7
"dump_traceback()" : 1
"dump_traceback_later()" : 3
Wei : 3
Wu : 3
bpo-23566.) : 1
"lru_cache()" : 2
Joiner : 2
Alexey : 7
Kachayev : 3
bpo-14373.) : 1
"iglob()" : 4
"glob()" : 10
""**"" : 9
bpo-13968.) : 1
""x"" : 7
Heaney : 2
bpo-19222.) : 1
"merge()" : 1
*key : 15
comparison: : 5
['9' : 2
'777' : 3
'55555'] : 2
['88' : 1
'6666'] : 1
list(heapq.merge(a : 1
key=len)) : 1
'88' : 2
'6666' : 2
list(heapq.merge(reversed(a) : 1
reversed(b) : 1
key=len : 1
reverse=True)) : 1
['55555' : 1
'9'] : 2
bpo-13742.) : 1
"HTTPStatus" : 2
phrases : 2
Demian : 16
Brecht : 17
bpo-21793.) : 2
"HTTPConnection.getresponse()" : 2
"RemoteDisconnected" : 2
"ConnectionError" : 9
(of : 14
reconnect : 2
request: : 4
http.client.HTTPConnection('www.python.org') : 2
conn.request('GET' : 1
'/') : 2
resp : 12
conn.getresponse() : 7
http.client.RemoteDisconnected: : 1
Panter : 29
bpo-3566.) : 1
"Lib/idlelib/NEWS.txt" : 2
3.4.0 : 4
3.5.x : 3
"LOGOUT" : 3
bpo-4972.) : 1
5161** : 1
(ENABLE : 1
Extension) : 3
6855** : 3
(UTF-8 : 2
Support) : 1
"IMAP4.enable()" : 1
"IMAP4.utf8_enabled" : 1
Maciej : 4
Szulik : 3
bpo-21800.) : 2
usernames : 6
RFCs : 25
"what()" : 4
OpenEXR : 3
Vignali : 1
bpo-20295) : 1
WebP : 4
Fabrice : 2
Aneche : 2
bpo-20197.) : 1
"util.LazyLoader" : 1
bpo-17621.) : 1
"abc.InspectLoader.source_to_code()" : 1
"exec(code : 2
module.__dict__)" : 2
bpo-21156.) : 1
"util.module_from_spec()" : 1
"types.ModuleType" : 6
import- : 1
passed-in : 9
bpo-20383.) : 1
"Signature" : 6
"Parameter" : 6
picklable : 19
bpo-20726 : 1
bpo-20334.) : 1
"BoundArguments.apply_defaults()" : 2
b='ham' : 2
ba : 3
inspect.signature(foo).bind('spam') : 2
ba.apply_defaults() : 2
ba.arguments : 2
OrderedDict([('a' : 1
'spam') : 1
'ham') : 1
('args' : 1
())]) : 1
bpo-24190.) : 1
"Signature.from_callable()" : 4
bpo-17373.) : 1
"signature()" : 11
*follow_wrapped* : 1
"__wrapped__" : 23
bpo-20691.) : 1
"iscoroutine()" : 1
"iscoroutinefunction()" : 1
"isawaitable()" : 1
"getcoroutinelocals()" : 1
"getcoroutinestate()" : 1
bpo-24017 : 1
bpo-24400.) : 2
"stack()" : 1
"trace()" : 2
"getouterframes()" : 1
"getinnerframes()" : 1
Shahaf : 4
bpo-16808.) : 1
"BufferedIOBase.readinto1()" : 1
stream's : 7
"RawIOBase.read()" : 1
"RawIOBase.readinto()" : 1
bpo-20578.) : 1
"IPv4Network" : 12
"IPv6Network" : 10
"(address : 4
netmask)" : 1
addresses: : 5
ipaddress.IPv4Network(('127.0.0.0' : 2
8)) : 6
IPv4Network('127.0.0.0/8') : 2
'255.0.0.0')) : 1
Moody : 4
bpo-16531.) : 1
"reverse_pointer" : 1
PTR : 3
record: : 3
addr : 17
ipaddress.IPv4Address('127.0.0.1') : 1
addr.reverse_pointer : 1
'1.0.0.127.in-addr.arpa' : 2
addr6 : 2
ipaddress.IPv6Address('::1') : 1
addr6.reverse_pointer : 1
'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa' : 1
Leon : 2
Weber : 5
bpo-20480.) : 1
"json.tool" : 7
"--sort-keys" : 3
bpo-21650.) : 1
"JSONDecodeError" : 6
bpo-19361.) : 1
"lazycache()" : 1
non-file-based : 2
"getline()" : 3
carry : 21
Collins : 9
bpo-17911.) : 3
"delocalize()" : 2
"LC_NUMERIC" : 18
account: : 3
locale.setlocale(locale.LC_NUMERIC : 2
'de_DE.UTF-8') : 1
'de_DE.UTF-8' : 1
locale.delocalize('1.234,56') : 1
'1234.56' : 2
'en_US.UTF-8') : 1
'en_US.UTF-8' : 1
locale.delocalize('1,234.56') : 1
Cédric : 4
Krier : 4
bpo-13918.) : 1
("Logger" : 1
"log()" : 5
"exception()" : 5
"critical()" : 7
"debug()" : 25
*exc_info* : 11
ex: : 1
logging.error('exception' : 1
exc_info=ex) : 1
ERROR:root:exception : 1
bpo-20537.) : 1
"handlers.HTTPHandler" : 1
bpo-22788.) : 1
"handlers.QueueListener" : 1
*respect_handler_level* : 1
"LZMADecompressor.decompress()" : 1
"inf" : 15
"nan" : 7
bpo-23185.) : 1
"gcd()" : 2
bpo-22486.) : 1
"sharedctypes.synchronized()" : 1
bpo-21565.) : 1
"methodcaller()" : 3
pickling : 68
bpo-22955.) : 1
"matmul()" : 1
"imatmul()" : 1
bpo-21176.) : 1
"scandir()" : 22
"DirEntry" : 1
bpo-22524.) : 1
"stat_result.st_file_attributes" : 1
"dwFileAttributes" : 2
"BY_HANDLE_FILE_INFORMATION" : 2
"GetFileInformationByHandle()" : 2
bpo-21719.) : 1
"urandom()" : 1
"getrandom()" : 15
3.17 : 9
"getentropy()" : 2
bpo-22181.) : 1
"get_blocking()" : 2
"set_blocking()" : 2
descriptor's : 6
("O_NONBLOCK".) : 1
bpo-22054.) : 1
bpo-23668.) : 1
"os.path.commonpath()" : 1
sub-path : 3
"os.path.commonprefix()" : 1
os.path.commonprefix(['/usr/lib' : 2
'/usr/local/lib']) : 4
'/usr/l' : 2
os.path.commonpath(['/usr/lib' : 2
Rafik : 2
Draoui : 2
bpo-10395.) : 1
"Path.samefile()" : 2
"Path" : 16
pathlib.Path('/etc/hosts') : 1
p2 : 9
pathlib.Path('/etc/../etc/hosts') : 1
p1.samefile(p2) : 1
Vajrasky : 14
Kok : 13
bpo-19775.) : 1
"Path.mkdir()" : 3
*exist_ok* : 8
"mkdir : 4
-p" : 4
"os.makedirs()" : 5
bpo-21539.) : 1
"Path.expanduser()" : 2
"~" : 18
"~user" : 7
bpo-19776.) : 1
"Path.home()" : 2
user’s : 1
Mayank : 3
Tripathi : 2
bpo-19777.) : 1
"Path.write_text()" : 1
"Path.read_text()" : 1
"Path.write_bytes()" : 1
"Path.read_bytes()" : 1
read/write : 24
"~/spam42": : 1
pathlib.Path('~/spam42') : 1
p.expanduser().write_text('ham') : 1
Welborn : 1
bpo-20218.) : 1
bpo-23611.) : 1
"POP3.utf8()" : 1
6856** : 2
(Internationalized : 2
Email) : 2
OberKirch : 1
bpo-21804.) : 1
lookbehind : 8
pat : 3
re.compile(r'(a|b).(?<=\1)c') : 1
pat.match('aac') : 1
<_sre.SRE_Match : 2
span=(0 : 14
match='aac'> : 1
pat.match('bbc') : 1
match='bbc'> : 1
bpo-9179.) : 1
capturing : 34
bpo-22437.) : 1
bpo-1519638.) : 1
"re.error" : 4
"msg" : 15
"pattern" : 9
"pos" : 1
"lineno" : 16
"colno" : 1
re.compile(""" : 1
(?x) : 3
.++ : 1
sre_constants.error: : 1
bpo-22578.) : 1
"append_history_file()" : 1
Bruno : 8
Cauet : 3
bpo-22940.) : 1
"DevpollSelector" : 1
Rodola' : 14
bpo-18931.) : 1
"move()" : 3
*copy_function* : 8
"copy2()" : 13
bpo-19840.) : 1
*xztar* : 2
bpo-5411.) : 1
"set_wakeup_fd()" : 2
bpo-22018.) : 1
"SIG*" : 2
"Enums" : 1
"magic : 4
bpo-21076.) : 1
"SMTPServer" : 11
"SMTPChannel" : 7
*decode_data* : 20
"DATA" : 7
"SMTPServer.process_message()" : 3
"process_message" : 3
bpo-19662.) : 1
advertises : 2
"8BITMIME" : 2
(**RFC : 13
6152**) : 2
"BODY=8BITMIME" : 3
"MAIL" : 6
*mail_options* : 8
bpo-21795.) : 1
6531**: : 1
"SMTPUTF8 : 1
BODY=8BITMIME" : 1
bpo-21725.) : 1
bpo-14758.) : 1
"SMTP.auth()" : 1
bpo-15014.) : 1
"SMTP.set_debuglevel()" : 1
debuglevel : 6
timestamps : 20
Gavin : 1
Chappell : 1
bpo-16914.) : 1
"SMTP.sendmail()" : 2
"SMTP.send_message()" : 1
(SMTPUTF8) : 3
bpo-22027.) : 1
"whathdr()" : 2
bpo-18615.) : 1
bpo-22043.) : 3
"socket.sendfile()" : 2
high-performance : 9
"os.sendfile()" : 8
"socket.send()" : 2
bpo-17552.) : 2
"socket.sendall()" : 2
resets : 20
bpo-23853.) : 2
*backlog* : 7
"socket.listen()" : 1
"SOMAXCONN" : 1
"128" : 2
bpo-21455.) : 1
~~~~~~~~~~~~~~~~~~ : 7
Geert : 3
bpo-21965.) : 1
"SSLObject" : 14
suboptimal : 1
"MemoryBIO" : 3
"SSLSocket"'s : 1
readiness : 4
("select/poll") : 1
"SSLContext.wrap_bio()" : 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 2
bpo-20188.) : 1
*Application-Layer : 2
Negotiation* : 3
7301** : 3
"SSLContext.set_alpn_protocols()" : 2
advertise : 6
handshake : 73
"SSLSocket.selected_alpn_protocol()" : 3
"HAS_ALPN" : 2
ALPN : 12
~~~~~~~~~~~~~ : 6
"SSLSocket.version()" : 1
bpo-20421.) : 1
"SSLSocket.sendfile()" : 1
"SSLSocket.send()" : 3
"ssl.SSLWantReadError" : 2
"ssl.SSLWantWriteError" : 2
bpo-20951.) : 2
"cert_time_to_seconds()" : 1
interprets : 14
5280** : 3
Akira : 6
Li : 9
bpo-19940.) : 2
"SSLObject.shared_ciphers()" : 1
"SSLSocket.shared_ciphers()" : 1
bpo-23186.) : 1
"SSLSocket.do_handshake()" : 5
"SSLSocket.read()" : 1
"SSLSocket.shutdown()" : 1
"SSLSocket.write()" : 1
"match_hostname()" : 9
bpo-23239.) : 1
"Row" : 6
bpo-10203; : 1
Lucas : 2
Sinclair : 1
Jessica : 2
McKellar : 1
bpo-13583.) : 1
"run()" : 55
"CompletedProcess" : 2
bpo-23342.) : 1
subprocess.run(["ls" : 4
"-l"]) : 2
CompletedProcess(args=['ls' : 4
'-l'] : 2
returncode=0) : 2
subprocess.run("exit : 2
shell=True : 6
check=True) : 3
'exit : 2
"/dev/null"] : 2
stdout=subprocess.PIPE) : 1
'-l' : 3
'/dev/null'] : 3
returncode=0 : 2
stdout=b'crw-rw-rw- : 2
16:23 : 2
/dev/null\n') : 1
"set_coroutine_wrapper()" : 1
"get_coroutine_wrapper()" : 1
bpo-24017.) : 2
"is_finalizing()" : 1
*shutting : 2
down* : 2
bpo-22696.) : 1
bpo-23437.) : 1
bpo-21717.) : 2
"TarFile.extractall()" : 2
"TarFile.extract()" : 3
*numeric_owner* : 5
"uid" : 5
"gid" : 5
Vogt : 2
bpo-23193.) : 1
"TarFile.list()" : 1
*members* : 5
"TarFile.getmembers()" : 1
bpo-21549.) : 1
"Lock.acquire()" : 6
"RLock.acquire()" : 3
"monotonic()" : 2
"--unit=*U*" : 1
"usec" : 2
"msec" : 2
"sec" : 2
Julian : 6
Gindi : 2
bpo-18983.) : 1
"timeit()" : 14
*globals* : 35
Roberts : 3
bpo-2527.) : 1
"tkinter._fix" : 2
bpo-20035.) : 1
"walk_stack()" : 2
"walk_tb()" : 1
"print_tb()" : 5
"print_stack()" : 2
*limit* : 29
Kazakov : 2
bpo-22619.) : 1
"coroutine()" : 1
"generator- : 1
like" : 2
*awaitables* : 4
"CoroutineType" : 1
8.0.0 : 3
"TestLoader.loadTestsFromModule()" : 2
keyword- : 5
*pattern* : 37
"load_tests" : 20
bpo-16662.) : 2
discovery : 50
"TestLoader.errors" : 1
bpo-19746.) : 1
"--locals" : 2
bpo-22936.) : 1
"Mock" : 44
*unsafe* : 1
""assert"" : 1
Kushal : 5
Das : 5
bpo-21238.) : 1
"Mock.assert_not_called()" : 1
bpo-21262.) : 1
"MagicMock" : 42
"__divmod__()" : 2
Johannes : 4
Baiter : 2
bpo-20968 : 1
Håkan : 3
Lövdahl : 3
bpo-23581 : 1
bpo-23568.) : 1
"create=True" : 4
"patch()" : 49
bpo-17660.) : 1
"request.HTTPPasswordMgrWithPriorAuth" : 1
"401" : 5
"404" : 4
"Authorization" : 1
Matej : 2
bpo-19494 : 2
Akshit : 1
Khurana : 16
bpo-7159.) : 1
*quote_via* : 6
"parse.urlencode()" : 1
Samwyse : 1
bpo-13866.) : 1
"request.urlopen()" : 1
*context* : 91
bpo-22366.) : 1
"parse.urljoin()" : 1
3986** : 7
1808** : 3
2396** : 4
bpo-22118.) : 1
*headers* : 24
"headers.Headers" : 1
Torres : 2
Navarrete : 2
SilentGhost : 7
bpo-5800.) : 1
"client.ServerProxy" : 2
bpo-20627.) : 1
bpo-22960.) : 1
"xmlreader.InputSource" : 1
bpo-2175.) : 1
bpo-10590.) : 1
unseekable : 9
bpo-23252.) : 1
"ZipFile.open()" : 5
bpo-23001.) : 1
"readdir" : 1
"FindFirstFile"/"FindNextFile" : 1
bpo-23605.) : 1
Construction : 2
"bytes(int)" : 1
(filled : 1
"calloc()" : 5
bpo-21233.) : 2
massively : 1
"subnets()" : 1
"supernet()" : 1
"summarize_address_range()" : 1
"collapse_addresses()" : 1
Albert : 3
Markus : 4
bpo-21486 : 1
bpo-21487 : 1
bpo-20826 : 1
bpo-23266.) : 1
bpo-23133.) : 1
bpo-15381 : 1
bpo-22003.) : 1
"marshal.dumps()" : 2
faster: : 2
65--85% : 1
20--25% : 1
bpo-20416 : 1
bpo-23344.) : 1
bpo-15027.) : 1
bpo-19380.) : 1
"json.dumps()" : 3
"ensure_ascii=False" : 1
"ensure_ascii=True" : 2
bpo-23206.) : 1
"PyObject_IsInstance()" : 3
"PyObject_IsSubclass()" : 3
bpo-22540.) : 1
bpo-22847.) : 1
bpo-23488.) : 1
"property()" : 23
25% : 8
bpo-23910.) : 1
Instantiation : 1
"fractions.Fraction" : 17
bpo-22464.) : 1
"rfind()" : 8
"partition()" : 1
bpo-23573.) : 1
"calloc" : 3
"PyMem_RawCalloc()" : 5
"PyMem_Calloc()" : 6
"PyObject_Calloc()" : 5
"Py_DecodeLocale()" : 19
"_Py_char2wchar()") : 1
"Py_EncodeLocale()" : 9
"_Py_wchar2char()") : 1
bpo-18395.) : 1
"PyCodec_NameReplaceErrors()" : 2
"\N{...}" : 7
bpo-19676.) : 1
"PyErr_FormatV()" : 2
bpo-18711.) : 1
"PyExc_RecursionError" : 4
"PyModule_FromDefAndSpec()" : 3
"PyModule_FromDefAndSpec2()" : 3
"PyModule_ExecDef()" : 2
bpo-24268.) : 1
"PyNumber_MatrixMultiply()" : 2
"PyNumber_InPlaceMatrixMultiply()" : 2
bpo-21176 : 1
"PyTypeObject.tp_finalize" : 1
loaded): : 1
".cpython-<major><minor>m-<architecture>-<os>.pyd": : 1
"<major>" : 2
"<minor>" : 2
"<architecture>" : 2
"i386" : 1
"x86_64" : 1
AMD) : 1
"<os>" : 1
"linux-gnu" : 1
"linux- : 2
gnu32" : 1
"x86_64") : 1
"<debug>.cp<major><minor>-<platform>.pyd": : 1
"<platform>" : 1
"win32" : 2
"win_amd64" : 1
"win_ia64" : 1
"win_arm" : 1
ARM : 7
"<debug>" : 1
"_d" : 1
"-darwin.so" : 1
"async" : 21
non-silent : 1
XP : 4
"formatter" : 8
graduated : 3
slated : 10
"asyncio.async()" : 1
"utf-8" : 16
Directly : 5
"coded_value" : 4
"http.cookies.Morsel" : 3
*LegalChars* : 2
*format_string* : 1
"string.Formatter" : 1
bpo-23671.) : 1
"platform.dist()" : 1
"platform.linux_distribution()" : 1
bpo-1322.) : 1
"from_function" : 2
"from_builtin" : 2
"inspect.Signature" : 3
bpo-24248.) : 1
"inspect.getargspec()" : 2
bpo-20438 : 1
"getfullargspec()" : 2
"formatargspec()" : 2
"inspect.signature()" : 24
bpo-20438.) : 1
"getargvalues()" : 2
"formatargvalues()" : 1
"re.LOCALE" : 9
"re.ASCII" : 7
bpo-22407.) : 1
unrecognized : 17
"'\'" : 14
forbidden : 16
bpo-23622.) : 1
unofficial : 2
*use_load_tests* : 3
"unittest.TestLoader.loadTestsFromModule()" : 4
"__version__" : 4
"Netrc" : 2
Chaput : 2
bpo-6623.) : 1
JoinableQueue : 3
Davis : 13
bpo-23464.) : 1
erroneously : 7
475**: : 1
"datetime.time" : 10
midnight : 5
bpo-13936 : 2
"ssl.SSLSocket.send()" : 1
"gen.gi_code.co_name" : 2
"__qualname__" : 19
("repr(gen)") : 2
bpo-21205.) : 1
"HTMLParser.error()" : 1
"HTMLParserError" : 1
bpo-15114.) : 2
*convert_charrefs* : 10
bpo-21047.) : 1
formally : 6
noting : 2
(ie: : 3
tests) : 3
"'sometype' : 1
protocol" : 2
'sometype'" : 1
bpo-16518.) : 1
"FileNotFoundError" : 24
"find_spec()" : 36
**without** : 3
"sys.path_importer_cache" : 32
(bpo-22834) : 1
refactored : 13
"importlib.machinery.Loader.exec_module()" : 1
"create_module()" : 13
(raises : 2
3.6) : 7
bpo-23014.) : 1
""x*"" : 1
""x+"" : 2
""\b"" : 1
""x*"") : 1
""\b"") : 1
bpo-22818.) : 1
dict-like : 11
consistent: : 1
morsel : 1
"Morsel" : 5
"update()" : 19
bpo-2211.) : 1
*optimization* : 9
*debug_override* : 6
sourceless : 4
"CAN_RAW_FD_FRAMES" : 1
"ssl.cert_time_to_seconds()" : 1
"pygettext.py" : 1
Tool : 1
+NNNN : 2
timezones : 9
POT-Creation-Date : 1
(test) : 1
"str.startswith()" : 1
"str.endswith()" : 1
bpo-24284.) : 1
"inspect.getdoc()" : 5
bpo-15582.) : 1
"functools.partial()" : 18
flattened : 13
Belopolsky : 14
bpo-7830.) : 1
"format" : 17
(non-public) : 1
"PyMemoryViewObject" : 2
"memoryobject.h" : 2
rebuilt : 4
"PyMemAllocator" : 2
"PyMemAllocatorEx" : 2
non-documented : 2
"PyObject_REPR" : 1
"%R" : 3
"PyUnicode_FromFormat()"-like : 1
bpo-22453.) : 1
"__module__" : 23
AttributeError : 44
bpo-20204.) : 1
"tp_reserved" : 2
"tp_as_async" : 3
494** : 1
498 : 2
515 : 2
526 : 1
525 : 1
"secrets": : 1
506 : 1
Secrets : 2
PyPy : 14
"**kwargs" : 19
usability : 8
*path-like : 147
"ResourceWarning" : 28
diagnostics : 3
cryptographically : 10
urandom : 9
entropy : 27
524** : 5
1.1.0 : 22
SHA-3 : 4
"scrypt()" : 2
528 : 1
529 : 1
prefers : 12
long-path : 1
"python36.zip" : 1
infer : 4
*f-strings* : 1
protocol: : 19
"Fred" : 2
f"He : 3
{name}." : 1
'He : 1
Fred.' : 1
decimal.Decimal("12.34567") : 2
f"result: : 2
{value:{width}.{precision}}" : 2
'result: : 2
12.35' : 2
primes: : 1
List[int] : 1
captain: : 1
Starship: : 2
stats: : 3
Dict[str : 2
attach : 22
Gonzalez : 2
House : 1
Ivan : 39
Levkivskyi : 38
Lisa : 12
Roach : 10
mypy : 7
pytype : 2
515** : 5
1_000_000_000_000_000 : 1
1000000000000000 : 1
0x_FF_FF_FF_FF : 1
4294967295 : 1
"'_'" : 8
thousands : 15
presentation : 32
"'d'" : 16
"'o'" : 6
"'x'" : 42
'{:_}'.format(1000000) : 1
'1_000_000' : 1
'{:_x}'.format(0xFFFFFFFF) : 1
'ffff_ffff' : 1
lifted : 3
generators*: : 1
ticker(delay : 1
to): : 1
"""Yield : 2
*to* : 4
*delay* : 21
seconds.""" : 1
range(to): : 1
asyncio.sleep(delay) : 3
530** : 4
[i : 4
aiter() : 1
[await : 2
fun() : 1
condition()] : 1
"__init_subclass__" : 10
classmethod : 71
created: : 6
PluginBase: : 1
__init_subclass__(cls : 3
super().__init_subclass__(**kwargs) : 2
cls.subclasses.append(cls) : 1
Plugin1(PluginBase): : 1
Plugin2(PluginBase): : 1
zero-argument : 10
"__init_subclass__()" : 5
"__classcell__" : 9
"type.__new__" : 12
487** : 7
Teichmann : 5
"__set_name__()" : 10
IntField: : 1
__get__(self : 13
owner): : 1
instance.__dict__[self.name] : 2
__set__(self : 8
isinstance(value : 3
int): : 4
ValueError(f'expecting : 1
{self.name}') : 1
initializer: : 2
__set_name__(self : 6
Model: : 1
int_field : 1
IntField() : 1
led : 12
path) : 17
"__fspath__()" : 5
*path-like* : 9
"os.DirEntry" : 17
"pathlib.Path" : 19
open(pathlib.Path("README")) : 1
os.path.splitext(pathlib.Path("some_file.txt")) : 1
('some_file' : 1
'.txt') : 1
os.path.join("/a/b" : 1
pathlib.Path("c")) : 1
'/a/b/c' : 1
os.fspath(pathlib.Path("some_file.txt")) : 1
'some_file.txt' : 1
Dusty : 2
Phillips : 2
Jelle : 53
Zijlstra.) : 1
Koos : 1
Zevenhoven : 1
clocks : 7
instance) : 33
insufficient : 12
moment : 20
495** : 4
*fold* : 1
differentiate : 5
u0 : 6
datetime(2016 : 3
tzinfo=timezone.utc) : 6
i*HOUR : 3
u.astimezone(Eastern) : 3
print(u.time() : 3
'UTC : 3
t.time() : 3
t.tzname() : 3
t.fold) : 2
04:00:00 : 3
00:00:00 : 7
EDT : 11
05:00:00 : 3
01:00:00 : 5
06:00:00 : 3
EST : 10
07:00:00 : 3
02:00:00 : 3
"fold" : 13
(chronologically) : 1
Prior : 19
"PYTHONLEGACYWINDOWSFSENCODING" : 4
(returned : 3
type.__prepare__()) : 1
insertion-order-preserving : 2
520** : 1
468** : 3
"compact" : 3
order-preserving : 2
mandate : 2
implementations; : 3
backwards- : 2
INADA : 20
bpo-27350 : 1
Idea : 2
intercept : 8
523** : 8
pluggable : 3
JITs : 1
use-cases : 8
Semantics : 1
"PYTHONMALLOC=debug" : 3
"0xCB" : 3
Freed : 1
"0xDB" : 3
violations : 5
(buffer : 4
underflows) : 1
overflows) : 1
"PyObject_Malloc()") : 4
"PyMem_Malloc()") : 4
"PyMem_SetupDebugHooks()" : 8
"PYTHONMALLOC=malloc" : 1
"python3.6 : 3
tracemalloc=5" : 1
(store : 2
traces): : 1
p=0x7fbcd41666f8: : 1
pad : 44
p-7 : 1
FORBIDDENBYTE : 2
tail=0x7fbcd41666fc : 1
(0xfb): : 1
tail+0: : 1
0x02 : 1
*** : 11
OUCH : 1
tail+1: : 1
0xfb : 7
tail+2: : 1
tail+3: : 1
tail+4: : 1
tail+5: : 1
tail+6: : 1
tail+7: : 1
#1233329 : 1
malloc/realloc : 1
p: : 5
1a : 1
2b : 1
00 : 26
first): : 5
"test/test_bytes.py" : 2
323 : 3
"unittest/case.py" : 4
600 : 4
648 : 2
"unittest/suite.py" : 6
122 : 3
84 : 4
Fatal : 6
0x00007fbcdbd32700 : 1
test_hex : 1
__call__ : 4
bpo-26516 : 1
bpo-26564.) : 1
"--with-dtrace" : 1
call/return : 5
started/finished : 1
instrument : 1
application-specific : 3
profiling/debugging : 1
bpo-21590 : 1
Avión : 5
Nikhil : 1
Benesch.) : 1
"SyntaxWarning" : 17
Barnert : 2
bpo-25958.) : 1
""[Previous : 2
{count} : 5
times]"" : 2
Emanuel : 13
bpo-26823.) : 3
"ModuleNotFoundError" : 15
(subclass : 2
"ImportError") : 3
ImportError : 30
try-except) : 2
bpo-15767.) : 3
bpo-23722.) : 2
*NOT* : 1
3.6+ : 1
506** : 3
D'Aprano : 5
Exhausted : 2
bpo-26492 : 1
"ast.Constant" : 6
optimizers : 2
bpo-26146 : 1
status): : 1
"get_event_loop()" : 5
bpo-28613.) : 1
bpo-27041.) : 1
bpo-27040.) : 1
"StreamReader.readexactly()" : 1
Korenberg : 1
bpo-28370.) : 1
"loop.getaddrinfo()" : 4
"loop.stop()" : 2
bpo-25593.) : 1
"Future.set_exception" : 2
bpo-26221.) : 1
"loop.connect_accepted_socket()" : 3
Fulton : 3
bpo-27392.) : 1
"TCP_NODELAY" : 5
transports : 17
bpo-27456.) : 2
"loop.shutdown_asyncgens()" : 2
bpo-28003.) : 1
"Future" : 32
bpo-26081 : 1
bpo-28544.) : 2
"b2a_base64()" : 1
bpo-25357.) : 1
"cmath.tau" : 1
(*τ*) : 2
bpo-12345 : 2
628** : 3
constants: : 16
"cmath.inf" : 2
"cmath.nan" : 2
"math.inf" : 2
"math.nan" : 5
"cmath.infj" : 2
"cmath.nanj" : 2
bpo-23229.) : 1
"Collection" : 6
docs : 56
bpo-27598.) : 2
"Reversible" : 3
bpo-25987.) : 1
"AsyncGenerator" : 2
bpo-28720.) : 1
bpo-17941.) : 1
*verbose* : 26
bpo-25628.) : 2
Recursive : 9
bpo-26482.) : 1
*thread_name_prefix* : 2
bpo-27664.) : 1
"contextlib.AbstractContextManager" : 5
"typing.ContextManager" : 2
bpo-25609.) : 2
disambiguate : 21
disambiguation : 2
bpo-24773.) : 1
"datetime.strftime()" : 2
"date.strftime()" : 2
ISO : 48
8601 : 25
"%G" : 4
"%u" : 6
"%V" : 8
Ashley : 1
Anderson : 1
bpo-12006.) : 1
"datetime.isoformat()" : 5
*timespec* : 7
Alessandro : 1
Cucci : 1
bpo-19475.) : 1
"datetime.combine()" : 1
*tzinfo* : 7
bpo-27661.) : 1
"Decimal.as_integer_ratio()" : 1
"(n : 4
denominator: : 2
Decimal('-3.14').as_integer_ratio() : 2
(-157 : 2
50) : 3
amd : 1
bpo-25928.) : 1
"default_format" : 3
"distutils.command.sdist.sdist" : 2
"formats" : 2
"['gztar']" : 1
anticipated : 1
bpo-27819 : 1
*policy* : 78
reorganized : 6
retaining : 5
bpo-24277.) : 1
"email.mime" : 3
bpo-27331.) : 1
"DecodedGenerator" : 2
"policy" : 27
"message_factory" : 7
"email.policy.compat32" : 1
"EmailMessage" : 53
bpo-20476.) : 1
"'oem'" : 1
"CP_OEMCP" : 1
"'ansi'" : 1
"'mbcs'" : 2
"CP_ACP" : 3
bpo-27959.) : 1
"IntFlags" : 3
bpo-23591.) : 1
"enum.auto" : 1
automatically: : 5
auto : 17
auto() : 68
list(Color) : 3
[<Color.red: : 1
1> : 15
<Color.blue: : 1
2> : 19
<Color.green: : 1
3>] : 3
bpo-23848.) : 1
"hook_encoded()" : 1
Joseph : 4
Hackman : 2
bpo-25788.) : 1
1.0.2 : 15
bpo-26470.) : 3
"blake2b()" : 3
"blake2s()" : 3
bpo-26798 : 1
Chestnykh : 1
Chestnykh.) : 1
"sha3_224()" : 3
"sha3_256()" : 3
"sha3_384()" : 3
"sha3_512()" : 3
"shake_128()" : 4
"shake_256()" : 4
bpo-16113 : 1
Keccak : 2
Bertoni : 1
Joan : 1
Daemen : 1
Michaël : 4
Peeters : 1
Gilles : 1
Assche : 1
Ronny : 1
Keer.) : 1
password-based : 3
bpo-27928.) : 1
"HTTPConnection.request()" : 1
"endheaders()" : 2
Rolf : 6
Krahl : 3
bpo-12319.) : 3
modernized : 1
ttk : 23
tcl/tk : 9
'Modernizing' : 1
consolidation : 1
TkFont : 1
tkinter.font : 1
idlelib/README.txt) : 1
(Name : 1
Al : 3
Swiegart : 1
bpo-24225 : 1
process.) : 1
compensation : 1
eventual : 6
explaining : 14
3.6.2: : 6
autocompletion : 4
Louie : 19
Lu : 21
bpo-15786.) : 2
3.6.3: : 1
Browser) : 2
Cheryl : 63
Sabella : 61
bpo-1612262.) : 2
Wohlganger : 6
bpo-27099.) : 2
(Options : 2
IDLE) : 4
partly : 8
issues.) : 4
3.6.4: : 1
non-Latin : 5
bpo-13802.) : 2
bpo-31860.) : 2
3.6.6: : 1
Box : 2
maxlines : 5
Clicking : 6
themes : 18
bpo-33642 : 2
bpo-33768 : 2
bpo-33679.) : 2
tk : 34
scales : 8
DPI : 16
8.1+ : 5
96 : 6
sharper : 5
bpo-33656.) : 2
3.6.7: : 1
squeezed : 7
PyShell : 4
Fewer : 5
Squeezed : 5
clipboard : 13
right-clicking : 4
bpo-1529353.) : 3
"importlib.util.LazyLoader" : 2
"importlib.machinery.BuiltinImporter" : 3
"importlib.machinery.ExtensionFileLoader" : 3
"importlib.util.source_from_cache()" : 2
"importlib.util.spec_from_file_location()" : 2
".0" : 3
"implicit0" : 3
Zijlstra : 52
bpo-19611.) : 1
churn : 1
"inspect.getfullargspec()" : 8
single/source : 1
2/3 : 9
bpo-27172) : 1
bpo-17909.) : 1
"WatchedFileHandler.reopenIfNeeded()" : 1
reopened : 4
Marian : 3
Horban : 1
bpo-24884.) : 1
tau : 2
"multiprocessing.Manager()" : 2
Davin : 7
Potts : 7
bpo-6766.) : 1
519 : 2
bpo-25994.) : 1
(get : 1
"os.getrandom()" : 2
524**) : 1
bpo-27186.) : 2
*readrc* : 3
".pdbrc" : 9
"__new__" : 19
bpo-24164.) : 1
"pickletools.dis()" : 1
memo : 10
"MEMOIZE" : 1
bpo-25382.) : 1
"MANPAGER" : 1
Klose : 2
bpo-8637.) : 1
bpo-24879.) : 1
"choices()" : 3
population : 41
weights : 18
bpo-18844.) : 1
modifier : 14
spans : 5
"'(?i:p)ython'" : 1
"'Python'" : 1
"'PYTHON'"; : 1
"'(?i)g(?-i:v)r'" : 1
"'GvR'" : 1
"'gvr'" : 1
"'GVR'" : 1
bpo-433028.) : 1
"__getitem__" : 16
"group()" : 7
"mo['name']" : 1
"mo.group('name')" : 1
bpo-24454.) : 1
"Match" : 3
"index-like : 1
Xiang : 73
Zhang : 76
bpo-27177.) : 1
"set_auto_history()" : 1
Tyler : 3
Crompton : 2
bpo-26870.) : 1
bpo-25011 : 1
bpo-25209.) : 1
*punctuation_chars* : 5
punctuation : 8
bpo-1521950.) : 1
Wolfgang : 4
Langner : 1
bpo-26587) : 1
"sqlite3.Cursor.lastrowid" : 1
"REPLACE" : 6
LordThorsen : 2
bpo-16864.) : 1
"ioctl()" : 14
"SIO_LOOPBACK_FAST_PATH" : 4
Stokes : 2
bpo-26536.) : 1
"getsockopt()" : 3
"SO_DOMAIN" : 2
"SO_PROTOCOL" : 2
"SO_PEERSEC" : 2
"SO_PASSSEC" : 2
bpo-26907.) : 1
"setsockopt()" : 4
"setsockopt(level : 1
optname : 5
optlen: : 3
bpo-27744.) : 1
"AF_ALG" : 5
Kernel : 7
crypto : 5
"ALG_*" : 1
"SOL_ALG" : 1
"sendmsg_afalg()" : 1
bpo-27744 : 1
"TCP_USER_TIMEOUT" : 2
"TCP_CONGESTION" : 2
Omar : 4
Sandoval : 4
bpo-26273) : 1
Aviv : 19
Palivoda : 19
bpo-26404.) : 1
"wfile" : 2
"StreamRequestHandler" : 2
bpo-26721.) : 1
3DES : 5
ChaCha20 : 5
Poly1305 : 3
bpo-27850 : 1
bpo-27766.) : 1
bpo-28043.) : 1
"SSLSession" : 3
resumption : 2
bpo-19500 : 1
Warhawk.) : 1
"get_ciphers()" : 1
"IntEnum" : 20
bpo-28025.) : 1
bpo-28085.) : 1
"harmonic_mean()" : 2
bpo-27181.) : 2
half-precision : 6
"'e'" : 11
Eli : 5
Stevens : 2
bpo-11734.) : 1
"subprocess.Popen" : 27
("with : 2
proc: : 2
...") : 3
bpo-26741.) : 1
bpo-6135.) : 1
"getfilesystemencodeerrors()" : 2
bpo-27781.) : 1
"getwindowsversion()" : 1
*platform_version* : 6
bpo-27932.) : 1
"Telnet" : 5
Stéphane : 26
Wirtel : 22
bpo-25485) : 1
"struct_time" : 16
"tm_gmtoff" : 5
"tm_zone" : 5
"Timer.autorange()" : 1
"Timer.timeit()" : 1
bpo-6422.) : 1
(4x) : 2
bpo-23552.) : 1
"trace_add()" : 1
"trace_remove()" : 1
"trace_info()" : 1
"tkinter.Variable" : 2
"trace_variable()" : 1
"trace_vdelete()" : 1
"trace_vinfo()" : 1
bpo-22115) : 1
abbreviate : 2
[Previous : 1
995 : 2
times] : 1
"DomainFilter" : 3
traces : 26
(domain) : 2
bpo-26588.) : 1
"Dict[str : 1
Tuple[S : 1
T]]" : 1
Github : 4
#195.) : 1
"typing.Collection" : 1
"collections.abc.Collection" : 4
"typing.ClassVar" : 3
ClassVar : 6
#280.) : 1
"TYPE_CHECKING" : 1
#230.) : 1
"NewType()" : 1
UserId : 6
NewType('UserId' : 5
some_id : 2
UserId(524313) : 2
#189.) : 1
9.0.0 : 3
"Mock.assert_called()" : 1
"Mock.assert_called_once()" : 1
Amit : 2
Saha : 2
bpo-26323.) : 1
"Mock.reset_mock()" : 2
*return_value* : 8
*side_effect* : 6
bpo-21271.) : 1
(other : 12
"Content-Length" : 7
throwing : 5
"AbstractHTTPHandler" : 1
"RobotFileParser" : 4
"Crawl-delay" : 5
"Request-rate" : 5
Nikolay : 8
Bogoychev : 2
bpo-16099.) : 1
"--prompt" : 1
Balcerzak : 1
bpo-22829.) : 1
*source* : 48
"warnings.warn_explicit()" : 1
"warnings.WarningMessage" : 2
bpo-26568 : 1
bpo-26567) : 1
"example.py": : 2
open(__file__) : 3
-Wd : 1
tracemalloc=5 : 2
example.py": : 1
example.py:7: : 1
ResourceWarning: : 7
unclosed : 17
<_io.TextIOWrapper : 5
name='example.py' : 1
mode='r' : 19
encoding='UTF-8'> : 8
"example.py" : 7
lineno : 58
"Object : 1
at" : 1
"REG_QWORD" : 2
Clement : 4
Rouault : 3
bpo-23026.) : 1
"Beep" : 1
"MessageBeep" : 1
"PlaySound" : 1
(bpo-27982) : 1
unmarshalling : 5
numerics : 3
bpo-26885.) : 1
"ZipInfo.from_file()" : 1
"ZipInfo" : 21
"ZipInfo.is_dir()" : 1
bpo-26039.) : 2
"compress()" : 14
"decompress()" : 23
bpo-26243 : 1
bpo-16764 : 1
respectively.) : 2
wordcode : 4
Demur : 7
Rumed : 7
reviews : 2
bpo-26647 : 2
bpo-28050.) : 2
bpo-26081.) : 1
"asyncio.Task" : 14
"ignore" : 14
"replace" : 16
bpo-24870) : 1
Latin1 : 3
encoders : 18
bpo-25227) : 1
"surrogatepass" : 5
bpo-25267) : 1
bpo-25301) : 1
bpo-25349) : 1
bpo-25399) : 1
Optimize : 49
"bytes.fromhex()" : 4
"bytearray.fromhex()": : 1
2x : 8
3.5x : 2
bpo-25401) : 1
"bytes.replace(b'' : 2
b'.')" : 3
"bytearray.replace(b'' : 2
b'.')": : 1
80% : 4
Snider : 2
bpo-26574) : 1
("PYMEM_DOMAIN_MEM") : 2
bpo-26249) : 1
"pickle.load()" : 2
"pickle.loads()" : 3
bpo-27056) : 1
bpo-27574) : 1
3--6 : 2
bpo-25596) : 1
globbing : 3
"os.scandir()"; : 1
1.5--4 : 2
bpo-26032) : 1
deepcopy : 5
bpo-25638 : 1
bpo-25873 : 1
bpo-25869.) : 1
bpo-25971.) : 1
C99 : 24
"PY_LONG_LONG" : 1
7** : 4
bpo-17884 : 1
Cross-compiling : 3
NDK : 2
(Android : 1
Lollipop) : 1
emulator : 3
meta-issue : 1
bpo-26865 : 1
Turning : 1
Alecsandru : 3
Patrascu : 3
bpo-26359.) : 1
flushing : 20
bpo-5319.) : 1
bpo-26282) : 1
"PyTraceback_Print" : 1
abbreviates : 2
"PyErr_SetImportErrorSubclass()" : 2
"PyErr_ResourceWarning()" : 3
bpo-26567.) : 1
"PyOS_FSPath()" : 2
"PyUnicode_FSConverter()" : 5
"PyUnicode_FSDecoder()" : 3
"--version" : 6
"-V") : 1
./python : 9
-VV : 1
3.6.0b4+ : 1
(3.6:223967b49e49+ : 1
20:55:04) : 1
Compatible : 1
LLVM : 4
(clang-800.0.42.1)] : 1
bpo-27243.) : 1
backslash-character : 2
bpo-27364.) : 1
"__spec__" : 22
"__package__" : 31
Rose : 2
Ames : 1
bpo-25791.) : 2
~~~~~~~~ : 6
Mariatta : 5
bpo-25002.) : 2
~~~ : 3
"'rw'" : 2
bpo-21708.) : 1
~~~~~~~~~ : 5
"extra_path" : 2
"Distribution" : 20
bpo-27919 : 1
"getgrgid()" : 1
bpo-26129.) : 1
"importlib.machinery.SourceFileLoader.load_module()" : 1
"importlib.machinery.SourcelessFileLoader.load_module()" : 1
"importlib.abc.Loader.load_module()" : 7
"importlib.abc.Loader.exec_module()" : 6
~~ : 2
Undocumented : 9
bpo-25791 : 1
bpo-26754.) : 1
"(?letters)" : 1
bpo-22493.) : 1
0.9.8 : 6
1.0.0 : 2
1.0.1 : 7
SSL-related : 1
"certfile" : 2
"keyfile" : 1
"check_hostname" : 8
"context" : 9
bpo-28022.) : 1
bpo-28022 : 1
~~~~~~~ : 5
~~~~ : 1
"pyvenv" : 12
bpo-25154.) : 1
"PyUnicode_AsEncodedObject()" : 3
"PyUnicode_AsDecodedObject()" : 2
"PyUnicode_AsEncodedUnicode()" : 2
"PyUnicode_AsDecodedUnicode()" : 2
"--with-system-ffi" : 2
"--without-system- : 1
ffi" : 1
distributors : 7
"inspect.getmoduleinfo()" : 1
(was : 3
3.3) : 1
"inspect.getmodulename()" : 1
bpo-13248.) : 1
"traceback.Ignore" : 1
"traceback.usage" : 1
"traceback.modname" : 1
"traceback.fullmodname" : 1
"traceback.find_lines_from_code" : 1
"traceback.find_lines" : 1
"traceback.find_strings" : 1
"traceback.find_executable_lines" : 1
"tk_menuBar()" : 1
"tk_bindForTraversal()" : 1
dummy : 33
(corresponding : 2
4.0) : 3
"zipfile.ZipFile" : 5
"'U'" : 12
"io.TextIOWrapper" : 24
"IN" : 2
"CDROM" : 1
"DLFCN" : 2
"TYPES" : 3
"CDIO" : 1
"STROPTS" : 1
"Lib/plat-*/" : 1
chronically : 1
inconsistently : 1
unmaintained : 5
Tools/scripts/h2py.py : 1
"asynchat.fifo" : 1
"SHOW_ALLOC_COUNT" : 1
"SHOW_TRACK_COUNT" : 1
re-enabled : 4
"stdout" : 17
bpo-23034.) : 1
Jeff : 6
Balogh : 2
O'Connor : 6
bpo-2091.) : 1
commits : 4
DDL : 3
"importlib.abc.Loader.create_module()" : 2
"PyErr_SetImportError()" : 4
**msg** : 3
"co_lnotab" : 8
"frame.f_lineno" : 1
"PyCode_Addr2Line()" : 3
"Objects/lnotab_notes.txt" : 2
511** : 1
booleans : 12
bpo-25768 : 1
"port" : 29
"urllib.parse.urlsplit()" : 3
"urlparse()" : 11
out-of-range : 7
bpo-20059 : 1
Joel : 3
Taddei : 2
Jacek : 4
Kołodziej : 3
bpo-23883.) : 1
"__spec__.parent" : 5
"SystemError" : 31
bpo-18018.) : 1
"handle_error()" : 2
bpo-23430.) : 1
"spwd.getspnam()" : 1
"PermissionError" : 18
"socket.socket.close()" : 1
"EBADF") : 1
bpo-26685.) : 1
"smtpd.SMTPChannel" : 1
"smtpd.SMTPServer" : 1
"process_message()" : 5
accordance : 7
"JSONEncoder" : 4
bpo-18726.) : 1
Subclasses : 26
one-argument : 7
"metaclass") : 3
"object.__init_subclass__()" : 2
"type.__new__()" : 5
"type.__init__()" : 1
"type.__new__()") : 1
"super") : 1
honored : 6
[sdist] : 1
formats=zip : 1
Setuptools : 4
26.0.0 : 1
"http.client.HTTPConnection.request()" : 1
Content-Length : 14
tweaks : 4
"DictReader" : 4
Holden : 1
bpo-27842.) : 1
"crypt.METHOD_CRYPT" : 1
"crypt.methods" : 1
bpo-25287.) : 1
"ctypes.util.find_library()" : 3
"LD_LIBRARY_PATH" : 2
bpo-9998.) : 1
"imaplib.IMAP4" : 3
"']'" : 3
Lita : 6
Cho : 6
bpo-21815.) : 1
"mmap.write()" : 1
Jakub : 3
Stasiak : 2
bpo-26335.) : 1
"pkgutil.iter_modules()" : 2
"pkgutil.walk_packages()" : 3
"ModuleInfo" : 3
Ramchandra : 3
Apte : 2
bpo-17211.) : 1
bpo-25953.) : 1
"NotImplementedError" : 58
scenarios : 10
Failing : 4
replacements : 17
less- : 1
Implementors : 2
plugins : 2
"debug" : 8
bpo-26249 : 1
"Py_Exit()" : 2
bpo-5319 : 1
"FORMAT_VALUE" : 1
"BUILD_STRING" : 1
bpo-25483 : 1
bpo-27078.) : 1
"BUILD_CONST_KEY_MAP" : 1
bpo-27140.) : 1
"MAKE_FUNCTION" : 2
"CALL_FUNCTION" : 4
"CALL_FUNCTION_KW" : 3
"BUILD_MAP_UNPACK_WITH_CALL" : 3
"CALL_FUNCTION_EX" : 3
"BUILD_TUPLE_UNPACK_WITH_CALL" : 1
"CALL_FUNCTION_VAR" : 1
"CALL_FUNCTION_VAR_KW" : 1
"MAKE_CLOSURE" : 1
bpo-27095 : 1
bpo-27213 : 1
bpo-28257.) : 1
"SETUP_ANNOTATIONS" : 1
"STORE_ANNOTATION" : 2
bpo-27985.) : 1
"PyExc_RecursionErrorInst" : 4
Xavier : 16
Gaye : 16
bpo-22898 : 4
bpo-30697.) : 1
"locale.localeconv()" : 5
bpo-31900.) : 2
"NEWLINE" : 7
Ammar : 13
Askar : 13
bpo-33899.) : 3
accompanying : 9
interests : 2
accelerate : 2
January : 16
gradually; : 1
236** : 3
236**.) : 1
2.1's : 2
widespread : 6
dangers : 1
Pythoneers : 1
compulsory : 1
N+1 : 2
nested_scopes : 2
weren't; : 1
number-crunching : 1
elementwise : 1
matrices : 2
individually : 23
+-------------+------------------+ : 7
|=============|==================| : 1
"__ne__()" : 5
".LT." : 1
".LE." : 1
&c : 1
remember.) : 1
"method(self : 1
other)" : 3
"other" : 1
"A.__lt__(B)" : 1
all: : 6
inconsistent : 17
"cmp(A,B)" : 1
""<="" : 2
"">="" : 2
""=="" : 2
""!="" : 2
programmers; : 2
"tp_richcmp" : 1
207** : 2
Ascher : 1
Third- : 2
regex : 44
DeprecationWarning: : 2
"warnings.warn()" : 2
warnings.warn("feature : 1
supported") : 1
warnings; : 3
spare : 1
warnings.filterwarnings(action : 2
'ignore' : 2
message='.*regex : 1
deprecated' : 2
category=DeprecationWarning : 2
'__main__') : 1
230 : 1
Evolution : 1
adopted : 3
Prescod's : 1
230** : 1
autodetecting : 1
defer : 5
restructured : 3
makefile : 8
makefiles : 1
"Python/" : 1
"Parser/" : 1
"Objects/" : 1
229** : 1
programmer's : 6
Storing : 11
memoizing : 2
memoize(x): : 2
_cache.has_key(x): : 2
_cache[x] : 3
retval : 6
f(x) : 2
Cache : 6
effect; : 4
"_cache" : 1
"wr : 1
weakref.ref(obj)" : 1
"wr()" : 1
"memoize()" : 1
_cache[x]() : 1
weakref.ref(retval) : 1
forwards : 3
"weakref.ReferenceError" : 1
weakref.proxy(obj) : 1
proxy.attr : 2
obj.attr : 1
proxy.meth() : 1
obj.meth() : 1
weakref.ReferenceError : 1
205** : 2
Aycock's : 1
SPARK : 1
BNF : 4
overloading : 1
unfortunate : 3
f.publish : 1
f.secure : 1
f.grammar : 1
::= : 231
(C : 8
D)*" : 1
*can't* : 2
232** : 1
examples; : 3
"FILE.PY" : 2
"file.py" : 1
(they're : 2
case-preserving : 3
simulate : 12
case- : 7
sensitivity : 3
Case-insensitive : 1
"sys.displayhook()" : 2
pretty-printing : 4
L.append(L) : 1
[...]] : 1
pprint.pprint() : 2
sys.displayhook : 1
pprint.pprint : 1
<Recursion : 1
id=135143996>] : 1
217** : 1
"Py_TPFLAGS_CHECKTYPES" : 1
operation; : 4
208** : 1
Middleton's : 1
Vaults : 2
Parnassus : 1
"www.vex.net/parnassus/" : 1
(retired : 1
Wayback : 1
Machine) : 1
(metadata : 1
cataloguing : 2
terminology) : 2
241** : 3
**bdist_*** : 3
"upload" : 3
https://www.python.org/community/sigs/current : 1
/distutils-sig/ : 1
243** : 1
Upload : 1
Mechanism : 5
"inspect.py" : 1
"pydoc.py" : 2
bonus : 2
"Tools/scripts/pydoc" : 1
"pydoc : 2
xml.dom" : 1
Documentation: : 1
NAME : 27
/usr/local/lib/python2.1/xml/dom/__init__.pyc : 1
DESCRIPTION : 1
Tk-based : 1
addictive; : 1
PyUnit : 3
Purcell : 1
JUnit : 3
Beck's : 2
http://pyunit.sourceforge.net/ : 1
"SequenceMatcher" : 13
**diff** : 1
"Tools/scripts/ndiff.py" : 2
Gellekum : 1
panels : 1
"minidom" : 1
Ping : 2
uncaught : 21
"try"..."except" : 2
Ninth : 1
Conference : 1
hook: : 1
"asctime()" : 4
epoch : 24
time; : 1
"time.asctime()" : 2
"time.asctime(time.localtime(time.time()))" : 1
passive : 8
firewall : 5
"set_pasv(0)" : 1
profiles : 3
implementation-dependent : 5
"sys._getframe([depth])" : 1
"sys._getframe()" : 3
*depth* : 14
"sys._getframe(1)" : 1
caller's : 16
.NET : 9
resist : 1
temptation : 3
117 : 1
136 : 1
fixed; : 3
fulfills : 2
"--with-pymalloc" : 2
"Objects/obmalloc.c" : 2
"PyMem_New()" : 1
"PyMem_Del()" : 1
afoul : 2
naïve : 2
"getc()" : 1
66% : 1
motivated : 1
Epler : 1
"xreadlines()" : 4
sys.stdin.xreadlines(): : 1
1--15 : 1
https://mail.python.org/pipermail : 2
/python-dev/2001-January/ : 1
destructively : 2
"D.popitem()" : 1
"(key : 12
preliminary : 6
"__all__": : 1
['Database' : 1
'open'] : 1
Wolfson : 1
weaker : 2
printable : 28
"'\012'" : 1
vestigial : 3
ancestry : 1
"\t" : 3
"\r" : 11
reorganization : 2
third- : 2
shrunk : 2
340K : 1
ports : 12
contributed: : 1
Majewski) : 1
Tishler); : 1
Dietmar : 1
Schwertberger); : 1
Unixware : 1
Billy : 1
Allie) : 1
edits : 4
itemizing; : 1
Graeme : 1
Jay : 4
Graves : 1
634** : 9
Matching: : 10
635** : 2
Motivation : 2
Rationale : 1
bpo-12782 : 2
618** : 1
Length-Checking : 1
626** : 3
604** : 6
612** : 11
613** : 4
647** : 4
removals : 5
644** : 5
Require : 8
632** : 2
Deprecate : 77
623** : 4
wstr : 1
PyUnicodeObject : 3
624** : 3
597** : 2
valid: : 7
(CtxManager() : 1
example): : 2
( : 23
CtxManager1() : 3
CtxManager2() : 4
(CtxManager1() : 2
CtxManager2()): : 1
example1 : 2
example2 : 2
group: : 7
CtxManager3() : 1
example3 : 1
non : 23
capacities : 1
~~~~~~~~~~~~ : 3
*SyntaxError: : 1
parsing* : 1
(notice : 1
'{'): : 1
{9: : 2
18: : 2
19: : 2
27: : 2
28: : 2
29: : 2
36: : 2
37: : 2
38: : 1
39: : 1
45: : 1
46: : 1
47: : 1
48: : 1
49: : 1
54: : 1
some_other_code : 2
Previous : 13
informative : 11
emitted: : 1
'{' : 13
(single : 1
quoted) : 1
EOF/EOL : 2
bpo-42864 : 1
bpo-40176.) : 1
highlight : 22
constitutes : 3
(before : 7
3.10): : 1
foo(x : 4
w) : 6
^^^^^^^^^^^^^^^^^^^^ : 2
bpo-43914 : 1
Missing : 7
rocket.position : 4
event_horizon : 2
':' : 60
bpo-42997.) : 1
Unparenthesised : 1
targets: : 1
{x,y : 2
zip('abcd' : 2
'1234')} : 2
bpo-43017.) : 1
z: : 16
bpo-43822.) : 1
parentheses: : 4
build_dyson_sphere() : 1
NotEnoughScienceError : 2
NotEnoughResourcesError: : 2
bpo-43149.) : 1
{x:1 : 2
y:2 : 2
w:3} : 2
bpo-43823.) : 1
^^^^^^^^^ : 6
'except' : 11
'finally' : 7
bpo-44305.) : 1
event_horizon: : 2
'==' : 7
'=' : 20
bpo-43797.) : 1
f-strings: : 1
f"Black : 1
holes : 3
{*all_black_holes} : 1
revelations" : 1
(*all_black_holes) : 1
f-string: : 1
starred : 12
bpo-41064.) : 1
~~~~~~~~~~~~~~~~~ : 6
lel: : 1
IndentationError: : 1
'if' : 11
~~~~~~~~~~~~~~~ : 7
"PyErr_Display()" : 8
collections.namedtoplo : 1
'collections' : 1
'namedtoplo' : 1
Did : 5
mean: : 2
bpo-38530.) : 2
scenario : 15
REPLs : 2
~~~~~~~~~~ : 3
schwarzschild_black_hole : 2
schwarschild_black_hole : 1
'schwarschild_black_hole' : 1
626 : 6
"f_lineno" : 6
"co_lines()" : 1
*match : 1
statement* : 2
*case : 1
subject: : 3
<pattern_1>: : 1
<action_1> : 1
<pattern_2>: : 1
<action_2> : 1
<pattern_3>: : 1
<action_3> : 1
<action_wildcard> : 1
"subject") : 1
"subject" : 6
confirmed : 4
Readers : 2
(data : 4
(pattern) : 1
object/expression : 1
Scala : 1
Elixir : 1
"declarative" : 3
patterns) : 5
"imperative" : 1
accomplish : 4
lies : 9
subject's : 5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
"status" : 8
match: : 8
418 : 2
insures : 1
""""""""""""""""""""""""""""" : 1
x-coordinate : 3
y-coordinate: : 1
"(0 : 4
0)" : 18
location(point): : 1
print("Origin : 1
point's : 1
location.") : 1
print(f"Y={y} : 1
y-axis.") : 1
x-axis.") : 1
plane.") : 1
""""""""""""""""""""""""""""""""""" : 1
list.") : 5
print(f"A : 1
{y} : 1
{y2} : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 5
"('error' : 1
_)" : 1
test_variable: : 1
('warning' : 1
40): : 1
print("A : 3
received.") : 1
('error' : 3
_): : 2
print(f"An : 1
{code} : 1
occurred.") : 1
"test_variable" : 1
800) : 2
~~~~~ : 1
print(f"The : 1
diagonal : 2
Y=X : 1
{x}.") : 1
print(f"Point : 1
diagonal.") : 1
wildcards: : 1
wildcards : 13
x1 : 1
y1 : 1
x2 : 3
y2 : 2
"TextIOWrapper" : 21
Markdown) : 1
BUG: : 1
"rb" : 4
encoding="utf-8" : 1
open("data.json") : 1
"sys.flags.warn_default_encoding" : 2
locale- : 3
"X : 16
Y" : 13
expressing : 11
'either : 1
Y' : 2
"typing.Union" : 11
square(number: : 3
Union[int : 6
float]) : 2
float]: : 2
manner: : 6
float) : 18
float: : 11
"issubclass()": : 1
isinstance(1 : 2
Maggie : 1
Moss : 1
Prados : 1
bpo-41428 : 1
bpo-44490.) : 1
484**'s : 1
"Callable" : 15
"typing.ParamSpec" : 9
annotate : 21
"Concatenate" : 18
conjunction : 21
"typing.Concatenate" : 3
"typing.ParamSpecArgs" : 3
"typing.ParamSpecKwargs" : 2
bpo-41559 : 1
bpo-43783 : 1
Mendoza.) : 1
unannotated : 1
StrCache : 1
'Cache[str]' : 2
LOG_PREFIX : 2
'LOG[DEBUG]' : 2
"TypeAlias" : 3
StrCache: : 1
Mikhail : 1
Golubev : 1
bpo-41923.) : 1
"TypeGuard" : 8
narrowing : 4
"TypeGuard"'s : 1
bpo-43766 : 1
Traut.) : 2
"int.bit_count()" : 2
Niklas : 7
Fiekas : 3
bpo-29882.) : 1
"mapping" : 4
"types.MappingProxyType" : 11
bpo-40890.) : 1
618**: : 1
"Decimal"s : 3
"Fraction"s : 3
bpo-37999.) : 1
"object.__ipow__()" : 2
"object.__pow__()" : 2
"object.__rpow__()" : 2
Shkop : 4
bpo-38302.) : 1
unparenthesized : 6
slices) : 2
"__globals__['__builtins__']" : 2
"__globals__["__builtins__"]" : 1
bpo-42990.) : 2
"aiter()" : 3
"anext()" : 2
counterparts : 16
Bronson : 6
Pope : 2
Justin : 6
Wang : 8
bpo-31861.) : 1
("@staticmethod") : 3
("@classmethod") : 2
("__module__" : 4
"__annotations__") : 4
bpo-43682.) : 1
(everything : 3
beside : 2
"simple : 2
526**) : 1
annotations" : 10
bpo-42737.) : 1
lazy-create : 3
object’s : 1
"__annotations__"; : 1
bpo-43901.) : 1
bpo-42725.) : 2
rendered : 3
effectless : 1
Hashes : 2
"decimal.Decimal" : 17
hashed : 11
NaNs : 15
bpo-43475.) : 1
(instead : 13
"NameError") : 1
bpo-45000.) : 1
"end_lineno" : 9
"end_offset" : 3
bpo-43914.) : 1
"connect_accepted_socket()" : 1
Grönholm : 4
bpo-41332.) : 1
Misleading : 1
phrase : 16
"optional : 4
"options" : 13
bpo-9694.) : 1
Lorentsen : 3
bpo-31956.) : 1
import-time : 2
"base64.b32hexencode()" : 2
"base64.b32hexdecode()" : 2
Hex : 8
Alphabet : 5
"clearBreakpoints()" : 1
Irit : 19
Katriel : 19
bpo-24160.) : 1
bpo-4356.) : 1
"codecs.unregister()" : 2
unregister : 11
Hai : 8
Shi : 8
bpo-41842.) : 2
parameterized : 22
"contextlib.aclosing()" : 1
asynchronously : 22
Joongi : 3
Kim : 13
bpo-41229.) : 1
"contextlib.nullcontext()" : 1
Gringauz : 1
bpo-41543.) : 1
"AsyncContextDecorator" : 1
"curses.color_content()" : 1
"curses.init_color()" : 1
"curses.init_pair()" : 1
"curses.pair_content()" : 1
"curses.has_extended_color_support()" : 2
Kintscher : 4
Hans : 4
Petter : 4
Jansson : 1
bpo-36982.) : 1
"BUTTON5_*" : 3
bpo-39273.) : 1
"slots" : 4
"dataclasses.dataclass()" : 2
bpo-42269) : 1
~~~~~~~~~~~~~~~~~~~ : 3
keyword-only: : 1
@dataclass(kw_only=True) : 1
Birthday: : 2
birthday: : 2
datetime.date : 10
"birthday" : 2
per-field : 2
basis: : 1
field(kw_only=True) : 1
"kw_only" : 7
re-ordering : 1
non-keyword-only : 1
KW_ONLY : 6
"t" : 5
bpo-43532.) : 1
"packaging" : 1
elsewhere : 21
"sysconfig") : 1
bpo-42802.) : 1
"__loader__" : 37
"__spec__.loader" : 8
bpo-42133.) : 4
bpo-39337.) : 1
"enum_name.member_name" : 1
"member_name" : 1
Stdlib : 1
enums : 21
"module_name.member_name" : 1
bpo-40066.) : 1
"enum.StrEnum" : 2
bpo-41816.) : 1
"fileinput.input()" : 8
"fileinput.FileInput" : 11
bpo-43712.) : 1
"fileinput.hook_compressed()" : 1
uncompressed : 26
bpo-5758.) : 1
bpo-44466.) : 1
"gc.get_objects()" : 2
"gc.get_referrers()" : 3
"gc.get_referents()" : 2
bpo-43439.) : 1
*root_dir* : 15
*dir_fd* : 37
bpo-38144.) : 1
bpo-43669.) : 3
bpo-38820 : 2
pure-Python : 8
fallback : 59
"pbkdf2_hmac()" : 1
PBKDF2-HMAC : 1
bpo-43880.) : 2
bpo-40645.) : 1
sidebar : 11
('>>>') : 1
('...') : 1
drag : 6
'copy : 2
prompts' : 2
zips : 2
bpo-37903.) : 1
'look : 1
right' : 1
motivation : 12
bpo-37892.) : 1
Highlight : 3
soft : 22
pattern- : 1
perfect : 8
"_"-s : 3
bpo-44010.) : 1
gh-95191.) : 2
parity : 4
(history) : 1
nicer : 4
"importlib.metadata.EntryPoints" : 1
"importlib.metadata.packages_distributions()" : 1
top- : 4
"importlib.metadata.Distribution" : 1
"inspect.get_annotations()" : 15
examines : 9
un-stringize : 6
stringized : 11
Relatedly : 1
"inspect.Signature.from_callable()" : 3
"inspect.Signature.from_function()" : 1
bpo-43817.) : 1
"itertools.pairwise()" : 1
bpo-38200.) : 1
"os.cpu_count()" : 7
RTOS : 10
Peixing : 3
Xin : 3
bpo-41440.) : 1
"os.eventfd()" : 1
"eventfd2" : 1
bpo-41001.) : 1
"os.splice()" : 2
bpo-41625.) : 1
"O_EVTONLY" : 3
"O_FSYNC" : 3
"O_SYMLINK" : 3
"O_NOFOLLOW_ANY" : 3
bpo-43106.) : 1
"os.path.realpath()" : 5
*strict* : 43
Barney : 6
Gale : 5
bpo-43757.) : 1
"PurePath.parents" : 2
bpo-35498.) : 1
Yaroslav : 2
Pankovych : 2
bpo-21041.) : 1
"Path.hardlink_to" : 1
supersedes : 5
"link_to()" : 2
"symlink_to()" : 2
bpo-39950.) : 2
"pathlib.Path.stat()" : 2
"chmod()" : 8
*follow_symlinks* : 38
bpo-39906.) : 1
"platform.freedesktop_os_release()" : 2
freedesktop.org : 3
os-release : 1
bpo-28468.) : 1
"pprint.pprint()" : 3
"underscore_numbers" : 2
sblondon : 1
bpo-42914.) : 1
"dataclasses.dataclass" : 4
Lewis : 3
Gaul : 2
bpo-43080.) : 1
"--quiet" : 12
Schevchenko : 2
bpo-38731.) : 1
"Function" : 3
"Class" : 4
"pyclbr.readline()" : 1
"pyclbr.readline_ex()" : 1
(start) : 1
Aviral : 2
Srivastava : 2
bpo-38307.) : 1
"pickle.DEFAULT_PROTOCOL" : 6
shelves : 1
bpo-34204.) : 1
"covariance()" : 2
Pearson's : 5
"correlation()" : 2
"linear_regression()" : 2
Tymoteusz : 2
Wołodźko : 2
bpo-38490.) : 1
"socket.timeout" : 4
"TimeoutError" : 23
bpo-42413.) : 1
MPTCP : 2
"IPPROTO_MPTCP" : 1
Rui : 1
Cunha : 1
bpo-43571.) : 1
"IP_RECVTOS" : 2
(ToS) : 2
DSCP/ECN : 1
Sauthoff : 1
bpo-44077.) : 1
"OP_IGNORE_UNEXPECTED_EOF" : 2
bpo-43794 : 1
bpo-43788 : 1
bpo-43791 : 1
bpo-43799 : 1
bpo-43920 : 1
bpo-43789 : 1
bpo-43811.) : 1
"ssl.SSLContext.options" : 1
"OP_NO_SSLv2" : 7
"OP_NO_SSLv3" : 6
Ciphers : 2
secrecy : 8
MAC : 26
prohibits : 3
DH : 8
ECC : 3
112 : 2
Hynek : 6
Schlawack's : 2
research : 4
bpo-43998.) : 1
configurations : 23
vendor : 2
"ssl.get_server_certificate()" : 3
bpo-31870.) : 1
heap-types : 1
bpo-42333.) : 1
"VERIFY_X509_PARTIAL_CHAIN" : 1
l0x : 1
bpo-40849.) : 1
"connect/handle()" : 1
"enable_load_extension()" : 3
Erlend : 86
Aasland : 85
bpo-43762.) : 1
"sys.orig_argv" : 4
bpo-23427.) : 2
"sys.stdlib_module_names" : 5
bpo-42955.) : 1
"_thread.interrupt_main()" : 3
"signal.SIGINT") : 1
bpo-43356.) : 2
"threading.gettrace()" : 2
"threading.getprofile()" : 2
"threading.settrace()" : 4
"threading.setprofile()" : 3
Mario : 8
Corchero : 8
bpo-42251.) : 1
"threading.__excepthook__" : 2
"threading.excepthook()" : 13
bpo-42308.) : 1
"format_exception()" : 3
"format_exception_only()" : 2
"print_exception()" : 7
Bussonnier : 11
bpo-26389.) : 2
Reintroduce : 1
"types.EllipsisType" : 3
"types.NoneType" : 2
"types.NotImplementedType" : 3
readily : 11
Bas : 1
Beek : 1
bpo-41810.) : 1
"typing.is_typeddict()" : 1
introspect : 3
"typing.TypedDict" : 7
Patrick : 3
bpo-41792.) : 1
"typing.Protocol" : 10
"isinstance" : 7
"runtime_checkable()" : 6
bpo-38908.) : 1
"typing.io" : 7
"typing.re" : 7
Sebastian : 6
Rittau : 3
bpo-38291.) : 2
"assertNoLogs()" : 1
"assertLogs()" : 4
Kit : 3
Yan : 3
Choi : 2
bpo-39385.) : 1
"LexicalHandler" : 1
Gossage : 1
bpo-35018.) : 1
451**: : 1
"zipimport.zipimporter.create_module()" : 1
"zipimport.zipimporter.exec_module()" : 1
bpo-42131.) : 1
"invalidate_caches()" : 3
Desmond : 2
Cheong : 2
bpo-14678.) : 1
"bytearray()" : 9
(around : 2
30--40% : 2
bpo-41334.) : 1
1.4x : 1
69 : 4
51 : 4
(-18) : 1
bpo-41006 : 1
bpo-41718.) : 1
"LOAD_ATTR" : 5
"per : 3
cache" : 3
36% : 2
44% : 1
bpo-42093 : 1
bpo-42927 : 1
MicroPython.) : 1
"-fno- : 1
semantic-interposition" : 1
"gcc" : 2
bpo-38980.) : 1
".readall()" : 2
"_compression.DecompressReader" : 2
decompression : 25
1.09x : 1
~ : 15
1.17x : 3
1.20x : 1
1.32x : 1
"GzipFile.read(-1)" : 1
1.11x : 1
1.18x : 1
Ma : 14
Lin : 14
bpo-41486) : 1
lazily : 21
cuts : 14
annotated : 32
bpo-42202.) : 2
Substring : 2
"str1 : 2
str2" : 2
"str2.find(str1)" : 2
Crochemore : 1
Perrin's : 1
"Two-Way" : 2
bpo-41972) : 1
micro-optimizations : 2
"_PyType_Lookup()" : 3
hits : 12
1.04 : 1
bpo-43452.) : 1
"bool()" : 10
bpo-43575 : 1
bpo-43287 : 1
bpo-41922 : 1
bpo-41873 : 1
bpo-41870.) : 1
"RLock" : 15
simultaneous : 7
bpo-43785.) : 1
"0in : 2
"1or : 1
"0if : 1
1else : 1
"[0x1for : 1
y]" : 2
"[0x1 : 1
"[0x1f : 1
y]") : 1
bpo-43833.) : 2
concerted : 2
"find_loader()"/"find_module()" : 1
(superseded : 5
"find_spec()") : 1
"exec_module()") : 1
"module_repr()" : 7
"__spec__.parent") : 1
"__spec__.loader") : 1
"__cached__" : 17
"__spec__.cached") : 1
"importlib") : 1
Non-integer : 2
"random.randrange()" : 3
bpo-37319.) : 1
"exec_module()" : 21
bpo-26131.) : 3
"zimport.zipimporter.load_module()" : 1
"importlib.abc.MetaPathFinder.find_module()" : 5
"importlib.abc.PathEntryFinder.find_module()" : 3
"importlib.abc.MetaPathFinder.find_spec()" : 1
"importlib.abc.PathEntryFinder.find_spec()" : 3
"importlib.util.spec_from_loader()" : 4
bpo-42134.) : 1
"importlib.abc.PathEntryFinder.find_loader()" : 5
bpo-43672.) : 1
"importlib.machinery.BuiltinImporter.find_module()" : 2
"importlib.machinery.FrozenImporter.find_module()" : 2
"importlib.machinery.WindowsRegistryFinder.find_module()" : 2
"importlib.machinery.PathFinder.find_module()" : 3
"importlib.machinery.FileFinder.find_module()" : 2
"importlib.machinery.FileFinder.find_loader()" : 2
(previously : 13
bpo-42135.) : 2
"importlib.abc.Finder" : 3
"find_module()") : 1
"importlib.find_loader()" : 4
"importlib.util.set_package_wrapper()" : 2
"importlib.util.set_loader_wrapper()" : 2
"importlib.util.module_for_loader()" : 4
"pkgutil.ImpImporter" : 2
"pkgutil.ImpLoader" : 2
bpo-43720.) : 1
bpo-42137.) : 1
"importlib.abc.Loader.module_repr()" : 3
"importlib.machinery.FrozenLoader.module_repr()" : 2
"importlib.machinery.BuiltinLoader.module_repr()" : 2
bpo-42136.) : 1
"sqlite3.OptimizedUnicode" : 2
bpo-42264.) : 1
"sqlite3.enable_shared_cache" : 2
SQLite3 : 5
URI : 54
"cache=shared" : 1
bpo-24464.) : 1
"threading.currentThread" : 1
"threading.current_thread()" : 5
"threading.activeCount" : 1
"threading.active_count()" : 4
"threading.Condition.notifyAll" : 1
"threading.Condition.notify_all()" : 2
"threading.Event.isSet" : 1
"threading.Event.is_set()" : 2
"threading.Thread.setName" : 1
"threading.Thread.name" : 4
"threading.thread.getName" : 1
"threading.Thread.isDaemon" : 1
"threading.Thread.daemon" : 4
"threading.Thread.setDaemon" : 1
gh-87889.) : 1
"pathlib.Path.link_to()" : 3
"pathlib.Path.hardlink_to()" : 2
"cgi.log()" : 3
bpo-41139.) : 1
"OP_NO_TLSv1" : 1
"OP_NO_TLSv1_1" : 1
"OP_NO_TLSv1_2" : 2
"OP_NO_TLSv1_3" : 1
"sslSSLContext.minimum_version" : 1
"sslSSLContext.maximum_version" : 1
"PROTOCOL_SSLv2" : 1
"PROTOCOL_SSLv3" : 2
"PROTOCOL_SSLv23" : 1
"PROTOCOL_TLSv1" : 1
"PROTOCOL_TLSv1_1" : 2
"PROTOCOL_TLSv1_2" : 2
"PROTOCOL_TLS" : 14
"PROTOCOL_TLS_CLIENT" : 14
"PROTOCOL_TLS_SERVER" : 10
"wrap_socket()" : 15
"ssl.SSLContext.wrap_socket()" : 3
"RAND_pseudo_bytes()" : 2
"RAND_egd()" : 1
NPN : 7
"ssl.SSLSocket.selected_npn_protocol()" : 1
"ssl.SSLContext.set_npn_protocols()" : 2
("PYTHONTHREADDEBUG" : 2
variable) : 8
bpo-44584.) : 1
"__int__" : 6
"__float__" : 4
"__floordiv__" : 4
"__mod__" : 4
"__divmod__" : 3
"__rfloordiv__" : 2
"__rmod__" : 4
"__rdivmod__" : 2
bpo-41974.) : 1
"ParserBase.error()" : 2
"_markupbase" : 2
"ParserBase" : 2
"error()" : 13
bpo-31844.) : 1
"unicodedata.ucnhash_CAPI" : 4
PyCapsule : 5
"_PyUnicode_Name_CAPI" : 4
bpo-42157.) : 2
"node.h" : 1
"parser.h" : 1
"graminit.h" : 1
"grammar.h" : 1
"PyParser_SimpleParseStringFlags" : 3
"PyParser_SimpleParseStringFlagsFilename" : 2
"PyParser_SimpleParseFileFlags" : 3
"PyNode_Compile" : 3
EOL : 2
bpo-42299.) : 1
"PyModule_GetWarningsModule()" : 1
useless : 10
_warnings : 1
bpo-42599.) : 1
bpo-37324.) : 1
"loop" : 6
"asyncio"'s : 2
high- : 2
multifold: : 1
thread's : 20
bpo-42392.) : 2
x") : 1
*etype* : 7
bpo-42639.) : 2
"socket.htons()" : 3
"socket.ntohs()" : 3
bpo-42393.) : 1
foo(loop): : 1
asyncio.sleep(1 : 3
loop=loop) : 1
loop) : 11
"asyncio.run_coroutine_threadsafe()" : 1
"types.FunctionType" : 3
""__builtins__"" : 2
"{"None": : 2
None}" : 2
function(...): : 2
_node" : 1
"Py_CompileString()" : 8
"PyEval_EvalCode()" : 3
Specifically: : 2
"PyBytes_AsString()" : 4
sketched : 3
(Declarations : 1
omitted.) : 1
io_module : 1
Import_ImportModule("io"); : 1
fileobject : 1
PyObject_CallMethod(io_module : 1
"open" : 9
"ss" : 1
"rb"); : 1
source_bytes_object : 1
PyObject_CallMethod(fileobject : 2
"read" : 8
source_buf : 1
PyBytes_AsString(source_bytes_object); : 1
Py_CompileString(source_buf : 1
Py_file_input); : 1
"FrameObject" : 2
"f_lasti" : 10
stable: : 2
644**: : 1
bpo-36020.) : 1
3.7.15 : 4
bpo-40744 : 1
bpo-40810.) : 1
"--disable-test-modules" : 2
Petazzoni : 4
bpo-27640.) : 1
"--with-wheel-pkg-dir=PATH : 1
option" : 8
bpo-42856.) : 1
bpo-43103.) : 1
"pkg-config" : 2
with-tcltk-includes" : 1
Manolis : 1
Stamatogiannakis : 1
bpo-42603.) : 1
--with-openssl=/path/to/openssl : 1
--with-openssl- : 1
rpath=auto" : 1
bpo-43466.) : 1
652** : 1
bpo-43795.) : 1
"PyNumber_Index()" : 4
bpo-40792.) : 1
"orig_argv" : 4
"PyDateTime_DATE_GET_TZINFO()" : 2
"PyDateTime_TIME_GET_TZINFO()" : 2
bpo-30155.) : 1
"PyCodec_Unregister()" : 4
"PyIter_Send()" : 4
Matveev : 3
bpo-41756.) : 1
"PyUnicode_AsUTF8AndSize()" : 5
bpo-41784.) : 1
"PyModule_AddObjectRef()" : 6
steal : 13
bpo-1635741.) : 1
"Py_XNewRef()" : 5
bpo-42262.) : 1
"PyType_FromSpecWithBases()" : 10
*bases* : 10
bpo-42423.) : 1
bpo-41832.) : 1
"PyType_GetSlot()" : 5
bpo-41073.) : 1
"PySet_CheckExact()" : 2
C-API : 26
bpo-43277.) : 1
"PyErr_SetInterruptEx()" : 2
"PyObject.ob_refcnt" : 3
bpo-36465) : 2
("Py_TRACE_REFS" : 2
bpo-43688.) : 1
"Py_Is(x : 2
"Py_IsNone()" : 3
"Py_IsTrue()" : 3
"Py_IsFalse()" : 3
bpo-43753.) : 1
"PyGC_Enable()" : 3
"PyGC_Disable()" : 3
"PyGC_IsEnabled()" : 3
"Py_TPFLAGS_DISALLOW_INSTANTIATION" : 5
bpo-43916.) : 1
"Py_TPFLAGS_IMMUTABLETYPE" : 10
bpo-43908.) : 2
"#": : 2
"es#" : 6
"et#" : 5
"u#" : 5
"y#" : 5
"z#" : 5
"U#" : 3
"Z#" : 3
bpo-40943.) : 1
"Py_REFCNT()" : 5
"Py_REFCNT(obj) : 1
new_refcnt" : 1
"Py_SET_REFCNT(obj : 1
new_refcnt)": : 1
"Py_SET_REFCNT()" : 4
(available : 7
3.9) : 8
0x030900A4 : 3
Py_SET_REFCNT(obj : 1
refcnt) : 2
((Py_REFCNT(obj) : 1
(refcnt)) : 1
(void)0) : 1
bpo-39573.) : 3
bpo-40839.) : 1
"PyUnicode_FromUnicode(NULL : 2
size)" : 14
"PyUnicode_FromStringAndSize(NULL : 2
"PyUnicode_New()" : 5
"Py_GetPath()" : 8
"Py_GetPrefix()" : 5
"Py_GetExecPrefix()" : 5
"Py_GetProgramFullPath()" : 5
"Py_GetPythonHome()" : 4
"Py_GetProgramName()" : 4
initialized) : 6
bpo-42260.) : 1
"PyList_SET_ITEM()" : 2
"PyTuple_SET_ITEM()" : 3
"PyCell_SET()" : 2
l-value : 4
r-value : 2
PyList_SET_ITEM(a : 2
"PyList_SET_ITEM(a : 2
c) : 21
(PyList_SET_ITEM : 2
bpo-30459.) : 1
non-limited : 3
"odictobject.h" : 1
"parser_interface.h" : 1
"picklebufobject.h" : 1
"pyarena.h" : 3
"pyctype.h" : 1
"pydebug.h" : 1
"pytime.h" : 1
"Include/cpython" : 3
"Python.h"; : 1
Nicholas : 3
Sim : 1
bpo-35134.) : 3
"Py_TPFLAGS_HEAPTYPE" : 3
"Py_FrozenMain" : 1
bpo-26241.) : 1
"PyUnicode_InternImmortal()" : 4
3.12: : 21
"PyUnicode_InternInPlace()" : 4
bpo-41692.) : 1
"Py_UNICODE_str*" : 2
"Py_UNICODE*" : 2
bpo-41123.) : 2
"Py_UNICODE_strlen": : 2
"PyUnicode_GetLength()" : 5
"PyUnicode_GET_LENGTH" : 4
"Py_UNICODE_strcat": : 2
"PyUnicode_CopyCharacters()" : 7
"PyUnicode_FromFormat()" : 9
"Py_UNICODE_strcpy" : 2
"Py_UNICODE_strncpy": : 1
"PyUnicode_Substring()" : 4
"Py_UNICODE_strcmp": : 2
"PyUnicode_Compare()" : 3
"Py_UNICODE_strncmp": : 2
"Py_UNICODE_strchr" : 2
"Py_UNICODE_strrchr": : 2
"PyUnicode_FindChar()" : 5
"PyUnicode_GetMax()" : 4
393**) : 1
bpo-41103.) : 3
"PyLong_FromUnicode()" : 2
"PyLong_FromUnicodeObject()" : 1
"PyUnicode_AsUnicodeCopy()" : 1
"PyUnicode_AsUCS4Copy()" : 4
"PyUnicode_AsWideCharString()" : 10
"ceval.recursion_limit" : 2
"PyInterpreterState" : 11
bpo-41834.) : 1
"Py_ALLOW_RECURSION" : 2
"Py_END_ALLOW_RECURSION" : 2
"recursion_critical" : 2
bpo-41936.) : 1
"PyOS_InitInterrupts()" : 2
handlers: : 14
"PyConfig.install_signal_handlers" : 3
bpo-41713.) : 1
"PyAST_Validate()" : 3
("mod_ty" : 2
384**) : 2
bpo-43244.) : 5
"symtable.h" : 4
"PyST_GetScope()" : 2
"PySymtable_Build()" : 2
"PySymtable_BuildObject()" : 2
"PySymtable_Free()" : 2
"Py_SymtableString()" : 4
"Py_SymtableStringObject()" : 2
"FILE*" : 2
bpo-43868.) : 1
"ast.h" : 2
"asdl.h" : 2
"Python-ast.h" : 4
"Yield" : 5
"<winbase.h>" : 2
_mod" : 2
"PyAST_CompileEx()" : 2
"PyAST_CompileObject()" : 2
"PyFuture_FromAST()" : 2
"PyFuture_FromASTObject()" : 2
"PyParser_ASTFromFileObject()" : 2
"PyParser_ASTFromFilename()" : 2
"PyParser_ASTFromStringObject()" : 2
"PyArena_New()" : 2
"PyArena_Free()" : 2
"PyArena_Malloc()" : 2
"PyArena_AddPyObject()" : 2
"PyThreadState.use_tracing" : 1
bpo-43760.) : 2
<rdmurray@bitdance.com> : 1
(Editor) : 1
2014 : 5
429** : 1
non-inheritable : 30
446**) : 2
(bpo-16499) : 2
(multiple : 2
issues) : 2
451**) : 1
(Affects : 1
authors.) : 1
(bpo-16475) : 1
"asyncio": : 2
3156**) : 4
"ensurepip": : 1
"enum": : 1
435**) : 2
"pathlib": : 1
428**) : 1
"selectors": : 1
(part : 11
"statistics": : 1
numerically : 12
450**) : 2
"tracemalloc": : 1
454**) : 2
Significantly : 3
Single-dispatch : 2
443**) : 1
3154**) : 1
os.fork : 4
(bpo-8713) : 1
"contentmanager" : 5
("EmailMessage") : 1
(bpo-18891) : 1
456**) : 1
inheritable : 30
PKCS#5 : 5
password- : 2
TLSv1.1 : 3
TLSv1.2 : 8
cert : 29
SNI : 9
(Server : 2
Indication) : 2
("ssl.match_hostname()") : 1
CRLs : 6
(Certificate : 1
Revocation : 2
"ssl.SSLContext.load_verify_locations()") : 1
442**) : 2
Leveraging : 1
(bpo-18214) : 1
Configurable : 2
445**) : 1
436**) : 2
1.5.4 : 1
unversioned : 3
"pip3" : 1
"pip3.4" : 1
bootstrapped : 3
--default-pip" : 1
446** : 2
"os.get_inheritable()" : 1
"os.set_inheritable()" : 3
"os.get_handle_inheritable()" : 1
"os.set_handle_inheritable()" : 2
"socket.socket.get_inheritable()" : 1
"socket.socket.set_inheritable()" : 1
type-neutral : 1
obscured : 1
clarifying : 4
"codecs.encode()" : 1
"codecs.decode()" : 1
<-> : 1
non-text : 2
appropriate: : 3
b"abcdef".decode("hex") : 1
LookupError: : 3
codecs.decode() : 2
"hello".encode("rot13") : 1
'rot13' : 1
codecs.encode() : 2
open("foo.txt" : 1
encoding="hex") : 1
codecs.open() : 2
codecs.decode(b"abcdefgh" : 1
"hex") : 3
"/usr/lib/python3.4/encodings/hex_codec.py" : 1
hex_decode : 1
(binascii.a2b_hex(input) : 1
len(input)) : 2
binascii.Error: : 4
Non-hexadecimal : 3
(Error: : 1
found) : 5
codecs.encode("hello" : 1
"bz2") : 1
"/usr/lib/python3.4/encodings/bz2_codec.py" : 1
bz2_encode : 1
(bz2.compress(input) : 1
"/usr/lib/python3.4/bz2.py" : 1
comp.compress(data) : 1
comp.flush() : 2
'bz2' : 1
(TypeError: : 1
restoration : 4
non-Unicode : 1
encode(b"hello" : 1
b'68656c6c6f' : 1
decode(b"68656c6c6f" : 1
bpo-7475 : 1
bpo-17827 : 1
bpo-17828 : 1
bpo-19619.) : 1
specification) : 3
stepping : 6
stone : 1
public-facing : 1
backward- : 3
everyone : 3
UCD : 4
Berman : 1
bpo-18111.) : 1
referenceable : 6
"__main__.__file__" : 2
bpo-18416.) : 1
UTF-* : 2
UTF-7) : 1
surrogates : 3
surrogate : 25
pairs) : 3
non-BMP : 15
characters) : 15
Kang-Hao : 1
(Kenny) : 1
bpo-12892.) : 1
German : 8
EBCDIC : 2
"cp273" : 1
Bierenfeld : 1
bpo-1097797.) : 1
Ukrainian : 4
"cp1125" : 1
bpo-19668.) : 1
"bytes".join() : 1
"bytearray".join() : 1
bpo-15958.) : 1
"__index__" : 3
bpo-16772.) : 1
"clear()" : 13
bpo-17934.) : 1
"Sequence" : 8
bpo-18690 : 1
bpo-19078.) : 1
Signatures : 3
"__length_hint__()" : 3
424**) : 1
bpo-16148.) : 3
solid : 4
interoperate : 7
3156** : 1
Rebooted: : 1
declined : 1
releases) : 4
uninstalled.) : 1
*ensure*pip : 1
"--upgrade" : 1
"socket") : 2
435** : 1
Bendersky : 2
divided : 25
*pure : 1
paths* : 2
computational : 6
*concrete : 1
428** : 1
deviation : 20
450** : 1
information: : 11
snapshots : 7
454** : 1
"abc.get_cache_token()" : 1
bpo-16832.) : 1
"ABC" : 6
"ABCMeta" : 10
"metaclass=abc.ABCMeta" : 1
Dupuis : 1
bpo-16049.) : 1
"getparams()" : 4
bpo-17818.) : 1
Storchacha : 1
bpo-16486.) : 1
"writeframesraw()" : 8
"writeframes()" : 9
bpo-8311.) : 3
Maystre : 1
bpo-11175.) : 1
24-bit : 3
bpo-12866.) : 1
"byteswap()" : 1
bpo-19641.) : 1
accepted: : 5
bpo-16685.) : 1
*bytes- : 5
bpo-17839.) : 1
"a85encode()" : 2
"a85decode()" : 1
"b85encode()" : 2
"b85decode()" : 1
"Ascii85" : 2
git/mercurial : 1
"Base85" : 1
"a85" : 1
Adobe : 3
Morrison : 2
Mercurial : 6
bpo-17618.) : 1
"ChainMap.new_child()" : 2
*m* : 27
bpo-16613.) : 1
coefficients : 2
RGB : 17
YIQ : 5
FCC : 1
NTSC : 1
1% : 2
Landers : 2
bpo-14323.) : 1
"contextlib.suppress" : 1
bpo-15806 : 1
Zero : 4
Piraeus : 1
bpo-19266.) : 1
"contextlib.redirect_stdout()" : 1
bpo-15805.) : 1
"dbm.open()" : 3
bpo-19282.) : 1
"show_code()" : 2
"dis()" : 8
"distb()" : 1
"disassemble()" : 1
*file* : 97
"Instruction" : 5
"get_instructions()" : 4
Instruction : 1
manipulates : 5
instr : 4
dis.get_instructions(lambda : 1
1): : 4
print(instr.opname) : 2
LOAD_FAST : 11
LOAD_CONST : 10
BINARY_ADD : 4
RETURN_VALUE : 7
application-friendly : 1
"Bytecode" : 7
"get_instruction()" : 1
(plus : 1
*current_offset*) : 1
dis.Bytecode(lambda : 1
current_offset=3) : 1
bytecode: : 2
print('{} : 1
({})'.format(instr.opname : 1
instr.opcode)) : 1
(124) : 1
(100) : 1
(23) : 2
(83) : 1
bytecode.dis().splitlines() : 1
(x)' : 1
(1)' : 1
BINARY_ADD' : 1
RETURN_VALUE'] : 1
"from_traceback()" : 1
"print(Bytecode.from_traceback(tb).dis())" : 1
"distb(tb)") : 1
Kelly : 4
bpo-11816 : 1
bpo-17916.) : 1
"stack_effect()" : 2
bpo-19722.) : 1
"FAIL_FAST" : 1
halts : 1
Urban : 4
bpo-16522.) : 1
"-o" : 12
"-o : 2
FAIL_FAST" : 2
CLI) : 2
bpo-11390.) : 1
doctests : 30
bpo-3158.) : 1
"as_string()" : 5
"as_string" : 2
"generator" : 13
"flatten" : 3
bpo-18600.) : 2
"as_bytes()" : 6
*maxheaderlen* : 11
*unixfrom* : 13
"__bytes__()" : 3
"bytes(mymsg)" : 1
"Message.set_param()" : 1
*replace* : 5
bpo-18891.) : 2
("EmailMessage" : 1
"MIMEPart") : 2
"content_manager" : 9
email's : 1
email6 : 1
"clear_cache()" : 2
re-checked : 1
filesystem's : 2
Levitt : 1
bpo-18149.) : 1
"DEFAULT_IGNORES" : 1
*ignore* : 10
"dircmp()" : 1
bpo-15442.) : 1
"partialmethod()" : 1
Alon : 3
Horev : 1
bpo-4331.) : 1
"singledispatch()" : 1
*different* : 1
Katie : 2
Miller : 1
bpo-10042.) : 1
pure-python : 2
stdlib; : 1
Thorne : 2
bpo-12428.) : 1
"get_stats()" : 2
per-generation : 2
bpo-16351.) : 1
"escape()" : 3
bpo-8402.) : 1
bpo-18582.) : 1
hashes) : 2
bpo-18532.) : 1
"new()" : 7
*msg* : 58
Jonas : 3
Borgström : 1
bpo-18240.) : 1
*digestmod* : 9
"hmac.new()" : 5
"MD5" : 4
bpo-17276.) : 1
"block_size" : 1
"digest_size" : 2
attribute) : 15
247** : 1
bpo-18775.) : 1
HTML5 : 5
bpo-2927.) : 1
backward-compatibility : 2
bpo-13633.) : 1
"send_error()" : 4
*explain* : 5
hardcoded : 14
"error_message_format" : 2
Cow : 1
bpo-12921.) : 1
"-b/--bind" : 2
listen : 6
Malte : 1
Swart : 1
bpo-17764.) : 1
3.3.0 : 1
"InspectLoader" : 4
"source_to_code()" : 1
"compile(data : 1
dont_inherit=True)" : 1
bpo-15627.) : 1
"get_code()" : 1
bpo-18072.) : 1
bpo-18193.) : 1
"MAGIC_NUMBER" : 1
"get_magic()" : 2
bpo-18192.) : 1
"cache_from_source()" : 1
"source_from_cache()" : 1
same-named : 3
bpo-18194.) : 1
"NamespaceLoader" : 1
-m" : 5
bpo-18058.) : 1
"decode_source()" : 1
"InspectLoader.get_source()" : 2
"get_filename()" : 1
bpo-19152.) : 1
bpo-18626.) : 1
"unwrap()" : 3
unravel : 1
"functools.wraps()" : 5
Aaron : 8
Iles : 1
bpo-13266.) : 1
"__dir__" : 10
bpo-18929 : 1
bpo-19030.) : 2
"getargspec()" : 3
broader : 1
"__signature__" : 3
clinic : 6
bpo-17481.) : 1
bpo-17159.) : 1
"is_global" : 1
routeable : 1
bpo-17400.) : 1
*atTime* : 7
rollover : 22
bpo-9556.) : 1
"SocketHandler" : 12
"DatagramHandler" : 4
*port* : 25
"None") : 60
ce46195b56a9.) : 1
"configparser.RawConfigParser" : 1
*fname* : 2
facilitates : 2
bpo-16110.) : 1
"logging.config.listen()" : 1
*verify* : 1
bpo-15452.) : 1
bumped : 3
Python2 : 4
interning : 1
deserialization : 3
"one : 2
copy" : 3
references) : 3
".pyo") : 1
Jónsson : 2
bpo-16475 : 1
bpo-19219.) : 1
Valerie : 1
Lambert : 2
bpo-4885.) : 1
"spawn" : 5
"forkserver" : 5
"get_all_start_methods()" : 1
"get_start_method()" : 1
"set_start_method()" : 3
Oudkerk : 9
bpo-8713.) : 1
"get_context()" : 4
"Pool"s : 1
bpo-18999.) : 1
*fork* : 8
handles/file : 1
bpo-8713) : 1
switch) : 1
initialise : 1
bpo-19946.) : 1
"length_hint()" : 1
424** : 1
bpo-16694.) : 1
("os.get_inheritable()" : 1
"os.set_inheritable()") : 1
("os.get_handle_inheritable()" : 1
"os.set_handle_inheritable()") : 1
"cpu_count()" : 1
determined) : 1
"multiprocessing.cpu_count()" : 1
Nelson : 1
Yogesh : 1
Chaudhari : 1
bpo-17914.) : 1
"os.path.samestat()" : 2
"os.path.samefile()" : 3
Curtin : 7
bpo-11939.) : 1
"os.path.ismount()" : 1
mounted : 5
bpo-9035.) : 1
"O_PATH" : 3
(un-opened : 1
descriptor) : 5
"O_TMPFILE" : 2
(unnamed : 1
uapi : 1
headers) : 10
bpo-18673 : 1
bpo-16596.) : 1
Python2's : 1
Python3 : 5
"p" : 17
"repr" : 10
"pdb : 1
print" : 1
Connor : 1
Osborn : 1
bpo-18764.) : 1
3154** : 3
Vassalotti : 5
deprecated.) : 1
plist : 24
("FMT_XML") : 1
("FMT_BINARY") : 1
bpo-14455.) : 1
"poplib": : 1
"capa()" : 1
advertised : 5
"stls()" : 1
clear-text : 1
encrypted : 28
Lorenzo : 2
Catucci : 2
bpo-4473.) : 1
"PrettyPrinter" : 9
"pformat()" : 1
"pprint()" : 5
*compact* : 10
*width* : 40
(indented) : 1
bpo-19132.) : 1
bpo-17150.) : 1
"pty.spawn()" : 1
"os.waitpid()" : 4
bpo-19674.) : 1
bpo-20710.) : 1
"fullmatch()" : 2
"regex.fullmatch()" : 1
Matthew : 5
Barnett : 2
bpo-16203.) : 1
Lopes : 1
Tavares : 1
bpo-13592 : 1
bpo-17087.) : 1
"prlimit()" : 1
2.6.36 : 3
2.13 : 2
bpo-16595.) : 1
"RLIMIT_MSGQUEUE" : 1
"RLIMIT_NICE" : 1
"RLIMIT_RTPRIO" : 1
"RLIMIT_RTTIME" : 1
"RLIMIT_SIGPENDING" : 1
bpo-19324.) : 1
"RLIMIT_SBSIZE" : 1
"RLIMIT_SWAP" : 1
"RLIMIT_NPTS" : 1
bpo-19343.) : 1
"epoll" : 2
bpo-16488.) : 1
"devpoll" : 1
"closed" : 5
bpo-18794.) : 1
"Shelf" : 7
Filip : 4
Gruszczyński : 4
bpo-13896.) : 1
"SameFileError" : 3
Atsuo : 2
Ishimoto : 2
Schlawack : 4
bpo-1492704.) : 1
*map* : 9
"asynchat.async_chat" : 6
bpo-11959.) : 1
"SMTPException" : 3
cares : 1
Jackson : 2
bpo-2118.) : 1
"CAN_BCM" : 2
bpo-15359.) : 1
"get_inheritable()" : 1
"set_inheritable()" : 1
"socket.AF_*" : 1
"socket.SOCK_*" : 1
"AF_LINK" : 1
"inet_ntop()" : 4
bpo-7171.) : 1
*uri* : 8
*database* : 8
"uri" : 1
documentation) : 4
poq : 1
bpo-13773.) : 1
(TLSv1.1 : 1
bpo-16692.) : 1
"create_default_context()" : 9
balance : 3
stringent : 2
adjusted : 23
best- : 1
bpo-19689.) : 1
"load_verify_locations()" : 2
*cadata* : 5
PEM : 10
DER : 3
bpo-18138.) : 1
"get_default_verify_paths()" : 1
"set_default_verify_paths()" : 1
"cafile" : 2
"capath" : 2
bpo-18143.) : 1
"cert_store_stats()" : 1
"X.509" : 1
certs : 7
"X.509 : 1
CA" : 1
revocation : 7
("crl"s) : 1
"get_ca_certs()" : 1
"CA" : 4
bpo-18147.) : 1
"verify_flags" : 1
"VERIFY_DEFAULT" : 1
"VERIFY_CRL_CHECK_LEAF" : 2
"VERIFY_CRL_CHECK_CHAIN" : 1
"VERIFY_X509_STRICT" : 1
CRL : 4
Christien : 1
bpo-8813.) : 1
"load_default_certs()" : 1
"certificate : 1
authority" : 5
(CA) : 5
("purpose=""SERVER_AUTH") : 1
verifying : 8
("purpose=""CLIENT_AUTH") : 1
bpo-19292.) : 1
windows-only : 1
"enum_certificates()" : 1
"enum_crls()" : 1
bpo-17134.) : 1
"ssl.SSLContext.set_servername_callback()" : 1
Black : 3
bpo-8109.) : 1
"SSLSocket.getpeercert()" : 4
"X509v3" : 1
"crlDistributionPoints" : 2
"calIssuers" : 1
"OCSP" : 2
bpo-18379.) : 1
"_stat" : 1
bpo-11016.) : 2
"ST_MODE" : 2
"S_IFDOOR" : 3
"S_IFPORT" : 3
"S_IFWHT" : 3
Hiemes : 1
"iter_unpack" : 1
"struct.Struct.iter_unpack()" : 1
streamed : 5
bpo-17804.) : 1
*input* : 26
"stdin" : 18
Zack : 1
Weinberg : 1
bpo-16624.) : 1
"getstatus()" : 1
"getstatusoutput()" : 2
bpo-10197.) : 1
bpo-18901.) : 1
bpo-18878.) : 1
"AU_write.setsampwidth()" : 1
24 : 34
bpo-19261.) : 1
"sys.getallocatedblocks()" : 2
with-pymalloc" : 1
API.) : 2
bpo-13390.) : 2
"__interactivehook__" : 1
"~/.python-history") : 1
(new) : 5
callable) : 7
Éric : 10
Araujo : 8
bpo-5845.) : 2
bpo-13477.) : 1
"TextWrapper" : 17
attributes/constructor : 1
"max_lines" : 1
"placeholder" : 2
*max_lines* : 2
"shorten()" : 2
collapses : 2
*placeholder* : 2
"[...]") : 1
bpo-18585 : 1
bpo-18725.) : 1
"Thread" : 11
"main_thread()" : 1
bpo-18882.) : 1
"traceback.clear_frames()" : 1
bpo-1565525.) : 1
"DynamicClassAttribute()" : 1
routed : 2
"__getattr__" : 12
"data:" : 1
"DataHandler" : 2
Mathias : 1
Panzenböck : 1
bpo-16423.) : 1
"Request" : 25
"method" : 7
bpo-18978.) : 1
reusable: : 1
"full_url" : 2
"data" : 23
"OpenerDirector.open()" : 2
"Request"'s : 2
recomputing : 1
"remove_header()" : 1
bpo-16464 : 1
Wozniak : 1
bpo-17485 : 1
Damien : 2
bpo-17272.) : 1
"HTTPError" : 17
"headers" : 6
bpo-15701.) : 1
"subTest()" : 2
"sub-test" : 1
"subTest" : 1
indefinite : 1
counted : 16
NumbersTest(unittest.TestCase): : 2
test_even(self): : 2
range(6): : 1
self.subTest(i=i): : 2
self.assertEqual(i : 6
six : 29
("i=0" : 1
"i=1" : 1
bpo-16997.) : 1
*defaultTest* : 3
Jyrki : 1
Pulliainen : 1
bpo-15132.) : 1
Zach : 2
bpo-16935.) : 1
"discover()" : 1
discovered : 10
Melin : 1
Ramnani : 1
bpo-16709.) : 1
"TestSuite" : 23
"_removeTestAtIndex" : 2
Wardill : 1
McClure : 1
bpo-11798.) : 1
assertion : 80
context-manager : 2
queried : 12
"LogRecord"s : 1
bpo-18937.) : 1
bpo-17457.) : 1
signatures : 37
bpo-17015.) : 1
"mock_open()" : 1
"readlines" : 2
Toshio : 1
Kuratomi : 1
bpo-17467.) : 1
"csh" : 1
"fish" : 1
bpo-15417.) : 1
"create()" : 3
*with_pip* : 1
bpo-19552 : 2
implementation.) : 4
bpo-17487.) : 1
bpo-17616.) : 1
bpo-5202.) : 1
"WeakMethod" : 3
simulates : 7
bpo-14631.) : 1
"finalize" : 4
bpo-15528.) : 1
"ref" : 5
"__callback__" : 2
bpo-17643.) : 1
"XMLPullParser" : 6
bpo-17741.) : 1
"tostringlist()" : 2
*short_empty_elements* : 9
("<tag : 1
/>") : 2
("<tag></tag>") : 1
Ariel : 1
Poliak : 1
bpo-14377.) : 1
"writepy()" : 2
"PyZipFile" : 4
*filterfunc* : 5
bpo-19274.) : 1
*allowZip64* : 2
"PyZipfile" : 1
William : 8
Mallard : 1
bpo-17201.) : 1
445** : 2
interpreter-shutdown-time : 1
"__del__" : 9
plagued : 1
456** : 1
facing : 3
bpo-14621 : 1
improvements.) : 1
packager : 4
SipHash : 2
FNV : 1
"sys.hash_info" : 3
Clinic" : 1
436** : 1
DSL : 1
retrieval : 9
bpo-17162.) : 1
"Py_SetStandardStreamEncoding()" : 5
pre-initialization : 1
Bastien : 1
Montagne : 1
bpo-16129.) : 1
bpo-1772673.) : 1
"python-config" : 1
scenarios) : 2
"%A" : 4
"%U" : 8
"%S" : 5
Ysj : 1
Ray : 2
bpo-7330.) : 1
"PyStructSequence_InitType2()" : 1
supplements : 2
"PyStructSequence_InitType()" : 1
clang: : 1
alarms : 3
silenced : 5
Dhiru : 1
Kholia : 1
bpo-18596.) : 1
Space : 5
Layout : 2
Randomization : 1
Prevention : 1
bpo-16632.) : 1
"PyObject_LengthHint()" : 1
"operator.length_hint()" : 2
"isolated : 1
"-E") : 1
isolate : 5
bpo-16499.) : 1
Tab-completion : 3
"~/.python-history" : 1
(bpo-18338) : 1
(bpo-18920) : 1
script-like : 1
(bpo-18922) : 1
bpo-18569.) : 1
coverage-report : 1
codebase : 3
"gcov" : 1
lcov : 1
".dll") : 1
Václav : 1
Šmilauer : 1
bpo-16421.) : 1
"LOAD_CLASSDEREF" : 1
__prepare__ : 1
bpo-17853.) : 1
MemoryError-related : 1
445**-based : 1
"pyfailmalloc" : 1
(bpo-18408 : 1
bpo-18520) : 1
"--copies" : 2
bpo-18807.) : 1
"--without-pip" : 3
otherwise-automatic : 1
bpo-18818.) : 1
(exclusive : 9
creation) : 10
bpo-19201 : 1
bpo-19222 : 1
bpo-19223.) : 1
3x : 3
4x : 5
bpo-14625.) : 1
probe : 19
key/hash : 1
exploits : 3
hybrid : 3
addressing : 8
nine : 5
LINEAR_PROBES : 1
LINEAR_PROBES=0 : 1
turn-off : 1
bpo-18771.) : 1
bpo-19219 : 1
bpo-19218 : 1
bpo-19209 : 1
bpo-19205 : 1
bpo-9548.) : 1
"lzma.LZMAFile" : 3
Nadeem : 4
Vawda : 4
bpo-16034.) : 1
"random.getrandbits()" : 1
20%-40% : 1
bpo-16674.) : 1
bpo-15596.) : 1
"io.FileIO.readall()" : 1
piping : 3
bpo-15758.) : 1
"html.escape()" : 1
10x : 7
Bryant : 1
bpo-18020.) : 1
"VirtualAlloc" : 1
CRT : 7
"obmalloc" : 1
Artificial : 1
3% : 1
savings : 6
bpo-18756.) : 1
"importlib.util.find_spec()"; : 1
"importlib.machinery.PathFinder.find_spec()"; : 1
"importlib.abc.MetaPathFinder.find_spec()"; : 1
"find_module()" : 19
"importlib.abc.PathEntryFinder.find_spec()"; : 1
"xxxLoader" : 1
"load_module" : 1
("importlib.abc.Loader.load_module()" : 1
"importlib.abc.InspectLoader.load_module()" : 1
"importlib.abc.FileLoader.load_module()" : 1
"importlib.abc.SourceLoader.load_module()") : 1
"exec_module" : 1
("importlib.abc.Loader.exec_module()" : 1
"importlib.abc.InspectLoader.exec_module()" : 1
"importlib.abc.SourceLoader.exec_module()") : 1
rest; : 1
"importlib.util.set_loader()" : 1
"importlib.util.set_package()" : 1
*endtime* : 1
"subprocess.Popen.wait()" : 2
"readPlist()" : 2
"writePlist()" : 1
"readPlistFromBytes()" : 2
"writePlistToBytes()" : 1
"Data()" : 1
"SO" : 6
"EXT_SUFFIX" : 6
"xml.etree.ElementTree.iterparse()" : 2
*html* : 4
"XMLParser()" : 1
"-n" : 21
subprocess) : 3
bpo-18823 : 1
"site-python" : 3
(bpo-19375) : 1
tools: : 2
(bpo-16135) : 1
(changeset : 3
e52df05b496a) : 1
"COMSPEC" : 3
"command.com" : 2
(bpo-14470) : 1
VMS : 3
(bpo-16136) : 1
"Misc/TextMate" : 1
"Misc/vim" : 1
devguide : 3
"SHLIB_SUFFIX" : 2
(bpo-16754) : 1
"PyThreadState.tick_counter" : 1
GIL" : 2
(bpo-19199) : 1
"PyLoader" : 2
"PyPycLoader" : 2
Taras : 1
Lyapun : 1
bpo-15641.) : 1
0.9-style : 3
"Simple : 4
Responses" : 4
"urllib.request.Request" : 4
"add_data" : 1
"has_data" : 1
"get_data" : 4
"get_type" : 1
"get_host" : 1
"get_selector" : 1
"set_proxy" : 1
"get_origin_req_host" : 1
"is_unverifiable" : 1
"TYPE_INT64" : 1
Riti : 1
bpo-15480.) : 1
"inspect.Signature": : 1
incorrect) : 1
__format__ : 7
"'s'" : 14
bpo-7994 : 1
"difflib.SequenceMatcher.isbjunk()" : 1
"difflib.SequenceMatcher.isbpopular()" : 1
sm.bjunk" : 1
sm.bpopular" : 1
*sm* : 1
(bpo-13248) : 1
"Scanner" : 1
"_gestalt" : 1
"_mac_ver_lookup" : 1
"_mac_ver_gstalt" : 1
"_bcd2str" : 1
badly : 4
bpo-18393) : 1
posix : 16
reasoning : 1
[X : 1
refs : 2
blocks] : 1
("--with-pydebug") : 1
bpo-17323.) : 1
"argparse") : 1
blindly : 3
backwards-compatible : 10
"getattr(module : 3
(bpo-17115.) : 1
reloading : 9
"importlib.util.module_to_load()" : 1
"__cached__") : 1
pre-3.3 : 2
re-found : 1
re-loaded : 1
(bpo-19413) : 1
"hasattr(module : 1
'__path__')" : 1
(bpo-18065) : 1
"__spec__.location" : 1
"'frozen'" : 1
"importlib.machinery.FrozenImporter" : 1
"imp.is_frozen()" : 1
"py_compile.compile()" : 5
"FileExistsError" : 23
non-regular : 3
"importlib.abc.SourceLoader.get_source()" : 1
felt : 1
over-reaching/overloading : 1
"functools.update_wrapper()" : 2
"inspect.unwrap()" : 1
non-Python : 11
"importlib.machinery.PathFinder" : 2
"''" : 30
bpo-18416) : 1
(bpo-18416) : 1
positionally : 4
interstitial : 1
compliance : 13
spec; : 1
(bpo-17434) : 1
"ssl.SSLSocket.getpeercert()" : 3
"ssl.SSLSocket.do_handshake()" : 1
"ENOTCONN" : 1
"getpeercert()" : 5
"base64.b32decode()" : 2
"binascii.Error" : 7
non-b32-alphabet : 1
"TypeError"s : 1
bpo-18011.) : 1
"cgi.FieldStorage" : 5
pulling : 6
"write" : 11
(bpo-9177) : 1
"slice.indices()" : 2
length; : 2
nonsense : 2
(bpo-14794) : 1
incorrectly : 50
"__complex__" : 4
(bpo-16290.) : 1
(bpo-16772) : 1
Defaults : 38
Hopefully : 1
(bpo-16967) : 1
Stale : 2
perpetually : 1
storage) : 4
(bpo-17094.) : 1
mangled : 5
"__kwdefaults__" : 2
bpo-20625.) : 1
"hashlib.hash.name" : 1
(bpo-18532) : 1
harnesses : 2
re-used : 4
"TestSuite.__iter__()") : 1
(bpo-11798) : 1
disallowed : 15
"re.findall()" : 3
"groups()" : 2
*bytes* : 13
(bpo-16685) : 1
(bpo-13633) : 1
(bpo-17276) : 1
"sysconfig.get_config_var()" : 4
"sysconfig.get_config_vars()" : 1
(bpo-19555) : 1
ineffective : 2
(bpo-15204) : 1
"json.dump()" : 1
changed: : 6
white-space- : 1
sensitive : 14
(bpo-16333) : 1
(bpo-3158) : 1
depended : 7
(undocumented) : 1
collections.abc" : 2
(bpo-20784) : 1
"PyEval_EvalFrameEx()" : 3
"PyObject_Repr()" : 8
"PyObject_Str()" : 5
discarding : 5
exception) : 23
"PyOS_ReadlineFunctionPointer" : 1
"PyMem_RawMalloc()" : 10
"PyMem_RawRealloc()" : 9
(bpo-16742) : 1
"PyThread_set_key_value()" : 2
"f_tstate" : 1
(thread : 1
state) : 6
"PyFrameObject" : 9
bug: : 4
bpo-14432 : 1
urllib.request.urlopen("https://invalid-cert" : 1
June : 4
2018 : 2
postponed : 8
Backwards : 4
"contextvars": : 1
567 : 1
"dataclasses": : 1
557 : 2
553 : 1
562 : 1
560 : 2
insertion-order : 1
preservation : 2
Avoiding : 3
538 : 1
540 : 1
forced : 13
552 : 1
.pycs : 1
565 : 1
539 : 1
545 : 1
translations: : 1
Japanese : 16
Korean : 9
advent : 1
glaring : 1
526**: : 2
kind; : 1
adverse : 1
postponing : 1
cheaper : 2
Usability-wise : 1
from_string(cls : 1
source: : 4
validate_b(self : 1
B) : 2
bool: : 1
per-module : 19
import: : 3
563** : 5
"7-bit : 1
ASCII" : 1
coerce : 6
Automatically : 10
"readline") : 3
suitably : 6
"strict") : 2
(currently : 10
"UTF-8") : 1
assist : 12
(emitted : 1
"stderr") : 1
538**'s : 3
downside : 4
RHEL/CentOS : 2
Coercing : 1
"utf8" : 11
540**'s : 1
communicating : 8
Mode) : 2
"PYTHONCOERCECLOCALE=0" : 1
540** : 3
"pdb.set_trace()" : 7
"PYTHONBREAKPOINT" : 4
"PYTHONBREAKPOINT=0" : 1
553** : 2
breakpoint() : 1
support; : 3
POSIX-compliant : 2
539** : 3
TSS : 7
"Py_tss_t" : 6
keys--an : 1
Erik : 5
Bray; : 1
Masayuki : 11
Yamamoto : 13
"__dir__()" : 7
562** : 2
"time.time()" : 15
564** : 4
"nanosecond" : 1
"time.clock_gettime_ns()" : 2
"time.clock_settime_ns()" : 2
"time.monotonic_ns()" : 3
"time.perf_counter_ns()" : 3
"time.process_time_ns()" : 2
"time.time_ns()" : 4
Measurements : 1
behaviours: : 2
"FutureWarning": : 1
settings) : 4
"DeprecationWarning": : 1
"PendingDeprecationWarning": : 1
565** : 1
*any* : 4
"__class_getitem__()" : 27
"__mro_entries__" : 7
standing : 4
560** : 6
up-to-dateness : 1
(last- : 1
size) : 23
drawbacks : 2
coarse : 2
reproducibility : 1
content-based : 2
552** : 8
"hash-based" : 2
validates : 8
pycs : 10
Unchecked : 1
545** : 2
https://docs.python.org/ja/ : 1
French: : 1
https://docs.python.org/fr/ : 1
https://docs.python.org/ko/ : 1
Julien : 3
Palard : 3
"dev" : 2
"PYTHONDEVMODE" : 3
bpo-12844 : 1
bpo-18896.) : 1
"bytearray.fromhex()" : 2
Xiao : 2
bpo-28927.) : 1
"isascii()" : 1
bpo-32677.) : 1
bpo-29546.) : 1
bpo-30024.) : 1
"object.__format__(x : 3
'')" : 11
"str(x)" : 3
"format(str(self) : 2
bpo-28974.) : 1
"types.TracebackType" : 4
"tb_next" : 5
bpo-30579.) : 1
"sys.path[0]" : 4
eagerly : 4
*current* : 1
occurs) : 2
bpo-33053.) : 1
"importtime" : 1
bpo-31415.) : 1
variables* : 1
567** : 10
"dataclass()" : 22
classes* : 7
Point(1.5 : 1
print(p) : 2
"Point(x=1.5 : 1
y=2.5 : 1
z=0.0)" : 1
557** : 2
*resources* : 3
needn't : 5
"get_resource_reader()" : 4
"importlib.abc.ResourceReader" : 5
bpo-32248 : 1
importlib_resources : 3
"ArgumentParser.parse_intermixed_args()" : 1
intermixing : 1
paul.j3 : 1
bpo-14191.) : 1
synchronous : 14
destroying : 4
bpo-32314.) : 2
"loop.call_soon()" : 10
"loop.call_soon_threadsafe()" : 5
"loop.call_later()" : 5
"loop.call_at()" : 4
"Future.add_done_callback()" : 2
"Tasks" : 4
bpo-32436.) : 1
"asyncio.create_task()" : 12
"asyncio.get_event_loop().create_task()" : 1
bpo-32311.) : 1
"loop.start_tls()" : 2
bpo-23749.) : 1
"loop.sock_recv_into()" : 2
bpo-31819.) : 1
"Task.current_task()" : 1
"Task.all_tasks()" : 1
bpo-32250.) : 2
"BufferedProtocol" : 4
streaming : 10
bpo-32251.) : 1
"asyncio.get_running_loop()" : 2
"asyncio.get_event_loop()" : 8
*create* : 12
bpo-32269.) : 1
"StreamWriter.wait_closed()" : 1
"StreamWriter.is_closing()" : 1
bpo-32391.) : 1
"loop.sock_sendfile()" : 2
"os.sendfile" : 5
bpo-32410.) : 1
"Future.get_loop()" : 1
"Task.get_loop()" : 1
"Server.get_loop()" : 1
"asyncio.Server" : 3
bpo-32415 : 1
Srinivas : 6
Reddy : 5
Thatiparthy : 5
bpo-32418.) : 1
serving : 14
*start_serving* : 7
"loop.create_unix_server()" : 6
"Server.start_serving()" : 3
"Server.serve_forever()" : 3
decouple : 1
"Server.is_serving()" : 1
"Server" : 6
managers: : 3
srv : 6
loop.create_server(...) : 2
srv: : 3
bpo-32662.) : 2
"when()" : 1
bpo-32741.) : 1
"loop.create_datagram_endpoint() : 1
Quentin : 2
Dawans : 1
bpo-31245.) : 1
"asyncio.open_connection()" : 9
"asyncio.start_server()" : 6
"loop.create_accepted_socket()" : 1
*ssl_handshake_timeout* : 15
Aspinall : 1
bpo-29970.) : 1
"Handle.cancelled()" : 1
cancelled : 72
Marat : 2
Sharafutdinov : 2
bpo-31943.) : 1
"async"/"await" : 1
bpo-32193.) : 1
"ReadTransport.is_reading()" : 1
"ReadTransport.resume_reading()" : 1
"ReadTransport.pause_reading()" : 1
idempotent : 9
bpo-32356.) : 1
*path- : 9
bpo-32066.) : 1
bpo-30508.) : 1
"WindowsSelectorEventLoopPolicy" : 1
"WindowsProactorEventLoopPolicy" : 1
bpo-33792.) : 1
"b2a_uu()" : 1
*backtick* : 6
"'`'" : 5
bpo-30103.) : 2
"HTMLCalendar" : 5
CSS : 14
Oz : 1
Tiram : 1
bpo-30095.) : 1
bpo-32320.) : 1
"compileall.compile_dir()" : 4
*invalidation_mode* : 14
"--invalidation-mode" : 2
bpo-31650.) : 1
*initializer* : 14
*initargs* : 5
bpo-21423.) : 1
*mp_context* : 5
Moreau : 1
bpo-31540.) : 1
"nullcontext()" : 1
"ExitStack" : 13
Jesse-Bakker : 1
bpo-10049.) : 1
"asynccontextmanager()" : 5
"AbstractAsyncContextManager" : 1
"AsyncExitStack" : 2
bpo-29679 : 1
bpo-30241 : 1
Mohr : 2
Ilya : 3
Kulakov : 2
bpo-29302.) : 1
module_name" : 4
Sanyam : 15
bpo-21862.) : 1
Blowfish : 3
bpo-31664.) : 1
"mksalt()" : 3
bpo-31702.) : 1
"datetime.fromisoformat()" : 2
bpo-15873.) : 1
sub-minute : 3
bpo-5288.) : 1
bpo-32630.) : 1
disassemble : 4
disassembly : 10
bpo-11822.) : 1
"README.rst" : 2
READMEs : 3
bpo-11913.) : 1
"_ignore_" : 10
bpo-31801.) : 1
non-Enum : 4
Color"); : 2
non-Flag : 2
Perm.RW"); : 2
bpo-33217.) : 2
bpo-32227.) : 1
"gc.freeze()" : 2
copy-on-write : 6
"gc.unfreeze()" : 1
"gc.get_freeze_count()" : 1
Zekun : 1
bpo-31558.) : 1
one-shot : 5
"HMAC()" : 1
bpo-32433.) : 1
*blocksize* : 7
Soffer : 10
bpo-31945.) : 1
"SimpleHTTPRequestHandler" : 7
"If-Modified-Since" : 1
304 : 1
Pierre : 8
Quentel : 5
bpo-29654.) : 1
*directory* : 14
"--directory" : 2
bpo-28707.) : 1
"ThreadingHTTPServer" : 2
"ThreadingMixin" : 1
bpo-31639.) : 1
3.7.1: : 4
NEW : 1
3.7.4: : 1
"Run : 2
Customized" : 2
sys.argv : 8
re-appear : 2
bpo-5680 : 2
bpo-37627.) : 2
3.7.5: : 1
Saimadhav : 16
Heblikar : 17
bpo-17535.) : 2
bpo-32248.) : 1
Garvit : 6
Khatri : 4
bpo-29851.) : 1
"importlib.find_spec()" : 1
bpo-30436.) : 1
"importlib.source_hash()" : 1
"TextIOWrapper.reconfigure()" : 3
reconfigure : 2
bpo-30526 : 1
bpo-15216.) : 1
"subnet_of()" : 1
"supernet_of()" : 1
"ipaddress.IPv6Network" : 2
"ipaddress.IPv4Network" : 2
containment : 8
bpo-20825.) : 1
"integer-like : 1
bpo-30537.) : 1
"locale.format_string()" : 2
monetary : 14
bpo-10379.) : 2
"locale.getpreferredencoding()" : 5
"'UTF-8'" : 4
bpo-30520.) : 1
"StreamHandler.setStream()" : 1
bpo-30522.) : 1
"logging.config.fileConfig()" : 1
bpo-31080.) : 1
"math.remainder()" : 1
754-style : 2
bpo-29962.) : 1
.bmp : 2
"'image/x-ms-bmp'" : 1
"'image/bmp'" : 1
Nitish : 3
Chandra : 3
bpo-22589.) : 1
"Database.Close()" : 2
bpo-20486.) : 1
"Process.close()" : 1
bpo-30596.) : 1
"Process.kill()" : 1
Vitor : 3
Pereira : 2
bpo-30794.) : 1
Non-daemonic : 2
bpo-18966.) : 1
"os.fwalk()" : 3
bpo-28682.) : 1
bpo-25996.) : 2
"register_at_fork()" : 1
bpo-16500.) : 3
"os.preadv()" : 2
(combine : 2
"os.readv()" : 3
"os.pread()") : 1
"os.pwritev()" : 4
"os.writev()" : 3
"os.pwrite()") : 1
bpo-31368.) : 1
intermediate-level : 5
bpo-19930.) : 2
bpo-32441.) : 1
"st_fstype" : 2
derivatives : 7
bpo-32659.) : 1
"Path.is_mount()" : 1
mount : 9
Ry : 3
Lees : 3
bpo-30897.) : 1
*header* : 21
bpo-31389.) : 1
bpo-32206.) : 1
"SOURCE_DATE_EPOCH" : 8
guaranteeing : 1
reproducible : 13
Bernhard : 2
Wiedemann : 2
bpo-29708.) : 1
Feanil : 1
Patel : 1
bpo-31128.) : 1
"SimpleQueue" : 9
unbounded : 13
FIFO : 20
bpo-14976.) : 1
"re.UNICODE" : 2
bpo-31690.) : 1
"r'\b'" : 1
"'^$'" : 1
"(?=-)" : 1
bpo-25054.) : 1
bpo-30215.) : 1
bpo-30349.) : 2
Compiled : 7
bpo-10076.) : 1
*warn_on_full_buffer* : 1
"signal.set_wakeup_fd()" : 2
wakeup : 11
overflows : 13
bpo-30050.) : 1
"socket.getblocking()" : 1
bpo-32373.) : 1
"socket.close()" : 3
bpo-32454.) : 1
"socket.TCP_CONGESTION" : 3
(Linux : 9
2.6.13) : 3
"socket.TCP_USER_TIMEOUT" : 3
2.6.37) : 3
"socket.TCP_NOTSENT_LOWAT" : 2
3.12) : 2
bpo-26273 : 1
bpo-29728.) : 1
"socket.AF_VSOCK" : 1
Cathy : 1
Avery : 1
bpo-27584.) : 1
bpo-28134.) : 1
"socketserver.ThreadingMixIn.server_close()" : 4
"socketserver.ForkingMixIn.server_close()" : 4
"socketserver.ForkingMixIn.block_on_close" : 4
"socketserver.ForkingMixIn" : 1
"socketserver.ThreadingMixIn" : 2
pre-3.7 : 4
"sqlite3.Connection" : 12
"backup()" : 1
3.6.11 : 3
Lele : 3
Gaifax : 3
bpo-27645.) : 1
"sqlite3.connect()" : 6
bpo-31843.) : 1
"SSLCertVerificationError" : 3
Alert : 3
"SSLContext.hostname_checks_common_name" : 2
bpo-31399.) : 2
*libssl* : 1
LibreSSL : 16
2.7.2 : 1
bpo-32185.) : 1
"www*.example.org" : 1
Mandeep : 2
Singh : 2
bpo-23033 : 1
blacklist : 2
whitelist : 3
re-enables : 2
bpo-31429.) : 1
Validation : 4
internationalized : 13
(IDNs) : 1
"SSLSocket.server_hostname" : 1
A-label : 3
(""xn--pythn-mua.org"") : 3
U-label : 3
(""pythön.org"") : 3
bpo-28414.) : 1
bpo-32947 : 1
bpo-20995 : 1
bpo-29136 : 1
bpo-30622 : 1
bpo-33618) : 1
"wrap_bio()" : 4
bpo-32951) : 1
"SSLContext.minimum_version" : 5
"SSLContext.maximum_version" : 6
"HAS_TLSv1_1" : 1
bpo-32609.) : 1
"string.Template" : 14
braced : 4
non-braced : 2
bpo-1198569.) : 1
*capture_output* : 6
Bo : 5
Bayles : 5
bpo-32102.) : 2
"subprocess.run" : 1
Clegg : 2
bpo-31756.) : 1
Segev : 10
bpo-19764.) : 1
graceful : 2
"subprocess.call()" : 1
bpo-25942.) : 1
bpo-31353.) : 1
"sys.getandroidapilevel()" : 1
bpo-28740.) : 1
"sys.get_coroutine_origin_tracking_depth()" : 2
"sys.set_coroutine_origin_tracking_depth()" : 1
"sys.set_coroutine_wrapper()" : 3
bpo-32591.) : 1
"time.CLOCK_BOOTTIME" : 2
(Linux): : 1
Identical : 20
"time.CLOCK_MONOTONIC" : 1
"time.CLOCK_PROF" : 2
(FreeBSD : 2
NetBSD : 35
OpenBSD): : 2
High-resolution : 3
"time.CLOCK_UPTIME" : 2
uptime : 3
"time.thread_time()" : 3
"time.thread_time_ns()" : 1
per-thread : 10
measurements : 11
bpo-32025.) : 1
"time.pthread_getcpuclockid()" : 1
thread-specific : 8
CPU-time : 3
"tkinter.ttk.Spinbox" : 1
bpo-32585.) : 1
"tracemalloc.Traceback" : 3
"Traceback.format()" : 4
"abs(limit)" : 5
*most_recent_first* : 3
Bakker : 2
bpo-32121.) : 2
"WrapperDescriptorType" : 1
"MethodWrapperType" : 6
"MethodDescriptorType" : 1
"ClassMethodDescriptorType" : 1
Manuel : 6
Krebber : 5
bpo-29377 : 1
bpo-32265.) : 1
"types.resolve_bases()" : 2
bpo-32717.) : 1
"-k" : 7
shell-like : 6
-k : 3
"foo_tests.SomeTest.test_something" : 2
"bar_tests.SomeTest.test_foo" : 2
"bar_tests.FooTest.test_something" : 2
Haag : 1
bpo-32071.) : 1
"sentinel" : 6
"copied" : 2
"pickled" : 2
bpo-20804.) : 1
"seal()" : 1
sealing : 5
seal : 3
bpo-30541.) : 1
"urllib.parse.quote()" : 1
Theune : 3
Ratnadeep : 2
Debnath : 2
bpo-16285.) : 1
"uu.encode()" : 2
"UUID.is_safe" : 1
relays : 3
multiprocessing- : 1
bpo-22807.) : 1
"uuid.getnode()" : 4
administered : 10
uniqueness : 4
"uuid.uuid1()" : 5
bpo-32107.) : 1
CPython-specific : 3
"sys.warnoptions" : 10
precedence: : 1
"BytesWarning" : 6
"-bb") : 1
bpo-20361 : 1
bpo-32043 : 1
bpo-32230.) : 1
single-file : 6
bpo-31975.) : 1
ElementPath : 1
predicates : 8
"[ : 7
"text"]" : 1
Predicates : 2
bpo-31648.) : 1
"SimpleXMLRPCDispatcher.register_function" : 1
bpo-7769.) : 1
"create_archive()" : 4
Irmen : 1
Jong : 1
bpo-31072.) : 1
*compressed* : 4
compress" : 1
Zhiming : 1
bpo-31638.) : 1
bpo-21417.) : 1
Subdirectories : 2
bpo-30693.) : 1
bpo-25658.) : 1
"PyImport_GetModule()" : 4
bpo-28411.) : 1
"Py_RETURN_RICHCOMPARE" : 1
eases : 4
Victorin : 1
bpo-23699.) : 1
"Py_UNREACHABLE" : 3
bpo-31338.) : 1
"PyTraceMalloc_Track()" : 1
"PyTraceMalloc_Untrack()" : 1
bpo-30054.) : 1
"import__find__load__start()" : 1
"import__find__load__done()" : 1
bpo-31574.) : 1
"PyStructSequence_Field" : 2
"PyStructSequence_Desc" : 4
"wrapperbase" : 1
bpo-28761.) : 1
"PyUnicode_AsUTF8()" : 3
bpo-28769.) : 1
"PyMapping_Keys()" : 4
"PyMapping_Values()" : 3
"PyMapping_Items()" : 3
Oren : 75
Milman : 70
bpo-28280.) : 1
"PySlice_Unpack()" : 5
"PySlice_AdjustIndices()" : 5
bpo-27867.) : 3
"PyOS_AfterFork()" : 3
"PyOS_BeforeFork()" : 6
"PyOS_AfterFork_Parent()" : 6
"PyOS_AfterFork_Child()" : 10
bpo-30697 : 1
"PyTimeZone_FromOffset()" : 1
"PyTimeZone_FromOffsetAndName()" : 1
"PyDateTime_TimeZone_UTC" : 1
bpo-10381 : 1
"PyThread_start_new_thread()" : 2
"PyThread_get_thread_ident()" : 2
*id* : 20
"PyThreadState_SetAsyncExc()" : 2
bpo-6532.) : 1
wchar_t* : 9
bpo-30708.) : 1
abide : 1
segfaults : 10
"PyInterpreterState_GetID()" : 2
bpo-29102.) : 1
bpo-29240.) : 2
"PyUnicode_DecodeLocaleAndSize()" : 5
"PyUnicode_EncodeLocale()" : 5
bpo-28822.) : 1
"--without-threads" : 1
bpo-31370.) : 2
non-OSX : 3
bpo-27979.) : 1
-3.6") : 3
NuGet : 4
bpo-30450.) : 1
libssl : 1
2016-12-31 : 1
"METH_FASTCALL" : 8
bpo-29300 : 1
bpo-29507 : 1
bpo-29452 : 1
bpo-29286.) : 1
bpo-29585 : 1
bpo-31333.) : 1
bpo-26110.) : 2
bpo-32296.) : 1
bpo-32348.) : 1
bpo-32355.) : 1
"asyncio.sleep()" : 3
bpo-32351.) : 1
bpo-31970.) : 1
bpo-32226.) : 1
40-75% : 1
Elliot : 2
Gorokhovsky : 2
bpo-28685.) : 1
"dict.copy()" : 2
bpo-31179.) : 1
"object.__getattr__()" : 1
"object.__getattribute__()" : 6
bpo-32544.) : 1
"Є") : 1
bpo-24821.) : 1
bpo-28638.) : 2
"date.fromordinal()" : 1
"date.fromtimestamp()" : 1
bpo-32403.) : 1
20-- : 1
40% : 9
bpo-28564.) : 1
"regular : 7
expressions" : 3
bpo-30285.) : 1
"re.compile()" : 11
"RegexFlag" : 3
bpo-31671.) : 1
"modify()" : 2
"selectors.EpollSelector" : 1
"selectors.PollSelector" : 1
"selectors.DevpollSelector" : 1
bpo-30014) : 1
Eugene : 4
Toder : 4
bpo-29469 : 1
bpo-11549.) : 1
1.5x : 3
bpo-31333) : 1
fast-path : 2
bpo-32403) : 1
70x : 2
Adrian : 4
Wielgosik : 2
bpo-24700.) : 1
"math.erf()" : 1
"math.erfc()" : 1
(faster) : 1
bpo-26121.) : 1
"line" : 17
"opcode" : 2
"f_trace_lines" : 7
"f_trace_opcodes" : 7
bpo-31344.) : 1
unset) : 1
"__spec__.origin" : 5
""namespace"") : 1
bpo-32305 : 1
bpo-32303 : 1
bpo-32690.) : 1
CR : 18
end- : 3
of-line : 1
CRLF : 7
corruption : 25
sdists : 2
bpo-32304.) : 1
clauses) : 2
(aside : 2
clause) : 5
interleave : 1
bpo-10544.) : 2
"object.__complex__()" : 1
"__complex__()" : 13
"object.__int__()" : 1
"object.__float__()" : 1
bpo-28894.) : 1
bpo-31985.) : 3
"await"-ing : 1
"asyncio.Lock" : 4
acquire : 36
bpo-32253.) : 1
bpo-25988.) : 1
recreated : 6
bpo-28847.) : 1
bpo-28692.) : 1
"MetaPathFinder.find_module()" : 1
"MetaPathFinder.find_spec()") : 1
"PathEntryFinder.find_loader()" : 1
"PathEntryFinder.find_spec()") : 1
bpo-29576) : 1
"importlib.abc.ResourceLoader" : 2
"locale.format()" : 1
"macpath" : 3
Chi : 9
Hsuan : 9
Yen : 10
bpo-9850.) : 1
bpo-28332.) : 1
bpo-28124.) : 1
"sys.get_coroutine_wrapper()" : 2
bpo-28799.) : 1
=========================================== : 13
"PySlice_GetIndicesEx()" : 6
"0x03050400" : 3
"0x03060000" : 3
inclusive) : 1
"0x03060100" : 3
*nix : 1
(full : 5
("LC_CTYPE"-only : 1
"ASCII"-based : 1
SSL/TLS : 13
Notably : 2
"jessie") : 1
Ubuntu : 4
14.04 : 1
"Trusty") : 1
LTS : 2
("stretch") : 1
16.04 : 1
("xenial") : 1
SLES : 1
12-SP3) : 1
"os.stat_float_times()" : 3
"tarfile.TarFile.add()" : 1
"splitunc()" : 1
"ntpath" : 2
"splitdrive()" : 2
"_source" : 2
showed : 2
speed-up : 2
"Plist" : 1
"Dict" : 1
"_InternalDict" : 1
"asyncio.windows_utils.socketpair()" : 3
"socket.socketpair()" : 2
"asyncio.windows_utils.socketpair" : 1
"socket.socketpair" : 2
"_overlapped" : 2
"asyncio.selectors" : 1
"asyncio._overlapped" : 1
selectors" : 2
"ssl.SSLObject" : 4
bpo-32951.) : 1
"install_misc" : 1
Vander : 2
Weele : 2
bpo-29218.) : 1
"fpectl" : 2
x86-64 : 6
bpo-29137.) : 1
(py.exe) : 1
-3-32" : 1
-3-64" : 1
-3.7-32" : 1
-*m*-64 : 1
-*m.n*-64 : 1
Barnes : 4
bpo-30291.) : 1
-0" : 1
pythons : 1
*with : 1
asterisk* : 1
-0p" : 1
*short : 1
form* : 1
bpo-30362.) : 1
bpo-30406.) : 1
transformed : 26
bpo-32670.) : 1
"object.__aiter__()" : 1
bpo-31709.) : 1
[1],) : 1
C(1 : 1
[1]): : 1
bpo-32012 : 1
bpo-32023.) : 1
import) : 8
"os.getcwd()" : 7
"os.path.dirname(__main__.__file__)" : 1
place) : 3
non-daemon : 6
"socketserver.ThreadingMixIn.block_on_close" : 2
bpo-31233 : 1
bpo-33540.) : 2
bpo-31151 : 1
bpo-24744.) : 1
"string.Formatter.format()" : 1
bpo-29193.) : 1
Assigning : 11
bpo-29192.) : 1
umask : 10
"makedirs()" : 4
"struct.Struct.format" : 1
bpo-21071.) : 2
"parse_multipart()" : 1
"FieldStorage": : 1
bpo-29979.) : 1
"socket.fromshare()" : 1
"socket.share" : 1
bpo-30399.) : 1
"datetime.timedelta" : 8
Utkarsh : 1
Upadhyay : 1
bpo-30302.) : 1
*onerror* : 7
"os.scandir" : 2
"os.listdir" : 2
#18 : 2
facilitate : 11
"'['" : 3
"'--'" : 4
"'&&'" : 2
"'~~'" : 2
"'||'" : 2
"r'\s*'" : 1
whitespaces : 16
non-whitespace : 4
"r'\s+'" : 1
"'a\n\n'" : 1
"r'(?m)^\s*?$'" : 1
positions : 36
2--3 : 1
"r'(?m)^[^\S\n]*$'" : 1
"re.sub('x*' : 1
'-' : 22
'abxd')" : 2
"'-a-b--d-'" : 2
"'-a-b-d-'" : 1
'd') : 2
bpo-25054 : 1
bpo-32308.) : 1
"re.escape()" : 2
bpo-29995.) : 1
"socket.SOCK_NONBLOCK" : 1
"socket.SOCK_CLOEXEC" : 1
"socket.type" : 4
sock.type : 1
socket.SOCK_STREAM" : 1
bpo-32331.) : 1
"close_fds=False" : 1
"STARTUPINFO.lpAttributeList" : 2
"importlib.machinery.PathFinder.invalidate_caches()" : 2
"importlib.invalidate_caches()" : 7
bpo-33169.) : 1
"loop.sock_recv()" : 2
"loop.sock_sendall()" : 2
"loop.sock_accept()" : 2
"loop.getnameinfo()" : 2
bpo-32327.) : 1
"asyncio.Server.sockets" : 1
"Struct.format" : 1
subparsers : 17
"required=True" : 1
"ArgumentParser.add_subparsers()" : 1
bpo-26510.) : 1
"ast.literal_eval()" : 7
Addition : 9
subtraction : 20
bpo-31778.) : 1
"Calendar.itermonthdates" : 1
"0001-01-01" : 1
"9999-12-31" : 1
tolerate : 5
"Calendar.itermonthdays3" : 1
"Calendar.itermonthdays4" : 1
bpo-28292.) : 1
"collections.ChainMap" : 5
bpo-32792.) : 1
"submit()" : 3
"concurrent.futures.ThreadPoolExecutor" : 6
"concurrent.futures.ProcessPoolExecutor" : 14
Nemec : 1
bpo-33097.) : 1
"configparser.ConfigParser" : 2
"read_dict()" : 4
Non-string : 3
Tocknell : 2
bpo-23835.) : 1
"os.errno" : 1
errno" : 1
opcodes: : 1
"LOAD_METHOD" : 8
"CALL_METHOD" : 4
bpo-32550.) : 1
"<python- : 1
executable>._pth" : 1
"'sys.path'" : 1
bpo-28137.) : 1
preparation : 6
432** : 2
draft) : 1
uncover : 3
latent : 1
defects : 20
(Initially : 1
bpo-22257 : 1
affected: : 2
"PySys_AddWarnOptionUnicode()" : 4
"Py_Initialize" : 2
"PySys_AddWarnOption()" : 6
"Py_BytesWarningFlag" : 3
"error::BytesWarning" : 2
co-routine : 2
swap : 17
bpo-25612.) : 1
"Py_Main()" : 5
respected : 6
ill-defined : 1
bpo-34247) : 1
"Py_IgnoreEnvironmentFlag" : 2
bpo-34762 : 2
redirector : 4
recreation : 1
******************** : 11
essays : 1
tours : 1
"must : 1
read" : 1
"Changelog" : 1
Misc/NEWS.d : 1
nontrivial : 2
29 : 10
398** : 1
"u'unicode'" : 1
(helps : 1
crashes) : 2
(high-level : 1
masks) : 1
(compress : 1
XZ : 3
algorithm) : 1
(replace : 5
package) : 16
Reworked : 1
Rewritten : 1
Modules: : 1
Accelerator : 1
(*provisional*) : 1
setups : 1
segregated : 1
405** : 2
Meyer; : 1
segments : 16
(inspired : 1
420**) : 2
========================================================================= : 2
3118** : 8
comprehensively : 2
crashed : 10
multi-dimensional : 6
PEP-3118 : 1
getbufferproc() : 1
consumer's : 1
generality : 2
non-contiguous : 5
spelling : 7
exporters : 2
NumPy-style : 2
(optionally : 2
'@') : 2
cast() : 1
Multi-dimensional : 4
One-dimensional : 6
memoryviews : 9
(read-only) : 4
bpo-13411.) : 1
1-D : 1
dimensions : 14
(unsigned : 4
unrecognised : 3
bpo-10181.) : 1
Revising : 2
ordinal : 24
space-efficient : 2
parallel; : 1
reduction : 14
worse : 8
"U+0000" : 1
"U+10FFFF") : 1
death : 2
"len('\U0010FFFF') : 1
1"; : 1
recombined : 2
"'\uDBFF\uDFFF' : 1
'\U0010FFFF'"; : 1
"'\U0010FFFF'[0]" : 1
"'\U0010FFFF'" : 1
"'\uDBFF'"; : 1
"sys.maxunicode" : 2
"1114111" : 2
("0x10FFFF" : 2
hexadecimal) : 2
"0xFFFF" : 2
"0x10FFFF" : 3
bpo-13054) : 1
"--with-wide-unicode" : 1
("U+0000-U+00FF") : 1
BMP : 6
("U+0000-U+FFFF") : 1
("U+10000-U+10FFFF") : 1
decrease : 3
non-human : 2
JSON-encoded : 1
Django : 4
Torsten : 5
Becker : 1
"*.py" : 7
"shebang : 1
line" : 4
"-2.6" : 1
installed) : 2
bpo-3561.) : 1
modification: : 1
finer-grained : 3
"EnvironmentError" : 2
"WindowsError" : 7
"mmap.error" : 2
"socket.error" : 8
"select.error" : 2
"args[0]") : 1
"BlockingIOError" : 19
"ChildProcessError" : 6
"IsADirectoryError" : 6
"NotADirectoryError" : 5
"ProcessLookupError" : 4
subclasses: : 3
"BrokenPipeError" : 10
"ConnectionAbortedError" : 4
"ConnectionRefusedError" : 4
"ConnectionResetError" : 6
ENOENT : 2
EACCES : 6
EPERM : 4
open("document.txt") : 2
IOError : 2
err.errno : 2
ENOENT: : 1
print("document.txt : 2
missing") : 2
(EACCES : 1
EPERM): : 1
print("You : 2
document.txt") : 2
PermissionError: : 2
3151** : 6
380 : 1
delegate : 10
factored : 1
subgenerator : 2
delegating : 6
subiterators : 1
shortened : 4
item": : 1
g(x): : 4
range(x : 3
range(x) : 1
list(g(5)) : 1
subgenerators : 3
accumulate(): : 1
tally : 11
gather_tallies(tallies): : 1
accumulate() : 3
tallies.append(tally) : 1
tallies : 3
acc : 1
gather_tallies(tallies) : 1
next(acc) : 1
accumulator : 3
acc.send(i) : 2
acc.send(None) : 2
Finish : 11
"send" : 9
"throw" : 3
subfunctions : 2
380** : 2
Ewing; : 1
Renaud : 2
Blanch : 2
Zbigniew : 4
Jędrzejewski-Szmek : 4
409 : 1
extra): : 2
self._extra_attributes : 2
attr): : 5
self._extra_attributes[attr] : 2
AttributeError(attr) : 2
D({}).x : 2
__getattr__ : 15
C({}).x : 1
details): : 3
print(repr(exc.__context__)) : 1
KeyError('x',) : 1
409** : 1
""u"" : 1
mechanical : 2
data) : 33
414** : 2
(non-bound) : 1
C.meth.__name__ : 1
'meth' : 2
C.meth.__qualname__ : 1
'C.meth' : 1
C.D.__name__ : 1
C.D.meth.__name__ : 1
outer(): : 1
inner(): : 2
outer().__name__ : 1
'inner' : 1
outer().__qualname__ : 1
'outer.<locals>.inner' : 1
str(C.D) : 1
"<class : 2
'__main__.C.D'>" : 1
str(C.D.meth) : 1
'<function : 1
C.D.meth : 1
0x7f46b9fe31e0>' : 1
non-builtin : 1
412** : 2
"inspect.BoundArguments" : 1
amends : 1
362**: : 1
Seo; : 1
"sys.implementation" : 7
"version" : 27
"hexversion" : 3
"cache_tag" : 4
consolidate : 4
"sys.implementation.cache_tag" : 9
mapping-based : 1
"SimpleNamespace" : 5
attribute-based : 1
421** : 3
bpo-2377 : 1
__import__ : 2
w/ : 1
importlib.__import__ : 1
bpo-13959 : 1
Re- : 1
bpo-14605 : 1
bpo-14646 : 1
__loader__ : 4
__package__ : 8
powered : 1
"importlib.__import__()" : 5
"phase : 1
powering : 1
VMs : 3
helping : 6
VM-specific : 1
deviations : 4
growth : 3
exposure : 3
delineate : 1
"importlib.machinery.FileFinder" : 3
"importlib.abc.FileLoader" : 3
("importlib.machinery.SourceFileLoader") : 1
("importlib.machinery.SourcelessFileLoader") : 1
("importlib.machinery.ExtensionFileLoader") : 1
tail : 11
expanse : 1
one's : 4
3rd-party : 3
post-load : 2
366** : 7
"imp.NullImporter" : 4
relate : 5
(Implementation : 1
Cannon) : 1
"unicodedata.lookup()" : 2
"'\N{...}'" : 1
bpo-12753.) : 1
6.1.0 : 1
(bpo-13201) : 1
Petri : 5
Lehtinen : 3
bpo-12170.) : 1
"fill" : 1
bpo-12380.) : 1
"bytearray": : 1
(bpo-10516) : 1
(bpo-11388) : 1
"rb"..."" : 1
"br"..."" : 1
bpo-13748.) : 1
"dict.setdefault()" : 3
bpo-13521.) : 1
deadlocks : 10
Clumsy : 1
employed : 6
importation : 2
(preventing : 1
incompletely : 4
bpo-9260.) : 1
*opener* : 13
(*file* : 2
*flags*) : 3
"os.O_CLOEXEC" : 1
*flush* : 5
flushed : 26
"hash()": : 1
"object.__hash__()" : 2
casefolded : 3
caseless : 3
"'ß'.casefold()" : 1
"'ss'" : 1
binary/text : 1
(bpo-4966) : 1
fault) : 1
"PYTHONFAULTHANDLER" : 4
Linux: : 1
ctypes.string_at(0) : 2
Segmentation : 6
0x00007fb899f39700: : 1
"/home/python/cpython/Lib/ctypes/__init__.py" : 2
486 : 2
string_at : 2
networks : 16
subnet) : 1
3144**.) : 1
".xz" : 6
".lzma" : 4
Øyvind : 1
Karlsen : 2
bpo-6715.) : 1
"__isabstractmethod__" : 2
"abc.abstractproperty" : 2
"abc.abstractmethod()" : 6
"abc.abstractclassmethod" : 2
"classmethod" : 8
"abc.abstractstaticmethod" : 2
"staticmethod" : 4
Darren : 1
Dale : 1
bpo-11610.) : 1
"abc.ABCMeta.register()" : 1
(bpo-10868) : 1
Tirosh : 1
bpo-1172711.) : 1
"base64.b64decode('YWJj')" : 1
"b'abc'" : 1
Catalin : 2
Iacob : 2
bpo-13641.) : 1
"a2b_" : 1
bpo-13637.) : 1
"bz2.open()" : 1
bzip2-compressed : 4
constructor's : 3
*fileobj* : 27
bpo-5863.) : 1
"bz2.decompress()" : 2
decompress : 15
multi-stream : 5
**pbzip2** : 1
(append) : 2
Aides : 3
bpo-1625.) : 1
"detach()" : 7
"cp65001" : 3
(bpo-13216) : 1
65001 : 2
"CP_UTF8") : 1
cp65001 : 3
"chcp : 1
65001" : 1
Multibyte : 2
CJK : 6
decoders : 14
resynchronize : 2
"b'\xff\n'.decode('gb2312' : 1
'replace')" : 1
(bpo-12016) : 1
encode() : 4
codecs.getincrementalencoder('hz')('strict') : 1
b''.join(encoder.encode(x) : 1
'\u52ff\u65bd\u65bc\u4eba\u3002 : 1
Bye.') : 1
b'~{NpJ)l6HK!#~} : 1
Bye.' : 1
"b'~{Np~}~{J)~}~{l6~}~{HK~}~{!#~} : 1
Bye.'" : 1
(bpo-12100) : 1
"unicode_internal" : 5
treating : 16
(Written : 2
bpo-11089 : 1
bpo-11297.) : 1
(bpo-11085) : 1
unary : 22
bpo-13121.) : 1
"contextlib.nested" : 1
synchronisation : 2
(bpo-13585) : 1
salt : 20
(hashing : 1
(bpo-10924) : 1
ncursesw : 2
"waddwstr()") : 1
"waddstr()") : 1
"curses.window" : 2
"curses.window.encoding" : 1
"get_wch()" : 4
"unget_wch()" : 1
push : 23
Iñigo : 1
Serna : 1
bpo-6755.) : 1
naive : 46
(bpo-15006) : 1
"datetime.datetime.timestamp()" : 1
"datetime.datetime.strftime()" : 1
"datetime.datetime.astimezone()" : 2
bpo-7652 : 1
integrate : 8
C-module : 1
IBM's : 5
gains : 6
100x : 1
precisions : 4
configurable : 11
bignum : 2
illustration : 9
Benchmarks : 1
https://www.bytereef.org/mpdecimal/quickstart.html : 1
+-----------+---------------+----------------+---------------+ : 4
decimal.py : 3
_decimal : 3
|===========|===============|================|===============| : 1
42.02s : 1
0.345s : 1
120x : 1
telco : 1
172.19s : 1
5.68s : 1
30x : 3
psycopg : 1
3.57s : 1
0.29s : 1
12x : 1
"FloatOperation" : 6
Decimals : 10
"HAVE_THREADS" : 1
~~~~~~~~~~~ : 2
architecture: : 1
+---------------------+-----------------------+--------------------------------+ : 4
|=====================|=======================|================================| : 1
"MAX_PREC" : 2
"425000000" : 4
"999999999999999999" : 4
"MAX_EMAX" : 1
"MIN_EMIN" : 1
"-425000000" : 2
"-999999999999999999" : 2
("DefaultContext" : 1
"BasicContext" : 2
"ExtendedContext") : 1
"Emax" : 5
"Emin" : 4
"999999" : 1
observe : 5
exponents : 8
"create_decimal()" : 3
"ln()" : 2
"almost : 2
rounded" : 2
RHS : 1
"watchexp" : 1
"quantize()" : 5
~~~~~~~~~~~~~~~~ : 4
"Policy" : 12
"Compat32" : 5
sub-objects : 3
+-----------------+---------------------------------------------------------+ : 8
max_line_length : 4
linesep : 4
character(s) : 5
78 : 3
cte_type : 2
"7bit" : 16
"8bit" : 14
"Bytes" : 4
raise_on_defect : 2
Causes : 8
"defects" : 7
"clone()" : 5
"clone" : 2
mypolicy : 1
compat32.clone(linesep='\r\n') : 1
"linesep='\r\n'" : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 2
policy* : 1
"EmailPolicy" : 8
controls: : 1
refold_source : 2
Controls : 7
refolded : 11
"none" : 8
"max_line_length" : 6
header_factory : 2
"header_factory" : 11
Date : 9
Message(policy=SMTP) : 1
m['To'] : 1
'Éric : 3
<foo@example.com>' : 3
m['to'] : 1
m['to'].addresses : 1
(Address(display_name='Éric' : 1
username='foo' : 1
domain='example.com'),) : 1
m['to'].addresses[0].username : 1
m['to'].addresses[0].display_name : 1
'Éric' : 1
m['Date'] : 2
email.utils.localtime() : 1
m['Date'].datetime : 1
datetime.datetime(2012 : 1
39 : 2
465484 : 1
tzinfo=datetime.timezone(datetime.timedelta(-1 : 1
72000) : 1
'EDT')) : 1
'Fri : 3
21:44:27 : 3
-0400' : 1
print(m) : 5
To: : 6
=?utf-8?q?=C3=89ric?= : 2
<foo@example.com> : 2
Date: : 3
Fri : 3
-0400 : 3
"email.header" : 5
"decode_header()" : 4
"make_header()" : 1
parts: : 4
m['cc'] : 1
[Group('pals' : 1
[Address('Bob' : 1
'bob' : 1
'example.com') : 1
Address('Sally' : 1
'sally' : 1
'example.com')]) : 1
Address('Bonzo' : 1
addr_spec='bonz@laugh.com')] : 1
cc: : 2
pals: : 1
<bob@example.com> : 1
Sally : 1
<sally@example.com>; : 1
Bonzo : 1
<bonz@laugh.com> : 1
message_from_string(str(m)) : 1
m2['to'] : 1
"addresses" : 3
"groups" : 4
m2['cc'].addresses : 1
(Address(display_name='Bob' : 1
username='bob' : 2
domain='example.com') : 3
Address(display_name='Sally' : 2
username='sally' : 2
Address(display_name='Bonzo' : 1
username='bonz' : 2
domain='laugh.com')) : 1
m2['cc'].groups : 1
(Group(display_name='pals' : 1
addresses=(Address(display_name='Bob' : 1
domain='example.com')) : 1
Group(display_name=None : 1
addresses=(Address(display_name='Bonzo' : 1
domain='laugh.com'),)) : 1
ought : 1
Transfer : 16
"BytesHeaderParser" : 3
"HeaderParser" : 3
"format_datetime()": : 1
"parsedate_to_datetime()": : 1
"-0000" : 6
"localtime()": : 1
"source_address" : 2
outgoing : 7
Rodolà : 15
bpo-8594.) : 1
"ccc()" : 1
plaintext : 3
firewalls : 5
NAT : 2
non-secure : 1
bpo-12139.) : 1
"ftplib.FTP.mlsd()" : 2
deprecates : 1
"ftplib.FTP.nlst()" : 2
"ftplib.FTP.dir()" : 1
bpo-11072.) : 1
"typed" : 4
bpo-13227.) : 1
"callbacks" : 1
"compare_digest()" : 3
bpo-15061.) : 1
"http.server.BaseHTTPRequestHandler" : 2
"end_headers()" : 5
"flush_headers()" : 3
Schaaf : 1
bpo-3709.) : 1
"HTML : 1
4.01 : 1
strict" : 1
bpo-13295.) : 1
"http.client.HTTPResponse" : 2
"readinto()" : 11
"io.RawIOBase" : 3
Kuhn : 1
bpo-13464.) : 1
markup : 16
"HTMLParseError" : 1
2.7/3.2 : 1
bpo-15114 : 1
bpo-14538 : 1
bpo-13993 : 1
bpo-13960 : 1
bpo-13358 : 1
bpo-1745761 : 1
bpo-755670 : 1
bpo-13357 : 1
bpo-12629 : 1
bpo-1200313 : 1
bpo-670664 : 1
bpo-13273 : 1
bpo-12888 : 1
bpo-7311.) : 1
"html5" : 2
"html5['gt;'] : 2
'>'") : 1
bpo-11113 : 1
bpo-15156.) : 1
SSLContext : 11
Sijin : 1
bpo-8808.) : 1
"getclosurevars()" : 1
stateful : 2
closures : 6
bpo-13062.) : 1
"getgeneratorlocals()" : 2
bpo-15153.) : 1
C11 : 6
fopen() : 1
Townshend : 1
bpo-12760.) : 1
*write_through* : 5
buffered: : 2
"accumulate()" : 6
user-supplied : 4
"handlers" : 13
"append_nul" : 2
"NUL" : 2
("\000") : 1
daemons : 7
"log2()" : 1
logarithm : 25
bpo-11888.) : 1
bpo-12021.) : 1
"multiprocessing.connection.wait()" : 4
bpo-12328.) : 1
"multiprocessing.Connection" : 1
bpo-4892.) : 1
"multiprocessing.Process" : 3
"daemon" : 9
(bpo-6064) : 2
"multiprocessing.Process.sentinel" : 1
"multiprocessing.pool.Pool.starmap()" : 1
"starmap_async()" : 1
"itertools.starmap()" : 2
"multiprocessing.pool.Pool.map()" : 1
"map_async()" : 3
bpo-12708.) : 1
"nntplib.NNTP" : 3
done: : 8
NNTP('news.gmane.org') : 1
n.group('gmane.comp.python.committers') : 2
('211 : 2
1755 : 8
gmane.comp.python.committers' : 2
'gmane.comp.python.committers') : 2
bpo-9795.) : 1
"pipe2()" : 1
"O_CLOEXEC" : 3
"O_NONBLOCK" : 6
atomically : 6
"zero-copy" : 2
socket) : 11
userspace : 3
Lagerwall : 3
bpo-10882.) : 1
faster) : 1
(bpo-4761 : 1
bpo-10755 : 1
bpo-14626) : 1
"fwalk()" : 3
"walk()" : 15
(paths : 1
descriptors) : 11
symlinks): : 1
"access()" : 6
"chflags()" : 3
"chown()" : 3
"link()" : 4
"lstat()" : 9
"mkdir()" : 3
"readlink()" : 2
"remove()" : 9
"rename()" : 2
"rmdir()" : 7
"symlink()" : 1
"utime()" : 5
"os.supports_dir_fd" : 2
"os.supports_follows_symlinks" : 1
"chdir()" : 7
"execve()" : 7
"listdir()" : 3
"pathconf()" : 2
"exists()" : 10
"os.supports_fd" : 3
"effective_ids" : 1
uid/gid : 7
"supports_effective_ids" : 1
"getpriority()" : 2
"setpriority()" : 2
niceness/priority : 1
"os.nice()" : 1
bpo-10784.) : 1
"os.replace()" : 3
"os.rename()" : 7
bpo-8828.) : 1
("stat()" : 1
"lstat()") : 1
Symmetrically : 1
bpo-14127.) : 1
"os.get_terminal_size()" : 3
"shutil.get_terminal_size()" : 6
Jędrzejewski- : 1
Szmek : 1
bpo-13609.) : 2
(bpo-12720): : 1
"getxattr()" : 1
"listxattr()" : 2
"removexattr()" : 1
"setxattr()" : 3
"sched_get_priority_max()" : 1
"sched_get_priority_min()" : 1
"sched_getaffinity()" : 2
"sched_getparam()" : 2
"sched_getscheduler()" : 1
"sched_rr_get_interval()" : 1
"sched_setaffinity()" : 2
"sched_setparam()" : 2
"sched_setscheduler()" : 2
"sched_yield()" : 1
"posix_fadvise()": : 1
Announces : 2
"posix_fallocate()": : 1
Ensures : 23
"sync()": : 1
"lockf()": : 1
"pread()": : 1
"pwrite()": : 1
Write : 92
"readv()": : 1
"truncate()": : 1
Truncate : 5
"waitid()": : 1
"writev()": : 1
*buffers* : 18
"getgrouplist()" : 3
(bpo-9344): : 1
"times()" : 1
"uname()": : 1
tuple-like : 9
"lseek()" : 2
"os.SEEK_HOLE" : 3
"os.SEEK_DATA" : 3
"RTLD_LAZY" : 1
"RTLD_NOW" : 1
"RTLD_GLOBAL" : 3
"RTLD_LOCAL" : 5
"RTLD_NODELETE" : 1
"RTLD_NOLOAD" : 1
"RTLD_DEEPBIND" : 1
supersede : 3
bpo-13226.) : 1
"os.symlink()" : 3
ignores) : 1
"target_is_directory" : 1
bpo-14210) : 1
"pickle.Pickler" : 4
"dispatch_table" : 10
per-pickler : 1
bpo-14166.) : 1
"serve()" : 2
-g" : 1
"\u" : 6
"\U" : 4
bpo-3665.) : 1
*blocking* : 13
expire : 6
soonest : 2
any) : 41
"scheduler" : 8
bpo-13449.) : 1
Josiah : 4
Carlson : 1
bpo-8684.) : 1
*timefunc* : 5
*delayfunct* : 1
bpo-13245.) : 3
"enter()" : 2
"enterabs()" : 3
"select.devpoll" : 1
bpo-6397.) : 1
"quote" : 4
"quote()" : 8
"disk_usage()": : 1
bpo-12442.) : 1
"chown()": : 1
user/group : 3
Sandro : 1
Tosi : 1
bpo-12191.) : 1
"shutil.get_terminal_size()": : 1
"copystat()" : 12
"extended : 3
attributes" : 2
bpo-14127 : 1
bpo-15238.) : 1
"symlinks" : 2
dereferenced : 2
relevant) : 1
bpo-12715.) : 1
"mv" : 1
Niehof : 1
bpo-9993.) : 1
"dst" : 24
"dir_fd" : 31
"os.unlink()" : 3
bpo-4489.) : 1
"pthread_sigmask()": : 1
Calderone : 1
bpo-8407); : 1
"pthread_kill()": : 1
thread; : 4
"sigpending()": : 1
"sigwait()": : 1
"sigwaitinfo()": : 1
"sigtimedwait()": : 1
"sigwaitinfo()" : 5
nul : 1
"signal.siginterrupt()" : 2
5321** : 4
(extended : 1
SMTP) : 1
1870** : 3
(size : 1
extension) : 4
initiates : 1
"EHLO" : 11
(Initial : 1
"ELHO" : 1
Alberto : 2
Trevino : 1
Juhana : 1
Jauhiainen : 1
Substantial : 1
Boswell : 1
bpo-8739) : 1
Paulo : 6
Scardine : 1
bpo-11281.) : 1
bpo-11289.) : 1
"starttls()" : 2
Kasun : 1
Herath : 1
bpo-8809.) : 1
ancillary : 20
platform: : 9
"recvmsg_into()" : 1
Watson : 1
bpo-6560 : 1
Heiko : 1
Wundram) : 1
PF_CAN : 1
(https://en.wikipedia.org/wiki/Socketcan) : 1
(https://lwn.net/Articles/253425) : 1
Fuchs : 3
Tiago : 1
Gonçalves : 1
bpo-10141.) : 1
PF_RDS : 1
(https://en.wikipedia.org/wiki/Reliable_Datagram_Sockets : 1
https://oss.oracle.com/projects/rds/) : 1
"PF_SYSTEM" : 2
Goderbauer : 1
bpo-13777.) : 1
"sethostname()" : 1
bpo-10866.) : 1
"BaseServer" : 2
overridable : 1
"service_actions()" : 3
"serve_forever()" : 8
"ForkingMixIn" : 9
zombie : 7
Warkentin : 1
bpo-11109.) : 1
"set_trace_callback()" : 1
sql : 2
sqlite : 5
Landschoff : 3
bpo-11688.) : 1
"RAND_bytes()": : 1
"RAND_pseudo_bytes()": : 1
bpo-12049.) : 1
bpo-11183.) : 1
"load_cert_chain()" : 1
*password* : 14
Simpkins : 1
bpo-12803.) : 1
Diffie-Hellman : 4
Elliptic : 3
Curve-based : 3
"load_dh_params()" : 1
"set_ecdh_curve()" : 2
bpo-13626 : 1
bpo-13627.) : 1
"get_channel_binding()" : 2
SCRAM- : 1
SHA-1-PLUS : 1
Konieczny : 1
bpo-12551.) : 1
"compression()" : 2
"OP_NO_COMPRESSION" : 3
bpo-13634.) : 1
Colin : 2
Marc : 2
bpo-14204.) : 1
"library" : 3
"reason" : 2
bpo-14837.) : 1
"get_server_certificate()" : 1
bpo-11811.) : 1
"OP_CIPHER_SERVER_PREFERENCE" : 2
client's : 11
(bpo-13635) : 1
tarfile.filemode : 1
"stat.filemode()" : 2
'-rwxrwxrwx' : 2
bpo-14807.) : 1
"ssize_t" : 6
"size_t" : 6
"N" : 16
bpo-3163.) : 1
bpo-8513.) : 1
"DEVNULL" : 7
bpo-5870.) : 1
"thread_info" : 1
*named : 43
tuple* : 33
(bpo-11223) : 1
bpo-5689.) : 1
"tempfile.SpooledTemporaryFile"'s : 1
bpo-9957.) : 1
"indent()" : 1
(bpo-13857) : 1
"threading.Condition" : 4
"threading.Semaphore" : 3
"threading.BoundedSemaphore" : 3
"threading.Timer" : 2
bpo-10968.) : 1
"_thread.get_ident" : 2
"threading.get_ident()" : 3
418** : 1
"get_clock_info()": : 1
"monotonic()": : 1
Monotonic : 2
(cannot : 1
backward) : 2
"perf_counter()": : 1
"process_time()": : 1
Sum : 2
"clock_getres()" : 2
"clock_gettime()" : 3
"clock_settime()" : 3
"CLOCK_xxx" : 1
bpo-10278.) : 1
"sleep()" : 6
(bpo-14386) : 1
"types.new_class()" : 2
"types.prepare_class()" : 1
3115** : 4
(bpo-14588) : 1
"assertRaisesRegex()" : 7
"assertWarns()" : 8
"assertWarnsRegex()" : 4
Winston : 1
Ewert : 1
bpo-10775.) : 1
"unittest.TestCase.run()" : 1
"get_method()" : 3
"'HEAD'" : 2
urlopen(Request('https://www.python.org' : 1
method='HEAD')) : 1
(bpo-1673007) : 1
"browsers": : 1
Chrome : 4
(named : 3
**chrome** : 1
**chromium** : 1
**chrome-browser** : 1
**chromium-browser** : 1
launchers : 1
**xdg-open** : 1
FreeDesktop.org : 1
**gvfs- : 1
open** : 1
GNOME : 3
Calmettes : 1
bpo-13620 : 1
bpo-14493.) : 1
"xml.etree.cElementTree" : 5
"iter" : 5
(rewritten : 1
"zlib.Decompress.eof" : 1
bpo-12646.) : 1
"zlib.ZLIB_RUNTIME_VERSION" : 1
bpo-12306.) : 1
optimized: : 1
bpo-14624 : 1
bpo-14738 : 1
bpo-15026.) : 1
"PyMemoryView_FromMemory()" : 4
"PyUnicode_ReadChar()" : 4
"PyUnicode_WriteChar()" : 2
"Py_UCS1" : 1
"Py_UCS2" : 1
"Py_UCS4" : 3
"PyASCIIObject" : 1
"PyCompactUnicodeObject" : 1
"PyUnicode_READY" : 1
"PyUnicode_FromKindAndData()" : 3
"PyUnicode_AsUCS4()" : 4
"PyUnicode_DATA" : 2
"PyUnicode_1BYTE_DATA" : 1
"PyUnicode_2BYTE_DATA" : 1
"PyUnicode_4BYTE_DATA" : 1
"PyUnicode_KIND" : 1
"PyUnicode_Kind" : 1
enum: : 3
"PyUnicode_WCHAR_KIND" : 3
"PyUnicode_1BYTE_KIND" : 2
"PyUnicode_2BYTE_KIND" : 1
"PyUnicode_4BYTE_KIND" : 1
"PyUnicode_READ" : 2
"PyUnicode_READ_CHAR" : 1
"PyUnicode_WRITE" : 2
"PyUnicode_MAX_CHAR_VALUE" : 1
"PyArg_ParseTuple" : 2
(bpo-12380) : 1
maintainer : 10
OSF : 1
(bpo-9856) : 1
("utf-16-le" : 1
"utf-16-be") : 1
("utf-32-le" : 1
"utf-32-be") : 1
"ftplib.FTP.dir()": : 1
"platform.popen()": : 1
(bpo-11377) : 1
bpo-13374: : 1
bpo-13988: : 1
"time.clock()" : 3
"time.perf_counter()" : 14
"time.process_time()" : 6
"importlib.abc.SourceLoader.path_mtime()" : 1
"importlib.abc.SourceLoader.path_stats()" : 2
Py_UNICODE* : 7
"PyUnicode_FromUnicode": : 1
"PyUnicode_FromWideChar()" : 3
"PyUnicode_AS_UNICODE" : 1
"PyUnicode_AsUnicodeAndSize()": : 1
"PyUnicode_AS_DATA": : 1
"PyUnicode_GET_SIZE" : 1
"PyUnicode_GetSize()": : 1
"PyUnicode_GET_DATA_SIZE": : 1
"PyUnicode_GET_LENGTH(str) : 1
PyUnicode_KIND(str)" : 1
(only : 20
"PyUnicode_AsUnicodeCopy()": : 1
"Py_UNICODE_strncpy" : 1
"Py_UNICODE_COPY": : 1
"Py_UNICODE_FILL": : 1
"PyUnicode_Fill()" : 3
Encoders: : 1
"PyUnicode_Encode()": : 1
"PyUnicode_EncodeUTF7()" : 2
"PyUnicode_EncodeUTF8()": : 1
"PyUnicode_AsUTF8String()" : 2
"PyUnicode_EncodeUTF32()" : 2
"PyUnicode_EncodeUTF16()" : 2
"PyUnicode_EncodeUnicodeEscape()" : 2
"PyUnicode_AsUnicodeEscapeString()" : 2
"PyUnicode_EncodeRawUnicodeEscape()" : 2
"PyUnicode_AsRawUnicodeEscapeString()" : 2
"PyUnicode_EncodeLatin1()": : 1
"PyUnicode_AsLatin1String()" : 2
"PyUnicode_EncodeASCII()": : 1
"PyUnicode_AsASCIIString()" : 2
"PyUnicode_EncodeCharmap()" : 2
"PyUnicode_TranslateCharmap()" : 2
"PyUnicode_EncodeMBCS()": : 1
"PyUnicode_AsMBCSString()" : 2
"PyUnicode_EncodeCodePage()" : 2
code_page) : 1
"PyUnicode_EncodeDecimal()" : 2
"PyUnicode_TransformDecimalToASCII()" : 2
("Py_UNICODE") : 1
bpo-12326: : 1
sys.platform : 5
'linux' : 2
'linux2' : 2
'linux3' : 1
sys.platform.startswith('linux') : 1
bpo-13847 : 1
bpo-14180: : 1
"datetime": : 1
Doctests : 1
ImportErrors' : 1
remained : 2
E.g : 12
"__import__('sys' : 1
level=1)" : 1
"list.insert()" : 2
"list.append()" : 5
**and** : 3
re- : 7
"find_loader()" : 7
"pkgutil.iter_importers()" : 1
"iter_modules()" : 3
longstanding : 1
RFC-compliance : 1
(bpo-1079) : 1
"email.header.decode_header()" : 1
("str(make_header(decode_header(h))") : 1
decode_header : 2
precedes : 9
"make_header" : 2
non-"ASCII" : 3
"email.utils.formataddr()" : 1
(bpo-1690608) : 1
"poplib.POP3.quit()" : 1
"poplib.error_proto" : 1
(bpo-11291) : 1
"email.parser.Parser" : 1
"unittest.TestCase.assertSameElements" : 1
"time.accept2dyear" : 4
"Context._clamp" : 1
"clamp" : 2
bpo-8540.) : 1
"SSLFakeFile" : 1
"socket.socket.makefile()" : 3
"ast.__version__" : 1
now-public : 1
(bpo-13550) : 1
"smalltable" : 1
"Py_buffer" : 16
393 : 1
years) : 1
"PyUnicode_Concat()" : 2
"PyUnicode_Join()" : 2
"PyImport_GetMagicNumber()" : 2
"PyImport_ImportModuleLevel()" : 2
"PyImport_ImportModuleEx()" : 2
narrowed : 4
spellings : 4
suppressed: : 1
"xxxmodule.so" : 1
"xxxmodule.abi3.so" : 1
"xxxmodule.cpython-*.so" : 1
"xxx" : 1
"module" : 10
names) : 16
(implemented : 4
bpo-14040.) : 1
-Q : 1
artifacts : 6
sys.flags.division_warning : 1
(bpo-10998 : 1
Araujo.) : 2
(bpo-11591 : 1
editions : 1
*_asdict()* : 1
built-out : 1
OrderedDicts : 3
non-locale : 1
humanize : 1
readability: : 1
format(1234567 : 1
',d') : 1
format(1234567.89 : 1
',.2f') : 1
'1,234,567.89' : 2
format(12345.6 : 1
8901234.12j : 1
',f') : 2
'12,345.600000+8,901,234.120000j' : 1
format(Decimal('1234567.89') : 1
underway : 1
apostrophes : 5
Locale-aware : 1
directory/zipfile : 1
(Suggestion : 2
Andy : 3
Chu; : 1
bpo-1739468.) : 2
bin(37) : 1
numbered: : 1
'Sir : 2
{}'.format('Gallahad' : 1
'Camelot') : 1
Gallahad : 1
Camelot' : 1
"'Sir : 1
{1}'" : 1
"string.maketrans()" : 2
"bytes.maketrans()" : 3
"bytearray.maketrans()" : 2
**maketrans** : 2
**translate** : 2
bpo-5675.) : 2
open('mylog.txt') : 2
open('a.out' : 2
outfile: : 3
infile: : 3
'<critical>' : 2
outfile.write(line) : 2
Mattias : 2
Brändström; : 2
appspot : 2
53094.) : 2
"round(x : 1
round(1123 : 1
-2) : 2
1100 : 2
bpo-4707.) : 1
"1.1" : 2
"float('1.1')" : 1
"0x1.199999999999ap+0" : 1
"1.100000000000000088817841970012523233890533447265625" : 1
"repr(1.1)" : 2
"format(1.1 : 1
'.17g')" : 1
"'1.1000000000000001'" : 1
"eval(repr(1.1))" : 1
round-trip : 8
(mistaking : 1
intrinsic : 7
itself) : 12
smarter : 6
"'1.1'" : 1
(ones : 4
tends : 5
"1.1 : 2
3.3" : 1
bpo-1580) : 1
Counter(['red' : 1
'blue']) : 1
Counter({'blue': : 2
'red': : 3
bpo-1696199.) : 1
widget's : 13
Polo; : 3
bpo-2983.) : 1
gzip.GzipFile(filename : 1
"wb") : 6
f.write(b"xxx") : 1
Pitrou.) : 5
surprising: : 2
Decimal.from_float(1.1) : 1
Decimal('1.100000000000000088817841970012523233890533447265625') : 2
*1.1* : 2
Dickinson.) : 4
grew : 3
"itertools.combinations_with_replacement()" : 2
combinatorics : 1
"itertools.compress()" : 1
mimics : 7
namesake : 1
APL : 2
"decimal.Decimal": : 1
[p+q : 1
p,q : 1
combinations_with_replacement('LOVE' : 1
['LL' : 1
'LO' : 1
'LV' : 1
'LE' : 1
'OO' : 1
'OV' : 1
'OE' : 1
'VV' : 1
'VE' : 1
'EE'] : 1
list(compress(data=range(10) : 1
selectors=[0,0,1,1,0,1,0,1,0,0])) : 1
count(start=Fraction(1,2) : 1
step=Fraction(1,6)) : 1
[next(c) : 1
next(c) : 2
next(c)] : 1
[Fraction(1 : 1
Fraction(2 : 3
Fraction(5 : 2
Fraction(1 : 2
1)] : 5
fieldnames : 10
_0 : 1
_1 : 1
input: : 7
input() : 15
dept : 4
count(*) : 1
GROUPBY : 1
cursor.execute(query) : 1
query_fields : 2
[desc[0] : 1
desc : 3
cursor.description] : 3
UserQuery : 1
namedtuple('UserQuery' : 1
pprint.pprint([UserQuery(*row) : 1
cursor]) : 1
[UserQuery(region='South' : 1
dept='Shipping' : 1
_2=185) : 1
UserQuery(region='North' : 1
dept='Accounting' : 1
_2=37) : 1
UserQuery(region='West' : 1
dept='Sales' : 1
_2=419)] : 1
"re.subn()" : 1
"logging.NullHandler" : 1
Setting-up : 1
spurious : 12
foo": : 1
logging.NullHandler() : 1
logging.getLogger("foo").addHandler(h) : 1
Sajip; : 1
bpo-4384) : 1
Andi : 1
Vajda; : 1
bpo-4195.) : 1
conformant : 10
loader) : 1
bpo-4201.) : 1
"functools.partial" : 3
Noller : 3
Diederich; : 1
bpo-5228.) : 1
TestResult: : 1
TestGizmo(unittest.TestCase): : 1
@unittest.skipUnless(sys.platform.startswith("win") : 2
"requires : 2
Windows") : 2
test_gizmo_on_windows(self): : 1
@unittest.expectedFailure : 3
test_gimzo_without_required_library(self): : 1
builtout : 1
test_division_by_zero(self): : 1
"SEEK_SET" : 6
"SEEK_CUR" : 4
"SEEK_END" : 4
sys.version_info : 4
sys.version_info(major=3 : 1
minor=1 : 1
micro=0 : 1
releaselevel='alpha' : 1
serial=2) : 1
bpo-1655 : 1
"__builtin__.set" : 1
"builtins.set" : 3
confounded : 1
pickler : 13
dumping : 6
remapping : 2
turned-on : 1
*fix_imports* : 9
pickle.dumps(s : 2
protocol=0) : 1
b'c__builtin__\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.' : 1
protocol=0 : 1
fix_imports=False) : 1
b'cbuiltins\nset\np0\n((lp1\nL1L\naL2L\naL3L\natp2\nRp3\n.' : 1
unavoidable : 3
pickles : 17
bpo-6137.) : 1
3116**) : 1
bottleneck : 2
heuristic : 10
untrackable : 1
"--with-computed-gotos" : 1
(notably: : 1
SunPro : 1
icc) : 1
bpo-4753) : 1
LATIN-1 : 1
bpo-4868.) : 1
Py3.1 : 1
Unpickling : 3
interns : 2
McGuire : 1
==== : 3
IDLE's : 51
Serwy; : 1
bpo-5150.) : 2
"sys.int_info" : 1
sys.int_info : 4
sys.int_info(bits_per_digit=30 : 1
"PyLong_AsUnsignedLongLong()" : 2
*pylong* : 19
Lisandro : 1
Dalcrin; : 1
bpo-5175.) : 1
"PyNumber_Int()" : 1
"PyNumber_Long()" : 3
bpo-4910.) : 1
bpo-5914.) : 1
bpo-5630.) : 1
e(): : 1
'''Compute : 1
logarithms : 5
e() : 2
2.7182818284590451 : 2
sum(1/math.factorial(x) : 1
reversed(range(30))) : 1
Expected: : 8
Got: : 2
2.718281828459045 : 1
affectionately : 1
operator" : 1
eyes : 1
tusks : 1
(n : 8
len(a)) : 1
print(f"List : 1
({n} : 1
10)") : 1
subgroup: : 1
discount : 2
(mo : 1
re.search(r'(\d+)% : 1
discount' : 1
advertisement)): : 1
float(mo.group(1)) : 1
100.0 : 4
while-loops : 1
(block : 2
f.read(256)) : 1
'': : 2
process(block) : 1
body: : 3
[clean_name.title() : 1
(clean_name : 1
normalize('NFC' : 2
name)) : 5
allowed_names] : 1
Emily : 3
Morehouse : 3
bpo-35224.) : 3
Hastings' : 1
*c* : 15
*d* : 23
*e* : 14
f): : 4
f(10 : 4
d=40 : 2
e=50 : 2
f=60) : 3
b=20 : 1
c=30 : 1
40 : 19
divmod(a : 2
"Emulate : 9
function" : 6
preclude : 3
"len(obj : 1
/)" : 1
precludes : 2
awkward : 3
len(obj='hello') : 1
impairs : 1
*dist* : 3
specification: : 3
quantiles(dist : 1
n=4 : 2
method='exclusive') : 2
"**kwargs": : 1
kwargs) : 9
a=1 : 1
b=2 : 7
c=3) : 4
excerpt : 3
Counter(dict): : 2
iterable=None : 1
"iterable" : 3
570** : 4
bpo-36540.) : 1
"pycache_prefix") : 1
"sys.pycache_prefix" : 5
("None" : 6
subdirectories) : 2
bpo-33499.) : 1
trace-refs" : 1
bpo-36465.) : 1
bpo-21536.) : 2
bpo-36722.) : 1
"--embed" : 2
"python3-config : 6
--libs : 4
"-lpython3.8" : 6
libpython) : 2
--libs" : 10
"--embed") : 4
"python-3.8-embed" : 2
application: : 11
"pkg-config : 8
python-3.8-embed : 2
python-X.Y-embed : 2
python-X.Y : 2
"X.Y" : 3
python3.8 : 2
script); : 2
bpo-36721.) : 1
*f-string*s : 1
"f'{expr=}'" : 1
'eric_idle' : 1
member_since : 2
date(1975 : 1
f'{user=} : 1
{member_since=}' : 1
"user='eric_idle' : 1
member_since=datetime.date(1975 : 1
31)" : 3
f'{user=!s} : 1
{delta.days=:,d}' : 1
'user=eric_idle : 1
delta.days=16,075' : 1
shown: : 2
print(f'{theta=} : 1
{cos(radians(theta))=:.3f}') : 1
theta=30 : 1
cos(radians(theta))=0.866 : 1
bpo-36817.) : 1
Verified : 1
embedders : 3
deploy : 1
578** : 3
587** : 5
"PyPreConfig" : 5
"PyStatus" : 1
"PyWideStringList" : 1
"PyConfig_Clear()" : 2
"PyConfig_InitIsolatedConfig()" : 2
"PyConfig_InitPythonConfig()" : 2
"PyConfig_SetArgv()" : 2
"PyConfig_SetBytesArgv()" : 2
"PyConfig_SetBytesString()" : 2
"PyConfig_SetString()" : 1
"PyPreConfig_InitIsolatedConfig()" : 2
"PyPreConfig_InitPythonConfig()" : 2
"PyStatus_Error()" : 1
"PyStatus_Exception()" : 4
"PyStatus_Exit()" : 1
"PyStatus_IsError()" : 1
"PyStatus_IsExit()" : 1
"PyStatus_NoMemory()" : 1
"PyStatus_Ok()" : 1
"PyWideStringList_Append()" : 1
"PyWideStringList_Insert()" : 1
"Py_BytesMain()" : 2
"Py_ExitStatusException()" : 5
"Py_InitializeFromConfig()" : 9
"Py_PreInitialize()" : 7
"Py_PreInitializeFromArgs()" : 2
"Py_PreInitializeFromBytesArgs()" : 2
"Py_RunMain()" : 9
"_PyRuntimeState.preconfig" : 1
("PyPreConfig" : 2
"PyInterpreterState.config" : 3
("PyConfig" : 2
bpo-36763.) : 1
formalize : 1
multi-machine : 1
data-dependent : 1
3118**-compatible : 1
transmitted : 10
discretion : 4
574** : 3
bpo-36785.) : 1
bpo-32489.) : 1
"as_integer_ratio()" : 2
"numerator : 1
x.as_integer_ratio()" : 1
bpo-33073 : 1
bpo-37819.) : 1
"__float__()" : 13
bpo-20092.) : 2
"\N{name}" : 3
expressions": : 1
'Copyright : 1
2019' : 1
copyright_year_pattern : 1
re.compile(r'\N{copyright : 1
sign}\s*(\d{4})') : 1
int(copyright_year_pattern.search(notice).group(1)) : 1
Eunice : 2
bpo-30688.) : 1
dictviews : 1
bpo-33462.) : 1
"f((keyword)=arg)" : 2
left- : 2
bpo-34641.) : 1
Generalized : 2
*yield* : 1
*return* : 2
parse(family): : 1
lastname : 2
*members : 2
family.split() : 1
lastname.upper() : 1
parse('simpsons : 1
homer : 1
marge : 1
bart : 1
lisa : 1
maggie') : 1
('SIMPSONS' : 1
'homer' : 1
'marge' : 1
'bart' : 1
'lisa' : 1
'maggie') : 1
Cuthbert : 2
Jordan : 3
Chapman : 3
bpo-32117.) : 1
"[(10 : 1
20) : 13
(30 : 2
40)]" : 1
bpo-15248.) : 1
"astimezone()" : 7
bpo-32417.) : 1
Ctrl-C : 11
(SIGINT) : 1
died : 4
bpo-1054041.) : 1
"types.CodeType" : 4
modeled : 6
alters : 2
"statistics.mean()" : 2
mean(data=[10 : 2
90]) : 2
mean.__code__ : 1
mean.__code__.replace(co_posonlyargcount=1) : 1
mean() : 2
'data' : 6
bpo-37032.) : 1
three-argument : 5
modulus : 10
inverse : 40
multiplicative : 3
38 : 6
137 : 2
pow(38 : 2
137) : 1
119 : 3
Modular : 6
inverses : 5
Diophantine : 1
equations : 2
"4258𝑥 : 2
147𝑦 : 1
369" : 1
≡ : 1
369 : 3
(mod : 1
147)" : 1
solve: : 1
pow(4258 : 1
147) : 1
147 : 5
(4258 : 1
369) : 1
-147 : 1
4258 : 1
bpo-36027.) : 1
synced-up : 1
second: : 1
{input('role : 2
'): : 2
input('actor : 2
range(2)} : 1
King : 2
Arthur : 3
actor : 5
')} : 1
Sir : 2
Robin : 4
Idle : 43
['Martin : 1
Löwis' : 2
'Łukasz : 2
Langa' : 2
'Walter : 2
Dörwald'] : 1
{(n : 1
name)).casefold() : 1
names} : 1
{'martin : 1
löwis': : 1
'łukasz : 1
langa': : 1
'walter : 1
dörwald': : 1
Dörwald'} : 1
Jörn : 2
Heissler : 2
"object.__reduce__()" : 1
"(obj : 5
state)" : 4
state-updating : 1
"__setstate__()" : 13
Glaser : 3
Olivier : 3
Grisel : 3
bpo-35900.) : 2
(provisional) : 2
more: : 2
version('requests') : 1
'2.22.0' : 1
list(requires('requests')) : 1
['chardet : 1
(<3.1.0,>=3.0.2)'] : 1
list(files('requests'))[:5] : 1
[PackagePath('requests-2.22.0.dist-info/INSTALLER') : 1
PackagePath('requests-2.22.0.dist-info/LICENSE') : 1
PackagePath('requests-2.22.0.dist-info/METADATA') : 1
PackagePath('requests-2.22.0.dist-info/RECORD') : 1
PackagePath('requests-2.22.0.dist-info/WHEEL')] : 1
bpo-34632.) : 1
"end_col_offset" : 3
"col_offset" : 9
attributes.) : 2
"ast.get_source_segment()" : 2
bpo-33416.) : 1
"ast.parse()" : 12
"type_comments=True" : 4
nodes; : 1
"mode='func_type'" : 2
"signature : 2
comments" : 2
nodes); : 1
"feature_version=(3 : 3
non-reserved : 1
bpo-35766.) : 2
asyncio.sleep(0) : 4
asyncio.run(main()) : 32
*roughly* : 1
asyncio.new_event_loop() : 6
asyncio.set_event_loop(loop) : 3
loop.run_until_complete(main()) : 1
asyncio.set_event_loop(None) : 1
asyncio" : 2
launches : 2
REPL : 18
spawn : 16
asyncio.sleep(10 : 2
result='hello') : 2
bpo-37028.) : 1
"asyncio.CancelledError" : 19
"concurrent.futures.CancelledError" : 2
bpo-32528.) : 2
"ProactorEventLoop" : 22
bpo-34687.) : 1
Meily : 2
bpo-29883.) : 1
("CTRL+C") : 1
bpo-23057.) : 1
"asyncio.Task.get_coro()" : 2
bpo-36999.) : 1
Asyncio : 2
"create_task()" : 7
"set_name()" : 1
"get_name()" : 1
bpo-34270.) : 1
Happy : 5
Eyeballs : 6
"asyncio.loop.create_connection()" : 2
*happy_eyeballs_delay* : 7
*interleave* : 6
twisteroid : 1
ambassador : 1
bpo-33530.) : 1
"ast.PyCF_ALLOW_TOP_LEVEL_AWAIT" : 3
"CO_COROUTINE" : 1
bpo-34616) : 1
remediation : 2
"OrderedDict(nt._asdict())" : 2
bpo-35864.) : 1
"cProfile.Profile" : 8
cProfile.Profile() : 3
profiler: : 1
profiled : 6
Sanderson : 3
bpo-29235.) : 2
"csv.DictReader" : 1
Selik : 5
bpo-34003.) : 1
"ncurses_version" : 1
bpo-31680.) : 1
*winmode* : 3
"LoadLibraryEx" : 2
trusted : 17
DLL) : 3
"add_dll_directory()" : 4
bpo-36085.) : 3
"datetime.date.fromisocalendar()" : 2
"datetime.datetime.fromisocalendar()" : 2
weekday; : 2
"isocalendar" : 2
bpo-36004.) : 1
@lru_cache : 2
f(x): : 13
@lru_cache(maxsize=256) : 1
bpo-36772.) : 1
Dataset: : 1
sequence_of_numbers): : 3
sequence_of_numbers : 2
@functools.cached_property : 1
variance(self): : 1
statistics.variance(self.data) : 1
bpo-21145) : 1
"functools.singledispatchmethod()" : 1
dispatch*: : 1
singledispatchmethod : 1
TaskManager: : 1
tasks): : 2
self.tasks : 3
list(tasks) : 1
@singledispatchmethod : 3
discard(self : 1
suppress(ValueError): : 1
self.tasks.remove(value) : 1
@discard.register(list) : 1
_(self : 3
set(tasks) : 1
targets] : 1
bpo-32380) : 1
"get_objects()" : 1
bpo-36016.) : 1
"pgettext()" : 3
Franz : 2
Glasner : 1
bpo-2504.) : 1
*mtime* : 7
"gzip.compress()" : 2
Guo : 4
Ci : 4
Teo : 4
bpo-34898.) : 1
"BadGzipFile" : 2
bpo-6584.) : 1
emoji : 4
pasted : 2
(Many : 1
bpo-13153.) : 1
3.8.1: : 3
"staticmethod()": : 1
AudioClip: : 1
{'bit_rate': : 1
'expressed : 1
kilohertz : 1
place' : 1
'duration': : 1
'in : 1
integer'} : 1
bit_rate : 1
duration): : 1
self.bit_rate : 1
round(bit_rate : 1
1000.0 : 2
self.duration : 1
ceil(duration) : 1
bpo-36326.) : 1
("-X" : 2
"env") : 1
finalizer : 34
bpo-18748.) : 1
"itertools.accumulate()" : 2
*initial* : 7
list(accumulate([10 : 1
15] : 1
initial=1000)) : 1
[1000 : 3
1010 : 2
1015 : 1
1045 : 1
1060] : 1
bpo-34659.) : 1
"--json-lines" : 1
Weipeng : 8
Hong : 8
bpo-31553.) : 1
*force* : 10
"logging.basicConfig()" : 2
carrying : 3
long-standing : 6
*basicConfig()* : 2
teach : 2
Jupyter : 1
notebook : 16
bpo-33897.) : 1
"math.dist()" : 2
Euclidean : 4
distance : 13
bpo-33089.) : 2
"math.hypot()" : 1
2-D : 1
"math.prod()" : 2
"sum()" : 11
'start' : 3
0.8 : 3
likelihoods : 2
[0.625 : 1
0.84 : 1
0.30] : 2
math.prod(likelihoods : 1
start=prior) : 1
0.126 : 1
bpo-35606.) : 1
combinatoric : 2
"math.perm()" : 3
"math.comb()": : 1
math.perm(10 : 1
Permutations : 1
720 : 2
math.comb(10 : 1
Combinations : 1
Yash : 2
Aggarwal : 2
Keller : 2
bpo-37128 : 1
bpo-37178 : 1
bpo-35431.) : 1
"math.isqrt()" : 3
roots : 3
"floor(sqrt(n))" : 1
"math.sqrt()": : 1
650320427 : 2
isqrt(s : 1
650320426 : 1
floor(sqrt(s : 1
bpo-36887.) : 1
int-like : 2
bpo-33083.) : 1
"mmap.mmap" : 7
"madvise()" : 3
bpo-32941.) : 1
bpo-35813.) : 1
bpo-33725.) : 1
"os.memfd_create()" : 3
"memfd_create()" : 2
bpo-26836.) : 1
reparse : 19
junctions) : 1
"os.lstat()" : 9
surrogates" : 1
"stat_result.st_mode" : 1
"S_IFLNK" : 1
"stat_result.st_reparse_tag" : 1
junctions : 12
"islink()" : 6
"islink" : 1
bpo-37834.) : 3
"lexists()" : 3
"isdir()" : 5
"isfile()" : 5
"ismount()" : 3
"UnicodeEncodeError" : 12
unrepresentable : 5
bpo-33721.) : 2
"expanduser()" : 4
accounts : 4
bpo-36264.) : 2
existent : 2
"realpath()" : 2
"is_dir()" : 6
"is_file()" : 5
"is_mount()" : 4
"is_symlink()" : 4
"is_block_device()" : 3
"is_char_device()" : 3
"is_fifo()" : 3
"is_socket()" : 3
bpo-26978) : 1
C-optimized : 1
"Pickler" : 14
"reducer_override()" : 5
"plistlib.UID" : 1
NSKeyedArchiver-encoded : 1
plists : 6
bpo-26707.) : 1
*sort_dicts* : 9
"pprint.pp()" : 1
"False": : 8
dict(source='input.txt' : 1
operation='filter' : 1
destination='output.txt') : 1
pp(d : 1
width=40) : 2
{'source': : 1
'input.txt' : 1
'operation': : 2
'destination': : 1
'output.txt'} : 1
pprint(d : 1
Keys : 17
{'destination': : 1
'output.txt' : 1
'source': : 1
'input.txt'} : 1
bpo-30670.) : 1
bpo-22640.) : 1
"shlex.join()" : 2
"shutil.copytree()" : 13
"dirs_exist_ok" : 2
bpo-20849.) : 1
"shutil.make_archive()" : 3
pax : 16
(POSIX.1-2001) : 3
C.A.M : 5
Gerlach : 5
bpo-30661.) : 1
"create_server()" : 3
"has_dualstack_ipv6()" : 2
bpo-17561.) : 2
"socket.if_nameindex()" : 2
"socket.if_nametoindex()" : 2
"socket.if_indextoname()" : 2
bpo-37007.) : 1
"post_handshake_auth" : 1
"verify_client_post_handshake()" : 2
initiate : 3
post-handshake : 5
bpo-34670.) : 1
"statistics.fmean()" : 1
bpo-35904.) : 1
"statistics.geometric_mean()" : 1
"statistics.multimode()" : 1
bpo-35892.) : 2
"statistics.quantiles()" : 1
divides : 1
equiprobable : 1
quartiles : 5
deciles : 4
percentiles) : 1
bpo-36546.) : 1
"statistics.NormalDist" : 2
bpo-36018.) : 1
temperature_feb : 4
NormalDist.from_samples([4 : 1
14]) : 1
temperature_feb.mean : 1
6.0 : 10
temperature_feb.stdev : 1
6.356099432828281 : 1
temperature_feb.cdf(3) : 1
Chance : 1
degrees : 13
0.3184678262814532 : 1
temperature_feb.pdf(7) : 1
temperature_feb.pdf(10) : 1
1.2039930378537762 : 1
el_niño : 2
NormalDist(4 : 1
climate : 1
NormalDist(mu=10.0 : 1
sigma=6.830080526611674) : 1
(9/5) : 2
Fahrenheit : 2
NormalDist(mu=50.0 : 1
sigma=12.294144947901014) : 1
temperature_feb.samples(3) : 1
[7.672102882379219 : 1
12.000027119750287 : 1
4.647488369766392] : 1
"sys.unraisablehook()" : 12
"unraisable : 6
exceptions" : 2
("gc.collect()") : 3
bpo-36829.) : 1
GNU-specific : 1
(UTF-8) : 1
bpo-36268.) : 1
"threading.Thread.run()" : 5
bpo-1230540.) : 1
"threading.get_native_id()" : 3
"native_id" : 1
"get_native_id" : 1
Tesler : 1
bpo-36084.) : 1
"selection_from()" : 1
"selection_present()" : 1
"selection_range()" : 1
"selection_to()" : 1
"tkinter.Spinbox" : 2
Juliette : 5
Monsel : 5
bpo-34829.) : 1
"moveto()" : 2
"tkinter.Canvas" : 5
bpo-23831.) : 1
"tkinter.PhotoImage" : 2
"transparency_get()" : 1
"transparency_set()" : 1
bpo-25451.) : 1
"CLOCK_UPTIME_RAW" : 1
bpo-35702.) : 1
per-key : 1
589** : 2
TypedDict : 6
"total=False" : 2
Location(TypedDict : 1
total=False): : 6
lat_long: : 1
grid_square: : 1
xy_coordinate: : 1
constrained : 9
get_status(port: : 1
Literal['connected' : 1
'disconnected']: : 1
"Final" : 5
591** : 3
"typing.Final" : 2
"typing.final()" : 2
instructs : 4
reassignment: : 2
pi: : 1
Final[float] : 1
3.1415926536 : 1
544** : 3
"typing.runtime_checkable()" : 1
"typing.SupportsInt" : 2
"Protocol" : 6
"typing.SupportsIndex" : 1
"typing.get_origin()" : 3
12.1.0 : 2
"is_normalized()" : 3
normalizing : 1
Max : 5
Belanger : 1
Euresti : 1
bpo-32285 : 1
bpo-37966) : 1
"AsyncMock" : 14
Appropriate : 2
bpo-26467) : 1
"addModuleCleanup()" : 9
"addClassCleanup()" : 9
cleanups : 6
bpo-24412.) : 1
Strandmark : 3
bpo-35047.) : 1
"unittest.IsolatedAsyncioTestCase" : 6
bpo-32972.) : 1
TestRequest(unittest.IsolatedAsyncioTestCase): : 1
asyncSetUp(self): : 2
self.connection : 2
AsyncConnection() : 2
test_get(self): : 1
self.connection.get("https://example.com") : 1
self.assertEqual(response.status_code : 2
200) : 4
asyncTearDown(self): : 2
self.connection.close() : 1
"Activate.ps1" : 2
activating : 8
bpo-32718.) : 1
"weakref.proxy()" : 2
"@=" : 4
bpo-36669.) : 1
mitigation : 3
DTD : 22
bpo-17239.) : 2
".find*()" : 2
"{*}tag" : 2
"{namespace}*" : 2
tags : 35
bpo-28238.) : 1
"–xml.etree.ElementTree.canonicalize()" : 1
bpo-13611.) : 1
"xml.etree.ElementTree.XMLParser" : 2
"start_ns()" : 2
"end_ns()" : 2
"xml.etree.ElementTree.TreeBuilder" : 3
bpo-36676 : 1
bpo-36673.) : 1
"xmlrpc.client.ServerProxy" : 3
Among : 7
bpo-35153.) : 1
"os.posix_spawn()" : 10
2.24 : 1
newer) : 4
*pass_fds* : 4
*start_new_session* : 4
*executable* : 13
bpo-35537.) : 2
"shutil.copyfile()" : 8
"shutil.copy()" : 4
"shutil.move()" : 6
"fast- : 2
syscalls : 14
"fast-copy" : 3
""outfd.write(infd.read())"" : 2
MiB : 7
KiB) : 15
"memoryview()"-based : 3
"shutil.copyfileobj()" : 5
partition : 3
+26% : 2
+50% : 2
+40% : 2
bpo-33671.) : 1
+9% : 2
+20% : 2
+30% : 1
SMB : 2
38% : 2
bpo-33695.) : 2
bpo-33597.) : 2
"uuid.UUID" : 1
Wouter : 3
Bolsterlee : 3
bpo-30977) : 1
33% : 3
bpo-35664.) : 1
Sped-up : 2
bpo-32492.) : 1
overallocate : 1
"__len__") : 1
12% : 1
bpo-33234.) : 1
Doubled : 2
non-dunder : 1
bpo-36012.) : 1
Reduced : 3
20--50% : 1
bpo-23867 : 1
bpo-35582 : 1
bpo-36127.) : 1
"LOAD_GLOBAL" : 5
bpo-26219.) : 1
"m" : 10
(builds : 1
compatible) : 2
bpo-36707.) : 1
"python3.8" : 1
"python3.8m" : 1
"python3.8-config" : 1
"python3.8m-config" : 1
filenames: : 3
".cpython-37m-x86_64-linux-gnu.so" : 1
".cpython-38-x86_64 : 1
-linux-gnu.so" : 1
"Include/*.h" : 2
"Include/cpython/*.h" : 2
CPython; : 2
"_Py" : 4
"_PY" : 1
"Include/internal/*.h" : 2
bpo-35134 : 1
bpo-35081 : 1
initiated : 5
3.7.) : 1
"_PyObject_GC_TRACK()" : 3
"_PyObject_GC_UNTRACK()" : 3
"_Py_Dealloc()" : 2
bpo-35059.) : 1
"PyByteArray_Init()" : 2
"PyByteArray_Fini()" : 2
2.7.4 : 2
(stable : 3
ABI) : 3
bpo-35713.) : 1
"PyExceptionClass_Name()" : 5
bpo-33818.) : 1
duality : 1
"Modules/Setup.dist" : 2
(inside : 2
reflect : 34
upstream : 4
git : 8
bpo-32430.) : 1
"PyLong_AsLong()" : 2
"'i'" : 11
"Fraction") : 1
"PyNumber_Check()" : 2
"PyNumber_Float()" : 2
"PyFloat_AsDouble()" : 2
bpo-36048 : 1
Heap-allocated : 2
"PyObject_Init()" : 7
"PyObject_INIT") : 1
"PyType_GenericAlloc()" : 6
Eddie : 2
Elizondo : 2
bpo-35810.) : 2
"PyCode_NewWithPosOnlyArgs()" : 3
*posonlyargcount* : 2
bpo-37221.) : 1
"sys.executable" : 16
("Py_GetProgramFullPath()") : 2
("Py_GetProgramName()") : 2
bpo-38234.) : 1
bpo-37481.) : 1
bpo-29209.) : 4
"loop.set_default_executor()" : 3
bpo-34075.) : 1
"xml.dom.pulldom.DOMEventStream" : 4
"wsgiref.util.FileWrapper" : 6
bpo-9372.) : 1
bpo-36320.) : 1
"Num" : 2
"Str" : 4
"NameConstant" : 3
"Constant" : 7
bpo-32892.) : 2
"ast.NodeVisitor" : 1
"visit_Num()" : 3
"visit_Str()" : 3
"visit_Bytes()" : 2
"visit_NameConstant()" : 2
"visit_Ellipsis()" : 2
"visit_Constant()" : 2
bpo-36917.) : 1
"asyncio.coroutine()" : 1
"@asyncio.coroutine" : 2
bpo-36921.) : 1
*loop* : 35
"asyncio.shield()" : 1
"asyncio.as_completed()" : 1
"asyncio.Event" : 1
"asyncio.BoundedSemaphore" : 1
"asyncio.create_subprocess_exec()" : 4
"asyncio.create_subprocess_shell()" : 3
"lgettext()" : 3
"ldgettext()" : 2
"lngettext()" : 3
"ldngettext()" : 2
Unicode-related : 5
"output_charset()" : 1
"set_output_charset()" : 1
*codeset* : 4
"translation()" : 4
"install()" : 4
bpo-33710.) : 1
bpo-35283.) : 1
bpo-36048.) : 1
"functools.partialmethod()" : 1
"weakref.finalize()" : 2
"profile.Profile.runcall()" : 1
"cProfile.Profile.runcall()" : 1
"bdb.Bdb.runcall()" : 1
"trace.Trace.runfunc()" : 1
"curses.wrapper()" : 3
"unittest.TestCase.addCleanup()" : 3
*fn* : 5
*callback* : 42
"contextlib.ExitStack.callback()" : 1
"contextlib.AsyncExitStack.callback()" : 1
"contextlib.AsyncExitStack.push_async_callback()" : 1
*typeid* : 4
"multiprocessing.managers.Server" : 1
"multiprocessing.managers.SharedMemoryServer" : 1
bpo-36492.) : 1
bpo-36952.) : 1
bpo-35471.) : 1
"platform.popen()" : 2
bpo-35345.) : 2
well-defined : 8
bpo-36895.) : 1
"python3.8 : 1
tied : 8
bpo-25427.) : 2
"parse_qs" : 1
"parse_qsl" : 1
"filemode" : 1
"doctype()" : 5
bpo-36297.) : 1
"Cache" : 2
"Statement" : 2
bpo-30262.) : 1
"bufsize" : 1
"fileinput.FileInput()" : 1
bpo-36952 : 1
Bussonnier.) : 2
bpo-36933 : 1
("is" : 2
not") : 2
advises : 3
("==" : 4
"!=") : 4
bpo-34850.) : 1
bpo-35459.) : 1
"__str__" : 10
bpo-36793.) : 1
"'aix'" : 4
"'aix3'" : 2
"'aix7'" : 3
"sys.platform.startswith('aix')" : 2
Felt : 21
bpo-36588.) : 1
"PyEval_AcquireLock()" : 4
"PyEval_AcquireThread()" : 4
"PyEval_RestoreThread()" : 8
"Py_END_ALLOW_THREADS()" : 4
"PyGILState_Ensure()" : 13
"_Py_IsFinalizing()" : 5
"sys.is_finalizing()" : 6
bpo-36475.) : 1
page: : 5
bpo-37412.) : 1
QEMU : 2
Emulation : 2
"missing : 1
program" : 1
"returncode" : 11
bpo-34651 : 1
bpo-37951.) : 1
"imap.IMAP4.logout()" : 2
bpo-36348.) : 1
"statistics.mode()" : 1
multimodal : 2
"selection()" : 2
"tkinter.ttk.Treeview" : 1
"selection_set()" : 1
bpo-31508.) : 1
"writexml()" : 4
"toprettyxml()" : 3
Rojas : 1
bpo-34160.) : 1
"dbm.dumb.open()" : 2
bpo-32749.) : 1
"RuntimeWarning" : 7
doctype : 5
3.6-- : 2
KiB : 52
touched : 5
"internal" : 3
(specifically : 6
Include/internal/pycore_pystate.h) : 1
struct's : 1
BPO : 2
bpo-35886.) : 1
"mmap.flush()" : 2
platform-dependent: : 2
success; : 6
bpo-2122.) : 1
("dbm.dumb" : 1
"dbm.ndbm") : 1
("dbm.dumb.error" : 1
"dbm.gnu.error" : 1
"dbm.ndbm.error") : 1
bpo-33106.) : 1
Instantiating : 1
"asyncio.BaseTransport.get_extra_info()" : 1
'socket' : 2
bpo-37027.) : 1
"asyncio.BufferedProtocol" : 1
securely : 5
PYD : 1
load-time : 1
KB2533623 : 1
installer) : 2
pgen : 10
bpo-36623.) : 1
(*posonlyargcount*) : 1
(*argcount*) : 1
future-proof : 3
"digestmod" : 1
"PyCompilerFlags" : 1
*cf_feature_version* : 3
"PY_MINOR_VERSION" : 3
"PyCF_ONLY_AST" : 2
*cf_flags* : 2
"PyEval_ReInitThreads()" : 2
bpo-36728.) : 1
"PyObject_CallFunction()" : 3
bpo-36381.) : 1
"PyType_FromSpec()") : 2
Increasing : 1
bug) : 1
immortal : 2
Py_DECREF : 4
"Py_INCREF" : 1
foo_struct : 2
foo_new(PyObject : 1
*type) : 20
*foo : 1
PyObject_GC_New(foo_struct : 1
(PyTypeObject : 1
type); : 1
(foo : 1
0x03080000 : 3
Workaround : 2
35810; : 1
PY_INCREF(type) : 1
foo; : 1
foo_dealloc(foo_struct : 1
*instance) : 1
Py_TYPE(instance); : 1
PyObject_GC_Del(instance); : 1
35810) : 1
Py_DECREF(type); : 1
"Py_DEPRECATED()" : 2
Py_DEPRECATED(3.8) : 2
PyAPI_FUNC(int) : 2
Py_OldFunction(void); : 2
bpo-33407.) : 1
("Py_TPFLAGS_HAVE_FINALIZE" : 1
"tp_finalize") : 1
bpo-32388.) : 1
"PyNode_AddChild()" : 1
"PyParser_AddToken()" : 1
*end_lineno* : 1
*end_col_offset* : 2
"libpython38.a" : 1
"python38.dll" : 1
"gendef" : 1
"dlltool" : 1
binutils : 1
gendef : 1
python38.dll : 2
tmp.def : 2
dlltool : 1
libpython38.a : 2
"pythonXY.dll" : 1
bpo-37351.) : 1
unrolling : 2
adjusting : 7
cleaning-up : 1
"BREAK_LOOP" : 2
"CONTINUE_LOOP" : 2
"SETUP_LOOP" : 2
"SETUP_EXCEPT" : 2
"ROT_FOUR" : 4
"BEGIN_FINALLY" : 2
"CALL_FINALLY" : 2
"POP_FINALLY" : 2
"END_FINALLY" : 2
"WITH_CLEANUP_START" : 2
bpo-17611.) : 1
"END_ASYNC_FOR" : 2
awaiting : 8
bpo-33041.) : 1
"MAP_ADD" : 2
bpo-35884.) : 1
13.3 : 1
26.8 : 1
23.7 : 1
68.5 : 1
29.8 : 1
15.9 : 1
81.9 : 1
36.4 : 1
19.2 : 4
19.9 : 1
23.8 : 1
25.9 : 1
22.9 : 1
144.2 : 1
30.4 : 1
30.8 : 1
bpo-36384 : 1
Achraf : 1
Merzouki.) : 1
*Release : 97
date: : 101
XXXX-XX-XX* : 1
gh-103242: : 1
Migrate : 3
gh-102700: : 1
gh-103256: : 1
"hmac.digest(b'K' : 1
b'M' : 2
'sha3_256')" : 1
gh-93910: : 2
"memmber.member" : 1
gh-103329: : 1
"unittest.mock.PropertyMock" : 1
gh-75729: : 1
Fix : 1703
"os.spawn*" : 2
gh-99069: : 1
workaround : 30
"static_assert" : 2
clang : 23
gh-88013: : 1
"ntpath.realpath()" : 1
2023-04-04* : 1
gh-101727: : 1
1.1.1t : 1
CVE-2023-0286 : 1
CVE-2022-4303 : 2
2023-02-07 : 1
gh-101283: : 1
"cmd.exe" : 6
Eryk : 27
Iarygin : 11
gh-101975: : 1
"stacktop" : 1
gh-102701: : 1
gh-102416: : 1
memoize : 1
gh-102356: : 1
Marta : 1
Gómez : 1
Macías : 1
gh-102397: : 1
Kumar : 58
Aditya : 54
gh-102281: : 1
nullptr : 1
dereference : 14
fileutils : 1
Bachmann : 2
gh-102126: : 1
deadlock : 35
gh-102027: : 1
SSE2 : 4
SSE3 : 1
"_blake2" : 3
gh-101967: : 1
"positional_only_passed_as_keyword" : 1
gh-101765: : 1
iter : 12
"__reduce__" : 4
"builtins.__dict__" : 1
gh-101696: : 1
Invalidate : 3
"_PyStaticType_Dealloc" : 1
gh-102549: : 1
gh-102947: : 1
Improve : 160
"dataclasses.fields()" : 1
non-dataclass : 3
gh-102780: : 1
"asyncio.Timeout" : 2
"CancelledError" : 16
gh-88965: : 1
typing: : 3
relating : 8
"ParamSpec" : 30
"TypeVar" : 13
Nikita : 5
Sobolev : 5
gh-101979: : 1
"metavar" : 3
"argparse.ArgumentParser.add_argument()" : 1
Yeojin : 1
gh-102179: : 1
fds : 12
gh-101961: : 1
"fileinput.hookcompressed()" : 1
Gihwan : 1
gh-101936: : 1
"fp" : 3
Vo : 1
gh-102069: : 1
"__weakref__" : 7
gh-101566: : 1
extractall : 1
gh-101892: : 1
exhausts : 2
forgets : 3
gh-97786: : 1
floating-point-to-time : 1
gh-101517: : 1
"lineno=None" : 1
gh-101673: : 1
"ll" : 1
gh-96931: : 1
"ssl.SSLSocket.shared_ciphers()" : 1
gh-88233: : 1
Correctly : 16
"extra" : 4
zip64 : 2
"extra." : 1
gh-96127: : 1
"inspect.signature" : 3
"(*args : 1
**kwargs)" : 16
infered : 1
gh-95495: : 1
unauthenticated : 11
EOFs : 1
close_notify) : 1
TLS-level : 1
"SSLEOFError" : 2
gh-94440: : 1
"concurrent.futures.process" : 1
hang : 40
canceled : 12
gh-103112: : 1
"http.client.HTTPResponse.read()" : 2
gh-85417: : 1
gh-97725: : 1
"asyncio.Task.print_stack()" : 1
"file=None" : 1
gh-102980: : 1
gh-102537: : 1
Adjust : 11
"test_zoneinfo.TzPathTest.python_tzpath_context" : 1
gh-89792: : 1
"test_tools" : 1
os.cpu_count : 1
cores : 5
gh-101377: : 1
test_locale_calendar_formatweekday : 1
gh-102711: : 1
"-Wstrict-prototypes" : 5
gh-101849: : 1
gh-101763: : 1
gh-101759: : 2
3.40.1 : 2
gh-101614: : 1
"python3_d.dll" : 1
gh-103207: : 1
Ventura : 1
“The : 1
error” : 1
2023-02-07* : 1
gh-92173: : 2
"defs" : 1
"kwdefs" : 1
"PyEval_EvalCodeEx()" : 5
gh-101400: : 1
gh-101372: : 1
gh-101046: : 1
"MemoryError" : 22
gh-101037: : 1
underallocation : 1
gh-100942: : 1
property.getter/setter/deleter : 1
non-property : 1
gh-100892: : 1
"threading.local" : 3
gh-100776: : 1
"input()"'s : 1
"__text_signature__" : 7
gh-100637: : 1
"int.__sizeof__()" : 1
ob_digit : 1
gh-100649: : 1
native_thread_id : 2
PyThreadState : 16
gh-100374: : 1
"socket.getfqdn()" : 3
Dominic : 1
Socular : 1
gh-99110: : 1
frame->previous : 1
frameobject.c : 2
"PyFrame_New()" : 1
gh-100050: : 1
Honor : 7
mismatching : 2
bpo-32782: : 1
itemsize : 9
gh-101541: : 1
[Enum] : 9
psuedo-flag : 1
gh-101326: : 1
"FutureIter.throw" : 1
gh-100795: : 1
"freeaddrinfo" : 1
(double : 2
free) : 1
Brester : 1
gh-101143: : 1
"TimerHandle" : 2
"asyncio.base_events.BaseEventLoop._add_callback" : 1
gh-101144: : 1
"zipfile.Path.open()" : 1
"zipfile.Path.read_text()" : 1
gh-101015: : 1
"'*tuple[...]'" : 1
"*tuple[...]" : 1
"Unpack" : 5
gh-100573: : 1
gh-100805: : 1
"random.choice()" : 1
gh-90104: : 1
RecursionError : 12
gh-100750: : 1
kwarg : 8
gh-100689: : 1
"PyExpat_CAPI" : 1
gh-100740: : 1
"unittest.mock.Mock" : 3
respecting : 6
gh-86508: : 1
gh-100287: : 1
"unittest.mock.seal()" : 2
"unittest.mock.AsyncMock" : 3
gh-100474: : 1
"index.html" : 2
gh-100160: : 1
gh-96290: : 1
UNC : 13
drives : 8
"ntpath.splitdrive()" : 1
"ntpath.normpath()" : 1
'\server' : 1
'\' : 1
gh-78878: : 1
"_ctypes.CField" : 1
gh-99952: : 1
undercounting : 1
"ctypes.Structure" : 1
"from_param()" : 5
gh-100133: : 1
gh-100098: : 1
gh-98778: : 1
gh-83035: : 1
"inspect.getsource()" : 4
gh-99576: : 1
".save()" : 1
"LWPCookieJar" : 1
"MozillaCookieJar": : 1
gh-99433: : 1
"types.MethodWrapperType" : 1
gh-99240: : 2
double-free : 1
"str_converter" : 1
"post_parsing" : 1
gh-64490: : 2
refcount : 14
gh-85267: : 1
"inspect.signature()"'s : 1
"__text_signature" : 1
"tokenize.TokenError" : 1
Allows : 19
gh-95882: : 1
bpo-44817: : 1
WinError : 2
(ERROR_BAD_NETPATH) : 1
(ERROR_NETWORK_ACCESS_DENIED) : 1
161 : 1
(ERROR_BAD_PATHNAME) : 1
ntpath.realpath() : 2
bpo-40447: : 1
Accept : 12
"pathlib.Path") : 1
"stripdir" : 2
"compileall.compile_file()" : 3
bpo-36880: : 1
"py_object" : 1
gh-100616: : 1
"attr" : 6
"curses.window.vline()" : 1
gh-100472: : 1
"prependdir" : 1
"limit_sl_dest" : 1
gh-99931: : 1
sphinxext-opengraph : 1
OpenGraph : 1
gh-101334: : 1
"test_tarfile" : 1
UID : 14
gh-100454: : 1
3.1.0-beta1 : 1
gh-96002: : 1
gh-101522: : 1
gh-101543: : 1
gh-101467: : 1
"-3.1" : 1
"3.11" : 2
gh-101135: : 1
Restore : 33
gh-82052: : 1
32K : 1
mojibake : 4
gh-100320: : 1
"PythonPath" : 1
gh-100247: : 1
Restores : 7
gh-100180: : 2
1.1.1s : 2
bpo-43984: : 1
"winreg.SetValueEx()" : 1
untouched : 6
bpo-45256: : 1
"py-locals" : 1
gh-100342: : 1
varargs : 5
out-of-bounds : 9
"_PyArg_UnpackKeywordsWithVararg()" : 1
clinic.py : 2
miscalculation : 1
"noptargs" : 2
vararg : 3
2022-12-06* : 1
gh-100001: : 2
http.server" : 2
"BaseHTTPRequestHandler" : 8
".log_message" : 2
"\xHH" : 1
gh-87604: : 1
gh-98433: : 1
IDNA : 12
hostnames : 13
denial : 11
out-of-spec : 1
bidirectional : 11
"3xx" : 1
redirects : 7
gh-98739: : 1
libexpat : 15
2.5.0 : 1
gh-97612: : 1
vulnerability : 16
"get- : 1
remote-certificate.py" : 1
"openssl" : 1
Caleb : 1
Shortt : 1
gh-99886: : 1
gh-99891: : 1
gh-99729: : 1
torn : 1
gh-99578: : 1
"_imp.create_builtin()" : 1
sub-interpreter : 5
gh-99581: : 1
caracter : 1
galindo : 1
gh-99553: : 1
gh-99370: : 1
non-installed : 1
gh-99298: : 1
gh-99205: : 1
prevented : 29
"PyThreadState" : 8
gh-99181: : 1
gh-99204: : 1
"sys._base_executable" : 4
Calculation : 3
("python<MAJOR>" : 1
"python<MAJOR>.<MINOR>") : 1
gh-96055: : 1
gh-99153: : 1
gh-99103: : 1
anchors : 1
gh-98852: : 1
"TypeVar": : 1
"tuple[A : 1
T][int]" : 2
"tuple[TypeVar : 1
"T" : 13
gh-98925: : 1
Lower : 3
wasmtime : 2
2.0/main : 1
gh-98783: : 1
gh-99257: : 1
"__slots__") : 1
gh-98374: : 1
Suppress : 11
help() : 7
gh-98415: : 1
OSs : 4
Chaim : 1
Sanders : 1
gh-92119: : 1
gh-96078: : 1
"os.sched_yield()" : 1
sched_yield(2) : 1
gh-93354: : 2
specialization : 29
"PRECALL" : 9
gh-97943: : 1
Bugfix: : 1
"PyFunction_GetAnnotations()" : 2
gh-97779: : 1
"complete" : 1
gh-97591: : 1
incref/decref : 2
"Exception.__setstate__()" : 1
Ofey : 1
Chan : 1
gh-94526: : 1
UTF-8/strict : 1
(bytes : 4
surrogateescape : 6
handler) : 15
gh-95921: : 1
overly-broad : 1
branching : 2
gh-96387: : 1
analyzed : 2
Mingliang : 1
ZHAO : 1
gh-96864: : 1
gh-96678: : 2
gh-96754: : 1
Prevents : 20
backtraces : 2
gh-95196: : 1
gh-96005: : 1
"ENOTCAPABLE" : 3
"getpath.py" : 1
"pybuilddir.txt" : 3
"pyenv.cfg" : 1
gh-93696: : 1
bpo-31718: : 1
Raise : 154
"io.IncrementalNewlineDecoder" : 1
bpo-38031: : 1
opener : 38
BaseHTTPRequestHandler.log_message : 1
technically : 7
xHH : 1
ambiguious : 1
r"x" : 1
gh-93453: : 1
gh-51524: : 1
trace.CoverageResults : 2
gh-99645: : 1
"unittest.TestCase" : 8
"doClassCleanups()" : 3
gh-97001: : 1
termios : 5
gh-99341: : 1
"ast.increment_lineno()" : 2
"ast.TypeIgnore" : 1
gh-99418: : 1
"urllib.parse.urlparse()" : 2
gh-99382: : 1
"TypeVarTuple" : 9
gh-99379: : 1
gh-99344: : 1
gh-74044: : 1
gh-99275: : 1
"__initsubclass__" : 1
gh-99277: : 1
"_SSLProtocolTransport.get_write_buffer_limits" : 1
"asyncio.sslproto" : 1
gh-99248: : 1
verify() : 1
gh-99155: : 1
gh-93464: : 1
"enum.auto()" : 1
"ONE : 1
'some : 6
text'" : 1
text')" : 1
gh-99134: : 1
22.3.1 : 1
gh-83004: : 3
Clean : 16
refleak : 13
"_zoneinfo" : 1
refleaks : 8
"_pickle" : 2
"_io" : 1
gh-98897: : 1
dimension : 9
gh-98706: : 1
[3.11] : 1
Applied : 1
importlib_metadata : 14
4.11.4 : 1
4.13 : 2
"_normalized_name" : 1
disallowing : 7
"Distribution.from_name" : 1
"PathDistribution._name_from_stem" : 1
"PathDistribution._normalized_name" : 1
gh-98793: : 1
typechecks : 1
"_overlapped.WSAConnect()" : 1
"_overlapped.Overlapped.WSASendTo()" : 1
gh-98744: : 1
byte- : 3
gh-98740: : 1
gh-98703: : 1
"asyncio.StreamWriter.drain()" : 2
"protocol.connection_lost" : 1
gh-98624: : 1
unittest.mock.NonCallableMock : 1
gh-89237: : 1
"subprocess.wait_closed()" : 1
gh-98458: : 1
self-referencing : 1
gh-97928: : 1
"tkinter.Text.count()" : 1
gh-97966: : 1
"uname_result" : 2
expectation : 9
"_fields" : 5
"_asdict" : 1
"processor" : 2
gh-98307: : 1
"createSocket()" : 2
gh-96035: : 1
gh-98251: : 1
impact : 19
gh-98178: : 1
"syslog.syslog()" : 2
"syslog()" : 7
gh-96151: : 1
"BUILTINS" : 1
gh-87730: : 1
gh-98086: : 1
"patch.dict()" : 13
gh-90985: : 2
"asyncio.Task.cancel("message")" : 2
harsh : 2
undeprecated : 2
gh-97837: : 1
value!=None" : 1
gh-97825: : 1
"subprocess.check_output()" : 2
"input=None" : 2
gh-82836: : 1
"is_private" : 2
non-private : 1
(0.0.0.0/0) : 1
gh-96827: : 1
interrupt) : 1
gh-97592: : 1
"asyncio.Future.remove_done_callback()" : 1
evil : 2
gh-97639: : 1
"tokenize.NL" : 1
gh-73588: : 1
"tkinter.Checkbutton" : 1
checkbuttons : 2
"variable" : 3
gh-97005: : 1
2.4.9 : 1
gh-85760: : 1
"process_exited()" : 2
"pipe_data_received()" : 2
gh-96819: : 1
"multiprocessing.resource_tracker" : 1
"PIPE_BUF" : 2
gh-96741: : 1
Corrected : 4
"pstats.FunctionProfile.ncalls" : 1
gh-95987: : 1
gh-96388: : 1
"socket"'s : 1
"__repr__" : 4
gh-96073: : 1
overeager : 1
""typing."" : 1
gh-96192: : 1
"os.ismount()" : 1
gh-96052: : 1
(SyntaxWarning : 1
DeprecationWarning) : 4
"codeop.compile_command()" : 2
gh-88863: : 1
Dong : 1
Uk : 1
Kang : 1
gh-91212: : 1
flickering : 1
turtle : 131
tracer : 5
Shin-myoung-serp : 1
gh-88050: : 1
kill : 9
cleanly : 6
gh-93858: : 1
fish : 4
gh-91078: : 1
"TarFile.next()" : 1
bpo-47220: : 1
Géry : 9
Ogam : 9
bpo-46364: : 1
Restrict : 5
bpo-38523: : 1
*ignore_dangling_symlinks* : 3
bpo-36267: : 1
IndexError : 15
"argparse.ArgumentParser" : 4
"store_true" : 3
gh-92892: : 1
macOS/arm64 : 1
gh-85525: : 1
gh-95588: : 1
Clarified : 7
"safe" : 4
unfixable : 1
"literal_eval" : 1
bpo-41825: : 1
Restructured : 2
"os.wait*" : 1
"os.waitid()" : 2
gh-99892: : 1
test_normalization() : 1
test_unicodedata : 1
NormalizationTest.txt : 1
pythontest.net : 1
gh-99934: : 1
test_marsh : 1
(32 : 4
bit) : 3
x86: : 1
test_deterministic : 1
gh-99659: : 1
"test_sqlite3" : 2
"sqlite.DataError" : 1
blobs : 4
gh-98713: : 1
"@cpython_only" : 1
gh-87390: : 2
star-unpacking : 1
646 : 5
miscellaneous : 10
gh-96853: : 2
"Py_InitializeEx") : 1
migrated : 2
"Py_InitializeFromConfig" : 1
bpo-34272: : 1
Lib/test/test_capi/ : 1
gh-99086: : 2
"-Wimplicit-int" : 2
"-Wimplicit-function-declaration" : 1
gh-99337: : 1
"PTHREAD_SCOPE_SYSTEM" : 1
gh-98872: : 1
fd : 32
"Programs/_freeze_module.c" : 1
gh-99016: : 1
"PYTHON_FOR_REGEN=python3.8" : 1
gh-97731: : 1
docclean" : 1
(needed : 3
cross-builds) : 1
gh-98707: : 1
vendored : 8
"libmpdec" : 3
"--with-system- : 1
libmpdec" : 1
"libexpat" : 1
**!configure** : 1
gh-96761: : 1
**_bootstrap_python** : 3
Görgens : 1
gh-96883: : 1
gh-84461: : 5
setters : 2
stubs : 10
gh-94280: : 1
pegen : 5
gh-99345: : 1
gh-98629: : 1
"sys._git" : 1
gh-99442: : 1
"argv[0]" : 10
gh-98689: : 1
v1.2.13 : 1
v1.2.12 : 2
CVE-2022-37434 : 1
"inflateGetHeader" : 1
gh-98790: : 1
Assumes : 3
"DLLs" : 2
executable's : 1
gh-98745: : 1
gh-98692: : 1
gh-94328: : 2
3.39.4 : 2
gh-97728: : 1
"winreg") : 1
gh-96965: : 1
gh-94781: : 1
"pcbuild.proj" : 1
ouput : 2
"Python\deepfreeze" : 1
"Python\frozen_modules" : 1
Charlie : 1
Zhao : 1
bpo-40882: : 1
"multiprocessing.shared_memory.SharedMemory" : 1
gh-87235: : 1
/dev/fd/9 : 1
9</path/to/script.py" : 1
gh-98940: : 1
"Mac/Extras.install.py" : 1
gh-97527: : 1
3.10.8 : 2
3.12.0a1 : 1
3.10.2288.0 : 1
Lib/test : 1
gh-95853: : 2
"wasm_build.py" : 1
pre-builds : 1
EMSDK : 1
vars : 9
"Tools/wasm/wasm_builder.py" : 1
gh-95731: : 1
"Tools/i18n/pygettext.py" : 2
gh-98680: : 1
"PyBUF_*" : 1
3.11+ : 1
gh-98978: : 1
use-after-free : 8
"Py_SetPythonHome(NULL)" : 1
"Py_SetProgramName(NULL)" : 1
"_Py_SetProgramFullPath(NULL)" : 1
Benedikt : 1
Reinartz : 1
"Py_InitializeEx" : 1
"PyConfig_Clear" : 1
omission : 5
2022-10-24* : 1
gh-97616: : 1
multiplying : 5
("list : 1
*= : 17
int"): : 1
Limor : 1
gh-97514: : 1
unix : 9
inject : 7
privilege : 4
escalation : 1
Filesystem : 1
CVE-2022-42919 : 1
gh-97002: : 1
corrupted : 14
gh-97752: : 1
"f_back" : 3
newly-created : 1
gh-96975: : 1
"PyEval_GetFrame()" : 4
partially-initialized : 1
gh-96848: : 1
parsing: : 4
(invalid) : 1
gh-96821: : 1
"_testcapimodule.c" : 1
gh-95778: : 2
"sys.set_int_max_str_digits()" : 4
gh-96587: : 1
654**) : 1
bpo-42316: : 2
gh-98331: : 1
65.5.0 : 1
gh-97545: : 1
gh-96865: : 1
boundary : 36
CONFORM : 4
sequential : 19
combined; : 1
Skip(Flag): : 1
TWO : 4
EIGHT : 2
Skip.TWO : 1
Skip.EIGHT : 1
<Skip.TWO|EIGHT: : 1
gh-90155: : 1
gh-97741: : 1
"!" : 6
"conf.py" : 1
gh-93031: : 1
3.10+ : 2
gh-95027: : 1
"-jN" : 1
gh-96729: : 1
"Tools\msi\buildrelease.bat" : 1
upgradable : 1
gh-98360: : 1
spawning : 13
gh-98414: : 1
"-V:<company>/" : 1
gh-90989: : 1
Clarify : 36
gh-97897: : 1
"mkfifoat" : 1
"mknodat" : 1
"os.mkfifo()" : 1
"os.mknod()" : 1
cpython : 5
2022-09-11* : 1
(octal) : 2
(hexadecimal) : 2
algorithmic : 5
CVE-2020-10735 : 3
4300 : 5
[Google] : 1
[Red : 1
Hat] : 1
ceval.c : 1
gh-96641: : 1
"KeyWrapper" : 1
gh-96636: : 1
"sys.setrace()" : 1
pre-release : 2
turning : 12
gh-96572: : 1
gh-96611: : 1
gh-96612: : 1
gh-96569: : 1
gh-96582: : 1
"_PyThread_CurrentFrames" : 1
gh-96352: : 1
Georgi : 1
gh-96268: : 1
gh-96187: : 1
"_PyCode_GetExtra" : 1
gh-96071: : 1
gh-96046: : 1
"ht_cached_keys" : 1
gh-95818: : 1
gh-95876: : 1
"_PyPegen_raise_error_known_location" : 1
64bit : 6
(int) : 3
(Py_ssize_t) : 1
gh-95605: : 1
all-whitespace : 4
gh-94996: : 1
params : 18
"feature_version" : 9
"(3 : 8
8)" : 6
Shantanu : 8
Jain : 7
gh-96700: : 1
gh-96652: : 1
"faulthandler.register(signal : 1
chain=True)" : 1
"sigaction()" : 4
gh-68163: : 1
"numbers.Rational"'s : 1
gh-96385: : 1
"TypeVarTuple.__typing_prepare_subst__" : 1
"[*T : 1
*V]" : 1
substitutions : 9
gh-90467: : 1
"asyncio.streams.StreamReaderProtocol" : 1
gh-96159: : 1
gh-96175: : 1
"localName" : 2
"Attr" : 6
gh-96125: : 1
"sys.thread_info.name" : 1
gh-95463: : 1
bpo-28080 : 1
utf8 : 6
"ZipInfo.flag_bits" : 1
gh-95899: : 1
"asyncio.Runner" : 2
"asyncio.set_event_loop()" : 3
"attach_loop()" : 1
watchers : 3
gh-95736: : 1
gh-95704: : 1
gh-95231: : 1
Fail : 5
"EPERM" : 2
"ENOSYS" : 1
FIPS : 5
(Federal : 1
Standard) : 1
gh-74116: : 1
awaited : 37
concurrently : 18
gh-92986: : 1
"ImportFrom.level" : 1
gh-96098: : 1
discoverability : 2
gh-95957: : 1
RHEL : 4
CentOS : 6
gh-95243: : 1
Mitigate : 1
inherent : 2
find_unused_port() : 1
testSockName() : 1
Burton : 1
gh-94682: : 1
1.1.1q : 1
gh-96577: : 1
overrun : 10
gh-96559: : 1
2022-08-05* : 1
gh-95150: : 1
non-identical : 1
"deduplicated" : 1
gh-95355: : 1
"_PyPegen_Parser_New" : 1
Honglin : 1
Zhu : 2
gh-90081: : 1
tracer/profiler : 1
slowdown : 3
gh-95324: : 1
gh-95185: : 1
Prevented : 3
absurdly : 2
""+0"*1000000" : 2
gh-93351: : 2
gh-94938: : 1
overloaded : 10
"__eq__" : 7
"__hash__" : 4
undesired : 1
gh-95609: : 1
22.2.2 : 1
gh-95289: : 1
"asyncio.TaskGroup" : 6
manger : 1
gh-95339: : 1
22.2.1 : 1
gh-95045: : 1
"_lsprof.Profiler" : 1
untracking : 1
gh-95097: : 1
"uncancel()" : 9
gh-93899: : 1
"os.EFD_CLOEXEC" : 1
"os.EFD_NONBLOCK" : 1
"os.EFD_SEMAPHORE" : 1
gh-95166: : 1
"concurrent.futures.Executor.map()" : 1
cancel : 25
TimeoutError : 6
gh-95109: : 1
expired : 8
delivered : 16
gh-91810: : 2
"encoding='unicode'" : 1
"xml_declaration=None" : 1
gh-91447: : 1
findtext : 1
gh-91207: : 1
stylesheet : 1
CHM : 2
htmlhelp : 1
gh-95451: : 1
"wasm32-wasi" : 49
gh-95415: : 1
gh-86128: : 1
atexit : 13
gh-95573: : 1
Lib/test/test_asyncio/test_ssl.py : 1
intense : 1
"errno.ENOBUFS" : 2
("No : 1
available") : 3
FB11063974 : 1
filed : 4
intermittent : 1
Fantix : 1
gh-95280: : 1
"test_ssl" : 3
"test_get_ciphers" : 1
(PFS) : 1
gh-94675: : 1
exponentional : 1
rjsmin : 1
gh-94801: : 2
gh-94802 : 1
gh-95145: : 1
wasm32-wasi : 1
WASIX's : 1
stubbed : 1
gh-95174: : 2
"dup" : 2
netdb : 1
gh-95085: : 1
"wasm32-unknown-emscripten" : 1
"wasm32-unknown- : 2
wasi" : 1
promoted : 4
tier : 1
gh-95656: : 1
gh-95587: : 1
gh-94399: : 1
gh-95445: : 1
unsuccessful : 6
uninstalling : 2
msi : 1
gh-95359: : 1
"py_" : 1
keys) : 4
gh-95285: : 1
gh-65802: : 1
gh-95191: : 1
(interactive : 2
gh-95511: : 1
copy-with-prompts : 1
gh-95471: : 1
"Select : 1
All" : 1
gh-95411: : 1
.pyw : 1
gh-89610: : 1
.pyi : 1
stub : 13
gh-92678: : 2
gh-94936: : 1
"PyCode_GetVarnames()" : 2
"PyCode_GetCellvars()" : 2
"PyCode_GetFreevars()" : 2
"co_varnames" : 8
"co_cellvars" : 3
"co_freevars" : 3
2022-07-25* : 1
gh-94438: : 2
gh-95060: : 1
"PyCode_Addr2Location" : 1
"addrq" : 1
gh-95113: : 1
"EXTENDED_ARG_QUICK" : 2
"EXTENDED_ARG" : 4
unquickened : 2
Consumers : 1
adaptive : 12
gh-91409: : 1
gh-94036: : 1
gh-94739: : 1
jumping : 14
gh-94949: : 1
9)" : 1
gh-94947: : 1
gh-91256: : 1
gh-94869: : 1
gh-94822: : 1
identically-named : 1
gh-91153: : 1
value's : 6
gh-90699: : 1
"bool.__repr__()" : 1
gh-95087: : 1
gh-95199: : 1
63.2.0 : 1
gh-95194: : 1
22.2 : 1
gh-95132: : 1
relayed : 2
3.11a1 : 4
PR : 12
24421 : 1
(gh-85128) : 1
Aasland.` : 1
gh-93157: : 1
"inplace" : 1
gh-95105: : 1
"wsgiref.types.InputStream.__iter__()" : 1
"Iterator[bytes]" : 1
"Iterable[bytes]" : 1
gh-94857: : 1
"_io.TextIOWrapper.reconfigure" : 1
gh-94821: : 1
gh-89988: : 1
bpo-47025: : 1
gh-95212: : 1
"test_shared_memory_recreate" : 1
parallel-safe : 4
gh-94847: : 1
pydebug : 2
inlining : 9
gh-94841: : 1
1932 : 1
"ZLIB_CFLAGS" : 1
"ZLIB_LIBS" : 1
gh-94773: : 1
"deepfreeze.py" : 1
unsortable : 1
gh-90844: : 1
gh-94772: : 1
"_PyObject_VisitManagedDict" : 1
"_PyObject_ClearManagedDict" : 1
gh-94930: : 1
gh-94864: : 1
(success) : 1
gh-94731: : 1
casts : 9
casting : 11
"-Wold-style-cast : 1
`` : 1
``-Wzero-as-null-pointer-constant" : 1
"g++" : 1
2022-07-11* : 1
gh-87389: : 1
"http.server": : 1
Vulnerability : 4
Hamza : 1
Avvan : 1
gh-79096: : 1
LWPCookieJar : 1
MozillaCookieJar : 3
644 : 1
(Microsoft : 1
affected) : 2
gh-92888: : 1
backing : 8
gh-68966: : 2
mailcap : 18
refuses : 4
(filenames : 1
failed) : 1
gh-94694: : 1
hand-built : 1
gh-93252: : 1
outlive : 5
gh-94215: : 1
line-tracing : 1
gh-92228: : 1
inline-small-exit-blocks : 1
gh-94485: : 1
"RESUME" : 4
Account : 5
gh-91719: : 1
Reload : 4
gh-94329: : 1
(1000s : 1
elements) : 5
gh-94360: : 1
gh-88116: : 2
"INT_MIN" : 1
gh-94262: : 1
observable : 3
gh-94192: : 1
gh-93883: : 1
Revise : 11
gh-94021: : 1
"Python/specialize.c" : 1
gh-93516: : 2
traceable : 1
recompute : 2
Lazily : 1
gh-89828: : 1
"isinstance(list[int] : 1
type)" : 5
gh-93671: : 1
exponential : 23
backtrace : 1
gh-93662: : 1
gh-93461: : 1
"FileFinder" : 2
"/egg/./spam" : 1
"/egg/spam" : 1
gh-93418: : 1
brace : 15
f"{i=" : 1
gh-93382: : 1
"PyCode_GetCode()" : 3
"co_code" : 3
backoff : 1
counters : 6
specializations : 2
gh-93021: : 1
gh-92930: : 1
"_pickle.c" : 2
"persistent_id" : 1
gh-92914: : 1
gh-92858: : 1
bpo-46142: : 1
"--help-env" : 2
"--help-xoptions" : 1
"--help-all" : 2
gh-94736: : 1
"_multiprocessing.SemLock" : 1
gh-94637: : 1
"SSLContext.set_default_verify_paths()" : 3
"SSL_CTX_set_default_verify_paths" : 1
gh-94607: : 1
"Some : 1
Generic[...]" : 1
populates : 2
"__parameters__" : 9
"Color.RED.BLUE") : 1
gh-93896: : 1
gh-94510: : 1
Re-entrant : 1
gh-92336: : 1
"linecache.getline()" : 2
gh-94398: : 1
tasks) : 1
gh-94254: : 1
gh-94207: : 1
Made : 9
"_struct.Struct" : 1
GC-tracked : 1
"_struct" : 1
gh-91742: : 1
gh-94101: : 1
"ssl.SSLSession" : 1
misconfigured : 3
gh-84753: : 1
"inspect.iscoroutinefunction()" : 3
"inspect.isgeneratorfunction()" : 2
"inspect.isasyncgenfunction()" : 2
duck-typed : 1
"asyncio.iscoroutinefunction()" : 1
Mehdi : 1
ABAAKOUK : 1
gh-94028: : 1
iters : 1
27884 : 1
gh-93820: : 2
"enum.Flag" : 4
gh-93847: : 1
gh-91404: : 2
Revert : 23
gh-83499: : 1
"copy.copy()"-ing : 1
gh-79512: : 1
"ReferenceType" : 1
"ProxyType" : 2
"CallableProxyType" : 2
pickleable : 7
gh-91389: : 1
"CACHE" : 4
gh-93626: : 1
"__future__.annotations" : 1
mandatoryRelease : 1
'TBD' : 1
gh-90473: : 7
gh-90494: : 1
gh-90549: : 1
semaphore) : 1
forked) : 1
gh-93521: : 1
"weakref_slot=True" : 2
gh-79579: : 1
DML : 7
gh-93421: : 1
"sqlite3.Cursor.rowcount" : 1
"UPDATE : 1
RETURNING" : 1
gh-91162: : 1
arbitrary-length : 1
"A[T : 1
*Ts][*tuple[int : 1
...]]" : 4
"A[int : 1
*tuple[int : 1
"A[*Ts : 1
T][*tuple[int : 1
"A[*tuple[int : 1
int]" : 1
gh-93353: : 1
"importlib.resources.as_file()" : 2
finalization: : 1
"os.remove()" : 2
gh-83658: : 1
"multiprocessing.Pool" : 7
"maxtasksperchild" : 1
gh-93156: : 1
"pathlib.PurePath.parents" : 3
gh-74696: : 1
".zip" : 6
gh-89973: : 1
upper : 41
"[c-a]") : 1
gh-92932: : 1
Gross : 1
gh-91577: : 1
"SharedMemory" : 13
gh-91456: : 1
behavior: : 10
3.13 : 31
bpo-47231: : 1
longname : 1
bpo-46755: : 1
"QueueHandler" : 14
"stack_info" : 1
bpo-46197: : 1
bpo-45924: : 1
future's : 1
bpo-34828: : 1
"sqlite3.Connection.iterdump()" : 1
"AUTOINCREMENT" : 1
gh-94321: : 1
246** : 2
"sqlite3.PrepareProtocol" : 1
gh-61162: : 1
gh-87260: : 1
Align : 1
specs : 10
gh-86986: : 1
gh-88831: : 1
asyncio.create_task() : 1
detailing : 3
bpo-47161: : 1
"pathlib.PurePath" : 8
collapse : 2
gh-91330: : 1
descriptor-based : 1
gh-94208: : 1
gh-94315: : 1
DAC : 1
"os.geteuid()" : 1
gh-93951: : 1
test_bdb.StateTestCase.test_skip : 1
auxiliary : 5
gh-93957: : 1
test_venv.EnsurePipTest.test_with_pip : 1
"run_tests.py" : 1
"HOSTRUNNER" : 1
gh-93616: : 1
"test_modulefinder" : 1
"ModuleFinderTest.setUp()" : 1
gh-93575: : 1
test_unicode : 1
test_raiseMemError : 1
"test.support.calcobjsize" : 1
PyUnicode : 3
structs : 9
"sys.getsizeof()" : 2
"chmod(2)" : 1
"os.chmod()" : 6
gh-57539: : 1
Increase : 14
"calendar.LocaleTextCalendar.formatweekday()" : 1
"openat2(2)" : 1
"RESOLVE_BENEATH" : 1
gh-89858: : 1
"test_embed" : 1
out-of-tree : 6
gh-92886: : 2
Fixing : 5
("-O") : 2
"test_imaplib.py" : 1
"test_zipimport.py" : 1
bpo-47016: : 1
workflow : 1
Illia : 7
Volochii : 7
Turner : 2
gh-94404: : 1
"makesetup" : 5
sed : 1
gh-93584: : 1
gh-93491: : 1
tiers : 1
gh-93824: : 1
Explorer : 6
bpo-42658: : 1
"LCMapStringEx" : 2
"ntpath.normcase()" : 2
"_winapi" : 2
gh-94538: : 1
gh-94430: : 1
gh-93937: : 1
"#include : 9
<Python.h>" : 4
<frameobject.h>": : 2
"PyFrame_Check()" : 2
"PyFrame_GetBuiltins()" : 4
"PyFrame_GetGenerator()" : 4
"PyFrame_GetGlobals()" : 4
"PyFrame_GetLasti()" : 4
"PyFrame_GetLocals()" : 5
"PyFrame_Type" : 2
gh-91321: : 1
C++11 : 1
gh-91731: : 2
redefining : 1
gh-93442: : 1
overloads : 6
_Py_CAST_impl() : 1
0/NULL : 1
_Py_CAST() : 1
2022-06-01* : 1
gh-93359: : 1
gh-93345: : 1
gh-69093: : 3
"Modules/Setup.stdlib.in" : 1
"_sqlite3" : 1
2022-05-30* : 1
gh-84694: : 1
"--experimental-isolated-subinterpreters" : 2
"EXPERIMENTAL_ISOLATED_SUBINTERPRETERS" : 2
gh-91924: : 1
gh-93061: : 1
dubious : 5
gh-93065: : 1
HAMT : 1
Libman : 1
MagicStack/immutables#84 : 1
Decrease : 1
gh-92804: : 1
gh-92236: : 1
"LINE" : 2
gh-92619: : 1
unnecessarily : 7
blocks) : 2
gh-92261: : 1
gh-93297: : 1
GCed : 1
gh-90817: : 1
"locale.resetlocale()" : 2
"locale.setlocale(locale.LC_ALL : 2
"")" : 3
gh-92728: : 1
"re.template()" : 3
"re.TEMPLATE" : 3
"re.T" : 2
3.11.0b1 : 1
gh-93044: : 1
gh-93010: : 1
nonexistent : 6
"InvalidHeaderError" : 1
defect : 9
"InvalidHeaderDefect" : 1
gh-92675: : 1
"venv.ensure_directories()" : 1
Foster : 6
gh-87901: : 2
3.11b1 : 1
gh-91922: : 1
"sqlite.connect()" : 1
"sqlite.Connection" : 1
non-UTF-8 : 6
non-decodable : 1
FS : 4
gh-92839: : 1
bisect.insort() : 1
bisect.insort_left() : 1
"os.pipe()" : 1
gh-92671: : 1
gh-91581: : 2
"utcfromtimestamp()" : 2
fold : 18
"datetime.min" : 1
gh-92550: : 1
"pathlib.Path.rglob()" : 2
gh-92530: : 1
"threading.Condition.notify()" : 1
gh-92531: : 1
statistics.median_grouped() : 1
("UTF-8" : 1
"encoding="unicode"" : 3
gh-90622: : 2
""fork"" : 1
"datetime.fromtimestamp" : 1
timestamp) : 2
10000-01-01 : 1
bpo-39064: : 1
"zipfile.BadZipFile" : 1
bpo-45393: : 1
"await : 8
bpo-28249: : 1
"doctest.DocTest.lineno" : 1
bpo-45046: : 1
"unittest": : 4
"enterContext()" : 2
"enterClassContext()" : 2
"enterAsyncContext()" : 2
"IsolatedAsyncioTestCase" : 5
"unittest.enterModuleContext()" : 2
bpo-42627: : 1
gh-86438: : 1
case-insensitively : 7
gh-92240: : 1
3.X" : 1
bpo-40838: : 1
"inspect.getmodule()" : 3
"inspect.getsourcefile()" : 1
bpo-38056: : 1
Overhaul : 2
bpo-13553: : 1
tkinter.Tk : 1
gh-92670: : 1
"test_shutil.TestCopy.test_copyfile_nonexistent_dir" : 1
bpo-34449: : 1
aCC : 1
HP-UX : 9
Osipov : 4
gh-92817: : 1
gh-92984: : 1
Explicitly : 8
non-Debug : 1
gh-92841: : 1
throws : 13
"RuntimeError: : 1
closed" : 3
bpo-46907: : 6
3.38.4 : 2
gh-92898: : 1
"PyObject*" : 7
Serge : 1
Guelton : 1
gh-92913: : 1
"PyConfig.module_search_paths" : 7
"PyConfig.module_search_paths_set" : 6
gh-92781: : 1
warning: : 9
"ISO : 1
C90 : 1
[-Werror=declaration-after-statement] : 1
2022-05-06* : 1
gh-57684: : 1
gh-89519: : 1
(introduced : 2
bpo-19072) : 2
property() : 4
flawed : 3
downstream : 9
gh-92345: : 1
"pymain_run_python()" : 1
Non-interactive : 2
bpo-43857: : 1
gh-92245: : 1
523 : 3
3.11a7 : 1
Python-to-Python : 1
gh-92203: : 1
exec() : 4
exec-ing : 1
cell : 62
gh-91173: : 1
gh-92114: : 1
"__class_getitem__" : 11
gh-92112: : 1
"mro()" : 1
gh-92063: : 1
"PRECALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS" : 1
gh-92031: : 1
Deoptimize : 1
"Py_FINALIZE()" : 1
"_PyCode_Quicken" : 1
gh-92036: : 1
gh-92032: : 1
autocomplete : 5
(wildcard : 1
gh-87999: : 1
gh-91869: : 1
gh-91603: : 2
Speed : 36
"types.UnionType" : 9
gh-89373: : 1
gh-91632: : 1
exit: : 3
"generic_alias_iterator" : 1
gh-81548: : 1
"0o377" : 3
bpo-43950: : 2
Reduces : 8
gh-91102: : 1
"EncodingMap" : 1
gh-91636: : 1
garbage-collection : 2
edge-case : 1
"PyFunction_Type.tp_clear" : 1
gh-91625: : 1
"EXTENDED_ARG"s : 1
gh-78607: : 1
LLTRACE : 1
"__ltrace__" : 1
typo : 18
gh-91576: : 1
gh-89279: : 1
gh-91502: : 1
"_PyFrame_IsEntryFrame()" : 1
gh-91266: : 1
Refactor : 13
"strip" : 1
"lstrip" : 1
"rstrip" : 1
gh-91479: : 1
"__note__" : 3
678** : 2
Namely : 1
"add_note()" : 4
"__notes__" : 4
gh-46055: : 1
temporaries : 1
Xinhang : 2
gh-91462: : 1
(lltrace) : 1
gh-89455: : 1
bool : 33
bpo-45292 : 2
gh-91421: : 1
_Py_DecodeUTF8Ex : 1
gh-91428: : 1
"static : 4
*const : 20
_PyOpcode_OpName[256] : 1
{...};" : 1
"opcode.h" : 1
bpo-47120: : 4
"POP_JUMP_IF_TRUE" : 2
"POP_JUMP_IF_FALSE" : 2
"POP_JUMP_IF_NONE" : 2
"POP_JUMP_IF_NOT_NONE" : 2
bpo-45317: : 1
bpo-47197: : 1
mishandle : 1
"void" : 2
"ctypes.CFUNCTYPE(None : 1
ctypes.c_int)" : 1
"int : 8
f(int)" : 2
Wasm : 1
"JUMP_IF_TRUE_OR_POP" : 2
"JUMP_IF_FALSE_OR_POP" : 2
bpo-47177: : 1
"_PyInterpreterFrame" : 3
"prev_instr" : 1
Python-layer : 1
bpo-46961: : 1
mod/remainder : 1
three- : 1
bpo-46962: : 2
"--without-doc-strings" : 2
"ctypes.UnionType" : 1
"pickle.PickleBuffer" : 1
"testcapi.RecursingInfinitelyError" : 1
bpo-46942: : 1
"types.MethodType" : 3
bpo-46764: : 1
bpo-43464: : 1
"set.intersection()" : 1
non-set : 3
bpo-46721: : 1
"set.issuperset()" : 1
bpo-46509: : 1
type-specialized : 1
pointer-chasing : 1
bpo-46045: : 2
bpo-36819: : 1
encodable : 8
bpo-34093: : 1
"FLAG_REF" : 1
bpo-26579: : 1
"object.__getstate__" : 1
"__getstate__()" : 10
Copying : 6
collections.OrderedDict : 4
collections.deque : 3
weakref.WeakSet : 1
datetime.tzinfo : 5
gh-90997: : 2
gh-92332: : 1
"typing.Text" : 3
(removal : 2
planned) : 1
classes; : 6
"member" : 3
"nonmember" : 2
gh-92356: : 1
"show_caches=True" : 3
gh-92301: : 1
Prefer : 5
"close_range()" : 1
procfs : 1
gh-67248: : 1
Cmd.do_help() : 1
gh-92210: : 1
"socket.__init__" : 1
Cinder : 1
gh-80010: : 1
"datetime.datetime.fromisoformat()" : 3
"datetime.date.fromisoformat()" : 3
"datetime.time.fromisoformat()" : 3
gh-92118: : 1
gh-90887: : 1
"COPYFILE_STAT" : 1
"COPYFILE_ACL" : 1
"COPYFILE_XATTR" : 1
"os.fcopyfile()" : 1
macOs : 1
gh-91215: : 1
weakref_slot : 1
slots=True : 1
weakref'd : 1
gh-85984: : 1
os.login_tty() : 1
gh-92128: : 1
"logging.LoggerAdapter" : 1
"logging.StreamHandler" : 10
gh-92049: : 1
Forbid : 3
"re._constants.SUCCESS" : 1
gh-92062: : 1
"__unpacked__" : 1
gh-88089: : 1
gh-91996: : 1
http.HTTPMethod : 2
gh-91984: : 1
test_argparse.py : 1
gh-91952: : 1
gh-91954: : 1
"subprocess.getoutput()" : 1
"subprocess.getstatusoutput()" : 1
bpo-47029: : 1
"multiprocessing.Queue" : 5
"multiprocessing.Queue.close()" : 1
gh-91928: : 1
"datetime.UTC" : 2
"datetime.timezone.utc" : 4
Kabir : 2
Kwatra : 2
594** : 24
gh-91401: : 1
gh-64783: : 1
"signal.NSIG" : 1
"signal.SIGRTMIN" : 1
"signal.SIGRTMAX" : 1
gh-91910: : 1
gh-91860: : 1
"typing.dataclass_transform()" : 1
681** : 3
gh-91832: : 1
"required" : 3
"argparse.Action" : 1
gh-91827: : 1
"info_patchlevel()" : 2
"--enable-wasm-pthreads" : 1
"Emscripten/node" : 1
gh-91821: : 1
"test_from_tuple" : 1
"test_decimal.py" : 1
gh-91217: : 14
xdrlib : 5
gh-91760: : 1
"sys._emscripten_info" : 1
gh-90623: : 1
"signal.raise_signal()" : 2
gh-91734: : 1
OSS : 16
gh-90633: : 1
"typing.assert_never()" : 4
gh-91700: : 1
"(?(group)...)" : 1
gh-91231: : 1
*shutdown_timeout* : 3
"multiprocessing.BaseManager" : 1
Kill : 8
terminate() : 6
gh-91621: : 1
gh-90568: : 1
"\N" : 1
gh-91670: : 1
spwd : 4
"email.mime.MIMEAudio" : 1
gh-91616: : 1
mismatch : 2
Atomic : 4
Possessive : 1
Quantifiers : 1
'pipes' : 1
ossaudiodev : 4
bpo-47256: : 1
1,073,741,823 : 1
backtracking : 10
nis : 6
gh-91595: : 1
"Tools.gdb.libpython.write_repr()" : 1
Yu : 1
Liu : 2
gh-74166: : 1
gh-91487: : 1
transferring : 8
gh-91575: : 2
"concurrent.futures.process.ProcessPoolExecutor" : 1
"fork" : 2
"max_tasks_per_child" : 2
threads+fork : 1
circumstance : 1
"mp_context" : 1
gh-89022: : 1
"SQLITE_MISUSE" : 2
"InterfaceError" : 5
"ProgrammingError" : 11
gh-91526: : 1
"os.device_encoding(file.fileno())" : 1
Naoki.) : 2
frame-related : 2
657** : 4
column) : 3
"inspect.getframeinfo()" : 2
"inspect.getouterframes()" : 2
"inspect.getinnerframes()" : 2
"inspect.stack()" : 2
"inspect.trace()" : 2
"sqlite3.Blob" : 4
"threaded : 2
code") : 2
gh-91276: : 1
bpo-47000: : 3
gh-91230: : 1
"warnings.catch_warnings()" : 4
"warnings.simplefilter()" : 3
"TCP_CONNECTION_INFO" : 2
bpo-47260: : 1
"os.closerange()" : 1
seccomp : 1
sandbox : 3
bpo-47087: : 1
Implement : 98
"typing.Required" : 1
"typing.NotRequired" : 1
655**) : 1
bpo-47061: : 4
cgitb : 8
"locale.getpreferredencoding(False)" : 8
bpo-42012: : 1
WSGI-specific : 2
bpo-47227: : 1
bpo-47211: : 1
reverted : 7
3.11.0b2 : 1
bpo-47135: : 1
"decimal.localcontext()" : 2
bpo-43323: : 1
undecodable/unencodable : 1
bpo-46841: : 14
Disassembly : 1
quickened : 4
bpo-46681: : 1
Forward : 4
gzip.compress() : 1
compresslevel : 1
bpo-45100: : 1
"typing.get_overloads()" : 2
"typing.clear_overloads()" : 2
bpo-44807: : 1
Garcia : 2
Badaracco : 1
bpo-46787: : 1
bpo-46720: : 1
"multiprocessing.set_executable()" : 2
par : 1
bpo-46696: : 1
"SO_INCOMING_CPU" : 1
bpo-46053: : 1
bpo-45639: : 1
"image/avif" : 1
"image/webp" : 1
bpo-46285: : 1
"-p"/"--protocol" : 1
(HTTP/1.1 : 1
"http.server") : 3
bpo-44791: : 2
bpo-46547: : 1
"pydoc.Helper" : 1
bpo-46415: : 1
ipaddress.ip_{address,interface,network} : 1
bpo-46075: : 1
"CookieJar" : 14
"DefaultCookiePolicy" : 8
localhost : 7
domain=localhost : 1
Set-Cookie : 1
bpo-45995: : 1
bpo-26175: : 1
Fully : 2
"tempfile.SpooledTemporaryFile" : 2
Carey : 2
Metcalfe : 2
bpo-45138: : 1
bpo-40318 : 1
bpo-44863: : 1
"Generic" : 10
Thereby : 1
bpo-44587: : 1
BooleanOptionalAction : 1
formatter : 61
bpo-43827: : 1
"ABCMeta.__new__" : 1
bpo-43218: : 1
Dustin : 3
Rodrigues : 3
bpo-38435: : 1
"process_group" : 1
"preexec_fn" : 1
bpo-42066: : 1
"CookieJar.__iter__()" : 1
2965 : 7
"Set-Cookie" : 1
Iman : 1
Kermani : 1
bpo-40617: : 1
"create_window_function()" : 2
aggregate : 21
bpo-40676: : 1
"csv.field_size_limit()" : 1
"csv.get_dialect()" : 1
"csv.unregister_dialect()" : 1
"csv.list_dialects()" : 1
bpo-39716: : 1
ArgumentError : 1
subparser : 10
bpo-36073: : 1
segfaulting : 1
cursors : 5
bpo-34975: : 1
"start_tls()" : 1
"StreamWriter" : 23
upgrades : 4
bpo-22276: : 1
"rglob()" : 2
("/" : 1
"sep") : 1
Eisuke : 2
Kawashima : 1
bpo-24905: : 1
"blobopen()" : 2
gh-91888: : 1
"gh" : 1
gh-91783: : 1
concerning : 3
"shutil.unpack_archive()" : 2
gh-91547: : 1
"Undocumented : 1
gh-91298: : 1
Traversable : 6
5.7.1 : 1
bpo-44347: : 1
*dirs_exist_ok* : 4
bpo-36329: : 2
'make : 2
Doc : 6
serve' : 1
htmlview' : 1
bpo-47189: : 1
bpo-38668: : 1
383** : 3
bpo-47115: : 1
API/Stable : 1
"PyDoc_STR()" : 1
guideline : 1
7's : 5
bpo-26792: : 1
Brezovsky : 1
gh-92169: : 1
"warnings_helper.import_deprecated()" : 1
uniformly : 8
libregrtest : 4
"--python" : 1
gh-91904: : 1
"PYTHONREGRTEST_UNICODE_GUARD" : 1
gh-91752: : 1
@requires_zlib : 1
test.test_tools.test_freeze.TestFreeze : 1
gh-91607: : 1
"test_concurrent_futures" : 1
bpo-40280: : 17
bpo-47109: : 1
"ctypes.macholib.dyld" : 1
"ctypes.macholib.dylib" : 1
"ctypes.macholib.framework" : 1
brought : 8
pre-"unittest" : 1
"ctypes.test" : 1
bpo-29890: : 1
"ipaddress.IPv4Interface" : 1
"ipaddress.IPv6Interface" : 1
louisom : 1
gh-89452: : 1
gdbm-compat : 1
ndbm.h : 1
"-std=c11" : 1
"-std=c99" : 1
bpo-47152: : 2
"sre_constants.h" : 1
bpo-47103: : 1
"PGInstrument" : 1
3.38.3 : 1
bpo-47239: : 1
--list-paths : 1
3.38.2 : 1
bpo-46785: : 1
unlinking : 1
"FindFirstFileW()" : 1
"win32_xstat_impl" : 1
bpo-40859: : 1
xz-5.2.5 : 1
gh-91583: : 1
"defining_class" : 5
"Tools/scripts/generate_re_casefix.py" : 1
"regen-re" : 1
gh-91551: : 1
Pynche : 2
https://gitlab.com/warsaw/pynche : 1
gh-88279: : 1
"PySys_SetPath()" : 3
gh-92154: : 1
"getattr(code_object : 1
'co_code')" : 2
gh-91320: : 1
"old-style : 1
cast" : 1
("g++ : 1
-Wold-style-cast") : 1
"reinterpret_cast<>" : 1
"static_cast<>" : 1
gh-80527: : 1
623**: : 1
"PyUnicode_AS_DATA()" : 2
"PyUnicode_AS_UNICODE()" : 2
"PyUnicode_GET_DATA_SIZE()" : 2
"PyUnicode_GET_SIZE()" : 2
gh-91768: : 1
"Py_TYPE()" : 9
"Py_SIZE()" : 7
"Py_IS_TYPE()" : 4
PyObject*" : 2
gh-91020: : 1
"PyBytes_Type.tp_alloc" : 1
"PyBytesObject.ob_shash" : 2
bpo-40421: : 4
"PyFrame_GetLasti" : 1
bpo-35134: : 6
"Include/code.h" : 1
"<Python.h>" : 5
bpo-47169: : 2
"PyOS_CheckStack()" : 3
"PyThread_get_thread_native_id()" : 2
Solaris) : 2
bpo-46343: : 1
"PyErr_GetHandledException()" : 5
"PyErr_SetHandledException()" : 5
"PyErr_GetExcInfo()" : 6
"PyErr_SetExcInfo()" : 6
2022-04-05* : 1
bpo-47212: : 1
un-parenthesized : 2
Matthieu : 4
Dartiailh : 3
bpo-47186: : 2
"JUMP_IF_NOT_EG_MATCH" : 1
"CHECK_EG_MATCH" : 2
bpo-47176: : 1
Module.Py_EmscriptenSignalBuffer : 1
SharedArrayBuffer : 2
Py_EMSCRIPTEN_SIGNAL_HANDLING : 1
"CHECK_EXC_MATCH" : 2
"JUMP_NO_INTERRUPT" : 2
"JUMP_BACKWARD_NO_INTERRUPT" : 2
bpo-47182: : 1
""\N{digit : 1
nine}"" : 1
bpo-47162: : 1
trampolines : 2
"PY_CALL_TRAMPOLINE" : 1
bpo-46775: : 1
codes(>= : 1
10000) : 2
bpo-47129: : 1
bpo-47117: : 1
bpo-47127: : 1
"JUMP_ABSOLUTE" : 4
"JUMP_BACKWARD" : 2
bpo-42197: : 1
"PyFrame_FastToLocalsWithError()" : 2
"PyFrame_LocalsToFast()" : 2
"f_locals" : 5
bpo-47070: : 1
"array_inplace_repeat" : 1
"memcpy" : 2
inplace : 1
"unicodeobject" : 1
"_PyBytes_Repeat" : 1
bpo-47053: : 1
Reduce : 8
de-optimization : 1
"BINARY_OP_INPLACE_ADD_UNICODE" : 1
bpo-47045: : 1
"f_state" : 1
_PyInterpreterFrame : 3
"owner" : 2
deallocing : 1
bpo-46968: : 3
"sys/auxv.h" : 1
bpo-46329: : 5
Helps : 3
streamline : 1
Quicken : 1
"PyCodeObject" : 4
bpo-47012: : 1
bpo-47009: : 1
optimizing : 1
bpo-47005: : 1
"bytearray_repeat" : 1
"bytearray_irepeat" : 1
bpo-46829: : 1
"asyncio.Future.cancel()" : 2
"asyncio.Task.cancel()" : 3
bpo-46993: : 1
bpo-39829: : 1
"list_extend" : 1
Jeremiah : 5
Pascual : 1
bpo-46944: : 1
"STORE_SUBSCR" : 2
oparg) : 2
"CALL" : 8
unused) : 1
non-inline : 1
bpo-46881: : 1
bpo-46838: : 1
bpo-43721: : 1
"getter" : 5
"setter" : 4
"deleter" : 3
bpo-43224: : 3
bpo-47208: : 1
vendors : 2
"CTYPES_MAX_ARGCOUNT" : 1
bpo-23689: : 1
bpo-47167: : 1
bpo-47151: : 1
vfork : 3
"sre_compile" : 2
"sre_constants" : 2
"sre_parse" : 2
bpo-4833: : 1
"ZipFile.mkdir()" : 2
bpo-27929: : 1
"asyncio.loop.sock_connect()" : 2
"socket.AF_INET" : 3
"socket.AF_INET6" : 1
"socket.AF_BLUETOOTH" : 1
"socket.AF_UNIX" : 3
bpo-14265: : 1
bpo-39622: : 1
Ctrl+C : 5
bpo-47101: : 1
OSSL : 1
bpo-47099: : 2
"URLError" : 10
"urllib.request.URLopener" : 1
"ftp : 1
"open_ftp()" : 1
"Exception.with_traceback()"/"sys.exc_info()" : 1
3134** : 2
bpo-47095: : 1
"hashlib"'s : 2
"libb2" : 1
https://www.blake2.net/ : 1
blake2 : 2
bpo-47098: : 1
"_sha3" : 3
tiny_sha3 : 1
bpo-47088: : 1
"typing.LiteralString" : 1
675** : 3
bpo-42885: : 1
"re.search()" : 9
"re.finditer()" : 2
"\A" : 5
"^" : 20
bpo-23691: : 1
Protect : 3
re-entering : 2
bpo-47067: : 1
"vectorcall" : 15
"PyObject_SetAttrString" : 1
"PyObject_SetAttr" : 1
bpo-28080: : 1
*metadata_encoding* : 4
"--metadata-encoding" : 1
"io.text_encoding()" : 1
bpo-42369: : 1
"zipfile._SharedFile.tell()" : 1
"zipfile.BadZipFile: : 1
CRC-32 : 3
bpo-38256: : 1
"binascii.crc32()" : 4
zlib'c : 1
4+GiB : 1
4GiB : 2
"zlib.crc32()" : 2
2-3x : 1
oddity : 1
moves : 25
bpo-47066: : 1
"(?i)") : 2
bpo-39394: : 1
bpo-433030: : 1
("(?>...)") : 2
possessive : 3
quantifiers : 10
("*+" : 2
"++" : 3
"?+" : 3
"{m,n}+") : 2
bpo-47062: : 1
bpo-46382: : 1
"slots=True" : 2
Arie : 3
Bovenberg : 3
bpo-47057: : 1
FASTCALL : 1
"FutureIter.throw()" : 1
594**: : 2
bpo-34790: : 3
bpo-47039: : 1
Normalize : 4
bpo-2604: : 1
bpo-45150: : 1
"hashlib.file_digest()" : 2
bpo-34861: : 1
cumtime : 3
bpo-45997: : 1
re-aquiring : 1
bpo-47022: : 1
594**) : 2
bpo-43253: : 1
Proactor : 3
fdset : 1
bpo-47004: : 1
4.11.3 : 1
EntryPoint.extras : 1
extras : 2
bpo-46998: : 1
"typing.Any" : 3
bpo-46995: : 1
"asyncio.Task.set_name()" : 1
bpo-46994: : 1
contextvars.Context : 2
"asyncio.loop.create_task()" : 1
bpo-46981: : 1
"typing.get_args(typing.Tuple[()])" : 1
"((),)" : 2
"os.sysconf_names['SC_MINSIGSTKSZ']" : 1
bpo-46985: : 1
(pip : 3
22.0.4) : 1
"faulthandler": : 1
5.14 : 1
"getauxval(AT_MINSIGSTKSZ)" : 1
extension's : 3
AMX_TILE : 1
Sapphire : 1
Rapids : 1
Xeon : 1
succeed : 36
unblocking : 2
ISA : 1
bpo-46917: : 2
bpo-46955: : 1
Expose : 23
"asyncio.base_events.Server" : 1
Zabka : 1
bpo-23325: : 1
"SIG_IGN" : 2
"SIG_DFL" : 3
bpo-46932: : 1
bpo-46933: : 1
bpo-40059: : 1
680** : 2
bpo-464471: : 1
"asyncio.timeout()" : 6
"asyncio.timeout_at()" : 1
Tin : 1
Tvrtković : 1
bpo-46805: : 1
datagram : 28
asyncio: : 20
"sock_sendto()" : 2
"sock_recvfrom()" : 2
"sock_recvfrom_into()" : 2
bpo-46644: : 1
typeforms : 1
"dataclasses.InitVar" : 4
Beauregard : 9
bpo-46581: : 1
Brings : 1
propagation : 12
bpo-45413: : 1
*posix_venv* : 2
*nt_venv* : 3
*venv* : 10
*posix_prefix* : 4
*nt* : 5
hardcoding : 2
Downstream : 2
"sysconfig.get_default_scheme()" : 2
"sysconfig.get_preferred_scheme()" : 3
"key="prefix"" : 2
typing.py : 12
types.GenericAlias : 1
"*tuple[int : 1
bpo-46557: : 1
bpo-41370: : 1
585 : 3
bpo-46607: : 1
"LegacyInterpolation" : 1
"BasicInterpolation" : 1
"ExtendedInterpolation" : 1
bpo-26120: : 1
excludes : 13
bpo-46480: : 1
"typing.assert_type()" : 2
bpo-46421: : 1
unittest" : 5
filename(s) : 4
(.) : 1
bpo-46245: : 1
bpo-22859: : 1
"usageExit()" : 1
bpo-46170: : 1
"typing.NewType" : 2
bpo-40296: : 1
bpo-20392: : 1
inconsistency : 9
"MimeTypes.guess_type()" : 1
bpo-46030: : 1
"LOCAL_CREDS" : 1
"LOCAL_CREDS_PERSISTENT" : 1
"SCM_CREDS2" : 1
bpo-44439: : 2
".write()" : 1
bpo-45171: : 1
"stacklevel" : 2
"warn()" : 6
bpo-24959: : 1
bpo-44859: : 2
"BufferError" : 3
BLOB : 3
"Warning" : 10
bpo-44493: : 1
NUL : 24
sockaddr_un's : 1
non-abstract : 2
AF_UNIX : 8
bpo-41930: : 1
"serialize()" : 2
"deserialize()" : 2
bpo-33178: : 1
"ctypes.BigEndianUnion" : 1
"ctypes.LittleEndianUnion" : 1
bpo-43352: : 1
*asyncio* : 3
Lib : 1
consistant : 1
*threading* : 1
*multiprocessing* : 1
libs* : 1
bpo-35859: : 1
bpo-45099: : 1
bpo-47126: : 1
676**'s : 1
bpo-47040: : 1
compatiblity : 1
"zlib.adler32()" : 1
bpo-46033: : 1
bpo-45790: : 1
phrasing : 1
bpo-42340: : 1
Provided : 3
bpo-41233: : 1
errnos : 1
"Doc/library/exceptions.rst" : 1
"Doc/library/errno.rst" : 1
InterruptedError : 3
"yyyyyyyan" : 1
Orestes : 1
bpo-47205: : 1
bpo-46126: : 2
'descriptions' : 2
bpo-47104: : 1
Rewrite : 11
subprocess-based : 1
bpo-47037: : 1
"strftime("%4Y")" : 1
bpo-46587: : 1
"strftime" : 4
bpo-47015: : 1
"--enable-wasm-dynamic-linking" : 1
MAIN_MODULE : 1
SIDE_MODULE : 1
bpo-46023: : 2
wins : 3
SOABI : 5
32bit : 7
"wasm64" : 2
bpo-47032: : 1
bpo-47024: : 1
1.1.1n : 1
bpo-46996: : 1
8.5.12 : 2
bpo-46973: : 1
"regen-configure" : 1
Christian's : 1
"quay.io/tiran/cpython_autoconf:269" : 1
bpo-45774: : 2
verifies : 11
bpo-47194: : 1
CVE-2018-25032 : 1
bpo-47171: : 1
Enables : 10
bpo-46566: : 1
Upgraded : 1
"-V:company/tag" : 1
non-32-bit : 1
bpo-47086: : 1
loose : 2
".chm" : 1
3.38.1 : 2
bpo-44549: : 1
bzip2 : 12
1.0.8 : 1
CVE-2016-3189 : 1
CVE-2019-12900 : 1
bpo-46948: : 1
CVE-2022-26488 : 1
repaired : 2
bpo-46890: : 1
Emscripten's : 1
Bell's : 1
browser-ui : 1
python-wasm : 1
"PyFrame_GetBuiltins" : 1
"PyFrame_GetGenerator" : 1
"PyFrame_GetGlobals" : 1
bpo-46850: : 5
"_PyFrameEvalFunction" : 3
"_PyInterpreterState_GetEvalFrameFunc()" : 2
"_PyInterpreterState_SetEvalFrameFunc()" : 2
"_PyEval_EvalFrameDefault()" : 1
"_PyEval_CallTracing()" : 1
"sys.call_tracing()" : 1
"_PyEval_GetCoroutineOriginTrackingDepth()" : 1
"_PyEval_GetAsyncGenFirstiter()" : 1
"_PyEval_GetAsyncGenFinalizer()" : 1
"_PyEval_SetAsyncGenFirstiter()" : 1
"_PyEval_SetAsyncGenFinalizer()" : 1
"sys.get_asyncgen_hooks()" : 1
"sys.set_asyncgen_hooks()" : 3
bpo-46987: : 1
"_PySys_GetObjectId()" : 1
"_PySys_SetObjectId()" : 3
bpo-46906: : 1
(serialize : 2
deserialize): : 2
"PyFloat_Pack2()" : 2
"PyFloat_Pack4()" : 2
"PyFloat_Pack8()" : 2
"PyFloat_Unpack2()" : 2
"PyFloat_Unpack4()" : 2
"PyFloat_Unpack8()" : 2
2022-03-07* : 1
bpo-46940: : 1
bpo-46927: : 1
non-generic : 1
bpo-46921: : 1
specializing : 2
"BINARY_OP" : 6
oparg : 7
"GET_AWAITABLE" : 2
bpo-46903: : 1
3.11alpha : 2
bpo-46891: : 1
"STORE_ATTR" : 2
"BINARY_SUBSCR" : 2
bpo-46864: : 1
"UNPACK_SEQUENCE" : 2
bpo-46845: : 1
"sys.getsizeof(dict.fromkeys("abcdefg"))" : 2
272 : 2
352 : 2
bpo-46852: : 2
"float.__set_format__()" : 3
"float.__setformat__()" : 3
test_float : 1
"You : 3
bpo-40116: : 2
dict.update(other) : 1
bpo-46712: : 1
Share : 1
deep-frozen : 5
bpo-46430: : 2
bpo-45107: : 1
Specialize : 6
bpo-44337: : 2
bpo-46729: : 1
sub-exceptions : 1
"BaseException.__str__()" : 1
bpo-45885: : 3
un-adapt : 1
bpo-46794: : 1
Bump : 2
bpo-46823: : 1
"LOAD_FAST__LOAD_ATTR_INSTANCE_VALUE" : 1
bpo-46820: : 1
spaces) : 6
"1not : 1
"KW_NAMES" : 3
"operand" : 2
bpo-46808: : 1
"NEXT_BLOCK" : 1
compile.c : 1
"PUSH_NULL" : 2
"PRECALL_FUNCTION" : 1
"PRECALL_METHOD" : 3
bpo-46762: : 1
'<' : 8
bpo-46730: : 1
bpo-46724: : 2
"JUMP_FORWARD" : 1
"(2**32)+offset" : 1
bpo-46732: : 1
bpo-46072: : 3
bpo-46707: : 1
bpo-46323: : 3
bpo-45923: : 2
quickening : 2
bpo-46702: : 1
gathered : 7
pystats" : 1
"DYNAMIC_EXECUTION_PROFILE" : 1
"DXPAIRS" : 1
bpo-46675: : 1
254 : 1
bpo-40479: : 4
"va_end()" : 1
"Modules/_hashopenssl.c" : 1
"PyObject_Vectorcall()" : 4
bpo-46615: : 1
"setobject.c" : 1
corner-cases : 1
bpo-45828: : 2
(whenever : 1
so) : 1
bpo-30496: : 1
"PyLong_FromLongLong()" : 2
bpo-25707: : 1
Jacob : 1
Walls : 1
bpo-46877: : 1
Export : 4
"unittest.doModuleCleanups()" : 1
bpo-46848: : 1
string-searching : 2
bpo-46736: : 1
bpo-44886: : 1
Inherit : 3
"asyncio.DatagramTransport" : 1
bpo-46827: : 1
selector-based : 1
Grainger : 2
bpo-46811: : 1
>=2.4.5 : 1
bpo-46252: : 1
transport-based : 3
bpo-46784: : 1
bpo-46786: : 1
serialisation : 7
"embed" : 1
"source" : 9
"track" : 1
"wbr" : 1
bpo-39327: : 1
VirtualBox : 2
guest : 1
operating-system : 1
bpo-45390: : 1
Propagate : 2
awaiter : 2
bpo-46756: : 1
"urllib.request.HTTPPasswordMgr.find_user_password()" : 1
"urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated()" : 1
bypass : 13
authorization : 4
"example.org/foobar" : 1
authorized : 3
"example.org/foo" : 1
bpo-46737: : 1
"random.gauss()" : 1
"random.normalvariate()" : 1
bpo-46752: : 1
(structured : 1
Trio's : 1
nurseries) : 1
.uncancel() : 1
bpo-46333: : 2
"typing.ForwardRef" : 5
bpo-46643: : 1
stringified : 10
"ParamSpecArgs" : 3
"ParamSpecKwargs" : 3
bpo-45863: : 1
ustar : 4
possible) : 8
unarchivers : 1
full-precision : 1
bpo-46066: : 1
kwargs-based : 1
totality : 3
Jingchen : 2
Ye : 2
bpo-46676: : 1
kwargs : 32
"ctypes.CFUNCTYPE()" : 1
"ctypes.WINFUNCTYPE()" : 1
"_argtypes_" : 1
bpo-46672: : 1
bpo-46659: : 2
"calendar.LocaleTextCalendar" : 2
"calendar.LocaleHTMLCalendar" : 2
"locale.getlocale()" : 7
"locale.getdefaultlocale()" : 4
"locale.setlocale()" : 3
bpo-46655: : 1
bpo-45948: : 1
discrepancy : 2
"target=None" : 1
bpo-46626: : 1
Linux's : 3
"IP_BIND_ADDRESS_NO_PORT" : 1
bpo-46521: : 1
bpo-46571: : 1
"typing.no_type_check()" : 2
classmethods : 3
bpo-46400: : 1
expat: : 4
bpo-46556: : 1
bpo-46534: : 1
673** : 3
"typing.Self" : 1
Hilton-Balfe : 2
bpo-46522: : 1
bpo-46475: : 1
"typing.Never" : 2
differentiated : 3
bpo-46246: : 1
"importlib.metadata.DeprecatedList" : 1
bpo-46232: : 1
DN : 3
bpo-46195: : 1
"Optional" : 5
aligns : 2
https://github.com/python/peps/pull/689 : 1
bpo-31369: : 1
"re.__all__" : 1
"NOFLAG" : 1
bpo-45898: : 1
"ffi_type_*" : 1
"cfield.c" : 1
decade : 1
bpo-44953: : 1
"operator.itemgetter" : 1
"operator.attrgetter" : 1
bpo-44289: : 1
"is_tarfile()" : 1
"tarfile.TarFile.open()" : 1
bpo-44011: : 1
Reimplement : 2
bpo-41086: : 1
"interpolation" : 2
"configparser.Interpolation" : 1
bpo-29418: : 1
"inspect.ismethodwrapper()" : 1
"inspect.isroutine()" : 1
methodwrapper : 1
Hakan : 4
Çelik : 4
bpo-14156: : 1
argparse.FileType : 1
.buffer : 1
sys.stdin/sys.stdout : 1
Modes : 4
bpo-42238: : 3
"Doc/tools/rstlint.py" : 1
"sphinx-lint" : 1
bpo-46913: : 1
test_faulthandler.test_sigfpe() : 1
sanitizer : 6
(UBSAN): : 1
UBSAN : 1
faulthandler_sigfpe() : 1
bpo-46760: : 1
test.test_dis : 1
obstacles : 1
bpo-46708: : 1
"test_asyncio" : 4
bpo-46678: : 1
"make_legacy_pyc" : 1
"Lib/test/support/import_helper.py" : 1
tempfiles : 1
bpo-46623: : 1
test_pair() : 1
test_speech128() : 1
test_zlib : 1
s390x : 3
bpo-46860: : 1
Respect : 4
"--with-suffix" : 1
bpo-46656: : 2
Not-a-Number : 1
(NaN): : 1
"Py_NO_NAN" : 2
bpo-46640: : 1
"<math.h>" : 2
"NAN" : 2
"__builtin_nan()" : 1
bpo-46608: : 1
Exclude : 12
marshalled-frozen : 1
deep-freezing : 1
300 : 9
KB : 1
"is_package" : 3
"_frozen" : 5
wasm32-emscripten : 4
getrusage : 1
prlimit : 1
mkfifo : 1
mknod : 1
setres[gu]id : 1
setgroups : 1
fd_count : 1
cound : 1
_multiprocessing : 2
socket.accept() : 2
signal.alarm : 1
Intern : 3
bpo-46744: : 1
"Program : 2
Files" : 1
(Arm)" : 1
(32-bit) : 2
bpo-46567: : 1
bpo-46638: : 1
virtualization : 2
(some : 7
protected) : 1
(registry : 1
applications) : 2
bpo-46630: : 1
bpo-45447: : 1
"pyi" : 1
bpo-46748: : 1
"<stdbool.h>" : 1
embedd/extends : 1
"true" : 7
"false" : 4
bpo-46836: : 1
("struct : 1
_frame") : 1
"pycore_frame.h" : 1
bpo-45459: : 2
"Include/buffer.h" : 1
"Include/pybuffer.h" : 1
conflits : 1
"buffer.h" : 1
bpo-45412: : 2
"HAVE_PY_SET_53BIT_PRECISION" : 2
(moved : 2
bpo-46613: : 1
"PyType_GetModuleByDef()" : 4
accesss : 1
2022-02-03* : 1
bpo-45773: : 2
"peephole" : 1
bpo-46564: : 1
"super" : 2
fined-grained : 1
bpo-44977: : 1
"__trunc__()" : 8
"int(a)" : 2
"type(a)" : 4
bpo-46458: : 1
Reorder : 2
"try"-"except" : 1
jump) : 1
optimal : 7
bpo-46527: : 1
bpo-46528: : 1
("DUP_TOP" : 1
"DUP_TOP_TWO" : 2
"ROT_TWO" : 2
"ROT_THREE" : 2
"ROT_N") : 1
"COPY" : 2
"SWAP" : 2
"PRECALL; : 2
CALL" : 2
KW_NAMES; : 1
"PRECALL_FUNTION" : 1
pre-call : 2
bpo-46503: : 1
bpo-46431: : 1
"BaseExceptionGroup.__new__()" : 1
bpo-46476: : 1
deepfreeze : 2
bpo-46481: : 1
"weakref.ref.__call__()" : 1
bpo-46417: : 2
"add_subclass()" : 1
"PyTypeObject.tp_subclasses" : 2
"PyWeakref_NewRef()" : 2
bpo-43683: : 2
ASYNC_GEN_WRAP : 2
Removes : 33
"YIELD_VALUE" : 1
bpo-46407: : 1
"Objects/longobject.c" : 1
Vivian : 2
bpo-46409: : 1
"RETURN_GENERATOR" : 2
Simplifies : 1
interrupts : 11
bpo-46406: : 1
amd64 : 1
bpo-46383: : 1
"_zoneinfo"'s : 1
"module_free" : 1
bpo-46361: : 1
"small" : 2
"int.from_bytes()" : 5
bpo-46161: : 1
CALL_FUNCTION_EX : 3
bpo-46028: : 1
bpo-46091: : 1
bpo-30512: : 1
CAN : 20
bpo-44024: : 1
exc:"TypeError" : 1
bpo-46624: : 1
"random.randint()" : 1
bpo-46591: : 1
clickable : 2
bpo-46565: : 1
bpo-46553: : 1
"ClassVar" : 10
bpo-46544: : 1
"uspace" : 1
"textwrap.TextWrapper" : 1
bpo-46487: : 1
"get_write_buffer_limits" : 1
"asyncio.transports.WriteTransport" : 1
bpo-45173: : 2
bpo-45162: : 2
bpo-46539: : 1
"Annotated" : 12
bpo-46510: : 1
"types.FrameType" : 2
bpo-46491: : 1
bpo-46483: : 1
bpo-46436: : 1
"-d"/"--directory" : 1
"--cgi" : 2
bpo-41403: : 1
"mock.patch()" : 1
cryptic : 6
bpo-46474: : 2
"importlib.metadata.EntryPoint.pattern" : 1
REDoS : 1
"importlib.metadata.Path" : 1
Sync : 3
4.10.0 : 1
bpo-46470: : 1
"typing._remove_dups_flatten" : 1
bpo-46469: : 1
bpo-41906: : 1
"filters" : 9
"loggers" : 3
"logging.config.dictConfig()" : 2
bpo-46422: : 1
"dis.Positions" : 4
"dis.Instruction" : 1
bpo-46434: : 1
bpo-43869: : 1
Epoch : 2
bpo-46414: : 1
"typing.reveal_type()" : 2
POSIX-specific : 1
target) : 4
bpo-40066: : 3
"StrEnum" : 13
mixed-in : 8
bpo-46316: : 1
"pathlib.Path.iterdir()" : 1
bpo-29688: : 1
"pathlib.Path.absolute()" : 1
existed) : 2
bpo-43012: : 1
"_Accessor" : 1
terrain : 1
upcoming : 6
bpo-46258: : 1
bpo-46242: : 1
"enum.Enum" : 3
"_member_names_" : 1
"enum.Enum.__call__()" : 1
bpo-43118: : 1
bpo-26552: : 1
"asyncio.ensure_future()" : 1
bpo-21987: : 1
"tarfile.TarFile.getmember()" : 1
bpo-46124: : 1
traversable : 4
bpo-46103: : 1
"inspect.getmembers()" : 1
bpo-46080: : 1
"argparse.BooleanOptionalAction" : 1
"argparse.SUPPRESS" : 1
Felix : 2
Fontein : 1
bpo-46463: : 1
"escape4chm.py" : 1
bpo-43478: : 2
already-mocked : 2
"mock.Mock()" : 1
Mock- : 1
isinstance) : 1
assert_called_once_with) : 2
bpo-46616: : 1
"test_importlib.test_windows" : 1
bpo-44359: : 1
test_ftplib : 1
bpo-46600: : 2
test_gdb.test_pycfunction() : 1
"clang : 1
-Og" : 2
Tolerate : 1
bpo-46542: : 2
test_lib2to3 : 1
bpo-46576: : 1
test_peg_generator : 1
non-debug : 1
"test_json" : 1
"RecursionError": : 1
"support.infinite_recursion()" : 1
bpo-13886: : 1
test_builtin : 2
PTY : 1
intented : 1
"test.support.requires_fork()" : 1
"test.support.requires_subprocess()" : 1
bpo-46602: : 1
Tidied : 1
configure.ac : 3
conftest.c : 2
assists : 1
'rm' : 1
clobbered : 2
"-Og" : 3
bpo-38472: : 1
cross-compiling : 10
LC_ALL=C : 1
bpo-46513: : 1
"AC_C_CHAR_UNSIGNED" : 1
"__CHAR_UNSIGNED__" : 1
bpo-46471: : 1
bpo-46443: : 1
Deepfreeze : 2
bpo-46429: : 1
bpo-45569: : 1
30-bit : 4
15-bit : 4
"--enable-big-digits=15" : 1
bpo-45925: : 2
3.37.2 : 2
bpo-43112: : 1
musl : 2
(tagged : 1
musl") : 1
bpo-33125: : 2
EXE/MSI : 1
bpo-46362: : 1
os.path.abspath("C:CON") : 1
"\.CON" : 1
COM1 : 1
LPT1 : 1
bpo-44934: : 1
bpo-45296: : 2
'Close' : 1
'Exit' : 2
'Close : 1
Window' : 1
'Exit : 1
IDLE' : 1
'quit()' : 1
'exit()' : 1
'close : 1
Shell' : 2
bpo-40170: : 13
"PyHeapType_GET_MEMBERS()" : 2
"PyTypeObject.tp_members" : 2
_Py_GetAllocatedBlocks() : 3
_PyObject_DebugMallocStats() : 1
bpo-46433: : 1
_PyType_GetModuleByDef : 1
bpo-14916: : 1
"PyRun_InteractiveOne" : 1
FD : 14
2022-01-13* : 1
bpo-46070: : 2
"Py_EndInterpreter()" : 2
untracks : 1
bpo-46347: : 1
PyEval_EvalCodeEx : 1
bpo-46339: : 1
bpo-46331: : 1
doc-string : 1
bpo-46314: : 1
"call" : 14
3.11a4 : 1
bpo-46289: : 1
"FormattedValue" : 2
"conversion" : 3
bpo-46297: : 1
bootup : 1
PythonPaths : 1
Derzsi : 1
Dániel : 1
bpo-46237: : 1
bpo-46263: : 3
"use_frozen_modules" : 1
getpath.c : 3
bpo-46006: : 1
"_PyUnicode_EqualToASCIIId()" : 1
"update_slot()" : 1
subinterpreters: : 2
RESUME : 3
bpo-46208: : 1
os.path.normpath("A/../../B") : 1
"../B" : 1
bpo-46240: : 1
bpo-46009: : 2
"GEN_START" : 2
bpo-46235: : 1
"[0] : 1
1_000" : 1
reference-counting : 1
bpo-46221: : 1
"PREP_RERAISE_STAR" : 2
"lasti" : 1
bpo-46202: : 1
"POP_EXCEPT_AND_RERAISE" : 1
bpo-46085: : 1
bpo-46055: : 1
shifting : 13
"PyLong_BASE" : 1
bpo-46110: : 1
bpo-46107: : 1
"ExceptionGroup.split()" : 1
"ExceptionGroup.subgroup()" : 1
group's : 4
bpo-45711: : 4
state's : 3
exc_info : 7
_PyErr_StackItem) : 1
"exc_value" : 5
"exc_type" : 3
"exc_traceback" : 3
bpo-44525: : 5
"CALL_METHOD_KW" : 2
"CALL_NO_KW" : 1
"CALL_KW" : 1
pairing : 1
bpo-46039: : 1
"YIELD_FROM" : 2
"SEND" : 2
bpo-45635: : 1
"_PyErr_Display()" : 1
unrecoverable : 3
bpo-46054: : 1
non-utf8 : 1
bpo-46042: : 1
caret : 13
bpo-46049: : 1
bpo-46048: : 1
bpo-37971: : 1
bpo-46031: : 1
bpo-45654: : 1
bpo-46025: : 1
bpo-46000: : 1
CALL_FUNCTION : 1
Speeds : 2
"range(x)" : 1
bpo-42918: : 1
'single' : 3
bpo-45953: : 1
_PyRuntimeState.interpreters : 1
_PyRuntime) : 1
bpo-45292: : 2
654** : 5
bpo-43413: : 2
"set.__init__" : 1
Subclass : 22
bpo-43931: : 1
"Py_Version" : 5
bears : 5
"PY_VERSION_HEX" : 5
Gabriele : 4
Tornetta : 4
bpo-46342: : 1
"@typing.final" : 1
"__final__" : 4
bpo-46328: : 1
"sys.exception()" : 6
bpo-46307: : 1
"string.Template.is_valid()" : 1
"string.Template.get_identifiers()" : 1
bpo-46306: : 1
"types.CodeType.co_firstlineno" : 1
*usedforsecurity* : 2
sub-interpreters : 13
bpo-46244: : 1
"typing.TypeVar" : 2
bpo-46278: : 1
Reflect : 1
"AbstractEventLoop.call_*()" : 1
bpo-46269: : 1
"enum.Enum.__dir__()" : 1
bpo-46266: : 1
("MONDAY" : 1
"SUNDAY") : 1
bpo-46257: : 1
stdev : 2
eating : 2
bpo-41011: : 1
*pyvenv.cfg* : 1
bpo-46239: : 1
"asyncio.windows_events" : 2
bpo-46238: : 1
Reuse : 1
bpo-46222: : 1
"SF_NOCACHE" : 1
sendfile : 11
posixmodule : 2
bpo-37295: : 2
67" : 1
"math.comb()" : 3
bpo-46176: : 1
"MAP_STACK" : 1
bpo-43424: : 1
"webbrowser.MacOSXOSAScript._name" : 1
bpo-45321: : 1
"xml.parsers.expat.errors" : 2
bpo-46125: : 1
5.4.0 : 1
bpo-46118: : 1
bpo-37578: : 1
*include_hidden* : 4
bpo-20369: : 1
"concurrent.futures.wait()" : 2
bpo-46105: : 2
urls : 4
(importlib_metadata : 3
4.8.3) : 1
bpo-44893: : 1
EntryPoint : 3
('.name' : 1
'.group') : 1
('.load()') : 1
bpo-22815: : 1
"unittest.TextTestResult" : 2
bpo-22047: : 1
"add_argument_group()" : 8
"add_mutually_exclusive_group()" : 4
bpo-26952: : 1
bpo-45615: : 1
bpo-16594: : 1
allow_reuse_port : 1
bpo-27718: : 1
"signal()" : 5
"getsignal()") : 1
bpo-46032: : 1
"registry()" : 1
"typing.List[int]") : 1
"list[int]") : 1
bpo-46014: : 1
"functools.singledispatch" : 2
bpo-27062: : 1
bpo-46018: : 1
"math.expm1()" : 1
bpo-46016: : 1
"F_DUP2FD" : 3
"F_DUP2FD_CLOEXEC" : 3
bpo-45755: : 1
3.7-3.9 : 1
bpo-45874: : 1
"urllib.parse.parse_qsl" : 2
bpo-44674: : 1
disallows : 5
(list : 4
unhashability : 1
bpo-23882: : 1
420) : 1
bpo-25066: : 1
"multiprocessing.Event" : 1
bpo-45643: : 1
"signal.SIGSTKFLT" : 1
bpo-44092: : 1
bpo-42413: : 2
"concurrent.futures.TimeoutError" : 1
"asyncio.TimeoutError" : 6
bpo-46196: : 1
"cmd.Cmd.columnize()" : 1
bpo-46120: : 1
bpo-46109: : 1
Extracted : 1
bpo-19737: : 1
"globals()" : 6
bpo-46296: : 1
"_use_args_ : 1
True" : 8
"_member_type_ : 1
bpo-46205: : 1
runtest_mp : 1
test_capi : 3
14-dev: : 1
instruct : 8
jemalloc : 1
junk : 19
bpo-46262: : 1
Cover : 2
"enum.Flag._missing_()" : 1
bpo-46150: : 1
"fakename" : 1
"test_pathlib.PosixPathTest.test_expanduser" : 1
bpo-46129: : 1
"asyncio.locks" : 2
bpo-23819: : 2
bpo-46114: : 1
3.0.1 : 2
"0xMNN00PP0L" : 1
bpo-44133: : 2
"--without-static- : 1
libpython" : 1
(libpython.a) : 2
"Py_FrozenMain()" : 4
emscripten-target" : 1
bpo-46315: : 1
HAVE_FEATURE" : 1
bpo-45723: : 6
"select.epoll()" : 2
"MULTIARCH" : 1
bpo-46106: : 1
1.1.1m : 1
bpo-46088: : 1
--with-pystats : 1
"Tools/wasm" : 1
WebAssembly-related : 1
"config.site" : 1
wasm : 1
assets : 1
**makesetup** : 1
*disabled* : 2
bpo-45949: : 1
"freeze_module" : 1
"--with-freeze-module" : 2
bpo-46217: : 1
bpo-40477: : 1
bpo-46236: : 1
bpo-46140: : 1
"PyBuffer_GetPointer()" : 4
"PyBuffer_FromContiguous()" : 4
"PyBuffer_ToContiguous()" : 3
"PyMemoryView_FromBuffer()" : 5
"Py_buffer : 1
bpo-45855: : 2
*no_block* : 2
bpo-46007: : 1
"PyUnicode_CHECK_INTERNED()" : 2
2021-12-08* : 1
3.10.1 : 1
"gen_func().send(0)" : 1
"gen_func().throw(TypeError(...)" : 1
3.10.2 : 1
onward : 5
bpo-46004: : 1
"_PyErr_ChainStackItem()" : 1
"exc_info" : 8
bpo-45607: : 1
bpo-45947: : 1
bpo-45915: : 1
"is_valid_fd" : 1
"fcntl(fd : 1
F_GETFD)" : 1
bpo-44530: : 2
Reverts : 3
"code.__new__" : 5
prerelease : 1
bpo-42268: : 1
bpo-45727: : 1
Refine : 2
659 : 6
bpo-45786: : 1
Allocate : 3
outlives : 1
bpo-45614: : 1
bpo-45813: : 1
coro.cr_frame.clear() : 1
bpo-45811: : 1
bpo-45848: : 1
bpo-45709: : 1
"COPY_FREE_VARS" : 2
bpo-45829: : 1
bpo-45826: : 1
".with_traceback(None)" : 1
"unittest.TestCase.assertRaises()" : 1
bpo-45822: : 1
bpo-45820: : 1
bpo-45636: : 3
Simplify : 11
bpo-42540: : 1
bpo-45738: : 1
"fast : 5
measurable : 1
bpo-45753: : 1
bpo-45764: : 1
"(" : 16
"def"-statement: : 1
'(' : 40
bpo-45609: : 1
"BINARY_*" : 2
"INPLACE_*" : 2
bpo-45582: : 1
"getpath") : 1
bpo-45450: : 1
bpo-27946: : 1
class:"xml.etree.ElementTree.Element" : 1
"attrib" : 2
normalize : 9
triplet : 4
asserts : 10
bpo-13236: : 1
"unittest.TextTestRunner" : 1
flush : 14
bpo-45917: : 1
"math.exp2()": : 2
bpo-37658: : 2
bpo-45876: : 1
stdev() : 1
pstdev() : 1
bpo-44649: : 1
dataclass(slots=True) : 1
init=False : 1
bpo-45803: : 1
kw_only : 1
dataclasses.make_dataclass() : 3
bpo-45837: : 1
"turtle.RawTurtle.settiltangle()" : 1
"turtle.RawTurtle.tiltangle()" : 2
bpo-45831: : 1
"sqlite" : 1
unraisable : 13
bpo-41735: : 2
"zlib.Decompress.flush()" : 1
"PyObject_GetBuffer" : 1
bpo-45235: : 2
Reverted : 4
leaf : 12
bpo-45754: : 1
3.11a2 : 1
"SQLITE_LIMIT_LENGTH" : 1
"SQLITE_LIMIT_SQL_LENGTH" : 1
bpo-45766: : 1
*proportional* : 3
"statistics.linear_regression()" : 1
bpo-45765: : 1
bpo-45757: : 1
bpo-45644: : 1
infile" : 1
Wesseling : 1
bpo-45703: : 1
created/installed : 3
bpo-45535: : 1
bpo-45664: : 1
bpo-45663: : 1
"dataclasses.is_dataclass()" : 1
bpo-45662: : 1
"InitVar[list[int]]" : 1
bpo-43137: : 1
Launch : 1
gio : 1
gvfs-open : 1
bpo-45429: : 1
waitable : 7
high-resolution : 4
timers : 8
bpo-45514: : 1
bpo-45507: : 1
truncated/missing : 1
trailers : 2
gzip.decompress : 1
bpo-45359: : 1
bpo-44733: : 1
restarted : 6
bpo-28806: : 1
login : 11
bpo-43498: : 1
*"RuntimeError: : 2
iteration"* : 2
bpo-42158: : 1
N-quads : 1
N-triples : 1
Notation3 : 1
TriG : 1
bpo-30533: : 1
"inspect.getmembers_static()" : 1
suspicious" : 3
check" : 1
bpo-45840: : 1
cross-references : 1
bpo-45640: : 1
marked-up : 1
Milchior : 1
bpo-45788: : 1
bpo-45772: : 1
"socket.socket" : 14
bpo-45392: : 1
bpo-45250: : 1
bpo-25381: : 1
bpo-43905: : 1
"astuple()" : 2
"asdict()" : 3
bpo-45695: : 1
Out-of-tree : 1
bpo-19460: : 1
"Lib/email/mime/nonmultipart.py::MIMENonMultipart" : 1
bpo-45835: : 1
test_queue : 1
"feeder" : 2
bpo-45783: : 1
bpo-45745: : 1
"--findleaks" : 3
regrtest: : 8
"--fail-env-changed" : 4
bpo-45701: : 1
"test_functools" : 1
bpo-44035: : 1
autoconf : 5
regenerated : 9
unpatched : 3
bpo-45950: : 1
deepfreezing : 1
**_freeze_module** : 1
bpo-45881: : 2
"--with-build- : 1
python" : 3
WASM/Emscripten : 1
"shutdown" : 5
"SYS_shutdown" : 1
"ac_cv_func_shutdown=no" : 1
CONFIG_SITE : 1
"fork1 : 1
getegid : 1
geteuid : 1
getgid : 1
getppid : 1
getuid : 1
opendir : 1
ttyname" : 1
bpo-33393: : 3
"config.guess" : 1
2021-06-03 : 1
"config.sub" : 1
2021-08-14 : 1
"update-config" : 1
bpo-45866: : 1
"generated : 1
pygen : 1
<FILENAME>" : 1
"wasm32" : 1
"wasi" : 1
"emscripten" : 1
emscripten" : 1
"wasm32-unknown-wasi" : 1
bpo-41498: : 1
"sigset_t" : 2
Roman : 5
Yurchak : 1
pyodide : 1
"CC" : 2
multiarch : 4
bpo-45886: : 1
"_freeze_module" : 2
FREEZE_MODULE=../x86_64/Program/_freeze_module" : 1
bpo-45873: : 1
"_bootstrap_python" : 1
deepfreeze.py : 1
"$(PYTHON_FOR_REGEN)" : 1
bpo-45847: : 1
"PY_STDLIB_MOD" : 2
"addext()" : 1
"SAVE_ENV": : 1
"$CFLAGS" : 2
"$LDFLAGS" : 2
"$LIBS" : 2
"$CPPFLAGS" : 2
"RESTORE_ENV": : 1
"WITH_SAVE_ENV([SCRIPT])": : 1
"SCRIPT" : 1
"SAVE_ENV" : 1
"RESTORE_ENV" : 1
bpo-45573: : 3
Mandatory : 1
"Modules/Setup.bootstrap" : 1
"Modules/Setup.stdlib" : 1
enabled/disabled : 1
bpo-45816: : 1
2022 : 4
(MSVC : 2
v143 : 1
VS : 1
17.0) : 1
bpo-45800: : 1
bpo-45798: : 1
"--with-pkg-config" : 1
bpo-45763: : 1
bpo-45747: : 1
gdbm : 2
bpo-45743: : 1
"search_paths_first" : 1
Xcode : 7
2.71 : 1
"STDC_HEADERS" : 1
"AC_HEADER_TIME" : 1
bpo-45731: : 1
--enable-loadable-sqlite-extensions" : 1
"PY_SQLITE_ENABLE_LOAD_EXTENSION" : 1
"AC_CACHE_CHECK" : 1
bpo-45696: : 1
ready-to-use : 2
bpo-45561: : 1
smelly.py : 2
$(srcdir) : 1
bpo-45901: : 1
"script.py : 1
script.py : 7
args") : 1
bpo-45616: : 1
Launcher's : 1
bpo-45850: : 1
"bootstrap" : 1
"host" : 23
bpo-45732: : 2
8.6.12 : 2
bpo-45720: : 1
"shlwapi.dll" : 1
bpo-39026: : 1
Python.h : 3
Xcode: : 1
"Include/cpython/pystate.h" : 1
2021-11-05* : 1
bpo-45716: : 1
bpo-45688: : 1
macOS-specific : 1
"_scproxy" : 3
bpo-45379: : 1
starargs : 4
keyowrd : 1
closure) : 2
bpo-45530: : 1
ordering) : 5
bpo-45526: : 1
ADDRESS_BITS : 1
(ignored : 6
before) : 1
48 : 7
bpo-30570: : 1
bpo-45521: : 1
radix : 11
46-bits : 1
48-bits : 1
bpo-45494: : 1
bpo-45445: : 1
bpo-45340: : 1
bpo-45408: : 1
bpo-29410: : 1
SipHash13 : 1
bpo-45385: : 1
descr_check : 1
bpo-45367: : 1
"BINARY_MULTIPLY" : 1
"BINARY_MULTIPLY_INT" : 1
"BINARY_MULTIPLY_FLOAT" : 1
bpo-21736: : 1
unfrozen : 1
non-stdlib : 1
"PyImport_ImportFrozenModule()" : 2
bpo-45020: : 3
"module.__spec__.loader_state.origname" : 1
"module.__spec__.name" : 1
Tools/scripts/freeze_modules.py : 1
bpo-45324: : 1
FrozenImporter.find_spec() : 1
exec_module() : 4
"BaseExceptionGroup" : 11
bpo-44050: : 1
reverts : 3
"CALL_FUNCTION_BUILTIN_O" : 1
"CALL_FUNCTION_BUILTIN_FAST" : 1
"CALL_FUNCTION_LEN" : 1
"len(o)" : 4
"CALL_FUNCTION_ISINSTANCE" : 1
"isinstance(o : 2
t)" : 1
bpo-44511: : 1
bpo-43706: : 1
bpo-45679: : 1
multi-value : 1
"Literal[True : 1
"Literal[1 : 1
bpo-42064: : 1
489) : 5
bpo-45438: : 1
typing.Signature : 1
bpo-45613: : 1
"sqlite3.threadsafety" : 2
bpo-45574: : 1
"print_escape" : 1
bpo-45581: : 1
bpo-45557: : 1
underscore_numbers : 1
bpo-44019: : 2
"operator.call()" : 1
"operator.__all__" : 1
Kreusada : 1
bpo-42174: : 1
sane : 5
bpo-35673: : 1
introspectability : 1
"importlib.machinery.NamespaceLoader" : 1
"importlib.abc.InspectLoader" : 4
"_NamespaceLoader" : 1
bpo-45515: : 1
"dateutil.tz" : 1
bpo-45475: : 1
bpo-43787) : 1
bpo-45489: : 1
"ForwardRef" : 3
bpo-42222: : 2
*randrange()* : 1
bpo-45428: : 1
bpo-45467: : 1
"raw- : 1
unicode-escape" : 1
bpo-45461: : 1
"unicode-escape" : 1
bpo-45239: : 1
"email.utils.parsedate_tz()" : 1
bpo-45417: : 1
bpo-45249: : 1
"traceback.print_exc()" : 1
bpo-45416: : 1
bpo-20028: : 2
escapechar/quotechar : 1
"csv.Dialect" : 2
bpo-44904: : 1
bpo-45406: : 1
:'func:"inspect.getabsfile" : 1
bpo-45411: : 1
subtitles : 1
.srt : 1
.vtt : 1
mimetypes.py : 1
bpo-10716: : 1
Migrated : 1
xmlrpc's : 1
"ServerHTMLDoc" : 1
bpo-27580: : 1
bpo-45262: : 1
dealloc : 1
use-after- : 1
get_running_loop : 1
bpo-45386: : 1
bpo-45343: : 1
21.2.4 : 1
58.1.0 : 1
bpo-45328: : 1
"http.client.HTTPConnection" : 1
bpo-45243: : 1
"setlimit()" : 2
"getlimit()" : 2
bpo-45320: : 1
"getargspec" : 2
"formatargspec" : 1
3.5; : 4
"Signature.from_callable" : 1
"Signature.from_function" : 1
bpo-45192: : 1
"tempfile._infer_return_type" : 1
"dir" : 3
Kyungmin : 1
bpo-45160: : 1
OptionMenu : 4
bpo-25625: : 1
bpo-24139: : 1
"sqlite3.Error" : 1
bpo-24444: : 1
1+ : 1
*choices* : 5
bpo-44547: : 1
"Fraction.__int__" : 1
typing.SupportsInt)" : 2
bpo-40321: : 1
308 : 2
7538** : 1
Jochem : 1
Schulenklopper : 1
bpo-41374: : 1
"socket.TCP_*" : 1
bpo-35970: : 1
Kuska : 2
bpo-45726: : 1
"functools.singledispatchmethod" : 3
bpo-45680: : 1
Amend : 1
non-container : 1
bpo-45618: : 1
4.2.0 : 1
Olko : 1
bpo-45655: : 1
"relevant : 2
PEPs" : 1
bpo-45604: : 1
"level" : 14
"multiprocessing.log_to_stderr" : 1
bpo-45516: : 2
"importlib.abc.TraversableResources" : 2
bpo-45464: : 1
Mention : 6
bpo-45449: : 1
"importlib.abc.Traversable" : 1
bpo-20692: : 1
bpo-45678: : 2
stacked : 6
bpo-45578: : 1
"dis.distb()" : 1
bpo-45668: : 1
bpo-45577: : 1
"test_zoneinfo" : 1
bpo-45566: : 1
"test_frozen_pickle" : 1
"test_dataclasses" : 1
bpo-43592: : 1
"test.libregrtest" : 2
bpo-39679: : 1
"@functools.singledispatchmethod" : 1
bpo-45410: : 1
spawns : 2
buildbot : 2
bpo-45402: : 1
test_tools.test_sundry() : 1
freeze_modules.py : 1
locates : 1
_freeze_module : 1
bpo-45403: : 1
test_sys.test_stdlib_dir() : 1
bpo-45400: : 1
test_name_error_suggestions_do_not_trigger_for_too_many_locals() : 1
test_exceptions : 1
"a1" : 1
"Python-3.11.0a1"): : 1
bpo-10572: : 1
"test_sqlite" : 1
relocate : 2
"Lib/test/test_sqlite3" : 1
bpo-43158: : 1
"_uuid" : 2
util-linux's : 1
"libuuid" : 2
bpo-45666: : 1
"swprintf" : 1
"_testembed.c" : 1
bpo-45548: : 3
"Modules/makesetup" : 2
Outdated : 1
acosh : 1
asinh : 1
atanh : 1
expm1 : 3
log1p : 1
bpo-45595: : 1
bpo-45571: : 1
"PY_CFLAGS_NODIST" : 1
"PY_CFLAGS" : 1
bpo-45570: : 1
"_elementtree" : 3
"HAVE_EXPAT_CONFIG_H" : 1
"USE_PYEXPAT_CAPI" : 1
"XML_POOR_ENTROPY" : 1
"expat_config.h" : 1
bpo-43974: : 1
Fill : 6
Modules/Setup : 3
bpo-45532: : 1
Jeong : 1
YunWon : 1
bpo-45536: : 1
Failures : 1
bpo-45221: : 1
"argparse.parse_known_args()" : 1
bpo-45440: : 2
"copysign()" : 2
"hypot()" : 1
"isfinite()" : 2
"isinf()" : 4
"isnan()" : 5
bpo-45405: : 1
"internal : 1
non-Apple : 1
Bohman : 1
bpo-45433: : 1
libcrypt : 5
bpo-43652: : 2
8.6.11 : 5
8.6.10 : 3
bpo-45337: : 1
redirections : 8
bpo-43851: : 2
"SQLITE_OMIT_AUTOINIT" : 2
bpo-44828: : 1
Monterey : 1
Culler : 1
bpo-45495: : 1
'case' : 3
'match' : 3
bpo-29103: : 1
"PyType_FromSpec*" : 1
bpo-45522: : 1
freelists : 2
"PyWeakref_GET_OBJECT()" : 2
"PyWeakReference" : 3
bpo-35081: : 5
"interpreteridobject.h" : 1
"Include/" : 1
"Include/internal/" : 1
"cellobject.h" : 2
"classobject.h" : 2
"context.h" : 2
"funcobject.h" : 2
"genobject.h" : 2
"longintrepr.h" : 2
"eval.h" : 2
"Python.h": : 2
bpo-45474: : 1
"PyMarshal_WriteLongToFile()" : 2
"PyMarshal_WriteObjectToFile()" : 2
"PyMarshal_ReadObjectFromString()" : 2
"PyMarshal_WriteObjectToString()" : 2
"Py_MARSHAL_VERSION" : 3
bpo-45434: : 2
"pystrhex.h" : 2
"Py_FORCE_DOUBLE()" : 2
"Py_IS_INFINITY()" : 2
"0x030b0000" : 2
bpo-41123: : 5
"Py_UNICODE_COPY()" : 2
"Py_UNICODE_FILL()" : 2
"memcpy()" : 3
("wchar_t*" : 2
"Py_ADJUST_ERANGE1()" : 2
"Py_ADJUST_ERANGE2()" : 2
"Py_OVERFLOWED()" : 2
"Py_SET_ERANGE_IF_OVERFLOW()" : 2
"Py_SET_ERRNO_ON_MATH_ERROR()" : 2
bpo-45395: : 1
"PyImport_FrozenModules") : 1
bpo-43760: : 3
"PyThreadState_EnterTracing()" : 5
"PyThreadState_LeaveTracing()" : 5
bpo-44220: : 1
2021-10-05* : 1
bpo-42278: : 1
"tempfile.mktemp()" : 2
"TemporaryDirectory" : 4
bpo-44600: : 1
Burkland : 1
bpo-41180: : 1
"code.__init__" : 1
unmarshalled : 3
bpo-44394: : 1
2.2.8) : 1
CVE-2013-0340 : 1
"Billion : 1
Laughs" : 1
bpo-43124: : 1
"putcmd" : 1
sanitize : 2
bpo-44022: : 1
"100 : 3
Continue" : 3
bpo-45061: : 2
Py_DECREF(Py_True) : 1
Py_DECREF(Py_False) : 1
bpo-24076: : 1
sum() : 1
optimised : 1
bpo-45190: : 1
14.0.0 : 4
bpo-45167: : 1
deepcopying : 3
bpo-45155: : 1
"int.to_bytes()" : 5
""big"" : 5
"byteorder" : 3
"length" : 10
bpo-44219: : 1
"isatty" : 2
"os.isatty()" : 2
"os.device_encoding()" : 3
bpo-44219 : 1
bpo-44959: : 1
'.sl' : 1
bpo-45121: : 1
"Protocol.__init__" : 1
bpo-44348: : 1
bpo-45123: : 1
PyAiter_Check : 2
__anext__ : 4
__aiter__) : 1
PyAIter_Check : 1
PyObject_GetAiter : 1
PyObject_GetAIter : 1
bpo-1514420: : 1
"<stdin>") : 1
bpo-41031: : 1
unprintable : 3
bpo-37330: : 2
"codecs.open()" : 5
("universal : 3
newline") : 3
bpo-45083: : 1
renders : 7
qualname : 3
impacted : 4
already) : 3
bpo-34561: : 1
merge-ordering : 1
Munro : 1
Wild's : 1
"powersort()" : 1
near-optimal : 1
exceptionally : 2
linear-time : 1
approximations : 2
inherently : 5
quadratic-time : 1
optimally : 1
contrive : 2
bpo-45056: : 1
co_consts : 3
frozen_modules=[on|off]" : 1
into) : 2
bpo-45012: : 1
"fstatat()" : 1
"os.DirEntry.stat()" : 2
Stanisław : 1
Skonieczny : 1
bpo-45018: : 1
bpo-45000: : 1
bpo-44963: : 1
"throw()" : 10
"anext_awaitable" : 1
bpo-44962: : 1
WeakKeyDictionary : 3
WeakValueDictionary : 5
WeakSet : 3
asyncio.create_task : 1
asyncio.run : 1
shutdown_asyncgens : 1
bpo-24234: : 2
"isinstance(b : 1
typing.SupportsBytes)" : 1
"isinstance(z : 1
typing.SupportsComplex)" : 1
bpo-44954: : 1
"float.fromhex('0x.8p-1074')" : 1
bpo-44947: : 1
bpo-44945: : 1
BINARY_ADD_ADAPTIVE : 1
BINARY_ADD_FLOAT : 1
BINARY_ADD_INT : 1
BINARY_ADD_UNICODE : 1
BINARY_ADD_UNICODE_INPLACE_FAST : 1
bpo-44929: : 1
bpo-44914: : 1
recycled : 8
LOAD_ATTR : 4
bpo-44698: : 2
integer- : 3
bpo-44895: : 2
"PYTHONDUMPREFSFILE" : 1
bpo-44900: : 1
superinstructions : 1
quickening: : 1
STORE_FAST : 3
bpo-44889: : 1
Initial : 77
"LOAD_METHOD_CACHED" : 1
"LOAD_METHOD_MODULE" : 1
"LOAD_METHOD_CLASS" : 1
bpo-44890: : 1
Specialization : 3
bpo-44885: : 1
bpo-44878: : 2
DISPATCH : 1
bpo-44874: : 1
("Py_TRASHCAN_SAFE_BEGIN"/"Py_TRASHCAN_SAFE_END") : 2
bpo-44872: : 1
(Py_TRASHCAN_BEGIN/END) : 1
(Py_TRASHCAN_SAFE_BEGIN/END) : 1
bpo-33930: : 1
Augusto : 1
Goulart : 1
bpo-25782: : 1
"PyErr_SetObject" : 1
hangs : 4
bpo-44856: : 1
"update_bases()" : 1
"__build_class__" : 1
bpo-44826: : 1
STORE_ATTR : 2
STORE_ATTR_SLOT : 1
STORE_ATTR_SPLIT_KEYS : 1
STORE_ATTR_WITH_HINT : 1
bpo-44838: : 1
bpo-44821: : 1
(__dict__) : 1
regularity : 1
bpo-44792: : 1
Miguel : 2
Brito : 2
bpo-34013: : 1
Generalize : 1
bpo-44732: : 1
"types.Union" : 9
bpo-44725: : 1
"_opcode.get_specialization_stats()" : 1
bpo-44717: : 1
bpo-44653: : 1
bpo-44676: : 1
serialise : 2
bpo-44633: : 1
bpo-44661: : 1
"property_descr_set" : 1
bpo-44662: : 1
bpo-44655: : 2
bpo-44646: : 1
bpo-44636: : 1
Collapse : 2
int" : 8
{}" : 4
bpo-44611: : 1
"os.urandom()": : 1
BCryptGenRandom : 1
CryptGenRandom : 1
bpo-44635: : 1
"type(None)" : 2
bpo-26280: : 1
BINARY_SUBSCR : 3
BINARY_SUBSCR_LIST_INT : 1
BINARY_SUBSCR_TUPLE_INT : 1
BINARY_SUBSCR_DICT : 1
bpo-44589: : 1
bpo-44606: : 1
"__instancecheck__" : 2
"__subclasscheck__" : 2
bpo-42073: : 1
classmethod-like : 1
bpo-41972: : 3
Tuned : 1
fastsearch.h : 1
bpo-44590: : 1
(local : 2
7% : 2
bpo-44584: : 1
bpo-43895: : 1
dlopen'ed : 1
mid-1990s : 1
posix-ish : 1
dynload_shlib.c : 1
bpo-44490: : 2
"get_type_hints" : 2
levaraged : 1
bpo-44562: : 1
bpo-41486: : 2
zlib.decompress : 1
bpo-43908: : 4
bpo-44553: : 1
bpo-44523: : 1
pass-through : 1
"weakref.proxy" : 4
dies : 4
bpo-44483: : 1
bpo-44486: : 1
"types.ModuleType.__new__()" : 1
bpo-44472: : 1
ltrace : 1
bpo-12022: : 1
bpo-44297: : 1
inclusing : 1
bpo-44456: : 1
bpo-44409: : 1
bpo-44396: : 1
bpo-44376: : 1
"i**2" : 1
"pow(i : 1
bpo-44313: : 1
"LOAD_METHOD"/"CALL_METHOD" : 2
"LOAD_ATTR"/"CALL_FUNCTION" : 1
bpo-44338: : 1
LOAD_GLOBAL : 4
LOAD_GLOBAL_MODULE : 1
LOAD_GLOBAL_BUILTIN : 1
bpo-44368: : 1
bpo-44349: : 1
LOAD_ATTR_SLOT : 1
LOAD_ATTR_SPLIT_KEYS : 1
LOAD_ATTR_WITH_HINT : 1
LOAD_ATTR_MODULE : 1
bpo-44335: : 1
bpo-43693: : 4
Computation : 1
bpo-44317: : 1
bpo-44304: : 1
"sqlite.Statement" : 1
bpo-44305: : 1
"frozenset") : 2
[reverted : 1
3.11a4] : 1
bpo-43667: : 1
non-UTF : 1
MAKE_CELL : 1
eval : 3
locals) : 4
bpo-44232: : 1
"type_new()" : 3
winner : 7
bpo-44201: : 1
"co_fastlocalnames" : 1
"co_fastlocalkinds" : 1
authoritative : 4
locals : 27
Marshaled : 1
bpo-44184: : 1
bpo-44187: : 1
bpo-44180: : 1
bpo-44168: : 1
bpo-44156: : 1
"compile.c" : 1
bpo-44143: : 1
manifest : 27
bpo-44032: : 1
'fast' : 1
datastack : 1
bpo-44114: : 1
dictkeys_reversed : 1
dictitems_reversed : 1
broke : 4
webassembly : 1
bpo-44110: : 1
"str.__getitem__()" : 1
bpo-26110: : 2
originated : 5
branchless : 1
bpo-28307: : 1
%r : 10
%a : 1
bpo-43149: : 2
"exception : 1
groups" : 1
bpo-43822: : 2
prioritize : 2
bpo-40222: : 1
"Zero : 1
cost" : 1
SETUP_FINALLY : 1
POP_TOP : 2
60% : 4
bpo-43918: : 1
"anext" : 1
bpo-43833: : 1
bpo-43879: : 1
cells : 9
LOAD_CLOSURE : 2
bpo-17792: : 1
bpo-28146: : 1
bpo-11105: : 1
bpo-39091: : 1
non-exception : 1
Noah : 1
Oxer : 1
bpo-33346: : 1
Outer : 5
bpo-45371: : 1
UnixCCompiler : 1
bpo-45329: : 1
"pyexpat.xmlparser" : 1
2.2.0 : 9
bpo-41710: : 2
"sem_clockwait()" : 2
(glibc : 2
2.30 : 2
"threading.Lock.acquire()" : 6
("time.CLOCK_MONOTONIC") : 2
("time.CLOCK_REALTIME") : 2
bpo-1596321: : 1
thread: : 7
bpo-45274: : 1
"Thread.join()" : 1
bpo-21302: : 3
"nanosleep()" : 6
"clock_nanosleep()" : 5
(10^-7 : 2
millisecond : 10
(10^-3 : 2
Szőke : 3
bpo-45238: : 1
"unittest.IsolatedAsyncioTestCase.debug()": : 1
bpo-36674: : 1
"unittest.TestCase.debug()" : 2
"unittest.SkipTest" : 6
bpo-45183: : 1
zipimport.zipimporter.find_spec() : 1
invalidate_cache() : 1
bpo-45234: : 1
bpo-45228: : 1
J1939 : 3
bpo-45225: : 1
genexpr : 1
capwords : 1
bpo-42135: : 1
typo: : 1
"importlib.find_loader" : 1
25169 : 1
bpo-20524: : 1
Improves : 14
".format()" : 2
bpo-45168: : 1
"dis.dis()" : 2
omit : 20
op : 12
"co_consts" : 3
"co_names" : 7
"SafeConfigParser" : 3
"ParsingError" : 1
"readfp()" : 6
bpo-44987: : 1
"unicodedata.normalize()" : 5
bpo-35474: : 1
"mimetypes.guess_all_extensions()" : 1
"strict=False" : 3
"strict=True" : 3
bpo-45166: : 1
""fail*"" : 1
""assert*"" : 1
Broken : 5
Ignored : 10
"<unittest.TestLoader.loadTestsFromModule> : 1
TestLoader.loadTestsFromModule()" : 1
"_TextTestResult" : 2
"TextTestResult" : 3
bpo-38371: : 2
bpo-20499: : 1
statistics.pvariance() : 1
bpo-45132: : 1
bpo-45129: : 1
bpo-45124: : 1
bpo-30856: : 1
"unittest.TestResult" : 1
"addFailure()" : 1
"addError()" : 1
"addSkip()" : 1
"addSubTest()" : 1
subtest : 11
bpo-45034: : 1
"struct.pack" : 1
"'H'" : 5
"'h'" : 4
bpo-25894: : 1
separately: : 1
bpo-45081: : 1
bpo-45085: : 1
"b2a_hqx()"; : 1
"binascii.crc_hqx()" : 3
bpo-40360: : 2
(New : 2
bpo-45075: : 1
"traceback.StackSummary.format_frame()" : 1
"traceback.StackSummary.format_frame_summary()" : 2
FrameSummary : 1
bpo-31299: : 1
"format_frame()" : 1
bpo-41620: : 1
bpo-45021: : 1
forked : 5
bpo-43913: : 1
"tearDownClass" : 6
lesser : 1
bpo-45030: : 1
bpo-45001: : 1
malformed : 25
namely : 6
whitespace-only : 3
"Date:" : 1
bpo-45010: : 1
"__div__" : 1
bpo-39218: : 1
"x*x" : 1
bpo-43613: : 1
"gzip.decompress()" : 1
compressing : 16
bpo-37596: : 1
"marshalled" : 1
reproducibly : 2
"operator.call" : 2
"operator.call(obj : 2
obj(*args : 2
bpo-42255: : 1
"webbrowser.MacOSX" : 2
untested : 6
bpo-44955: : 1
bpo-39039: : 1
tarfile.open : 1
"ReadError" : 2
bpo-44935: : 1
bpo-44911: : 1
Bar : 13
Harel : 12
bpo-41322: : 1
value!=None : 1
bpo-44524: : 3
bpo-38956: : 1
"argparse.BooleanOptionalAction"'s : 1
"argparse.ArgumentDefaultsHelpFormatter" : 1
bpo-44860: : 2
"posix_user" : 1
"sqlite3.Warning" : 2
"Connection.__call__()" : 2
"Cursor.execute()" : 3
"UnicodEncodeError" : 1
"Cursor.executescript()" : 2
bpo-44581: : 1
21.2.3 : 1
57.4.0 : 1
bpo-44849: : 1
flag: : 6
"fcntl()" : 10
bpo-44605: : 1
@functools.total_ordering() : 1
wherein : 1
subscribed : 4
specialforms : 1
bpo-44839: : 1
"DataError" : 2
"OperationalError" : 6
bpo-44822: : 1
aggregators : 1
"strings" : 3
bpo-44801: : 1
ParamSpec : 4
Concatenate) : 1
bpo-44806: : 1
Non-protocol : 1
bpo-27275: : 1
"collections.OrderedDict.popitem()" : 1
"collections.OrderedDict.pop()" : 2
"__delitem__" : 4
bpo-44793: : 1
bpo-44784: : 1
DeprecationWarnings : 3
4.6.3) : 1
bpo-44667: : 1
"NL" : 5
bpo-44771: : 1
"importlib.simple" : 1
"TraversableResources" : 3
("path" : 1
"contents" : 3
".files()" : 1
shim : 3
bpo-44752: : 1
"rcompleter" : 1
bpo-44747: : 1
"sys._getframe" : 2
bpo-42378: : 1
"logging.FileHandler" : 4
*filemode* : 3
*atexit* : 1
bpo-44720: : 1
non-iterators : 1
dereferencing : 8
bpo-44704: : 1
"collections.abc.Set._hash()" : 1
"frozenset.__hash__()" : 1
bpo-44666: : 1
Hölzl : 1
bpo-44688: : 1
"sqlite3.Connection.create_collation()" : 1
bpo-44690: : 1
Adopt : 1
*binacii.a2b_base64*'s : 1
*base64.b64decode* : 1
bpo-42854: : 2
"_ssl" : 2
"_ssl._SSLSocket.write()" : 1
"_ssl._SSLSocket.read()" : 1
"len" : 9
bpo-44686: : 1
"unittest.mock._importer" : 1
"pkgutil.resolve_name" : 1
bpo-44353: : 2
"NewType.__call__" : 1
bpo-44682: : 1
*commands* : 3
bpo-44678: : 1
discontinuous : 1
*binascii.a2b_base64* : 2
bpo-40897: : 1
bpo-44638: : 1
zipp : 3
bpo-44648: : 1
bpo-44608: : 1
"_tkinter._flatten()" : 1
bpo-44594: : 1
flight : 1
bpo-42799: : 1
("functools.lru_cache()") : 1
256 : 19
32768 : 3
"fnmatch.fnmatch()" : 5
"fnmatch.fnmatchcase()" : 2
"fnmatch.filter()" : 1
bpo-41928: : 1
"os.path.sep" : 1
exist; : 5
bpo-44569: : 1
"StackSummary.format_frame()" : 1
re-implementing : 1
bpo-44566: : 1
@contextlib.contextmanager : 2
bpo-44558: : 2
bpo-41249: : 1
bpo-44554: : 1
"pdb.main()" : 1
bpo-34798: : 1
Break : 8
"pprint.PrettyPrinter" : 2
bpo-44539: : 1
recognizing : 6
JPEG : 3
JFIF : 2
Exif : 2
bpo-44461: : 1
"pdb"'s : 3
bpo-43625: : 1
"csv.Sniffer.has_header()" : 1
bpo-44516: : 1
21.1.3 : 1
bpo-42892: : 1
multipart : 20
"email.message.EmailMessage" : 2
bpo-44468: : 1
bpo-44491: : 1
authorizer : 6
"set_authorizer()" : 2
bpo-43977: : 4
"Py_TPFLAGS_MAPPING" : 7
"Py_TPFLAGS_SEQUENCE" : 7
bpo-44482: : 1
bpo-44466: : 1
bpo-44471: : 1
"contextlib.ExitStack.enter_context()" : 2
"contextlib.AsyncExitStack.enter_async_context()" : 2
bpo-44404: : 1
"tkinter"'s : 2
"after()" : 1
bpo-41546: : 1
"print") : 1
bpo-44458: : 1
"BUFFER_BLOCK_SIZE" : 1
lmza : 1
bpo-44464: : 1
flake8 : 3
bpo-44446: : 1
"traceback.FrameSummary" : 1
"bz2.BZ2File.write()" : 1
"lzma.LZMAFile.write()" : 1
bpo-44434: : 1
_thread.start_new_thread() : 1
PyThread_exit_thread() : 1
pthread_exit() : 1
dlopen() : 1
libgcc_s.so : 1
EMFILE : 1
error) : 6
bpo-42972: : 1
_thread.RLock : 1
bpo-44422: : 1
"threading.enumerate()" : 2
bpo-38291: : 2
typing.io : 1
typing.re : 1
bpo-37880: : 1
store_const : 1
append_const : 1
"const" : 8
bpo-44389: : 1
"ssl.OP_NO_TLSv1_3" : 1
bpo-27827: : 1
"pathlib.PureWindowsPath.is_reserved()" : 1
identifies : 29
bpo-44395: : 1
unixfrom : 1
bpo-34266: : 1
run/restart : 1
bpo-44362: : 1
bpo-44342: : 1
by-value : 2
by-name : 1
bpo-44356: : 1
data-type : 2
mixins : 4
bpo-44351: : 1
"parse_makefile()" : 1
"distutils.sysconfig" : 10
bpo-35800: : 2
"smtpd.MailmanProxy" : 2
bpo-44357: : 1
"math.cbrt()" : 1
bpo-44339: : 1
"math.pow(±0.0 : 1
-math.inf)" : 4
"math.pow" : 1
bpo-44242: : 1
"verify" : 6
bpo-44246: : 2
"Distribution.entry_points" : 1
("EntryPoints") : 1
"EntryPoints" : 6
list-based : 1
"list(dist.entry_points).sort()") : 1
"tuple(dist.entry_points)[0]") : 1
importlib.metadata.entry_points : 1
de-duplication : 1
PathDistribution : 1
~10x : 1
bpo-43858: : 1
"logging.getLevelNamesMapping()" : 1
bpo-44260: : 1
"random.Random" : 2
bpo-44254: : 1
light : 4
bpo-44258: : 1
Fraction's : 1
bpo-44235: : 1
bpo-38693: : 1
".format" : 1
bpo-33693: : 1
Importlib.metadata : 1
.format : 1
bpo-44241: : 1
Incorporate : 1
4.1: : 1
SimplePath : 1
bpo-43216: : 1
generator-based : 8
async/await : 18
"asyncio.coroutines.CoroWrapper" : 2
bpo-44210: : 1
importlib.metadata._meta.PackageMetadata : 1
bpo-43643: : 1
Declare : 5
readers.MultiplexedPath.name : 1
bpo-27334: : 1
(thus : 9
Luca : 2
Citi : 1
bpo-4928: : 1
Documented : 9
POSIX: : 1
NamedTemporaryFiles : 2
SIGKILL : 6
bpo-44154: : 1
bpo-33433: : 1
4291** : 2
Section : 75
2.5.5.2) : 1
"ipaddress.IPv6Address.is_private" : 1
bpo-44150: : 1
*weights* : 10
statistics.fmean() : 3
bpo-44142: : 1
loops) : 4
bpo-44145: : 1
"HMAC_Update" : 1
bpo-44095: : 1
"zipfile.Path" : 9
"zipfile.Path.stem" : 1
"zipfile.Path.suffixes" : 1
"zipfile.Path.suffix" : 1
bpo-44077: : 1
(DS) : 1
(DSCP) : 1
congestion : 1
(ECN) : 1
"socket.IP_RECVTOS" : 1
bpo-37788: : 1
bpo-38908: : 1
bpo-44098: : 1
"typing.List[P][int]" : 1
bpo-44089: : 1
"csv.Error" : 1
3.10) : 4
bpo-44081: : 1
bpo-44061: : 1
bpo-44059: : 1
SerenityOS : 1
bpo-36515: : 1
unaligned : 4
bpo-40465: : 2
bpo-44018: : 1
random.seed() : 5
bpo-38352: : 1
"IO" : 1
"BinaryIO" : 1
"TextIO" : 1
"Pattern" : 2
"typing.__all__" : 1
bpo-44002: : 1
"functool.lru_cache()" : 1
quoting : 32
rolling : 1
'90s : 1
"Quoted" : 1
3.14 : 3
bpo-43972: : 1
"http.server.SimpleHTTPRequestHandler" : 2
"301 : 1
(Moved : 3
Permanently)" : 1
"Content-Length: : 1
bpo-28528: : 1
"checkline()" : 1
bpo-43853: : 1
aggregates: : 1
UDFs : 1
bpo-43666: : 1
AIX: : 3
"Lib/_aix_support.get_platform()" : 1
WPAR : 2
fileset : 2
bos.rte : 1
builddate : 2
LPAR : 4
bos.mp64 : 1
ODM) : 1
(9988) : 1
completing : 9
bpo-43650: : 1
"shutil._unpack_zipfile()" : 1
Igor : 1
Bolshakov : 1
bpo-43612: : 1
"zlib.compress()" : 4
wbits : 1
deflate : 3
"zlib.compressobj" : 1
"gzip.compress" : 2
wbits=31 : 1
bpo-43392: : 1
"importlib._bootstrap._find_and_load()" : 1
two-step : 1
bpo-43318: : 1
bpo-43234: : 1
Prohibit : 7
non-"concurrent.futures.ThreadPoolExecutor" : 2
executors : 3
bpo-43232: : 1
disruptive : 1
"asyncio.trsock.TransportSocket" : 1
bpo-30077: : 1
aifc/sowt : 1
pseudo-compression : 1
bpo-42971: : 1
"errno.EQFULL" : 1
bpo-43086: : 1
"strict_mode" : 1
"scrict_mode" : 1
*a2b_base64* : 1
"valid : 1
content" : 1
bpo-43024: : 1
"traceback.print_exception()" : 4
"traceback.format_exception()" : 2
"traceback.format_exception_only()" : 3
bpo-33809: : 1
"traceback.TracebackException.print()" : 2
bpo-42862: : 1
utilizes : 2
optimisation : 1
bpo-41818: : 4
Soumendra : 1
Ganguly: : 1
termios.tcgetwinsize() : 1
termios.tcsetwinsize() : 1
bpo-40497: : 1
*check* : 9
bpo-37449: : 2
bpo-40956: : 2
bpo-41730: : 1
bpo-20684: : 1
"_signature_get_bound_param" : 1
bpo-41402: : 1
"email.message.EmailMessage.set_content()" : 1
bpo-32695: : 1
*preset* : 10
"tarfile.open()" : 7
bpo-41137: : 1
.pdbrc : 3
bpo-24391: : 1
"BoundedSemaphore" : 6
"Event" : 6
"Barrier" : 9
bpo-5846: : 1
3.13: : 30
"findTestCases()" : 1
"makeSuite()" : 1
"getTestCaseNames()" : 5
"unittest.TestLoader.loadTestsFromTestCase()" : 2
"unittest.TestLoader.getTestCaseNames()" : 2
bpo-40563: : 1
pathlike : 2
dbm/shelve : 1
Henry-Joseph : 1
Audéoud : 1
bpo-34990: : 1
Y2k38 : 1
2038 : 8
bpo-39549: : 1
Whereas : 1
reprlib.Repr : 3
“fillvalue” : 1
bpo-37022: : 1
"pp" : 1
bpo-38840: : 1
"test___all__" : 1
lacking : 6
bpo-39359: : 1
bpo-38741: : 1
"configparser": : 1
']' : 16
bpo-38415: : 1
"contextlib.asynccontextmanager()" : 1
"contextlib.contextmanager()" : 1
bpo-30256: : 2
BaseProxy : 2
"manager_owned" : 1
AutoProxy : 1
bpo-27513: : 1
"email.utils.getaddresses()" : 1
"email.header.Header" : 1
bpo-16379: : 1
bpo-26228: : 1
pty.spawn : 2
bpo-33349: : 1
lib2to3 : 22
bpo-29298: : 1
"dest" : 31
bpo-45216: : 1
bpo-45024: : 1
method*s : 3
bpo-44957: : 1
Promote : 1
604 : 2
bpo-16580: : 1
bpo-44903: : 1
othergui.rst : 1
"page : 1
frameworks" : 1
bpo-33479: : 2
"Architecture" : 1
"Threading : 1
model" : 2
bpo-36700: : 1
4648**; : 1
"security : 1
considerations" : 1
bpo-44740: : 1
"Web" : 1
"Internet" : 1
lowercase : 47
Associated : 1
Press : 2
Book : 3
bpo-44693: : 1
"pseudo-module" : 1
bpo-35183: : 1
os.path.splitext : 1
bpo-30511: : 1
reliance : 2
bpo-44561: : 1
hyperlinks : 3
Doc/distributing/index.rst: : 1
"Project : 1
structure" : 1
"Building : 1
project" : 1
"Uploading : 1
Index" : 1
bpo-44651: : 1
Delete : 54
"coercion" : 1
Doc/glossary.rst : 1
bpo-42958: : 1
"filecmp.cmp()" : 3
*shallow* : 4
bpo-44631: : 1
Refactored : 4
"_Environ" : 1
(os : 1
bpo-44613: : 1
bpo-44544: : 1
"textwrap.wrap()" : 2
"textwrap.fill()" : 1
"textwrap.shorten()" : 1
nav : 1
"TextWrap" : 1
navigation : 6
bpo-38062: : 1
bpo-40620: : 1
controlflow.rst : 1
interpreter-demo : 1
bpo-43066: : 1
docs: : 1
un-openable : 1
bpo-39452: : 1
Rewrote : 1
"Doc/library/__main__.rst" : 1
Broadened : 1
bpo-13814: : 1
statement?" : 1
bpo-27752: : 1
csv.Dialect : 2
bpo-44453: : 1
"sysconfig.get_path()" : 1
bpo-44392: : 1
"Py_GenericAlias" : 1
"Py_GenericAliasType" : 2
bpo-44322: : 1
bpo-42392: : 4
bpo-44195: : 1
"TraversableReader" : 1
bpo-41963: : 1
bpo-44072: : 1
numbers.Complex : 2
numbers.Integral : 2
bpo-43558: : 1
remark : 1
"__post_init__()" : 11
bpo-44025: : 1
bpo-41706: : 1
"__add__" : 3
bpo-41621: : 1
"default_factory" : 18
bpo-41576: : 1
bpo-21760: : 1
__file__ : 7
Furkan : 4
Onder : 3
bpo-39498: : 1
"Security : 1
Considerations" : 1
threadsafe : 8
_tkinter.c : 1
bpo-40173: : 1
"test.support.import_helper.import_fresh_module()" : 1
bpo-45280: : 1
bpo-45269: : 1
"markers" : 2
"c_make_encoder" : 1
bpo-45128: : 1
"test_multiprocessing_fork" : 1
"test_logging" : 1
bpo-45209: : 1
"UserWarning: : 1
resource_tracker" : 1
"_test_mu : 1
ltiprocessing._TestSharedMemory.test_shared_memory_cleaned_after_pr : 1
ocess_termination" : 1
bpo-45185: : 1
"TestEnumerations" : 1
bpo-45195: : 1
test_readline.test_nonascii(): : 1
bpo-45156: : 1
"create_autospec()" : 9
bpo-45125: : 1
"SharableList" : 1
"test_sysconfig.test_user_similar()" : 1
posix_user : 1
"platlib" : 1
bpo-45052: : 1
"WithProcessesTestSharedMemory.test_shared_memory_basics" : 1
"self.assertEqual(sms.size : 1
sms2.size)" : 1
unskipped : 1
alarm : 13
bpo-45042: : 1
"@hashlib_helper.requires_hashdigest" : 1
bpo-25130: : 1
bpo-45011: : 1
bpo-44949: : 1
test_readline: : 1
bpo-44891: : 1
bpo-44852: : 1
wholesale : 3
bpo-40928: : 1
Notify : 2
test_decimal : 2
"malloc : 1
region" : 1
spewed : 1
bpo-44734: : 1
bpo-44708: : 1
-w : 4
re-running : 2
bpo-42095: : 1
interop : 1
plists: : 4
plutil; : 1
bpo-44647: : 1
Unicode-valued : 2
PYTHONREGRTEST_UNICODE_GUARD=0 : 1
bpo-44515: : 1
refcounted : 1
bpo-44287: : 1
test_popen() : 1
test_windows_utils : 1
military : 1
grade : 7
battle-tested : 1
"test.support.SHORT_TIMEOUT" : 1
seconds: : 3
bpo-44451: : 1
Reset : 23
"test.test_importl : 1
ib.test_metadata_api.APITests.test_entry_points_by_index" : 1
"DeprecationWarnings" : 1
bpo-44363: : 1
bpo-44364: : 1
"math.sqrt()" : 1
bpo-43921: : 2
test_ssl.test_wrong_cert_tls13(): : 1
"suppress_ragged_eofs=False" : 1
"ssl.SSLEOFError" : 1
test_pha_required_nocert() : 1
test_ssl: : 2
bpo-44131: : 1
test_frozenmain : 1
test_embed : 2
bpo-31904: : 32
test_file_not_exists() : 1
bpo-42083: : 1
"PyStructSequence_NewType" : 1
bpo-35753: : 1
unwrappable : 1
"AutoProxy[Queue]" : 1
"ListProxy" : 1
"DictProxy" : 1
bpo-45220: : 1
previews : 1
"DefaultWindowsSDKVersion" : 1
frozen_modules=off" : 1
commandline : 2
bpo-45188: : 1
bpo-45163: : 1
Haiku : 1
bpo-45067: : 1
extended_color_content : 1
(https://invisible-island.net/ncurses/NEWS.html#index-t20170401) : 1
ncurses-devel : 1
20170401 : 1
bpo-45019: : 1
bpo-44340: : 1
thin : 11
lto : 1
lto=thin/full : 1
Holman : 2
bpo-44535: : 1
bpo-43298: : 1
bpo-44381: : 1
"EnableControlFlowGuard" : 1
CFG : 1
bpo-41282: : 5
bpo-45375: : 1
unnormalised : 3
bpo-45022: : 1
bpo-45007: : 2
1.1.1l : 2
bpo-44848: : 2
3.36.0 : 2
bpo-44572: : 1
bpo-44582: : 1
Accelerate : 1
bpo-41299: : 1
jitter : 1
"threading.Condition.wait()" : 1
bpo-42686: : 1
bpo-40263: : 1
follow-on : 1
https://bugs.python.org/issue26903 : 1
off-by-one : 5
bpo-34602: : 3
undefined-behavior-sanitizer : 1
--with-pydebug" : 1
quadrupled : 1
bpo-44689: : 1
Big : 4
Sur : 4
"find_library" : 1
build's : 1
'pythonX.Y' : 1
distutils's : 1
bpo-43109: : 1
--with-lto : 5
bpo-34932: : 1
socket.TCP_KEEPALIVE : 1
Shane : 3
Harvey : 3
exit/quit : 1
<Ctrl-Z : 1
Return> : 1
bpo-45193: : 1
boxes : 13
bpo-40128: : 1
Mostly : 4
update_idletask : 1
bpo-33962: : 1
bpo-40468: : 1
Shell/ED : 1
bpo-41611: : 2
"AutoCompleteWindow.winconfig_event()" : 1
bpo-44010: : 1
bpo-44026: : 1
Paine : 1
bpo-44786: : 1
c-analyzer : 1
bpo-44967: : 1
bpo-44978: : 1
bpo-43425: : 1
'test2to3' : 1
bpo-44074: : 1
patchcheck : 3
'master') : 1
bpo-20291: : 1
PyThread_acquire_lock_timed() : 2
clamps : 1
aborting : 11
bpo-44687: : 1
"BufferedReader.peek()" : 1
bpo-45116: : 1
"Py_ALWAYS_INLINE" : 2
bpo-45094: : 1
"Py_NO_INLINE" : 1
"Py_DECREF(Py_True);" : 1
"Py_DECREF(Py_False);" : 1
bpo-42035: : 2
"PyType_GetQualName()" : 3
bpo-41103: : 2
bpo-44751: : 1
"crypt.h" : 1
bpo-42747: : 1
"Py_TPFLAGS_HAVE_VERSION_TAG" : 2
"Py_TPFLAGS_HAVE_AM_SEND" : 1
"co_qualname" : 4
bpo-44441: : 1
"PyImport_ExtendInittab()" : 7
bpo-39947: : 7
_PyTrash_deposit_object() : 1
_PyTrash_destroy_chain() : 1
_PyTrash_thread_deposit_object() : 1
_PyTrash_thread_destroy_chain() : 1
"_tstate->trash_delete_nesting" : 1
bpo-40939: : 5
"PyParser_*" : 1
bpo-43795: : 5
"_frame" : 1
non-existing : 4
"_node" : 1
bpo-44378: : 1
bpo-39573: : 9
"Py_SET_TYPE()" : 4
"Py_SET_SIZE()" : 5
bpo-44263: : 1
("PyTypeObject.tp_traverse") : 2
bpo-44113: : 1
initialization: : 3
"PySys_AddXOption()" : 5
"PySys_HasWarnOptions()" : 3
"Py_SetPythonHome()" : 8
"_Py_SetProgramFullPath()" : 2
587**) : 2
bpo-44094: : 1
"PyErr_SetFromErrnoWithUnicodeFilename()" : 1
"PyErr_SetFromWindowsErrWithUnicodeFilename()" : 1
"PyErr_SetExcFromWindowsErrWithUnicodeFilename()" : 1
bpo-44029: : 1
"PyUnicode_Encode" : 1
"PyUnicode_EncodeUTF7" : 1
"PyUnicode_EncodeUTF8" : 1
"PyUnicode_EncodeUTF16" : 1
"PyUnicode_EncodeUTF32" : 1
"PyUnicode_EncodeLatin1" : 1
"PyUnicode_EncodeMBCS" : 1
"PyUnicode_EncodeDecimal" : 1
"PyUnicode_EncodeRawUnicodeEscape" : 1
"PyUnicode_EncodeCharmap" : 1
"PyUnicode_EncodeUnicodeEscape" : 1
"PyUnicode_TransformDecimalToASCII" : 1
"PyUnicode_TranslateCharmap" : 1
"PyUnicodeEncodeError_Create" : 1
"PyUnicodeTranslateError_Create" : 1
"PyType_GetName()" : 3
2021-05-03* : 1
bpo-43434: : 1
"sqlite3.connect" : 2
"sqlite3.connect/handle" : 3
bpo-43998: : 1
bpo-43882: : 1
WHATWG : 3
"urllib.parse()" : 2
bpo-43472: : 1
interpreter-level : 1
"cpython.PyInterpreterState_New" : 2
"_xxsubinterpreters" : 2
bpo-43362: : 1
_sha3 : 1
3.10.0a1 : 1
bpo-43762: : 1
"sqlite3.connect/handle()" : 1
"sqlite3.Connection.load_extension()" : 2
bpo-43756: : 1
"glob.glob/2" : 3
"glob.glob()" : 5
"glob.iglob()" : 2
bpo-36384: : 1
bpo-43075: : 1
Denial : 1
Service : 3
(ReDoS) : 1
"urllib.request.AbstractBasicAuthHandler" : 1
ReDoS-vulnerable : 1
worst-case : 2
ReDoS : 2
bpo-42800: : 1
fired : 1
frame.f_code : 1
traceback.tb_frame : 1
code/frame : 1
bpo-37363: : 3
"tp_flags" : 10
Avoids : 8
bpo-43892: : 2
bpo-43933: : 2
frame.f_lineno : 3
kweyword : 1
"__exit__" : 7
f_lineno : 8
bpo-43963: : 1
"_signal" : 2
bpo-42739: : 1
sentinels : 1
"PyLineTable_InitAddressRange" : 1
bpo-43901: : 1
__dict__ : 9
("MatchValue" : 1
"MatchSingleton" : 1
"MatchSequence" : 1
"MatchStar" : 2
"MatchMapping" : 1
"MatchClass") : 1
"MatchAs" : 1
"MatchOr" : 1
bpo-42725: : 1
"await"/"yield"/"yield : 1
bpo-43754: : 1
634**) : 2
*entire* : 1
bpo-42737: : 1
bpo-43914: : 1
consistutes : 1
bpo-38605: : 2
Steering : 3
Council : 3
postpone : 3
decision: : 1
https://mail.python.org/archives/list/python- : 1
dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/ : 1
bpo-43475: : 1
pile-ups : 1
bpo-43859: : 1
bpo-41323: : 2
reuses : 3
bpo-43846: : 1
bpo-38530: : 2
bpo-43823: : 1
bpo-43798: : 1
"ast.alias" : 1
col_offset : 15
bpo-43797: : 1
bpo-43682: : 2
bpo-43751: : 1
"anext(ait : 1
bpo-42128: : 3
GEN_START : 1
Marks : 3
bpo-43105: : 1
Importlib : 2
bpo-42609: : 1
validator : 7
bpo-44015: : 1
@dataclass() : 2
bpo-25478: : 1
*total()* : 1
collections.Counter() : 3
bpo-43733: : 1
"netrc.netrc" : 2
bpo-43979: : 1
Christoph : 5
Zwerschke : 1
bpo-43993: : 1
21.1.1 : 1
bpo-43957: : 1
non-member : 2
check; : 1
members' : 2
bpo-42904: : 2
bpo-43945: : 1
mixin : 18
member's : 8
bpo-41139: : 1
bpo-43937: : 1
bpo-43930: : 1
56.0.0 : 1
bpo-43907: : 1
unpickle : 14
bpo-43926: : 1
"Description" : 2
".json" : 1
566 : 1
JSON-compatible : 2
"importlib_metadata : 1
4.0" : 2
bpo-43920: : 1
3.0.0: : 4
cadata : 1
bpo-43607: : 1
"\\?\" : 2
bpo-43817: : 1
"inspect.from_callable()" : 2
"inspect.from_function()" : 1
bpo-43284: : 1
platform.win32_ver : 2
sys.getwindowsversion().platform_version : 1
kernel32.dll : 3
_syscmd_ver : 1
"SSL_read_ex" : 2
"SSL_write_ex" : 2
GB : 5
zero-length : 15
violation : 13
bpo-42333: : 2
bpo-43880: : 1
OP_NO_SSL/TLS* : 1
bpo-41559: : 2
"collections.abc.Callable"'s : 2
"GenericAlias") : 1
"list[P]") : 1
bpo-43867: : 1
"Server.serve_client()" : 1
(EOF) : 3
bpo-40443: : 1
imports: : 6
bpo-43820: : 1
bpo-43787: : 1
bpo-43680: : 2
io.OpenWrapper : 1
_pyio.OpenWrapper: : 1
io.open : 1
_pyio.open : 3
builtins.open : 1
OpenWrapper : 1
_io.open : 1
_pyio.open() : 1
builtins.open() : 1
io.open() : 2
"_pyio.open()" : 2
"_pyio.OpenWrapper()" : 1
bpo-41515: : 1
synthetic : 3
bpo-43776: : 1
bpo-42248: : 1
"_missing__" : 1
bpo-43744: : 1
bpo-43772: : 1
"TypeVar.__ror__" : 1
bpo-43764: : 2
match_args : 1
__match_args__ : 1
bpo-43799: : 1
"OPENSSL_API_COMPAT" : 1
mocked : 10
"autospec=True" : 8
"create_autospec(...)" : 1
Mock-derived : 1
"isinstance()") : 4
bpo-43794: : 1
"ssl.OP_IGNORE_UNEXPECTED_EOF" : 1
(OpenSSL : 2
3.0.0) : 1
bpo-43785: : 1
BZ2File : 3
bpo-43789: : 1
signaled : 9
bpo-43788: : 1
version-specific : 8
"make_ssl_data.py" : 1
bpo-43766: : 1
bpo-25264: : 1
bpo-43780: : 1
mtime-based : 1
Flagged : 4
"entry_points()" : 3
"P.args" : 5
"P.kwargs" : 5
bpo-43731: : 1
"logging.fileConfig()" : 1
bpo-43712: : 1
bpo-38659: : 1
"simple_enum" : 2
"test_simple_enum" : 1
bpo-43752: : 1
zero-sized : 1
"b""" : 4
24723 : 1
bpo-43655: : 2
bpo-43723: : 1
replaced: : 1
"currentThread" : 2
"activeCount" : 2
"Condition.notifyAll" : 1
"Event.isSet" : 1
"Thread.setName" : 1
"thread.getName" : 1
"Thread.isDaemon" : 1
"Thread.setDaemon" : 1
bpo-2135: : 1
find_module() : 3
find_loader() : 3
bpo-43534: : 1
"turtle.textinput()" : 1
"turtle.numinput()" : 1
transient : 4
behalf : 3
canvas : 18
bpo-43532: : 1
bpo-43522: : 1
"hostname_checks_common_name" : 1
hostflags : 1
*struct : 2
SSL_CTX* : 1
SSL* : 1
bpo-8978: : 1
bpo-42967: : 2
"separator" : 1
"urllib.parse.parse_qs" : 1
bpo-43296: : 1
handling: : 7
"sqlite3_value_blob()" : 1
"SQLITE_NOMEM" : 2
bpo-43312: : 1
"user" : 15
bpo-43265: : 1
"sqlite3.Connection.backup()" : 2
<database : 1
name>" : 1
"SQL : 1
"distutils.command.install" : 3
bpo-43176: : 1
bpo-43080: : 1
bpo-39950: : 1
bpo-42269: : 1
bpo-39529: : 1
"wrap_future()" : 1
"gather()" : 6
"shield()" : 5
"as_completed()" : 8
"StreamReaderProtocol" : 1
bpo-18369: : 1
PrivateKey : 1
bring : 4
bpo-31870: : 1
bpo-36470: : 1
"InitVar"s : 1
bpo-40849: : 1
X509_V_FLAG_PARTIAL_CHAIN : 1
bpo-35114: : 1
"ssl.RAND_status()" : 1
documented) : 2
bpo-39906: : 1
bpo-39899: : 1
basename : 8
username : 21
"pathlib.Path.expanduser()" : 1
"home()" : 3
""USERNAME"" : 1
bpo-36076: : 1
bpo-38490: : 1
Covariance : 2
correlation : 4
bpo-33731: : 1
locale.localize() : 1
bpo-32745: : 1
ctypes' : 2
"ctypes.c_wchar_p" : 1
bpo-43987: : 1
"Annotations : 1
Practices" : 1
bpo-43959: : 1
PyContextVar : 2
bpo-43938: : 1
FrozenInstanceError : 1
bpo-43778: : 1
glossary_search : 1
_static/ : 1
sub-directory : 1
bpo-43755: : 1
bpo-43739: : 1
Doc/extending/extending.rst : 1
pmodule : 1
bpo-43961: : 1
test_logging.test_namer_rotator_inheritance() : 1
bpo-43842: : 1
test_logging : 2
(socket) : 1
asyncore.loop() : 3
bpo-43843: : 1
ENV_CHANGED : 1
(altered : 1
environment) : 9
bpo-43811: : 1
ccache : 1
bpo-43791: : 1
TLSV1_ALERT_INTERNAL_ERROR : 1
bpo-43567: : 1
(AST/tokens/opcodes/keywords) : 1
bpo-43669: : 1
bpo-35306: : 1
"os.startfile()" : 1
bpo-43538: : 1
"pathlib.Path.exists()" : 1
bpo-38822: : 1
"os.path.exists()" : 2
"os.path.isdir()" : 3
bpo-26227: : 3
"socket.gethostbyaddr()" : 1
"socket.gethostbyname_ex()" : 1
bpo-40432: : 1
bpo-43745: : 1
1.1.1k : 3
mislabelled : 1
1.1.1i : 3
bpo-43492: : 2
3.35.5 : 1
bpo-30555: : 1
"WindowsConsoleIO" : 2
bpo-42119: : 1
Narrow : 1
SDKs : 1
"/System/Library" : 1
"/System/IOSSupport" : 1
"/System" : 2
10.15+ : 1
"/Library" : 1
bpo-43568: : 1
MACOSX_DEPLOYMENT_TARGET : 1
bpo-44009: : 1
"python3.x-intel64" : 1
forcing : 5
universal2 : 3
Rosetta : 1
Intel-64 : 1
3.35.4 : 1
bpo-42235: : 1
"Mac/BuildScript/build-installer.py" : 1
enable-optimizations" : 1
"--with-lto" : 2
10.15 : 1
bpo-37903: : 2
bpo-43981: : 1
test_sidebar : 1
test_squeezer : 1
bpo-37892: : 1
Indent : 4
side-bar : 1
bpo-43916: : 1
bpo-43774: : 1
"PYMALLOC_DEBUG" : 1
bpo-43962: : 1
_PyInterpreterState_IDIncref() : 1
_PyInterpreterState_IDInitref() : 1
id_refcount : 2
_xxsubinterpreters.get_current() : 1
_xxsubinterpreters.InterpreterID : 1
bpo-28254: : 1
collector: : 4
Introduce : 9
("Py_LIMITED_API") : 1
bpo-43868: : 1
652**) : 1
bpo-43753: : 1
2021-04-05* : 1
bpo-42988: : 1
CVE-2021-3426: : 1
"getfile" : 1
abused : 2
(directory : 2
vulnerability) : 1
Schwörer : 1
bpo-43285: : 1
trusts : 1
PASV : 1
"trust_server_pasv_ipv4_address" : 1
bpo-43439: : 1
bpo-27129: : 2
bpo-43672: : 1
ImportWarning : 6
bpo-43660: : 1
EXTENDED_ARG : 2
bpo-40645: : 4
"_hashopenssl" : 1
bpo-42134: : 1
bpo-41064: : 1
('**') : 1
bpo-43575: : 1
bpo-42137: : 1
"ModuleType.__repr__" : 1
bpo-43452: : 1
bpo-43555: : 1
bpo-43517: : 1
misdetection : 1
pkg.mod : 1
attr" : 1
positives : 5
bpo-43497: : 1
SyntaxWarnings : 2
python3.7 : 2
bpo-39316: : 1
bpo-35883: : 1
[U+0000; : 1
U+10ffff] : 1
bpo-43410: : 1
bpo-43406: : 1
"PyErr_CheckSignals" : 1
"structsequence" : 2
bpo-43390: : 1
"SA_ONSTACK" : 1
"PyOS_setsig" : 1
VM's : 1
friendlier : 1
in-process : 1
Golang's : 1
cgo) : 1
stacks : 3
norm : 3
"sigaltstack()" : 2
sigaltstack : 4
bpo-43287: : 1
bpo-37448: : 1
in-use : 1
address_in_range() : 3
Boosting : 1
ultra-fast : 1
unsanitary : 1
_Py_NO_SANITIZE_ADDRESS : 1
_Py_NO_SANITIZE_THREAD : 1
_Py_NO_SANITIZE_MEMORY : 1
"-DWITH_PYMALLOC_RADIX_TREE=0" : 1
Co-authored-by: : 1
<tim.peters@gmail.com> : 1
bpo-29988: : 1
Makes : 7
bpo-43720: : 1
imp : 5
pkgutil : 3
importlib.util : 6
bpo-43433: : 1
bpo-31956: : 1
Enum: : 4
brackets) : 2
bpo-42136: : 1
module_repr() : 1
bpo-35930: : 1
"future" : 1
bpo-41369: : 1
bpo-43422: : 1
bpo-41324 : 1
bpo-43577: : 1
"ssl.SSLContext.sni_callback()" : 1
bpo-43571: : 1
IPPROTO_MPTCP : 2
bpo-43542: : 1
"image/heic" : 1
"image/heif" : 1
digestmod : 3
bpo-43510: : 1
597**: : 1
bpo-43521: : 1
"ast.unparse" : 1
bpo-42914: : 1
"1_000_000" : 1
"1000000") : 1
bpo-41361: : 1
"rotate()" : 7
bpo-43423: : 1
"subprocess.communicate()" : 1
bpo-27820: : 1
smtplib.SMTP : 1
AUTH : 5
LOGIN : 4
initial_response_ok=False : 1
SMTP.auth_login : 1
_always_ : 1
non-compliant : 3
bpo-43445: : 1
""_frozen_importlib"" : 1
""_frozen_importlib_external"" : 1
bpo-43245: : 1
bpo-29982: : 1
*ignore_cleanup_errors* : 3
"tempfile.TemporaryDirectory()" : 1
"cleanup()" : 3
bpo-43428: : 1
"entry_points" : 5
Introduces : 1
packages_distributions : 1
bpo-43332: : 1
"set_tunnel()" : 3
bpo-43420: : 1
arithmetics : 1
Kirpichev : 2
bpo-43356: : 1
bpo-43399: : 1
"ElementTree.extend" : 1
bpo-43369: : 1
"sqlite3_column_text()" : 1
"sqlite3_column_blob()" : 1
bpo-43368: : 1
24562 : 1
bytestring : 27
fetched : 16
"b''" : 14
Mariusz : 1
Felisiak : 1
stacklevel : 2
distutils" : 1
bpo-42129: : 1
5.0.3 : 1
bpo-43295: : 1
"datetime.datetime.strptime()" : 3
"'z'" : 5
"%z" : 9
bpo-43125: : 1
base64mime.body_encode : 1
bpo-43084: : 1
"curses.window.enclose()" : 1
bpo-42994: : 1
opus : 1
AAC : 1
3gpp : 1
3gpp2 : 1
bpo-14678: : 1
invalidate_caches() : 6
zipimport.zipimporter : 1
importlib.invalidate_caches() : 2
bpo-42782: : 1
Enum's : 3
*EnumClass.MemberName* : 1
*MemberName* : 1
"RegexFlag.IGNORECASE" : 1
*module.name* : 1
"re.IGNORECASE" : 3
bpo-26053: : 1
bpo-24160: : 1
persist : 8
bpo-40701: : 1
"tempfile.tempdir" : 1
"tempfile.gettempdir()" : 1
"tempfile.gettempdirb()" : 1
bpo-39342: : 1
"X509_V_FLAG_ALLOW_PROXY_CERTS" : 1
"VERIFY_ALLOW_PROXY_CERTS" : 1
https://www.openssl.org/docs/man1.1.1/man7/proxy- : 1
certificates.html : 1
bpo-31861: : 1
builtins.aiter : 1
builtins.anext : 1
(@jab) : 1
(@lordmauve) : 1
(@justin39) : 1
bpo-43199: : 1
goto?" : 1
bpo-43407: : 1
"time.monotonic()" : 6
bpo-43354: : 1
"Fault.faultCode"; : 1
bpo-41933: : 1
wording : 5
bpo-37945: : 1
test_getsetlocale_issue1813() : 1
test_locale: : 1
"setlocale()" : 10
bpo-41561: : 2
Ubuntu's : 2
bpo-43179: : 1
ALIGNOF_X : 1
SIZEOF_X : 1
alignment-related : 1
Clarke : 1
bpo-43631: : 1
bpo-43617: : 1
configure.ac: : 1
autoconf- : 1
M4 : 2
bpo-43466: : 1
"--with-openssl- : 1
rpath" : 1
bpo-43372: : 1
"_freeze_importlib" : 1
"__hello__" : 2
PYTHON_FOR_REGEN : 1
bpo-42246 : 1
877df851 : 1
test_frozentable : 1
bpo-43440: : 1
"R*Tree" : 1
bpo-42225: : 1
colored : 1
(non-ascii) : 1
bpo-43688: : 1
bpo-43244: : 5
bpo-43541: : 1
regression: : 1
2021-03-01* : 1
poisoning : 1
bpo-43321: : 1
"PyArg_Parse*()" : 3
bpo-36346: : 4
bpo-43277: : 1
bpo-42990: : 3
bpo-43121: : 1
bpo-42819: : 1
"readline": : 1
bracketed : 4
paste : 8
inputrc : 1
8.1) : 1
"readline.read_init_file()" : 1
""\x1b[?2004h"" : 1
"readline.parse_and_bind("set : 1
enable- : 1
bracketed-paste : 1
on")" : 1
bpo-42808: : 1
"type(object)" : 1
bpo-42217: : 1
merges : 3
co_code : 2
co_linetable : 1
(structural : 1
bpo-40692: : 1
"multiprocess.synchronize()" : 1
bpo-38302: : 1
bpo-43316: : 1
gzip" : 1
bpo-43317: : 1
io.DEFAULT_BUFFER_SIZE : 3
bpo-43146: : 2
single-arg : 1
bpo-43260: : 1
TextIOWrapper : 3
bpo-43258: : 1
needless : 1
bpo-43251: : 1
"sqlite3_column_name()" : 1
23838 : 1
bpo-43172: : 1
libedit : 4
irreconcilable : 1
"readline.get_begidx()" : 1
"readline.get_endidx()" : 1
libreadline : 2
bpo-43163: : 1
bpo-43162: : 1
bpo-43102: : 1
__new__ : 11
__builtins__ : 5
bpo-43106: : 1
bpo-42960: : 1
"resource.RLIMIT_KQUEUES" : 1
bpo-42151: : 1
("_elementree") : 1
"specified_attributes=1") : 1
bpo-29753: : 1
bitfields : 3
shrank : 1
bpo-27646: : 1
'yield : 3
<expr>' : 1
"will : 3
"3.12" : 1
bpo-43288: : 1
test_importlib : 4
bpo-43174: : 1
"/utf-8" : 1
bpo-43103: : 1
"--without-static-libpython" : 1
bpo-13501: : 1
*libedit* : 1
*readline* : 5
"--with-readline=editline" : 1
bpo-42603: : 1
"/{System/,}Library/Frameworks" : 1
"--with-tcltk-*" : 1
bpo-39448: : 1
"regen-frozen" : 1
bpo-43155: : 1
"PyCMethod_New()" : 2
"python3.lib" : 1
bpo-41837: : 3
1.1.1j : 1
bpo-43283: : 1
pre-formatting : 1
bpo-43278: : 1
bpo-43270: : 1
"_PyErr_OCCURRED()" : 1
macro: : 2
odictobject.h : 1
parser_interface.h : 1
picklebufobject.h : 1
pydebug.h : 1
pyfpe.h : 1
cpython/ : 2
Python.h: : 2
pyarena.h : 1
pyctype.h : 1
pytime.h : 1
"PyTypeObject.tp_name" : 2
bpo-43239: : 1
"PyCFunction_New()" : 2
"-fvisibility=hidden" : 3
"PyIter_Check()" : 5
"PyTypeObject.tp_iternext" : 1
"PyDescr_IsData()" : 1
"PyTypeObject.tp_descr_set" : 1
bpo-43181: : 1
2021-02-02* : 1
bpo-42938: : 1
"ctypes.c_double" : 1
"ctypes.c_longdouble" : 1
"PyEval_" : 1
"_PyEval_Vector" : 1
"_PyEval_EvalCodeWithName" : 1
"PyEval_EvalCodeEx" : 1
bpo-38631: : 2
bpo-42997: : 1
bpo-43017: : 1
un- : 1
parenthesised : 5
bpo-42986: : 1
bpo-40176: : 1
bpo-42927: : 1
bpo-42864: : 1
bpo-42924: : 1
repetition : 23
reassigning : 1
bpo-42882: : 1
"_PyUnicode_FromId()" : 2
(_Py_IDENTIFIER(var) : 1
times: : 2
"_PyRuntime.unicode_ids.next_index" : 1
bpo-42827: : 1
bpo-42823: : 1
frame.f_trace : 3
bpo-37324: : 1
bpo-41994: : 1
bpo-27772: : 1
"'0'" : 14
bpo-43108: : 1
bpo-43077: : 1
21.0.1 : 1
52.0.0 : 1
bpo-43014: : 1
20-30% : 2
bpo-42323: : 1
"math.nextafter()" : 2
bpo-42955: : 1
bpo-42944: : 1
"random.Random.sample" : 1
"counts" : 1
bpo-42934: : 1
"TracebackException"'s : 2
param : 17
bpo-42931: : 1
"randbytes()" : 3
"random.__all__" : 1
bpo-38250: : 1
Multi-bit : 1
aliases; : 3
bpo-42877: : 1
"traceback.TracebackException" : 1
"TracebackException.format()" : 1
"TracebackException.format_exception_only()" : 1
bpo-42923: : 1
bpo-42848: : 1
bpo-42901: : 1
"EnumMeta.__new__" : 1
"_proto_member.__set_name__" : 1
bpo-42780: : 1
os.set_inheritable() : 3
O_PATH : 1
bpo-42866: : 1
"getcodec()" : 1
bpo-42846: : 1
(_codecs_cn : 1
_codecs_hk : 1
_codecs_iso2022 : 1
_codecs_jp : 1
_codecs_kr : 1
_codecs_tw) : 1
489**) : 52
bpo-42851: : 1
__init_subclass__ : 6
bpo-42834: : 1
bpo-41748: : 1
HTMLParser : 5
Dubost : 2
bpo-40810: : 2
bpo-1635741: : 65
_multibytecodec : 1
(CJK : 1
codecs) : 1
bpo-42802: : 1
bpo-24464: : 1
bpo-42384: : 1
populate : 18
sys.path[0] : 7
bpo-42383: : 1
pdb: : 1
bpo-42005: : 1
bpo-41604: : 1
user_ptr : 1
set_panel_userptr : 1
bpo-41149: : 1
"Threading.thread" : 1
Stratford : 1
bpo-38307: : 1
'end_lineno' : 1
'lineno' : 1
bpo-39273: : 1
bpo-33289: : 1
bpo-40304: : 1
type(name : 2
Boris : 1
Verkhovskiy : 1
bpo-42811: : 1
importlib.utils.resolve_name() : 1
__spec__.parent : 2
(Thanks : 1
Yair : 1
Frid.) : 1
bpo-40823: : 1
"unittest.TestLoader().loadTestsFromTestCase()" : 1
"unittest.makeSuite()" : 2
"CheckTraceCallbackContent" : 1
pre : 1
bpo-43031: : 1
"--timeout=$(TESTTIMEOUT)" : 1
"./python : 3
--pgo" : 1
bpo-36143: : 2
"regen-keyword" : 1
bpo-42874: : 1
grep : 17
tzpath : 1
wr-cc : 1
add_cross_compiling_paths() : 1
bpo-42856: : 1
"--with-wheel-pkg-dir=PATH" : 1
bpo-42584: : 2
3.34.0 : 2
bpo-42504: : 2
sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET') : 1
bpo-43008: : 1
2-process : 1
bpo-33065: : 1
__repr__ : 7
bpo-23544: : 1
Debug=>Stack : 1
Viewer : 4
bpo-32631: : 1
zzdummy : 4
bpo-42979: : 1
assertions) : 1
"sq_length" : 4
("__len__()" : 2
bpo-43030: : 1
"Py_UNICODE_ISSPACE()" : 1
2021-01-04* : 1
bpo-42814: : 1
"Objects/genericaliasobject.c" : 1
bpo-42806: : 1
bpo-40631: : 1
bpo-27794: : 1
writes/deletes : 1
bpo-42745: : 1
bpo-42246: : 4
Jumps : 1
bpo-32381: : 3
latin1") : 1
bpo-30858: : 1
bpo-42615: : 1
bpo-42639: : 3
"PyRun_SimpleFileExFlags()" : 6
bpo-42195: : 1
"typing.Callable"'s : 1
"Callable[... : 5
T]" : 1
"Callable"s : 1
"argtypes" : 13
"Callable[[argtypes] : 1
resulttype]" : 1
bpo-40137: : 1
bpo-40077: : 7
establish : 10
bpo-42008: : 1
_random.Random() : 1
seeding : 5
bpo-40521: : 4
bpo-39465: : 2
(interned : 1
UTF-8) : 5
bpo-42257: : 1
platform.libc_ver() : 1
bpo-42772: : 1
randrange() : 1
bpo-42759: : 1
"tkinter.font.Font" : 1
bpo-42756: : 1
LMTP : 6
Unix-domain : 1
bpo-23328: : 1
_PROXY : 1
envars : 1
bpo-42740: : 1
bpo-42655: : 1
*extra_groups* : 3
setgroups() : 3
bpo-42727: : 1
"EnumMeta.__prepare__" : 1
bpo-38308: : 1
*statistics.harmonic_mean()* : 1
bpo-42721: : 1
("tkinter.simpledialog") : 1
("tkinter.messagebox") : 1
("tkinter.colorchooser") : 1
*master* : 5
*parent* : 7
"NoDefaultRoot()" : 1
temporal : 1
bpo-25246: : 1
"collections.deque.remove()" : 1
bpo-35728: : 1
"tkinter.font.nametofont()" : 1
bpo-15303: : 1
bpo-42681: : 1
bpo-42685: : 1
"tkinter.simpledialog.askinteger()") : 1
centered : 8
center : 6
bpo-9694: : 1
bpo-37961: : 2
"tracemalloc.Traceback.__repr__()" : 1
(regressed : 1
bpo-42630: : 1
"atexit._run_exitfuncs()" : 1
"sys.unraisablehook" : 3
bpo-42644: : 1
"logging.disable" : 1
"loging.setLevel") : 1
bpo-36541: : 2
lib2to3.pgen2 : 1
PEP-570 : 1
bpo-42382: : 1
"importlib.metadata": : 1
"EntryPoint" : 4
".dist" : 1
normalization : 17
"metadata()" : 3
"PackageMetadata" : 3
".get_all()" : 1
Synced : 1
bpo-41877: : 3
misspellings : 4
autospect : 1
auto_spec : 1
set_spec : 1
bpo-39717: : 1
[tarfile] : 1
e" : 2
suspected : 1
misspelled : 6
misspelling : 2
recognised : 10
612**: : 2
bpo-42385: : 1
StrEnum: : 1
_generate_next_value_ : 2
THREAD_STACK_SIZE : 2
bpo-34750: : 1
"_EnumDict.update()" : 1
bpo-42517: : 1
bpo-42678: : 1
"Enum": : 2
bpo-28964: : 1
bpo-42470: : 1
"random.sample()" : 2
"posixpath.expanduser()" : 2
bpo-42388: : 1
subprocess.check_output(... : 1
input=None) : 1
text=True : 3
universal_newlines=True : 1
bpo-34463: : 1
("traceback" : 1
bpo-42393: : 1
Silent : 5
Harmonized : 1
"operator.index()" : 3
Storchaka.) : 2
bpo-42163: : 1
_replace : 2
bpo-42090: : 1
"zipfile.Path.joinpath" : 1
"pathlib.Path.joinpath" : 1
_csv : 3
bpo-42059: : 1
call-style : 1
"total" : 5
"__required_keys__" : 4
"__optional_keys__" : 4
bpo-41960: : 1
"globalns" : 5
"localns" : 3
bpo-41907: : 1
bpo-41891: : 1
asyncio.wait_for : 2
bpo-24792: : 1
"zipimporter" : 3
bpo-41462: : 1
"os.set_blocking()" : 1
bpo-40219: : 1
Lowered : 1
"tkinter.ttk.LabeledScale" : 1
bpo-37193: : 1
bpo-39068: : 1
Brandon : 1
Stansbury : 1
bpo-17140: : 1
"multiprocessing.pool.ThreadPool" : 1
bpo-34398: : 1
Prominently : 1
listings : 6
bpo-42794: : 1
test_nntplib : 1
news.aioe.org : 1
bpo-42641: : 1
Enhance : 11
"test_select.test_select()": : 1
_test_all_chown_common() : 1
bpo-42199: : 1
assertNotInBytecode : 1
bpo-41443: : 1
test_posix.py : 1
os.popen : 2
bpo-41439: : 1
test_ssl : 12
test_uuid : 2
bpo-42692: : 1
__builtin_available : 1
bpo-27640: : 1
bpo-42604: : 1
freeBSD : 1
".cpython-310d.so" : 1
".so") : 2
"SOABI" : 1
bpo-42598: : 1
libpython3.so : 1
bpo-29076: : 1
bpo-42361: : 1
(rc2 : 1
release) : 1
bpo-42726: : 1
gdb/libpython.py : 1
bpo-42613: : 1
"freeze.py" : 1
prope : 1
bpo-42591: : 1
"_Py_fopen()" : 1
"_Py_wfopen()" : 1
"_Py_fopen_obj()" : 1
bpo-42111: : 1
"xxlimited" : 1
bpo-40052: : 1
warning/error : 1
"PyVectorcall_Function()" : 1
Andreas : 2
Schneider : 1
2020-12-07* : 1
bpo-40791: : 2
"volatile" : 2
"hmac.compare_digest" : 1
constant-time-defeating : 1
bpo-42576: : 1
bpo-42536: : 1
collector*: : 1
"collections.OrderedDict.items()" : 1
"itertools.permutations()" : 1
untracked : 1
bpo-42500: : 1
Converts : 31
RecursionErrors : 1
bpo-42435: : 1
non-bytes : 2
bytarray : 1
non-buffer : 1
"_warnings" : 1
bpo-41686: : 1
"SIGINT" : 9
"_PyOS_SigintEvent()" : 1
"Py_InitializeEx(0)") : 1
bpo-42381: : 1
572 : 2
bpo-42202: : 1
bpo-42374: : 1
bpo-42349: : 1
back-end : 3
bpo-42296: : 1
CTRL+C : 1
deciding : 6
bpo-42332: : 1
bpo-42282: : 1
Optimise : 1
subexpressions : 2
optimiser : 1
descend : 4
bpo-42266: : 1
monkey-patching : 1
bpo-42233: : 2
"list[int] : 1
dict[float : 1
de-duplicating : 1
bpo-42233.) : 1
bpo-26131: : 3
bpo-5054: : 1
CGIHTTPRequestHandler.run_cgi() : 1
HTTP_ACCEPT : 1
getallmatchingheaders : 1
get_all : 1
bpo-42562: : 1
bpo-17735: : 1
"inspect.findsource()" : 1
"co_lineno" : 1
bpo-42116: : 1
bpo-42532: : 1
"__bool__" : 1
"spec_arg" : 1
bpo-38200: : 1
itertools.pairwise() : 1
test_master_read() : 2
b"" : 3
bpo-42487: : 1
ChainMap.__iter__ : 1
bpo-42482: : 1
TracebackException : 1
non-equal : 6
test_openpty() : 1
"asyncio.subprocess" : 1
"asyncio.tasks" : 1
"asyncio.open_connection" : 1
"asyncio.start_server" : 1
bpo-28468: : 1
"os-release" : 3
bpo-42299: : 1
zipimport.zipimporter.load_module() : 1
test_basic() : 1
test_openpty(); : 1
slave : 7
winsize : 1
pty.openpty() : 2
Darwin : 2
pty.spawn() : 1
bpo-15450: : 1
"filecmp.dircmp" : 1
"filecmp.dircmp.subdirs" : 1
dircmp : 2
bpo-42406: : 1
"pickle.whichmodule" : 1
bpo-42403: : 1
"importlib._bootstrap_external" : 1
_sre : 3
384) : 4
bpo-42375: : 1
DragonFlyBSD : 6
bpo-41713: : 2
Mohamed : 2
Koubaa : 2
bpo-37205: : 2
bpo-42328: : 1
"tkinter.ttk.Style.map()" : 1
"Style.map()") : 1
"wantobjects" : 2
bpo-42345: : 1
(flatten : 1
deduplicate : 1
key) : 18
bpo-42318: : 1
bpo-42350: : 1
fork: : 1
stopped : 24
exit) : 5
_ssl : 3
bpo-42014: : 1
"onerror" : 5
"shutil.rmtree" : 2
"os.open" : 3
bpo-42237: : 1
illumos : 1
bpo-42308: : 1
bpo-42131: : 1
451/spec : 1
zipimport.zipimporter: : 1
find_spec() : 1
create_module() : 1
load_module() : 1
asert : 1
aseert : 1
assrt : 1
assret : 2
bpo-42264: : 1
bpo-42251: : 1
bpo-42249: : 1
Plist : 3
bpo-42236: : 2
bpo-41754: : 1
webbrowser: : 2
*NotADirectoryError* : 1
"xdg-settings" : 1
bpo-42183: : 1
bpo-42140: : 1
asyncio.wait : 1
bpo-42133: : 1
bpo-39825: : 1
"sysconfig.get_config_var('EXT_SUFFIX')" : 1
"platform_tag.extension" : 1
".cp38-win_amd64.pyd" : 1
bpo-26389: : 1
bpo-41889: : 1
bpo-41861: : 1
bpo-40624: : 1
bpo-28850: : 1
"pprint.PrettyPrinter.format()" : 1
"pprint._safe_repr()" : 1
bpo-41625: : 1
"splice()" : 1
bpo-34215: : 1
"asyncio.IncompleteReadError" : 1
"expected" : 1
bpo-41543: : 1
contextlib.nullcontext : 1
bpo-21041: : 1
bpo-41332: : 1
connect_accepted_socket() : 1
"asyncio.AbstractEventLoop" : 2
bpo-12800: : 1
AtLee : 1
bpo-40968: : 1
"http/1.1" : 3
bpo-41001: : 1
func:"os.eventfd" : 1
bpo-40816: : 1
AsyncContextDecorator : 2
bpo-40550: : 1
time-of-check/time-of-action : 1
subprocess.Popen.send_signal : 1
bpo-39411: : 1
"is_async" : 2
"pyclbr"'s : 1
bpo-35498: : 1
Tentative : 1
bpo-42153: : 1
IMAP : 15
bpo-41028: : 1
switchers : 1
docsbuild-script : 1
bpo-41473: : 1
Re-enable : 1
test_gdb : 10
newer: : 1
https://bugzilla.redhat.com/show_bug.cgi?id=1866884 : 1
bpo-42553: : 1
"test_asyncio.test_call_later()" : 1
"call_later()" : 2
test_netrc : 1
VxWorks: : 6
temp_cwd() : 1
test_getaddrinfo_ipv6_scopeid_symbolic : 1
test_getnameinfo_ipv6_scopeid_symbolic : 1
test_test : 1
test_mailcap : 1
test_pipes : 1
fifo : 3
test_doctest.py : 1
bpo-40754: : 1
"_testinternalcapi" : 2
test_min_max_version_mismatch : 1
libnet : 1
detect_socket() : 1
bpo-42398: : 1
-jN : 3
Moveover : 1
bpo-41617: : 2
"pycore_bitutils.h" : 2
"__builtin_bswap16()" : 2
4.6.3 : 2
10.7) : 1
bpo-38823: : 1
"CTYPES_UNICODE" : 1
Anyway : 1
bpo-42087: : 1
bpo-40680 : 1
bpo-40998: : 1
Addressed : 1
(ubsan) : 1
bpo-42120: : 1
"copysign" : 1
"_copysign") : 1
bpo-38506: : 1
MACOSX_DEPLOYMENT_TARGET=11 : 1
bpo-41116: : 1
distutils.unixxcompiler.find_library_file : 1
bpo-41100: : 3
"Universal : 1
universalsdk : 1
--with-universal-archs=universal2" : 1
bpo-42232: : 1
madvise : 1
bpo-38443: : 1
"--with-universal-archs" : 1
bpo-42508: : 1
Keep : 13
bpo-42426: : 1
RE : 84
searchengine : 1
bpo-42415: : 1
calltips : 6
inspect.getdoc : 1
bpo-42212: : 1
verbose: : 12
bpo-36310: : 1
bpo-42423: : 1
_posixsubprocess : 4
_posixshmem : 1
_struct : 2
_queue : 2
Py_TYPE() : 1
Py_SIZE() : 1
size: : 4
"Py_TYPE(obj) : 2
type;" : 1
"Py_SIZE(obj) : 2
size;" : 1
_random : 1
_hashlib : 4
"_PyTrash_cond()" : 1
hides : 9
bpo-42260: : 3
Configuration. : 1
"PyConfig.argv" : 13
once: : 4
"PyConfig.parse_argv" : 10
strippped : 3
bpo-42262: : 1
bpo-41832: : 1
bpo-42171: : 1
bpo-42085: : 1
bpo-41073: : 1
bpo-30459: : 1
2020-11-03* : 1
bpo-42103: : 2
DoS : 3
bpo-42051: : 1
"nl_langinfo(CODESET)" : 5
bpo-42218: : 1
left-recursive : 1
long-distance : 1
bpo-42214: : 1
'!=' : 3
"barry_as_flufl" : 1
bpo-42206: : 1
bpo-41796: : 1
bpo-42143: : 1
"PyFunctionObject" : 1
Yonatan : 2
bpo-41659: : 1
"primary" : 1
{b}" : 1
{" : 1
bpo-42150: : 1
bpo-42123: : 1
bpo-42093: : 1
bpo-42030: : 1
AIX-specific : 2
defaulted : 3
bpo-41984: : 1
bpo-41993: : 1
bpo-41979: : 1
Star-unpacking : 1
item's : 6
bpo-41974: : 1
bpo-41902: : 2
Micro : 2
"sq_item" : 5
"mp_subscript" : 3
bpo-41894: : 1
UnicodeDecodeError : 6
range.index : 1
bpo-41435: : 1
"sys._current_exceptions()" : 1
563**) : 4
"{"x": : 2
"int"}" : 1
int}" : 1
bpo-35455: : 1
"gethrvtime()" : 1
Kulik : 1
bpo-29566: : 1
"binhex.binhex()" : 1
bpo-26789: : 1
reopen : 8
"NameError: : 1
bpo-42157: : 3
"unicodedata.UCD" : 1
bpo-42146: : 1
"subprocess.Popen()" : 9
uid : 12
(gid) : 1
("group" : 1
"extra_groups") : 1
"uid_t" : 1
("gid_t") : 1
"InvalidFileException" : 2
cases) : 5
bpo-41490: : 1
".path" : 2
certifi : 2
bpo-41052: : 2
bpo-42089: : 1
"importlib.metadata.PackageNotFoundError" : 1
bpo-41491: : 1
plistlib: : 1
bpo-42065: : 1
"_codecs.charmap_decode()" : 1
Bernstein : 1
bpo-41966: : 1
Dean : 1
Inwood : 1
bpo-19270: : 1
"sched.scheduler.cancel()" : 1
bpo-28660: : 1
"break_long_words=True" : 1
"break_on_hyphens=True" : 1
bpo-35823: : 1
bpo-42043: : 1
"zipfile.Path.is_file()" : 1
".filename" : 1
".name" : 3
".parent" : 1
bpo-42021: : 1
bpo-39101: : 1
IsolatedAsyncioTestCase : 2
hanging : 10
BaseExceptions : 1
bpo-41976: : 1
triying : 2
gcc>=9 : 1
"ldconfig" : 1
bpo-41943: : 1
TestCase.assertLogs : 1
bpo-41923: : 1
"typing.TypeAlias" : 1
bpo-41905: : 1
abc: : 1
*update_abstractmethods* : 1
*dataclass* : 1
bpo-23706: : 1
"pathlib.Path.write_text()" : 1
bpo-41876: : 1
bpo-41831: : 1
"tkinter.Event" : 1
bpo-39337: : 1
bpo-41747: : 1
bpo-30681: : 1
unparsable : 2
Bell : 3
Georges : 1
Toth : 1
bpo-41586: : 1
F_SETPIPE_SZ : 1
F_GETPIPE_SZ : 1
pipesize : 1
subprocess.Popen : 9
bpo-41229: : 1
"contextlib.aclosing" : 1
"contextlib.closing" : 2
bpo-16396: : 1
"ctypes.wintypes" : 2
bpo-4356: : 1
bpo-40592: : 1
"shutil.which()" : 6
bpo-40492: : 1
"--outfile" : 1
bpo-34204: : 1
bpo-27321: : 1
KeyError : 29
flattening : 2
Content-Transfer-Encoding : 1
bpo-38976: : 1
CURL-style : 1
cookiejar : 4
persisted : 4
bpo-42061: : 1
bpo-41910: : 1
"object.__eq__" : 1
bpo-42010: : 1
*types* : 3
bpo-41805: : 1
bpo-39693: : 1
tarfile's : 3
extractfile : 1
bpo-39416: : 1
bpo-41739: : 1
test_logging.test_race_between_set_target_and_flush(): : 1
bpo-41970: : 1
"test_lib2to3" : 1
bpo-41944: : 1
bpo-41306: : 1
"test_tk.test_widgets.ScaleTest" : 1
bpo-38980: : 1
bpo-38439: : 3
bpo-38252: : 1
8-byte : 5
bpo-39107: : 1
bpo-41557: : 2
3.33.0 : 2
bpo-38324: : 1
bpo-41471: : 1
bpo-33987: : 2
bpo-40511: : 1
"flashing" : 1
call-tip : 1
256×256 : 2
pixel : 4
.ico : 2
Clover : 2
low-color : 1
gif : 2
bpo-42015: : 1
"PyMethodDef"'s : 1
bpo-40423: : 1
"os.closerange" : 1
"close_range(low : 1
flags)" : 2
bpo-41845: : 1
"PyObject_GenericGetDict()" : 4
targeting : 4
bpo-40422: : 1
"_Py_closerange" : 1
performant : 2
bpo-41986: : 1
"Py_FileSystemDefaultEncodeErrors" : 7
"Py_UTF8Mode" : 2
bpo-41756: : 1
"PyIter_Send" : 1
generator/coroutine/iterator : 1
bpo-41784: : 1
"PyUnicode_AsUTF8AndSize" : 1
2020-10-05* : 1
bpo-41304: : 1
"python3x._pth" : 1
bpo-29778 : 1
(CVE-2020-15801) : 1
bpo-41162: : 1
bpo-29778: : 1
(CVE-2020-15523) : 1
bpo-41004: : 1
__hash__() : 1
ipaddress.IPv4Interface : 1
ipaddress.IPv6Interface : 1
(address : 2
bpo-39603: : 1
http.client.putrequest(...) : 1
bpo-41909: : 1
bpo-41922: : 1
bpo-41873: : 1
bpo-41870: : 1
"_bisect" : 1
bpo-39934: : 1
bpo-41780: : 1
"_lsprof" : 3
"_sha256" : 1
bpo-41690: : 1
"_curses_panel" : 1
"_opcode" : 1
bpo-41681: : 1
"," : 11
bpo-41675: : 1
"siginterrupt()" : 3
bpo-41670: : 1
"USE_COMPUTED_GOTOS" : 1
bpo-41654: : 1
bpo-41631: : 1
"_ast" : 5
_ast" : 1
"_operator" : 1
bpo-1653741: : 1
bpo-41533: : 1
"va_build_stack" : 1
"do_mkstack" : 1
"small_stack" : 1
bpo-41531: : 1
0xFFFF : 1
bpo-41525: : 1
--help" : 3
"_sha1" : 1
"_sha512" : 1
"_md5" : 1
bpo-41431: : 1
"dict_merge()" : 1
"dict(d)" : 1
"{}.update(d)") : 1
bpo-41428: : 2
Union[str : 4
bpo-41340: : 1
"strdup" : 1
bpo-38156: : 1
"PyOS_StdioReadline" : 1
bpo-41342: : 1
(9--60%) : 1
bpo-41334: : 1
bpo-41295: : 1
Resolve : 6
3.8.4 : 3
"__setattr__" : 2
multi-inheritance : 1
builtins/extension : 1
bpo-41247: : 1
"asyncio.set_running_loop" : 1
bpo-41252: : 1
_ssl.c's : 1
"_servername_callback()" : 1
"winapi" : 1
bpo-41215: : 1
non-NULL : 3
overcome : 3
XLC : 4
bpo-41218: : 1
3.8.3 : 2
ast.PyCF_ALLOW_TOP_LEVEL_AWAIT : 2
aggressively : 2
CO_COROUTINE : 1
"sha256" : 2
bpo-41175: : 1
bytearrayobject : 1
"bytearray() : 1
bytearray()" : 1
arm64 : 1
allowable : 10
arches : 1
mpdecimal.h : 1
bpo-41094: : 1
bpo-39960: : 1
"hackcheck" : 1
sneaking : 1
__setattr__() : 1
bpo-41084: : 1
'f-string: : 1
bpo-41076: : 1
Pre-feed : 1
bpo-41056: : 4
(discovered : 3
Coverity) : 4
bpo-41061: : 1
hashtable : 1
Opt : 1
serialization/deserialization : 2
_random.Random : 1
"PyPegen*" : 1
"PyParser*" : 2
bpo-35975: : 2
cf_feature_version : 2
bpo-41006: : 1
"encodings.latin_1" : 1
bpo-40636: : 1
618**'s : 1
"_gdbm" : 1
bpo-40985: : 1
backslash) : 2
bpo-40958: : 1
"_dbm" : 1
bpo-40957: : 1
_Py_fopen_obj() : 1
PySys_Audit() : 1
bpo-40950: : 1
3121**) : 1
bpo-40947: : 1
"PyConfig.platlibdir" : 2
bpo-40847: : 1
threw : 1
bpo-40890: : 1
bpo-40889: : 1
bpo-40904: : 1
("f"{yield}"") : 1
bpo-40903: : 1
"p=p=" : 1
bpo-40880: : 1
bpo-40883: : 1
bpo-40870: : 1
AST's : 1
"ast.Name" : 1
bpo-40854: : 1
"PYTHONPLATLIBDIR" : 3
bpo-40826: : 2
"PyOS_Readline()": : 1
bpo-19468: : 1
importlib.reload() : 2
Önder : 1
bpo-40824: : 1
bpo-40792: : 3
bpo-40780: : 1
g-style : 1
bpo-38964: : 1
fstring : 2
resides : 5
bpo-40750: : 1
bpo-40217: : 2
bpo-40696: : 1
"generator.throw()" : 3
caches: : 1
MemoryError : 11
Singletons: : 1
(latin1) : 1
bpo-40679: : 2
*qualified : 6
bpo-29590: : 1
bpo-4022: : 1
"_lzma" : 1
bpo-37999: : 1
bpo-29882: : 1
bpo-36982: : 1
terminals : 18
bpo-19569: : 2
"_Py_COMP_DIAG_PUSH" : 1
"_Py_COMP_DIAG_IGNORE_DEPR_DECLS" : 1
"_Py_COMP_DIAG_POP" : 1
bpo-26680: : 3
x.is_integer() : 2
bpo-41900: : 1
unprefixed : 4
bpo-41887: : 1
Strip : 5
stripping : 16
bpo-41773: : 1
"random.choices()" : 1
non-finite : 2
bpo-41840: : 1
module-scope : 1
bpo-41842: : 2
bpo-40564: : 1
caller’s : 1
bpo-40670: : 1
"timeit.Timer" : 1
"empty" : 1
comments) : 2
rejects : 9
misindentent : 1
bpo-41833: : 1
*target* : 41
bpo-41817: : 1
"tkinter.EventType" : 1
bpo-41810: : 1
reintroduced : 2
bpo-41815: : 1
McCormick : 1
bpo-41816: : 1
bpo-41517: : 1
bpo-39587: : 1
mix-in : 10
bpo-41792: : 1
is_typeddict : 1
python/typing" : 1
bpo-41789: : 1
"__format__" : 5
"__reduce_ex__") : 1
bpo-32218: : 1
"enum.IntFlag" : 6
bpo-39651: : 1
"call_soon_threadsafe()" : 2
"asyncio.ProactorEventLoop": : 1
self-pipe : 2
"mashal" : 1
"_string" : 1
bpo-41732: : 1
bpo-41720: : 1
"turtle.Vec2D.__rmul__()" : 1
bpo-41696: : 1
"PYTHONASYNCIODEBUG" : 4
bpo-41687: : 1
bpo-41662: : 2
bpo-39010: : 1
Restarting : 1
"ConnectionResetErrors" : 1
bpo-41638: : 1
absent : 15
bpo-41513: : 2
math.hypot() : 3
Internally : 10
bpo-41609: : 1
whatis : 2
'Method' : 1
'Function' : 1
bpo-39994: : 1
pprint's : 1
bpo-32751: : 3
bpo-40782: : 1
asyncio.AbstractEventLoop.run_in_executor : 1
bpo-41520: : 1
bpo-41528: : 1
radians : 17
vector : 15
math.dist() : 3
bpo-41503: : 1
setTarget : 1
logging.handlers.MemoryHandler : 1
bpo-41497: : 1
bpo-41467: : 1
socket/pipe : 1
("BrokenPipeError"): : 1
("b''") : 1
bpo-41425: : 1
runnable : 4
bpo-41421: : 1
algebraic : 2
simplification : 4
random.paretovariate() : 1
Inputs : 2
OverflowError : 15
bpo-41440: : 1
bpo-41316: : 1
TAR : 2
GZIP : 4
bpo-41384: : 1
TclError : 2
tkinter.OptionMenu : 1
bpo-41317: : 1
add_done_callback() : 2
asyncio.loop.sock_accept() : 1
unsubscribe : 4
bpo-41364: : 1
bpo-35328: : 1
"VIRTUAL_ENV_PROMPT" : 1
bpo-41341: : 1
bpo-41344: : 1
"shared_memory.SharedMemory" : 1
"size=0" : 1
bpo-41333: : 1
bpo-41288: : 1
NEWOBJ_EX : 2
UnpicklingError : 2
bpo-39017: : 1
(CVE-2019-20907) : 1
bpo-41273: : 1
"_ProactorReadPipeTransport" : 1
"recv_into" : 1
"recv" : 12
transport's : 13
bpo-41235: : 1
"ssl.SSLContext.load_dh_params()" : 1
bpo-41207: : 1
distutils.spawn : 1
DistutilsExecError : 1
bpo-29727: : 1
bpo-39168: : 1
"typing.Generic" : 4
bpo-41194: : 1
bpo-41195: : 1
ssl.SSLContext.security_level : 1
context's : 6
bpo-41193: : 1
"write_history()" : 2
completer : 14
bpo-41182: : 1
selector: : 1
DefaultSelector : 2
bpo-41161: : 1
libmpdec-2.5.0 : 2
bpo-40874: : 1
bpo-41138: : 1
bpo-31082: : 1
freelist : 1
collections.deque() : 3
bpo-31938: : 1
default-value : 1
bpo-41068: : 1
bpo-41058: : 1
"pdb.find_function()" : 1
os.fpathconf : 1
keylog : 3
(found : 2
bpo-41048: : 1
"mimetypes.read_mime_types()" : 1
bpo-41043: : 1
stdlib: : 1
bpo-41025: : 1
bpo-35018: : 1
"xml.sax.handler.LexicalHandler" : 1
bpo-41002: : 1
HTTPResponse.read : 1
Bruce : 2
Merry : 2
bpo-40448: : 1
Krzysztof : 1
Konopko : 1
bpo-40967: : 1
bpo-40924: : 1
"importlib.resources.path" : 1
extant : 3
SourceFileLoader's : 1
devised : 1
bpo-40955: : 1
extra_groups : 1
bpo-40855: : 1
mu : 2
xbar : 1
bpo-23427: : 1
bpo-33689: : 1
.pth : 4
documentated : 1
bpo-40884: : 1
"defaults" : 2
"logging.Formatter" : 4
Asaf : 1
bpo-40876: : 1
bpo-39791: : 3
Refresh : 3
bpo-40807: : 1
codeop._maybe_compile : 1
code.InteractiveInterpreter : 1
bpo-32604: : 3
(SourceFileLoader : 1
ZipImporter) : 1
"ResourceReader" : 1
bpo-39314: : 1
"rlcompleter.Completer" : 1
bpo-17005: : 2
bpo-40834: : 1
with_xxsubinterpreters.channel_send : 1
bpo-40755: : 1
bpo-26407: : 1
"csv.reader()" : 1
"csv.writer.writerow()" : 1
"csv.writer.writerows()" : 1
bpo-39384: : 1
email.contentmanager : 1
set_content() : 1
bpo-40744: : 1
v3.7.3 : 1
3.7.3 : 1
bpo-40777: : 1
PyDateTime_IsoCalendarDateType.tp_base : 1
bpo-38488: : 1
20.1.1 : 1
47.1.0 : 1
bpo-40767: : 1
Wayland : 1
WAYLAND_DISPLAY : 1
Jérémy : 1
Attali : 1
"hashlib.compare_digest()" : 1
"CRYPTO_memcmp()" : 2
bpo-40795: : 1
sys.unraisablehook : 3
"PyErr_Print()" : 4
bpo-16995: : 1
bpo-30008: : 1
1.1.x : 1
"no-deprecated" : 1
"--api=1.1.0" : 1
bpo-30064: : 2
"loop.sock_*" : 1
bpo-40759: : 1
bpo-40756: : 1
(extra) : 1
"LoggerAdapter.__init__" : 1
bpo-37129: : 1
"os.RWF_APPEND" : 1
bpo-40737: : 1
bpo-40726: : 1
bpo-40698: : 1
bpo-40695: : 1
bpo-9216: : 2
func:"hashlib.new" : 1
"usedforsecurity" : 2
EVP : 2
"_hashlib.new()" : 1
test_hashlib : 3
test_smtplib : 1
bpo-40614: : 1
bpo-40626: : 1
h5 : 1
application/x-hdf5 : 1
HDF : 1
HDF5 : 1
Schwab : 2
bpo-25920: : 1
"socket.getaddrinfo()" : 4
201311 : 1
bpo-40671: : 1
Prepare : 5
bpo-32309: : 1
bpo-36543: : 2
Restored : 12
bpo-40611: : 1
"MAP_POPULATE" : 1
bpo-39881: : 1
554 : 2
Nanjekye) : 3
bpo-13097: : 1
"ArgumentError" : 2
bpo-39385: : 1
"unittest.assertNoLogs()" : 1
bpo-23082: : 1
PurePath.relative_to() : 1
bpo-40318: : 1
bpo-40105: : 1
("a") : 1
Mazur : 1
bpo-40084: : 1
"Enum.__dir__": : 1
dir(Enum.member) : 1
bpo-31122: : 1
ssl.wrap_socket() : 5
ssl.SSLEOFError : 2
peer : 25
negotiation : 5
bpo-39728: : 1
"_missing_" : 5
bpo-39244: : 1
"multiprocessing.context.get_all_start_methods" : 1
bpo-39040: : 1
mime : 1
collapsing : 4
bare-quote-string : 1
bpo-38731: : 1
bpo-35714: : 1
bpo-38144: : 1
bpo-26543: : 1
"IMAP4.noop()" : 1
"imaplib.Debug : 1
3") : 2
bpo-12178: : 1
"csv.writer()" : 1
*escapechar* : 8
Itay : 1
Elbirt : 1
bpo-36290: : 1
bpo-33944: : 2
site.py : 1
bpo-35078: : 1
formatweekday : 1
formatmonthname : 1
LocaleHTMLCalendar : 2
LocaleTextCalendar : 1
methods.This : 1
bpo-29620: : 1
"RuntimeException" : 1
"__warningregistry__" : 2
Kernc : 1
bpo-31844: : 1
bpo-34226: : 1
"cgi.parse_multipart" : 1
content_length : 1
Duran : 1
bpo-33660: : 1
pathlib.PosixPath : 1
bpo-28557: : 1
misbehaving : 1
"rawio.readinto" : 1
d.is_integer() : 1
Real : 5
Integral : 1
(Allow : 1
Y") : 2
bpo-41774: : 1
"Sequences : 1
(Tuples/Lists)" : 1
"How : 1
bpo-35293: : 1
RemovedInSphinx40Warning : 1
bpo-37149: : 2
Shipman : 2
archive.org : 2
TkDocs : 2
NMT : 1
server.) : 1
responds : 11
bpo-41726: : 1
refcounts : 3
"PyType_FromModuleAndSpec" : 1
bpo-41624: : 1
"typing.Coroutine" : 1
bpo-40204: : 2
"c_allow_pre_v3" : 1
"c_warn_on_allowed_pre_v3" : 1
bpo-41045: : 1
bpo-41314: : 1
"4.0" : 1
(following : 3
563) : 1
bpo-40979: : 1
typing.rst : 1
arranging : 2
sub-sections : 1
bpo-40552: : 1
bpo-39883: : 1
BSD0 : 1
bpo-37703: : 1
gather.cancel() : 1
bpo-41939: : 1
test_site.test_license_exists_at_url(): : 1
"urllib.request.urlcleanup()" : 1
"urllib.request._opener" : 1
bpo-41731: : 1
test_cmd_line_script : 1
'-vv' : 1
bpo-41602: : 1
runpy : 3
bpo-41521: : 1
"test.support": : 3
"blacklist" : 1
"check__all__()" : 1
"not_exported" : 1
bpo-41477: : 1
test_genericalias : 1
bpo-41085: : 1
"array.array.index()" : 1
"2**31" : 4
bpo-41069: : 1
"test.support.TESTFN" : 1
"test.regrtest" : 7
non-ascii : 17
bpo-38377: : 1
"/dev/shm/" : 1
"skip_if_broken_multiprocessing_synchronize()" : 1
bpo-41009: : 1
"support.require_{linux|mac|freebsd}_version()" : 1
bpo-41003: : 1
"test_copyreg" : 1
"numpy" : 3
"test.pickletester" : 1
saves/restores : 2
bpo-40964: : 1
cyrus.andrew.cmu.edu : 1
incoming : 28
bpo-40927: : 1
test_binhex : 1
import_fresh_module() : 1
bpo-17258: : 1
LOOPBACK_TIMEOUT : 1
bpo-38169: : 1
SharedMemory : 2
ShareableList : 2
bpo-34401: : 1
bpo-38249: : 2
__builtin_unreachable() : 1
versions: : 1
Pin : 1
"Doc/Makefile" : 2
bpo-36020: : 2
bpo-40684: : 1
"PLATLIBDIR" : 2
"lib-dynload/" : 1
platlibdir" : 1
bpo-40683: : 1
bpo-41744: : 1
props : 1
Nuget : 2
bpo-41627: : 1
bpo-41526: : 1
permission) : 1
bpo-41492: : 1
UAC : 2
bpo-40948: : 1
bpo-41412: : 1
UCRT : 2
bpo-40741: : 3
3.32.3 : 2
bpo-41142: : 1
bpo-41074: : 1
"msilib.OpenDatabase()" : 3
"msilib.init_database()" : 1
"msilib.Database.OpenView()" : 1
bpo-41039: : 1
(python3.dll) : 1
"#pragma : 2
comment(linker)" : 1
re-exporting : 1
bpo-40164: : 3
1.1.1g : 2
bpo-39631: : 1
"text/x-python" : 1
"text/plain" : 5
bpo-40677: : 1
IO_REPARSE_TAG_APPEXECLINK : 1
bpo-37556: : 1
ini : 1
bpo-39580: : 1
Rick : 1
Heil : 1
preview : 4
Sur); : 1
3.8.x : 1
bpo-41005: : 1
XDG : 1
macos : 1
webbrowser.py : 1
3.32.2 : 1
bpo-41775: : 1
'IDLE : 5
title : 46
bpo-35764: : 1
bpo-40181: : 1
reminding : 1
'/' : 25
bpo-41468: : 1
see) : 1
bpo-41373: : 1
3.9.0b4 : 2
bpo-41300: : 1
chars : 11
bpo-37765: : 1
bpo-41152: : 1
bpo-41144: : 1
bpo-39885: : 2
Cut : 4
Copy : 38
bpo-40723: : 1
test_idle : 10
bpo-41936: : 1
bpo-41692: : 1
bpo-41834: : 1
bpo-41689: : 1
bpo-41524: : 1
PyOS_mystrnicmp : 1
PyOS_mystricmp : 1
bpo-41324: : 1
bpo-30155: : 1
"PyType_HasFeature()" : 4
"PyTypeObject.tp_flags" : 3
"PyType_GetFlags()" : 3
"PyUnicode_AsUnicodeCopy" : 1
"PyObject_AsCharBuffer()" : 2
"PyObject_AsReadBuffer()" : 2
"PyObject_CheckReadBuffer()" : 2
"PyObject_AsWriteBuffer()" : 2
protocol; : 3
"PyObject_GetBuffer()" : 14
"PyBuffer_Release()" : 14
"size : 3
"PyUnicode_FromUnicode" : 1
"PyUnicode_AsUnicode" : 1
"PyUnicode_AsUnicodeAndSize" : 1
bpo-40989: : 1
"PyObject_InitVar()" : 3
"pyerrors.h"" : 1
"snprintf" : 1
"vsnprintf" : 1
bpo-40943: : 1
bpo-40910: : 1
"Py_GetArgcArgv()" : 2
bpo-40724: : 1
"_PyEval_EvalCode()" : 1
*qualname* : 4
bpo-40839: : 1
"PyOS_InterruptOccurred()" : 2
bpo-40703: : 1
PyType_FromSpec*() : 1
"Py_tp_members" : 1
"Py_tp_getset" : 1
bpo-39583: : 1
superfluous : 4
2020-05-19* : 1
bpo-40501: : 1
"rpcrt4.dll" : 1
bpo-40663: : 1
(e.g: : 1
"Type[(str : 1
*other))]" : 1
bpo-40596: : 1
"str.isidentifier()" : 1
non-canonicalized : 1
bpo-40593: : 1
bpo-40585: : 1
bpo-40566: : 1
bpo-40502: : 1
"n->n_col_offset" : 1
bpo-40527: : 1
bpo-40523: : 1
pass-throughs : 1
bpo-40246: : 2
Reporting : 2
specialised : 8
bpo-40246 : 1
Constructs : 2
"bg="#d00" : 1
else"#fca"" : 1
bpo-40417: : 1
PyImport_ReloadModule : 1
Rouhani : 1
bpo-40408: : 1
GenericAlias : 8
"list[list[T]]") : 1
_stat : 1
bpo-29587: : 1
bpo-40328: : 1
bpo-40228: : 1
w.r.t : 1
source-to-bytecode : 1
bpo-38880: : 1
bpo-37986: : 1
bpo-40662: : 1
bpo-40665: : 1
bpo-40536: : 1
"available_timezones()" : 1
"hmac.HMAC" : 2
"digest_cons" : 1
"inner" : 3
"outer" : 1
bpo-40637: : 1
--with-builtin-hashlib-hashes=sha3,blake1" : 1
"--without-builtin-hashlib-hashes" : 1
bpo-37630: : 1
3.0.0-alpha2 : 1
bpo-40257: : 3
bpo-40607: : 1
Skurikhin : 1
bpo-40612: : 1
bpo-40597: : 1
policy.max_line_length : 1
content-encoding : 1
bpo-40571: : 1
functools.cache() : 1
lru_cache(maxsize=None) : 1
bpo-40503: : 1
bpo-40397: : 1
"typing.List" : 1
subscripted) : 1
bpo-40549: : 1
posixmodule.c : 2
("posix" : 1
"nt" : 3
bpo-31033: : 2
"Future.cancel()" : 3
"Task.cancel()" : 6
bpo-40541: : 1
*counts* : 5
random.sample() : 2
bpo-40515: : 1
no-thread : 1
bpo-40504: : 1
bpo-40559: : 1
bpo-40480: : 1
futile : 1
bpo-40495: : 1
bpo-40457: : 1
bpo-40355: : 1
"ast.Dict" : 1
non-conforming : 2
Curtis : 1
*random.shuffle()* : 1
bpo-40459: : 1
"platform.win32_ver()" : 1
*ptype* : 3
bpo-39435: : 2
positional- : 2
bpo-39305: : 1
"nntplib._NNTPBase" : 1
bpo-32494: : 1
gdbm_count : 1
bpo-40453: : 1
"isolated=True" : 1
"_xxsubinterpreters.create()" : 1
bpo-40286: : 2
"_random.Random.randbytes()": : 1
subclassing: : 3
bpo-40394: : 1
"difflib.SequenceMatcher.find_longest_match()" : 1
bpo-39995: : 1
concurrent.futures._ThreadWakeup: : 1
_ThreadWakeup : 1
bpo-30966: : 2
"Process.shutdown(wait=True)" : 1
bpo-39966: : 1
bpo-25597 : 1
"unittest.mock.MagicMock" : 5
wraps' : 1
"files()" : 5
bpo-40375: : 1
bpo-40389: : 1
"typing.Optional[T]" : 1
"NoneType" : 5
bpo-40291: : 1
CAN_J1939 : 3
5.4+) : 1
bpo-40273: : 1
reversible : 6
bpo-39075: : 1
bpo-40192: : 1
bpo-40025: : 1
Onstott : 1
bpo-39058: : 1
Namespace() : 4
holders : 1
bpo-24416: : 1
"asyncio.wait()"'s : 1
bpo-40561: : 1
bpo-40499: : 1
bpo-39705: : 1
sorted() : 4
sorted()'s : 1
bpo-40055: : 1
distutils.tests : 1
docutils : 2
pkg_resources : 3
bpo-40436: : 1
test.pythoninfo : 2
bpo-40653: : 1
_dirnameW : 1
HAVE_SYMLINK : 1
bpo-40514: : 1
"--with-experimental-isolated-subinterpreters" : 1
"configure": : 2
bpo-40650: : 1
winsock2.h : 1
pytime.c : 1
timeval : 1
bpo-40458: : 1
bpo-39148: : 1
endpoints : 3
ProactorEventLoop : 6
bpo-34956: : 1
universalsdk=" : 1
bpo-35569: : 1
3542 : 1
multissltest : 3
3.0.0-alpha : 1
bpo-40431: : 1
bpo-40163: : 1
bpo-38787: : 2
PyCFunction_CheckExact() : 1
subtypes : 53
PyCMethod_CheckExact() : 1
PyCMethod_Check() : 1
PyCMethod : 2
bpo-40545: : 1
"_PyErr_GetTopmostException()" : 1
("_Py") : 1
bpo-40412: : 1
Nullify : 1
inittab_copy : 1
initializations : 3
Szorc : 1
bpo-40429: : 1
bpo-40428: : 1
"PySet_ClearFreeList()" : 1
"tp_traverse") : 1
C-defined : 4
573**) : 1
2020-04-27* : 1
bpo-40121: : 1
bpo-39073: : 1
Disallow : 7
LF : 14
email.headerregistry.Address : 1
bpo-39503: : 2
CVE-2020-8492: : 1
"AbstractBasicAuthHandler" : 2
exploited : 2
catastrophic : 5
Caller : 4
Schwager : 1
bpo-40313: : 1
bytes.hex() : 1
bpo-40334: : 1
617 : 2
"PYTHONOLDPARSER=1" : 1
bpo-40267: : 1
"unexpected : 1
parsing" : 1
syntax" : 1
bpo-39522: : 1
bpo-40082: : 1
handler: : 10
bpo-37388: : 2
str.encode() : 2
str.decode() : 3
PyScannerObject : 1
bpo-37207: : 8
bpo-40141: : 1
"ast.keyword" : 1
_uuid : 1
bpo-40067: : 1
star : 15
_functools : 1
Henrique : 3
Silva : 3
bpo-20526: : 1
"PyThreadState_Clear()" : 6
"PyThreadState.frame" : 1
"Py_CLEAR(tstate->frame)" : 1
_weakref : 2
bpo-40020: : 1
parsetok.c : 2
realloc : 1
misuse : 3
codepath : 1
bpo-39939: : 1
str.removeprefix : 1
str.removesuffix : 1
collections.UserString : 2
affixes : 1
bpo-39481: : 1
list[int] : 6
tuple[str : 4
bpo-32894: : 1
unparsing : 2
bpo-40398: : 1
bpo-40396: : 1
"list[int]" : 6
bpo-38061: : 2
"close(fd)" : 2
"sysconf(_SC_OPEN_MAX)" : 2
fdescfs : 1
(emaste) : 2
(cem) : 2
(kevans) : 2
(koobs): : 2
https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=242274 : 2
"os.closerange(fd_low : 1
fd_high)" : 1
"closefrom(fd_low)" : 1
*fd_high* : 2
bpo-40138: : 1
"INT_MAX : 1
8" : 3
bpo-39942: : 1
bpo-40275: : 2
bpo-40330: : 1
"ShareableList.__setitem__()" : 1
bpo-40148: : 1
"pathlib.Path.with_stem()" : 1
stem : 1
bpo-40325: : 1
func:"inspect.getdoc" : 1
bpo-40287: : 1
"SpooledTemporaryFile.seek()" : 1
bpo-40290: : 1
zscore() : 1
statistics.NormalDist() : 3
bpo-40282: : 1
"random.getrandbits(0)" : 1
"random.randbytes()" : 1
"random.Random.randbytes()" : 1
bpo-40277: : 1
accessors : 3
bpo-40270: : 1
"json_object" : 1
bpo-29255: : 1
"KqueueSelector.select" : 1
bpo-40260: : 1
"io.open_code()" : 5
bpo-40234: : 1
(revert : 1
denied : 4
bpo-39207: : 1
bpo-40091: : 1
_at_fork_reinit() : 1
reinitialize : 3
bpo-40149: : 1
_abc._abc_data : 1
bpo-40208: : 1
bpo-40196: : 1
bpo-40190: : 1
"_SC_AIX_REALMEM" : 1
"posix.sysconf()" : 1
bpo-40182: : 1
bpo-36517: : 1
bpo-40126: : 1
reverting : 3
Patcher's : 1
silences : 3
bpo-40094: : 4
CGIHTTPRequestHandler : 1
os.waitpid() : 2
logs: : 1
"CGI : 1
-11." : 1
bpo-40108: : 1
incorrently : 1
bpo-40089: : 2
threading._after_fork(): : 1
threading.Thread : 2
threading._after_fork() : 1
_MainThread : 1
_main_thread : 1
_DummyThread : 1
"_at_fork_reinit()" : 2
"_thread.Lock" : 1
"_thread.RLock" : 1
"threading.RLock" : 6
unlocked : 30
"_reset_internal_locks()" : 1
bpo-25780: : 1
WWW-Authenticate : 1
challenges : 3
header: : 4
realm : 16
bpo-39812: : 1
"threading._register_atexit()" : 1
bpo-40050: : 1
"importlib._bootstrap_external": : 1
bpo-40014: : 1
"os.getgrouplist()": : 1
"ngroups" : 1
bpo-40017: : 1
"time.CLOCK_TAI" : 1
bpo-40016: : 1
bpo-39953: : 1
bpo-36144: : 8
"weakref.WeakValueDictionary" : 2
"weakref.WeakKeyDictionary" : 2
bpo-38891: : 1
"__setitem__" : 6
"multiprocessing.shared_memory.ShareableList" : 1
"ShareableList" : 9
Krennwallner : 1
bpo-39682: : 1
*closing* : 1
("|" : 1
"|=") : 3
bpo-39011: : 1
Normalization : 2
bpo-38410: : 1
"sys.audit()" : 7
":=") : 1
bpo-35967: : 1
'uname : 1
-p' : 1
bpo-35113: : 1
Karthikeyan : 22
Singaravelan : 22
bpo-33262: : 1
"shlex.split()"'s : 1
bpo-31758: : 1
"_elementtree.XMLParser" : 1
bpo-27635: : 1
bpo-39879: : 1
Samy : 1
Lahfa : 1
bpo-38387: : 1
"PyDoc_STRVAR" : 3
bpo-13743: : 1
xml.dom.minidom.Element : 1
test_c_locale_coercion.py : 1
bpo-40162: : 1
1.1.1f : 3
bpo-40146: : 1
Azure : 4
Pipelines : 3
"test.support.wait_process()" : 1
bpo-40003: : 1
"test.bisect_cmd" : 3
"-w"/"--verbose2" : 1
bpo-39380: : 1
"latin-1" : 2
bpo-39793: : 1
"make_msgid" : 1
bpo-1812: : 1
doctest.testfile : 1
get_data : 2
Donis : 1
bpo-38360: : 1
single-argument : 1
-isysroot : 1
bpo-40158: : 1
(build/native/python.props) : 1
bpo-38527: : 1
"float : 1
ordering": : 1
bpo-8901: : 1
bpo-38329: : 1
/Library/Frameworks/Python.framework/Versions : 1
idle.icns : 1
bpo-38689: : 1
inspect.signature : 4
fetching : 11
calltip : 14
bpo-40385: : 1
checkpyc.py : 1
bpo-40179: : 1
"#elif" : 1
"which.py" : 1
bpo-40241: : 2
2020-03-23* : 1
bpo-38576: : 1
CVE-2019-18348 : 1
InvalidURL : 1
bpo-40010: : 2
("Py_AddPendingCall()") : 1
_collections : 1
bpo-39984: : 2
_heapq : 1
"_PyRuntimeState.ceval.tracing_possible" : 1
"PyInterpreterState.ceval.tracing_possible": : 1
_statistics : 1
bpo-39968: : 1
get_module_state : 1
bpo-39965: : 1
*await* : 2
non-async : 1
REPL) : 1
bpo-39562: : 1
bpo-38373: : 1
overallocation : 3
overallocates : 1
overallocated : 1
bpo-39926: : 1
bpo-19466: : 1
"unclosed : 1
bpo-38894: : 1
"pathlib.Path.glob" : 2
Wozniski : 1
bpo-39877: : 2
"_PyRuntime" : 1
"tstate->interp->runtime" : 1
"tstate" : 1
bpo-39871: : 1
"math.{atan2,copysign,remainder}()" : 1
bpo-39776: : 1
PyGILState_Ensure() : 7
tstate->id : 1
contextvar : 1
(observed : 1
bpo-39778: : 1
bpo-39702: : 1
Relax : 1
614**) : 1
bpo-38091: : 1
Tweak : 2
_locale : 2
bpo-39087: : 1
bpo-39520: : 1
("foo[:,]") : 1
bpo-39220: : 1
'from : 3
annotations' : 1
bpo-35712: : 1
bpo-22490: : 1
"__PYVENV_LAUNCHER__" : 5
bpo-39830: : 1
bpo-40000: : 1
bpo-39999: : 1
bpo-39991: : 1
(17 : 2
characters): : 2
bpo-39988: : 1
"ast.AugLoad" : 1
"ast.AugStore" : 1
bpo-39656: : 1
"bin/python3.#" : 1
bpo-39969: : 1
"ast.Param" : 1
bpo-39360: : 1
Pool : 10
"multiprocessing.Pool.terminate" : 1
bpo-35370: : 2
sys.settrace() : 1
sys.setprofile() : 1
_lsprof.Profiler.enable() : 1
"PySys_Audit()" : 7
"sys.setprofile" : 2
"sys.settrace" : 2
bpo-39936: : 1
_aix_support : 1
_bootsubprocess : 1
_aix_support.aix_platform() : 1
584**) : 2
bpo-39652: : 1
"sqlite3.Cursor.description" : 1
'[' : 15
PARSE_COLNAMES : 1
bpo-39915: : 1
"unittest.mock.AsyncMock.await_args_list" : 1
"unittest.mock.Mock.call_args" : 1
"os.environb" : 6
584**'s : 3
bpo-38662: : 1
coupled : 3
bpo-38075: : 2
"random.Random.seed()" : 1
bpo-39916: : 1
"Path.glob()" : 2
bpo-39850: : 1
default-constructing : 1
"multiprocessing.connection.Listener" : 1
temporary-file-generated : 1
bpo-36287: : 1
"ast.dump()" : 3
"Constant.kind" : 1
bpo-39889: : 1
"a[i:j,]") : 1
"a[i : 1
j]") : 1
bpo-39828: : 1
bpo-13487: : 1
bpo-39674: : 2
"bpo-37330: : 1
open() : 20
'U' : 3
bpo-28577: : 1
IPv4Networks : 1
128-bit : 4
IPv6Networks : 1
bpo-39826: : 1
getConnection : 1
bpo-39763: : 2
"distutils.spawn.spawn()" : 1
bpo-39794: : 1
bpo-39517: : 1
runpy.run_path() : 1
bpo-39775: : 1
"inspect.Signature.parameters" : 2
3.9.0a4 : 1
bpo-39678: : 1
queue_manager : 1
bpo-39764: : 1
get_stack : 1
PyAsyncGenObject : 1
bpo-39769: : 1
*ddir* : 3
beneath : 3
bpo-38691: : 1
bpo-39719: : 1
"tempfile.SpooledTemporaryFile.softspace()" : 1
bpo-39667: : 1
pathlib.Path : 7
zipfile.Path : 3
degradation : 2
bpo-39638: : 1
"AST" : 2
bpo-39639: : 1
"ast.Suite" : 1
bpo-39609: : 1
thread_name_prefix : 3
bpo-39548: : 1
"urllib.request.AbstractDigestAuthHandler" : 2
"qop" : 2
bpo-39509: : 1
bpo-39507: : 1
Teapot" : 1
HTTPStatus : 2
bpo-39495: : 1
*attrs* : 15
"xml.etree.ElementTree.TreeBuilder.start()" : 1
bpo-38971: : 1
bpo-38641: : 1
Vlad : 4
Emelianov : 1
bpo-37534: : 1
Declaration : 1
(XML) : 2
(Fifth : 1
Edition) : 2
Recommendation : 2
https://www.w3.org/TR/xml/#sec- : 1
prolog-dtd) : 1
bpo-34788: : 1
scoped : 7
bpo-34822: : 1
meantime : 4
bpo-39868: : 1
bpo-13790: : 1
'string' : 3
'specification' : 1
bpo-17422: : 2
restricts : 3
bpo-39530: : 1
mixed-type : 4
bpo-39718: : 1
bpo-39677: : 1
**MAKE_FUNCTION** : 1
*argc* : 5
bpo-40019: : 1
bpo-27807: : 1
"test_site.test_startup_imports()" : 1
bpo-26067: : 1
test_shutil : 3
test_chown : 1
gid : 11
bpo-39855: : 1
test_subprocess.test_user() : 1
"nobody" : 2
bpo-39761: : 1
DFLAGS : 1
bpo-1294959: : 1
bpo-39930: : 1
"vcruntime140.dll" : 2
bpo-39847: : 1
hibernated : 1
whilst : 3
lock-related : 1
"threading") : 1
49-day : 1
bpo-38597: : 1
redistributable : 1
bpo-38380: : 2
3.31.1 : 2
bpo-39789: : 1
14.2) : 1
bpo-34803: : 1
bpo-27115: : 1
'Go : 1
Line' : 1
Query : 19
bpo-39852: : 1
"Go : 1
Ln : 1
Col : 1
bpo-39781: : 1
bpo-36184: : 1
python-gdb.py : 12
"take_gil" : 1
"pthread_cond_timedwait" : 2
bpo-38080: : 1
"getproxies" : 1
"lib2to3.fixes.fix_urllib" : 1
Roberto : 1
Meza : 1
Cabrera : 1
bpo-40024: : 1
bpo-39946: : 1
_PyArg_NoKwnames : 1
"PyThreadState_GetInterpreter()": : 1
Py_EnterRecursiveCall() : 1
Py_LeaveRecursiveCall() : 1
Py_TRASHCAN_BEGIN_CONDITION : 1
Py_TRASHCAN_END : 3
_PyTrash_begin() : 1
_PyTrash_end() : 1
bpo-39884: : 1
"PyDescr_NewMethod()" : 2
"PyCFunction_NewEx()" : 2
"bad : 3
flags" : 3
"__builtin_unreachable()" : 2
analogs : 3
bpo-38643: : 1
"PyNumber_ToBase()" : 2
bpo-39882: : 1
bpo-39824: : 1
bpo-38913: : 1
whwn : 1
bpo-38500: : 1
2020-02-25* : 1
bpo-39184: : 2
bpo-39401: : 1
bpo-39382: : 1
Dong- : 3
hee : 3
bpo-39619: : 1
"os.chroot()" : 1
bpo-39606: : 1
bpo-39386 : 1
"aclose" : 2
bpo-39579: : 1
"Attribute" : 4
"ast_for_dotted_name" : 1
"NAME" : 7
_crypt : 1
_contextvars : 2
bpo-39510: : 1
BufferedReader : 3
bpo-39502: : 2
1902 : 1
bpo-39492: : 1
Pickler : 3
bpo-39453: : 1
"list.__contains__()" : 2
bpo-39434: : 1
_codecs : 1
_bz2 : 1
_abc : 1
bpo-39320: : 2
"DICT_MERGE" : 1
"DICT_UPDATE" : 2
"BUILD_MAP_UNPACK" : 1
bpo-39219: : 1
"offset" : 14
bpo-36051: : 1
"bytes.join" : 1
bpo-38960: : 1
Carlier : 1
590 : 2
"collections.UserDict") : 1
584's : 1
bpo-32856: : 1
bpo-30566: : 1
punycode : 2
bpo-39649: : 1
bdb.Bdb.format_stack_entry : 1
bpo-39648: : 1
"math.lcm()" : 2
bpo-39681: : 1
readinto() : 2
bpo-35950: : 1
"io.UnsupportedOperation" : 1
"io.BufferedReader.truncate()" : 1
bpo-39479: : 1
"Do : 1
(bpo-25988) : 1
collections.Mapping : 2
bpo-39104: : 1
ProcessPoolExcutor : 1
"shutdown(wait=False)" : 1
bpo-39627: : 1
bpo-39474: : 1
"(a)(b)" : 2
"(a)[b]" : 1
"(a).b" : 1
bpo-21016: : 1
"/usr/lib64/python3.9/" : 1
bpo-39590: : 1
Collections.deque : 1
deque.__contains__ : 1
deque.count : 1
bpo-39586: : 1
bpo-39595: : 1
bpo-39350: : 2
*numerator* : 5
*denominator* : 6
GCD : 2
bpo-39567: : 1
"pathlib.Path.glob()" : 2
bpo-39559: : 1
"getters" : 1
bpo-38149: : 1
bpo-39546: : 1
"allow_abbrev=False" : 2
bpo-39450: : 1
Striped : 1
"unittest.case.shortDescription()" : 1
bpo-12915: : 1
"resolve_name" : 1
"'a.b.c.d'" : 1
"'a.b:c.d'" : 1
"a.b" : 1
package/module : 4
"c.d" : 1
bpo-39353: : 2
bpo-39493: : 1
"typing.IO.closed" : 1
bpo-39491: : 1
Kashin : 1
bpo-39485: : 1
"unittest.mock.create_autospec()" : 3
bpo-38932: : 1
reset_mock() : 1
Vegard : 1
Stikbakke : 1
bpo-39082: : 1
AsyncMock : 12
static/class : 1
bpo-39432: : 1
PEP-489 : 1
"PyInit_..." : 1
bpo-18819: : 1
Omit : 1
"devmajor" : 1
"devminor" : 1
non-device : 1
bit-for-bit : 1
"tar(1)" : 1
bpo-39349: : 1
bpo-39274: : 1
"bool(fraction.Fraction)" : 1
(numerator : 1
bpo-34793: : 1
bpo-25597: : 1
"wraps" : 1
bpo-36350: : 1
bpo-35727: : 1
sys.exit() : 8
sys.exit(None) : 1
multiprocessing.Process : 7
bpo-32173: : 1
"lazycache" : 1
"dict.clear" : 1
Refactoring : 1
"getline" : 1
"checkcache" : 1
Adapted : 2
bpo-39572: : 1
bpo-39654: : 1
'class' : 4
'module' : 4
readmodule : 2
bpo-39153: : 1
PyObject_SetItem : 1
PyMapping_SetItemString : 1
PyDict_SetItem : 1
PyDict_SetItemString : 1
bpo-39392: : 1
Explain : 8
regions : 8
unfilled : 4
bpo-39369: : 1
impression : 1
bpo-9056: : 1
TOC : 2
bpo-38325: : 1
test_winconsoleio : 2
test_zipfile.test_add_file_after_2107() : 1
bpo-39489: : 1
bpo-39553: : 1
SxS : 1
manifests : 2
bpo-39439: : 1
virtualenv : 1
bpo-39393: : 1
unresolved : 3
bpo-38883: : 1
bpo-36264 : 1
bpo-39185: : 1
build.bat : 1
very- : 1
quiet : 17
(-q) : 1
very-verbose : 1
(-vv) : 1
bpo-39663: : 1
pyparse : 14
find_good_parse_start() : 1
bpo-39600: : 1
bpo-30780: : 1
configdialog : 35
buttons : 20
bpo-39388: : 1
Cancel : 12
bpo-38792: : 1
Close : 63
"bytes_methods.h" : 1
"pycore_bytes_methods.h": : 1
(prefixed : 2
"_Py") : 2
"PyDoc_STRVAR_shared()" : 1
"dtoa.h" : 1
"pycore_dtoa.h": : 1
"Py_BUILD_CORE" : 1
bpo-39500: : 1
"PyUnicode_IsIdentifier()" : 2
bpo-39542: : 3
"PyType_Check()" : 1
"PyType_CheckExact()" : 1
bpo-39511: : 1
"PyThreadState.on_delete" : 2
"PyThreadState_Delete()" : 4
bpo-38076: : 2
bpo-39245: : 1
590) : 1
"PyObject_Vectorcall" : 1
"PyObject_VectorcallMethod" : 1
"PyVectorcall_Function" : 1
"PyObject_CallOneArg" : 1
"PyObject_CallMethodNoArgs" : 1
"PyObject_CallMethodOneArg" : 1
"PyObject_FastCallDict" : 1
"Py_TPFLAGS_HAVE_VECTORCALL" : 7
2020-01-24* : 1
bpo-39427: : 1
bpo-39421: : 1
bpo-39386: : 1
"functools.TopologicalSorter" : 1
BUILD_LIST_UNPACK : 1
BUILD_TUPLE_UNPACK : 1
BUILD_SET_UNPACK : 1
BUILD_TUPLE_UNPACK_WITH_CALL : 3
LIST_TO_TUPLE : 2
LIST_EXTEND : 1
SET_UPDATE : 1
bpo-39336: : 1
bpo-39322: : 1
bpo-39048: : 1
bpo-39235: : 1
lone : 4
f(i : 1
a) : 38
bpo-39209: : 1
_json : 2
bpo-39216: : 1
bpo-39215: : 1
bpo-39200: : 2
bpo-39166: : 1
bpo-39114: : 1
bpo-39156: : 1
COMPARE_OP : 3
IS_OP : 1
CONTAINS_OP : 1
JUMP_IF_NOT_EXC_MATCH : 1
bpo-38588: : 1
bpo-13601: : 1
bpo-38610: : 1
bpo-32021: : 1
brotli : 1
.br : 1
encodings_map : 2
bpo-39430: : 1
bpo-39413: : 1
bpo-39390: : 1
List[str] : 1
bpo-39395: : 2
bpo-39406: : 1
"putenv()" : 7
bpo-39396: : 1
"math.nextafter(-0.0 : 1
+0.0)" : 1
bpo-29435: : 1
"tarfile.is_tarfile()" : 1
"zipfile.is_zipfile()" : 1
Woodruff : 1
bpo-39377: : 1
bpo-39389: : 1
bpo-39366: : 1
bpo-39357: : 1
"crc_hqx()" : 1
bpo-39351: : 1
bpo-39329: : 1
bpo-39313: : 1
"exec_function" : 1
(*--exec-function* : 1
"RefactoringTool" : 1
bpo-39259: : 4
bpo-39310: : 1
bpo-39297: : 1
resilients : 1
v1.4.0) : 1
bpo-38901: : 1
prompt='.' : 1
--prompt : 2
venv's : 3
bpo-39288: : 1
bpo-39242: : 1
Gmane : 1
news.gmane.org : 1
news.gmane.io : 1
bpo-35292: : 1
"SimpleHTTPRequestHandler.guess_type" : 1
"mimetypes.guess_type" : 1
"mimetypes.init" : 1
bpo-39239: : 1
bpo-38907: : 1
bpo-39152: : 1
ttk.Scale.configure([name]) : 1
Giovanni : 1
Lombardo : 1
bpo-39198: : 1
"Logger.isEnabledFor" : 1
stopit) : 1
bpo-39191: : 1
fast; : 1
bpo-38871: : 1
filter-based : 1
mod:"lib2to3" : 1
bpo-39142: : 1
logging.config.dictConfig : 1
ConvertingTuple : 2
bpo-39158: : 1
ast.literal_eval() : 4
bpo-39129: : 1
bpo-39057: : 1
"urllib.request.proxy_bypass_environment()" : 1
bpo-39056: : 1
bpo-39055: : 1
"base64.b64decode()" : 1
"validate=True" : 1
binascii.Error : 3
bpo-21600: : 1
"mock.patch.stopall()" : 1
"mock.patch.dict()" : 1
bpo-39019: : 2
"subprocess.CompletedProcess" : 1
bpo-38914: : 1
Adjusted : 1
distutils' : 5
"author" : 3
"maintainer" : 3
("author_email" : 1
"maintainer_email") : 1
Juergen : 1
Gmach : 1
bpo-38878: : 1
__subclasshook__ : 1
bpo-38615: : 1
bpo-35182: : 1
"Popen.communicate()" : 7
piped : 1
Andriy : 1
Maletsky : 1
bpo-38630: : 1
"subprocess.Popen.send_signal()" : 2
"subprocess.Popen.returncode" : 2
reassigned : 3
(recycled) : 1
bpo-38536: : 1
"international=True" : 1
"locale.currency(12.34 : 1
international=True)" : 1
"'12,34 : 2
EUR : 1
'" : 19
EUR'" : 1
bpo-38473: : 1
autospecced : 4
"unittest.mock.attach_mock()" : 2
bpo-38361: : 1
"ident" : 7
"syslog.openlog()" : 1
bpo-38293: : 1
bpo-37958: : 1
pstats.Stats.get_profile_dict() : 1
StatsProfile : 3
bpo-28367: : 1
Termios : 1
baud : 1
rates: : 1
B500000 : 1
B576000 : 1
B921600 : 1
B1000000 : 1
B1152000 : 1
B1500000 : 1
B2000000 : 1
B2500000 : 1
B3000000 : 1
B3500000 : 1
B4000000 : 1
Andrey : 2
Smirnov : 1
bpo-39381: : 1
bpo-38918: : 1
"function" : 4
docs' : 1
bpo-3530: : 1
"NodeTransformer" : 4
"fix_missing_locations" : 1
bpo-39160: : 1
"/configure : 1
bpo-39144: : 1
ctags : 1
etags : 1
Modules/_ctypes : 1
bpo-39050: : 1
bpo-34118: : 1
etcetera : 1
bpo-32989: : 1
newline_and_indent_event : 1
find_good_parse_start : 1
bpo-39372: : 1
bpo-39164: : 1
"_PyErr_GetExcInfo()" : 1
2019-12-18* : 1
bpo-38945: : 1
overflowing : 1
bpo-37228: : 1
bpo-38804: : 1
bpo-39028: : 1
Slightly : 5
strengthening : 1
bpo-39080: : 1
Starred : 3
bpo-39031: : 1
bpo-20443: : 2
3.9.0a1 : 1
sys.argv[0] : 1
bpo-39008: : 1
bpo-38673: : 1
PS2 : 1
bpo-38922: : 1
bpo-38920: : 1
bpo-38892: : 1
bpo-38852: : 1
Mb : 1
android : 1
bpo-38858: : 1
"small : 1
singletons": : 1
[-5; : 1
257] : 1
"NSMALLNEGINTS" : 1
"NSMALLPOSINTS" : 1
"pycore_pystate.h" : 1
bpo-36854: : 1
("PyInterpreterState.gc") : 1
("_PyRuntimeState.gc") : 1
bpo-38835: : 2
empty: : 5
bpo-38328: : 1
Sped : 5
bpo-38707: : 1
"MainThread.native_id" : 1
bpo-38629: : 1
"__floor__" : 2
"__ceil__" : 2
bpo-27145: : 1
hongweipeng : 4
bpo-38021: : 1
PEP425 : 1
bpo-35409: : 1
GeneratorExit : 6
aclose : 1
bpo-33387: : 1
WITH_CLEANUP_START : 1
WITH_CLEANUP_FINISH : 1
BEGIN_FINALLY : 1
END_FINALLY : 1
CALL_FINALLY : 1
POP_FINALLY : 1
RERAISE : 2
WITH_EXCEPT_START : 2
non-exceptional : 2
'try-finally' : 1
'try' : 9
bpo-39033: : 1
bpo-39022: : 1
EntryPoints : 1
bpo-39006: : 1
ssl.SSLSocket : 1
bpo-38708: : 1
msg-id : 1
bpo-38698: : 2
"InvalidMessageID" : 1
Message-ID : 3
bpo-38994: : 1
bpo-38979: : 1
"ContextVar.__class_getitem__" : 1
bpo-38978: : 1
(Future : 1
Queue) : 2
bpo-38916: : 1
bpo-38986: : 1
TaskWakeupMethWrapper : 1
bpo-38982: : 1
"PidfdChildWatcher": : 1
"ChildProcessError": : 1
pidfd : 1
bpo-38529: : 1
noisy : 3
".close()" : 2
bpo-27413: : 1
"ensure_ascii" : 1
json.dumps : 1
bpo-38634: : 1
bpo-33684: : 1
pop : 12
parse_message_id : 1
parse_message_id() : 1
bpo-38927: : 1
bpo-26730: : 1
"SpooledTemporaryFile.rollover()" : 1
bpo-38881: : 1
random.choices() : 6
bpo-38876: : 1
pickle.UnpicklingError : 2
"BINGET" : 1
"LONG_BINGET" : 1
bogus : 10
bpo-38688: : 1
func:"shutil.copytree" : 1
Kinoshita : 1
bpo-38863: : 1
"is_cgi()" : 1
bpo-37838: : 1
bpo-38870: : 1
bpo-38859: : 1
StopAsyncIteration : 7
side_effects : 3
PEP-479 : 1
Impossible : 1
bpo-38857: : 1
side_effect : 10
bpo-38834: : 1
Zac : 4
Hatfield-Dodds : 2
bpo-38821: : 1
internationalizing : 2
"nargs" : 15
Federico : 1
Bond : 1
bpo-38820: : 1
bpo-38811: : 1
"os.link()" : 3
Toke : 1
Høiland-Jørgensen : 1
bpo-38686: : 1
bpo-38712: : 1
bpo-38348: : 1
"--indent" : 2
(indentation : 1
level) : 14
"--no- : 3
type-comments" : 1
(type : 6
bpo-37523: : 1
"zipfile.ZipExtFile" : 3
bpo-38045: : 1
"enum._decompose()" : 1
bpo-36820: : 1
socket.py : 1
codeop.py : 1
dyld.py : 1
bpo-36406: : 1
bpo-34776: : 1
bpo-20928: : 1
bpo-29636: : 1
spaces; : 2
tab" : 2
tabs; : 2
"--no-indent" : 1
newlines; : 1
"--compact" : 1
"--indent=4" : 1
bpo-38928: : 1
"upgrade_dependencies()" : 1
upgrade-deps" : 1
bpo-38899: : 1
https://fishshell.com/docs/current/commands.html#source : 1
bpo-22377: : 1
"%Z" : 9
bpo-38546: : 2
test_ressources_gced_in_workers() : 1
test_concurrent_futures: : 1
Multiprocessing : 3
bpo-38614: : 3
"LOOPBACK_TIMEOUT" : 4
"INTERNET_TIMEOUT" : 5
"SHORT_TIMEOUT" : 4
"LONG_TIMEOUT" : 3
bpo-38547: : 1
test_pty: : 1
leader : 2
SIGHUP : 2
bpo-38992: : 1
bpo-38991: : 1
"run_python_until_end()" : 1
"assert_python_ok()" : 2
"assert_python_failure()" : 1
"test.support.strip_python_stderr()" : 1
bpo-38965: : 1
test_faulthandler : 3
"faulthandler._stack_overflow()" : 1
pragma : 1
bpo-38875: : 1
test_capi: : 1
"cpu" : 1
bpo-38841: : 1
test_create_datagram_endpoint_existing_sock_unix : 1
bind() : 5
bpo-38692: : 3
test_posix.test_pidfd_open() : 1
"pidfd_open()" : 1
bpo-38839: : 1
bpo-38669: : 1
"unittest.mock.patch.object()" : 1
bpo-37957: : 1
test.regrtest : 4
-i/--ignore : 1
--ignore-file : 1
bpo-37404: : 1
bpo-36500: : 1
"regen" : 1
bpo-39007: : 1
bpo-37931: : 1
re-initializing : 1
Py_Finalize : 1
posix" : 3
Benoît : 1
bpo-38944: : 1
bpo-38943: : 1
bpo-38862: : 1
'Strip : 1
Whitespace' : 1
non-shell : 1
bpo-38636: : 1
Alt-T : 1
Alt-U) : 1
3.7.5 : 1
bpo-38896: : 1
"PyUnicode_ClearFreeList()" : 1
bpo-37340: : 2
"PyCFunction_ClearFreeList()" : 1
2019-11-19* : 1
bpo-38722: : 1
Killen : 1
bpo-38622: : 1
bpo-38418: : 1
"os.system" : 2
bpo-38243: : 1
"xmlrpc.server.DocXMLRPCServer" : 1
bpo-38243.) : 1
bpo-38174: : 1
vendorized : 3
2.2.8 : 1
CVE-2019-15903 : 1
bpo-37764: : 1
email._header_value_parser.get_unstructured : 1
Ashwin : 2
Ramaswami : 2
bpo-37461: : 1
bpo-37463: : 1
ssl.match_hostname() : 4
quad-dotted : 1
inet_aton() : 1
'127.0.0.1 : 1
whatever' : 1
bpo-37364: : 1
bpo-34631: : 2
1.1.1c : 3
bpo-34155: : 1
a@b@c.com.) : 1
maxking : 1
jpic : 1
"float.__getformat__()" : 1
bpo-38639: : 1
"math.floor()" : 5
"math.ceil()" : 5
"math.trunc()" : 4
bpo-38640: : 1
bpo-38613: : 1
"-") : 2
"dict_keys" : 1
"d.keys() : 1
other" : 10
"set(d) : 1
bpo-28029: : 1
bpo-38535: : 1
bpo-38525: : 1
bpo-38465: : 1
bpo-38469: : 1
*global* : 2
bpo-38437: : 1
Activate : 2
"GC_DEBUG" : 1
bpo-38379: : 2
(gc) : 1
trash : 4
bpo-38392: : 1
"tp_traverse()" : 2
bpo-38210: : 1
dictview : 3
bpo-38210.) : 1
bpo-38402: : 1
"crypt_r" : 1
bpo-37474: : 1
"fedisableexcept()" : 1
bpo-38006: : 2
bpo-38317: : 1
"PyConfig.warnoptions" : 4
bpo-38310: : 1
Predict : 1
bpo-36871: : 2
assert_has_calls : 2
assert_has_awaits : 1
mock's : 1
bpo-11410: : 1
-fvisibility=hidden : 1
minimising : 1
bpo-38219: : 1
bpo-38236: : 1
bpo-38013: : 1
"async_generator_athrow().throw(...)" : 1
non-started : 1
annoying : 12
bpo-38124: : 1
PyState_AddModule : 1
bpo-38116: : 1
PEP-384 : 10
bpo-38113: : 1
statics : 2
bpo-38074: : 1
bpo-38073: : 1
pwd : 3
bpo-38072: : 1
bpo-38069: : 1
bpo-38071: : 1
bpo-38005: : 1
InterpreterID : 1
ChannelID : 1
bpo-36946: : 2
bpo-37994: : 1
bpo-8425: : 1
difference_update : 1
Orrù) : 1
bpo-37966: : 1
normalization-quick-check : 1
bpo-37947: : 1
symtable : 2
bpo-37812: : 1
"CHECK_SMALL_INT" : 1
"Object/longobject.c" : 1
bpo-37751: : 1
bpo-37830: : 1
non-constant : 1
bpo-20490: : 1
bpo-37840: : 1
bpo-37802: : 1
"PyLong_FromUnsignedLong()" : 2
"PyLong_FromUnsignedLongLong()" : 2
"PyLong_FromSize_t()" : 2
bpo-37409: : 1
(having : 3
bpo-32912: : 3
bpo-37757: : 1
572**: : 1
"TargetScopeError" : 1
bpo-36279: : 1
"os.wait3()" : 1
bpo-36311: : 1
2GiB : 2
multibyte : 8
bpo-34880: : 1
("free_list") : 1
Temporary : 3
"_PyObject_VectorcallMethod" : 2
bpo-37648: : 1
"tuple.__contains__()" : 1
collection's : 1
needle : 1
bpo-37444: : 1
"builtins.__import__()" : 1
bpo-37619: : 1
"__add__ : 1
str.__add__" : 1
bpo-37593: : 1
Swap : 3
*posonlyargs* : 1
"ast.parameters" : 1
bpo-37543: : 1
bpo-37537: : 1
_PyObject_Malloc() : 1
_PyObject_Free() : 1
bpo-37467: : 1
bpo-37433: : 1
bpo-37417: : 1
"bytearray.extend()" : 1
bpo-37414: : 1
bpo-37392: : 1
"check_interval" : 1
performances : 2
bpo-37348: : 1
"b"foo".decode()" : 1
bpo-24214: : 2
surrogatepass : 3
bpo-35224: : 2
"k" : 6
"v" : 6
bpo-37316: : 1
bpo-37300: : 1
Py_XINCREF : 1
classobject.c : 1
bpo-37269: : 1
bpo-37257: : 1
bpo-37231: : 1
"__mul__" : 2
y") : 3
bpo-36974: : 3
bpo-37213: : 1
bpo-37219: : 1
bpo-15913: : 1
"PyBuffer_SizeFromFormat()" : 3
implemented): : 1
"struct.calcsize()" : 2
bpo-36922: : 2
"Py_TPFLAGS_METHOD_DESCRIPTOR" : 3
"tp_vectorcall_offset" : 5
"super().__call__()" : 1
bpo-37160: : 1
bpo-37077: : 1
bpo-36781: : 1
bpo-34556: : 1
"--upgrade-deps" : 2
bpo-20523: : 1
"pdb.Pdb" : 2
~/.pdbrc : 1
bpo-35551: : 1
encodings: : 1
"tis260" : 1
"tactis" : 1
"mac_centeuro" : 1
mac_latin2 : 2
bpo-19072: : 1
Dumpleton : 1
bpo-27575: : 1
Su : 2
bpo-30773: : 1
aclose() : 4
asend() : 1
athrow() : 5
ag_running : 1
AG : 1
bpo-36589: : 1
"curses.update_lines_cols()" : 1
bpo-38807: : 1
bpo-38724: : 1
Doroschenko : 1
bpo-38786: : 1
python273 : 1
bpo-38785: : 1
bpo-38723: : 1
bpo-27805: : 1
non-seekable : 2
bpo-38438: : 1
"nargs="*"" : 1
bpo-38761: : 1
collections.abc.MutableSet : 2
bpo-38716: : 1
logging: : 2
RotatingHandler : 1
eponymous : 1
bpo-38713: : 1
"pidfd_open" : 1
bpo-38602: : 1
bpo-38334: : 1
bpo-38312: : 1
bpo-38586: : 1
.name : 1
bpo-38565: : 1
cache_parameters() : 1
functools.lru_cache() : 10
bpo-34679: : 2
asynci.ProactorEventLoop.close() : 1
signal.set_wakeup_fd() : 3
bpo-31202: : 1
"pathlib.WindowsPath.glob()" : 1
bpo-36321: : 2
bpo-38521: : 1
bpo-38493: : 1
bpo-38478: : 1
"inspect.signature.bind()" : 1
bpo-33604: : 4
"hmac.new" : 1
bpo-38378: : 1
*out* : 13
*in* : 2
*out_fd* : 4
*in_fd* : 7
bpo-38417: : 1
bpo-38449: : 1
15522 : 1
"mimetypes.guess_type()" : 1
improper : 4
bpo-38431: : 1
bpo-38109: : 1
"stat.S_IFDOOR" : 1
"stat.S_IFPORT" : 1
"stat.S_IFWHT" : 1
"stat.S_ISDOOR()" : 1
"stat.S_ISPORT()" : 1
"stat.S_ISWHT()" : 1
bpo-38422: : 1
suffix(es) : 2
bpo-38405: : 1
bpo-38332: : 1
"_encoded_words.decode()" : 1
encoded-word : 1
content-type : 2
propagating : 4
"email.message.get()" : 1
bpo-38341: : 1
"smtplib.SMTPNotSupportedError" : 1
bpo-38319: : 1
sendfile() : 2
Rodola) : 3
bpo-38242: : 1
bpo-13153: : 1
MemoryError) : 1
bpo-38019: : 1
pause/resume : 1
bpo-38163: : 1
Child : 6
AsyncMocks : 1
bpo-38161: : 1
_AwaitEvent : 1
bpo-38216: : 1
bpo-30458 : 1
bpo-28286: : 1
bpo-38108: : 1
bpo-38265: : 1
"os.pread()" : 2
bpo-38112: : 1
bpo-38248: : 1
bpo-38237: : 1
pow : 1
bpo-34002: : 1
while-pop : 1
isdisjoint : 1
bpo-38191: : 1
"NamedTuple" : 4
"cls" : 6
"typename" : 1
"_typename" : 1
"fields" : 5
bpo-38155: : 1
Tahia : 1
Khan : 1
bpo-38185: : 1
"sqlite3.Row" : 3
bpo-38136: : 1
vice-versa : 4
bpo-37828: : 1
"unittest.mock.Mock.assert_called()" : 1
Abraham : 2
Toriz : 1
Cruz : 1
bpo-38175: : 1
bpo-33936: : 1
1.1.0+ : 1
bpo-34706: : 1
Preserve : 4
inspect.Signature.from_callable : 2
bpo-38153: : 1
sha3-512 : 1
sha3_512 : 1
blake2b512 : 1
blake2b : 11
bpo-38115: : 1
dis.findlinestarts() : 1
co_lnotab : 2
bpo-38148: : 1
bpo-38142: : 1
usedforsecurity : 1
bpo-36991: : 1
ZipFile.extract() : 1
bpo-38134: : 1
PBKDF2_HMAC_fast : 1
bpo-38132: : 1
pointless : 3
bpo-38008: : 1
bpo-34037: : 1
"loop.shutdown_default_executor()" : 2
threadpool : 5
bpo-37405: : 1
socket.getsockname() : 2
CAN_ISOTP : 3
AF_CAN : 2
1-tuple : 4
bpo-38121: : 1
0.22 : 1
bpo-38110: : 1
os.closewalk() : 1
fdwalk() : 1
bpo-38093: : 1
AsyncContextManagers : 1
AsyncIterators : 1
bpo-37488: : 1
"datetime.utctimetuple()" : 2
"datetime.utcnow()" : 1
"datetime.utcfromtimestamp()" : 1
bpo-35640: : 1
"directory" : 2
bpo-38086: : 1
0.21 : 1
bpo-37251: : 1
"__await__" : 3
bpo-38037: : 1
bpo-38066: : 1
Hide : 3
asyncio.Stream : 2
feed_eof() : 1
feed_data() : 1
set_exception() : 1
set_transport() : 1
bpo-38059: : 1
inspect.py : 1
exit() : 2
bpo-38049: : 1
bpo-37953: : 1
"ForwardReferences" : 1
bpo-38026: : 1
"inspect.getattr_static()" : 1
bpo-35923: : 1
"loader._ORIGIN" : 1
bpo-38010: : 1
sync : 6
0.20 : 2
"requires()" : 3
"dist-info" : 2
weakref.WeakValueDictionary : 2
remove() : 1
bpo-37995: : 1
bpo-34410: : 1
re-enter : 4
bpo-37140: : 1
ctypes.Structure : 1
(__del__) : 1
bpo-37587: : 2
"_json.scanstring" : 1
bpo-37834: : 2
shutil.rmtree : 3
bpo-10978: : 1
Semaphores : 4
BoundedSemaphores : 1
bpo-37972: : 1
Subscripts : 1
"unittest.mock.call" : 2
"TypeError": : 1
call().foo().__getitem__('bar') : 1
blhsing : 1
bpo-37965: : 1
distutils.ccompiler.CCompiler.has_function : 1
bpo-37964: : 1
"F_GETPATH" : 2
bpo-37960: : 1
"mode" : 22
"total_nframe" : 1
bpo-37951: : 1
bpo-36205: : 1
rusage : 1
time.process_time() : 3
bpo-37950: : 1
IOCP : 1
non-main : 3
bpo-36917: : 1
"ast.NodeVisitor.visit_Constant()" : 1
methody : 1
bpo-37798: : 2
test_statistics.py : 1
bpo-26589: : 1
451 : 1
UNAVAILABLE_FOR_LEGAL_REASONS : 1
bpo-37915: : 1
"datetime.timezone" : 7
bpo-32554: : 1
bpo-9938: : 1
"exit_on_error" : 2
bpo-37851: : 1
bpo-32793: : 1
"smtplib.SMTP.connect()" : 1
bpo-37885: : 1
venv: : 1
bpo-37868: : 1
dataclasses.is_dataclass : 1
__dataclass_fields__ : 1
bpo-37811: : 1
"socket.connect(address)" : 1
"poll(2)" : 1
bpo-37863: : 1
Fraction.__hash__ : 1
bpo-21131: : 1
"faulthandler.register(chain=True)" : 1
"SIGSTKSZ*2" : 1
"SIGSTKSZ" : 2
fastpath : 2
statistics.NormalDist.inv_cdf() : 1
bpo-37804: : 1
"threading.Thread.isAlive()" : 2
bpo-37819: : 1
Fraction.as_integer_ratio() : 1
bpo-14465: : 1
xml.etree.ElementTree.indent() : 1
bpo-37810: : 1
bpo-37772: : 1
dirs : 6
ancestral : 1
bpo-18578: : 1
"test.bytecode_helper" : 1
bpo-37785: : 1
xgettext : 1
bpo-34488: : 1
"importlib.resources.read_binary()" : 2
"pkgutil.get_data()" : 1
bpo-28292: : 2
calendar.py : 1
bpo-18049: : 2
Python/thread_pthread.h : 1
stacksize : 3
bpo-37742: : 1
logging.getLogger() : 13
'root' : 6
logging.getLogger(__name__) : 11
'root.py' : 1
bpo-37738: : 1
"addch(str : 1
color_pair)": : 1
"setcchar()" : 1
bpo-37723: : 1
Vaginay : 1
bpo-35943: : 1
bpo-32178: : 1
bpo-37268: : 1
bpo-11953: : 1
Completing : 1
WSA* : 1
bpo-37685: : 2
bpo-37697: : 1
Synchronize : 3
0.19 : 1
EGG-INFO : 1
bpo-37695: : 1
"curses.unget_wch()" : 1
bpo-37689: : 1
"is_relative_to()" : 1
bpo-29553: : 1
"argparse.ArgumentParser.format_usage()" : 1
Nester : 3
bpo-37691: : 1
Let : 11
iterables) : 2
"__lt__" : 3
"ANY" : 4
"True") : 22
bpo-37354: : 1
Activate.ps1 : 2
Powershell : 1
signing : 4
bpo-37664: : 1
19.2.3 : 1
41.2.0) : 1
bpo-37663: : 1
Bring : 1
__VENV_PROMPT__ : 1
bpo-37642: : 1
boundaries : 22
(23:59 : 1
24:00) : 2
(-23:59 : 1
bpo-36161: : 1
"ttyname_r" : 1
"ttyname" : 1
bpo-36324: : 2
bpo-37555: : 1
"NonCallableMock._call_matcher" : 1
"_Call" : 1
"self._spec_signature" : 1
Elizabeth : 1
Uselton : 1
bpo-29446: : 1
bpo-16970: : 1
Leenders : 1
bpo-34443: : 1
"__qualname" : 1
bpo-37491: : 1
bare-quoted : 1
json.loads : 1
Marco : 4
Paolini) : 1
bpo-18378: : 1
Recognize : 1
locale._parse_localename : 1
bpo-37579: : 1
bpo-21478: : 2
bpo-37531: : 3
--timeout=TIMEOUT" : 1
kills : 3
*TIMEOUT* : 1
bpo-37482: : 1
originator : 2
bpo-36993: : 1
Hillier : 1
bpo-37502: : 1
pickle.loads() : 4
bpo-37520: : 1
zipfile.Path.parent : 1
bpo-18374: : 1
".col_offset" : 1
"ast.BinOp" : 3
bpo-37424: : 1
bpo-37421: : 9
"multiprocessing.util.get_temp_dir()" : 1
finalizer: : 1
'tempdir' : 1
"get_temp_dir()" : 1
bpo-37481: : 1
bpo-37479: : 1
"Enum.__str__" : 1
"Enum.__format__" : 1
bpo-37440: : 1
cert_file : 1
HTTPSConnection : 1
bpo-37437: : 1
2.2.7 : 1
bpo-37428: : 1
SSLContext.post_handshake_auth : 3
SSL_VERIFY_POST_HANDSHAKE : 1
bpo-37420: : 1
"os.sched_setaffinity()" : 1
"mask" : 1
bpo-37412: : 1
bpo-37406: : 1
execute() : 1
executemany() : 1
bpo-29412: : 1
bpo-36546: : 2
statistics.quantiles() : 2
bpo-37394: : 1
bpo-37376: : 1
bpo-26967: : 1
"-vv" : 2
abbreviation : 7
Hatfield- : 1
Dodds : 1
bpo-37212: : 1
"unittest.mock.call()" : 1
bpo-37372: : 1
datetime.time : 4
seconds>=24 : 1
Blanchard : 1
bpo-37345: : 1
UDPLITE : 1
"hasattr(socket : 1
'IPPROTO_UDPLITE')" : 1
"socket.IPPROTO_UDPLITE" : 1
"UDPLITE_SEND_CSCOV" : 1
"UDPLITE_RECV_CSCOV" : 1
Gabe : 1
Appleton : 1
bpo-37358: : 1
bpo-37347: : 1
"sqlite3.Connection.create_aggregate()" : 2
"sqlite3.Connection.create_function()" : 3
"sqlite3.Connection.set_authorizer()" : 2
"sqlite3.Connection.set_progress_handler()" : 2
"sqlite3.Connection.set_trace_callback()" : 1
Aleksandr : 1
Balezin : 1
bpo-37163: : 1
"dataclasses.replace()" : 1
bpo-37085: : 1
SocketCAN : 1
Broadcast : 2
BCM : 1
bpo-37328: : 1
"HTMLParser.unescape" : 1
bpo-37305: : 1
.webmanifest : 1
application/manifest+json : 1
bpo-37320: : 1
bpo-37315: : 1
bpo-37312: : 1
bpo-33972: : 1
Email : 4
"multipart/*" : 1
bpo-37280: : 1
bpo-37279: : 1
bpo-19865: : 1
"ctypes.create_unicode_buffer()" : 1
AIX) : 3
bpo-37266: : 1
Daemon : 2
bpo-37210: : 1
bpo-21872: : 1
"lzma": : 1
decompresses : 1
FORMAT_ALONE : 1
bpo-35922: : 1
"RobotFileParser.crawl_delay()" : 1
"RobotFileParser.request_rate()" : 1
bpo-35766: : 2
feature_version : 1
(major : 2
minor) : 1
bpo-36607: : 1
Eliminate : 5
bpo-18748: : 2
"_pyio.IOBase" : 1
"_io.IOBase" : 1
bpo-36402: : 1
(join : 1
threads) : 2
bpo-37206: : 1
bpo-37111: : 1
"logging.basicConfig" : 1
bpo-12144: : 1
"expires" : 4
"CookieJar.make_cookies()" : 1
bpo-34886: : 1
"input" : 2
"capture_output" : 2
bpo-37173: : 1
"inspect.getfile()" : 2
bpo-37178: : 2
math.perm() : 1
math.factorial() : 1
math.perm(n : 2
k) : 3
factorial : 11
bpo-37165: : 1
Converted : 2
_collections._count_elements : 1
bpo-34767: : 1
bpo-37158: : 1
Speed-up : 3
bpo-34282: : 2
"Enum._convert" : 2
bpo-37150: : 1
"argparse._ActionsContainer.add_argument" : 1
bpo-28724: : 1
"socket.recv.fds()" : 1
bpo-35621: : 1
bpo-36520: : 1
Lengthy : 1
folded : 5
bpo-30835: : 1
content-transfer-encoding : 1
Donnellan : 1
bpo-31163: : 1
bpo-25068: : 1
"urllib.request.ProxyHandler" : 1
lowercases : 1
bpo-26185: : 1
Mickaël : 5
Schoentgen : 5
bpo-21315: : 1
RFC2047 : 1
test_datetime : 3
bpo-35805: : 1
HeaderRegistry : 1
2048 : 5
asserting : 4
bpo-35070: : 1
posix.getgrouplist() : 1
NGROUPS_MAX : 1
supplemental : 4
bpo-31783: : 1
bpo-36582: : 1
"UserString.encode()" : 1
bpo-32424: : 3
xml.etree.ElementTree.Element.copy() : 1
copy.copy() : 4
Hemsley : 3
bpo-36564: : 1
policy's : 1
Element.getchildren() : 1
Element.getiterator() : 2
ElementTree.getiterator() : 1
xml.etree.cElementTree : 1
bpo-36409: : 1
bpo-36302: : 1
bpo-36250: : 1
"interaction" : 1
bpo-36046: : 1
"group" : 8
"extra_groups" : 1
McLean : 1
bpo-32627: : 1
bpo-35168: : 1
"shlex.shlex.punctuation_chars" : 1
bpo-8538: : 1
"--foo" : 6
bpo-20504: : 1
multipart/form-data : 2
bpo-25988: : 3
bpo-11122: : 1
rpmbuild : 1
bpo-34775: : 1
PurePath : 2
bpo-34749: : 1
"binascii.a2b_base64()" : 2
bpo-34519: : 1
bpo-28009: : 2
uuid.getnode() : 4
Addr : 3
bpo-30618: : 1
bpo-32498: : 1
"urllib.parse.unquote()" : 1
bpo-33348: : 1
"f(*[] : 1
bpo-32689: : 1
Maxwell : 2
"5.13b" : 1
McKinnon : 1
bpo-32820: : 1
zero- : 8
Supports : 3
b/x/n : 1
(bin/hex/native : 1
format) : 8
'#' : 3
bpo-27657: : 1
urllib.parse.urlparse() : 1
"path:80" : 1
("path") : 1
("80") : 1
bpo-4963: : 1
non-deterministic : 5
reinitialization : 1
bpo-21767: : 1
functools.singledispatch : 3
bpo-38816: : 1
Provides : 21
cautions : 1
bpo-38351: : 1
Modernize : 7
%-formatting : 11
bpo-38778: : 1
bpo-38592: : 1
Brazilian : 1
Portuguese : 2
switcher : 4
bpo-38294: : 1
no-longer-escaped : 1
re.escape : 1
bpo-38053: : 1
Modernized : 1
bpo-26868: : 1
bpo-36797: : 2
bpo-37977: : 1
insecurity : 1
bpo-37979: : 1
dateutil.parser.isoparse : 1
datetime.fromisoformat : 1
bpo-12707: : 1
info() : 4
geturl() : 2
getcode() : 2
addinfourl : 2
bpo-37937: : 1
"frame.f_trace" : 1
bpo-37878: : 1
bpo-37759: : 1
Whatsnew : 1
bpo-37726: : 1
recommending : 1
getopt : 5
bpo-32910: : 1
Deactivate : 2
bpo-37256: : 1
bpo-37284: : 1
bpo-30088: : 1
"mailbox.Maildir" : 1
maildir : 4
correctness : 8
Sviatoslav : 1
Sydorenko : 1
bpo-37521: : 1
importlib.util.module_from_spec() : 2
sys.modules : 12
loader.exec_module() : 1
Mintz : 1
bpo-37456: : 1
Slash : 1
('/') : 1
bpo-37487: : 1
PyList_GetItem : 1
Mexico : 1
Tech : 1
bpo-37478: : 1
os.chdir() : 4
bpo-34903: : 1
two-digit : 7
Gleen : 1
bpo-36260: : 1
bpo-37004: : 1
SequenceMatcher's : 1
bpo-36960: : 1
Brad : 3
Solomon : 2
bpo-36487: : 1
bpo-23460: : 1
":g" : 1
cutoff : 1
Tuomas : 1
Suutari : 1
bpo-35803: : 1
bpo-34293: : 1
Doc/Makefile : 2
PAPER : 1
bpo-25237: : 1
test_communicate() : 1
test_asyncio.test_subprocess: : 1
"support.LONG_TIMEOUT" : 1
minute : 27
bpo-38502: : 1
(-jN : 1
"os.setsid()" : 2
"os.killpg()" : 1
bpo-35998: : 2
test_asyncio.test_start_tls_server_1() : 1
ServerProto : 2
ANSWER : 1
HELLO : 3
bpo-38470: : 1
"test_compileall.test_compile_dir_maxlevels()" : 1
support: : 3
regrtest : 28
"popen.communicate()" : 1
again: : 3
minutes : 23
slowest : 6
bpo-38239: : 1
bpo-38275: : 1
minimum_versions : 1
bpo-38271: : 1
PKCS#8 : 1
AES256 : 1
bpo-38270: : 1
SHA256 : 2
bpo-37123: : 1
test_mymanager() : 1
-SIGTERM : 1
exitcode : 9
BaseManager._finalize_manager() : 1
bpo-38212: : 1
test_queue_feeder_donot_stop_onexc() : 1
bpo-38117: : 3
1.1.1d : 3
bpo-38018: : 1
multiprocessing.shared_memory : 1
bpo-37805: : 1
json.dump(... : 1
skipkeys=True) : 1
multiprocess : 3
timeout: : 3
killing : 4
popen.kill() : 1
popen.wait() : 1
popen.communicate() : 1
bpo-37876: : 1
ROT-13 : 1
bpo-36833: : 1
PyDateTime_xxx_GET_xxx() : 1
bpo-37558: : 1
test_shared_memory_cleaned_after_process_termination : 1
bpo-37526: : 1
"test.support.catch_threading_exception()": : 1
test_concurrent_futures : 2
ForkServer : 2
"alive" : 1
test_distutils.test_build_ext() : 1
("xx") : 1
multiprocessing.util.get_temp_dir() : 1
tempfile.TemporaryFile() : 3
"_run_finalizers()" : 1
"urlcleanup()" : 1
"urlretrieve()" : 7
"_opener" : 1
"urlopen()" : 17
bpo-37472: : 1
"Lib/test/outstanding_bugs.py" : 1
bpo-37199: : 1
bpo-19696: : 1
"random.choose" : 1
"random.choice" : 1
"test_pkg_import.py" : 1
bpo-37335: : 1
bpo-37411: : 1
test_wsgiref.testEnviron() : 1
(don't : 3
"X" : 7
bpo-37400: : 1
test_os.test_chown(): : 1
os.getgroups() : 2
grp.getgrall() : 2
test_chown_gid() : 1
bpo-37359: : 1
--cleanup : 1
"test_python_*" : 1
cleantest" : 1
--cleanup" : 1
bpo-37362: : 1
"unexpected" : 1
stderr: : 3
test_asyncio: : 1
test_start_tls_server_1() : 1
bpo-37278: : 1
test_asyncio : 3
ProactorLoopCtrlC: : 1
bpo-37261: : 1
"test.support.catch_unraisable_exception()": : 2
__exit__() : 1
"unraisable" : 4
bpo-37069: : 2
"environment : 1
altered" : 1
(ENV_CHANGED) : 1
exception" : 2
--fail-env-changed" : 1
bpo-37252: : 1
"test_close" : 1
"test_events_mask_overflow" : 1
devpoll : 2
bpo-37169: : 1
"_PyObject_IsFreed()" : 1
bpo-37153: : 1
"test_venv.test_multiprocessing()" : 1
"pool.terminate()" : 1
bpo-34001: : 1
bpo-36919: : 1
"test_source_encoding.test_issue2301" : 1
bpo-30202: : 1
"test.test_importlib.test_abc" : 1
MACADDR : 1
bpo-34596: : 1
"unittest.skip()" : 1
uncalled : 1
Naitree : 1
bpo-38809: : 1
python.exe : 2
bpo-38684: : 1
Blake2 : 4
bpo-38468: : 1
Misc/python-config.in : 1
"getvar()" : 1
bpo-37415: : 1
stdatomic.h : 2
ICC : 5
atomic_uintptr_t : 1
bpo-38301: : 1
"-D_REENTRANT" : 1
bpo-36002: : 1
Locate : 5
"AC_PATH_TOOL" : 1
"AC_PATH_TARGET_TOOL" : 1
bpo-37936: : 2
".gitignore" : 2
systematically : 2
"rooted" : 1
non-trailing : 1
repo : 5
bpo-37760: : 1
"Tools/unicode/makeunicodedata.py" : 1
character's : 2
"dataclass" : 2
length-18 : 1
bpo-37725: : 1
"clean" : 1
guided : 1
profile-removal" : 1
clobber" : 1
bpo-37707: : 1
bpo-36044: : 1
'./configure : 1
--pgo-extended"' : 1
bpo-37468: : 1
"wininst-*.exe" : 1
bdist_wininst: : 1
bdist_wininst : 6
bpo-37189: : 1
"PyRun_XXX()" : 1
"libpython38.dll" : 1
bpo-25361: : 2
bpo-36210: : 1
ASIS : 1
libcurses.a : 1
_curses_panel : 1
bpo-38589: : 1
bpo-38453: : 1
bpo-38519: : 1
bpo-38492: : 1
bpo-38344: : 1
activate.bat : 6
bpo-38359: : 1
"pyw.exe" : 1
bpo-38355: : 1
"ntpath.realpath" : 1
bpo-38092: : 1
bpo-38133: : 1
bpo-38114: : 1
"pip.ini" : 2
bpo-32592: : 1
bpo-36634: : 2
bpo-38081: : 1
"'NUL'" : 1
bpo-38087: : 1
test_pathlib : 1
test_ntpath : 1
bpo-38088: : 1
vcruntime140.dll : 4
v142 : 1
bpo-37283: : 1
unattend.xml : 1
bpo-38030: : 1
bpo-38020: : 1
"realpath()") : 1
bpo-37705: : 1
"winerror_to_errno()" : 1
bpo-37549: : 1
"os.dup()" : 3
bpo-1311: : 1
"nul" : 1
"S_IFCHR" : 2
bpo-9949: : 1
"os.realpath()" : 1
Treat : 5
bpo-36266: : 1
"_PyImport_FindSharedFuncptrWindows()" : 1
Nyayapati : 1
bpo-25172: : 1
bpo-37778: : 1
bpo-37734: : 1
bpo-37702: : 1
urllib.request.urlopen('https://...') : 1
bpo-37672: : 1
"PIP_USER" : 1
bpo-10945: : 1
Officially : 1
bpo-37445: : 1
"FORMAT_MESSAGE_IGNORE_INSERTS" : 1
"FormatMessageW()" : 1
bpo-37369: : 1
bpo-37380: : 1
unfinished : 10
"subprocess._active" : 1
Ruslan : 1
Kuprieiev : 1
bpo-37351: : 1
bpo-35360: : 2
3.28.0 : 2
bpo-37267: : 1
bpo-36779: : 1
"time.tzname" : 2
CP_UTF7 : 1
CP_UTF8 : 1
bpo-32587: : 1
"winreg.REG_MULTI_SZ" : 1
bpo-28269: : 1
"strcasecmp()" : 1
"_stricmp()" : 1
Minmin : 1
Gong : 1
bpo-36590: : 1
Bluetooth : 7
RFCOMM : 1
bpo-38089: : 1
5MB : 1
16MB : 1
resource.setrlimit : 3
bpo-26353: : 1
bpo-4630: : 1
Blink : 2
bpo-38598: : 1
bpo-36698: : 1
non-encodable : 2
bpo-35379: : 1
EditorWindow.close : 1
bpo-38183: : 1
.idlerc : 1
bpo-38077: : 1
3.7.4 : 2
3.8.0b2 : 1
3.8.0b4 : 1
bpo-38041: : 1
bpo-35771: : 1
"hover_delay" : 1
test_tooltip : 1
bpo-37824: : 1
Cease : 1
bpo-37929: : 1
bpo-37902: : 1
mousewheel : 3
scrolling : 13
bpo-37849: : 1
bpo-36419: : 1
bpo-37748: : 1
bpo-37692: : 1
labels : 23
bpo-37628: : 1
bpo-37627: : 1
submitting : 2
bpo-33610: : 1
toggled : 3
bpo-37530: : 1
bpo-27452: : 5
"config.py" : 1
"RemoveFile" : 1
"CreateConfigHandlers" : 1
bpo-37325: : 1
bpo-37321: : 1
'Startup : 1
failure' : 1
bpo-17535: : 1
bpo-26806: : 1
Subtract : 1
bpo-37177: : 1
'attach' : 1
bpo-37039: : 1
"Zoom : 2
Height" : 2
momentarily : 3
maximizing : 2
maximized : 2
bpo-35763: : 1
reminder : 1
obtrusive : 1
bpo-5680: : 1
'Run.. : 1
Customized' : 1
'command : 1
arguments' : 7
bpo-36390: : 1
Gather : 1
format.py : 1
Combine : 4
paragraph.py : 1
rstrip.py : 1
editor.py : 1
bpo-38118: : 1
"PyUnicode_Decode()" : 2
strcmp() : 1
bpo-38347: : 1
pathfix.py: : 1
'.py' : 4
bpo-37803: : 1
pdb's : 2
bpo-37942: : 1
ArgumentClinic : 2
bpo-37704: : 1
"Tools/scripts/h2py.py": : 1
bpo-37675: : 1
zipped : 1
bpo-37034: : 1
bpo-37064: : 1
pathscript.py : 2
-a : 9
bpo-37633: : 1
Re-export : 1
"pythonrun.h" : 1
bpo-38644: : 1
bpo-38650: : 1
bpo-38540: : 1
"PyArg_Parse()" : 4
""es#"" : 1
""et#"" : 1
bpo-38395: : 1
bpo-36389: : 2
"_PyObject_CheckConsistency()" : 1
"visit_decref()" : 1
bpo-38266: : 1
PyThreadState_DeleteCurrent() : 1
bpo-38303: : 1
(PEP-384) : 1
Kieft : 1
bpo-38234: : 2
"Py_SetProgramName()": : 1
bpo-38205: : 1
"Py_UNREACHABLE()" : 3
bpo-38140: : 1
bpo-15088: : 1
bpo-36763: : 5
"PyConfig.xoptions" : 2
bpo-37926: : 1
"PySys_SetArgvEx(0 : 1
bpo-37879: : 1
subtype_dealloc : 1
decref : 3
bpo-37645: : 1
bpo-29548: : 1
bpo-37151: : 1
"PyCFunction_Call" : 1
bpo-37540: : 1
"tp_vectorcall" : 4
bpo-21120: : 1
Python-ast.h : 1
ast.h : 1
asdl.h : 1
bpo-37483: : 1
"_PyObject_CallOneArg" : 2
"PyConfig_SetWideStringList()" : 1
bpo-37337: : 1
"_PyObject_VectorcallMethod()" : 1
"_PyObject_CallMethodNoArgs()" : 1
"_PyObject_CallMethodOneArg()" : 1
bpo-28805: : 1
bpo-37221: : 1
positonal- : 1
bpo-37215: : 1
dtrace : 5
bpo-36842 : 1
bpo-37194: : 1
"PyObject_CallFunctionObjArgs(func : 1
NULL)" : 2
960 : 1
"PyObject_CallNoArgs(func)" : 1
624 : 1
bpo-37170: : 1
"PyLong_AsUnsignedLongLongMask()" : 2
bpo-35381: : 1
"DirEntryType" : 1
"ScandirIteratorType" : 1
bpo-34331: : 1
singular/plural : 1
noun : 1
non-overriden : 1
method(s) : 1
2019-06-04* : 1
bpo-35907: : 1
CVE-2019-9948: : 1
"local- : 1
file://" : 1
"local_file://" : 1
"URLopener().open()" : 1
"URLopener().retrieve()" : 1
bpo-33529: : 1
bpo-33164: : 1
memset : 2
bpo-35814: : 2
"t: : 1
Tuple[int : 2
*z" : 1
bpo-37126: : 1
bpo-37122: : 1
*co_argcount* : 1
*co_posonlyargcount* : 1
(*co_argcount* : 1
*co_posonlyargcount*) : 1
bpo-20092: : 1
bpo-37087: : 1
(TID) : 2
bpo-26219: : 1
bpo-37072: : 1
PyAST_FromNodeObject() : 1
bpo-37029: : 1
Freeing : 1
"obmalloc.c"'s : 1
visibly : 3
thousand : 3
simultaneously) : 1
bpo-26423: : 1
"wrap_lenfunc()" : 1
"sizeof(long) : 2
sizeof(Py_ssize_t)" : 1
bpo-37050: : 1
expr_text : 1
FormattedValue : 1
f-string) : 1
bpo-22385: : 1
"bytes.hex" : 1
"bytearray.hex" : 1
"memoryview.hex" : 1
"binascii.hexlify" : 1
"b2a_hex" : 1
MicroPython's : 1
hexlify : 1
bpo-26836: : 1
bpo-37032: : 1
("types.CodeType") : 1
bpo-37007: : 1
bpo-36829: : 3
"PyErr_WriteUnraisable()" : 4
"PyErr_NormalizeException()" : 4
"PyException_SetTraceback()" : 2
bpo-36878: : 3
ignore" : 4
ignoreé" : 1
ignore[E1000]" : 2
""[E1000]"" : 1
bpo-2180: : 1
bpo-36907: : 1
("f(**kwargs)") : 1
"kwargs" : 13
bpo-36826: : 1
NamedExpression : 1
ast_unparse.c : 1
bpo-1875: : 1
false) : 16
bpo-36027: : 1
"pow": : 1
bpo-36861: : 1
bpo-28866: : 1
mro() : 2
bpo-36851: : 1
"FrameType" : 1
bpo-34616: : 1
async-code : 1
bpo-36842: : 1
578 : 1
sys.audit : 1
io.open_code : 1
bpo-27639: : 1
UserList : 1
Blahay : 1
Erick : 1
Cervantes : 1
vaultah : 1
bpo-36737: : 1
PyRuntimeState.warnings : 1
"module : 2
state") : 1
bpo-36793: : 1
bpo-36817: : 1
"!s" : 2
"!r" : 3
"!a" : 2
"f'{3*9+15=}'" : 1
"'3*9+15=42'" : 1
bpo-24048: : 1
import.c's : 1
"remove_module()" : 1
bpo-27987: : 1
bpo-36601: : 1
long-since-meaningless : 1
"getpid() : 1
main_pid" : 1
bpo-36594: : 1
"%p" : 8
bpo-36045: : 1
builtins.help() : 1
bpo-36084: : 1
(supported : 2
platforms: : 4
bpo-36035: : 1
bpo-35983: : 1
bpo-20602: : 1
"sys.flags" : 6
"sys.float_info" : 2
bpo-26826: : 1
"copy_file_range()" : 1
bpo-32388: : 1
cross-version : 2
tp_flags : 2
bpo-31862: : 1
bpo-37128: : 1
bpo-37120: : 1
SSLContext.num_tickets : 2
TLSv1.3 : 6
tickets : 3
bpo-12202: : 1
"msilib.SummaryInformation.GetProperty()" : 3
bpo-26835: : 1
memfds : 1
bpo-29262: : 1
"get_origin()" : 2
"get_args()" : 1
bpo-12639: : 1
"msilib.Directory.start_component()" : 1
*keyfile* : 15
bpo-36999: : 1
tasks's : 1
bpo-35246: : 1
bpo-35279: : 1
*max_workers* : 10
"cpu_count() : 1
"min(32 : 2
cpu_count() : 1
unreasonably : 1
bpo-37076: : 1
"_thread.start_new_thread()" : 1
bpo-33725: : 2
bpo-37054: : 1
"_pyio.BytesIO" : 1
"_pyio.TextIOWrapper": : 1
"_buffer" : 1
body) : 11
bpo-37058: : 1
544: : 1
"@runtime_checkable" : 2
bpo-36933: : 1
"sys.set_coroutine_wrapper" : 1
"sys.get_coroutine_wrapper" : 1
bpo-37047: : 1
autospeccing : 1
bpo-37049: : 1
589: : 1
bpo-37046: : 1
586: : 1
bpo-37045: : 1
591: : 1
"@final" : 2
bpo-37035: : 1
Peer : 1
pollute : 1
bpo-37001: : 1
"symtable.symtable()" : 1
bpo-37028: : 1
bpo-37027: : 1
transport.get_extra_info('socket') : 2
bpo-32528: : 1
asyncio.CancelledError : 2
make: : 1
asyncio.TimeoutError : 2
asyncio.InvalidStateError : 2
concurrent.futures.* : 1
bpo-1230540: : 1
bpo-36996: : 1
"unittest.mock.patch()" : 2
bpo-37008: : 1
"unittest.mock.mock_open()" : 3
bpo-27737: : 1
bpo-36969: : 2
PDB : 2
bpo-36983: : 1
"typing.__all__": : 1
bpo-36972: : 1
SupportsIndex : 1
bpo-32972: : 1
asyncio-based : 4
bpo-36952: : 2
**bufsize** : 1
**mode** : 2
**openhook** : 1
3.9; : 1
bpo-36949: : 1
bpo-36948: : 1
"urllib.request.URLopener.retrieve()" : 1
bpo-33524: : 1
Licht : 3
Takeuchi : 3
(@Licht-T) : 1
bpo-24564: : 1
"shutil.copystat()" : 2
"errno.EINVAL" : 4
"os.setxattr()" : 1
Rodola : 3
Ying : 1
bpo-36888: : 1
multiprocessing.process.parent_process : 1
bpo-36921: : 1
"@coroutine" : 1
sake : 14
bpo-25652: : 1
bpo-36916: : 1
writer.write() : 1
writer.drain() : 5
bpo-36889: : 1
"asyncio.Stream" : 4
"asyncio.StreamReader" : 2
"asyncio.StreamWriter" : 2
writeonly : 1
readwrite : 1
"asyncio.connect()" : 1
"asyncio.connect_unix()" : 1
"asyncio.connect_read_pipe()" : 1
"asyncio.connect_write_pipe()" : 1
"asyncio.StreamServer" : 1
"UnixStreamServer" : 2
"asyncio.FlowControlMixing" : 1
"asyncio.StreamReaderProtocol" : 1
bpo-36845: : 1
bpo-23378: : 1
argparser : 1
bpo-36867: : 2
SharedMemoryManager : 4
resource_tracker : 2
bpo-23896: : 1
lib2to3.pygram : 1
bpo-36895: : 1
bpo-35545: : 1
resolutions : 1
bpo-36887: : 1
bpo-34632: : 1
"ast.parse" : 1
non-alphanumeric : 5
formations : 1
bpo-36778: : 1
65001) : 1
"utf_8" : 2
multiprocessing.resource_tracker : 1
multiprocessing.semaphore_tracker : 2
shared_memory : 6
bpo-30262: : 1
bpo-24538: : 1
writeable : 12
bpo-36832: : 1
pathlib-compatible : 1
bpo-36814: : 1
os.posix_spawnp() : 1
file_actions : 1
bpo-33110: : 1
add_done_callback : 1
bpo-26903: : 1
Limit : 6
"max_workers" : 2
61 : 1
WaitForMultipleObjects : 1
bpo-36813: : 1
"QueueListener" : 13
"queue.task_done()" : 1
bpo-36806: : 1
bpo-36802: : 1
StreamWriter.write() : 1
StreamWriter.close() : 1
bpo-36801: : 1
StreamWriter.drain() : 1
bpo-36785: : 1
574 : 1
(pickle : 1
buffers) : 1
bpo-36772: : 1
bpo-6584: : 1
bpo-36748: : 1
bpo-8138: : 1
"wsgiref.simple_server.SimpleServer" : 1
"wsgiref.simple_server.WSGIServer" : 1
bpo-22640: : 1
bpo-29183: : 1
"wsgiref.handlers.BaseHandler" : 2
bpo-36548: : 1
bpo-36542: : 1
bpo-36533: : 1
Reinitialize : 1
logging.Handler : 2
acquire/release : 1
acquisition : 4
bpo-35252: : 1
Throw : 1
AssertionError : 10
singledispatch : 3
bpo-35900: : 2
6-item : 2
state-setting : 1
"__setstate__" : 3
registration : 17
_pickle.c : 1
Pickler's : 1
"reducer_override" : 1
bpo-36368: : 1
ctrl-c : 1
(KeyboardInterrupt) : 1
bpo-27497: : 1
"csv.DictWriter.writeheader()" : 1
"csv.Writer.writerow()" : 1
Ashish : 1
Nitin : 1
Patil : 1
bpo-36239: : 1
.mo : 2
#-#-#-#-# : 1
bpo-26707: : 1
KeyedArchive : 1
0x80 : 3
bpo-35125: : 1
Asyncio: : 1
shield : 1
bpo-35721: : 1
"asyncio.SelectorEventLoop.subprocess_exec()" : 1
"stdin=subprocess.PIPE" : 1
bpo-31855: : 1
read([size]) : 1
bpo-35431: : 1
binomial : 3
coefficient : 23
bpo-26660: : 1
"TemporaryDirectory.cleanup()" : 1
non-writeable : 1
non-searchable : 1
bpo-34271: : 1
SSLKEYLOGFILE : 1
var : 13
bpo-26467: : 1
bpo-33569: : 1
dataclasses.InitVar: : 1
Exposes : 1
bpo-34424: : 1
policy.linesep : 1
multi-character : 3
Troeger : 1
bpo-34303: : 1
bpo-33361: : 1
"codecs.StreamRecoder" : 1
bpo-22454: : 1
bpo-31922: : 1
"asyncio.AbstractEventLoop.create_datagram_endpoint()": : 1
broadcast : 13
replies : 2
bpo-24882: : 1
spinning : 1
bpo-31961: : 2
bpo-33123: : 1
"pathlib.Path.unlink" : 1
*missing_ok* : 4
Buchholz : 1
bpo-32941: : 1
madvise() : 2
"mmap.mmap.madvise()") : 1
bpo-22102: : 1
disks : 2
Francisco : 2
Facioni : 1
bpo-32515: : 1
trace.py : 1
--module : 1
module_name : 2
bpo-32299: : 1
"unittest.mock.patch.dict()" : 2
patched : 15
Vadim : 1
Tsander : 1
bpo-27141: : 1
"__copy__()" : 2
"collections.UserList" : 1
"collections.UserDict" : 1
bpo-31829: : 1
"\0" : 2
"\x1a" : 1
(end-of-file : 1
bpo-23395: : 1
bpo-36896: : 1
bpo-36686: : 1
"asyncio.subprocess_exec" : 1
std* : 1
bpo-36984: : 1
bpo-36868: : 1
SSLContext.hostname_checks_common_name : 3
SSLContext.host_flags : 1
bpo-35924: : 1
"curses.addstr()" : 1
bpo-36783: : 1
Time_FromTimeAndFold : 1
PyDateTime_FromDateAndTimeAndFold : 1
495 : 1
Edison : 2
Abahurire : 2
pruned : 2
bpo-22865: : 1
"pty.spawn" : 2
bpo-35397: : 1
urllib.parse.unwrap() : 1
bpo-32995: : 1
bpo-33519: : 1
bpo-33482: : 1
"codecs.StreamRecoder.writelines" : 1
bpo-25735: : 1
bpo-20285: : 1
Expand : 3
object.__doc__ : 1
(docstring) : 1
pydoc.py : 1
help(object) : 1
class.) : 2
test_coroutines : 1
test_cprofile : 1
test_generators : 1
test_raise : 1
test_yield_from : 1
"test.support.catch_unraisable_exception()" : 1
"test.support.captured_stderr()" : 1
bpo-37098: : 1
test_memfd_create : 1
Kernels : 2
bpo-37081: : 1
bpo-36915: : 1
(CTRL+c) : 1
bpo-36719: : 2
(CHILD_ERROR : 1
--failfast : 2
bpo-36816: : 1
Lib/test/selfsigned_pythontestdotnet.pem : 1
self-signed.pythontest.net's : 1
bpo-35925: : 1
httplib : 3
bpo-36782: : 1
bpo-36342: : 1
test_multiprocessing : 1
test_venv : 1
functioning : 5
sem_open : 2
bpo-36721: : 1
bpo-36786: : 1
bpo-36965: : 1
STATUS_CONTROL_C_EXIT : 1
MSC : 4
bpo-35926: : 1
1.1.1b : 1
bpo-29883: : 1
bpo-33407: : 1
bpo-36231: : 1
/usr/include : 1
10.14 : 1
bpo-35610: : 1
.context_use_ps1 : 1
.prompt_last_line : 1
bpo-31858 : 1
bpo-37038: : 1
idlelib.run : 1
runnable; : 1
bpo-36958: : 1
bpo-36807: : 1
os.fsync() : 1
USB : 1
bpo-32411: : 1
browser.py : 3
extraneous : 9
bpo-37053: : 1
u"bar" : 1
Tools/parser/unparse.py : 3
Chih-Hsuan : 1
Configuration" : 2
bpo-36379: : 1
*modulo* : 2
"__ipow__" : 1
bpo-37107: : 1
"PyObject_CallMethodObjArgs()" : 4
"_PyObject_CallMethodIdObjArgs" : 1
"_PyObject_GetMethod" : 1
Sullivan : 1
590**: : 1
"Py_Exit(exitcode)" : 1
behaving : 7
bpo-36728: : 1
2019-05-06* : 1
bpo-36742: : 1
mishandling : 2
pre-normalization : 1
urlsplit() : 2
bpo-30458: : 1
CVE-2019-9740 : 1
http.client.InvalidURL : 2
bpo-35755: : 2
"os.confstr("CS_PATH")" : 3
"posixpath.defpath" : 1
bpo-36722: : 1
bpo-32849: : 1
(fd : 1
bpo-36623: : 1
bpo-20180: : 1
"dict.pop()" : 1
bpo-36611: : 2
allocators: : 4
serialno : 1
"PYMEM_DEBUG_SERIALNO" : 2
bpo-36588: : 1
bpo-36549: : 1
str.capitalize : 1
titlecase : 5
bpo-36540: : 1
bpo-36475: : 1
bpo-36504: : 1
_ctypes.c's : 2
"PyCArrayType_new()" : 2
bpo-20844: : 1
bpo-36452: : 1
deleted/added : 1
"len(dict)" : 1
bpo-36459: : 1
"PyMem_FREE()" : 1
tokenizer.c's : 1
"tok_nextc()" : 1
bpo-36433: : 1
classmethoddescr_call : 1
bpo-36430: : 1
bpo-36440: : 1
"ParserError" : 2
Skrobov : 1
Tokens : 2
bpo-18372: : 1
bpo-35952: : 1
pythoninfo : 1
bpo-28238: : 1
"{ns}*" : 1
bpo-26978: : 1
"pathlib.path.link_to()" : 1
bpo-1613500: : 1
"inplace=True" : 2
bpo-36734: : 1
"faulthandler.c" : 1
"stack_t : 1
current_stack" : 1
"memset()" : 1
bpo-13611: : 1
bpo-36669: : 1
weakref.proxy : 1
bpo-36676: : 1
XMLParser() : 4
bpo-36673: : 1
bpo-36650: : 1
bpo-28552: : 1
"project_base" : 1
"distutils.spawn.find_executable()" : 2
"os.defpath" : 4
bpo-25430: : 1
"IPNetwork.__contains__()" : 1
bpo-30485: : 1
"{namespace}tag" : 2
notation) : 2
bpo-36613: : 1
wait() : 7
bpo-36598: : 1
"dev") : 1
bpo-36575: : 1
"gettimeofday(2)" : 1
"perf_counter()" : 2
bpo-33461: : 1
"json.loads" : 2
bpo-36559: : 1
lean : 1
_sha512 : 1
seed(version=2) : 1
bpo-17561: : 1
backlog=None : 2
socket.create_server : 1
bpo-34373: : 2
"time.mktime()" : 3
1970 : 8
bpo-36232: : 1
Rougeth : 1
bpo-36050: : 1
bpo-36522: : 1
*debuglevel* : 3
>0 : 2
Houglum : 1
bpo-36492: : 1
"func") : 1
bpo-27181: : 3
statistics.geometric_mean() : 1
bpo-30427: : 1
"os.path.normcase()" : 3
Redundant : 3
"posixpath.normcase()" : 1
Maier : 4
bpo-36385: : 1
octets : 4
ambiguously : 1
Octets : 2
zeroes : 11
bpo-36434: : 1
bpo-36407: : 1
CDATA : 15
xml.dom.minidom : 7
Surjaninov : 1
bpo-36326: : 1
inspect.getdoc() : 4
bpo-36366: : 1
"stop()" : 13
unstarted : 1
bpo-36348: : 1
test_time : 1
faiures : 1
bpo-36227: : 1
"xml_declaration" : 1
ElementTree.tostring() : 1
ElementTree.tostringlist() : 1
bpo-36004: : 1
bpo-35936: : 1
"modulefinder.ModuleFinder" : 1
bpo-35376: : 1
bpo-17396: : 1
bpo-35934: : 1
bpo-23078: : 1
Felipe : 1
Ochoa : 1
bpo-35416: : 1
bpo-25451: : 1
bpo-35082: : 1
bpo-34547: : 1
abrupt : 2
terminations : 1
bpo-31658: : 1
"xml.sax.parse()" : 1
bpo-34139: : 1
stale : 3
bpo-33530: : 1
"asyncio.create_connection()" : 1
bpo-33291: : 1
isgeneratorfunction : 1
iscoroutinefunction : 1
isasyncgenfunction : 1
bpo-31310: : 3
bpo-31292: : 1
--restructuredtext" : 1
"include" : 3
bpo-36625: : 1
fractions.Fraction : 1
bpo-30840: : 1
bpo-36523: : 1
io.IOBase.writelines() : 1
bpo-36425: : 1
translation: : 1
bpo-36345: : 2
"Tools/scripts/serve.py" : 3
"literalinclude" : 1
wsgiref-based : 1
bpo-36157: : 1
Documention : 1
PyInterpreterState_Main() : 1
bpo-33043: : 1
docs.python.org : 2
'Contributing : 1
Docs' : 1
(between : 1
'Reporting : 1
Bugs' : 1
'About : 1
Documentation') : 1
'Found : 1
Bug' : 1
bpo-35581: : 1
@typing.type_check_only : 2
bpo-33832: : 1
'magic : 1
method' : 4
bpo-32913: : 1
re.Match.groupdict : 1
uncollectable : 6
"-jN/--multiprocess : 1
N" : 2
bpo-36725: : 1
(-jN) : 1
bpo-36454: : 1
test_time.test_monotonic() : 1
elapsed : 13
test_cyclic_gc() : 1
bpo-36635: : 2
bpo-36629: : 1
"test_imap4_host_default_value()" : 1
"test_imaplib": : 1
"errno.ENETUNREACH" : 1
"test_sys.test_getallocatedblocks()" : 1
bpo-36560: : 1
hunting : 9
count) : 8
warmup : 2
hunt : 2
bpo-36565: : 1
("python3 : 1
3:3") : 1
test_resource : 1
RLIMIT_FSIZE : 1
RLIMIT_CPU : 1
test_tabnanny : 1
bpo-36436: : 1
"_testcapi.pymem_buffer_overflow()": : 1
test_utf8_mode : 1
bpo-36341: : 1
PermissionError : 10
bpo-36747: : 1
scriptsinstall : 1
bpo-21536: : 1
python-config : 4
python-config.py : 1
bpo-36707: : 1
--with-pymalloc" : 1
(sys.implementation.cache_tag) : 1
"PyAPI_FUNC(type)" : 1
"PyAPI_DATA(type)" : 1
"pyport.h" : 1
internals: : 1
PyInit_xxx() : 1
bpo-36618: : 1
"-fmax-type-align=8" : 1
MOVAPS : 1
Instruct : 1
MOVUPS : 1
SIGSEGV : 2
bpo-36605: : 1
tags" : 1
TAGS" : 1
"Modules/_io/*.c" : 1
"Modules/_io/*.h" : 1
bpo-36465: : 1
--with-trace-refs" : 1
bpo-36577: : 1
bpo-36544: : 1
bpo-36146 : 1
bpo-36508: : 1
"python-config : 1
--ldflags" : 1
"LINKFORSHARED" : 2
bpo-36503: : 1
"aix3" : 1
"aix4" : 1
bpo-35920: : 1
platform.win32_edition() : 2
platform.win32_is_iot() : 2
ARM32 : 3
IoT : 3
bpo-36649: : 1
bpo-34144: : 1
chcp.com : 1
Lorenz : 2
Mende : 1
bpo-36509: : 1
preset-iot : 1
on-target : 1
cross-compiled : 4
bpo-35941: : 1
enum_certificates : 1
stores: : 1
enterprise : 1
ssl.enum_crls() : 1
bpo-36441: : 1
bpo-36085: : 1
"os.add_dll_directory()" : 1
bpo-36010: : 1
bpo-29515: : 1
IPPROTO_AH : 1
IPPROTO_CBT : 1
IPPROTO_DSTOPTS : 1
IPPROTO_EGP : 1
IPPROTO_ESP : 1
IPPROTO_FRAGMENT : 1
IPPROTO_GGP : 1
IPPROTO_HOPOPTS : 1
IPPROTO_ICLFXBM : 1
IPPROTO_ICMPV6 : 1
IPPROTO_IDP : 1
IPPROTO_IGMP : 1
IPPROTO_IGP : 1
IPPROTO_IPV4 : 1
IPPROTO_IPV6 : 1
IPPROTO_L2TP : 1
IPPROTO_MAX : 1
IPPROTO_ND : 1
IPPROTO_NONE : 1
IPPROTO_PGM : 1
IPPROTO_PIM : 1
IPPROTO_PUP : 1
IPPROTO_RDP : 1
IPPROTO_ROUTING : 1
IPPROTO_SCTP : 1
IPPROTO_ST : 1
bpo-35947: : 1
cpython-source-deps : 1
_ctypes : 7
bpo-34060: : 1
Kloth : 1
bpo-31512: : 1
Creators : 2
non-elevated : 1
bpo-18075 : 1
bpo-36429: : 1
pyshell : 2
idlelib.pyshell : 1
top; : 1
__name__=='__main__' : 1
bpo-14546: : 1
Tools/scripts/lll.py : 1
"Py_SetStandardStreamEncoding()": : 1
bpo-36641: : 1
PyDoc_VAR(name) : 1
PyDoc_STRVAR(name : 2
name[]" : 2
"CLEANBYTE" : 1
"DEADDYTE" : 1
"FORBIDDENBYTE" : 1
("PyMem_SetupDebugHooks()" : 1
"0xFB" : 2
"0xCD" : 3
"0xDD" : 3
"0xFD" : 3
bpo-36443: : 1
coerced : 15
(opt-in) : 1
"_Py_PreInitialize()" : 1
"_PyPreConfig" : 1
bpo-36025: : 1
"PyDate_FromTimestamp()" : 1
backwards-incompatible : 1
bpo-35810: : 1
"PyObject_Init" : 1
heap- : 3
tp_dealloc : 6
2019-03-25* : 1
bpo-36216: : 1
(NFKC- : 1
normalization) : 2
bpo-35121: : 2
"http.cookiejar.DefaultCookiePolicy" : 1
bpo-36421: : 1
bpo-36412: : 1
bpo-36398: : 1
"structseq_repr()" : 1
bpo-36256: : 1
parsermodule : 1
DFA : 2
arcs : 1
bpo-36365: : 1
repr(structseq) : 1
bpo-36374: : 1
"merge_consts_recursive()" : 1
bpo-36236: : 1
prepended : 31
bpo-36352: : 1
bpo-36301: : 1
bpo-36333: : 1
_PyRuntimeState_Fini : 1
bpo-36332: : 1
bpo-36282: : 1
bpo-30040: : 1
"dict.clear()" : 1
bpo-36262: : 1
"_Py_dg_strtod()" : 1
"float(str)" : 1
"complex(str)" : 1
"marshal.load()" : 1
bpo-36252: : 1
12.0.0 : 1
bpo-36218: : 1
bpo-36188: : 1
left-over : 1
vestiges : 1
Martijn : 6
Pieters : 6
bpo-36124: : 1
interpreter-specific : 4
PyInterpreterState_GetDict() : 1
parallels : 4
PyThreadState_GetDict() : 1
PyModule_GetState() : 1
(documented) : 2
(hidden) : 1
tweaking : 3
hacks : 3
recognizes.) : 1
bpo-36048: : 1
bpo-35808: : 1
Retire : 1
pgen2 : 1
bpo-36401: : 1
bpo-36320: : 1
typing.NamedTuple() : 1
_field_types : 1
__annotations__ : 2
bpo-34745: : 1
statistics.NormalDist : 3
collections.namedtuple() : 5
typing.NamedTuple : 2
"_field_defaults" : 3
"_fields_defaults" : 1
bpo-36297: : 1
bpo-36298: : 1
ModuleNotFoundError : 5
'mental' : 1
bpo-36268: : 1
tars : 1
mod:"tarfile" : 1
POSIX.1-2001 : 7
bpo-36285: : 1
Stephan : 4
Hohe : 4
_signal : 1
bpo-36272: : 1
bpo-36280: : 1
ast.Constant : 1
literal) : 1
bpo-35931: : 2
bpo-36251: : 1
stderrprinter : 1
re.Match : 4
bpo-36235: : 1
"customize_compiler()" : 1
"distutils.sysconfig": : 1
bpo-35807: : 1
19.0.3 : 1
40.8.0 : 1
bpo-36139: : 1
bpo-36179: : 1
_hashopenssl : 3
out-of-memory : 3
bpo-36169: : 1
overlap() : 1
Computes : 8
overlapping : 12
bpo-36103: : 1
bpo-36130: : 1
"skip=..." : 1
bpo-35652: : 1
shutil.copytree(copy_function=...) : 1
DirEntry : 3
bpo-35178: : 1
"warnings.formatwarning()" : 4
Tashrif : 1
Billah : 1
bpo-36106: : 1
clash : 9
libm's : 1
sinpi() : 1
Dmitrii : 1
Pasechnik : 1
bpo-36091: : 1
Lib/types : 1
Henry : 1
Chen : 1
bpo-36043: : 1
"FileCookieJar" : 7
bpo-35899: : 1
'α' : 1
'א') : 1
Assisted : 1
bpo-21269: : 1
Akshay : 1
bpo-30670: : 1
"pprint.pp" : 1
"pprint.pprint" : 1
"pprint.pformat" : 1
bpo-35843: : 1
"_NamespacePath" : 1
bpo-35802: : 1
"os.stat" : 1
"os.lstat" : 1
"os.chmod" : 4
bpo-35715: : 1
Librates : 1
_process_worker : 1
bpo-35493: : 1
0.2 : 5
bpo-35661: : 1
pyvenv.cfg : 2
cookie's : 1
bpo-35198: : 1
Doc/ : 2
serve" : 1
bpo-36138: : 1
datetime.timedelta : 3
scalars : 1
bpo-21314: : 1
explaines : 1
bpo-36234: : 1
test_posix.PosixUidGidTests: : 1
(str) : 7
bpo-29571: : 3
"test_re.test_locale_flag()": : 1
bpo-36123: : 1
test_socket : 2
bpo-36356: : 1
bpo-36146: : 2
"TEST_EXTENSIONS" : 1
"/usr/include/ffi" : 1
cross-build : 2
bpo-36312: : 1
pages: : 1
50220 : 1
50221 : 1
50222 : 1
50225 : 1
50227 : 1
50229 : 1
57002 : 1
57011 : 1
65000 : 1
bpo-36264: : 1
"os.path.expanduser" : 1
bpo-24643: : 1
"#define : 3
_timezone" : 1
PC/pyconfig.h : 1
bpo-36405: : 1
bpo-36396: : 1
fgBg : 1
idlelib.config.GetHighlight() : 1
bpo-36176: : 1
popup : 1
darken : 1
background) : 2
bpo-23205: : 1
findfiles : 3
refactor : 7
os.walk : 2
bpo-23216: : 1
bpo-36152: : 1
colorizer.ColorDelegator.close_when_done : 1
.close() : 1
bpo-32129: : 1
bpo-36096: : 1
colorizer : 7
bpo-30348: : 1
idlelib.autocomplete : 1
bpo-35132: : 1
py-list : 1
py-bt : 3
gdb7 : 1
bpo-32217: : 1
bpo-36381: : 1
bpo-36142: : 1
coreconfig.h : 1
Py_LIMITED_API : 13
pycore_coreconfig.h : 1
2019-02-25* : 1
bpo-36052: : 1
bpo-36012: : 1
dunder : 2
bpo-35942: : 1
"__fspath__" : 3
"PathLike" : 10
bpo-36016: : 1
"gc.get_objects" : 2
bpo-1054041: : 1
^C : 1
bpo-35992: : 1
non-subscriptable : 1
bpo-35993: : 1
bpo-35991: : 1
Modules/_randommodule.c : 1
bpo-35961: : 1
slice_richcompare(): : 1
bpo-35911: : 1
"cell.__new__" : 1
"cell" : 4
"Lib/types.py" : 1
CellType : 1
bpo-12822: : 1
"pthread_condattr_setclock" : 1
"CLOCK_MONOTONIC" : 3
bpo-15248: : 1
bpo-35886: : 1
PyInterpreterState : 9
(guarded : 1
Py_BUILD_CORE) : 1
bpo-31506: : 3
"object.__new__" : 1
"object.__init__" : 1
bpo-35724: : 1
Signal-handling : 1
bpo-33608: : 1
_Py_AddPendingCall() : 1
Py_AddPendingCall() : 1
bpo-33989: : 1
"ob_type->tp_richcompare : 1
NULL" : 4
bpo-35512: : 1
bpo-36018: : 1
composite : 4
bpo-35904: : 1
bpo-35918: : 1
"has_key" : 2
multiprocessing.managers.SyncManager.dict : 1
bpo-18283: : 1
bpo-35960: : 1
"dataclasses.field()" : 2
bpo-35500: : 1
"unittest.mock.Mock.assert_called_with()" : 1
Susan : 1
bpo-24209: : 2
getaddrinfo : 4
dual-stack : 3
bpo-35321: : 1
"_frozen_importlib" : 1
"_frozen_importlib_external" : 1
Nina : 1
Zakharenko : 1
bpo-35378: : 1
bpo-34294: : 1
bpo-35615: : 1
"weakref": : 1
disappearing : 4
bpo-35606: : 1
bpo-32417: : 1
"datetime.datetime.now()" : 1
"datetime.fromtimestamp()" : 2
"tz" : 2
*also* : 3
bpo-35153: : 1
"xmlrpc.client.Transport" : 1
"xmlrpc.client.SafeTransport" : 1
bpo-34572: : 1
pickle.loads : 1
importlib's : 3
Burgess : 1
bpo-36083: : 1
manpage : 2
Synopsis : 1
bpo-36007: : 1
sphinx : 6
bpo-22062: : 1
bpo-27313: : 1
test_ttk_guionly : 1
ComboboxTest : 1
Cocoa : 4
bpo-36019: : 1
test.support.TEST_HTTP_URL : 2
http://www.example.com : 2
bpo-36037: : 1
RHEL8 : 1
bpo-35798: : 1
"test.support.check_syntax_warning()" : 1
bpo-35505: : 1
test_imap4_host_default_value : 1
bpo-35917: : 1
multiprocessing: : 3
SyncManager : 1
shareable : 1
bpo-35704: : 1
"test_shutil.test_unpack_archive_xztar" : 1
MAXDATA : 1
0x20000000 : 1
(aixtools) : 1
bpo-34720: : 1
Assert : 19
m_state : 1
bpo-35976: : 1
PCBuild : 1
bpo-35692: : 1
bpo-35872: : 1
bpo-35873: : 1
bpo-35299: : 1
pyconfig.h : 1
bpo-24310: : 1
bpo-35833: : 1
bpo-35689: : 1
unittests : 1
colorizer.py : 1
2019-02-03* : 1
bpo-35746: : 1
[CVE-2019-5010] : 1
deref : 1
DP : 1
(TALOS-2018-0758) : 1
Nicolas : 1
Edet : 1
Cisco : 2
bpo-34812: : 1
(run : 1
"-I") : 3
bpo-34791: : 1
xml.dom.domreg : 1
sys.flags.ignore_environment : 1
bpo-17239: : 1
ENTITY : 1
bpo-34623: : 1
CVE-2018-14647: : 1
_elementtree : 1
_Py_HashSecret : 1
libexpat's : 1
CSPRNG : 1
bpo-34405: : 2
1.1.0i : 2
bpo-33871: : 2
*trailers* : 4
bpo-32533: : 1
bpo-33136: : 2
Harden : 2
CVE-2018-8970 : 2
X509_VERIFY_PARAM_set1_host() : 3
namelen : 2
bpo-33001: : 3
os.symlink : 4
bpo-32981: : 3
Regexes : 3
regexes : 5
vectors : 6
(REDOS) : 3
CVE-2018-1060 : 3
CVE-2018-1061 : 3
Jamie : 3
bpo-28414: : 3
IDN : 4
en/decoding : 2
bpo-35877: : 1
"x: : 1
right) : 8
(Off : 1
default.) : 1
[typed_ast](https://github.com/python/typed_ast) : 1
bpo-35713: : 2
Reorganize : 1
bpo-33416: : 1
bpo-35720: : 1
pymain_parse_cmdline_impl : 1
Modules/main.c : 1
bpo-35634: : 1
"func(**kwargs)" : 1
bpo-35623: : 1
bpo-35214: : 3
Sanitizer : 2
instrumentation : 1
test_io : 1
bpo-35560: : 1
bpo-35552: : 1
"PyBytes_FromFormat()" : 3
*precision* : 5
bpo-35504: : 2
"SystemError"s : 1
characters_written : 2
bpo-35494: : 1
unbalanced : 3
bpo-35444: : 1
"getattr" : 1
bpo-35436: : 1
bpo-35423: : 1
Separate : 3
"pending : 3
calls" : 2
insignificant : 2
bpo-35357: : 1
attributes' : 2
unittest.mock._Call : 4
unittest.mock.MagicProxy : 1
from_kall) : 1
_mock_ : 1
bpo-35372: : 1
undecodable : 9
bpo-35336: : 1
PYTHONCOERCECLOCALE=1 : 1
bpo-31241: : 1
*col_offset* : 3
bpo-33954: : 1
"float.__format__()" : 1
"complex.__format__()" : 1
bpo-35269: : 1
(assignment : 2
bpo-32492: : 1
1.6x : 1
"'\N'" : 2
clang's : 1
bpo-35193: : 1
bpo-35169: : 1
bpo-34022: : 2
bpo-28401: : 1
Stefano : 1
Rivera : 1
bpo-29341: : 1
bpo-35050: : 1
"socket": : 1
bpo-29743: : 4
"_length_" : 3
"ctypes.Array" : 1
bpo-16806: : 1
bpo-35029: : 1
bpo-34983: : 1
"symtable.Symbol.is_nonlocal()" : 1
bpo-34974: : 1
"KeyboardInterrupt") : 1
bpo-34939: : 1
bpo-34973: : 1
bpo-34876: : 1
bpo-34879: : 1
bytesobject.c : 1
bpo-34784: : 1
PyStructSequence_NewType : 1
StructSequences : 1
bpo-34854: : 1
bpo-34850: : 1
ints) : 1
bpo-34824: : 1
Modules/_ssl.c : 1
bpo-30156: : 1
"property_descr_get()" : 1
"cached" : 1
bpo-34762: : 1
bpo-34751: : 1
xxHash : 1
(formerly) : 1
bpo-34735: : 1
Modules/timemodule.c : 1
bpo-34683: : 1
bpo-34651: : 1
bpo-34653: : 1
PyParser_SimpleParseStringFilename : 1
bpo-32236: : 1
"buffering=1" : 1
bpo-34641: : 1
bpo-34637: : 1
*sum()* : 1
bpo-1621: : 3
behavior) : 4
bpo-34588: : 1
pruning : 2
bpo-34485: : 4
setlocale(LC_CTYPE : 1
"") : 3
setlocale(LC_ALL : 1
disabled) : 2
sys.stdout: : 1
PYTHONIOENCODING=":" : 1
_bootlocale : 1
bpo-34527: : 2
Py_DecodeLocale() : 6
Py_EncodeLocale() : 2
bpo-34403: : 1
sys.getfilesystemencoding() : 2
"ascii" : 2
"roman8" : 1
coerced) : 1
bpo-34523: : 2
bpo-12458: : 1
Tracebacks : 3
subexpression : 2
bpo-34408: : 1
leakage : 1
"PyInterpreterState_New()" : 2
bpo-34400: : 1
bpo-33073: : 1
as_integer_ratio : 1
interoperable : 5
bpo-34377: : 1
valgrind : 1
"_PyObject_Free"/"_PyObject_Realloc" : 1
"PyObject_Free"/"PyObject_Realloc" : 1
bpo-34353: : 1
bpo-34320: : 1
"dict(od)" : 1
bpo-34113: : 1
Constantin : 1
Petrisor : 1
bpo-34100: : 1
bpo-34151: : 1
bpo-34170: : 1
dev: : 1
bpo-33237: : 1
bpo-34149: : 1
min : 4
max : 8
bpo-34125: : 1
bpo-34141: : 1
(None : 5
bpo-34126: : 1
bpo-24618: : 1
varnames : 1
bpo-34068: : 1
"io.IOBase.close()" : 1
bpo-34087: : 1
bpo-34080: : 1
tokenizing : 7
bpo-34066: : 1
Disabled : 2
**with** : 2
open()" : 1
bpo-34042: : 1
dict.copy() : 3
sys.gettotalrefcount()) : 1
bpo-33418: : 1
bpo-33985: : 1
contextvars.ContextVar.name : 1
bpo-33956: : 1
2.2.5 : 1
bpo-24596: : 1
Decref : 1
bpo-33451: : 1
bpo-1617161: : 1
"BuiltinMethodType" : 1
(methods : 5
*__self__* : 2
"ModuleType" : 1
"str.__add__") : 1
bpo-33824: : 1
"LC_ALL=C : 1
-V": : 1
bpo-33803: : 2
hamt.c : 2
hadn't : 2
bpo-33738: : 1
Seven : 1
bpo-33786: : 2
bpo-30167: : 4
"PyRun_SimpleFileExFlags" : 1
bpo-33706: : 2
Gohlke : 2
bpo-33597: : 1
bpo-30654: : 3
SIG_DFL : 4
Philipp : 5
Kerling : 3
bpo-33622: : 3
"gc.garbage" : 5
bpo-33462: : 1
bpo-23722: : 6
bpo-33499: : 1
"pycache_prefix" : 1
bpo-25711: : 1
bpo-33509: : 2
module_globals : 4
warnings.warn_explicit(): : 2
bpo-31849: : 3
signed/unsigned : 3
pyhash.c : 3
bpo-33475: : 2
bpo-20104: : 5
"setpgroup" : 1
"resetids" : 1
"setsigmask" : 1
"setsigdef" : 1
"posix_spawn" : 2
bpo-33391: : 3
set_symmetric_difference() : 3
bpo-33363: : 2
bpo-28055: : 3
siphash24() : 3
Eike : 3
Beer : 3
bpo-33128: : 2
PathFinder : 2
sys.meta_path : 4
bpo-33331: : 1
bpo-33312: : 2
ubsan : 2
(undefined : 3
sanitizer) : 2
dictobject.c : 2
_dictkeysobject : 2
bpo-33305: : 1
bpo-33306: : 1
bpo-33234: : 1
pre-size : 1
over-allocate : 1
bpo-33270: : 1
bpo-30455: : 1
"Grammar/Tokens" : 2
bpo-33176: : 1
"toreadonly()" : 1
bpo-33231: : 3
"normalizestring()" : 3
bpo-33205: : 2
"round_up_to_power_2(used*2+hashtable_size/2)" : 2
"round_up_to_power_2(used*3)" : 2
shrinked : 4
"used : 2
bpo-29922: : 3
'async : 11
with' : 4
non-awaitable : 3
bpo-33199: : 3
"ma_version_tag" : 3
key-sharing : 4
bpo-33053: : 2
*starting* : 2
bpo-33138: : 1
non-pickleable : 1
non-copyable : 1
"cannot : 13
pickle" : 3
serialize" : 1
bpo-33018: : 2
non-class : 2
bpo-33083: : 1
"math.factorial" : 1
bpo-33041: : 4
issues: : 1
Jumping : 2
corrupts : 3
bpo-25750: : 1
"type_getattro()" : 2
bpo-33026: : 3
bpo-33005: : 2
_PyGILState_Reinit() : 2
_PyInterpreterState_Enable() : 2
RAW : 2
bpo-32911: : 2
bpo-29463 : 2
"docstring" : 3
ClassDef : 3
FunctionDef : 3
AsyncFunctionDef : 3
3.7a1 : 3
bpo-17288: : 3
'return' : 4
'exception' : 4
bpo-32946: : 1
bpo-32932: : 1
revealing : 5
non-str : 1
bpo-32925: : 1
non-constants: : 1
b]" : 3
bpo-32889: : 3
"Py_ADDRESS_IN_RANG" : 3
"address_in_range" : 3
bpo-32836: : 2
list/dict/set : 2
bpo-31356: : 2
bpo-31356 : 2
(gc.ensure_disabled() : 2
bpo-32305: : 2
bpo-32303: : 2
bpo-32711: : 2
Python/ast_unparse.c : 2
bpo-32583: : 3
out-of-bound : 3
bpo-32489: : 1
bpo-17611: : 1
bpo-32285: : 1
unicodedata.is_normalized : 1
bpo-10544: : 2
bpo-32117: : 1
*rest" : 1
bpo-31902: : 1
"ast.AsyncFor" : 1
"ast.AsyncFunctionDef" : 1
"ast.AsyncWith" : 1
bpo-25862: : 1
bpo-21983: : 3
"ctypes.cast()" : 3
bpo-31577: : 1
"os.utime()" : 2
ns : 2
bpo-29832: : 1
'getsockaddrarg' : 1
bpo-35845: : 1
'order' : 1
memoryview.tobytes() : 1
bpo-35864: : 1
_asdict() : 1
collections.namedtuple : 2
bpo-35537: : 3
ExitStack : 7
bpo-35847: : 1
RISC-V : 1
CTYPES_PASS_BY_REF_HACK : 1
test_pass_by_value : 1
bpo-35813: : 1
bpo-35780: : 1
lru_cache() : 5
orphan : 1
trapped : 14
maxsize : 6
toggling : 1
"full" : 2
misordering : 1
Sync-up : 1
lru : 1
misses : 2
"os.posix_spawnp()" : 2
*setsid* : 3
bpo-23846: : 1
"asyncio.ProactorEventLoop" : 1
bpo-34323: : 1
"IocpProactor.close()" : 1
log: : 2
bpo-35674: : 1
bpo-35733: : 1
"ast.Constant(boolean)" : 1
"ast.Num" : 2
bpo-35726: : 1
QueueHandler.prepare() : 1
enqueueing : 1
bpo-35719: : 1
atan2() : 1
copysign() : 1
remainder() : 1
hypot() : 1
1.3--2.5 : 1
bpo-35717: : 1
bpo-35699: : 1
bpo-32710: : 3
overlapped : 2
bpo-35702: : 1
"time.CLOCK_UPTIME_RAW" : 1
"ReadFile()" : 1
"WSASend()" : 1
immediately: : 2
bpo-35682: : 1
"asyncio.ProactorEventLoop.sendfile()": : 1
bpo-35283: : 1
bpo-35664: : 1
operator.itemgetter() : 1
bpo-35643: : 1
SyntaxWarning: : 1
Modules/_sha3/cleanup.py : 1
bpo-35619: : 1
bpo-28503: : 1
"crypt_r()" : 1
"crypt()" : 3
bpo-35614: : 1
bpo-35568: : 1
"raise(signum)" : 1
"raise_signal" : 1
bpo-35588: : 1
2--4x : 1
bpo-35585: : 1
http.HTTPStatus(200) : 1
bpo-30561: : 1
random.gammavariate(1.0 : 1
random.expovariate(1.0 : 1
synchronizes : 1
idiosyncrasies : 2
bpo-35526: : 1
Delaying : 1
'joke' : 1
barry_as_FLUFL.mandatory : 1
bpo-35523: : 1
workaround: : 2
SELinux : 4
alert : 6
ctypes" : 1
uuid" : 1
bpo-31784: : 2
"int(time.time() : 1
1e9)" : 1
bpo-35513: : 2
"TextTestRunner" : 5
"unittest.runner" : 1
test: : 4
bpo-35502: : 1
bpo-35348: : 1
"platform.architecture()" : 1
reliable: : 1
"shared : 1
bpo-35491: : 1
"multiprocessing": : 2
"Pool.__repr__()" : 1
"BaseProcess.__repr__()" : 1
(add : 2
pid) : 1
"RUN" : 1
"'RUN'" : 1
bpo-35477: : 1
"multiprocessing.Pool.__enter__()" : 1
pool:" : 1
bpo-31446: : 1
CreateProcessW : 1
bpo-35471: : 1
bpo-23057: : 1
Unblock : 1
bpo-35052: : 1
cloneNode() : 1
entity: : 1
bpo-20239: : 1
bpo-17185: : 1
bpo-35445: : 1
posix.environ : 2
bpo-35415: : 1
Validate : 3
fileno= : 1
socket.socket() : 5
bpo-35424: : 2
bpo-35330: : 1
"side_effect" : 41
return_value : 2
bpo-35346: : 2
Rhapsody : 2
bpo-10496: : 2
"check_environ()" : 2
"distutils.utils" : 1
"pwd.getpwuid()": : 1
database) : 3
bpo-35389: : 1
"platform.libc_ver()" : 2
"os.confstr('CS_GNU_LIBC_VERSION')" : 1
bpo-35394: : 1
bpo-35310: : 1
Oran : 1
Avraham : 1
bpo-35380: : 1
bpo-35341: : 1
Ismo : 1
Toijala : 1
bpo-35371: : 1
"platform.uname()" : 1
"os.devnull" : 8
"cmd : 1
/c : 1
ver" : 1
bpo-35066: : 1
strftime() : 8
Datetime : 6
PEP-399 : 1
bpo-35345: : 1
"platform.popen" : 1
bpo-35344: : 1
"platform.platform()" : 1
"platform.mac_ver()" : 1
darwin : 3
bpo-35312: : 1
"lib2to3.pgen2.parse.ParseError" : 1
pickle- : 3
bpo-35308: : 1
"BROWSER" : 3
bpo-24746: : 1
Jairo : 1
Trad : 1
bpo-28604: : 1
"LC_MONETARY" : 4
bpo-35277: : 1
18.1 : 1
40.6.2 : 1
bpo-35226: : 1
Recursively : 6
ancestors : 15
"mock_calls" : 22
bpo-29564: : 1
bpo-35189: : 1
fnctl : 2
(EINTR): : 1
flock : 1
lockf : 1
sock_* : 1
reader/writer : 2
calcellation : 1
bpo-35186: : 1
"built : 2
"bdist_dumb" : 1
bpo-35152: : 1
bpo-35062: : 1
"_io.IncrementalNewlineDecoder"'s : 1
*translate* : 1
bpo-35065: : 1
"StreamReaderProtocol._untrack_reader" : 1
"_untrack_reader" : 1
"connection_lost" : 1
bpo-34160: : 1
bpo-35079: : 1
difflib.SequenceManager.get_matching_blocks : 1
'non-overlapping' : 1
bpo-33710: : 1
bpo-35017: : 1
"socketserver.BaseServer.serve_forever()" : 1
"shutdown()" : 10
bpo-35024: : 1
"wrote" : 1
redundantly : 1
"(created|could : 1
create)" : 1
Agren : 1
bpo-35047: : 1
"assert_not_called" : 1
"assert_called_once" : 1
"assert_called_once_with" : 2
bpo-31047: : 2
"ntpath.abspath" : 2
bpo-35053: : 1
(optimization : 1
bpo-31553: : 1
--json-lines : 2
bpo-34794: : 1
Tcl_Obj : 3
bpo-34909: : 1
grandchildren : 3
bpo-35022: : 1
"os.PathLike") : 1
bpo-35008: : 1
"xml.etree.ElementTree.Element" : 1
bpo-23420: : 1
Verify : 6
'-s' : 2
bpo-33947: : 1
bpo-34890: : 1
bpo-34521: : 1
"socket.CMSG_SPACE()" : 1
"socket.CMSG_LEN()" : 1
"multiprocessing.reduction.recvfds()" : 1
3542** : 2
bpo-31522: : 1
"mailbox.mbox.get_string" : 1
*from_* : 5
bpo-34970: : 1
bpo-34969: : 1
gzip: : 1
--fast : 2
--best : 2
(quick) : 1
(slower : 1
(tradeoff) : 1
bpo-16965: : 1
*2to3* : 2
"execfile" : 1
fixer : 14
"'rb'" : 17
bpo-34966: : 1
bpo-34926: : 1
"mimetypes.MimeTypes.guess_type()" : 1
Asthana : 1
bpo-23831: : 1
bpo-34941: : 1
"findtext()" : 1
"findall()" : 8
bpo-32680: : 1
"smtplib.SMTP" : 2
"sock" : 4
bpo-34769: : 1
bpo-34936: : 1
"TclError" : 1
"tkinter.Spinbox.selection_element()" : 1
bpo-34829: : 1
"selection_from" : 1
"selection_range" : 1
"selection_present" : 1
"selection_to" : 1
"tkinter.Entry" : 1
bpo-34911: : 1
*secure_protocols* : 2
*http.cookiejar.DefaultCookiePolicy* : 1
*wss* : 2
websocket : 1
bpo-34922: : 1
bpo-34925: : 1
bpo-34900: : 1
Oliveira : 1
bpo-34844: : 1
logging.Formatter : 3
StrFormatStyle : 1
PercentStyle : 1
StringTemplateStyle : 1
bpo-34897: : 1
test.support.missing_compiler_executable : 1
nominal : 6
bpo-34871: : 1
polluted : 1
bpo-34898: : 1
"mtime" : 3
bpo-28441: : 1
link) : 2
bpo-34866: : 1
"max_num_fields" : 1
"MiniFieldStorage" : 5
bpo-34711: : 1
HTTPStatus.NOT_FOUND : 1
bpo-34872: : 1
self-cancellation : 1
asyncio.Task : 2
bpo-34849: : 1
"selector.select" : 1
noise : 7
bpo-34819: : 1
deviating : 1
bpo-34758: : 1
.wasm : 1
application/wasm : 1
bpo-34789: : 1
"xml.sax.make_parser()" : 2
*parser_list* : 4
Andrés : 4
Delfino : 4
bpo-34334: : 1
"exc_text" : 4
bpo-34687: : 1
SelectorEventLoop : 1
bpo-5950: : 1
bpo-32892: : 1
("Num" : 1
"Ellipsis") : 2
bpo-34728: : 1
"asyncio.sleep" : 1
"asyncio.wait" : 1
"asyncio.wait_for" : 1
bpo-34738: : 1
bpo-34659: : 1
itertools.accumulate() : 1
bpo-29577: : 1
bpo-34670: : 1
SSLSocket.verify_client_post_handshake : 1
1.3's : 1
bpo-32718: : 1
bpo-31177: : 1
"reset_mock" : 1
bpo-34672: : 1
"'Z'" : 3
"time.strftime()" : 18
bpo-34666: : 1
"asyncio.StreamWriter.awrite" : 1
"asyncio.StreamWriter.aclose()" : 1
bpo-6721: : 1
Acquire : 15
fork()ing : 1
bpo-34658: : 1
preexec_fn : 3
after_parent : 1
os.register_at_fork : 1
bpo-34652: : 1
"os.lchmod()" : 1
bpo-34638: : 1
(garbage : 1
collected) : 5
bpo-34536: : 1
"Enum._missing_": : 1
bpo-34636: : 1
non-matching : 3
(microoptimization) : 1
bpo-24412: : 1
bpo-34630: : 1
(connection : 1
bpo-32490: : 1
bpo-34363: : 1
dataclasses.asdict() : 1
.astuple() : 1
namedtuples : 2
bpo-34625: : 1
2.2.6 : 1
bpo-32270: : 1
pass_fds : 1
bpo-34622: : 1
"asyncio.InvalidStateError" : 1
Extract : 16
bpo-34610: : 1
"multiprocessing.managers.DictProxy" : 1
bpo-34421: : 1
bpo-34604: : 1
"pwd.getpwnam" : 2
"grp.getgrnam" : 2
Grzybowski : 2
bpo-30977: : 1
uuid.UUID : 1
bpo-34574: : 1
bpo-8110: : 1
"sys.platform : 1
'win32'" : 1
bpo-34530: : 1
bpo-34563: : 1
multiprocessing.Connection : 1
read: : 3
_winapi.PeekNamedPipe() : 1
_winapi.ReadFile() : 1
INT_MAX : 4
"2**31-1") : 1
bpo-34558: : 1
Lib/ctypes/_aix.py : 1
"EnumMeta._convert_" : 1
bpo-22872: : 1
"multiprocessing.Queue.put()" : 1
"multiprocessing.Queue.get()" : 1
bpo-34515: : 1
"lib2to3.pgen2.tokenize" : 1
3131) : 1
bpo-13312: : 1
bpo-34472: : 1
Silas : 1
Sewell : 1
bpo-34454: : 1
.fromisoformat() : 1
non-UTF-8-encodable : 1
datetime.fromisoformat() : 1
Izbyshev : 2
bpo-6700: : 1
inspect.getsourcelines : 1
frames/tracebacks : 1
bpo-34171: : 1
"trace.cover" : 1
bpo-34441: : 1
"ABC"-derived : 1
"__subclasses__" : 3
bpo-34427: : 1
"a.extend(a)" : 1
bpo-34412: : 1
"signal.strsignal()" : 1
bpo-20849: : 1
shutil.copytree : 2
bpo-31715: : 1
Associate : 4
".mjs" : 1
"application/javascript" : 1
bpo-34384: : 1
bpo-22602: : 1
ill-formed : 2
2152) : 1
bpo-2122: : 1
bpo-34341: : 1
bpo-34333: : 1
"pathlib.PurePath.with_suffix()" : 1
bpo-18540: : 1
"imaplib.IMAP4_SSL" : 1
*host* : 47
bpo-26502: : 1
"traceback.FrameSummary.__len__()" : 1
bpo-34318: : 1
bpo-9372: : 1
bpo-33613: : 1
"multiprocessing.semaphore_tracker" : 1
bpo-34248: : 1
"dbm.gnu.open()" : 1
"dbm.ndbm.open()" : 1
OS-related : 1
Cserna : 1
bpo-33089: : 2
bpo-34246: : 1
"smtplib.SMTP.send_message()" : 2
Blum : 1
Aguiar : 1
Woellert : 1
bpo-32321: : 1
functools.reduce : 1
Wright : 1
bpo-34270: : 1
("get_name()" : 1
"set_name()") : 1
"Task-1" : 1
bpo-34263: : 1
asyncio's : 4
epoll/select : 1
bpo-34035: : 1
seek() : 2
bpo-32215: : 1
bpo-34075: : 1
non-ThreadPoolExecutor : 1
"AbstractEventLoop.set_default_executor()" : 1
bpo-34251: : 1
"msilib.Win64" : 1
"distutils"' : 1
bpo-19891: : 1
non-writable : 1
homedir : 1
bpo-34228: : 1
tracemalloc: : 1
PYTHONTRACEMALLOC=0 : 1
tracemalloc=0 : 1
bpo-13041: : 1
"argparse.HelpFormatter" : 1
Zbyszek : 1
bpo-34213: : 1
conflicted : 1
bpo-34052: : 1
bpo-34197: : 1
*skipinitialspace* : 1
*doublequote* : 3
*dialect* : 5
bpo-32788: : 1
"__adapt__()" : 1
"__conform__()" : 1
bpo-21446: : 1
"reload" : 1
bpo-940286: : 1
pydoc's : 2
"Helper.showtopic()" : 1
bpo-34164: : 1
"base64.Error" : 1
bpo-33729: : 1
bpo-34097: : 1
1980-01-01 : 5
2107-12-31 : 3
"strict_timestamps" : 1
bpo-34108: : 1
bpo-34070: : 1
"buffering=-1" : 1
bpo-27494: : 2
bpo-27494 : 1
bpo-33967: : 1
bpo-34041: : 1
*deterministic* : 4
bpo-34056: : 1
"imp.load_module" : 2
"get_data()" : 2
bpo-34054: : 1
bpo-34043: : 1
uncompress : 1
bpo-34044: : 1
*startupinfo* : 2
"STARTUPINFO" : 5
bpo-34010: : 1
bpo-34019: : 1
Bumsik : 1
bpo-34003: : 1
csv.DictReader : 2
bpo-33978: : 1
Closed : 1
reconfiguration : 1
fileConfig : 2
dictConfig : 4
bpo-14117: : 1
'wikipedia' : 1
'rosette' : 1
draws : 3
'penrose' : 1
The'1024' : 1
'tree' : 1
bpo-33974: : 1
bpo-27500: : 1
bpo-24567: : 1
subnormal : 9
BSD-based : 1
bpo-25007: : 1
compressors : 1
decompressors : 1
bpo-33929: : 1
multiprocessing.popen_spawn_win32 : 1
"stealing" : 1
"stolen" : 1
bpo-33899: : 1
Tokenize : 2
NEWLINE : 58
bpo-33897: : 1
'force' : 1
logging.basicConfig() : 1
bpo-33695: : 1
bpo-33916: : 1
lzma: : 1
Decompressor.__init__() : 1
bpo-32568: : 1
select.epoll() : 1
*sizehint* : 5
bpo-33833: : 1
ProactorSocketTransport : 1
bpo-33663: : 1
bpo-33721: : 1
bpo-26544: : 1
'2.9' : 1
bpo-33843: : 1
"cgi.escape" : 1
"cgi.parse_qs" : 1
"cgi.parse_qsl" : 1
bpo-33842: : 1
"tarfile.filemode" : 1
site.main() : 4
bpo-33805: : 1
dataclasses.replace() : 1
InitVar : 3
bpo-33687: : 1
"uu.decode()" : 3
Timo : 1
Furrer : 1
bpo-33812: : 3
non-None : 6
tzinfo : 15
d.tzinfo.utcoffset(d) : 3
astimezone() : 4
bpo-32108: : 1
bpo-27397: : 1
invalid-length : 1
bpo-33578: : 1
encoder/decoder : 6
bpo-30805: : 3
bpo-33476: : 1
_header_value_parser.py : 1
';' : 4
Enrique : 1
Perez-Terron : 1
bpo-33694: : 2
pause_reading()/resume_reading() : 2
bpo-32493: : 5
"uuid_enc_be" : 2
bpo-33792: : 2
asyncio.WindowsSelectorEventLoopPolicy : 3
asyncio.WindowsProactorEventLoopPolicy : 3
bpo-33274: : 1
Element.removeAttributeNode() : 1
removed." : 1
complies : 5
bpo-33778: : 2
"unicodedata"'s : 2
11.0.0 : 2
bpo-33165: : 1
wrapper/helper : 1
bpo-33770: : 2
bpo-33769: : 2
asyncio/start_tls: : 2
error; : 10
SSLTransport : 2
aborted : 13
bpo-33767: : 3
("+") : 4
("*") : 8
bpo-33734: : 2
asyncio/ssl: : 2
bpo-31014: : 1
BROWSER : 1
bpo-2504: : 1
gettext.pgettext() : 1
bpo-33197: : 5
_ParameterKind : 1
bpo-32684: : 3
gather : 10
return_exceptions : 3
bpo-33654: : 4
SSLTransport.set_protocol() : 2
bpo-33674: : 5
Pause : 4
data_received() : 5
connection_made() : 2
bpo-33671: : 1
fast- : 1
512MiB : 1
SSLProtocol.connection_made() : 3
asyncio.sslproto: : 3
bpo-31647: : 3
write_eof() : 5
_SelectorSocketTransport : 3
bpo-32610: : 2
asyncio.all_tasks() : 2
bpo-32410: : 3
bpo-33469: : 3
run_in_executor : 6
bpo-33672: : 3
Task.__repr__ : 3
Cython's : 3
transport.set_protocol() : 2
asyncio.Protocol : 2
asyncio.BufferedProtocol : 3
loop.start_tls() : 3
asyncio.BufferedProtocols : 2
bpo-33652: : 2
Pickles : 6
subscripted : 6
bpo-33238: : 1
"InvalidStateError" : 9
"Future.set_result" : 1
Haydaman : 1
bpo-33618: : 2
Finalize : 4
bpo-33625: : 1
"grp.getgrgid" : 1
"pwd.getpwuid" : 1
bpo-33623: : 2
SIGSGV : 2
asyncio.Future : 9
bpo-11874: : 3
wrappable : 3
bpo-30877: : 3
c-fos : 3
md5 : 6
bump : 3
7062) : 1
bpo-33582: : 2
inspect.formatargspec : 2
bpo-21145: : 1
"functools.cached_property" : 2
bpo-33570: : 2
1.1.1-pre6 : 2
bpo-28556: : 20
"Union[Manager : 2
Employee]" : 2
"Employee" : 2
bpo-12486: : 1
"tokenize.generate_tokens()" : 1
bpo-33540: : 2
"block_on_close" : 2
"ThreadingMixIn" : 10
bpo-33548: : 3
tempfile._candidate_tempdir_list : 3
TEMP : 3
bpo-33109: : 2
bpo-26510 : 2
3.7.0a2 : 2
bpo-33541: : 1
"_strptime.LocaleTime.__pad" : 1
"_LocaleTime__pad") : 1
bpo-33536: : 2
dataclasses.make_dataclass : 2
bpo-33542: : 3
"uuid.get_node" : 3
DUID : 3
Zvi : 3
Effron : 3
bpo-26819: : 3
"ReadTransport.resume_reading" : 3
bpo-33516: : 1
"__round__" : 3
bpo-28612: : 1
Site : 1
Maps : 4
urllib's : 1
"RobotFileParser.site_maps()" : 1
Lady : 1
Wirtz : 3
bpo-28167: : 3
platform.linux_distribution : 1
bpo-33504: : 1
bpo-33505: : 2
asyncio.ensure_future() : 2
bpo-33497: : 2
cgi.parse_multipart : 3
FieldStorage : 4
Twisted) : 2
Amber : 2
Brown : 3
bpo-29235: : 1
bpo-33495: : 2
dataclasses.Fields : 2
bpo-26103: : 1
"inspect.isdatadescriptor" : 1
"__set__" : 6
"__delete__" : 4
Hall : 2
bpo-29209: : 1
bpo-33453: : 2
"Postponed : 2
Annotations" : 2
("ClassVar" : 2
"typing.ClassVar") : 2
("InitVar" : 2
"dataclasses.InitVar") : 2
"NamedTuple.__new__" : 3
"Generic.__new__" : 3
PRs : 16
Paulius : 3
Šarka : 3
Dombrova : 3
bpo-33365: : 1
Strigl : 1
bpo-20087: : 3
2.27 : 7
bpo-33422: : 3
byte/string : 3
"platform.linux_distribution" : 2
"platform.dist" : 2
bpo-33281: : 2
ctypes.util.find_library : 3
bpo-33311: : 1
Blondon : 4
bpo-27300: : 1
*tempfile* : 1
complements : 1
bpo-32933: : 1
Tony : 2
Flury : 1
bpo-33217: : 2
inspect.Parameters : 3
bpo-33383: : 3
bpo-33375: : 1
frame's : 6
bpo-33336: : 1
"MOVE" : 1
"IMAP4.uid()" : 1
(RFC : 2
6851: : 1
MOVE : 1
bpo-32455: : 2
*jump* : 5
"dis.stack_effect()" : 2
bpo-27485: : 1
bpo-33332: : 1
"signal.valid_signals()" : 1
sigfillset() : 1
bpo-33251: : 1
"ConfigParser.items()" : 1
"vars" : 1
bpo-33329: : 3
glibcs : 3
bpo-33334: : 1
NOP : 3
bpo-991266: : 3
"http.cookies.SimpleCookie" : 3
bpo-33131: : 3
10.0.1 : 3
bpo-33308: : 3
ST : 3
"line_info=False" : 3
"col_info=True" : 3
bpo-23403: : 2
pre-computed : 1
grammars : 1
bpo-33266: : 2
"rf'...'" : 2
bpo-11594: : 2
line-endings : 4
bpo-33254: : 2
"importlib.resources.contents()" : 3
"importlib.abc.ResourceReader.contents()" : 2
bpo-33265: : 1
"contextlib.ExitStack" : 1
"contextlib.AsyncExitStack" : 1
bpo-33263: : 3
"_SelectorSocketTransport" : 3
Starostin : 3
bpo-33256: : 3
"<module>" : 3
"cgitb.html()" : 3
bpo-33144: : 1
"random.Random()" : 1
class/subclass : 1
bpo-33185: : 2
3.7.0b3 : 2
bpo-33053) : 2
""."" : 4
bpo-29613: : 1
"SameSite" : 1
bpo-33169: : 2
"importlib.machinery.invalidate_caches()" : 2
bpo-33203: : 3
"random.Random.choice()" : 3
bpo-33224: : 3
difflib.mdiff() : 3
return-statement : 3
bpo-33209: : 3
framing : 6
"pickle.Pickler.dump()" : 3
bpo-32861: : 3
urllib.robotparser's : 3
Lazar : 5
"DEFAULT_PROTOCOL" : 2
bpo-33106: : 1
bpo-33175: : 2
Field.__set_name__ : 2
__set_name__ : 15
bpo-32380: : 1
functools.singledispatchmethod : 1
bpo-33141: : 2
Field : 24
bpo-33096: : 3
ttk.Treeview.insert : 3
iid : 3
iid=0 : 3
iid=False : 3
bpo-32873: : 2
bpo-33134: : 2
dataclass's : 3
__hash__ : 13
bpo-33127: : 3
2.7.1 : 4
bpo-32505: : 2
bpo-33078: : 4
sem_getvalue : 2
bpo-33116: : 2
'Field' : 2
dataclasses.__all__ : 2
bpo-32896: : 2
default_factory : 4
bpo-33100: : 2
Dataclasses: : 2
MemberDescriptorType : 2
bpo-32953: : 2
bpo-33097: : 2
"executor.submit" : 2
bpo-32968: : 1
Modulo : 2
bpo-33061: : 2
"NoReturn" : 4
multiprocessing.Queue : 2
bpo-33064: : 3
bpo-33056: : 2
FIX : 2
bpo-33021: : 3
fstat() : 9
mmap.mmap() : 3
os.urandom() : 11
bpo-31804: : 3
bpo-33034: : 1
Eaton : 1
bpo-30249: : 1
struct.unpack_from() : 1
bpo-33037: : 3
sending/receiving : 3
bpo-27683: : 3
"hosts()" : 4
bpo-22674: : 1
strsignal() : 1
strsignal(3) : 1
bpo-32999: : 2
"ABC.__subclasscheck__(cls : 2
subclass)" : 2
"subclass" : 2
bpo-33009: : 3
inspect.signature() : 8
partialmethods : 3
bpo-32969: : 3
bpo-32056: : 2
bpo-32970: : 1
MAKE_FUNCTION : 2
bpo-32844: : 3
bpo-32960: : 2
non-frozen : 2
bpo-32713: : 3
tarfile.itn : 3
Joffrey : 3
Fuhrer : 3
bpo-32257: : 2
OP_NO_RENEGOTIATION : 2
1.1.0h : 7
bpo-32951: : 2
SSLSocket : 8
SSLObject : 5
bpo-32929: : 2
tri-state : 2
"hash" : 5
"unsafe_hash" : 4
unsafe_hash : 4
eq= : 2
frozen= : 2
unsafe_hash=False : 7
hash=None : 5
bpo-32947: : 2
OP_ENABLE_MIDDLEBOX_COMPAT : 2
bpo-32146: : 1
forkserver : 9
bpo-30622: : 3
bpo-32922: : 3
dbm.open() : 3
bpo-32759: : 1
multiprocessing.heap : 1
bpo-32859: : 3
"os.dup2" : 4
"dup3" : 3
bpo-32556: : 2
nt._getfinalpathname : 5
nt._getvolumepathname : 2
nt._getdiskusage : 2
bpo-21060: : 3
dist : 6
"Must : 3
bpo-32857: : 3
"after_cancel(None)" : 3
canceling : 4
bpo-32852: : 3
bpo-31333: : 2
"_abc" : 2
"issubclass" : 3
"_abc_registry" : 2
"_abc_cache" : 2
"_abc_negative_cache" : 2
"_dump_registry" : 2
"_abc_registry_clear" : 2
"_abc_caches_clear" : 2
bpo-32841: : 3
notifying : 3
bpo-32819: : 2
bpo-19675: : 1
bpo-32394: : 3
socket: : 8
TCP_FASTOPEN,TCP_KEEPCNT,TCP_KEEPIDLE,TCP_KEEPINTVL : 2
bpo-31787: : 3
Milman) : 3
bpo-30157: : 3
guessing : 7
csv.Sniffer.sniff() : 3
bpo-30688: : 1
bpo-32792: : 2
collections.ChainMap() : 2
bpo-32775: : 2
"fnmatch.translate()" : 2
'--' : 2
'&&' : 7
'~~' : 2
'||' : 6
fnmatch.translate() : 2
bpo-32622: : 3
bpo-32777: : 3
pre-exec : 3
bpo-32647: : 3
dlopen : 3
libdl : 3
dl : 3
bpo-32749: : 1
read- : 12
bpo-32741: : 2
"asyncio.TimerHandle.when()" : 2
bpo-32691: : 2
mod_spec.parent : 2
bpo-32734: : 3
"asyncio.Lock()" : 3
acquiring : 9
bpo-32727: : 3
envelope : 31
bpo-31453: : 2
TLSVersion : 2
SSLContext.maximum_version : 3
minimum_version : 2
https://w : 2
ww.openssl.org/docs/man1.1.0/ssl/SSL_CTX_set_min_proto_version.html : 2
bpo-24334: : 2
Channel : 3
bpo-31848: : 3
Aifc_read.initfp() : 3
SSND : 3
bpo-32585: : 2
spinbox : 5
bpo-32512: : 1
bpo-8525: : 1
bpo-31639: : 2
ThreadingHTTPServer : 1
pre-opening : 3
bpo-29877: : 1
compileall: : 1
bpo-32221: : 2
"%scope" : 2
*scopeid* : 2
Especially : 3
"socket.recvfrom()" : 3
multicast : 9
bpo-32147: : 1
"binascii.unhexlify()" : 1
bpo-30693: : 4
recurses : 4
bpo-31680: : 1
"curses.ncurses_version" : 1
bpo-31908: : 3
"--missing" : 3
bpo-31608: : 1
non-deque : 1
bpo-31425: : 1
AF_QIPCRTR : 1
GPS : 1
Qualcomm : 2
Andersson : 1
bpo-22005: : 1
"encoding='latin1'" : 2
bpo-27645: : 2
"backup" : 2
bpo-16865: : 3
>=2GiB : 3
bpo-31508: : 1
"tkinter.ttk.Treeview.selection" : 1
"selection_set" : 1
bpo-29456: : 1
hangul : 1
normalization: : 2
u1176 : 1
u11a7 : 1
u11c3 : 1
bpo-21257: : 1
"http.client.parse_headers()" : 1
bpo-34764: : 1
iter() : 2
bpo-35564: : 1
master_doc : 1
conf.py : 1
bpo-35511: : 1
Specified : 3
profile.Profile : 1
elaborated : 1
bpo-10536: : 1
bpo-35089: : 1
bpo-35038: : 1
unexisting : 1
"f_restricted" : 1
bpo-35042: : 1
XYZ : 1
pep : 2
bpo-35044: : 1
"exc" : 3
appropriated : 1
bpo-35035: : 1
"email.utils" : 2
"email.utils.rst" : 1
bpo-34967: : 1
app.add_object_type() : 1
app.description_unit() : 1
bpo-34913: : 1
bpo-32174: : 1
chm : 1
charaters : 1
bpo-11233: : 1
asyncio.wait() : 1
bpo-34552: : 1
bpo-28617: : 1
stdtypes : 1
bpo-20177: : 1
datetime.date.fromtimestamp : 1
Hoffmann : 1
bpo-34065: : 1
wrongly : 2
basicConfig : 2
bpo-33460: : 1
bpo-33847: : 1
'@' : 7
bpo-33409: : 2
540's : 2
versionadded : 3
ParameterKind.description : 1
bpo-17045: : 1
quick-reference : 1
slot/typedef : 1
bpo-33736: : 2
bpo-23859: : 2
bpo-32436: : 5
bpo-33594: : 1
bpo-33503: : 3
pypi : 3
bpo-33421: : 3
"typing.AsyncContextManager" : 3
bpo-33487: : 1
BZ2file : 1
buffering=None : 2
bpo-33378: : 3
bpo-33276: : 3
bpo-33201: : 3
bpo-33195: : 3
"c-api/arg" : 3
bpo-33126: : 3
PyBuffer_ToContiguous() : 3
bpo-27212: : 3
"islice()" : 6
recipe : 30
bpo-28247: : 3
bpo-18802: : 3
bpo-27428: : 3
"WindowsRegistryFinder" : 3
"MetaPathFinder" : 5
Himanshu : 3
Lakhara) : 3
bpo-28124: : 2
de- : 3
emphasized : 3
SSLContext.wrap_socket() : 3
bpo-17232: : 3
567) : 2
bpo-32800: : 3
w3c : 3
bpo-11015: : 2
bpo-32613: : 1
faq/windows.html : 1
397 : 2
bpo-8722: : 3
bpo-32614: : 3
REGEX : 3
bpo-20709: : 1
os.utime() : 2
Jan- : 1
Gehrcke : 1
bpo-32722: : 1
bpo-31972: : 3
bpo-30607: : 1
externalized : 1
"python-docs-theme" : 1
bpo-8243: : 3
curses.addch : 3
curses.addstr : 3
bpo-32337: : 2
bpo-25041: : 1
"AF_PACKET" : 3
bpo-31432: : 3
CERT_NONE : 3
CERT_OPTIONAL : 3
CERT_REQUIRED : 3
ssl.SSLContext.verify_mode : 3
bpo-35772: : 1
sparse : 6
test_tarfile : 1
ppc64 : 2
tmpfs : 2
"holes" : 1
(tmpfs : 1
cache) : 2
aarch64 : 1
ppc64le : 1
x86_64 : 3
punch : 2
bpo-35045: : 1
TLSv1 : 3
unbreaks : 1
test_min_max_version : 1
"test_asyncio/test_sendfile.py" : 1
bpo-33717: : 1
time.time() : 3
time.perf_counter() : 2
bpo-35488: : 1
pathlib's : 1
Path.match() : 1
bpo-31731: : 1
"check_interrupted_write()" : 1
test_io: : 1
SIGALRM : 1
test_multiprocessing_main_handling: : 1
bpo-35519: : 1
"test.bisect" : 1
Lib/test/test_xmlrpc.py" : 1
bpo-34279: : 2
"test.support.run_unittest()" : 1
"TestDidNotRun" : 1
bpo-35412: : 1
testcase : 5
"test_future4": : 1
bpo-26704: : 1
double-patching : 1
test_multiprocessing_fork : 1
bpo-35352: : 1
bpo-35317: : 1
"mktime()" : 6
"test_email": : 1
"test_localtime_daylight_true_dst_true()" : 1
"test_localtime_daylight_false_dst_true()" : 1
bpo-21263: : 1
bpo-34962: : 1
docstest : 1
passes. : 1
bpo-23596: : 1
Antony : 4
bpo-34537: : 1
"test_gdb.test_strings()" : 1
"LC_ALL=C" : 1
bpo-34587: : 1
test_socket: : 1
RDSTest.testCongestion() : 1
receiver's : 1
RDS : 2
producer : 14
bpo-34661: : 1
unzip : 4
bpo-34200: : 1
flakiness : 1
test_pkg : 1
scary : 1
test.support.module_cleanup() : 1
bpo-34569: : 1
PyLong : 1
bpo-34594: : 1
bpo-34579: : 1
bpo-34542: : 1
3072 : 1
bpo-11193: : 1
"test_subprocess.test_undecodable_env" : 1
bpo-34347: : 1
"test_utf8_mode.test_cmd_line" : 1
bpo-34490: : 1
getsockname() : 4
'sockname' : 1
transport.get_extra_info('sockname') : 1
bpo-34391: : 1
bpo-11192: : 1
"test_socket" : 1
inet_pton6_zone() : 1
runtime-based : 1
platform.system() : 2
build- : 1
sys.platform() : 1
bpo-34399: : 1
"test_mktime" : 1
"test_pthread_getcpuclickid" : 1
"_PyTime_localtime" : 1
bpo-11191: : 1
'test_search_cpp' : 1
aixtools : 1
(Michael : 1
Felt) : 1
bpo-33746: : 1
test_unittest : 1
bpo-33901: : 1
test_dbm_gnu : 1
1.15: : 1
bpo-33873: : 1
"regrtest" : 1
--huntrleaks/-R : 2
bpo-33562: : 1
bpo-33655: : 3
test_posix_fallocate : 3
ZFS : 3
bpo-32962: : 3
-mcet : 1
-fcf-protection : 1
-O0 : 1
bpo-33358: : 2
"test_embed.test_pre_initialization_sys_options()" : 2
bpo-32872: : 3
bpo-32517: : 3
10.12.2+ : 3
"KqueueSelector" : 4
bpo-32663: : 1
"SMTPUTF8SimTests" : 1
test_smtplib.py : 1
bpo-27643: : 1
Test_C : 1
"signed : 1
short" : 1
IBM : 7
Applicable : 1
Python2-2.7 : 1
bpo-19417: : 3
test_bdb.py : 3
bpo-31809: : 2
secp : 2
ECDH : 5
curves : 4
bpo-34691: : 1
bpo-35683: : 1
bpo-35642: : 1
asynciomodule.c : 1
pythoncore.vcxproj : 1
bpo-35550: : 1
__sun : 1
__SVR4 : 1
sun : 2
bpo-35499: : 1
profile-opt" : 3
profile-guided : 2
"CFLAGS_NODIST": : 1
bpo-35257: : 1
bpo-35351: : 1
bpo-35139: : 1
bpo-35059: : 2
PCbuild: : 1
InlineFunctionExpansion : 1
OnlyExplicitInline : 1
("/Ob1" : 1
pyproject.props : 1
bpo-35011: : 1
pyexpatns.h : 1
bpo-28015: : 1
bpo-34765: : 1
install-sh : 1
automake : 1
v1.16.1 : 1
bpo-34585: : 1
bpo-34710: : 1
pedantic : 1
bpo-34582: : 1
DevOps : 1
bpo-34081: : 1
Docs : 4
bpo-34555: : 1
"HAVE_LINUX_VM_SOCKETS_H" : 1
"HAVE_SOCKADDR_ALG" : 1
bpo-33015: : 1
"PyThread_start_new_thread()": : 1
bpo-34245: : 1
(mode : 1
0755) : 1
bpo-34121: : 1
bpo-32430: : 1
Modules/Setup.dist : 1
necessity : 2
bpo-30345: : 1
bpo-5755: : 3
bpo-33614: : 3
bpo-33648: : 1
--with-c-locale-warning : 1
bpo-33522: : 3
https://python.visualstudio.com/cpython : 3
bpo-33512: : 1
configure's : 1
double" : 1
bpo-33483: : 1
--without-gcc : 1
--with-icc : 1
bpo-33394: : 3
config.guess : 2
config.sub : 2
bpo-33377: : 2
triplets : 4
mips : 2
r6 : 2
riscv : 2
(used : 18
suffixes) : 2
bpo-32232: : 2
"-DPy_BUILD_CORE" : 2
bpo-33182: : 2
bpo-33163: : 3
9.0.3 : 3
v39.0.1 : 3
bpo-33012: : 3
bpo-32898: : 2
COUNT_ALLOCS : 3
bpo-29442: : 1
bpo-35890: : 1
GetVersionEx : 1
wcstok : 1
bpo-32560: : 1
bpo-35854: : 1
EnvBuilder : 1
--symlinks : 2
bpo-35811: : 1
bpo-35797: : 1
bpo-35758: : 1
bpo-29734: : 1
os.stat : 3
bpo-35596: : 2
PYCs : 1
bpo-35402: : 1
8.6.9 : 1
bpo-35401: : 2
1.1.0j : 2
bpo-34977: : 2
bpo-35067: : 1
_distutils_findvs : 3
vswhere.exe : 1
bpo-32557: : 1
shutil.disk_usage : 1
bpo-34770: : 1
pyshellext.cpp : 1
bpo-34603: : 1
bpo-34581: : 1
MSVC-specific : 1
socketmodule.c : 2
_MSC_VER" : 1
bpo-34532: : 1
bpo-34062: : 1
'--list' : 1
'--list-paths' : 1
bpo-34225: : 1
INCLUDE : 1
LIB : 1
bpo-34011: : 1
init.tcl : 1
bpo-34006: : 1
line- : 3
bpo-31546: : 1
PyOS_InputHook : 1
Matplotlib : 1
figures) : 1
bpo-30237: : 1
ReadConsole : 1
CancelSynchronousIo : 1
bpo-33895: : 1
bpo-33720: : 2
bpo-29097: : 1
86400 : 1
bpo-33316: : 1
PyThread_release_lock : 1
bpo-33184: : 6
bpo-32890: : 1
GetLastError() : 1
os.execve() : 1
os.truncate() : 1
bpo-33016: : 3
bpo-32903: : 3
bpo-32901: : 4
8.6.8 : 5
bpo-31966: : 3
WindowsConsoleIO.write() : 3
bpo-32409: : 3
bpo-32457: : 3
denormalized : 3
bpo-32370: : 3
ipconfig : 3
bpo-29248: : 3
"PrintNameOffset" : 3
Craig : 5
Holmquist : 4
SSE4 : 3
bpo-1104: : 1
"msilib.SummaryInfo.GetProperty()" : 1
bpo-35025: : 1
"CLOCK_GETTIME" : 1
al : 4
"timemodule" : 1
bpo-24658: : 1
bpo-33635: : 1
(/dev/fd/3 : 1
f.e) : 1
is_dir : 1
is_file : 1
DirEntry.is_dir : 1
_RecursiveWildcardSelector._iterate_directories : 1
bpo-13631: : 2
.editrc : 2
editline : 2
bpo-32726: : 4
10.6+ : 2
10.9+ : 8
system-provided : 3
ActiveTcl : 2
bpo-31903: : 1
"SystemConfiguration" : 1
bpo-35770: : 1
macosx : 2
Zoom : 3
Height : 8
(Zoom : 1
bpo-35769: : 1
'Untitled' : 2
'untitled' : 1
bpo-35660: : 1
idlelib.window : 1
bpo-35641: : 1
Proper : 3
"calltip" : 1
bpo-34055: : 1
'smart' : 1
indents : 5
bpo-35591: : 1
Selection : 3
bpo-35196: : 1
squeezer : 1
bpo-35598: : 1
config_key: : 1
bpo-28097: : 1
Previous/Next : 1
bpo-35208: : 1
Squeezer : 1
bpo-35555: : 1
Gray : 1
bpo-35521: : 1
bpo-22703: : 1
toggles : 3
Show/Hide : 3
Zoom/Restore : 2
bpo-35213: : 1
'macOS' : 1
bpo-34864: : 2
"Prefer : 2
documents" : 2
"Always" : 2
Dock : 2
"prefer : 1
always" : 1
bpo-35202: : 1
lib/idlelib : 1
bpo-33000: : 1
overfill : 1
bpo-23220: : 1
bpo-35099: : 1
"IDLE : 2
differences" : 1
"Running : 1
implications : 4
sys.stdxxx : 1
bpo-35097: : 1
.py* : 2
bpo-35093: : 1
viewer : 9
"Help : 2
preferences" : 1
sources" : 1
bpo-35088: : 1
idlelib.help.copy_string : 1
backporting : 2
hg : 4
bpo-35087: : 1
chapter-section : 1
bpo-34548: : 1
bpo-1529353: : 1
"squeezing" : 1
losing : 14
"unsqueezed" : 1
bpo-34047: : 1
bpo-34275: : 1
MacOS-tk : 1
.update_idletasks() : 1
bpo-34120: : 1
unresponsiveness : 1
bpo-33975: : 1
htests : 2
human-viewed : 1
bpo-33905: : 1
idlelib.stackview.StackBrowser : 1
bpo-33924: : 1
mainmenu.menudefs : 1
menudef : 1
bpo-33906: : 1
idlelib.windows : 1
bpo-33917: : 1
idlelib/idle_test/template.py : 1
idle_test/README.txt : 5
bpo-33904: : 1
IDLE: : 52
rstrip : 3
RstripExtension : 1
Rstrip : 1
bpo-33907: : 1
CallTips : 1
Calltip : 1
calltip_w : 1
CallTip : 2
CalltipWindow : 1
bpo-33856: : 1
bpo-33839: : 1
ToolTip : 1
bpo-33855: : 1
Minimally : 1
bpo-33656: : 3
bpo-33768: : 3
bpo-33763: : 3
bpo-33664: : 3
Scroll : 7
scrollbar : 10
slider : 3
pixels : 17
bpo-33679: : 3
theme-specific : 3
bpo-33642: : 3
bpo-33628: : 3
codecontext.py : 3
bpo-33564: : 3
bpo-21474: : 3
word/identifier : 3
movement : 12
left/right : 7
control-left/right : 3
control-BACKSPACE/DEL : 3
bpo-33204: : 3
Consistently : 6
bpo-32984: : 3
presenting : 8
"IDLESTARTUP" : 6
"PYTHONSTARTUP"; : 3
"-r : 3
unsets : 3
bpo-32940: : 3
StringTranslatePseudoMapping : 3
bpo-32916: : 3
bpo-32905: : 3
bpo-32874: : 3
bpo-32837: : 3
place-dependent : 3
location-independent : 3
bpo-32826: : 3
"encoding=utf-8" : 3
test_help_about : 3
test_file_buttons() : 3
ascii-only : 3
readline() : 11
CREDITS.txt : 5
bpo-32831: : 3
codecontext : 3
bpo-32765: : 3
bpo-35884: : 1
bpo-34989: : 1
bpo-20260: : 1
non-bitwise : 1
python-gdb : 2
"string()" : 1
read_var(): : 1
bpo-33189: : 3
**pygettext.py** : 6
translatable : 11
bpo-31920: : 3
"pygettext" : 3
Krasnikov : 3
bpo-29673: : 3
pystackv : 3
pystack : 3
gdbinit : 3
bpo-25427: : 1
pyvenv : 3
bpo-32885: : 3
"Tools/scripts/pathfix.py" : 3
backup : 16
suffix) : 5
bpo-32222: : 3
pygettext : 4
Harradine : 3
bpo-31583: : 3
--add-suffix : 3
--output-dir : 3
bpo-33817: : 1
"_PyBytes_Resize()" : 1
bpo-35322: : 1
"PyUnicode_EncodeFSDefault()" : 4
bpo-35296: : 1
Py_BUILD_CORE" : 1
"Include/internal/pycore_*.h" : 1
bpo-35259: : 1
Conditionally : 2
Neufeld : 1
"Include/cpython/" : 1
bpo-34725: : 1
_Py_SetProgramFullPath : 1
sys.executable : 6
bpo-34910: : 1
"PyObject_Print()" : 2
Py_LegacyWindowsFSEncodingFlag : 2
bpo-34193: : 1
pluralization : 1
getargs.c : 1
typeobject.c: : 1
'1 : 6
element' : 1
elements' : 1
bpo-34127: : 1
grammatically : 1
bpo-23927: : 1
"w*" : 5
"PyCompile_OpcodeStackEffectWithJump()" : 1
bpo-34008: : 1
Py_Main() : 1
Py_Initialize() : 5
bpo-32500: : 1
"PySequence_Size()" : 4
"PySequence_SetItem()" : 5
"PySequence_DelItem()" : 3
"PyMapping_Size()" : 3
bpo-33818: : 1
bpo-33042: : 2
PySys_ResetWarnOptions : 2
PySys_AddWarnOption : 2
PySys_AddXOption : 2
bpo-32374: : 3
m_traverse : 4
m_state=NULL : 3
bpo-30863: : 1
"PyUnicode_AsWideChar()" : 4
"wchar_t*" : 2
2018-06-27* : 2
bpo-33851: : 1
"ast.get_docstring()" : 1
bpo-33932: : 1
2018-06-12* : 1
2018-05-30* : 1
"os.posix_spawn" : 3
3.7.0b1 : 2
Expect : 2
_xxsubinterpreters : 2
(meant : 1
testing) : 4
3.7b1 : 1
"-Wno-cast-function-type" : 2
2018-05-02* : 1
(will : 2
3.8+) : 1
2018-03-29* : 1
ThreadedHTTPServer : 1
2018-02-27* : 1
2018-01-30* : 1
bpo-32703: : 1
coroutine's : 3
bpo-32650: : 2
Pdb : 8
bdb.py : 2
bpo-28685: : 1
bpo-32685: : 2
semi-colon : 2
bpo-32697: : 1
before; : 1
bpo-32690: : 1
locals() : 6
bpo-32677: : 1
".isascii()" : 1
bpo-32670: : 1
Enforce : 1
generator_stop' : 1
bpo-32591: : 1
sys.set_coroutine_origin_tracking_depth : 1
CoroutineType.cr_origin : 1
mode's : 1
bpo-31368: : 1
preadv : 1
pwritev : 1
bpo-32544: : 1
"hasattr(obj : 1
name)" : 7
"getattr(obj : 1
"__getattribute__" : 1
bpo-26163: : 2
frozenset() : 2
datasets : 4
bpo-32550: : 1
STORE_ANNOTATION : 1
posix_spawn : 1
(removed : 1
3.7.0rc1) : 1
bpo-24340: : 1
estimation : 1
bpo-18533: : 2
"RecursionError"; : 2
bpo-20891: : 3
"on : 4
demand" : 1
bpo-32028: : 2
Py2 : 2
Py3 : 2
bpo-31179: : 1
bpo-31113: : 1
bpo-31429: : 1
bpo-30306: : 1
contextlib.contextmanager : 4
bpo-21417: : 1
zipfile.ZipFile : 2
bpo-32251: : 1
(provisional : 1
bpo-32513: : 1
bpo-32660: : 1
"FIONREAD" : 1
"FIONCLEX" : 1
"FIOCLEX" : 1
"FIOASYNC" : 1
"FIONBIO" : 1
Solaris/derivatives : 2
bpo-27931: : 2
bpo-32659: : 1
"os.stat_result" : 2
st_fstype : 2
bpo-32662: : 1
Server.start_serving() : 1
Server.serve_forever() : 1
Server.is_serving() : 1
'start_serving' : 1
loop.create_server() : 1
loop.create_unix_server() : 1
bpo-32391: : 1
"asyncio.StreamWriter.wait_closed()" : 1
"asyncio.StreamWriter.is_closing()" : 1
bpo-32643: : 1
Task._step : 1
Task._wakeup : 1
Future._schedule_callbacks : 1
bpo-32630: : 1
"asyncio.AbstractEventLoop.sendfile()" : 1
bpo-32304: : 2
bpo-32502: : 2
uuid.uuid1 : 2
bpo-32596: : 1
562**) : 1
bpo-31801: : 1
bpo-32576: : 1
queue.SimpleQueue() : 1
bpo-32574: : 1
asyncio.Queue : 5
cancelation : 1
queue.put() : 1
Melero : 1
bpo-32521: : 4
libnsl : 3
bpo-32467: : 1
collections.abc.ValuesView : 2
collections.abc.Collection : 2
bpo-32473: : 2
ABCMeta._dump_registry() : 2
bpo-32102: : 1
subprocess.run : 2
libtirpc : 2
FreeBSD/OpenBSD : 1
bpo-32503: : 1
bpo-29237: : 1
pstats : 5
bpo-32454: : 1
close(fd) : 1
bpo-25942: : 1
subprocess.call : 1
(presumed : 2
SIGINT) : 1
call() : 2
run() : 3
bpo-32433: : 1
hmac.digest() : 1
bpo-28134: : 1
bpo-32404: : 1
"datetime.datetime.fromtimestamp()" : 2
bpo-32403: : 1
bpo-32228: : 2
"tell()") : 2
"loop.sock_sendfile" : 1
bpo-22908: : 1
ZipExtFile : 1
seekable : 14
bpo-32373: : 1
socket.getblocking() : 2
bpo-32248: : 2
File-based : 1
zipimport-based : 1
bpo-32320: : 1
bpo-29302: : 1
contextlib.AsyncExitStack : 2
*Removed : 1
3.7.0b2.* : 1
bpo-31900: : 2
"decimal_point" : 3
"thousands_sep" : 3
("int" : 5
"'{:n}'.format(1234)") : 3
bpo-31853: : 1
super().method : 1
socket.method : 1
bpo-31399: : 1
X509_VERIFY_PARAM_set1_ip() : 1
bpo-14976: : 1
queue.SimpleQueue : 2
put() : 4
bpo-32724: : 1
bpo-32649: : 1
per-opcode : 4
bpo-17799: : 2
sys.settrace : 3
sys.setprofile : 3
bpo-32721: : 2
_md5 : 2
bpo-31399 : 1
landed : 1
thorough : 5
3.7.0rc1 : 2
bpo-32602: : 1
ECDSA : 1
EC/RSA : 1
bpo-32549: : 1
Compiles : 1
1.1.0g : 2
bpo-32635: : 2
libxcrypt : 2
bpo-32598: : 1
libs : 1
ax_check_openssl : 1
bpo-32593: : 1
bpo-29708: : 1
bpo-32588: : 2
bpo-29911: : 1
bpo-32507: : 1
app-local : 1
3.22.0 : 2
bpo-28440: : 1
/Library/Python/3.x/site-packages : 1
bpo-32681: : 1
'res' : 1
os.dup2 : 1
bpo-10381: : 1
"datetime.timzone.UTC" : 1
2018-01-08* : 1
bpo-31975: : 1
"default::DeprecationWarning:__main__" : 1
bpo-32226: : 2
bpo-32399: : 1
RFC4122 : 1
uuid_create() : 1
libc.a : 1
bpo-32390: : 1
f_fsid : 2
os.statvfs() : 2
(bpo-32143) : 1
bpo-32379: : 1
bpo-32259: : 1
bpo-27169: : 2
bpo-22091 : 2
bpo-32329: : 2
"sys.flags.hash_randomization" : 2
"PYTHONHASHSEED=0" : 2
bpo-30416: : 2
spending : 2
Increased : 4
bpo-32282: : 2
ifdef : 2
VersionHelpers.h : 2
socketmodule : 2
bpo-30579: : 1
TracebackType.__new__ : 1
TracebackType.tb_next : 1
bpo-32260: : 1
siphash : 1
object.__new__ : 2
object.__init__ : 2
bpo-20361: : 1
"-bb" : 3
"'default::BytesWarning'" : 1
bpo-32230: : 1
injects : 3
"'default'" : 3
sys.warnoptions : 2
bpo-29240: : 1
560**: : 1
bpo-32225: : 1
562**: : 1
bpo-31901: : 1
bpo-31650: : 1
(Deterministic : 1
pycs) : 1
bashed : 1
last-modified : 2
bpo-29469: : 1
bpo-32506: : 1
bpo-32279: : 1
dataclasses.make_dataclasses(): : 1
eq : 1
dataclass() : 1
bpo-32278: : 1
'typing.Any' : 2
bpo-32499: : 1
dataclasses.is_dataclass(obj) : 2
bpo-32468: : 1
bpo-23749: : 1
bpo-32441: : 1
bpo-32422: : 1
"functools.lru_cache" : 1
bpo-31721: : 1
Future._log_traceback : 1
bpo-32415: : 1
Task.get_loop() : 1
Future.get_loop() : 1
bpo-26133: : 2
bpo-32363: : 1
asyncio.Task.set_exception() : 1
set_result() : 1
NotImplementedError : 5
Task._step() : 1
Future.__await__() : 1
bpo-32357: : 1
asyncio.iscoroutine() : 1
loop.create_task() : 1
non-native : 5
Cython) : 1
'loop.create_task(python_coroutine)' : 1
'loop.create_task(cython_coroutine)' : 1
bpo-32356: : 1
asyncio.transport.resume_reading() : 1
pause_reading() : 1
transport.is_reading() : 1
bpo-32355: : 1
asyncio.gather(); : 1
bpo-32351: : 1
asyncio.sleep : 1
delay<0 : 1
(2x : 1
boost) : 1
bpo-32348: : 1
schedule/add/remove : 1
3-6% : 1
bpo-32331: : 1
socket.settimeout() : 1
socket.setblocking() : 1
socket.type : 2
socket's : 12
SOCK_NONBLOCK : 1
SOCK_CLOEXEC : 1
bpo-32311: : 1
asyncio.create_task(coro) : 1
bpo-32327: : 1
loop.sock_sendall : 1
loop.sock_recv : 1
loop.sock_accept : 1
loop.getaddrinfo : 1
loop.getnameinfo : 1
bpo-32323: : 2
zone-id : 2
(scope) : 2
bpo-32302: : 2
v142: : 2
v140 : 2
bpo-29711: : 1
"stop_serving" : 1
listening : 36
bpo-32308: : 1
bpo-29970: : 1
Abort : 5
SSLProtocol : 1
bpo-32314: : 1
asyncio.run() : 1
bpo-17852: : 2
misunderstanding : 1
_Py_PyAtExit() : 1
bpo-32296: : 1
asyncio._get_running_loop() : 1
get_event_loop() : 4
bpo-32250: : 1
implementations: : 3
"asyncio._register_task" : 1
"asyncio._enter_task" : 1
"asyncio._leave_task" : 1
"asyncio._unregister_task" : 1
bpo-32255: : 2
bpo-32277: : 2
"chmod(... : 2
follow_symlinks=False)" : 6
bpo-30050: : 1
warn_on_full_buffer : 1
signal.set_wakeup_fd : 1
bpo-29137: : 1
bpo-32273: : 1
asyncio.test_utils : 1
test.test_asyncio : 1
bpo-32272: : 1
asyncio.async() : 1
bpo-32269: : 1
asyncio.get_running_loop() : 14
bpo-32265: : 1
classified : 1
inspect.classify_class_attrs() : 2
types.ClassMethodDescriptorType : 2
bpo-32253: : 1
lock)" : 1
bpo-22589: : 1
'image/x-ms-bmp' : 1
'image/bmp' : 1
bpo-32193: : 1
*async/await* : 1
bpo-32206: : 1
bpo-32227: : 1
bpo-15873: : 1
classes's : 1
"isoformat" : 1
bpo-32199: : 2
getnode() : 2
ip : 8
'ip : 4
link' : 2
list' : 2
bpo-32143: : 1
statvfs(2) : 1
bpo-26439: : 1
ctypes.util.find_library() : 3
ctypes._aix.find_library() : 1
bpo-31993: : 1
bpo-27456: : 4
bpo-31778: : 1
bpo-31802: : 2
("posixpath" : 2
"ntpath") : 2
bpo-30241: : 1
contextlib.AbstractAsyncContextManager : 2
bpo-31699: : 1
bpo-15216: : 1
bpo-32418: : 1
get_loop() : 4
AbstractServer : 1
bpo-32252: : 2
faulthandler_suppress_crash_report() : 2
getrlimit() : 2
bpo-32002: : 1
bpo-19764: : 1
"subprocess.Popen(close_fds=True)" : 1
bpo-24960: : 2
pkgutil.get_data() : 2
bpo-32030: : 1
bpo-29084: : 2
bpo-32264: : 1
pygetopt.h : 1
internal/ : 1
bpo-32241: : 1
wchar : 2
"wchar : 1
2017-12-05* : 2
bpo-32176: : 2
co_flags.CO_NOFREE : 2
freevars : 2
cellvars : 3
injected : 3
bpo-32137: : 2
bpo-32096: : 1
_PyRuntime : 1
Objects/obmalloc.c : 1
PyMem_RawMalloc() : 1
_PyRuntime_Initialize() : 1
bpo-32043: : 1
"developer : 1
mode": : 1
bpo-32023: : 1
bpo-32012: : 1
bpo-28180: : 2
"_Py_SetLocaleFromEnv(category)" : 1
bpo-31949: : 2
(PyTraceBack_Print()) : 2
sys.tracebacklimit : 7
LONG_MAX : 4
bpo-30696: : 2
bpo-20047: : 2
partition() : 2
rpartition() : 2
bpo-21720: : 2
BytesWarning : 9
*fromlist* : 8
bpo-31845: : 1
bpo-28936: : 1
lexically : 3
bpo-31825: : 2
'unicode-escape' : 2
codecs.escape_decode() : 2
bpo-31618: : 1
per-frame : 1
"frame->f_lineno" : 1
""line"" : 1
""opcode"" : 1
bpo-28603: : 6
context/cause : 4
Zane : 6
Bitter : 6
bpo-31786: : 2
-1.0 : 7
bpo-31781: : 1
"zipimport.zipimporter" : 3
bpo-30399: : 1
bpo-31626: : 2
bpo-30817: : 2
"PyErr_PrintEx()" : 3
bpo-32214: : 1
bpo-27240: : 2
bpo-30788 : 2
bpo-31831 : 2
bpo-32182 : 2
RFC2231 : 2
bpo-32186: : 2
io.FileIO.readall() : 3
io.FileIO.read() : 2
NFS : 5
bpo-32101: : 1
"sys.flags.dev_mode" : 2
bpo-32154: : 1
bpo-32089: : 1
warnings: : 3
(pydebug : 1
bpo-32107: : 1
preferentially : 1
bpo-23033: : 1
segment : 18
"ssl.match_hostname()" : 2
bpo-12239: : 2
"VT_EMPTY" : 2
Mc : 3
Mahon : 2
bpo-28334: : 1
"~/.netrc" : 2
Dimitri : 1
Merejkowsky : 1
bpo-32121: : 1
Bakker.) : 1
bpo-31325: : 2
"RobotFileParser.parse()" : 2
Wellner : 2
bpo-12382: : 2
Tisäter : 2
bpo-19610: : 1
"distutils.dist.Distribution" : 3
"classifiers" : 5
"keywords" : 10
"platforms" : 4
bpo-32071: : 1
pattern(s) : 2
bpo-10049: : 1
*nullcontext* : 1
ExitStack() : 11
bpo-28684: : 1
test.support.skip_unless_bind_unix_socket() : 1
enforcing : 1
bpo-32110: : 2
"codecs.StreamReader.read(n)" : 2
characters/bytes : 2
bpo-27535: : 1
warn_explicit() : 1
bpo-32088: : 1
("Py_DEBUG") : 1
bpo-1647489: : 1
Non-empty : 4
bpo-25054: : 1
bpo-32072: : 3
bytearrays : 10
Equal : 4
bpo-32069: : 1
ssl.MemoryBIO : 2
bpo-32066: : 1
create_unix_connection; : 1
sock : 14
bpo-32046: : 1
operator.isCallable(obj) : 1
callable(obj) : 1
bpo-32018: : 1
bpo-32025: : 1
time.thread_time() : 2
time.thread_time_ns() : 2
bpo-32037: : 1
INT : 1
bpo-32034: : 2
asyncio.IncompleteReadError : 3
LimitOverrunError : 2
bpo-32015: : 2
reconnection : 3
from/to : 4
bpo-32011: : 2
TYPE_INT64 : 2
bpo-28369: : 4
add_reader/writer : 2
bpo-31976: : 1
bpo-31985: : 1
Formally : 6
aifc.openfp : 1
sunau.openfp : 1
wave.openfp : 1
7bc817d5ba917528e8bd07ec461c635291e7b06a : 1
1993 : 1
openfp : 1
bpo-21862: : 1
bpo-31970: : 2
bpo-31843: : 1
sqlite3.connect() : 1
bpo-31945: : 1
bpo-31943: : 1
"cancelled()" : 3
"asyncio.Handle" : 3
bpo-9678: : 2
ifconfig : 2
arp : 2
Takayuki : 2
Shimizukawa : 2
bpo-30057: : 2
signal.signal() : 2
bpo-31933: : 2
leaf_size : 2
node_offset : 2
endian : 22
bpo-21423: : 1
{Process,Thread}PoolExecutor : 1
bpo-31927: : 2
AF_BLUETOOTH : 2
DragonFly : 2
bpo-27666: : 2
curses.box() : 4
curses.ungetmouse() : 2
chtype : 2
mmask_t : 2
Fink : 2
bpo-31917: : 1
identifiers: : 2
bpo-31897: : 2
InvalidFileException : 2
bpo-25720: : 2
WINDOW : 2
bpo-31893: : 2
kqueue_event : 4
bpo-31891: : 2
bpo-31884: : 1
bpo-28281: : 1
(1-9999) : 1
Calendar.weekday() : 1
Gollahon : 1
bpo-31702: : 1
crypt.mksalt() : 1
SHA-512 : 3
bpo-30639: : 1
bpo-30768: : 1
pthread+semaphore : 1
intr_flag=0: : 1
sem_timedwait() : 1
(EINTR) : 1
bpo-31854: : 1
"mmap.ACCESS_DEFAULT" : 1
bpo-31834: : 1
SSSE3+ : 1
Calendar.itermonthdates() : 1
0001-01-01 : 1
9999-12-31 : 1
itermonthdays3() : 1
itermonthdays4() : 1
bpo-28564: : 1
shutil.rmtree() : 1
20--40% : 1
bpo-28416: : 2
pickle.Pickler : 2
persistent_id() : 2
pickle.Unpickler : 2
persistent_load() : 2
bpo-31653: : 1
bpo-28326: : 2
bpo-20825: : 1
"subnet_of" : 1
"superset_of" : 1
bpo-31827: : 1
os.stat_float_times() : 1
bpo-31756: : 1
"subprocess.Popen(text=False)" : 1
bpo-31819: : 1
AbstractEventLoop.sock_recv_into() : 1
bpo-31457: : 7
"process()" : 5
"manager" : 3
bpo-31806: : 2
time.sleep() : 4
threading.Lock.acquire() : 2
socket.socket.settimeout() : 2
bpo-31803: : 1
time.clock() : 1
time.get_clock_info('clock') : 1
bpo-31800: : 1
strptime : 6
'%z' : 1
datetime.isoformat : 1
microseconds : 16
traceback: : 4
bpo-30541: : 1
"clock_gettime_ns()" : 2
"clock_settime_ns()" : 2
"monotonic_ns()" : 2
"perf_counter_ns()" : 2
"process_time_ns()" : 2
"time_ns()" : 2
bpo-30143: : 1
bpo-31770: : 2
"sqlite3.Cursor" : 2
bpo-31764: : 2
"sqlite3.Cursor.close()" : 2
bpo-31752: : 2
bpo-31620: : 2
queue.get : 2
pollers : 2
bpo-31690: : 1
re.ASCII : 3
re.LOCALE : 5
re.UNICODE : 1
bpo-30349: : 1
FutureWarning : 3
(nested : 1
bpo-31664: : 1
bpo-31632: : 2
set_protocol() : 2
_SSLProtocolTransport : 2
bpo-15037: : 2
getkey() : 2
bpo-31307: : 1
"configparser.ConfigParser.read()" : 1
bpo-31334: : 2
"poll.poll([timeout])" : 2
Riccardo : 2
Coccioli : 2
multiprocessing's : 4
bpo-31308: : 2
immune : 2
interruptions : 3
bpo-31245: : 1
"create_datagram_endpoint" : 1
bpo-30553: : 1
HTTP/2 : 2
421 : 1
(Misdirected : 1
Request) : 1
bpo-32105: : 2
asyncio.BaseEventLoop.connect_accepted_socket : 2
bpo-31380: : 2
test_httpservers : 3
test_undecodable_file : 2
APFS : 2
bpo-31705: : 2
test_socket.test_sha256() : 2
ENOKEY : 2
ppc64le) : 2
bpo-32138: : 1
test.support.requires_android_level : 1
bpo-32136: : 1
"Lib/test/test_capi.py" : 1
"Lib/test/test_embed.py" : 1
bpo-28668: : 1
test.support.requires_multiprocessing_queue : 1
test.support.import_module('multiprocessing.synchronize') : 1
bpo-32126: : 1
test_get_event_loop_new_process : 1
test.test_asyncio.test_events : 1
sem_open() : 1
bpo-31174: : 2
test_tools.test_unparse: : 2
DirectoryTestCase : 2
bpo-28538: : 3
if_nameindex : 3
bpo-28762: : 3
F_LOCK : 3
bpo-29040: : 1
android-ndk-r14 : 1
bpo-32059: : 2
"detect_modules()" : 2
sysroot : 2
bpo-31957: : 2
bpo-31609: : 2
PCbuild/clean.bat : 2
bpo-31934: : 2
bpo-31926: : 2
.c : 2
bpo-28791: : 4
3.21.0 : 4
bpo-28643: : 1
profile-opt : 5
stamp : 5
bpo-31866: : 1
AtheOS : 2
bpo-1102: : 2
"View.Fetch()" : 2
"ERROR_NO_MORE_ITEMS" : 2
"MSIError" : 2
Tuininga : 2
bpo-31944: : 2
bpo-20486: : 1
bpo-31857: : 1
USE_STACKCHECK : 2
bpo-31392: : 3
1.0.2m : 2
bpo-32207: : 2
distracting : 2
queue.EMPTY : 2
bpo-32164: : 2
idlelib/tabbedpages.py : 2
TabbedPageSet : 2
bpo-32100: : 2
pathbrowser; : 2
bpo-31858: : 2
Sys.ps1 : 2
bpo-31860: : 2
bpo-31836: : 2
Test_code_module : 4
ps1 : 2
Ditto : 2
ps2 : 2
bpo-13802: : 2
Plane : 2
fonts : 16
Latin : 8
re-arranged : 2
Font/Tabs : 2
bpo-32159: : 1
svneol.py : 1
treesync.py : 1
bpo-30722: : 2
redemo : 2
"LOCALE" : 10
Sarnowski : 2
PyEval_InitThreads() : 5
PyThreadState_New() : 2
bpo-32125: : 1
"Py_UseClassExceptionsFlag" : 1
bpo-25612: : 1
bpo-23699: : 1
Py_RETURN_RICHCOMPARE : 1
bpo-30697: : 2
2017-10-16* : 1
bpo-31558: : 1
PyGC_Head : 1
bpo-31642: : 2
sys.modules["package.module"] : 2
bpo-31708: : 1
bpo-31709: : 1
__aiter__ : 7
bpo-30404: : 1
bpo-31619: : 2
bpo-31602: : 1
"zipimporter.get_source()" : 1
"zlib.decompress()" : 3
bpo-31592: : 2
bpo-31588: : 2
"__prepare__()" : 2
bpo-31574: : 1
instrumented : 5
bpo-31566: : 2
"_warnings.warn()" : 2
bpo-31505: : 2
"_json.make_encoder()" : 2
"encoder()" : 2
bpo-31492: : 2
bpo-31478: : 2
"_random.Random.seed()" : 2
"__abs__()" : 3
bpo-31336: : 1
10-20% : 2
bpo-31415: : 1
bpo-31410: : 1
bpo-31353: : 1
"sys.__breakpointhook__" : 1
Maintain : 1
bpo-31315: : 2
imp.create_dynamic() : 2
spec.name : 2
bpo-31311: : 2
"ctypes._CData" : 2
bpo-31293: : 2
as_integer_ratio() : 4
bpo-31285: : 2
"warnings.warn_explicit" : 2
loader's : 5
get_source() : 2
splitlines() : 2
bpo-30406: : 1
bpo-30058: : 2
select.kqueue.control() : 2
bpo-31672: : 2
"idpattern" : 3
bpo-31701: : 2
faulthandler.enable() : 3
bpo-31728: : 2
"Element.text" : 3
"Element.tail" : 2
bpo-31671: : 1
RegexFlag : 1
bm_regex_compile : 1
14% : 1
bpo-30397: : 1
"re.Pattern" : 1
"re.Match" : 2
bpo-31675: : 2
Tkinter's : 8
splitlist() : 2
split() : 2
bpo-31673: : 2
adderrorinfo() : 2
bpo-31648: : 1
ElementTree: : 1
predicate : 26
"[a : 3
'text']" : 1
"[a='text']" : 1
"[.='text']" : 2
bpo-30806: : 2
bpo-31638: : 1
"compressed" : 2
"zipapp.create_archive" : 1
"--compress" : 2
bpo-25351: : 2
bpo-20519: : 1
bpo-28293: : 1
bpo-31596: : 1
pthread_getcpuclockid() : 1
"set(x : 1
[],)" : 1
bpo-30347: : 2
itertools.groupby() : 3
bpo-30346: : 1
advancing : 7
groupby : 1
bpo-31556: : 1
bpo-31540: : 1
bpo-31516: : 2
bpo-31525: : 1
sqlite3_prepare_v2 : 1
bpo-26510: : 1
"add_subparsers(required=False)" : 1
(As : 2
3.3.) : 1
bpo-27541: : 1
Reprs : 3
("bytearray" : 1
"itertools.count" : 1
"itertools.repeat") : 1
insteads : 1
bpo-31351: : 2
bpo-31389: : 1
"header" : 2
bpo-31537: : 2
"get_history_length" : 2
bpo-30085: : 2
back-compatibility : 2
bpo-31696: : 1
bpo-31625: : 1
ranlib : 1
ar : 1
bpo-31624: : 1
BSD/OS : 1
bpo-22140: : 2
config.sh : 2
bpo-31569: : 1
PCBuild/ : 1
PCbuild/ : 1
bpo-31536: : 2
bpo-31460: : 2
flist : 2
browsing : 2
bpo-31649: : 2
_htest : 2
_utest : 4
bpo-31559: : 2
dependence : 3
idle_test.test_browser : 2
bpo-31459: : 2
yesterday : 2
back- : 4
<<open-class-browser>> : 2
bpo-31500: : 2
scaled : 2
HiDPI : 2
bpo-1612262: : 2
bpo-28280: : 1
bpo-31532: : 2
Py_GetPath() : 2
Py_SetPath() : 2
bpo-25658: : 1
Bray : 2
2017-09-19* : 1
bpo-29781: : 2
SSLObject.version() : 2
bpo-29505: : 1
fuzz : 1
float(str) : 2
int(str) : 1
unicode(str); : 1
oss-fuzz : 1
bpo-30947: : 3
2.2.3 : 6
bpo-30730: : 3
bpo-30694: : 3
CVE-2017-9233 : 3
(External : 3
DoS) : 3
CVE-2016-9063 : 3
(Integer : 3
re-fix) : 3
CVE-2016-0718 : 6
(Fix : 3
2.2.0's : 3
CVE-2016-0718) : 3
CVE-2012-0876 : 3
(Counter : 3
flooding : 3
SipHash) : 3
CVE-2016-5300 : 3
os-specific : 3
getrandom) : 3
"XML_SetHashSalt()" : 3
bpo-30500: : 3
urllib.parse.splithost() : 3
"splithost('//127.0.0.1#@evil.com/')" : 3
"127.0.0.1" : 5
"@evil.com" : 3
("login@host") : 3
bpo-29591: : 3
CVE-2016-4472 : 3
https://sourceforge.net/p/expat/bugs/537/ : 3
bpo-31490: : 2
"_anonymous_" : 3
"_fields_" : 17
bpo-31471: : 2
bpo-31418: : 2
bpo-31416: : 2
warnings.filters : 3
warnings.defaultaction : 2
bpo-28411: : 2
PyInterpreterState.modules : 1
PyImport_GetModuleDict() : 1
uniformity : 1
deals : 14
complications : 4
"PyInterpreterState.modules" : 1
bpo-31411: : 2
warnings.onceregistry : 2
bpo-31344: : 1
emission : 3
events: : 5
("True" : 5
per-line : 1
events; : 3
("False" : 2
bpo-31373: : 2
demotions : 2
bpo-30465: : 2
("lineno" : 4
"col_offset") : 2
bpo-30860: : 1
Consolidate : 2
bpo-31347: : 1
_PyObject_FastCall_Prepend : 1
bpo-31343: : 2
sys/sysmacros.h : 2
major() : 2
minor() : 2
makedev() : 2
libray : 2
sys/types.h : 2
bpo-31291: : 2
"zipimport.zipimporter.get_data" : 2
"pathname.replace('/','\\')" : 2
bpo-31271: : 2
bpo-31243: : 2
decoder's : 2
bpo-30721: : 2
bpo-31070: : 2
_get_module_lock() : 2
bpo-30747: : 1
non-dummy : 1
_Py_atomic_store : 1
_Py_atomic_load : 1
bpo-31095: : 3
bpo-31071: : 2
bpo-30978: : 2
str.format_map() : 2
bpo-30808: : 2
_Py_atomic : 2
concurrency-sensitive : 2
bpo-30876: : 3
unloaded : 5
reimports : 3
non-package : 5
bpo-30703: : 2
delivery : 23
Py_AddPendingCall : 2
signal-unsafe : 2
lost) : 3
bpo-30765: : 3
pthread_mutex_lock() : 3
PyThread_acquire_lock() : 3
bpo-31161: : 2
'Missing : 2
parentheses' : 2
bpo-30814: : 2
bpo-30736: : 1
bpo-30604: : 2
co_extra_freefuncs : 2
per- : 8
bpo-30597: : 2
bpo-30682: : 2
too-strict : 2
eval("f'\n'") : 2
eval("f'\r'") : 2
bpo-30501: : 1
(legacy : 1
bpo-30486: : 1
__closure__ : 1
bpo-30537: : 1
itertools.islice : 1
integer-like : 1
bpo-25324: : 1
"COMMENT" : 3
"ENCODING" : 5
tok_names : 1
bpo-29104: : 2
bpo-27945: : 3
Duane : 5
Griffin : 5
Mitchell : 4
bpo-25794: : 3
type.__setattr__() : 3
type.__delattr__() : 3
bpo-30039: : 2
resuming : 5
from' : 3
'await' : 2
bpo-28974: : 1
bpo-30024: : 1
bpo-12414: : 2
sys.getsizeof() : 2
bpo-29839: : 1
__len__() : 4
bpo-11913: : 1
bpo-29914: : 1
__reduce__ : 3
__reduce_ex__() : 1
object.__reduce__() : 4
object.__reduce_ex__() : 1
bpo-29949: : 2
bpo-29935: : 3
index() : 8
bpo-29816: : 1
Shift : 6
bpo-24821: : 1
slowing : 1
bpo-29102: : 1
bpo-29894: : 1
__complex__ : 4
bpo-29859: : 2
pthread_* : 2
thread_pthread.h : 2
bpo-29849: : 1
bpo-28856: : 2
bpo-29723: : 2
bpo-29139 : 3
location's : 4
bpo-29568: : 1
Escaped : 3
"%%" : 7
percents : 1
bpo-29714: : 2
bpo-29695: : 1
bool() : 1
float() : 4
list() : 2
tuple() : 1
int() : 4
bpo-28893: : 2
__cause__ : 3
bpo-28876: : 3
"bool(range)" : 3
"len(range)" : 3
bpo-29683: : 2
_PyCode_SetExtra : 2
Coleman : 2
bpo-29684: : 2
PyEval_CallObjectWithKeywords : 2
segv : 2
args=NULL : 2
bpo-28598: : 3
__rmod__ : 4
str.__mod__ : 3
bpo-29607: : 2
stack_effect : 2
bpo-29602: : 3
bpo-29347: : 3
bpo-29463: : 1
stmt : 2
"co_firstlineno" : 3
(Reverted : 1
bpo-32911.) : 1
bpo-29438: : 3
bpo-29546: : 2
from-import : 1
bpo-29478: : 3
max_line_length=None : 3
Compat32 : 3
Mircea : 3
Cosbuc : 3
bpo-29319: : 3
RunMainFromImporter : 3
bpo-29337: : 3
bpo-29327: : 2
bpo-29034: : 2
(path_converter) : 2
bpo-29159: : 2
bytes(x) : 2
x.__index__() : 2
bpo-29049: : 1
_PyObject_GC_TRACK() : 1
bpo-28927: : 1
bytes.fromhex() : 2
bytearray.fromhex() : 1
bpo-28932: : 3
<sys/random.h> : 3
bpo-25677: : 3
positioning : 4
Layzell : 3
bpo-29000: : 3
octals : 3
bpo-18896: : 1
bpo-28596: : 1
bpo-22257: : 1
432**) : 1
bpo-26919: : 2
encoded/decoded : 3
to/from : 5
os.fsencode() : 3
os.fsdecode() : 3
bpo-28991: : 3
reentrancy : 6
triggerable : 2
monkey-patched : 4
bpo-28147: : 3
split-table : 3
setattr() : 3
bpo-28739: : 2
bpo-28512: : 3
PyErr_SyntaxLocationEx() : 3
PyErr_SyntaxLocationObject() : 3
bpo-28918: : 2
xxlimited : 3
Py_DEBUG : 2
bpo-28797: : 2
bpo-28799: : 1
"PyEval_GetCallStats()" : 1
bpo-12844: : 1
bpo-28782: : 2
YIELD_FROM : 2
WORDCODE : 2
(bpo-26647) : 2
bpo-28774: : 1
(non-ASCII : 1
U+0000-U+00FF : 1
Latin1) : 2
bpo-28731: : 2
_PyDict_NewPresized() : 2
bpo-28532: : 2
sys.version : 8
bpo-27100: : 2
with-statement : 4
Ellington : 2
bpo-28746: : 2
set_inheritable() : 4
ioctl : 5
FIOCLEX : 2
FIONCLEX : 2
bpo-26920: : 2
langinfo : 2
bpo-28648: : 3
astral : 4
bpo-28665: : 2
STORE_DEREF : 2
bpo-19398: : 3
bpo-28621: : 1
bpo-28580: : 1
bpo-28583: : 2
PyDict_SetDefault : 2
bpo-28128: : 2
bpo-28509: : 2
dict.update() : 2
bpo-28426: : 5
PyUnicode_AsDecodedObject() : 5
bpo-28517: : 2
of-by-one : 2
bpo-28214: : 4
bpo-23782: : 3
_PyTraceback_Add() : 3
PyTraceBack_Here() : 3
bpo-28183: : 2
bpo-26081: : 3
bpo-28379: : 3
PyUnicode_CopyCharacters() : 3
bpo-28376: : 7
range_iterator : 6
bpo-26906: : 3
bpo-18287: : 3
PyType_Ready() : 4
tp_name : 4
Koep : 3
bpo-24098: : 3
bpo-28201: : 2
bpo-28350: : 3
bpo-26617: : 3
bpo-27942: : 5
bpo-28289: : 1
ImportError.__init__ : 1
bpo-21578: : 3
bpo-28203: : 3
complex(1.0 : 2
{2:3}) : 2
Soumya : 3
Sharma : 3
bpo-28086: : 2
unscathed : 3
bpo-27955: : 3
/dev/urandom : 4
getrandom() : 11
SECCOMP : 3
bpo-28192: : 2
bpo-27441: : 1
ob_size : 1
longobject.c : 1
bpo-27222: : 1
long_rshift : 1
bpo-28131: : 3
zipimport's : 4
compile_source() : 3
bpo-28126: : 2
Py_MEMCPY : 2
memcpy() : 6
bpo-28120: : 2
dict.pop() : 2
splitted : 3
key" : 2
(Not : 5
split-table) : 2
bpo-26182: : 4
variable/attribute/class/function : 2
bpo-28721: : 2
LOAD_METHOD : 1
CALL_METHOD : 1
bpo-31499: : 2
xml.etree: : 2
bpo-31482: : 2
version=1 : 4
typing.get_type_hints : 2
globalns : 2
caller) : 6
Mitar : 2
bpo-31544: : 2
bpo-31234: : 2
socket.create_connection() : 2
cycle: : 2
bpo-31431: : 1
SSLContext.check_hostname : 2
SSLContext.verify_mode : 2
ssl.CERT_REQUIRED : 3
bpo-31233: : 1
socketserver.ThreadingMixIn : 2
daemonic : 11
server_close() : 2
bpo-28638: : 1
precomputed : 4
*_source* : 1
(approx : 1
6x : 1
measured) : 1
speed-ups : 1
_make : 1
bpo-31400: : 2
bpo-27629: : 1
SSLContext.wrap_bio() : 1
bpo-28958: : 2
ssl.SSLContext() : 2
bpo-28182: : 1
SSLCertVerificationError : 1
peer's : 1
bpo-27340: : 2
SSLSocket.sendall() : 3
costly : 2
bpo-14191: : 1
"argparse.ArgumentParser.parse_intermixed_args" : 1
intermixes : 1
bpo-31178: : 2
bpo-31350: : 2
Micro-optimize : 2
"asyncio._get_running_loop()" : 2
bpo-31170: : 3
2.2.4 : 3
(libexpat : 3
115): : 3
https://github.com/libexpat/libexpat/issues/115 : 3
bpo-29136: : 2
OP_NO_TLSv1_3 : 2
bpo-1198569: : 1
"braceidpattern" : 1
bpo-31326: : 1
concurrent.futures.ProcessPoolExecutor.shutdown() : 1
shutdown(wait=True) : 1
bpo-27144: : 2
bpo-31281: : 1
"fileinput.FileInput(files : 1
inplace=True)" : 1
"files" : 2
bpo-10746: : 2
bpo-27584: : 1
"AF_VSOCK" : 2
bpo-22536: : 2
FileNotFoundError : 5
cwd : 4
bpo-29741: : 1
_pyio : 1
bpo-31249: : 2
concurrent.futures: : 2
WorkItem.run() : 2
WorkItem : 2
bpo-31247: : 2
sys.exc_info() : 3
bpo-23835: : 1
configparser: : 1
"ConfigParser()" : 1
bpo-31238: : 2
pydoc: : 2
stop() : 6
ServerThread : 2
DocServer.serve_until_quit() : 2
docserver : 2
bpo-5001: : 2
bpo-31109: : 1
bpo-30102: : 2
OPENSSL_add_all_algorithms_noconf() : 2
POWER8 : 2
Serra : 2
Scalet : 2
bpo-18966: : 1
bpo-31183: : 1
diagnosis : 1
Luciano : 1
Ramalho : 1
uninformative : 1
5001 : 1
error-reporting : 1
"multiprocessing.managers.convert_to_error" : 1
message.) : 2
TypeError; : 1
*reported* : 1
function/its : 1
31169) : 1
Allen : 5
(drallensmith : 1
github) : 1
bpo-31185: : 2
bpo-31151: : 1
socketserver.ForkingMixIn.server_close() : 1
bpo-31072: : 1
"include_file" : 1
"zipapp.create_archive()" : 1
bpo-24700: : 1
array.array : 3
bpo-31135: : 2
destroy() : 4
LabeledScale : 2
LabeledScale.destroy() : 2
scale : 7
bpo-31107: : 2
"copyreg._slotnames()" : 2
bpo-31080: : 1
"logging.config.fileConfig" : 1
bpo-30897: : 1
POSIX) : 2
"os.path.ismount(p)" : 1
bpo-31061: : 2
bpo-30987: : 1
ISO-TP : 3
bpo-30522: : 1
"setStream" : 1
bpo-30502: : 2
oids : 2
bpo-5288: : 1
bpo-30919: : 1
mmaps : 1
bpo-26732: : 1
still-running : 1
bpo-29403: : 3
"unittest.mock"'s : 3
autospec : 8
method- : 3
Gallagher : 3
bpo-30961: : 3
bpo-19896: : 1
multiprocessing.sharedctypes : 2
typecodes : 2
"'q'" : 3
"'Q'" : 2
bpo-30946: : 1
select() : 1
bpo-25684: : 2
"ttk.OptionMenu" : 2
radiobuttons : 4
"OptionMenu" : 2
bpo-30886: : 3
multiprocessing.Queue.join_thread(): : 3
bpo-29854: : 3
readline's : 3
history- : 3
bpo-30794: : 1
multiprocessing.Process.kill : 1
bpo-30319: : 2
socket.close() : 3
ECONNRESET : 2
bpo-30828: : 2
"asyncio.CFuture.remove_done_callback()" : 2
bpo-30302: : 1
bpo-30807: : 3
signal.setitimer() : 3
Tiny : 3
1e-6) : 3
setitimer() : 3
microsecond-resolution : 3
1e-6 : 3
(re-)scheduling : 3
bpo-30441: : 3
os.environ : 6
bpo-29585: : 1
bpo-29293: : 1
multiprocessing.Condition.notify() : 1
claims : 3
multiprocessing.Condition : 1
threading.Condition : 1
notify() : 1
lacked : 4
sleepers : 1
wake : 9
up) : 4
threading.Condition.notify() : 1
bpo-30532: : 3
bpo-30596: : 1
bpo-9146: : 2
FIPS-140 : 2
bpo-29169: : 3
1.2.11 : 3
bpo-30119: : 3
ftplib.FTP.putline() : 3
bpo-30879: : 3
os.listdir() : 4
bpo-30746: : 3
Prohibited : 4
"os.spawn*()" : 3
bpo-30664: : 1
TestCase.subTest() : 2
bpo-21071: : 1
struct.Struct.format : 1
bpo-29212: : 2
concurrent.futures.thread.ThreadPoolExecutor : 2
"ThreadPoolExecutor-y_n" : 2
bpo-29755: : 3
lgettext() : 3
bpo-30616: : 2
Patched : 2
bpo-30038: : 2
bpo-23894: : 2
"rb'...'" : 2
"f'...'" : 2
bpo-24744: : 1
pkgutil.walk_packages : 1
bpo-24484: : 3
bpo-30589: : 1
multiprocessing.Process.exitcode : 1
255) : 3
bpo-28994: : 3
bpo-30508: : 3
Task/Future : 4
"cancel()" : 7
bpo-30645: : 3
"imp.load_package()" : 1
Alexandru : 3
Ardelean : 3
bpo-11822: : 1
dis.dis() : 2
bpo-30624: : 1
bpo-30595: : 2
multiprocessing.Queue.get() : 2
AsyncContextManager : 3
ContextManager : 5
bpo-30605: : 2
re.compile() : 4
misplaced : 3
Roy : 2
Williams : 5
bpo-29870: : 3
asyncio/ssl : 3
Sghaïer : 3
bpo-27585: : 3
waiter : 4
asyncio.Lock : 5
Mathieu : 5
Sornay : 3
bpo-30014: : 1
modify() : 1
poll() : 2
epoll() : 1
devpoll() : 1
bpo-30418: : 3
subprocess.Popen.communicate() : 3
EINVAL : 4
stdin.write() : 3
bpo-30463: : 1
Addded : 1
abc.ABC : 2
subclassers : 1
deny : 3
__weakref__ : 1
bpo-30520: : 1
bpo-30557: : 2
bpo-30526: : 1
TextIOWrapper.reconfigure() : 1
TextIOWrapper.write_through : 1
bpo-30245: : 1
struct.pack_into : 1
Yuan : 1
bpo-30378: : 3
logging.handlers.SysLogHandler : 3
bpo-16500: : 2
at-fork : 1
bpo-30470: : 1
Wijaya : 4
bpo-30414: : 3
multiprocessing.Queue._feed : 3
bpo-30003: : 3
HZ : 3
bpo-30149: : 3
variable- : 4
partialmethod : 3
bpo-30436: : 1
importlib.find_spec() : 1
__path__ : 3
bpo-30301: : 3
SimpleQueue.empty() : 4
bpo-30375: : 3
inners : 3
conditionals : 4
bpo-30329: : 3
WSAEINVAL : 3
(code : 5
10022) : 3
shutdown(SHUT_RDWR): : 3
bpo-29196: : 1
_InternalDict : 1
readPlist() : 1
readPlistFromBytes() : 1
bpo-9850: : 2
bpo-30299: : 1
bpo-30048: : 3
bpo-30266: : 2
contextlib.AbstractContextManager : 4
anti- : 3
bpo-25958 : 2
bpo-30340: : 1
bpo-30298: : 2
Weaken : 2
subsequential : 2
"'(?i)(?s)...'") : 2
"'(?x) : 2
(?i) : 2
(?s)...'") : 2
bpo-30285: : 1
bpo-29990: : 3
GB18030 : 3
bpo-29979: : 1
bpo-30243: : 3
_json's : 3
Misusing : 3
bpo-30215: : 1
bpo-30185: : 3
bpo-30103: : 1
binascii.b2a_uu() : 1
uu.encode() : 1
typing.NoReturn : 4
WrapperDescriptorType : 4
bug-fixes : 3
Fasarakis-Hilliard : 3
bpo-30205: : 3
bpo-30228: : 1
tell() : 6
io.FileIO : 4
bpo-30190: : 1
unittest's : 1
assertAlmostEqual : 1
assertNotAlmostEqual : 1
Rodola') : 1
bpo-30101: : 1
curses.A_ITALIC : 1
bpo-29822: : 2
inspect.isabstract() : 2
Nate : 4
Soares : 4
bpo-29960: : 3
_random.Random.setstate() : 3
Bryan : 3
Olson : 5
bpo-30070: : 3
bpo-22352: : 1
widths : 3
bpo-30061: : 3
IOBase : 3
__next__() : 6
readlines() : 4
sizeable : 3
PyObject_Size() : 3
PySequence_Size() : 3
PyMapping_Size() : 3
bpo-30218: : 1
PathLike : 3
shutil.unpack_archive : 2
bpo-10076: : 1
copy.deepcopy() : 4
atomic) : 1
bpo-30068: : 3
_io._IOBase.readlines : 3
bpo-29694: : 3
parents=True : 3
bpo-29692: : 3
unchaining : 3
Siddharth : 3
Velankar : 3
bpo-26187: : 1
Indirectly : 2
sqlite3_prepare_v2() : 1
bpo-9303 : 1
bpo-30017: : 2
close() : 42
bpo-29998: : 3
bpo-29995: : 1
re.escape() : 1
bpo-29962: : 1
math.remainder : 1
bpo-29649: : 1
struct.pack_into() : 1
bpo-29654: : 1
If-Modified-Since : 1
(browser : 2
bpo-29931: : 3
ipaddress.ip_interface : 3
Sanjay : 3
Sundaresan : 3
bpo-29953: : 2
replace() : 2
bpo-29942: : 3
itertools.chain.from_iterable : 3
bpo-10030: : 1
bpo-29204: : 1
correspondingly) : 1
bpo-27863: : 3
bpo-25996: : 1
os.fwalk() : 7
bpo-28699: : 3
multiprocessing.pool : 3
bpo-23890: : 3
unittest.TestCase.assertRaises() : 3
bpo-29901: : 1
bpo-25803: : 3
Path.mkdir(exist_ok=True) : 3
EEXIST : 5
bpo-29861: : 3
multiprocessing.Pool : 5
bpo-19930: : 1
os.makedirs() : 1
bpo-29884: : 3
faulthandler: : 3
Christophe : 3
Zeitouny : 3
bpo-25455: : 4
bpo-29800: : 3
partial.__repr__ : 3
partial.keywords : 4
Seifert : 3
bpo-8256: : 3
sys.stdin : 11
bpo-28692: : 1
bpo-26121: : 1
erf() : 1
erfc() : 1
bpo-29619: : 1
os.stat() : 5
os.DirEntry.inode() : 1
inode : 7
(st_ino) : 1
bpo-28298: : 3
'Q' : 3
'I' : 4
intables : 3
(objects : 8
__int__) : 3
bpo-29645: : 1
webbrowser.register() : 1
bpo-28231: : 2
bpo-26915: : 3
count() : 2
collections.abc.Sequence : 3
bpo-28682: : 1
bpo-29728: : 1
bpo-29623: : 2
ConfigParser.read() : 2
Ellis : 2
bpo-9303: : 1
_v2 : 1
bpo-28963: : 2
asyncio.Future.remove_done_callback : 2
bpo-29704: : 3
asyncio.subprocess.SubprocessStreamProtocol : 3
bpo-29271: : 2
Task.current_task : 2
Task.all_tasks : 2
bpo-29703: : 3
bpo-29615: : 3
SimpleXMLRPCDispatcher : 3
exception(s) : 4
dispatched : 11
Motejlek : 3
bpo-7769: : 1
register_function() : 1
xmlrpc.server.SimpleXMLRPCDispatcher : 1
bpo-29376: : 3
threading._DummyThread.is_alive() : 3
bpo-28624: : 2
Popen() : 2
Sayan : 2
Chowdhury : 2
bpo-28518: : 2
bpo-29742: : 3
get_extra_info() : 3
bpo-16285: : 1
urllib.parse.quote : 1
3986 : 3
'~' : 2
bpo-29532: : 3
Altering : 3
functools.partial() : 3
bpo-29110: : 3
aifc.open() : 3
bpo-22807: : 1
uuid.SafeUUID : 2
uuid.UUID.is_safe : 1
relay : 2
bpo-29576: : 1
bpo-29534: : 1
Decimal.from_float() : 1
_pydecimal : 1
bpo-10379: : 1
locale.format_string : 1
'monetary' : 1
locale.format : 1
bpo-29851: : 1
typing.Counter : 3
typing.ChainMap : 3
bpo-29100: : 3
datetime.fromtimestamp() : 3
3.6.0: : 4
bpo-29416: : 3
pathlib.Path.mkdir : 3
bpo-29444: : 3
group() : 4
WGH : 3
bpo-29377: : 1
MethodWrapperType : 1
MethodDescriptorType : 1
bpo-29218: : 1
Unused : 2
install_misc : 1
bpo-29368: : 1
extend() : 1
append() : 1
bpo-29338: : 1
__text_signature__ : 1
bpo-29335: : 3
subprocess.Popen.wait() : 3
ptrace) : 3
bpo-29290: : 3
non-breaking : 7
bpo-28735: : 3
mock.MagickMock : 3
mock.ANY : 3
bpo-29197: : 1
ntpath.splitunc() : 1
bpo-29210: : 1
"exclude" : 3
tarfile.TarFile.add() : 1
bpo-29219: : 3
ctypes.CDLL : 3
bpo-29192: : 1
http.cookies : 3
bpo-29193: : 1
string.Formatter.format() : 1
bpo-29195: : 1
bpo-28969: : 3
functools.lru_cache : 5
uncached : 8
bpo-20804: : 1
unittest.mock.sentinel : 2
bpo-29142: : 3
no_proxy : 5
.b.c : 3
a.b.c) : 3
bpo-28961: : 3
helper: : 4
Jiajun : 3
Huang : 3
bpo-15812: : 3
inspect.getframeinfo() : 3
Breese : 3
bpo-28985: : 1
Dingyuan : 3
bpo-29079: : 2
pathlib.resolve() : 2
bpo-13051: : 3
curses.textpad.Textbox : 3
Tycho : 3
Andersen : 3
bpo-9770: : 3
curses.ascii : 5
bpo-28427: : 3
bpo-28923: : 3
Tix.py : 3
bpo-28871: : 3
bpo-19542: : 3
WeakValueDictionary.setdefault() : 3
WeakValueDictionary.pop() : 3
bpo-20191: : 3
resource.prlimit() : 3
bpo-16255: : 1
/system/bin/sh : 1
bpo-28779: : 3
multiprocessing.set_forkserver_preload() : 3
preloaded : 4
bpo-26937: : 2
chown() : 2
tarfile.TarFile : 3
bpo-28847: : 3
dbm.dumb : 7
bpo-27030: : 3
re.sub() : 5
bpo-28835: : 2
warnings.catch_warnings(): : 3
warnings.showwarning() : 2
bpo-27172: : 2
revisited : 2
bpo-28740: : 1
sys.getandroidapilevel(): : 1
bpo-26273: : 2
bpo-28752: : 2
__reduce__() : 2
bpo-28727: : 2
_sre.SRE_Pattern : 2
x==y : 2
x!=y : 2
operators) : 3
bpo-18383: : 4
reloaded : 14
(thing : 2
bpo-20572: : 2
subprocess.Popen.wait : 2
endtime : 2
bpo-25659: : 3
from_buffer() : 3
from_buffer_copy() : 3
bpo-28548: : 1
0.9 : 5
bpo-19717: : 2
Path.resolve() : 2
bpo-28563: : 2
selections : 17
bpo-28387: : 3
_io.TextIOWrapper : 3
Cufre : 3
bpo-27517: : 3
compressor : 14
decompressor : 9
Fogle : 3
bpo-28549: : 3
curses's : 3
addch() : 4
ncurses6 : 3
bpo-28449: : 3
tarfile.open() : 5
"r:" : 3
ignore_zeros=True : 3
bpo-23262: : 3
36+ : 3
Broytman : 3
bpo-24241: : 1
register() : 2
'preferred' : 1
bpo-27939: : 3
tkinter.ttk.LabeledScale : 3
tkinter.Scale : 3
tkinter.IntVar : 3
bpo-28255: : 4
calendar.TextCalendar.prweek() : 1
weeks's : 1
calendar.TextCalendar.pryear() : 1
year's : 4
calendar.TextCalendar.prmonth() : 1
month's : 11
bpo-20491: : 3
textwrap.TextWrapper : 3
Kaarle : 3
Ritvanen : 3
bpo-28353: : 3
bpo-28430: : 2
it.send(val) : 2
bpo-27025: : 3
Generated : 7
bpo-25464: : 3
HList.header_exists() : 3
tkinter.tix : 6
addin : 3
bpo-28488: : 3
shutil.make_archive() : 4
"./" : 3
bpo-25953: : 2
bpo-28469: : 1
50,.. : 1
100,.. : 1
autoranging : 1
bpo-28115: : 1
bpo-18219: : 2
csv.DictWriter : 2
bpo-28448: : 2
bpo-23214: : 1
BytesIO's : 1
read1() : 4
BufferedIOBase : 2
bpo-28480: : 2
multithreading : 9
bpo-28240: : 3
timeit: : 1
"-c/--clock" : 1
"-t/--time" : 1
autorange : 2
time' : 1
'time.sleep(1)'" : 1
Distutils.sdist : 1
bpo-24452: : 3
Batchelder : 2
bpo-20766: : 3
bpo-27998: : 2
bpo-28317: : 2
disassembler : 2
FORMAT_VALUE : 2
bpo-28380: : 2
assert_called : 2
assert_not_called : 3
assert_called_once : 2
bpo-28229: : 2
bpo-28321: : 3
bpo-28225: : 2
bpo-28227: : 2
bpo-28332: : 1
truncations : 1
socket.htons : 1
socket.ntohs : 1
bpo-27358: : 2
var-keyword : 9
non-mapping : 2
bpo-28257: : 2
non-iterable : 2
bpo-28322: : 3
Leitch : 10
bpo-28228: : 2
bpo-28226: : 2
bpo-28314: : 2
flags) : 14
getiterator() : 2
xml.etree.ElementTree.Element : 2
bpo-28148: : 2
localtime() : 2
gmtime() : 2
_PyTime_localtime : 2
localtime_r : 2
Schouten : 2
bpo-28253: : 3
extreme : 9
months: : 3
0001-01 : 3
9999-12 : 3
itermonthdays() : 3
itermonthdays2() : 3
itermonthdates() : 3
under/overflow : 3
bpo-28275: : 3
decompress() : 4
LZMADecompressor : 3
BZ2Decompressor : 3
bpo-27897: : 3
sqlite3.Connection.create_collation() : 3
bpo-18844: : 4
bpo-18893: : 3
Lib/ctypes/macholib/dyld.py : 3
Madison : 3
bpo-27611: : 3
DisplayStyle : 2
bpo-27348: : 3
"Exception: : 3
3.5a2 : 3
bpo-25651: : 3
falsy : 4
subTest() : 3
bpo-27778: : 3
os.getrandom() : 2
bpo-28200: : 2
path_converter() : 2
bpo-25400: : 2
RobotFileParser : 3
crawl_delay : 2
request_rate : 2
bpo-27932: : 3
win32_ver() : 3
socket._sendfile_use_sendfile : 3
bpo-28075: : 3
ERROR_ACCESS_DENIED : 3
bpo-22493: : 3
(truncated) : 2
bpo-25270: : 3
codecs.escape_encode() : 3
bpo-28181: : 3
antigravity : 3
Kaartic : 3
Sivaraam : 3
bpo-25895: : 3
WebSocket : 3
urllib.parse.urljoin : 3
Gergely : 3
Imreh : 3
Holtermann : 3
bpo-28114: : 2
parse_envlist() : 2
bpo-27599: : 3
binascii.b2a_qp() : 3
binascii.a2b_qp() : 3
bpo-27906: : 3
Conway : 3
bpo-28174: : 3
SO_REUSEPORT : 3
Seth : 3
Larson : 3
bpo-26654: : 3
functools.partial : 14
asyncio.Handle.__repr__ : 3
iceboy : 3
bpo-26909: : 3
bpo-28176: : 3
asyncio.SelectorLoop.sock_connect : 3
bpo-27759: : 3
bpo-28325: : 1
macurl2path : 1
bpo-28368: : 3
Refuse : 3
monitoring : 14
add_reader : 3
add_writer : 3
bpo-28370: : 3
Speedup : 4
asyncio.StreamReader.readexactly : 3
Коренберг : 8
Марк : 8
bpo-28371: : 3
asyncio.Handles : 3
bpo-28372: : 3
non-python : 3
bpo-28399: : 3
bpo-27972: : 3
bpo-24142: : 3
Florian : 3
Höch : 3
bpo-29581: : 2
ABCMeta.__new__ : 2
bpo-25532: : 2
inspect.unwrap() : 2
unwrap : 5
sys.getrecursionlimit() : 3
bpo-30177: : 2
path.resolve(strict=False) : 2
Pietri : 3
bpo-31294: : 2
ZeroMQSocketListener : 2
ZeroMQSocketHandler : 2
bpo-21649: : 2
7525 : 2
bpo-31128: : 1
bpo-30803: : 2
truth : 30
Thomassen : 2
bpo-30176: : 3
bpo-30052: : 2
cross-reference : 2
bpo-26985: : 3
bpo-19824: : 1
bpo-20314 : 1
bpo-12518) : 1
bpo-28929: : 3
bpo-25008: : 3
smtpd.py : 3
aiosmtpd : 4
bpo-26355: : 3
bpo-29349: : 3
bpo-28513: : 3
bpo-29639: : 1
test.support.HOST : 1
"localhost" : 8
HOSTv4 : 1
HOSTv6 : 1
bpo-31320: : 2
Silence : 2
bpo-31346: : 1
PROTOCOL_TLS_CLIENT : 2
PROTOCOL_TLS_SERVER : 1
bpo-25674: : 2
sha256.tbs-internet.com : 2
bpo-30715: : 2
1.1.0f : 3
bpo-30822: : 3
tzdata : 12
--all : 2
--use=all : 2
(15-20 : 2
buildbots) : 2
extralargefile : 3
test_zipfile64 : 3
bpo-30695: : 2
"set_nomemory(start : 2
stop)" : 2
"remove_mem_hooks()" : 2
_testcapi : 2
bpo-30357: : 3
test_thread: : 3
setUp() : 5
support.threading_setup() : 3
support.threading_cleanup() : 3
Grzegorz : 3
Grzywacz : 3
bpo-30197: : 3
swap_attr() : 3
swap_item() : 3
exist) : 10
bpo-24932: : 1
_testembed : 1
bpo-28950: : 3
-j0 : 3
-T/-l : 2
bpo-28683: : 2
bpo-26936: : 1
getservbyname() : 1
getservbyport() : 1
getaddrinfo() : 2
bpo-28666: : 3
test.support.rmtree : 3
unwritable : 3
bpo-23839: : 3
bpo-26944: : 2
test_posix : 2
'id : 4
-G' : 2
bpo-28409: : 3
bpo-28217: : 2
_testconsole : 2
bpo-26939: : 2
support.setswitchinterval() : 2
test_functools : 2
armv7 : 2
qemu : 2
bpo-31354: : 1
bpo-31370: : 1
--without-threads : 3
21st : 1
century : 9
bpo-31341: : 1
bpo-30854: : 2
bpo-30687: : 3
msbuild.exe : 3
vcvarsall.bat : 3
bpo-20210: : 1
bpo-29941: : 2
"--with-assertions" : 4
"assert()" : 2
bpo-28787: : 2
with--dtrace" : 2
bpo-29243: : 3
rebuilding : 4
test" : 3
bpo-23404: : 3
bpo-29643: : 3
"--enable-optimization" : 3
bpo-27593: : 3
python_build() : 2
python_branch() : 2
python_revision() : 2
bpo-29572: : 2
1.0.2k : 3
bpo-27659: : 1
declarations: : 1
"-Werror : 1
=implicit-function-declaration" : 1
(GCC : 1
bpo-29384: : 1
bpo-26851: : 2
bpo-28768: : 2
_setmode : 2
bpo-29080: : 3
hg.exe : 3
PCBuild/build.bat : 3
bpo-23903: : 3
PC/python3.def : 3
lockf() : 2
android-ndk-r13 : 2
if_nameindex() : 2
bpo-20211: : 2
bpo-28849: : 2
sys.implementation._multiarch : 2
bpo-10656: : 3
Tristan : 3
Haubenwallner : 3
bpo-26359: : 5
--with-optimiations : 3
bpo-28444: : 3
bpo-28208: : 2
3.14.2 : 2
bpo-28248: : 3
1.0.2j : 3
bpo-21124: : 1
"&PyType_Type" : 2
PyVarObject_HEAD_INIT : 1
bpo-13756: : 1
Roumen : 1
Petrov : 1
Tishler : 2
bpo-21085: : 1
siginfo_t.si_band : 1
review : 7
rebase : 1
bpo-28258: : 3
Estonian : 3
(python-config : 3
distclean : 3
Arahesis : 6
bpo-26661: : 3
bpo-27979: : 1
bpo-15819: : 3
bpo-28676: : 3
'getentropy' : 3
Gareth : 4
Rees : 4
bpo-30389: : 2
bpo-31358: : 1
bpo-31340: : 2
v141 : 2
(included : 2
2017) : 2
bpo-30581: : 2
os.cpu_count() : 4
bpo-30916: : 1
Pre-build : 1
bpo-30731: : 2
xmlns : 3
python.manifest : 2
bpo-30291: : 1
-64 : 1
(Gadget) : 1
bpo-30362: : 1
(-0 : 2
-0p) : 1
bpo-23451: : 1
bpo-30450: : 2
bpo-29579: : 2
readme.txt : 2
bpo-25778: : 2
Sun) : 8
bpo-28896: : 3
WindowsRegistryFinder : 3
bpo-28522: : 2
mishandled : 2
reallocation : 4
getpathp.c : 2
bpo-28402: : 2
bpo-28333: : 2
ps1/ps2 : 2
bpo-28251: : 3
manuals : 4
bpo-28110: : 3
launcher.msi : 3
bpo-28161: : 2
CON : 2
bpo-28162: : 2
WindowsConsoleIO : 4
readall() : 3
Ctrl+Z : 2
bpo-28163: : 2
fileno() : 8
_open_osfhandle : 2
bpo-28164: : 3
_PyIO_get_console_type : 2
bpo-28137: : 2
Renames : 9
._pth : 5
bpo-28138: : 2
bpo-31493: : 2
Canceling : 2
bpo-31488: : 2
non-key : 2
.reload : 2
ParenMatch : 3
bpo-31477: : 2
Multiline : 2
bpo-31480: : 2
bpo-31421: : 2
bpo-31414: : 2
int('') : 2
bpo-31051: : 2
GenPage : 2
bpo-30617: : 2
outwin : 2
bpo-31287: : 2
tkinter.message : 2
test_configdialog : 8
bpo-27099: : 2
'extensions' : 2
supposedly : 4
keyset : 4
system-specific : 3
keysets : 4
config- : 4
extensions.def : 2
extension.cfg : 2
clicks : 4
Ok : 4
'<<force-open-completions>>' : 2
'<<expand- : 2
word>>' : 2
'<<force-open-calltip>>' : 2
'<<flash-paren>>' : 2
'<<format- : 2
paragraph>>' : 2
'<<run-module>>' : 2
'<<check-module>>' : 2
'<<zoom- : 2
height>>' : 2
(global) : 3
customizations : 6
keyset-specific : 2
bpo-31206: : 2
Factor : 12
HighPage(Frame) : 2
ConfigDialog : 16
bpo-31001: : 2
bpo-31205: : 2
KeysPage(Frame) : 2
bpo-31130: : 2
bpo-31002: : 2
bpo-19903: : 2
"inspect.getfullargspec" : 2
bpo-31083: : 2
outline : 9
TabPage : 2
bpo-31050: : 2
GenPage(Frame) : 2
bpo-31004: : 2
FontPage(Frame) : 2
bpo-30781: : 2
bpo-31060: : 2
bpo-30853: : 2
VarTrace : 2
tracers : 2
bpo-31003: : 2
bpo-30993: : 2
configdialog: : 2
causal : 2
pathways : 3
create_font_tab : 2
set_samples : 4
var_changed_font : 2
(idea : 2
Sabella) : 2
test_configdialog: : 2
test_font_set : 2
test_indent_scale : 2
bpo-30981: : 2
bpo-28523: : 2
'colour' : 5
'color' : 5
bpo-30917: : 2
idlelib.config.IdleConf : 2
46% : 2
96% : 2
bpo-30934: : 2
idlelib/idle-test/README.txt : 2
IDLE-specific : 2
bpo-30913: : 2
Vars : 2
bpo-30899: : 2
bpo-30881: : 2
bpo-30851: : 2
bpo-30870: : 2
Down : 2
bpo-8231: : 2
config.IdleConf.GetUserCfgDir : 2
bpo-30779: : 2
ConfigChanges : 4
config; : 6
'__main__' : 4
config.ConfigChanges : 2
changes_class_v4.py : 2
bpo : 2
test_config.ChangesTest : 2
configdialog_tests_v1.py : 2
ConfigChanges; : 2
msg297804 : 2
bpo-30777: : 2
bpo-30495: : 4
textview : 2
PEP8 : 4
bpo-30723: : 2
parenmatch : 4
'parens' : 2
'default' : 6
'opener' : 2
time-delay : 2
bpo-30674: : 2
bpo-21519: : 2
bpo-29910: : 2
commenting : 2
'break'" : 2
bpo-30728: : 2
Review : 2
idlelib.configdialog : 2
Lowercase : 8
bpo-6739: : 2
user-entered : 2
bpo-15786: : 2
items; : 4
scrollbar; : 2
Hangs : 2
MacOSX : 2
bpo-25514: : 2
subsubsection : 2
Popup : 2
no-connection : 2
bpo-30642: : 2
textview.py : 2
bpo-30290: : 2
Help-about: : 2
pep8 : 2
bpo-30303: : 2
textview; : 2
bpo-29071: : 2
ur : 2
prefixes) : 2
bpo-28572: : 2
bpo-30983: : 2
(py-bt : 2
_PyEval_EvalFrameDefault : 7
inlines : 2
PyEval_EvalFrameEx : 2
py-up : 2
integrations : 2
gdb.py : 2
"Polaco" : 2
Penteado : 2
bpo-29748: : 1
bpo-24037: : 1
"bool(accept={int})" : 1
semantical : 1
bpo-29367: : 2
"method-wrapper" : 2
("wrapperobject") : 2
bpo-28023: : 2
bpo-15369: : 1
microbenchmark : 1
https://github.com/python/performance : 1
bpo-28102: : 1
Turnbull : 2
bpo-31338: : 1
bpo-30832: : 1
Python/thread.c : 1
pthreads) : 1
Py_HAVE_NATIVE_TLS : 1
unconditional : 4
bpo-30708: : 1
PyUnicode_AsWideCharString() : 1
PyOS_AfterFork() : 2
PyOS_BeforeFork() : 2
PyOS_AfterFork_Parent() : 2
PyOS_AfterFork_Child() : 2
bpo-6532: : 1
PyThread_start_new_thread() : 1
PyThread_get_thread_ident() : 1
PyThreadState_SetAsyncExc() : 1
"unsigned : 6
long" : 8
bpo-27867: : 4
PySlice_GetIndicesEx() : 4
0x03050400 : 3
0x03060000 : 3
including) : 5
0x03060100 : 3
PySlice_Unpack() : 1
PySlice_AdjustIndices() : 1
bpo-29083: : 3
PyArg_VaParse() : 3
PyArg_VaParseTupleAndKeywords() : 3
PyArg_ValidateKeywordArguments() : 3
PyArg_UnpackTuple() : 3
bpo-28769: : 1
PyUnicode_AsUTF8AndSize() : 1
PyUnicode_AsUTF8() : 1
bpo-29058: : 2
bpo-28822: : 1
PyUnicode_FindChar() : 1
"str[start:end]" : 6
bpo-28808: : 3
PyUnicode_CompareWithASCIIString() : 3
bpo-28761: : 1
PyStructSequence_Field : 2
PyStructSequence_Desc : 4
wrapperbase : 2
bpo-28748: : 1
_Py_PackageContext : 1
PyUnicode_AsEncodedObject() : 2
PyUnicode_AsDecodedUnicode() : 2
PyUnicode_AsEncodedUnicode() : 2
2018-06-11* : 1
1.0.2o : 2
bpo-29706: : 1
2018-03-28* : 1
2018-03-13* : 1
bpo-30353: : 1
pass-by-value : 1
Cygwin/MinGW : 1
TCP_FASTOPEN : 1
TCP_KEEPCNT : 1
bpo-32555: : 1
os.strerror() : 1
ASCII/surrogateescape : 1
bpo-32185: : 1
1.0.2+ : 1
inet_pton : 1
bpo-31518: : 1
Unstable : 1
SSLv23_METHOD() : 1
PROTOCOL_TLS : 1
PROTOCOL_TLSv1_2 : 1
1.0.2n : 1
5.2.3 : 1
2017-12-18* : 1
v3.6.4rc1 : 1
bpo-31852: : 1
2017-10-03* : 1
bpo-31641: : 1
Re-allow : 1
"concurrent.futures.as_completed()" : 2
3.6.3rc1 : 1
bpo-31662: : 1
"uploadrelease.bat" : 1
"Doc/make.bat" : 2
bpo-31423: : 1
2017-09-18* : 1
2017-07-17* : 1
2017-07-07* : 1
2017-06-17* : 1
bpo-29600: : 2
imp.load_package() : 2
(#2159) : 1
bpo-26293: : 4
bpo-29094) : 2
2017-03-21* : 1
python.h : 1
2017-03-04* : 1
bpo-29519: : 2
spewing : 2
bpo-29316: : 1
bpo-29011: : 2
Deque : 4
bpo-29203: : 1
f(a=1 : 2
b=2) : 3
f(b=2 : 1
a=1) : 1
bpo-29094: : 2
Offsets : 4
"w" : 10
bpo-29085: : 1
random.Random.seed() : 1
bpo-29061: : 1
secrets.randbelow() : 1
Brendan : 1
Donegan : 1
bpo-29119: : 2
move_to_end() : 2
Andra : 2
Bogildea : 2
bpo-29055: : 1
Neaten-up : 1
random.choice() : 1
bpo-29326: : 1
Ignores : 3
Izbyshev) : 1
bpo-29409: : 1
bpo-29392: : 2
msvcrt : 2
bpo-28087: : 2
test_asyncore : 2
test_eintr : 2
select.poll : 2
test_re.test_locale_flag : 2
multi-byte : 4
encoding) : 23
2016-12-23* : 1
2016-12-16* : 1
bpo-28990: : 2
HoHo-Ho) : 2
bpo-28770: : 1
fastcalls : 1
bpo-28898: : 1
HAVE_LONG_LONG : 1
redefinition : 2
2016-12-06* : 1
bpo-28843: : 1
__traceback__ : 1
2016-11-21* : 1
bpo-27243: : 3
PendingDeprecationWarning : 9
agreed : 2
bpo-28600: : 2
loop.call_soon : 1
bpo-28613: : 2
coroutines/callbacks : 2
bpo-28634: : 1
asyncio.isfuture() : 1
unittest.Mock : 1
_asyncio.Future.__iter__().throw : 1
bpo-28639: : 2
inspect.isawaitable : 3
Mayfield : 2
bpo-28652: : 2
bpo-28653: : 2
bpo-28703: : 2
asyncio.iscoroutinefunction : 2
bpo-28704: : 1
create_unix_server : 1
Path-like : 1
519) : 2
bpo-28720: : 1
collections.abc.AsyncGenerator : 2
2016-10-31* : 1
bpo-28471: : 1
socket.setblocking : 1
calendar.TextCalendar().prmonth() : 2
bpo-28492: : 1
_asyncio.Future : 1
bpo-28500: : 1
gens : 1
bpo-26923: : 2
asyncio.Gather : 2
refuse : 7
Ebke : 2
bpo-26796: : 2
Lawrenz : 2
bpo-28544: : 1
2016-10-10* : 1
conforming : 8
statistics.geometric_mean : 1
2016-09-12* : 1
__class__ : 5
super() : 3
type.__new__ : 1
__build_class__ : 1
bpo-25221: : 2
PyLong_FromLong(0) : 2
NSMALLPOSINTS : 2
bpo-27080: : 1
bpo-27199: : 1
copyfileobj : 1
Fried : 1
bpo-27948: : 1
are) : 1
"f'\x7b"hi"\x7d'" : 1
bpo-28046: : 1
bpo-28071: : 1
early-out : 2
differencing : 2
bpo-25758: : 2
bpo-25856: : 1
__module__ : 7
bpo-27213: : 1
Rework : 3
CALL_FUNCTION* : 1
bpo-26331: : 1
bpo-27999: : 1
use" : 1
ditto : 1
bpo-28003: : 1
bpo-27985: : 1
bpo-26058: : 1
509 : 1
bpo-27364: : 1
bpo-27350: : 1
(Concept : 1
bpo-27911: : 1
"exec_builtin_or_dynamic()" : 1
bpo-27078: : 1
BUILD_STRING : 1
bpo-17884: : 1
inttypes.h : 1
stdint.h : 1
bpo-27961: : 1
formality : 1
bpo-27355: : 1
bpo-27870: : 1
bpo-25402: : 1
int-to-decimal-string : 1
estimate : 15
bpo-27214: : 1
long_invert : 1
long_add : 1
bpo-27506: : 1
bytes/bytearray.translate() : 1
bpo-27812: : 2
backreference : 4
frame.clear() : 4
bpo-27811: : 2
warnings-as-errors : 2
bpo-27587: : 2
PVS-Studio: : 2
'def' : 11
_PyState_AddModule() : 2
bpo-27792: : 1
bpo-26984: : 1
bpo-25604: : 1
division; : 1
off-by-one-ulp : 1
unreliable : 3
ldexp : 2
bpo-24254: : 1
bpo-27662: : 1
"List_New": : 1
"Py_SIZE_MAX" : 1
"Py_SSIZE_T_MAX" : 1
bpo-27782: : 2
"m_methods" : 2
non-module : 2
"Py_create_mod" : 2
bpo-27936: : 2
round() : 2
bpo-27487: : 2
runpy.run_module() : 2
bpo-27157: : 1
type() : 1
bpo-27558: : 2
reraise : 5
bpo-28008: : 1
codeobject.c : 2
bpo-28732: : 2
os.spawnv() : 2
bpo-28485: : 2
compileall.compile_dir(workers=...) : 2
bpo-28037: : 1
sqlite3_get_autocommit() : 1
Connection->inTransaction : 1
bpo-25283: : 1
tm_gmtoff : 1
tm_zone : 1
time.localtime() : 1
time.gmtime() : 1
bpo-24454: : 1
"mo[x]" : 1
"mo.group(x)" : 1
bpo-10740: : 1
bpo-17941: : 1
Inline : 4
bpo-26885: : 1
bpo-28070: : 1
bpo-19500: : 1
bpo-28022: : 1
ssl-related : 1
certfile/keyfile : 1
similar) : 6
bpo-28043: : 1
settings: : 4
OP_NO_SSLv2 : 1
OP_NO_SSLv3 : 2
OP_NO_COMPRESSION : 1
OP_CIPHER_SERVER_PREFERENCE : 1
OP_SINGLE_DH_USE : 1
OP_SINGLE_ECDH_USE : 1
HIGH : 1
bpo-24693: : 1
RuntimeError's : 1
bpo-17909: : 1
"json.load" : 1
bpo-27137: : 1
bpo-1703178: : 2
--link-objects : 2
build_ext : 6
bpo-28019: : 2
itertools.count() : 5
bpo-18401: : 1
'readrc' : 1
Matusiak : 1
Kimbrel : 2
bpo-25969: : 2
bpo-14977: : 2
("first : 2
match") : 2
1542 : 2
bpo-28082: : 1
bpo-28025: : 1
IntFlags : 1
bpo-23591: : 1
bpo-433028: : 1
bpo-24594: : 2
Validates : 2
bpo-17582: : 2
nows : 2
Reviewed : 2
Behnel.) : 2
bpo-28047: : 2
CTE : 10
bpo-27576: : 1
OrderedDict.__init__() : 1
email.generator.DecodedGenerator : 1
bpo-28027: : 1
"Lib/plat-*": : 1
CDROM : 1
DLFCN : 1
TYPES : 2
CDIO : 1
STROPTS : 1
bpo-27445: : 2
str(_charset) : 2
MIMEText.set_payload() : 2
bpo-24277: : 1
emphasize : 3
bpo-22450: : 2
"Accept: : 2
*/*" : 2
REST : 2
lib2to3.pgen3.driver.load_grammar() : 2
Grammar.txt : 2
bpo-28005: : 1
ImportErrors : 2
bpo-26667: : 1
bpo-27570: : 2
bpo-22233: : 2
bpo-27331: : 1
email.mime : 1
bpo-27988: : 2
iter_attachments : 2
bpo-16113: : 1
tautological-pointer-compare : 1
_scproxy.c : 1
bpo-27776: : 1
bpo-27691: : 2
GEN_RID : 2
X.509 : 9
bpo-25761: : 2
unpickler : 12
bpo-26798: : 1
(blake2b : 1
blake2s) : 1
bpo-26032: : 1
os.scandir(); : 1
bpo-25596: : 1
glob() : 4
iglob() : 1
bpo-27928: : 1
scrypt : 2
(password-based : 1
(requires : 1
1.1.0) : 1
bpo-27850: : 2
sweet32 : 2
(CVE-2016-2183) : 2
bpo-27766: : 2
(Required : 3
LibreSSL) : 2
bpo-25387: : 1
winsound.MessageBeep : 1
bpo-27866: : 1
SSLContext.get_ciphers() : 2
bpo-27744: : 1
AF_ALG : 1
crypto) : 1
bpo-26470: : 2
bpo-11620: : 1
SND_MEMORY : 1
winsound.PlaySound : 1
Lesher : 1
bpo-11734: : 1
bpo-27919: : 1
bpo-23229: : 1
bpo-27842: : 1
Holden.) : 1
os.access : 3
bpo-12885: : 2
bpo-27881: : 2
sqlite3.Connection.isolation_level : 2
bpo-27861: : 2
sqlite3.Connection.cursor() : 2
bpo-19884: : 3
Gnu : 2
bpo-27706: : 2
random.Random().seed() : 2
random() : 4
Nofar : 2
Schnider : 2
bpo-10513: : 2
Connection.commit() : 2
bpo-12319: : 1
Chunked : 3
http.client.HTTPConnection : 1
urllib.request.AbstractHTTPHandler : 1
Content- : 3
Length : 9
transfer-encoding : 1
https://github.com/python/typing: : 2
(bpo-27598) : 2
FrozenSet : 2
(upstream : 7
#261) : 2
_get_type_vars() : 2
#259) : 2
ForwardRef._eval_type : 2
#252) : 2
bpo-27832: : 1
"_normalize" : 1
"Fraction(2 : 1
bpo-27539: : 2
"Fraction.__pow__" : 2
bpo-21718: : 2
cursor.description : 2
CTEs : 2
bpo-27819: : 1
"gztar" : 7
(gzipped : 1
bpo-2466: : 2
posixpath.ismount : 2
bpo-9998: : 1
LD_LIBRARY_PATH : 1
bpo-27573: : 2
code.interact : 2
bpo-27930: : 2
logging.handlers.QueueListener : 3
Andrade : 2
bpo-6766: : 1
Distributed : 1
bpo-21201: : 2
Wojciech : 2
Walczak : 2
set_protocol : 1
get_protocol : 1
bpo-15308: : 2
'interrupt : 2
execution' : 2
(^C) : 2
Serwy : 4
Bayard : 2
Randel : 2
bpo-27922: : 2
'flashing' : 2
gui : 4
bpo-27891: : 1
bpo-17642: : 1
classroom : 2
projection : 1
bpo-25564: : 2
bpo-27821: : 1
3.6.0a3 : 2
bpo-26900: : 1
underscored : 2
bpo-26027: : 2
PyUnicode_FSConverter() : 1
PyUnicode_FSDecoder() : 3
bpo-27427: : 1
Couzo : 1
bpo-27953: : 1
libm : 3
tan : 1
bpo-26040: : 1
test_math : 1
test_cmath : 1
rigour : 1
bpo-27787: : 2
"dangling : 2
threads" : 3
bpo-27566: : 2
Roach) : 2
bpo-27705: : 2
validate_ucrtbase.py : 2
bpo-27976: : 1
bpo-27983: : 2
Cause : 6
llvm-profdata : 4
"--with-optimizations" : 1
Linuxes : 2
bpo-21590: : 1
bpo-26307: : 2
--with-optimizations : 3
bpo-27917: : 1
bpo-25825: : 3
$(LIBPL) : 1
3.2a4 : 2
3.14.1 : 1
bpo-21122: : 1
bpo-17128: : 2
bpo-27952: : 2
Tools/scripts/fixcid.py : 2
bpo-28065: : 1
xz : 2
bpo-25144: : 2
bpo-1602: : 1
528) : 1
bpo-27781: : 1
529) : 1
bpo-27731: : 1
Opt-out : 1
bpo-6135: : 1
bpo-27959: : 1
oem : 2
ansi : 2
mbcs : 3
aliasmbcs : 1
bpo-27982: : 1
bpo-20366: : 1
bpo-27756: : 1
Designs : 1
Cherry : 1
bpo-27883: : 1
3.14.1.0 : 1
2016-08-15* : 1
bpo-27704: : 1
byte-like : 4
bpo-26823: : 2
"[Previous : 2
times]" : 2
bpo-27574: : 1
Decreased : 1
bpo-22557: : 1
bpo-17596: : 1
<wincrypt.h> : 1
Min : 2
GW : 2
bpo-17599: : 1
privately : 1
REPARSE_DATA_BUFFER : 1
bpo-27507: : 2
bytearray.extend() : 2
bpo-27581: : 2
PySequence_Tuple() : 2
bpo-27419: : 2
__import__() : 2
"__import__" : 2
unabling : 1
__spec__ : 5
bpo-27083: : 2
bpo-27514: : 2
bpo-27366: : 1
(Simpler : 1
519**/__fspath__() : 1
bpo-27524) : 1
bpo-27598: : 1
bpo-25958: : 1
"anti-registration" : 1
__iter__ : 2
__len__ : 3
more) : 3
unhashable.) : 1
bpo-16764: : 1
zlib.decompress() : 3
bpo-27736: : 1
re-initialization : 1
bpo-27038 : 1
bpo-25628: : 1
bpo-12345: : 1
traceback.StackSummary.format : 1
bpo-27664: : 1
concurrent.futures.thread.ThreadPoolExecutor() : 1
geometric_mean : 1
harmonic_mean : 1
bpo-6422: : 1
timeit.Timer : 1
bpo-27773: : 2
server_hostname : 3
_ssl.wrap_socket() : 2
bpo-26750: : 2
unittest.mock.create_autospec() : 2
unittest.mock.DescriptorTypes : 1
bpo-26754: : 5
compile() : 3
bpo-26800: : 1
bpo-26981: : 1
_order_ : 2
enum.Enum : 2
bpo-27661: : 1
datetime.combine : 1
window.getstr() : 3
window.instr() : 2
bpo-27783: : 2
operator.methodcaller : 2
bpo-27774: : 2
unowned : 2
bpo-27760: : 2
binascii.b2a_qp : 2
bpo-27758: : 2
bpo-27568: : 2
HTTPoxy : 2
(CVE-2016-1000110) : 2
HTTP_PROXY : 2
REQUEST_METHOD : 2
bpo-7063: : 1
Chuck : 1
bpo-27656: : 2
sched.h : 2
SCHED_* : 2
bpo-27130: : 2
GiB) : 2
bpo-24773: : 1
(Local : 1
Disambiguation) : 1
EPOLLEXCLUSIVE : 1
bpo-27567: : 1
EPOLLRDHUP : 1
POLLRDHUP : 1
negation : 9
bpo-27533: : 2
nt._isdir : 2
bpo-17711: : 2
bpo-27522: : 2
unintentional : 3
email.feedparser : 2
bpo-27512: : 1
os.fspath() : 2
__fspath__() : 3
bpo-27714: : 2
text_textview : 2
test_autocomplete : 2
-jn : 2
test_config : 2
bpo-27621: : 1
messagebox : 1
Redo : 5
refinements : 1
bpo-27620: : 1
bpo-27609: : 2
bpo-25507: : 4
bpo-27173: : 2
Unix' : 2
crc : 5
configHandler : 3
bpo-25805: : 1
test_pkgutil : 1
bpo-27472: : 1
test.support.unix_shell : 2
bpo-27369: : 2
test_pyexpat : 2
bpo-27594: : 1
test_ast : 1
enabled: : 5
bpo-27647: : 1
8.6.6 : 1
bpo-27610: : 1
bpo-27469: : 2
bpo-27309: : 2
python[w].exe : 2
bpo-27713: : 2
Modules/python.exp : 2
3.5.0a1 : 2
bpo-27453: : 2
CPP : 2
bpo-27641: : 2
_freeze_importlib : 4
bpo-26662: : 2
PYTHON_FOR_GEN : 2
bpo-10910: : 2
FreedBSD : 2
ctype : 5
2016-07-11* : 1
bpo-27278: : 2
bpo-22636: : 2
bpo-27473: : 2
bpo-23034: : 1
SHOW_ALLOC_COUNT : 1
SHOW_TRACK_COUNT : 1
bpo-27443: : 2
__length_hint__() : 2
bpo-27007: : 1
fromhex() : 1
bpo-26844: : 2
imp.find_module() : 2
Lev : 2
Maximov : 2
bpo-23804: : 4
recv() : 4
bpo-27466: : 2
http.cookie.time2netscape : 2
confirming : 2
netscape : 2
bpo-21708: : 1
bpo-26721: : 1
socketserver.StreamRequestHandler.wfile : 1
bpo-22115: : 2
trace_add : 1
trace_remove : 1
trace_info : 1
tkinter.Variable : 1
trace_variable : 1
trace_vdelete : 1
trace_vinfo : 1
trace_vdelete() : 2
trace_vinfo() : 2
bpo-26243: : 2
zlib.compress() : 2
bpo-27038: : 1
os.DirEntry : 2
bpo-27186: : 7
os.fspath()/PyOS_FSPath() : 1
bpo-18726: : 1
dump() : 1
dumps() : 1
load() : 3
loads() : 2
JSONEncoder : 1
JSONDecoder : 1
bpo-27319: : 1
selection_set() : 1
selection_add() : 1
selection_remove() : 1
selection_toggle() : 1
ttk.TreeView : 3
selection() : 2
bpo-27079: : 2
isblank() : 2
iscntrl() : 2
ispunct() : 2
bpo-27294: : 2
Numerical : 7
bpo-27177: : 1
index-like : 1
(compile() : 2
bpo-26536: : 1
socket.ioctl : 1
SIO_LOOPBACK_FAST_PATH : 1
bpo-27048: : 2
bpo-27330: : 2
bpo-27238: : 2
Got : 9
excepts : 2
bpo-27122: : 2
contextlib.ExitStack() : 2
issue25782 : 2
bpo-16864: : 1
sqlite3.Cursor.lastrowid : 1
REPLACE : 1
bpo-26386: : 2
id's : 3
bpo-8637: : 1
pager : 4
MANPAGER : 1
PAGER) : 1
bpo-16182: : 2
get_begidx() : 2
get_endidx() : 2
bpo-27392: : 2
loop.connect_accepted_socket() : 2
bpo-27477: : 1
"idle-test> : 1
test_help.py" : 1
bpo-27380: : 1
query.py : 1
SectionName : 1
ModuleName : 2
HelpSource : 1
=>Load : 1
itw : 1
bpo-27372: : 1
Test_idle : 1
bpo-27365: : 3
NEWS.txt : 4
bpo-27245: : 2
Cleanly : 2
cascade : 2
bpo-24137: : 1
htest : 6
bpo-27310: : 1
IDLE.app : 1
bpo-28066: : 2
bpo-27442: : 1
sysconfig.get_config_vars() : 1
'ANDROID_API_LEVEL' : 1
bpo-27434: : 1
bpo-26930: : 4
1.0.2h : 4
bpo-23968: : 1
plat-$(MACHDEP) : 1
plat-$(PLATFORM_TRIPLET) : 1
(LIBPL) : 1
config-$(LDVERSION) : 1
config-$(LDVERSION)-$(PLATFORM_TRIPLET) : 1
_sysconfigdata : 1
ABIFLAGS : 1
largefile : 1
GNU/Hurd : 4
bpo-27332: : 2
bpo-27418: : 2
Tools/importbench/importbench.py : 2
bpo-19489: : 2
footer : 5
bpo-27285: : 1
"virtual : 9
Piercy : 1
bpo-27027: : 1
test.support.is_android : 2
2016-06-13* : 1
bpo-26556: : 2
CVE-2015-1283 : 2
CVE-2016-0772 : 2
Reported : 3
Oststrom : 2
bpo-26839: : 2
"GRND_NONBLOCK" : 5
Colm : 2
Buckley : 2
bpo-27095: : 1
MAKE_CLOSURE : 1
bpo-27190: : 1
NotSupportedError : 1
Sawyer : 1
bpo-27286: : 1
BUILD_MAP_UNPACK_WITH_CALL : 2
448) : 1
bpo-27140: : 1
BUILD_CONST_KEY_MAP : 1
os.PathLike : 6
519**) : 5
bpo-27066: : 2
open()) : 2
bpo-26983: : 1
__float__ : 4
bpo-27097: : 1
bpo-26647: : 1
bpo-23275: : 1
(SO_REUSEPORT) : 1
(O_SHLOCK : 1
O_EXLOCK) : 1
recognizable : 5
ElementTree.Element : 4
bpo-20508: : 1
IPv{4,6}Network.__getitem__ : 1
bpo-21386: : 2
IPv4Address.is_global : 2
07a5610bae9d : 2
Luethi : 2
bpo-27029: : 1
ZipFile.open() : 3
bpo-20900: : 2
ingrid : 4
@overload : 5
Reversible : 2
DefaultDict : 2
Type[] : 2
NewType() : 2
TYPE_CHECKING : 2
analyzers) : 2
(Awaitable : 2
AsyncIterable : 3
AsyncIterator) : 2
mentioned) : 2
bpo-25738: : 2
http.server.BaseHTTPRequestHandler.send_error() : 2
205 : 2
Susumu : 2
Koshiba : 2
bpo-21313: : 2
bpo-23883: : 2
bpo-27164: : 2
Deflate : 2
zdict : 2
bpo-24291: : 2
wsgiref.simple_server.WSGIRequestHandler : 2
wsgiref.handler.ServerHandler : 2
bpo-21272: : 1
_sysconfigdata.py : 1
distutils.sysconfig : 3
bpo-19611: : 1
bpo-26809: : 2
bpo-26373: : 2
subprocess.Popen.communicate : 2
BrokenPipeError : 5
.communicate() : 2
more/all : 2
Ex: : 2
signal.Signals(6) : 1
signal.SIGALRM : 2
flipping : 1
signal.SIGIOT : 1
bpo-27167: : 1
subprocess.CalledProcessError : 2
bpo-25931: : 1
socketserver.Forking* : 1
os.fork() : 3
bpo-21776: : 2
distutils.upload : 2
bpo-26526: : 1
bpo-27114: : 2
SSLContext._load_windows_store_certs : 2
filterwarnings : 2
simplefilter : 2
bpo-23026: : 1
winreg.QueryValueEx() : 1
REG_QWORD : 1
bpo-26741: : 1
bpo-27056: : 1
pickle.load() : 1
deserialize : 3
bpo-21271: : 1
reset_mock : 3
bpo-5124: : 2
Paste : 4
X11 : 5
bpo-24750: : 3
scrollbars : 5
bpo-24759: : 3
bpo-27239: : 1
idlelib.macosx.isXyzTk : 1
bpo-27262: : 1
unbinding : 1
idlelib.idle_test.__init__ : 2
test.test_idle : 2
bpo-27196: : 2
'ThemeChanged' : 2
#20567 : 2
Storchaka's : 2
update_idletasks : 2
bpo-20567: : 2
bpo-24225: : 2
idlelib/README.txt : 2
bpo-27156: : 1
bpo-27117: : 2
"idlelib/*.py" : 1
"idle_test/test_*.py" : 1
bpo-26673: : 2
bpo-21939: : 2
percolator : 2
bpo-21676: : 2
bpo-18410: : 2
Westley : 2
Martínez : 2
bpo-21703: : 2
undo : 8
delegator : 2
bpo-27044: : 2
ConfigDialog.remove_var_callbacks : 2
bpo-23977: : 2
test_delegator : 2
bpo-16484: : 1
PYTHONDOCS : 1
"https:" : 2
Rodman : 1
Kaushik : 1
Nadikuditi : 1
bpo-24136: : 2
bpo-22558: : 2
Python-coded : 3
Yoni : 2
Lavi : 2
bpo-25285: : 2
Tools/buildbot/test.bat : 1
bpo-27064: : 1
bpo-17500: : 2
https://github.com/python/pythondotorg/issues/945) : 2
bpo-27229: : 2
in-tree : 3
10.5+ : 4
32-bit-only : 3
PyOS_FSPath() : 1
bpo-26282: : 2
PyArg_ParseTupleAndKeywords() : 2
2016-05-16* : 1
bpo-26657: : 2
3.3.4rc1 : 2
3.4.0rc1 : 2
Hagemeister : 2
bpo-26313: : 2
ssl.py : 2
_load_windows_store_certs : 2
Baji : 2
bpo-25939: : 2
ssl.enum_certificates : 2
bpo-20041: : 2
bpo-26168: : 2
bpo-26991: : 2
bpo-27039: : 2
bytearray.remove() : 2
bpo-23640: : 2
int.from_bytes() : 2
bypasses : 5
bpo-27005: : 1
float.fromhex() : 1
bpo-18531: : 1
bpo-26811: : 2
gc.get_objects() : 2
bpo-20120: : 2
bpo-26249: : 1
crash: : 1
bpo-26802: : 1
"func(*tuple)" : 1
keyword): : 1
bpo-26659: : 2
bpo-26718: : 2
super.__init__ : 4
NOTE: : 6
endorsed : 3
bpo-27138: : 2
FileFinder.find_spec() : 2
bpo-27147: : 2
bpo-25339: : 2
bpo-26494: : 2
exhausting : 2
bpo-26574: : 1
bpo-26581: : 2
bpo-19711: : 1
bpo-21099: : 1
bpo-26563: : 1
bpo-26564: : 1
bpo-26558: : 1
bpo-26516: : 4
"PYTHONMALLOCSTATS" : 3
bpo-26464: : 2
str.translate() : 2
bpo-22836: : 2
PyErr_Display() : 2
PyErr_WriteUnraisable() : 2
sys.__excepthook__() : 2
__del__() : 3
bpo-26302: : 2
bpo-26136: : 1
Anish : 1
Shah : 1
bpo-26204: : 1
True) : 9
ast.Constant; : 1
1.0" : 5
bpo-4806: : 2
Fürstenau : 2
bpo-26146: : 1
node: : 1
bpo-23601: : 1
Taylor.) : 2
bpo-18018: : 1
bpo-25843: : 2
"f1 : 2
f2 : 4
lambda: : 13
"f1()" : 2
("int") : 34
"f2()" : 2
("float") : 7
bpo-26107: : 1
bpo-26154: : 2
_PyThreadState_UncheckedGet() : 2
_PyThreadState_Current : 2
bpo-25791: : 1
bpo-22995: : 6
[UPDATE] : 2
pickleability : 3
_PyObject_GetState() : 2
Cython-based : 2
bpo-25961: : 2
Disallowed : 3
bpo-25973: : 2
(__reduce__ : 2
__reduce_ex__ : 4
__getnewargs__ : 2
__getnewargs_ex__ : 2
__getstate__) : 2
bpo-20440: : 2
Massive : 2
Py_SETREF : 2
bpo-25766: : 2
__bytes__() : 4
bpo-25421: : 2
__sizeof__ : 5
sys.getsize() : 2
bpo-25709: : 3
bpo-5319: : 1
Py_FinalizeEx() : 2
bpo-25485: : 1
telnetlib.Telnet : 1
bpo-24097: : 2
bpo-24731: : 2
__trunc__ : 2
bpo-25630: : 2
bpo-23564: : 2
fds_to_pass : 2
subprocess.py : 2
bpo-25388: : 2
bpo-25462: : 2
bpo-24802: : 2
overreads : 2
eval() : 3
bpo-25555: : 2
AST: : 2
"arg" : 13
bpo-24726: : 2
bpo-25449: : 4
Iterating : 9
bpo-25395: : 2
bpo-25401: : 1
bytearray.fromhex(): : 1
bpo-25399: : 1
_PyBytesWriter : 2
bpo-25274: : 2
sys.setrecursionlimit() : 2
"lower-water : 2
mark" : 2
overflowed : 3
bpo-24402: : 2
sys.stdout.fileno() : 2
bpo-25349: : 1
bpo-24806: : 2
bpo-25301: : 1
bpo-24848: : 2
misformed : 2
bpo-25267: : 1
co-written : 2
bpo-25280: : 2
(-v) : 2
bpo-25227: : 1
bpo-25003: : 2
getentropy() : 5
high-quality : 2
bpo-9232: : 1
f(* : 1
3,): : 1
bpo-24965: : 1
"Literal : 1
Interpolation" : 1
x=3 : 1
f'value={x}' : 1
'value=3' : 1
bpo-26478: : 2
bpo-26171: : 2
zipimporter.get_data() : 2
bpo-25660: : 2
TAB : 3
bpo-26288: : 1
PyLong_AsDouble : 1
bpo-26289: : 1
Microbenchmarks : 1
2-2.5x : 1
~10% : 1
bpo-26315) : 1
bpo-25887: : 2
bpo-27057: : 2
ioctl() : 2
EACCESS : 2
fcntl() : 3
Michał : 2
Bednarski : 2
bpo-27014: : 2
Tuure : 2
bpo-27031: : 1
tk_menuBar() : 1
tk_bindForTraversal() : 1
bpo-14132: : 2
Ján : 2
Janech : 2
bpo-17214: : 2
percent-encodes : 2
ASCII-encodable : 2
UnicodeEncodeError : 5
bpo-27033: : 1
decode_data : 3
smtpd.SMTPChannel : 1
smtpd.SMTPServer : 1
bpo-27034: : 1
asynchat.fifo : 2
bpo-26870: : 1
readline.set_auto_history() : 1
bpo-26039: : 2
zipfile.ZipFile.open() : 1
bpo-26892: : 2
urllib.request.HTTPHandler : 3
bpo-22274: : 2
bpo-26807: : 2
'files' : 2
Yolanda : 2
Robla : 2
bpo-25745: : 2
userptr : 2
bpo-26977: : 2
statistics.pvariance : 2
bpo-26002: : 1
statistics.median : 1
Upendra : 1
Kuma : 1
bpo-25974: : 1
Decimal.as_integer_ratio() : 2
bpo-26996: : 1
bpo-26881: : 2
modulefinder : 4
bpo-23815: : 2
_tkinter : 3
curses.panel : 2
bpo-17765: : 2
weakref.ref() : 2
bpo-26873: : 2
ResponseError : 2
__contains__ : 4
bpo-26711: : 2
plistlib.Data : 2
bpo-24114: : 2
"ctypes.util" : 3
SunOS : 7
"crle" : 2
Tested : 4
Kees : 2
Bos : 2
bpo-26864: : 2
bypassed : 4
bpo-24902: : 1
bpo-25788: : 1
fileinput.hook_encoded() : 1
bpo-26634: : 2
recursive_repr() : 2
__qualname__ : 10
bpo-26804: : 2
lower_case : 2
UPPER_CASE : 3
Mixed_Case : 2
Hans-Peter : 2
bpo-26837: : 2
assertSequenceEqual() : 2
assertListEqual() : 2
assertTupleEqual() : 2
bpo-26041: : 2
3.7" : 2
platform.dist() : 3
platform.linux_distribution() : 3
Kumaripaba : 2
Miyurusara : 2
Athukorala : 2
bpo-26822: : 2
itemgetter : 4
attrgetter : 5
methodcaller : 3
bpo-26733: : 2
Disassembling : 2
disassembles : 6
bpo-26801: : 2
bpo-24838: : 2
gnu : 2
bpo-26717: : 2
Latin-1-ized : 2
bpo-26782: : 1
STARTUPINFO : 2
subprocess.__all__ : 1
bpo-26404: : 1
bpo-26735: : 2
1,024 : 2
bytes: : 6
bpo-26585: : 1
http.server._quote_html() : 1
html.escape(quote=False) : 1
bpo-26685: : 1
bpo-16329: : 2
.webm : 2
mimetypes.types_map : 5
bpo-13952: : 2
.csv : 2
bpo-26587: : 1
bpo-25609: : 1
typing.ContextManager : 1
bpo-26709: : 2
Y2038 : 2
PLists : 2
bpo-23735: : 2
6.3+ : 2
SIGWINCH : 3
bpo-25951: : 1
bpo-26586: : 2
respond : 12
"413 : 2
large" : 2
bpo-26676: : 1
ElementTree.__all__ : 1
bpo-22854: : 2
BufferedReader.writable() : 2
BufferedWriter.readable() : 2
bpo-26492: : 1
sequences: : 4
lefts : 1
bpo-26641: : 1
doctest.DocFileTest : 1
doctest.testfile() : 1
(module : 3
bpo-25195: : 2
mock.MagicMock : 2
_Call : 2
3603bae63c13 : 2
__ne__ : 6
Plummer : 2
bpo-26644: : 2
SSLSocket.recv() : 2
recv(0) : 2
read(0) : 2
bpo-26616: : 2
datetime.astimezone() : 2
bpo-26637: : 1
(set : 4
bpo-21925: : 2
"tracemalloc.get_object_traceback()" : 1
bpo-23848: : 1
(SIGSEGV : 1
SIGFPE : 1
SIGABRT) : 1
bpo-26530: : 1
"_PyTraceMalloc_Track()" : 1
"_PyTraceMalloc_Untrack()" : 1
"_PyTraceMalloc_GetTraceback()" : 1
bpo-26588: : 1
_tracemalloc : 1
(domains) : 1
bpo-24266: : 2
bpo-26590: : 1
_socket.socket : 1
bpo-18787: : 1
spwd.getspnam() : 1
bpo-26560: : 2
BaseHandler.start_response : 2
Inglesby : 2
bpo-26567: : 1
warnings._showwarnmsg() : 1
bpo-26569: : 2
"pyclbr.readmodule()" : 2
"pyclbr.readmodule_ex()" : 2
bpo-26499: : 2
HTTPResponse.readline() : 2
Ghost : 4
bpo-25320: : 2
den : 2
Elzen : 2
bpo-16181: : 2
cookiejar.http2time() : 2
datetime.MAXYEAR : 3
bpo-26513: : 2
bpo-23718: : 2
Tamás : 2
Bence : 2
Gedai : 2
bpo-26323: : 1
Mock.assert_called() : 1
Mock.assert_called_once() : 1
bpo-20589: : 2
Path.owner() : 3
Path.group() : 3
bpo-26177: : 2
Canvas : 6
Scrollbar : 2
bpo-15068: : 2
bpo-19475: : 1
timespec : 1
isoformat() : 1
bpo-2202: : 2
AbstractDigestAuthHandler.get_algorithm_impls : 2
Dupuy : 2
bpo-26167: : 1
Minimized : 1
bpo-25718: : 4
bpo-26475: : 2
bpo-26482: : 1
dequeues : 1
bpo-26335: : 1
mmap.write() : 1
bpo-26457: : 2
subnets() : 2
maximal : 11
bpo-26385: : 2
NamedTemporaryFile() : 2
bpo-26402: : 2
http.client.RemoteDisconnected : 3
3.5.0a4 : 2
bpo-25913: : 2
"<~" : 3
base64.a85decode() : 2
adobe=True : 2
Swati : 3
Jaiswal : 3
bpo-26186: : 2
importlib.util.LazyLoader : 4
bpo-26367: : 2
importlib.__import__() : 2
builtins.__import__() : 2
bpo-26309: : 2
(closing : 2
verify_request() : 2
bpo-23430: : 1
BaseException) : 1
handle_error() : 2
bpo-25995: : 2
os.walk() : 5
FDs : 2
proportional : 6
bpo-25994: : 1
bpo-23992: : 1
MapResult : 1
fail-fast : 1
bpo-26117: : 2
bpo-25949: : 1
bpo-25911: : 2
bpo-26045: : 2
zipfile.ZipInfo.from_file() : 1
zipinfo.ZipInfo.is_dir() : 1
bpo-12923: : 2
FancyURLopener's : 2
Brazil : 2
Rocco : 2
bpo-25945: : 2
bpo-26202: : 2
range() : 3
non-atomic : 5
bpo-23076: : 2
Path.glob() : 2
Nyberg : 2
bpo-19883: : 2
getnameinfo() : 2
gethostbyaddr() : 2
gethostbyname_ex() : 2
bpo-26099: : 1
sitecustomize : 1
usercustomize : 1
bpo-26147: : 2
bpo-25935: : 2
bpo-16620: : 2
msilib.Directory.glob() : 2
bpo-26013: : 2
(3.4.3 : 2
lower) : 3
bpo-26129: : 1
grp.getgrgid() : 1
bpo-25850: : 2
bpo-25822: : 1
bpo-22642: : 1
bpo-24705: : 2
sysconfig._parse_makefile : 2
expanding : 7
${} : 2
$() : 2
bpo-26069: : 1
apis : 1
bpo-22138: : 2
mock.patch : 2
McCully : 2
bpo-25672: : 2
SSL_MODE_RELEASE_BUFFERS : 2
bpo-26012: : 2
pathlib.Path.[r]glob() : 4
bpo-24120: : 2
Ulrich : 2
bpo-21815: : 1
imap : 1
gmail : 1
bpo-25447: : 6
as-is : 24
(restores : 2
bpo-25971: : 1
Fractions : 4
bpo-25802: : 1
importlib.abc.Loader.load_module() : 1
bpo-25928: : 1
bpo-25768: : 1
bpo-24103: : 2
ElementTree.XMLPullParser : 2
bpo-25860: : 2
Samson : 2
bpo-25914: : 2
OrderedDict.__sizeof__ : 2
bpo-25869: : 1
ElementTree; : 1
bpo-25873: : 1
Element.iter() : 1
Element.itertext() : 1
bpo-25902: : 2
bpo-22227: : 1
bpo-25638: : 1
ElementTree.iterparse(); : 1
parsing; : 2
bpo-25717: : 2
tolerating : 2
3.5a1 : 4
bpo-24903: : 2
'-d' : 3
bpo-25764: : 2
bpo-25771: : 1
importlib.util.resolve_name() : 1
'package' : 1
bpo-6478: : 2
_strptime's : 2
regexp : 2
time.tzset() : 7
bpo-14285: : 2
package" : 5
bpo-19771: : 2
executed" : 2
"*.pyc" : 8
bpo-25177: : 2
statistics.mean : 2
statistics.variance : 2
bpo-10131: : 2
Ganisin : 2
bpo-7990: : 1
Santoso : 1
bpo-25725: : 2
bpo-25663: : 2
bpo-25688: : 2
ElementTree.iterparse() : 2
bpo-23914: : 2
bpo-25691: : 2
bpo-25624: : 2
ZIP_STORED : 2
bpo-25626: : 2
cap : 2
UINT_MAX : 2
GzipFile.read() : 2
zlib.Decompress.decompress() : 2
max_length : 2
zlib.Decompress.flush() : 2
bpo-25583: : 2
os.makedirs(exist_ok=True) : 2
bpo-25593: : 2
EventLoop.stop() : 2
bpo-6973: : 2
send_signal() : 2
kill() : 4
test.support.check__all__() : 1
Mauro : 1
bpo-25590: : 2
getattr() : 2
bpo-25498: : 2
garbage-collecting : 3
Eryksun : 2
bpo-25584: : 4
bpo-25446: : 2
smtplib's : 2
bpo-18010: : 2
bpo-25554: : 2
bpo-18973: : 1
bpo-25510: : 2
fileinput.FileInput.readline() : 2
FileInput : 2
Ryosuke : 2
Ito : 2
bpo-25503: : 2
Vandenberg : 2
bpo-25515: : 2
os.urandom : 3
uuid.uuid4 : 2
bpo-21827: : 2
textwrap.dedent() : 2
bpo-25390: : 2
Pattern] : 2
bpo-25441: : 2
drain() : 3
bpo-25410: : 2
bpo-25411: : 2
simon04 : 2
bpo-25407: : 2
bpo-25406: : 2
OrderedDict.move_to_end() : 2
bpo-25382: : 1
pickletools.dis() : 1
MEMOIZE : 3
bpo-25357: : 1
binascii.b2a_base64() : 1
base64.b64encode() : 1
bpo-24164: : 1
bpo-25364: : 2
bpo-25328: : 2
smtpd's : 2
enable_SMTPUTF8 : 2
bpo-16099: : 1
Crawl-delay : 1
Request-rate : 1
bpo-25316: : 2
DistutilsPlatformError : 2
bpo-25380: : 2
STACK_GLOBAL : 2
pickletools.opcodes : 2
bpo-23972: : 2
reuseport : 2
reuseaddr : 4
Mirroring : 2
create_server : 2
O/S : 2
'posix' : 3
Cygwin) : 2
Laws : 2
bpo-25304: : 2
asyncio.run_coroutine_threadsafe() : 2
concurrent.futures.Future : 3
bpo-25232: : 2
CGIRequestHandler : 4
(?) : 3
bpo-24657: : 2
bpo-25287: : 1
crypt.METHOD_CRYPT : 2
crypt.methods : 2
bpo-23600: : 2
tzinfo.fromutc() : 2
bpo-25203: : 2
readline.set_completer_delims() : 2
bpo-25011: : 1
bpo-25209: : 1
bpo-22241: : 1
timezone.utc : 2
'UTC' : 1
'UTC-00:00' : 1
bpo-23517: : 2
fromtimestamp() : 2
utcfromtimestamp() : 2
datetime.datetime : 8
ties : 6
(ROUND_HALF_EVEN) : 2
round(float) : 2
-Infinity : 1
(ROUND_FLOOR) : 2
bpo-23552: : 1
Timeit : 1
bpo-24633: : 1
site-packages/README : 1
README.txt : 9
bpo-24879: : 1
_fields : 2
bpo-24874: : 1
itertools.cycle() : 1
itertools.cycle.__setstate__() : 1
bpo-20059: : 1
bpo-24360: : 1
argparse.Namespace() : 1
bpo-23426: : 1
run_setup : 1
bpo-13938: : 1
StringTypes : 1
bpo-2091: : 1
'+' : 11
bpo-8585: : 1
zipimporter2 : 1
bpo-18622: : 2
unittest.mock.mock_open().reset_mock : 2
recurse : 12
Nicola : 2
Palumbo : 2
Laurent : 2
De : 3
Buyst : 2
bpo-24426: : 1
bpo-23661: : 2
Ignacio : 2
Rossi : 2
bpo-13248: : 2
inspect.getmoduleinfo : 1
bpo-25578: : 2
(another) : 2
SSLSocket.getpeercer() : 2
bpo-25530: : 2
ssl.SSLContext : 2
bpo-25569: : 2
SSLSocket.getpeercert() : 2
bpo-25471: : 2
accept() : 4
nonblocking : 2
bpo-25319: : 2
threading.Event : 3
reinitialized : 2
bpo-26050: : 2
asyncio.StreamReader.readuntil() : 2
bpo-25924: : 2
getaddrinfo(3) : 4
bpo-26406: : 2
bpo-26848: : 2
asyncio/subprocess.communicate() : 2
bpo-27040: : 2
loop.get_exception_handler : 2
bpo-27041: : 2
loop.create_future : 2
bpo-20640: : 2
idlelib.configHelpSourceEdit : 2
'IDLE-console : 2
differences' : 2
IOBinding : 6
bpo-25905: : 2
’ : 2
RIGHT : 3
SINGLE : 2
QUOTATION : 3
MARK : 6
Re-encode : 2
bpo-15348: : 2
RuntimeErrors : 2
bpo-24455: : 2
(15347); : 2
[X] : 2
(15348); : 2
(24455) : 2
Suspend : 10
gui.interaction : 2
tcl : 2
vwait : 2
root.mainloop : 2
.quit) : 2
gui.run : 2
program' : 4
'Your : 2
'kill : 2
program?' : 2
bpo-25313: : 2
Dark : 4
idleConf.CurrentTheme : 2
bpo-24782: : 2
bpo-22726: : 2
Re-activate : 2
bpo-24820: : 4
Dark' : 4
inverted : 7
cobalt : 2
IDLEs : 4
November : 4
'Save : 3
Theme' : 2
'Custom : 2
bpo-25224: : 4
curious : 4
'IDLE' : 2
'Integrated : 2
Environment' : 3
Highlighting : 3
bpo-24972: : 2
Inactive : 2
highlighted : 6
bpo-24570: : 2
Idle: : 4
bpo-24988: : 2
ScrolledList : 2
debugger) : 3
bpo-24801: : 2
bpo-25173: : 2
messageboxes : 2
'sheet' : 2
bpo-25198: : 2
fixed-pitch : 2
Roseman) : 2
Sphinx-like : 2
blueish-gray : 2
Re-use : 2
(TOC) : 2
bpo-25225: : 2
Condense : 2
bpo-21995: : 2
bpo-22820: : 2
*print* : 2
Doc: : 2
no-subprocess : 2
bpo-25219: : 2
bpo-24861: : 2
idleib.idle.* : 2
idlelib.__init__.__doc__ : 2
bpo-25199: : 2
bpo-16893: : 3
help.txt : 4
help.html : 2
idlelib/help.html : 2
rstripped : 2
Doc/build/html/library/idle.html : 2
EditorWindow.HelpDialog : 2
helt.txt : 2
bpo-24199: : 2
idlelib.idlever : 2
bpo-24790: : 2
conflicts) : 2
bpo-26736: : 2
bpo-6953: : 2
bpo-23606: : 2
cdll.msvcrt : 3
bpo-24952: : 2
stack_size() : 2
Mattip : 2
bpo-26014: : 2
"See : 5
also" : 3
bpo-21916: : 2
Loyse : 2
bpo-26295: : 1
--testdir=TESTDIR" : 1
"test." : 1
bpo-26523: : 2
(multiprocessing.dummy.Pool) : 2
bpo-26015: : 2
bpo-26325: : 2
test.support.check_no_resource_warning() : 2
bpo-25940: : 2
svn.python.org : 4
bpo-25616: : 2
test_collections : 2
test_ordered_dict : 2
bpo-25188: : 1
-P/--pgo : 1
bpo-22806: : 1
--list-tests" : 1
bpo-18174: : 1
--huntrleaks : 1
bpo-25260: : 1
--coverage" : 1
"PCbuild\rt.bat" : 2
unlimited : 24
regrtest.py : 4
bpo-26583: : 2
test_timestamp_overflow : 2
test_import : 2
bpo-21277: : 1
ffi_convenience : 1
bpo-26884: : 2
bpo-26932: : 1
RTLD_* : 1
Android) : 1
bpo-22359: : 3
bpo-21668: : 2
_datetime : 2
_ctypes_test : 2
bpo-25702: : 2
profile- : 2
toolchains : 2
bpo-26624: : 2
ucrtbase[d].dll : 2
bpo-17603: : 2
fileblocks.o : 2
st_blocks : 3
bpo-26079: : 2
tix-8.4.3.6 : 2
Bjoern : 2
Thiel : 2
bpo-26465: : 3
1.0.2g : 3
bpo-25348: : 2
"--pgo-job" : 2
"PCbuild\build.bat" : 2
Profile-Guided : 2
"PCbuild\build_pgo.bat" : 2
bpo-25827: : 2
"--with-icc" : 2
bpo-25696: : 2
-j9 : 2
bpo-24986: : 2
bpo-24421: : 2
Modules/_math.c : 2
bpo-26268: : 4
1.0.2f : 2
bpo-25136: : 2
bpo-24324: : 2
gcc-4.5 : 2
bpo-27053: : 2
make_zip.py : 2
prepare_ssl.py : 2
1.0.2e : 2
later) : 6
bpo-26071: : 2
bpo-26073: : 2
bpo-26065: : 2
Excludes : 2
bpo-25022: : 2
PC/example_nt/ : 2
bpo-26799: : 2
python-gdb.py: : 2
Ilsche : 2
bpo-26271: : 2
Shaulov : 2
bpo-26489: : 2
bpo-26316: : 2
bpo-25440: : 2
--extension-suffix : 2
bpo-25154: : 1
bpo-26312: : 1
bpo-26198: : 1
programmatical : 1
2018-02-04* : 1
2018-01-23* : 1
bpo-32551: : 1
privileged : 3
bpo-29723 : 1
3.6rc1 : 1
bpo-30657: : 1
PyBytes_DecodeEscape : 1
CVE-2017-1000158 : 1
Bosamiya; : 1
rebased : 1
Miro : 4
Hrončok : 4
2017-08-07* : 1
2017-07-23* : 1
bpo-29537: : 1
bpo-30383: : 1
--coverage : 1
--testdir : 1
--list-tests : 1
--list-cases : 1
bpo-30523) : 1
--matchfile : 1
(load : 2
bpo-30540) : 1
--slowest : 1
(alias : 1
--slow) : 1
"Tests : 1
xxx" : 1
--huntrleaks: : 1
warms : 1
(bpo-30675) : 1
2017-01-17* : 1
3.5.3rc1 : 1
2017-01-02* : 1
bpo-29073: : 1
"complex(1.0 : 1
{2:3})" : 1
bpo-28189: : 1
dictitems_contains : 1
swallows : 2
Zhang) : 1
bpo-26020: : 1
bpo-19003: : 1
email.generator : 4
bpo-26664: : 1
activate.fish : 1
mis-use : 1
lazy-loading : 1
loop.call_soon() : 1
-T/-l/-M : 1
Enabled : 1
ld_so_aix : 1
undoes : 1
2016-06-26* : 1
bpo-26867: : 1
openssl : 7
idlelib/NEWS.txt : 1
2016-06-12* : 1
bpo-26194: : 1
Deque.insert() : 1
"linecache.getline(...)" : 1
bpo-17633: : 1
bpo-27223: : 1
_read_ready : 1
_write_ready : 1
_conn_lost : 1
bpo-22970: : 1
Condition.wait : 1
Coles : 1
bpo-25500: : 1
self-signed.pythontest.net : 1
"PCbuild\build.bat : 1
%*" : 1
2015-12-06* : 1
bpo-25715: : 1
2015-11-22* : 1
bpo-25182: : 1
stdprinter : 1
startup) : 3
backslashreplace : 1
bpo-25131: : 1
set/dict : 1
bpo-25150: : 1
_Py_atomic_xxx : 1
OpenMP : 1
PyThreadState_GET() : 1
PyThreadState_Get() : 1
bpo-24483: : 1
key's : 7
bpo-22958: : 1
bpo-22609: : 2
collections.UserDict : 1
bpo-25111: : 1
traceback.FrameSummary : 1
bpo-25262: : 1
BINBYTES8 : 2
Highest : 1
BINUNICODE8 : 1
bpo-25034: : 1
string.Formatter : 4
format_specs : 1
Anthon : 1
der : 2
Neut : 1
bpo-25233: : 1
guts : 3
asyncio.Semaphore : 1
bpo-23329: : 1
_Unpickler_Read : 1
bpo-25047: : 1
bpo-25135: : 1
deque_clear() : 1
emptying : 2
bpo-19143: : 1
shims : 1
bpo-25092: : 1
datetime.strftime() : 1
datetime.datetime: : 1
property: : 4
(datetime(1970,1,1) : 1
timedelta(seconds=t)) : 1
datetime.utcfromtimestamp(t) : 1
bpo-25155: : 1
datetime.datetime.now() : 6
datetime.datetime.utcnow() : 1
bpo-25108: : 1
Omitted : 2
print_stack() : 1
format_stack() : 1
extract_stack() : 1
bpo-25118: : 1
bpo-24684: : 1
socket.socket.getaddrinfo() : 1
PyUnicode_AsEncodedString() : 1
bpo-25060: : 1
BUILD_MAP : 1
bpo-24857: : 1
call_args : 2
Kaptur : 2
bpo-23144: : 1
HTMLParser.feed() : 1
convert_charrefs : 1
bpo-24982: : 1
"zip" : 9
bpo-25019: : 1
bpo-16180: : 1
trapping : 1
bpo-24891: : 1
(0) : 2
Paolini : 1
bpo-24992: : 1
(related : 1
collection) : 2
bpo-24881: : 1
FileIO : 2
bpo-21112: : 1
unittest.expectedFailure : 1
bpo-24764: : 1
cgi.FieldStorage.read_multi() : 1
Landry : 1
bpo-24913: : 2
deque.index() : 2
Bryce : 2
Darling : 2
bpo-24774: : 1
http.server.test : 1
Chiu-Hsiang : 1
Hsu : 1
bpo-21159: : 1
configparser.InterpolationMissingOptionError : 2
bpo-20362: : 1
Honour : 2
TestCase.longMessage : 1
assertRegex : 1
Ilia : 1
Kurenkov : 1
bpo-23572: : 1
ensure_future() : 2
bpo-12067: : 1
bpo-23725: : 1
mktemp : 2
bpo-24808: : 1
Weston : 1
bpo-22812: : 1
Pam : 1
McA'Nulty : 1
bpo-25099: : 1
test_compileall : 1
(commonly : 2
bpo-23919: : 1
bpo-24915: : 1
bpo-24910: : 1
MSIs : 1
bpo-25450: : 1
bpo-25164: : 1
bpo-25143: : 1
bpo-25163: : 1
Disables : 2
bpo-25089: : 1
bpo-25165: : 1
uninstallation : 2
bpo-25112: : 1
bpo-25102: : 1
precompile : 2
bpo-25081: : 1
bpo-25091: : 1
Increases : 1
bpo-25126: : 1
Clarifies : 1
non-web : 1
bpo-25213: : 1
requestedExecutionLevel : 1
2015-09-13* : 1
bpo-25071: : 1
2015-09-09* : 1
bpo-25029: : 1
test_strptime : 1
bpo-25027: : 1
partial-static : 1
2015-09-07* : 1
bpo-24305: : 1
subsystem : 9
warnings.warn(stacklevel=) : 1
bpo-24912: : 1
bpo-24975: : 1
bpo-24917: : 1
time_strftime() : 1
over-read : 3
bpo-24748: : 1
imp.load_dynamic() : 1
bpo-24635: : 1
isinstance([] : 1
typing.Iterable) : 1
bpo-24989: : 1
overread : 1
BytesIO.readline() : 1
2015-08-25* : 1
bpo-24769: : 1
bpo-21167: : 1
NAN : 1
-fp-model : 1
bpo-24492: : 1
"package" : 1
bpo-24847: : 1
bpo-24839: : 1
platform._syscmd_ver : 1
bpo-24867: : 1
Task.get_stack() : 1
def' : 5
2015-08-09* : 1
bpo-24667: : 1
Resize : 5
odict : 1
resizes : 2
bpo-24824: : 1
bpo-24634: : 1
bpo-24798: : 1
_msvccompiler.py : 1
bpo-4395: : 1
bpo-23973: : 2
bpo-23004: : 1
mock_open() : 2
Hill : 2
bpo-23888: : 1
expiry : 2
ssh : 5
bpo-23652: : 1
EPOLL : 1
Frank : 2
bpo-22932: : 1
email.utils.formatdate : 1
Shachnev : 1
bpo-23779: : 1
authenticator : 1
bpo-23319: : 1
ctypes.BigEndianStructure : 1
Gautier : 1
bpo-23254: : 1
TCPServer : 2
bpo-19450: : 1
3.8.11 : 1
bpo-17527: : 1
PATCH : 2
wsgiref.validator : 1
Sbardella : 1
bpo-24791: : 1
'g(*a : 1
b)' : 1
bpo-23672: : 1
Mohd : 1
Sanad : 1
Zaki : 1
Rizvi : 1
bpo-24745: : 1
Courier : 4
platform-sensitive : 1
TkFixedFont : 1
$HOME/.idlerc/config-main.cfg : 1
'fontxxx' : 1
[Editor : 1
Window] : 1
bpo-21192: : 1
Adnan : 1
Umer : 1
bpo-13884: : 1
tearoff : 1
bpo-24129: : 1
bpo-20769: : 1
reload() : 2
Dorian : 1
Pula : 1
bpo-23589: : 1
Yongzhi : 1
Pan : 1
bpo-24729: : 1
bpo-24751: : 1
"-w" : 4
2015-07-26* : 1
bpo-23573: : 2
bytes.rfind() : 1
bytearray.rfind() : 1
single-byte : 1
bpo-24569: : 1
bpo-24583: : 1
bpo-24407: : 1
bpo-24619: : 1
one-line : 3
..' : 1
bpo-24687: : 1
Plug : 1
bpo-15944: : 1
memoryview: : 4
bpo-23441: : 1
rcompleter : 1
Sekera : 1
bpo-24683: : 1
bpo-21697: : 1
shutil.copytree() : 1
Eduardo : 1
Seabra : 1
bpo-14373: : 3
lru_cache : 1
bpo-24695: : 1
traceback.print_exception() : 1
exc_traceback : 4
bpo-24620: : 1
Random.setstate() : 1
bpo-22485: : 1
"inspect.getsource" : 1
bpo-22153: : 1
evilzero : 1
bpo-24580: : 1
bpo-24206: : 1
__eq__ : 3
bpo-24631: : 1
bpo-24608: : 1
chunk.Chunk.read() : 1
bpo-18684: : 1
bpo-24259: : 1
ReadError : 1
bpo-15014: : 2
SMTP.auth() : 1
SMTP.login() : 1
4954's : 1
initial-response : 1
bpo-24669: : 1
inspect.getsource() : 3
Kai : 1
Groner : 1
bpo-24688: : 1
ast.get_docstring() : 1
bpo-24603: : 1
1.0.2d : 1
2015-07-05* : 1
bpo-24467: : 1
bpo-24345: : 1
Py_tp_finalize : 1
bpo-24400: : 1
coroutines; : 3
types.CoroutineType : 2
inspect.getcoroutinestate : 1
inspect.getcoroutinelocals; : 1
CO_GENERATOR : 1
sys.set_coroutine_wrapper : 1
inspect.iscoroutine : 1
collections.abc.Coroutine : 3
opcode: : 1
GET_YIELD_FROM_ITER; : 1
types.coroutine : 1
collections.abc.Generator; : 1
collections.abc.Awaitable : 2
generator- : 3
coroutines--use : 1
bpo-24450: : 1
gi_yieldfrom : 2
cr_await : 2
bpo-19235: : 1
bpo-21750: : 1
mock_open.read_data : 1
bpo-24552: : 1
_pickle : 6
bpo-24514: : 1
tolerates : 1
bpo-19176: : 1
doctype() : 5
Parser's : 1
target's : 3
bpo-20387: : 1
tokenize/untokenize : 1
tab-indented : 1
bpo-24456: : 1
adpcm2lin() : 1
lin2adpcm() : 1
bpo-24336: : 1
bpo-24522: : 1
bpo-24489: : 1
disturb : 1
cmath.polar() : 1
bpo-24408: : 1
measure() : 1
metrics() : 1
tkinter.Font : 1
bpo-24347: : 1
PyDict_GetItemWithError : 1
bpo-24348: : 1
bpo-24359: : 1
bpo-24368: : 1
bpo-24362: : 1
bpo-24377: : 1
OrderedDict.__repr__ : 1
bpo-24369: : 1
Defend : 1
key-changes : 1
bpo-24373: : 1
_testmultiphase : 1
tp_finalize : 1
PyType_FromSpec : 1
bpo-16690 : 1
bpo-24458: : 1
bpo-24351: : 1
"identifier" : 2
string.Template : 2
bpo-24432: : 1
1.0.2c : 1
2015-05-31* : 1
bpo-24284: : 1
startswith : 2
endswith : 1
bpo-24115: : 1
PyObject_IsTrue() : 1
PyObject_Not() : 1
PyObject_IsInstance() : 1
PyObject_RichCompareBool() : 1
_PyDict_Contains() : 1
bpo-24328: : 1
bpo-11205: : 1
bpo-24285: : 1
bpo-23247: : 1
StreamWriter.reset() : 1
bpo-24270: : 1
math.isclose() : 1
cmath.isclose() : 1
bpo-5633: : 1
bpo-24326: : 1
audioop.ratecv() : 1
weightB : 1
bpo-16991: : 1
bpo-23934: : 1
Powell : 2
2015-05-24* : 1
bpo-24276: : 1
bpo-24268: : 1
bpo-23955: : 1
registry/environment : 1
bpo-24257: : 2
faked : 2
types.SimpleNamespace : 2
bpo-22939: : 1
bpo-23985: : 1
bpo-24102: : 1
bpo-15027: : 1
7x : 1
bpo-23290: : 1
set_merge() : 1
bpo-2292: : 1
448: : 1
bpo-24096: : 1
warnings.warn_explicit : 1
bpo-23996: : 1
unnormalized : 2
bpo-23910: : 1
bpo-23911: : 1
path-based : 3
bpo-24192: : 1
bpo-24022: : 1
bpo-9951: : 1
hex() : 1
bpo-22906: : 1
bpo-24017: : 1
492: : 1
bpo-24230: : 1
(matching : 1
bpo-22189: : 1
__getnewargs__() : 1
__rmod__() : 1
casefold() : 1
format_map() : 1
isprintable() : 1
maketrans() : 1
bpo-24244: : 1
strftime : 3
484: : 1
bpo-23086: : 1
collections.abc.Sequence() : 1
bpo-20035: : 1
sqlite3.Row : 7
bpo-15836: : 1
assertRaises() : 2
assertRaisesRegex() : 2
assertWarns() : 2
assertWarnsRegex() : 2
assertments : 1
Wagner-Hall : 1
bpo-9858: : 1
_io.RawIOBase : 1
Laura : 1
Rupprecht : 1
bpo-22955: : 1
evaluable : 2
bpo-22107: : 1
tempfile.gettempdir() : 2
tempfile.mkdtemp() : 3
tempfile.mkstemp() : 1
bpo-23780: : 1
os.path.join() : 2
bpo-6598: : 1
email.utils.make_msgid() : 1
strengthen : 2
bpo-24091: : 1
bpo-21931: : 1
msilib.FCICreate() : 1
FCI : 1
Armstrong : 1
bpo-13866: : 1
urllib.parse.urlencode : 1
bpo-20098: : 1
mangle_from : 1
compat32 : 2
bpo-24211: : 1
6532: : 1
bpo-16314: : 1
bpo-21804: : 1
6856 : 1
(UTF8) : 1
bpo-18682: : 1
scalar : 8
bpo-22027: : 1
6531 : 2
bpo-23488: : 1
bpo-1322: : 1
bpo-22486: : 1
math.gcd() : 1
fractions.gcd() : 1
bpo-24064: : 1
Property() : 1
Peksag.) : 1
bpo-22681: : 1
koi8_t : 2
bpo-22682: : 1
kz1048 : 2
bpo-23796: : 1
peek : 3
read1 : 1
Hergenroeder : 1
bpo-21795: : 1
8BITMIME : 1
bpo-24155: : 1
heapq.heapify() : 1
heapifying : 1
bpo-21800: : 1
5161 : 1
(enable) : 1
6855 : 1
(utf8/internationalized : 1
email) : 3
UTF8 : 1
bpo-20274: : 2
_sqlite.Connection : 2
complains : 4
bpo-24134: : 1
bpo-24018: : 1
collections.abc.Generator : 2
bpo-23880: : 1
getint() : 2
getdouble() : 2
bpo-22619: : 1
bpo-24094: : 1
json.encode : 1
bpo-9246: : 1
1025 : 1
Orr : 2
bpo-17445: : 1
difflib.diff_bytes() : 1
(fixes : 1
bpo-23917: : 1
Fall : 3
bpo-23008: : 1
LifoQueue : 1
PriorityQueue's : 1
bpo-23908: : 1
bpo-23728: : 1
binascii.crc_hqx() : 1
0-0xffff : 1
bpo-23887: : 1
urllib.error.HTTPError : 3
set_task_factory() : 1
get_task_factory() : 1
async() : 1
bpo-24178: : 1
bpo-24179: : 1
for' : 1
asyncio.StreamReader : 2
bpo-24184: : 1
AsyncIterator : 1
bpo-22547: : 1
inspect.BoundArguments : 2
bpo-24190: : 1
inspect.BoundArgument.apply_defaults() : 1
bpo-20691: : 1
'follow_wrapped' : 1
inspect.Signature.from_callable() : 1
bpo-24248: : 1
inspect.Signature.from_function() : 1
inspect.Signature.from_builtin() : 1
bpo-23898: : 1
__bool__ : 2
Bayer : 1
bpo-24298: : 1
bpo-23184: : 1
Sweigart : 2
bpo-21520: : 1
test_zipfile : 1
'bad' : 1
bpo-9517: : 1
script_helper : 1
Christie : 1
bpo-22155: : 1
createfilehandler : 1
bpo-24029: : 1
bpo-24077: : 1
man : 47
bpo-24000: : 1
"format : 8
units" : 1
bpo-24001: : 1
accept={type} : 1
types={'type'} : 1
bpo-23330: : 1
h2py : 1
bpo-24031: : 1
checkouts : 1
2015-04-19* : 1
bpo-22980: : 2
GNU/KFreeBSD : 1
Hurd : 2
ABIs : 1
3149**-style : 1
bpo-22631: : 1
CAN_RAW_FD_FRAMES : 1
courtesy : 1
bpo-23731: : 1
488**: : 1
.pyo : 1
bpo-23726: : 1
non-GC : 1
bpo-23309: : 1
bpo-22977: : 1
Wine : 1
bpo-23466: : 1
%c : 2
%o : 2
%x : 5
%X : 3
bpo-24044: : 1
list.sort : 1
bpo-21354: : 1
PyCFunction_New : 1
bpo-23840: : 1
tokenize.open() : 1
bpo-16914: : 1
bpo-7159: : 1
auth : 3
bpo-23703: : 1
urljoin() : 1
901e4e52b20a : 1
bpo-4254: : 1
_curses.update_lines_cols() : 1
bpo-19933: : 1
ndigits : 1
bpo-23193: : 1
numeric_owner : 1
tarfile.TarFile.extract : 1
tarfile.TarFile.extractall : 1
bpo-23342: : 1
subprocess.run() : 1
CalledProcess : 1
call* : 2
bpo-21217: : 1
inspect.getsourcelines() : 1
Ballinger : 1
Allison : 1
bpo-24521: : 1
bpo-22931: : 1
bpo-23811: : 1
PyCompileError : 1
bpo-21116: : 1
blowing : 1
Médéric : 1
Boquien : 1
bpo-22982: : 1
bpo-23464: : 1
bpo-23529: : 1
GzipFile : 1
LZMAFile : 1
defeats : 2
bombs : 3
payloads : 5
bpo-21859: : 1
bpo-23865: : 1
bpo-23400: : 1
bpo-10838: : 1
SubprocessError : 1
wild : 3
bpo-23411: : 1
DefragResult : 1
ParseResult : 2
SplitResult : 1
DefragResultBytes : 1
ParseResultBytes : 1
SplitResultBytes : 1
urllib.parse.__all__ : 1
bpo-23881: : 1
urllib.request.ftpwrapper : 1
bpo-23853: : 1
"socket.socket.sendall()" : 1
bpo-22721: : 1
orderable : 4
non-orderable : 1
bpo-15133: : 1
_tkinter.tkapp.getboolean() : 1
tkinter.BooleanVar : 1
(accepted : 1
Tcl_Obj) : 1
tkinter.BooleanVar.get() : 1
bpo-10590: : 1
xml.sax.parseString() : 1
bpo-23338: : 1
Kato : 1
bpo-15582: : 1
bpo-2175: : 1
bpo-16840: : 1
bpo-23834: : 1
socket.sendto() : 1
sendto() : 3
bpo-23618: : 1
"socket.socket.connect()" : 2
bpo-21526: : 1
bpo-23836: : 1
bpo-23838: : 1
bpo-10395: : 1
os.path.commonpath() : 1
posixpath : 1
ntpath : 2
bpo-23611: : 1
"lookupable" : 1
bpo-13583: : 1
bpo-18473: : 1
3to2 : 1
bpo-23485: : 1
select.select() : 1
recomputed : 11
bpo-23752: : 1
io.FileIO() : 2
bpo-23704: : 2
__add__ : 4
__mul__ : 3
__imul__() : 1
bpo-23171: : 1
csv.Writer.writerow() : 1
bpo-23745: : 1
get_param : 1
bpo-22117: : 1
(-inf) : 1
bpo-23310: : 1
MagicMock's : 1
__methods__ : 1
configure_mock() : 1
Kasia : 1
Jachim : 1
bpo-23817: : 1
SOVERSION : 1
bpo-23501: : 1
bpo-23799: : 1
test.support.start_threads() : 1
bpo-22390: : 1
bpo-18128: : 1
POT- : 1
Creation-Date : 1
bpo-23935: : 1
bpo-23944: : 1
impl : 14
bpo-20586: : 1
bpo-23492: : 1
PyArg_Parse : 2
PyArg_ParseTuple : 1
bpo-23500: : 1
"#ifndef" : 1
methoddef : 2
bpo-23998: : 1
PyImport_ReInitLock() : 1
2015-03-28* : 1
(str.find : 1
str.index : 1
str.count : 1
str.split : 1
str.partition) : 1
(UCS1 : 1
UCS2 : 2
UCS4) : 1
bpo-23753: : 1
stat() : 1
bpo-23681: : 1
bpo-23632: : 1
Memoryviews : 1
memoryviews) : 1
bpo-23192: : 1
bpo-23629: : 1
bpo-14260: : 1
groupindex : 1
non-modifiable : 1
bpo-23792: : 1
pagers : 1
pipepager : 1
bpo-23775: : 1
pprint() : 1
bpo-23765: : 1
IsBadStringPtr : 1
bpo-22364: : 1
bpo-23742: : 1
ntpath.expandvars() : 1
loses : 5
bpo-21717: : 2
zipfile.ZipFile.open : 1
bpo-21802: : 1
BufferedRWPair : 1
BufferedRWPair.close() : 1
bpo-23622: : 1
bpo-23671: : 1
"format_string" : 1
bpo-23502: : 1
bpo-17530: : 1
bpo-22687: : 1
tetxtwrap : 1
bpo-4727: : 1
3154) : 1
bpo-23491: : 1
Registered : 1
".pyz" : 9
".pyzw" : 2
441) : 1
bpo-23657: : 1
bpo-23688: : 1
gzip.GzipFile.write() : 1
bpo-23252: : 1
bpo-23647: : 1
imaplib's : 1
MAXLINE : 1
bpo-23539: : 1
http.client.HTTPConnection.request : 1
PUT : 3
411 : 1
bpo-22351: : 1
nntplib.NNTP : 1
insert() : 1
copy() : 9
MutableSequence : 1
bpo-23715: : 1
"signal.sigwaitinfo()" : 1
*sigset* : 7
signal.sigtimedwait() : 1
recomputes : 1
bpo-23001: : 1
Few : 2
bpo-23646: : 1
475) : 1
bpo-23136: : 1
_strptime : 1
Carroll : 1
bpo-23700: : 1
NamedTemporaryFile : 3
Bohuslav : 2
Kabrda : 2
bpo-22903: : 1
fake : 5
unittest.loader : 1
bpo-22181: : 1
bpo-2211: : 1
http.cookies.Morsel : 2
coded_value : 2
setdefault() : 1
bpo-18983: : 1
bpo-23631: : 1
traceback.format_list : 1
bpo-23568: : 1
rdivmod : 1
MagicMock() : 29
bpo-2052: : 1
HtmlDiff.make_file() : 1
bpo-23668: : 1
os.truncate : 2
os.ftruncate : 1
bpo-23138: : 1
bpo-23051: : 1
imap() : 1
imap_unordered() : 1
Diamant : 1
bpo-23581: : 1
matmul : 1
bpo-23566: : 1
enable() : 3
dump_traceback() : 1
dump_traceback_later() : 1
bpo-22928: : 1
injections : 1
bpo-23615: : 1
imp.reload() : 1
bpo-23605: : 1
bpo-23585: : 1
bpo-23583: : 1
bpo-22289: : 1
test_urllib2net : 1
bpo-22826: : 1
Tools/freeze/bkfile.py : 1
protocol) : 7
2015-03-09* : 1
bpo-23571: : 1
PyObject_Call() : 1
PyCFunction_Call() : 1
bpo-22524: : 1
471**: : 1
"os.scandir() : 1
iterator" : 3
bpo-23103: : 1
IPv4Address : 2
IPv6Address : 2
bpo-21793: : 2
BaseHTTPRequestHandler : 1
bpo-23476: : 1
X509_V_FLAG_TRUSTED_FIRST : 1
bpo-23576: : 1
stalling : 1
bpo-23504: : 1
bpo-23563: : 1
bpo-7830: : 1
Flatten : 2
bpo-20204: : 2
bpo-19980: : 1
non-recognized : 1
help('') : 1
help('help') : 1
bpo-23521: : 1
Eliminated : 2
"timedelta : 3
float" : 2
floats; : 1
bpo-21619: : 1
bpo-22936: : 1
bpo-15955: : 2
bz2.decompress() : 1
bpo-6639: : 1
Module-level : 1
bpo-814253: : 1
bpo-9179) : 1
bpo-23215: : 1
Aleksi : 1
Torhamo : 1
bpo-5700: : 1
flush() : 14
closefd=False : 1
bpo-23374: : 1
OS) : 7
bpo-23481: : 1
bpo-21548: : 1
pydoc.synopsis() : 1
pydoc.apropos() : 1
bpo-22885: : 1
bpo-23239: : 1
bpo-23146: : 1
bpo-23096: : 1
bpo-19105: : 1
bpo-14910: : 1
argparse.ArgumentParser : 1
bpo-23344: : 1
marshal.dumps() : 2
20-25% : 1
bpo-20416: : 1
40-50% : 1
bpo-23421: : 1
wdv4758h : 1
bpo-23367: : 1
bpo-23361: : 1
respect_handler_level : 1
bpo-19705: : 1
Yeo : 1
bpo-23801: : 1
cgi.FieldStorage : 1
preamble : 6
bpo-23445: : 1
bpo-23686: : 1
1.0.2a : 1
bpo-23465: : 1
bpo-23437: : 1
2015-02-08* : 1
bpo-23285: : 1
475 : 1
bpo-22735: : 1
bpo-22896: : 1
PyObject_AsCharBuffer() : 1
PyObject_AsReadBuffer() : 1
PyObject_AsWriteBuffer() : 1
bpo-21295: : 1
(bpo-16795) : 1
constituted : 1
bpo-22986: : 1
bpo-15859: : 1
PyUnicode_EncodeFSDefault() : 2
PyUnicode_EncodeMBCS() : 1
PyUnicode_EncodeCodePage() : 1
Campbell : 1
Barton : 1
bpo-21408: : 2
__ne__() : 3
__eq__() : 2
bpo-23321: : 1
bpo-22286: : 1
bpo-23253: : 1
Delay-load : 1
ShellExecute[AW] : 1
os.startfile : 2
bpo-22038: : 1
pyatomic.h : 1
Lima : 1
Temple : 1
bpo-20284: : 1
%-interpolation : 1
printf) : 1
bpo-23048: : 1
bpo-20335: : 1
bpo-22834: : 1
bpo-22869: : 1
pylifecycle.c : 1
bpo-22847: : 1
bpo-22335: : 1
enlarge : 2
0x7fffffff : 1
bpo-22653: : 1
bpo-22643: : 1
(upper : 1
swapcase : 1
casefold) : 1
bpo-17636: : 1
bpo-22604: : 1
(nan+0j) : 1
bpo-21052: : 1
sys.path_hooks : 2
bpo-16518: : 1
'bytes-like : 1
required' : 1
"'x' : 1
bpo-22470: : 1
"xmlcharrefreplace" : 2
bpo-22540: : 1
"PyObject_IsInstance" : 1
"PyObject_IsSubclass" : 1
bpo-18711: : 1
"PyErr_FormatV" : 1
"PyErr_Format" : 1
bpo-22520: : 1
bpo-22519: : 1
PyBytes_Repr : 1
bpo-22518: : 1
latin-1 : 3
bpo-16324: : 1
_charset : 1
MIMEText : 2
email.charset.Charset : 1
bpo-1764286: : 1
bpo-18554: : 1
os.__all__ : 1
bpo-21391: : 1
os.path.abspath : 1
bpo-11471: : 1
JUMP_FORWARD : 1
if-block : 1
else-clause : 1
bpo-22215: : 1
bpo-22258: : 1
Illumos : 1
"ioctl(FIOCLEX)" : 1
ENOTTY: : 1
"Inappropriate : 1
device" : 1
("F_GETFD" : 1
"F_SETFD") : 1
bpo-21389: : 1
bpo-22206: : 1
PyThread_create_key() : 2
ENOMEM : 1
(error) : 1
bpo-20184: : 1
bpo-22116: : 1
'builtin_function_or_method' : 1
weakref'ed : 1
bpo-22077: : 1
'or : 1
slices' : 1
<typename>' : 1
bpo-20179: : 1
bpo-22082: : 1
slotdefs : 1
7.0.0 : 1
bpo-21897: : 1
f_locals : 2
bpo-21205: : 1
("__name__" : 1
bpo-21669: : 1
heuristics : 3
SyntaxError.__init__ : 1
friendly) : 2
bpo-21642: : 1
if-else : 1
42else : 1
False") : 2
bpo-21523: : 1
over-pessimistic : 1
bpo-21418: : 1
bpo-21425: : 1
bpo-21435: : 1
bpo-21377: : 1
PyBytes_Concat() : 1
bpo-20355: : 1
bpo-21274: : 1
PATH_MAX : 1
Python/pythonrun.c : 1
bpo-20904: : 1
FPU : 1
m68k : 2
bpo-21209: : 2
bpo-21193: : 1
pow(a : 1
bpo-21176: : 1
465: : 1
bpo-21134: : 1
UnicodeTranslateError : 3
bpo-19537: : 1
PyUnicode_DATA() : 1
bpo-20929: : 1
bpo-20731: : 1
bpo-20637: : 1
Key-sharing : 1
Ingebretson : 1
bpo-8297: : 1
ysj.ray : 1
bpo-19995: : 1
bpo-19655: : 1
spark.py : 2
parser-generator : 1
bpo-12546: : 1
"\x00" : 1
bpo-20480: : 1
ipaddress.reverse_pointer : 1
bpo-13598: : 1
str.format() : 1
Phil : 8
Elson : 2
bpo-8931: : 1
('#') : 1
bpo-23165: : 1
_Py_char2wchar : 1
bpo-23399: : 1
bpo-20289: : 1
cgi.FieldStorage() : 3
bpo-13128: : 1
CONNECT : 3
bpo-15381: : 2
io.BytesIO : 3
copyings : 1
bpo-22818: : 1
bpo-23099: : 1
bpo-23326: : 1
bpo-21408 : 1
bpo-23363: : 1
itertools.permutations : 1
bpo-23364: : 1
itertools.product : 1
bpo-23366: : 1
itertools.combinations : 1
bpo-23369: : 1
_json.encode_basestring_ascii : 1
bpo-23353: : 1
PyEval_EvalFrameEx() : 2
throwflag=0 : 1
WHY_YIELD : 1
WHY_RETURN : 1
bpo-14099: : 3
tellable : 1
ZipExtFiles : 1
bpo-19361: : 1
JSONDecodeError : 1
bpo-18518: : 1
bpo-23094: : 1
bpo-23268: : 1
bpo-19996: : 1
"email.feedparser.FeedParser" : 1
(malformed) : 1
bpo-20188: : 1
(ALPN) : 1
bpo-23133: : 1
bpo-23248: : 1
bpo-23266: : 1
ipaddress.collapse_addresses() : 2
non-consecutive : 1
bpo-23098: : 1
dev_t : 1
bpo-21817: : 1
bpo-23250: : 1
capitalize : 2
"HttpOnly" : 1
"Secure" : 1
bpo-23063: : 1
reST : 2
code-block : 1
bpo-23209: : 1
selectors.BaseSelector.get_key() : 1
selector : 21
selectors.BaseSelector.close() : 1
bpo-23225) : 1
bpo-17911: : 2
PEP-302 : 1
bpo-19777: : 1
home() : 2
bpo-23206: : 1
"json.dumps(... : 1
ensure_ascii=False)" : 1
bpo-23185: : 1
math.inf : 2
math.nan : 4
bpo-23186: : 1
ssl.SSLObject.shared_ciphers() : 1
ssl.SSLSocket.shared_ciphers() : 1
bpo-23143: : 1
OpenSSLs : 1
bpo-23132: : 1
functool.total_ordering : 1
bpo-19776: : 1
expanduser() : 1
bpo-23112: : 1
SimpleHTTPServer : 1
http.HTTPStatus : 2
HTTPStatus.OK : 4
HTTPStatus.NOT_FOUND) : 1
bpo-23093: : 1
detached : 11
bpo-23111: : 1
ssl.PROTOCOL_SSLv23 : 2
bpo-22585: : 1
bpo-19104: : 1
bpo-23071: : 1
codecs.__all__ : 1
bpo-22783: : 1
NEWOBJ : 1
bpo-15513: : 1
bpo-19858: : 1
pickletools.optimize() : 1
BINPUT : 2
bpo-22095: : 1
HTTPConnection.set_tunnel : 1
bpo-23016: : 1
pythonw.exe : 3
bpo-21775: : 1
shutil.copytree(): : 1
VFAT : 1
'winerror' : 1
bpo-1218234: : 1
bpo-21740: : 1
bpo-23009: : 1
selectors.EpollSelector.select() : 1
bpo-22959: : 1
http.client.HTTPSConnection : 1
check_hostname : 1
*check_hostname* : 5
bpo-22696: : 1
bpo-16043: : 1
xmlrpclib.gzip_decode : 1
CVE-2013-1753 : 1
file- : 6
bpo-22966: : 1
__pycache__ : 3
clobber : 1
pyc_compile : 1
bpo-21971: : 1
bpo-21032: : 1
HTTPConnection.getresponse() : 2
bpo-22407: : 1
bpo-22902: : 1
"ip" : 1
Pach : 1
bpo-22960: : 1
xmlrpclib.ServerProxy : 1
bpo-22389: : 1
contextlib.redirect_stderr() : 1
bpo-21356: : 1
ssl.RAND_egd() : 1
Bernard : 1
Spil : 1
bpo-22915: : 1
bpo-22940: : 1
readline.append_history_file : 1
bpo-19676: : 1
"namereplace" : 2
bpo-22788: : 1
logging.handlers.HTTPHandler : 1
bpo-22921: : 1
*hostname* : 5
bpo-22894: : 1
failfast : 2
bpo-22796: : 1
bpo-22370: : 1
bpo-22841: : 1
Reject : 1
add_signal_handler() : 1
Ludovic.Gasc : 1
bpo-19494: : 1
urllib.request.HTTPBasicPriorAuthHandler : 1
bpo-22578: : 1
re.error : 1
bpo-22849: : 1
io.TextIOWrapper : 1
bpo-12728: : 1
bpo-22821: : 1
bpo-21650: : 1
bpo-22824: : 2
Suggested : 1
bpo-22406: : 1
uu_codec : 2
bpo-17293: : 1
netstat : 1
Aivars : 1
Kalvāns : 1
bpo-22769: : 1
ttk.Treeview.tag_has() : 1
bpo-22417: : 1
476) : 1
bpo-22775: : 1
http.cookies.SimpleCookie : 1
bpo-22776: : 1
Brought : 1
SysLogHandler.emit() : 1
bpo-22665: : 1
get_terminal_size : 1
SameFileError : 1
shutil.__all__ : 1
bpo-6623: : 1
Netrc : 1
bpo-17381: : 1
bpo-22410: : 1
locale-dependent : 4
bpo-22759: : 1
pathlib.Path() : 1
(exists() : 1
is_dir() : 2
NotADirectoryError : 3
bpo-8876: : 1
bpo-22217: : 1
bpo-22457: : 1
start_dir : 1
bpo-18216: : 1
bpo-13918: : 1
locale.delocalize() : 1
bpo-22676: : 1
bpo-18853: : 1
shlex.__nain__ : 1
bpo-9351: : 1
set_defaults : 1
bpo-7559: : 1
bpo-19746: : 1
TestLoader : 1
bpo-21991: : 1
email.headerregistry's : 1
'params' : 1
(MappingProxyType) : 1
bpo-22638: : 1
bpo-22641: : 1
ssl.create_default_context() : 5
stronger : 2
bpo-17401: : 1
closefd : 2
bpo-21338: : 1
compile_{dir : 1
path} : 1
multilevel : 6
bpo-20152: : 1
bpo-18643: : 1
socket.socketpair() : 5
bpo-22435: : 1
bpo-13096: : 1
CTypes : 1
POINTER : 3
bpo-11694: : 1
ConversionError : 1
bpo-19380: : 1
bpo-1519638: : 1
re.subn() : 1
bpo-18615: : 1
sndhdr.what/whathdr : 1
bpo-22462: : 1
pyexpat's : 1
bpo-21965: : 1
bpo-21173: : 1
.clear() : 1
bpo-11866: : 1
bpo-21905: : 1
pickle.whichmodule() : 1
bpo-11271: : 1
concurrent.futures.Executor.map() : 1
bpo-21883: : 1
os.path.relpath() : 1
bpo-22219: : 1
bpo-22449: : 1
ssl.SSLContext.load_default_certs : 1
SSL_CERT_DIR : 1
SSL_CERT_FILE : 1
bpo-22508: : 1
email.__version__ : 1
__version__ : 1
bpo-20076: : 2
bpo-20079: : 2
2.18 : 1
bpo-20218: : 1
read_text/write_text : 1
read_bytes/ : 1
write_bytes : 1
bpo-22396: : 1
os.posix_fadvise() : 1
os.posix_fallocate() : 1
bpo-22517: : 1
io.BufferedRWPair : 1
bpo-22437: : 1
bpo-17442: : 1
InteractiveInterpreter : 1
showtraceback : 1
bpo-23392: : 1
FILE* : 8
bpo-10510: : 1
macpath.join() : 1
Oshmyan : 1
bpo-5309: : 1
bpo-22448: : 1
Moore-Oliva : 1
bpo-22427: : 1
TemporaryDirectory : 1
bpo-22362: : 1
Forbidden : 1
0-0o377 : 1
bpo-20912: : 1
MS-DOS : 2
bpo-21866: : 1
ZipFile.close() : 2
allowZip64 : 1
bpo-22278: : 1
urljoin : 2
issue22118 : 1
bpo-22415: : 1
GROUPREF_EXISTS : 1
bpo-22423: : 1
Unhandled : 1
bpo-21332: : 1
"bufsize=1" : 1
subprocess.Popen() : 1
bpo-21091: : 1
email.message.EmailMessage.is_attachment : 2
bpo-21079: : 1
bpo-22247: : 1
NNTPError : 1
nntplib.__all__ : 1
bpo-22366: : 1
urllib.request.urlopen : 3
(SSLContext) : 1
bpo-4180: : 1
registries : 1
bpo-22419: : 1
414 : 2
Cook : 1
Lax : 1
Bobrov : 1
bpo-20537: : 1
bpo-22384: : 1
bpo-22168: : 1
bpo-21147: : 1
bpo-13968: : 1
bpo-21951: : 2
bpo-22338: : 1
bpo-12410: : 1
imaplib.IMAP4 : 1
bpo-21270: : 1
mock.call : 1
bpo-16662: : 1
load_tests() : 1
TestLoader.loadTestsFromModule() : 1
use_load_tests : 1
tweaked : 1
bpo-22226: : 1
Treeview.heading() : 1
bpo-19524: : 1
bpo-20421: : 1
.version() : 1
bpo-19546: : 1
Chained : 1
KeyErrors : 1
bpo-22051: : 1
reloads : 1
bpo-21933: : 1
Turtledemo : 3
control(command) : 1
control-mousewheel : 1
bpo-21597: : 1
pane : 14
grabbed : 6
dragged : 3
widened : 3
Kanis : 2
bpo-18132: : 1
bpo-22043: : 1
time.monotonic() : 5
"threading.RLock.acquire()" : 3
bpo-21527: : 1
bpo-22216: : 1
STARTTLS : 4
connect/starttls/quit/connect/starttls : 1
bpo-22098: : 1
BigEndianStructure : 2
LittleEndianStructure : 1
bpo-22185: : 1
threading.Condition.wait() : 1
waiters : 2
Zongker : 1
bpo-22287: : 1
_PyTime_gettimeofday() : 1
clock_gettime(CLOCK_REALTIME) : 1
librt : 1
2.17) : 1
bpo-22182: : 1
e.args : 1
distutils.file_util.move_file : 1
start_new_session=True : 1
preexec_fn=os.setsid : 1
bpo-22042: : 1
signal.set_wakeup_fd(fd) : 1
bpo-16808: : 1
inspect.stack() : 1
bpo-22236: : 2
images : 18
NoDefaultRoot : 1
bpo-2527: : 1
bpo-22118: : 1
1808 : 1
2396 : 1
bpo-21549: : 1
"members" : 1
TarFile.list() : 1
bpo-19628: : 1
bpo-15696: : 1
bpo-22068: : 1
Avoided : 2
Fonts : 1
bpo-22165: : 1
SimpleHTTPRequestHandler : 2
bpo-8797: : 1
Bull : 1
bpo-20729: : 1
iterkeys()/itervalues()/iteritems() : 1
bpo-21448: : 1
feed() : 1
O(N^2) : 1
bpo-22184: : 1
LRU : 8
bpo-17923: : 1
Delhallt : 1
bpo-21725: : 1
bpo-22176: : 1
v3.1 : 1
AArch64 : 1
POWERPC : 1
ELF : 1
ABIv2 : 1
bpo-5411: : 1
bpo-21121: : 1
-Werror=declaration-after-statement : 1
bpo-21975: : 1
sqlite3.Row) : 1
__new__() : 1
bpo-20170: : 1
bpo-21539: : 1
*exists_ok* : 1
"Pathlib.mkdir()" : 1
FileExistsErrors : 1
bpo-22127: : 1
Bypass : 1
pure-ASCII : 5
IPs) : 1
bpo-21047: : 1
html.entities : 2
bpo-15114: : 1
HTMLParser.error : 1
HTMLParserError : 1
bpo-22085: : 1
Dropped : 1
bpo-21580: : 1
bpo-22003: : 1
io.BytesIO() : 7
defers : 7
bpo-22018: : 2
WinSock : 4
bpo-22054: : 1
os.get_blocking() : 1
os.set_blocking() : 1
O_NONBLOCK : 1
otherwise) : 2
bpo-17172: : 2
bpo-21704: : 1
bpo-20173: : 1
sha1 : 1
sha256 : 2
sha512 : 2
repr(_socket.socket) : 1
64-bit: : 1
repr(socket.socket) : 1
bpo-22033: : 1
bpo-21947: : 1
gi_code : 2
bpo-16133: : 1
asynchat.async_chat.handle_read() : 1
BlockingIOError : 5
bpo-22044: : 1
DECREF : 1
call_tzinfo_method : 1
Flanagan : 1
readline: : 1
""\033[1034h"" : 1
TERM=xterm- : 1
256color") : 1
bpo-4350: : 1
out-of-dated : 1
non-working : 1
bpo-6167: : 1
Scrollbar.activate() : 1
Scrollbar.set() : 1
bpo-15275: : 1
bpo-21888: : 1
plistlib's : 1
bpo-22032: : 1
bpo-22031: : 1
"0x" : 8
0x..." : 1
bpo-21044: : 1
fileobj : 2
bpo-21966: : 1
bpo-19076: : 1
'file' : 3
self.error() : 1
bpo-16382: : 1
warnings.warn() : 1
bpo-21932: : 1
"Py_ssize_t()" : 1
bpo-21942: : 1
viewing : 7
bpo-11259: : 1
asynchat.async_chat().set_terminator() : 1
bpo-12523: : 1
asynchat.async_chat.push() : 1
bpo-21707: : 1
kwonlyargcount : 3
ModuleFinder.replace_paths_in_code() : 1
bpo-20639: : 1
Path.with_suffix('') : 1
Tikhonov : 1
bpo-21714: : 1
Path.with_name() : 1
'auth' : 1
bpo-21151: : 1
"REG_BINARY" : 1
SetValueEx : 1
bpo-21090: : 1
bpo-5800: : 1
wsgiref.headers.Headers : 1
bpo-21781: : 1
ssl.RAND_add() : 1
bpo-21679: : 1
bpo-21863: : 1
bpo-11453: : 1
asyncore: : 1
file_wrapper : 3
bpo-21858: : 1
bpo-21476: : 1
email.parser.BytesParser : 1
bpo-20295: : 1
bpo-21729: : 1
bpo-21491: : 1
socketserver: : 1
reaping : 1
bpo-21719: : 1
"st_file_attributes" : 4
os.stat_result : 2
bpo-21832: : 1
bpo-21722: : 1
Dengler : 1
bpo-21723: : 1
asyncio.Queue: : 1
bpo-21711: : 1
bpo-17552: : 1
socket.sendfile() : 1
os.sendfile() : 1
bpo-18039: : 1
dbm.dump.open() : 1
bpo-21326: : 1
is_closed() : 1
asyncio.BaseEventLoop : 2
run_forever() : 1
run_until_complete() : 1
bpo-21766: : 1
CGIHTTPServer : 1
unquoting : 2
bpo-21310: : 1
bpo-21256: : 1
Printout : 1
bpo-21677: : 1
nonnormalized : 1
bpo-11709: : 1
pydoc.help : 1
bpo-21515: : 1
tempfile.TemporaryFile : 1
os.O_TMPFILE : 2
bpo-13223: : 1
pydoc.writedoc : 1
bpo-21463: : 1
bpo-21618: : 1
/proc/self/fd : 1
/dev/fd : 1
bpo-20383: : 1
bpo-21552: : 1
bpo-14315: : 1
struct.unpack : 1
bubble : 3
data" : 3
bpo-13742: : 1
"reverse" : 2
heapq.merge() : 1
(First : 1
Simon : 3
Sapin.) : 1
bpo-21402: : 1
tkinter.ttk : 2
bpo-3015: : 1
_tkinter.create() : 1
tkapp : 1
wantobject=1 : 1
bpo-10203: : 1
reverse() : 3
bpo-18807: : 1
symlinks) : 1
(python : 1
python3) : 1
symlinking : 1
bpo-20197: : 1
bpo-21513: : 1
(IPv4Address : 1
IPv6Address) : 1
.is_private : 1
.is_multicast : 1
bpo-21137: : 1
"locked" : 2
"unlocked" : 2
bpo-21538: : 1
bpo-21455: : 1
backlog : 1
socket.listen() : 1
bpo-21525: : 1
bpo-22166: : 1
_codecs._forget_codec : 1
test_codecs : 2
bpo-10744: : 1
bpo-20826: : 1
bpo-21487: : 1
ipaddress.summarize_address_range() : 1
ipaddress.{IPv4Network,IPv6Network}.subnets() : 1
bpo-21486: : 1
netmasks : 2
ipaddress.IPv4Network : 2
ipaddress.IPv6Network : 2
bpo-13916: : 1
bpo-20998: : 1
re.fullmatch() : 1
bpo-21075: : 1
fileinput.FileInput : 1
bpo-19775: : 1
samefile() : 1
bpo-21226: : 1
PyImport_ExecCodeModuleObject : 1
bpo-21398: : 1
bpo-16531: : 1
netmask) : 1
bpo-21156: : 1
importlib.abc.InspectLoader.source_to_code() : 1
staticmethod : 3
bpo-21424: : 1
heaqp.nlargest() : 1
nmsmallest() : 1
bpo-21396: : 1
TextIOWrapper(... : 1
write_through=True) : 1
akira : 1
bpo-18314: : 1
Unlink : 1
Gräsman : 1
bpo-21088: : 1
curses.window.addch() : 1
bpo-21407: : 1
_decimal: : 1
bpo-10650: : 1
'watchexp' : 1
Decimal.quantize() : 1
bpo-21469: : 1
robotparser : 1
can_fetch() : 1
bpo-19414: : 1
bpo-21421: : 1
MappingViews : 1
bpo-21101: : 1
bpo-21321: : 1
itertools.islice() : 1
Anton : 1
Afanasyev : 1
bpo-21057: : 1
memoryview) : 1
bpo-20951: : 1
SSLSocket.send() : 1
SSLWantReadError : 1
SSLWantWriteError : 1
asyncore.dispatcher : 2
bpo-9815: : 1
assertRaises : 1
bpo-19940: : 1
ssl.cert_time_to_seconds() : 1
5280) : 1
bpo-13204: : 1
sys.flags.__new__ : 1
bpo-19385: : 1
bpo-21207: : 1
bpo-21291: : 1
Popen.wait() : 1
Popen.returncode : 2
bpo-21127: : 1
"numpy.str_") : 1
bpo-15002: : 1
urllib.response : 1
_TemporaryFileWrapper : 1
_TemporaryFileCloser) : 1
bpo-12220: : 1
mindom : 1
'split' : 2
bpo-21068: : 1
ssl.PROTOCOL* : 1
bpo-21276: : 1
posixmodule: : 1
USE_XATTRS : 1
KFreeBSD : 2
bpo-21262: : 1
bpo-21238: : 1
"unsafe" : 1
incase : 1
bpo-20896: : 1
ssl.get_server_certificate() : 1
PROTOCOL_SSLv23 : 1
PROTOCOL_SSLv3 : 1
bpo-21239: : 1
patch.stopall() : 2
deterministically : 1
bpo-21203: : 1
Jure : 1
Koren : 1
bpo-21222: : 1
mock.create_autospec : 1
bpo-21197: : 1
lib64 : 1
non-OS : 1
bpo-17498: : 1
disconnect : 3
violating : 2
RSET : 2
SMTPServerDisconnected : 1
bpo-17826: : 1
bpo-7776: : 1
"Host:" : 2
http.client.HTTPConnection.set_tunnel() : 1
bpo-20968: : 1
unittest.mock.MagicMock : 1
bpo-21529: : 1
JSONDecoder.raw_decode : 1
Vranken : 1
CVE-2014-4616) : 1
bpo-21169: : 1
getpass : 6
re-encoding : 2
bpo-21171: : 1
rot13 : 2
bpo-20539: : 1
math.factorial : 1
(OverflowError : 1
ValueError) : 1
bpo-21172: : 1
bpo-21155: : 1
asyncio.EventLoop.create_unix_server() : 1
bpo-21136: : 1
bpo-17621: : 1
bpo-21076: : 1
bpo-20636: : 1
bpo-19505: : 1
reversed() : 1
bpo-21149: : 1
bpo-21058: : 1
"tempfile.NamedTemporaryFile()" : 2
bpo-21200: : 1
pkgutil.get_loader() : 1
bpo-21013: : 1
bpo-20145: : 1
"assertRaisesRegex" : 1
"assertWarnsRegex" : 1
bpo-20633: : 1
bpo-20980: : 1
ThreadPool : 1
bpo-21082: : 1
os.makedirs : 1
process-wide : 12
makedirs : 1
exist_ok=True : 1
bpo-20990: : 1
pyflakes : 1
bpo-21015: : 1
elliptic : 2
curve : 4
"prime256v1" : 2
bpo-21000: : 1
bpo-20995: : 1
bpo-20884: : 1
importlib.__init__ : 1
bpo-21499: : 1
test_importlib.test_api : 1
bpo-20627: : 1
xmlrpc.client.ServerProxy : 1
bpo-19165: : 1
bpo-13936: : 1
bpo-18931: : 1
/dev/poll : 2
bpo-19977: : 1
bpo-20574: : 1
bpo-20879: : 1
Delay : 1
base32 : 1
ascii85 : 1
base85 : 2
unquote_to_bytes() : 1
waste : 1
bpo-19157: : 1
usuable : 1
bpo-11599: : 1
compiler) : 4
DISTUTILS_DEBUG : 1
bpo-4931: : 1
"error: : 1
distutils.util.grok_environment_error : 1
doc-deprecated : 1
bpo-20875: : 1
"'read' : 1
NameError : 3
bpo-11558: : 1
"email.message.Message.attach" : 1
"attach" : 1
"is_multipart" : 3
bpo-20283: : 1
bpo-20778: : 1
bytecode-only : 1
bpo-20791: : 1
Otten : 1
bpo-19748: : 1
time.mktime() : 1
outsize : 1
[1902; : 1
2037] : 1
bpo-19573: : 1
inspect.signature: : 2
bpo-20726: : 1
bpo-17373: : 1
bpo-20378: : 1
inspect.Signature : 2
inspect.Parameter : 2
bpo-20816: : 1
inspect.getcallargs() : 2
Lowin : 2
bpo-20817: : 1
bpo-6676: : 1
pyexpat : 1
xmlparser : 1
Gutteridge) : 1
bpo-21117: : 1
specifics : 4
bpo-20334: : 1
bpo-15916: : 1
doctest.DocTestSuite : 1
unittest.TestSuite : 1
asyncio.tasks.CoroWrapper : 1
yield-from : 1
CPythons : 1
gi_{frame,running,code} : 1
CoroWrapper : 1
bpo-163) : 1
bpo-21311: : 1
_osx_support : 1
Szakmeister : 1
bpo-11571: : 1
bpo-21801: : 1
__signature__ : 1
bpo-21923: : 1
distutils.sysconfig.customize_compiler : 1
_config_vars : 1
bpo-21323: : 1
bpo-19435 : 1
Byrne : 1
bpo-22733: : 1
ffi_prep_args : 1
zero-extending : 1
bpo-23302: : 1
TCP_NODELAY=1 : 1
MSS : 1
bpo-20577: : 1
FormatParagraph : 2
Config : 5
bpo-3068: : 1
HOME/.idlerc/config-extensions.cfg : 1
bpo-16233: : 1
(File : 2
Alt+C) : 1
(Alt+M) : 1
bpo-4832: : 1
.txt : 1
bpo-21986: : 1
bpo-17390: : 1
title; : 1
bpo-14105: : 1
Apt : 1
bpo-21765: : 1
HyperParser : 2
bpo-21940: : 1
WidgetRedirector : 1
bpo-18592: : 1
SearchDialogBase : 1
Webster : 3
bpo-21694: : 1
bpo-21686: : 1
bpo-12387: : 1
upper(lower)case : 1
Caps : 1
bpo-21695: : 1
Find-in-files : 1
bpo-18910: : 1
textView : 1
bpo-18292: : 1
AutoExpand : 1
Saihadhav : 1
bpo-18409: : 1
AutoComplete : 1
bpo-21477: : 1
htest.py : 1
bpo-18104: : 1
idlelib/idle_test/htest.py : 1
consolidating : 1
human-validated : 1
bpo-21139: : 1
72 : 3
bpo-21284: : 1
Paragraph : 3
reformat : 2
bpo-17654: : 1
non-framework : 2
bpo-23180: : 1
"Windows" : 1
"Window" : 1
bpo-15506: : 1
PKG_PROG_PKG_CONFIG : 1
bpo-22935: : 1
bpo-22592: : 1
bpo-22591: : 1
DJGPP : 1
(MS-DOS : 1
GCC) : 1
bpo-16537: : 1
self.extensions : 1
Hosmer : 1
Wagner : 1
bpo-21958: : 1
HAVE_ROUND : 1
bpo-18093: : 1
"Programs" : 1
bpo-15759: : 1
linkcheck" : 1
doctest" : 1
bpo-21141: : 1
"PCbuild\build_ssl.py" : 1
re-written : 5
re-named : 1
"PCbuild\prepare_ssl.py" : 1
pre-configured : 1
bpo-21037: : 1
bpo-19962: : 1
"python.bat" : 1
bpo-21285: : 1
bpo-15234: : 1
Sqlite : 1
bpo-17861: : 1
Tools/scripts/generate_opcode_h.py : 1
Include/opcode.h : 1
Lib/opcode.py : 1
bpo-20644: : 1
3.4.1: : 2
sphinx-build : 1
/usr/bin : 1
bpo-20022: : 1
bundlebuilder : 1
bpo-15968: : 1
bpo-17095: : 1
*shared* : 1
bpo-21811: : 1
Anticipated : 1
bpo-21166: : 1
--generate-posix-vars : 1
pybuilddir.txt : 1
bpo-18096: : 1
bpo-17219: : 1
cross-builds : 1
bpo-22919: : 1
VC : 2
(Visual : 1
2015) : 1
bpo-21236: : 1
_msi.pyd : 1
cabinet.lib : 1
fci.lib : 1
bpo-14203: : 1
view==NULL : 1
PyBuffer_FillInfo() : 1
bytearray_getbuffer() : 1
bytesiobuf_getbuffer() : 1
array_buffer_getbuf() : 1
BufferError : 3
bpo-22445: : 1
PyBuffer_IsContiguous() : 1
NumPy's : 1
NPY_RELAXED_STRIDES_CHECKING : 1
negatives : 2
bpo-22079: : 1
bpo-22453: : 1
PyObject_REPR() : 1
bpo-18395: : 1
"_Py_char2wchar()" : 1
"_Py_wchar2char()" : 1
bpo-21233: : 1
PyMem_RawCalloc() : 1
PyMem_Calloc() : 1
PyObject_Calloc() : 1
_PyObject_GC_Calloc() : 1
bytes(int) : 1
bpo-20942: : 1
PyImport_ImportFrozenModuleObject() : 1
does; : 2
_frozen_importlib : 2
imp.init_frozen() : 1
bpo-19548: : 2
clarifications : 1
bpo-22394: : 1
PYTHON=../python" : 1
PYTHON=venv/bin/python3" : 1
bpo-21514: : 1
7159 : 2
obsoleted : 4
4627 : 1
bpo-21777: : 1
bpo-6916: : 1
undocument : 1
bpo-17386: : 1
bpo-21312: : 1
thread_foobar.h : 1
McCracken : 1
bpo-21043: : 1
bpo-20765: : 1
PurePath.with_name() : 1
PurePath.with_suffix() : 1
bpo-19407: : 1
bpo-19697: : 1
bpo-18982: : 1
bpo-22838: : 1
test_re : 1
bpo-22173: : 1
bpo-16000: : 1
test_curses : 1
bpo-21456: : 1
test_urllib2net.py : 1
Remi : 1
Pointel : 1
bpo-20746: : 1
test_pdb : 1
(-R) : 1
bpo-22060: : 1
test_ctypes : 1
simplified; : 1
bpo-22104: : 1
test_main() : 1
bpo-22111: : 1
test_imaplib : 1
bpo-22002: : 1
"load_package_tests" : 1
implement/augment : 1
test_email : 1
test_json : 1
test_tools : 2
bpo-21976: : 1
bpo-21918: : 1
bpo-9554: : 1
test_argparse : 1
Denver : 1
Coneybeare : 1
Radu : 1
Voicilas : 1
bpo-20155: : 1
Filtering : 1
Engine) : 1
bpo-19493: : 1
bpo-18492: : 1
bpo-21634: : 1
micro-benchmark: : 1
Regebro : 1
bpo-21605: : 1
bpo-21493: : 1
ntpath.expanduser() : 1
bpo-19925: : 1
bpo-21522: : 1
Listbox.itemconfigure() : 1
PanedWindow.paneconfigure() : 1
Menu.entryconfigure() : 1
bpo-17756: : 1
test_code : 1
bpo-17752: : 1
bpo-18604: : 1
Consolidated : 1
bpo-21275: : 1
bpo-21223: : 1
test_site/test_startup_imports : 1
bpo-20635: : 1
geometry : 11
bpo-20743: : 1
test_tcl : 1
bpo-21097: : 1
test_namespace_pkgs : 1
bpo-21503: : 1
test_both() : 1
bpo-20939: : 1
http://www.python.org/ : 1
bpo-20668: : 1
tests.txt : 1
Kok) : 1
bpo-21093: : 1
test_macholib : 1
libz : 1
$HOME/lib : 1
/usr/local/lib : 1
bpo-22770: : 1
bpo-23211: : 1
bpo-23345: : 1
0.9.8zc) : 1
bpo-22314: : 1
LINES : 1
bpo-22615: : 1
makelocalealias.py : 2
SUPPORTED : 1
bpo-22201: : 1
bpo-22120: : 1
warning.) : 1
bpo-18974: : 1
Tools/scripts/diff.py : 1
bpo-21906: : 1
Tools/scripts/md5sum.py : 1
bpo-21629: : 1
"--converters" : 1
bpo-16047: : 1
bpo-11824: : 1
bpo-20535: : 1
PYTHONWARNING : 1
run_tests.py : 1
bpo-23260: : 1
Vista : 2
Tcl/Tk's : 1
TIP : 1
432 : 1
bpo-17896: : 1
"PCbuild\..\externals" : 1
"PCbuild\..\.." : 1
bpo-17717: : 1
NASM : 1
bpo-21907: : 1
bpo-22644: : 1
1.0.1j : 1
bpo-10747: : 1
Olive : 1
Kilburn : 1
".cp35-win32.pyd") : 1
**(For : 1
HISTORY : 1
file.)** : 1
2011 : 3
Misc/NEWS : 2
392** : 1
Py_LIMITED_API) : 1
384** : 1
predecessor : 5
*metavar* : 2
'Manage : 1
servers' : 1
'Tested : 1
Linux') : 1
parser.add_argument('action' : 1
['deploy' : 1
'stop'] : 1
'action : 2
target') : 1
parser.add_argument('targets' : 1
'HOSTNAME' : 1
'url : 1
machines') : 1
parser.add_argument('-u' : 3
'--user' : 1
'login : 1
user') : 1
cmd : 14
'deploy : 1
sneezy.example.com : 1
sleepy.example.com : 1
skycaptain' : 1
parser.parse_args(cmd.split()) : 1
result.action : 1
'deploy' : 1
result.targets : 1
['sneezy.example.com' : 1
'sleepy.example.com'] : 1
result.user : 1
'skycaptain' : 1
parser.parse_args('-h'.split()) : 1
manage_cloud.py : 1
USER : 3
{deploy,start,stop} : 2
HOSTNAME : 2
[HOSTNAME : 1
displays: : 2
argparse.ArgumentParser(prog='HELM') : 1
parser.add_subparsers() : 2
parser_l : 1
subparsers.add_parser('launch' : 1
help='Launch : 1
Control') : 1
subgroup : 10
parser_l.add_argument('-m' : 1
'--missiles' : 1
action='store_true') : 13
parser_l.add_argument('-t' : 1
'--torpedos' : 1
parser_m : 1
subparsers.add_parser('move' : 1
help='Move : 1
Vessel' : 1
aliases=('steer' : 1
'turn')) : 1
parser_m.add_argument('-c' : 1
'--course' : 1
required=True) : 2
parser_m.add_argument('-s' : 1
'--speed' : 1
default=0) : 6
./helm.py : 4
(launch : 1
move) : 1
--missiles : 1
missiles=True : 1
torpedos=False : 1
steer : 2
--course : 1
180 : 5
--speed : 1
{"version": : 1
"formatters": : 3
{"brief": : 1
{"format": : 2
"%(levelname)-8s: : 1
%(name)-15s: : 1
%(message)s"} : 2
"full": : 1
"%(asctime)s : 1
%(levelname)-8s : 12
"handlers": : 7
{"console": : 1
"class": : 9
"formatter": : 9
"brief" : 5
"level": : 11
"stream": : 7
"ext://sys.stdout"} : 1
"console_priority": : 1
"ext://sys.stderr"} : 1
"root": : 5
{"level": : 1
["console" : 1
"console_priority"]}} : 1
"conf.json" : 1
open('conf.json') : 1
conf : 1
logging.config.dictConfig(conf) : 1
logging.info("Transaction : 1
normally") : 1
INFO : 50
logging.critical("Abnormal : 1
termination") : 1
2011-02-17 : 1
11:14:36,694 : 1
CRITICAL : 26
Abnormal : 1
*concurrent* : 2
*futures* : 1
*java.util.concurrent* : 1
abstracts : 1
done) : 4
cancellations : 1
time-out : 3
centrally : 1
competing : 3
concurrent.futures.ThreadPoolExecutor(max_workers=4) : 1
e.submit(shutil.copy : 8
'src1.txt' : 2
'dest1.txt') : 2
'src2.txt' : 2
'dest2.txt') : 2
'src3.txt' : 3
'dest3.txt') : 2
'dest4.txt') : 2
3148** : 2
Computations : 1
Asynchronously : 4
Quinlan : 1
Threaded : 1
*.pyc* : 1
"pyc : 1
fights" : 1
pronounced : 3
commonplace : 2
Unladen : 3
Swallow : 3
"mymodule.pyc" : 1
"mymodule.cpython-32.pyc" : 1
"mymodule.cpython-33.pyc" : 1
"mymodule.unladen10.pyc" : 1
cluttering : 1
*pyc* : 1
Aside : 4
programmer: : 1
Imported : 1
imported: : 3
collections.__cached__ : 1
'c:/py32/lib/__pycache__/collections.cpython-32.pyc' : 2
imp.get_tag() : 2
'cpython-32' : 1
imp.source_from_cache('c:/py32/lib/__pycache__/collections.cpython-32.pyc') : 1
'c:/py32/lib/collections.py' : 1
imp.cache_from_source('c:/py32/lib/collections.py') : 1
*compileall* : 1
*__pycache__* : 1
(instructions : 1
co-located : 1
"pyshared" : 1
wide- : 1
unicode) : 2
/usr/share/pyshared/foo.cpython-32m.so : 1
/usr/share/pyshared/foo.cpython-33md.so : 1
sysconfig.get_config_var('SOABI') : 1
'cpython-32mu' : 1
sysconfig.get_config_var('EXT_SUFFIX') : 1
'.cpython-32mu.so' : 1
3149** : 2
bytes/text : 2
differentiates : 2
*native : 2
request/response : 2
*byte : 1
*U+0000* : 1
*U+00FF* : 1
*Latin-1* : 2
statuses : 1
"start_response()" : 2
2616** : 10
*ISO-8859-1* : 1
2047** : 12
salient : 1
re-encoded : 2
"h.encode('utf-8')" : 1
"h.encode('utf-8').decode('latin-1')" : 1
environ : 3
implementers : 4
CGI-to-WSGI : 1
CGI- : 1
bridge : 4
gap : 1
"wsgiref.handlers.read_environ()" : 1
transcoding : 2
3333** : 12
**#** : 2
'0b' : 1
format(20 : 1
'#o') : 2
'0o24' : 1
format(12.34 : 1
'#5.0f') : 1
12.' : 1
bpo-7094.) : 1
"str.format_map()" : 1
"__missing__()" : 8
shelve.open('tmp.shl') : 1
{project_name} : 1
{status} : 1
{date}'.format_map(d) : 1
2011' : 2
LowerCasedDict(dict): : 1
dict.__getitem__(self : 1
key.lower()) : 1
lcd : 1
LowerCasedDict(part='widgets' : 1
quantity=10) : 1
'There : 4
{QUANTITY} : 1
{Part} : 1
stock'.format_map(lcd) : 1
stock' : 1
PlaceholderDict(dict): : 1
__missing__(self : 3
'<{}>'.format(key) : 1
{name} : 3
{location}'.format_map(PlaceholderDict()) : 1
<name> : 5
<location>' : 1
bpo-6081.) : 1
sys.flags : 2
sys.flags(debug=0 : 1
division_warning=0 : 1
inspect=0 : 1
interactive=0 : 1
optimize=0 : 2
dont_write_bytecode=0 : 1
no_user_site=0 : 1
no_site=0 : 1
ignore_environment=0 : 1
bytes_warning=0 : 1
quiet=1) : 1
Marcin : 1
Wojdyr : 1
bpo-1772833) : 1
*hasattr* : 2
through: : 1
@property : 21
hasattr(a : 1
'f') : 4
(Discovered : 2
bpo-9666.) : 1
str(math.pi) : 1
bpo-9337.) : 1
timely : 5
memoryview(b'abcdefgh') : 1
print(v.tolist()) : 1
104] : 2
bpo-9757.) : 1
outer(x): : 1
inner() : 1
print_error(): : 1
print(e) : 1
print_error() : 1
bpo-4617.) : 1
"time.gmtime()" : 5
counterparts: : 1
isinstance(sys.version_info : 1
'Version : 2
%d.%d.%d : 1
%s(%d)' : 1
final(0)' : 1
bpo-8413.) : 1
PYTHONWARNINGS='ignore::RuntimeWarning::,once::UnicodeWarning::' : 1
"gc.DEBUG_UNCOLLECTABLE" : 1
open("foo" : 1
<_io.BufferedWriter : 1
name='foo'> : 1
bpo-10093 : 1
bpo-477863.) : 1
"collections.Sequence" : 1
*range* : 2
2).count(10) : 1
2).index(10) : 1
2)[5] : 1
2)[0:5] : 1
Stutzbach : 3
bpo-9213 : 1
bpo-2690 : 1
bpo-10889.) : 1
Py2.x : 1
"isinstance(x : 9
collections.Callable)": : 1
callable(max) : 1
callable(20) : 1
bpo-10518.) : 1
aggravating : 1
bpo-9425.) : 1
undergone : 2
Throughout : 1
interactions : 2
win : 3
*SSL* : 1
emails : 5
"message_from_bytes()" : 2
"message_from_binary_file()" : 1
"BytesFeedParser" : 7
"BytesParser" : 9
"get_payload()" : 5
*Content-Transfer-Encoding* : 23
*8bit* : 3
*7bit* : 1
2047**-encoded : 1
*unknown-8bit* : 1
"BytesGenerator" : 13
*Content-Transfer- : 7
Encoding* : 7
"sendmail()" : 7
"send_message()" : 1
*from_addr* : 8
*to_addrs* : 7
bpo-4661 : 1
bpo-10321.) : 1
"xml.etree.ElementTree.fromstringlist()" : 1
"xml.etree.ElementTree.register_namespace()" : 1
"xml.etree.ElementTree.tostringlist()" : 1
sublists : 1
"xml.etree.ElementTree.Element.extend()" : 1
"xml.etree.ElementTree.Element.iterfind()" : 1
subelements : 11
"xml.etree.ElementTree.Element.itertext()" : 1
"xml.etree.ElementTree.TreeBuilder.end()" : 1
"xml.etree.ElementTree.TreeBuilder.doctype()" : 1
"xml.etree.ElementTree.getchildren()" : 1
"xml.etree.ElementTree.getiterator()" : 1
"Element.iter" : 1
@functools.lru_cache(maxsize=300) : 1
get_phone_number(name): : 1
c.execute('SELECT : 1
phonenumber : 1
phonelist : 2
WHERE : 12
name=?' : 1
(name,)) : 1
c.fetchone()[0] : 1
user_requests: : 1
get_phone_number(name) : 1
statistics: : 2
get_phone_number.cache_info() : 1
CacheInfo(hits=4805 : 1
misses=980 : 1
maxsize=300 : 1
currsize=300) : 1
get_phone_number.cache_clear() : 1
incorporating : 3
Baker : 1
Tebeka : 1
498245 : 1
577479 : 1
bpo-10586 : 1
bpo-10593.) : 1
recovering : 2
get_phone_number : 1
get_phone_number.__wrapped__ : 1
Terrence : 1
Cole; : 1
bpo-9567 : 1
bpo-3445 : 1
bpo-8814.) : 1
"functools.total_ordering()" : 2
inequality : 9
*__eq__* : 1
*__lt__* : 1
fill-in : 1
*__le__* : 1
*__gt__* : 1
*__ge__*: : 1
@total_ordering : 2
Student: : 3
((self.lastname.lower() : 4
self.firstname.lower()) : 4
(other.lastname.lower() : 4
other.firstname.lower())) : 4
__lt__(self : 3
*total_ordering* : 2
"functools.cmp_to_key()" : 3
function*: : 2
sorted(iterable : 3
key=cmp_to_key(locale.strcoll)) : 2
APL's : 1
*scan* : 1
Numpy's : 1
*accumulate* : 1
list(accumulate([8 : 1
50])) : 1
[8 : 1
60] : 4
prob_dist : 1
[0.1 : 2
0.3] : 1
list(accumulate(prob_dist)) : 1
probability : 22
1.0] : 1
*-=* : 1
saturating : 2
multisets : 6
counts: : 1
Counter(dogs=5 : 2
cats=3) : 2
-= : 16
Counter(dogs=2 : 1
cats=8) : 2
Counter({'dogs': : 2
3}) : 3
tally.subtract(dogs=2 : 1
'cats': : 1
-5}) : 1
"move_to_end()" : 2
renewing : 1
"od[k] : 1
od.pop(k)" : 1
move-to-end : 1
resequencing : 1
aging : 1
OrderedDict.fromkeys(['a' : 1
'X' : 2
'e']) : 1
'e'] : 1
d.move_to_end('X') : 1
'X'] : 1
substitutable : 2
deque('simsalabim') : 1
d.count('s') : 1
d.reverse() : 1
deque(['m' : 1
's']) : 1
barrier : 47
Barriers : 2
generalization : 3
Rendezvous : 1
two-phase : 1
*filling* : 2
*draining* : 1
phases : 2
(drained) : 1
barriers: : 1
get_votes(site): : 2
ballots : 3
conduct_election(site) : 2
all_polls_closed.wait() : 1
totals : 2
summarize(ballots) : 2
publish(site : 2
totals) : 2
all_polls_closed : 1
Barrier(len(sites)) : 1
sites: : 1
Thread(target=get_votes : 1
args=(site,)).start() : 1
enforces : 5
"threading.Thread.join()" : 1
(summarizing : 1
ballots) : 1
crossed : 1
elapses : 1
"BrokenBarrierError" : 8
all_polls_closed.wait(timeout=midnight : 1
time.now()) : 1
BrokenBarrierError: : 1
lockbox : 1
seal_ballots(ballots) : 1
queue.put(lockbox) : 1
election : 1
times-out : 1
sealed : 2
deposited : 1
barriers : 2
Little : 2
*section : 1
3.6* : 1
Yasskin : 3
bpo-8777.) : 1
timezone-aware : 1
datetime.now(timezone.utc) : 2
datetime.datetime(2010 : 2
923754 : 1
tzinfo=datetime.timezone.utc) : 8
datetime.strptime("01/01/2000 : 1
12:00 : 1
+0000" : 2
"%m/%d/%Y : 1
%H:%M : 1
%z") : 1
datetime.datetime(2000 : 1
"datetime.date.strftime()" : 1
1900 : 4
9999 : 11
inclusive : 23
"%y" : 5
Py3.2 : 1
guesswork: : 1
warnings.resetwarnings() : 2
time.accept2dyear : 2
time.asctime((11 : 2
0)) : 10
module): : 2
Century : 1
2-digit : 7
12:34:56 : 2
11' : 2
fits : 14
bpo-1289118 : 1
bpo-5094 : 1
bpo-6641 : 1
bpo-2706 : 1
bpo-1777412 : 1
bpo-8013 : 1
bpo-10827.) : 1
*Nan* : 1
*Infinity*: : 1
isfinite : 1
[isfinite(x) : 1
4.56 : 1
float('Nan') : 1
float('Inf'))] : 1
[True : 2
False] : 1
"e**x-1" : 1
accompanies : 1
quantities: : 1
expm1(0.013671875) : 1
e**x-1 : 1
0.013765762467652909 : 1
Gaussian : 2
erf(x)": : 1
erf : 1
erfc : 1
sqrt : 2
erf(1.0/sqrt(2.0)) : 2
0.682689492137086 : 1
erfc(1.0/sqrt(2.0)) : 2
0.31731050786291404 : 1
https://en.wikipedia.org/wiki/Gamma_function : 1
factorials : 1
gamma : 4
lgamma : 1
gamma(7.0) : 1
720.0 : 1
lgamma(801.0) : 1
log(800 : 1
factorial) : 1
4551.950730698041 : 1
"abstractclassmethod()" : 1
"abstractstaticmethod()" : 1
implemented: : 1
Temperature(metaclass=abc.ABCMeta): : 1
@abc.abstractclassmethod : 3
from_fahrenheit(cls : 1
t): : 2
from_celsius(cls : 1
Urban; : 1
bpo-5867.) : 1
"getbuffer()" : 1
buffer's : 10
editing: : 1
REC_LEN : 2
LOC_START : 2
LOC_LEN : 1
change_location(buffer : 3
record_number : 2
location): : 1
buffer[start: : 1
start+LOC_LEN] : 1
byte_stream : 1
io.BytesIO( : 1
b'G3805 : 2
storeroom : 1
chassis : 2
b'X7899 : 2
Reserve : 2
cog : 2
b'L6988 : 2
Primary : 6
sprocket' : 2
byte_stream.getbuffer() : 1
b'warehouse : 1
b'showroom : 1
print(byte_stream.getvalue()) : 1
showroom : 1
warehouse : 1
bpo-5506.) : 1
self-reference : 1
"recursive_repr()" : 1
MyList(list): : 2
@recursive_repr() : 2
'|'.join(map(repr : 2
self)) : 2
MyList('abc') : 2
m.append(m) : 2
m.append('x') : 2
<'a'|'b'|'c'|...|'x'> : 2
bpo-9826 : 1
bpo-9840.) : 1
cookbook : 5
*style* : 9
shell-style : 7
basicConfig(style='%' : 1
format="%(name)s : 1
%(levelname)s: : 1
%(message)s") : 1
basicConfig(style='{' : 1
format="{name} : 1
{levelname} : 1
{message}") : 1
basicConfig(style='$' : 1
format="$name : 1
$levelname: : 1
$message") : 1
"StreamHandler" : 13
"logging.raiseExceptions" : 3
"logging.lastResort" : 3
"Filter" : 17
"unix_dialect" : 2
"unix" : 1
"csv.DictWriter" : 1
"writeheader()" : 2
writing-out : 1
csv.DictWriter(sys.stdout : 1
'dept'] : 1
dialect='unix') : 2
w.writeheader() : 1
"name","dept" : 1
w.writerows([ : 1
{'name': : 18
'tom' : 1
'dept': : 2
'accounting'} : 1
'susan' : 1
'Salesl'}]) : 1
"tom","accounting" : 1
"susan","sales" : 1
Talbot : 1
bpo-5975 : 1
bpo-1537721.) : 1
mind-blowing : 1
"ContextDecorator" : 10
duty : 1
roles : 2
pre-action : 2
post-action : 2
logging.basicConfig(level=logging.INFO) : 4
track_entry_and_exit(name): : 1
logging.info('Entering: : 2
logging.info('Exiting: : 2
manager: : 10
track_entry_and_exit('widget : 2
loader'): : 2
print('Some : 4
here') : 4
load_widget() : 4
well: : 8
@track_entry_and_exit('widget : 2
loader') : 2
activity(): : 2
fulfill : 6
*track_entry_and_exit* : 1
bpo-9110.) : 1
assuring : 2
(bpo-8188): : 1
hash(Fraction(3 : 1
hash(1.5) : 1
hash(Decimal("1.5")) : 1
hash(complex(1.5 : 1
*infinity* : 1
*nan* : 1
multiplier : 3
sys.hash_info : 2
sys.hash_info(width=64 : 1
modulus=2305843009213693951 : 1
inf=314159 : 1
nan=0 : 1
imag=1000003) : 1
inter-operability : 1
ill-advised) : 1
"Decimal('1.1') : 1
float('1.1')" : 1
(bpo-8257) : 1
Mixed : 1
(bpo-2531 : 1
bpo-8188) : 1
"from_decimal()" : 1
(bpo-8294): : 1
Decimal(1.1) : 1
Fraction(1.1) : 2
Fraction(2476979795053773 : 2
2251799813685248) : 2
"Context.clamp" : 1
bpo-8540) : 1
FTP("ftp1.at.proftpd.org") : 2
ftp: : 2
ftp.login() : 3
ftp.dir() : 2
'230 : 4
Anonymous : 3
apply.' : 2
dr-xr-xr-x : 8
154 : 4
10:43 : 6
4096 : 15
auto-closing : 2
fileinput.input(files=('log1.txt' : 1
'log2.txt')) : 1
process(line) : 3
bpo-4972 : 1
bpo-8046 : 1
bpo-1286.) : 1
(potentially : 7
long-lived) : 4
Rodolà; : 4
bpo-8806.) : 1
bpo-7461 : 1
bpo-10554.) : 1
select.PIPE_BUF : 2
(Available : 1
Sébastien : 1
Sablé : 1
bpo-9862) : 1
"truncate()") : 1
"peek()" : 4
zero-padded : 11
decompressing: : 1
'Three : 2
thou : 3
shalt : 3
'and : 2
three' : 1
s.encode() : 1
len(b) : 4
gzip.compress(b) : 1
len(c) : 4
77 : 2
gzip.decompress(c).decode()[:42] : 1
count' : 1
bpo-3488; : 1
bpo-9962 : 1
bpo-1675951 : 1
bpo-7471 : 1
interleaved : 3
*read* : 2
"None": : 10
myfilter(tarinfo): : 1
tarinfo.isfile(): : 1
tarinfo.uname : 2
'monty' : 1
redact : 1
tarinfo : 5
tarfile.open(name='myarchive.tar.gz' : 1
mode='w:gz') : 1
tf: : 2
glob.glob('*.txt'): : 1
tf.add(filename : 1
filter=myfilter) : 1
tf.list() : 1
-rw-r--r-- : 10
monty/501 : 5
902 : 1
2011-01-26 : 5
17:59:11 : 5
annotations.txt : 1
general_questions.txt : 1
3514 : 1
prion.txt : 1
py_todo.txt : 1
1399 : 1
semaphore_notes.txt : 1
hashlib.algorithms_guaranteed : 2
{'sha1' : 1
'sha512' : 2
'md5'} : 1
hashlib.algorithms_available : 2
{'md2' : 1
'SHA256' : 1
'SHA512' : 1
'dsaWithSHA' : 1
'mdc2' : 1
'SHA224' : 1
'MD4' : 1
'ripemd160' : 1
'SHA1' : 1
'MDC2' : 1
'SHA' : 1
'SHA384' : 1
'MD2' : 1
'ecdsa-with-SHA1','md4' : 1
'md5' : 2
'DSA-SHA' : 1
'dsaEncryption' : 1
'DSA' : 1
'RIPEMD160' : 1
'sha' : 1
'MD5' : 1
'sha384'} : 1
Chenet : 1
literal_eval : 1
"{'req': : 1
'func': : 2
'args': : 2
0.5)}" : 1
literal_eval(request) : 2
{'args': : 1
0.5) : 5
'req': : 1
'pow'} : 1
"os.system('do : 1
harmful')" : 1
<_ast.Call : 1
0x101739a10> : 1
"fsencode()" : 3
"fsdecode()" : 4
'Sehenswürdigkeiten' : 1
os.fsencode(filename) : 2
b'Sehensw\xc3\xbcrdigkeiten' : 1
"os.supports_bytes_environ" : 1
"os.getenvb()" : 2
*ignore_dangling_symlinks*: : 1
"symlinks=False" : 1
*copy_function*: : 1
tarfiles : 5
bzipped : 2
formats) : 4
"unpack_archive()" : 2
"os.chdir()") : 1
destructive : 3
os.chdir('mydata') : 1
shutil.make_archive('/var/backup/mydata' : 1
'zip') : 1
'/var/backup/mydata.zip' : 1
os.chdir('tmp') : 1
shutil.unpack_archive('/var/backup/mydata.zip') : 1
recover : 7
pprint.pprint(shutil.get_archive_formats()) : 1
[('bztar' : 1
"bzip2'ed : 1
tar-file") : 2
('gztar' : 1
"gzip'ed : 1
('tar' : 1
'uncompressed : 1
('zip' : 1
'ZIP : 1
file')] : 1
shutil.register_archive_format( : 1
name='xz' : 1
function=xz.compress : 1
extra_args=[('level' : 1
8)] : 2
description='xz : 1
compression' : 1
"sqlite3.Connection.in_transit" : 1
uncommitted : 2
fulltext-search : 2
Shashwat : 1
Anand; : 1
bpo-8845.) : 1
markup: : 1
html.escape('x : 1
7') : 1
'x : 1
&gt; : 1
&amp;&amp; : 1
&lt; : 1
7' : 1
bpo-8524.) : 1
"socket.create_connection()" : 1
bpo-9794.) : 1
(encrypted : 1
authenticated) : 1
connections: : 2
2818**) : 1
hosts" : 1
*server_hostname* : 8
SSLv2 : 8
bpo-8850 : 1
bpo-1589 : 1
bpo-8322 : 1
bpo-5639 : 1
bpo-4870 : 1
bpo-8484 : 1
revamped : 1
dysfunctional : 1
"nntplib.NNTP_SSL") : 1
"nntplib.NNTP.starttls()") : 1
bpo-9360 : 1
Vant : 1
bpo-1926.) : 1
"http.client.HTTPSConnection" : 2
"urllib.request.HTTPSHandler" : 1
"urllib.request.urlopen()" : 3
Authorities : 1
bpo-9003.) : 1
"imaplib.IMAP4.starttls" : 1
bpo-4471.) : 1
(host : 7
port) : 10
"request()" : 2
Conveniently : 2
Connect : 15
tunneling : 1
ISO-8859-1 : 7
(Latin-1) : 1
bpo-10980.) : 1
(bpo-10620) : 1
"-p" : 7
"-s": : 1
my_proj_dir : 1
_test.py : 1
Experimentation : 1
"unittest.case.TestCase" : 1
TestCase : 3
TestCase().assertEqual(pow(2 : 1
8) : 19
self.assertWarns(DeprecationWarning): : 1
legacy_function('XYZ') : 1
bpo-9754.) : 1
"assertCountEqual()" : 1
order): : 1
test_anagram(self): : 1
self.assertCountEqual('algorithm' : 1
'logarithm') : 1
diffs : 13
sometime : 3
voluminous : 1
"maxDiff" : 2
clean-ups : 2
"assertRegex()" : 5
"re.match()" : 6
"Regex" : 1
"Regexp" : 1
camel-casing : 1
Melotti.) : 1
+---------------------------------+--------------------------------+ : 6
Preferred : 1
|=================================|================================| : 1
"assert_()" : 1
"assertEquals()" : 1
"assertNotEquals()" : 1
"assertNotEqual()" : 4
"assertAlmostEquals()" : 1
"assertNotAlmostEquals()" : 1
"TestCase.fail*" : 1
Melotti; : 1
bpo-9424.) : 1
misimplemented : 1
hard-to-debug : 1
optical : 1
illusions : 1
"TestCase().assertDictContainsSubset({'a':1 : 1
'b':2} : 1
{'a':1})" : 1
"int(n*random())" : 1
bias : 5
n" : 19
"randint()" : 1
"choice()" : 3
"shuffle()" : 1
"sample()" : 2
bpo-9025.) : 1
bpo-8807.) : 1
"asyncore.dispatcher" : 10
"handle_accepted()" : 3
"(sock : 1
addr)" : 3
endpoint : 20
"handle_accept()" : 1
bpo-6706.) : 2
directories: : 3
tempfile.TemporaryDirectory() : 2
tmpdirname: : 2
print('created : 2
dir:' : 1
tmpdirname) : 2
bpo-5178.) : 1
"getgeneratorstate()" : 2
generator-iterator: : 1
getgeneratorstate : 1
'demo' : 2
gen() : 1
getgeneratorstate(g) : 3
'GEN_CREATED' : 1
next(g) : 1
'GEN_SUSPENDED' : 1
next(g : 3
'GEN_CLOSED' : 1
Rodolpho : 1
Eckhardt : 1
bpo-10220.) : 1
"getattr_static()" : 3
searching: : 1
print('Running') : 1
getattr(a : 1
inspect.getattr_static(a : 1
<property : 1
0x1022bd788> : 1
much-improved : 1
server: : 22
pydoc3.2 : 1
Ron : 1
Adam; : 1
bpo-2001.) : 1
"code_info()" : 2
dis.show_code(random.choice) : 1
Filename: : 1
/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/random.py : 1
Kw-only : 1
locals: : 1
Flags: : 1
OPTIMIZED : 2
NEWLOCALS : 1
NOFREE : 1
Constants: : 1
'Choose : 1
sequence.' : 1
'Cannot : 3
sequence' : 1
Names: : 1
_randbelow : 1
len : 10
seq : 7
"dis(compile(s : 1
'eval'))" : 1
"dis(s)": : 1
dis('3*x+1 : 1
x%2==1 : 1
x//2') : 1
LOAD_NAME : 3
(x) : 3
BINARY_MODULO : 1
(==) : 1
POP_JUMP_IF_FALSE : 1
22 : 14
BINARY_MULTIPLY : 1
26 : 5
BINARY_FLOOR_DIVIDE : 1
35 : 4
explore : 8
under-the-hood : 1
bpo-9147.) : 1
bpo-9523.) : 1
"ctypes.c_ssize_t" : 1
reveals : 2
site.getsitepackages() : 2
['/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages' : 1
'/Library/Frameworks/Python.framework/Versions/3.2/lib/site-python' : 1
'/Library/Python/3.2/site-packages'] : 1
site.getuserbase() : 2
'/Users/raymondhettinger/Library/Python/3.2' : 1
'/Users/raymondhettinger/Library/Python/3.2/lib/python/site-packages' : 1
site's : 1
command-line: : 3
--user-base : 2
/Users/raymondhettinger/.local : 1
--user-site : 3
/Users/raymondhettinger/.local/lib/python3.2/site-packages : 1
"get_platform()" : 2
*linux-i586* : 1
*macosx-10.6-ppc* : 1
"get_python_version()" : 2
"3.2" : 7
seven : 7
*posix_home* : 1
*posix_user* : 1
*nt_user* : 1
*os2* : 1
*os2_home*: : 1
"get_paths()" : 3
C:\Python32>python : 1
Platform: : 4
Paths: : 2
"C:\Python32" : 8
"C:\Python32\Include" : 3
platinclude : 2
platlib : 2
"C:\Python32\Lib\site-packages" : 2
platstdlib : 2
"C:\Python32\Lib" : 4
purelib : 3
"C:\Python32\Scripts" : 1
Variables: : 2
BINDIR : 1
BINLIBDEST : 1
EXE : 1
INCLUDEPY : 1
LIBDEST : 1
SO : 3
"32" : 3
abiflags : 1
exec_prefix : 1
platbase : 1
projectbase : 1
py_version : 1
py_version_nodot : 1
py_version_short : 1
srcdir : 1
userbase : 1
"C:\Documents : 1
Settings\Raymond\Application : 1
Data\Python" : 1
"pdb.py" : 4
*nosigint* : 3
"l(list)" : 1
"ll(long : 1
list)" : 4
"display" : 1
"undisplay" : 1
"interact" : 1
Breakpoints : 4
Antonio : 1
Cuni : 1
Sandler.) : 1
ConfigParser() : 2
parser.read_string(""" : 3
[DEFAULT] : 3
[main] : 1
Menu : 4
[options] : 14
parser['main']['color'] : 1
parser['main']['editable'] : 1
parser['options'] : 1
section['title'] : 3
'Options' : 1
'Options : 2
(editable: : 2
%(editable)s)' : 1
no)' : 1
classical : 3
option/value : 1
*DEFAULT* : 1
"ExtendedInterpolation": : 1
ConfigParser(interpolation=ExtendedInterpolation()) : 2
parser.read_dict({'buildout': : 1
{'directory': : 1
'/home/ambv/zope9'} : 1
'custom': : 1
{'prefix': : 1
'/usr/local'}}) : 1
[buildout] : 1
zope9 : 1
find-links : 1
${buildout:directory}/downloads/dist : 1
[zope9] : 1
plone.recipe.zope9install : 1
/opt/zope : 1
[instance] : 1
plone.recipe.zope9instance : 1
zope9-location : 1
${zope9:location} : 1
zope-conf : 1
${custom:prefix}/etc/zope.conf : 1
parser['buildout']['find-links'] : 1
'\n/home/ambv/zope9/downloads/dist' : 1
parser['instance']['zope-conf'] : 1
'/usr/local/etc/zope.conf' : 2
parser['instance'] : 1
instance['zope-conf'] : 1
instance['zope9-location'] : 1
'/opt/zope' : 1
get-functions : 1
Langa.) : 1
2732**: : 1
urllib.parse.urlparse('http://[dead:beef:cafe:5417:affe:8FA3:deaf:feed]/foo/') : 1
netloc='[dead:beef:cafe:5417:affe:8FA3:deaf:feed]' : 1
path='/foo/' : 1
"urldefrag()" : 5
tuple*: : 3
urllib.parse.urldefrag('http://python.org/about/#target') : 1
DefragResult(url='http://python.org/about/' : 1
fragment='target') : 1
r[0] : 1
'http://python.org/about/' : 1
r.fragment : 1
'target' : 1
"urlencode()" : 1
*query* : 3
*safe* : 6
*error* : 5
"quote_plus()" : 2
urllib.parse.urlencode([ : 1
('type' : 3
'telenovela') : 1
('name' : 2
'¿Dónde : 1
Está : 1
Elisa?')] : 1
encoding='latin-1') : 1
'type=telenovela&name=%BFD%F3nde+Est%E1+Elisa%3F' : 1
ASCII-encoded : 8
urllib.parse.urlparse(b'http://www.python.org:80/about/') : 1
ParseResultBytes(scheme=b'http' : 1
netloc=b'www.python.org:80' : 1
path=b'/about/' : 1
params=b'' : 1
query=b'' : 1
fragment=b'') : 1
(Work : 1
Mahn : 1
bpo-2987 : 1
bpo-5468 : 1
bpo-9873.) : 1
harnessed : 1
"mailbox.Mailbox" : 1
"get_file()" : 1
text-mode) : 1
"get_bytes()" : 1
non-binary : 5
API's : 2
"get_string()" : 1
Steffen : 1
Daode : 1
Nurpmeso : 1
bpo-9124.) : 1
*Demo* : 1
dozen : 3
lively : 1
bpo-10199.) : 1
(generally : 2
Lock) : 1
objectives : 1
ensuing : 1
"check : 1
interval" : 1
abandoned : 2
tunable : 3
mailing-list : 1
(however : 2
"priority : 1
requests" : 1
inclusion) : 1
bpo-7316.) : 1
"threading.Semaphore.acquire()" : 1
Landschoff; : 1
bpo-850728.) : 1
acquisitions : 1
Pthreads : 1
pressing : 8
"Ctrl+C" : 2
shells) : 1
Reid : 1
Kleckner; : 1
bpo-8844.) : 1
3}" : 1
recasts : 1
set-notation : 1
operationally : 1
fast: : 1
name.rpartition('.')[2] : 1
{'xml' : 1
'html' : 4
'xhtml' : 1
'css'}: : 1
handle(name) : 1
Malcolm; : 1
bpo-6690) : 1
unserializing : 2
bpo-9410 : 1
bpo-3873.) : 1
Timsort : 2
bpo-9915.) : 1
"sort_keys" : 1
bpo-7451 : 1
bpo-10314.) : 1
"threading.RLock()" : 1
bpo-3001.) : 1
fast-search : 1
stringlib : 1
"splitlines()" : 3
bpo-7622 : 1
bpo-7462.) : 1
"digits" : 4
(bpo-6713 : 1
Bolton : 1
Andress : 1
Bennetts : 1
bpo-8685) : 1
"array.repeat()" : 1
(bpo-1569291 : 1
Belopolsky) : 1
(bpo-3709 : 1
Schaaf) : 1
sped-up : 1
(bpo-10160 : 1
Christos : 1
Georgiou) : 1
(bpo-7113 : 1
Langa) : 1
6.0.0 : 1
2,000 : 1
mobile : 1
phones : 1
Kannada : 1
(U+0CF1 : 1
U+0CF2) : 1
Tai : 1
Lue : 1
(U+19DA) : 1
eligible : 4
disqualifying : 1
====== : 9
*cp720* : 1
(bpo-1616979) : 1
unencodable : 9
Python3.1 : 1
"'mbcs'") : 1
"'surrogateescape'" : 11
accompanied : 3
cheatsheet-style : 1
summaries : 2
jog : 1
adjunct : 1
labeled: : 1
**Source : 240
code** : 2
Lib/functools.py : 2
rationale.) : 1
easier- : 1
to-read : 1
bpo-9528.) : 1
"Demo" : 1
demos : 2
"Tools/demo" : 1
altogether : 10
bpo-7962.) : 1
Carbon : 1
AquaTk : 2
bpo-6075.) : 1
https://svn.python.org : 1
https://hg.python.org/ : 1
changesets : 1
385** : 1
Workflows : 1
*idle* : 1
*pydoc* : 1
(bpo-10679) : 1
(Py_UNICODE_TOLOWER : 1
Py_UNICODE_ISDECIMAL : 1
"unicodedata.numeric()" : 1
Bupjoe : 1
D'Arc; : 2
bpo-5127.) : 1
Computed : 1
"--without-computed-gotos" : 1
bpo-9203.) : 1
"--with-wctype-functions" : 1
bpo-9210.) : 1
degraded : 1
catastrophically) : 1
bpo-9778.) : 1
"Py_VA_COPY" : 1
*va_copy* : 1
(bpo-2443) : 1
(bpo-5753) : 1
(bpo-8276) : 1
fixed-width : 5
(bpo-7767) : 1
"PyUnicode_CompareWithASCIIString()" : 2
*not : 4
equal* : 1
*NUL* : 2
(bpo-7033) : 1
(bpo-2422) : 1
"O?" : 1
*PyArg_Parse* : 1
(bpo-8837) : 1
Mac/BuildScript/README.txt : 1
32/64-bit : 1
Accordingly : 16
8.5.9 : 1
https://www.python.org/download/mac/tcltk/ : 1
incompatibilities: : 1
"%(name)s" : 2
"add_section()" : 2
Duplicate : 9
"DuplicateSectionError" : 4
"DuplicateOptionError" : 2
**;** : 2
interpolated : 5
""option : 1
="" : 1
filenames; : 2
"array.tostring()" : 1
"array.fromstring()" : 1
"array.tobytes()" : 1
"array.frombytes()" : 1
bpo-8990.) : 1
"s*" : 8
"w#" : 1
instead; : 4
"sys.setfilesystemencoding()" : 1
*seed* : 4
*version* : 15
*1* : 2
"random.seed(s : 1
version=1)" : 1
built-in) : 2
"struct.pack()" : 2
"struct.pack('<6sHHBBB' : 2
'GIF87a' : 1
b'GIF87a' : 1
Beazley : 2
bpo-10783.) : 1
"xml.etree.ElementTree.ParseError" : 1
"xml.parsers.expat.ExpatError" : 2
Unix; : 3
bpo-10711.) : 1
"SSLError" : 16
bpo-10272.) : 1
"PyEval_ReleaseLock()" : 2
thread- : 10
"PyEval_SaveThread()" : 4
"PyEval_RestoreThread()") : 1
"asyncore.handle_accept()" : 1
"asyncore.handle_accepted()" : 1
Release: : 5
09 : 2
2023 : 1
10-60% : 2
1.25x : 1
680**: : 1
— : 7
not- : 2
624**: : 1
670**: : 1
"distance.py" : 2
print(manhattan_distance(p1 : 1
p2)) : 1
^^^^^^^^^^^^^^^^^^^^^^^^^^ : 4
manhattan_distance : 1
abs(point_1.x : 1
point_2.x) : 1
abs(point_1.y : 1
point_2.y) : 1
'NoneType' : 6
"query.py" : 4
magic_arithmetic('foo') : 1
magic_arithmetic : 1
add_counts(x) : 1
^^^^^^^^^^^^^ : 1
add_counts : 1
query_user(user1) : 1
query_user(user2) : 1
^^^^^^^^^^^^^^^^^ : 1
query_user : 1
query_count(db : 1
response['a']['b']['c']['user'] : 1
retry=True) : 1
~~~~~~~~~~~~~~~~~~^^^^^ : 1
subscriptable : 1
"calculation.py" : 1
54 : 1
z) : 5
~~~~~~^~~ : 1
correlate : 2
"codeobject.co_positions()" : 1
"PyCode_Addr2Location()" : 1
bpo-43950.) : 1
generalizes : 1
subgroups : 7
bpo-45607 : 1
Hatfield-Dodds.) : 1
company/tag : 1
"-V:<company>/<tag>" : 1
"-<major>.<minor>" : 2
"PythonCore" : 2
"-V:OtherPython/" : 1
"best" : 2
"OtherPython" : 1
"-V:3.11" : 1
"-V:/3.11" : 1
"-<major>" : 1
"-<major>-<bitness>" : 1
"-<major>.<minor>-<bitness>" : 1
32-bit" : 1
x86-64) : 1
runtime's : 1
parameterised : 3
646** : 3
parameterisation : 1
*arbitrary* : 3
TensorFlow : 1
*shape* : 6
shape-related : 1
Rahtz : 2
bpo-43224 : 1
Mendoza : 1
Pradeep : 3
Srinivasan : 3
Siles.) : 1
"Required" : 4
"NotRequired" : 4
*total* : 4
Movie(TypedDict): : 1
title: : 4
year: : 4
NotRequired[int] : 1
m1: : 1
Movie : 4
{"title": : 2
"Black : 1
Panther" : 1
"year": : 7
2018} : 1
m2: : 1
"Star : 1
Wars"} : 1
(year : 2
required) : 7
m3: : 1
{"year": : 1
2022} : 1
ERROR : 27
(missing : 3
title) : 1
Movie(TypedDict : 1
Required[str] : 1
655** : 3
bpo-47087 : 1
Foster.) : 1
"TypeVar"-based : 1
**specified : 1
"classmethod"s : 2
MyLock: : 1
__enter__(self) : 1
Self: : 4
self.lock() : 1
MyInt: : 1
fromhex(cls : 1
cls(int(s : 1
16)) : 2
bpo-46534 : 1
Hilton-Balfe.) : 1
"LiteralString" : 5
run_query(sql: : 2
LiteralString) : 3
caller( : 1
arbitrary_string: : 1
query_string: : 1
LiteralString : 2
table_name: : 1
run_query("SELECT : 4
students") : 2
run_query(query_string) : 1
table_name) : 1
run_query(arbitrary_string) : 2
run_query( : 2
f"SELECT : 2
{arbitrary_string}" : 2
bpo-47088 : 1
Bleaney.) : 1
"dataclass_transform" : 5
"@dataclass_transform()" : 2
"magic" : 2
"dataclass"-like : 1
create_model : 2
@typing.dataclass_transform() : 1
create_model(cls: : 2
Type[T]) : 1
Type[T]: : 1
cls.__init__ : 1
cls.__eq__ : 1
cls.__ne__ : 1
@create_model : 2
CustomerModel: : 2
id: : 7
CustomerModel(id=327 : 1
name="Eric : 1
Idle") : 1
gh-91860 : 1
Bonte : 1
bpo-46725 : 1
bpo-33346.) : 1
bpo-12022 : 1
bpo-44471.) : 1
"object.__getstate__()" : 1
"copy"ing : 1
"pickle"ing : 1
"weakref.WeakSet" : 2
bpo-26579.) : 1
maliciously : 12
user-writable) : 1
gh-57684.) : 3
""z"" : 1
682** : 1
gh-90153.) : 1
bringing : 2
gh-91181.) : 1
"typing.SupportsComplex" : 1
"typing.SupportsBytes" : 1
bpo-24234.) : 1
"siphash24" : 1
bpo-29410.) : 1
"sys.exc_info()[1].__traceback__" : 1
bpo-45711.) : 6
"_PyErr_StackItem") : 1
field; : 3
"AppendPath" : 1
"PrependPath" : 1
Bastian : 1
Neuburger : 1
bpo-44934.) : 1
recalculate : 4
"module_search_paths" : 6
lines/80 : 1
"--help- : 1
xoptions" : 1
bpo-46142.) : 1
"tomllib": : 1
Taneli : 1
Hukkinen : 1
bpo-40059.) : 1
"wsgiref.types": : 1
**WSGI**-specific : 1
bpo-42012.) : 1
"TaskGroup" : 4
gh-90908.) : 1
"timeout()" : 2
"wait_for()" : 7
gh-90927.) : 1
"Runner" : 4
gh-91218.) : 1
Duprat : 1
gh-87518.) : 1
*all_errors* : 3
"asyncio.StreamWriter.start_tls()" : 1
stream-based : 2
Ian : 3
Good : 3
bpo-34975.) : 1
"SelectorEventLoop" : 14
bpo-46805.) : 1
"cancelling()" : 1
Filipe : 1
Laíns : 1
bpo-25625) : 1
bpo-44674.) : 1
gh-91973.) : 1
(barring : 1
gh-80010.) : 1
"EnumMeta" : 1
"EnumType" : 6
("EnumMeta" : 1
alias) : 2
be) : 2
"ReprEnum" : 6
*f-string*s) : 2
"str(AnIntEnum.ONE)" : 2
"format(AnIntEnum.ONE)" : 1
"'1'" : 4
"'AnIntEnum.ONE'" : 1
"Enum.__format__()" : 1
"str") : 6
"enum.Enum.__str__()" : 1
"'AnEnum.MEMBER'" : 1
"AnEnum(str : 1
Enum)" : 1
"'MEMBER'" : 1
*boundary* : 10
"FlagBoundary" : 4
out- : 2
of-range : 1
"verify()" : 4
"EnumCheck" : 4
"member()" : 2
"nonmember()" : 2
is/is : 1
"types.DynamicClassAttribute()" : 1
"global_enum()" : 2
"'re.ASCII'" : 1
"re.RegexFlag" : 2
"'RegexFlag.ASCII'" : 1
"in"/"not : 1
"len(AFlag(3)) : 1
list(AFlag(3)) : 1
(AFlag.ONE : 1
AFlag.TWO)" : 1
(power : 1
two) : 5
("3" : 1
"dup2" : 1
"FD_CLOEXEC" : 2
515**-style : 1
bpo-44258.) : 1
"isinstance(some_fraction : 1
bpo-44547.) : 1
argument.: : 1
@singledispatch : 2
fun(arg : 2
verbose=False): : 12
print("Let : 2
say," : 2
@fun.register : 7
_(arg: : 7
print("Strength : 3
eh?" : 3
Union[list : 2
set] : 2
print("Enumerate : 3
this:") : 3
enumerate(arg): : 3
elem) : 3
bpo-46014.) : 1
"hashlib.blake2b()" : 1
"hashlib.blake2s()" : 1
libb2 : 2
bpo-47095.) : 1
*tiny_sha3* : 1
*Keccak : 1
Package* : 1
bpo-47098.) : 1
gh-89313.) : 1
"getmembers_static()" : 2
bpo-30533.) : 1
"ismethodwrapper()" : 1
bpo-29418.) : 1
"FrameInfo" : 11
"Traceback" : 10
(backwards : 1
tuple*-like : 1
interfaces) : 1
gh-88116.) : 1
"getLevelNamesMapping()" : 1
"'CRITICAL'") : 2
"50" : 1
Andrei : 1
Kulakovin : 1
gh-88024.) : 1
"SocketHandler.createSocket()" : 1
Kirill : 1
Pinchuk : 1
gh-88457.) : 1
Gideon : 1
bpo-45917.) : 1
"math.cbrt()": : 1
Ajith : 1
Ramachandran : 1
bpo-44357.) : 1
"math.pow()" : 2
"math.pow(0.0 : 1
"math.pow(-0.0 : 1
bpo-44339.) : 1
bpo-46917.) : 2
bpo-44019.) : 1
"BCryptGenRandom()" : 3
"CryptGenRandom()" : 2
bpo-44611.) : 1
separator: : 3
"altsep" : 1
Kawasima : 1
bpo-22276 : 1
bpo-33392.) : 1
Jacobs : 1
bpo-433030.) : 1
bpo-46245.) : 1
Klausner : 1
bpo-30512.) : 1
bpo-29980.) : 1
bpo-44491.) : 1
Collation : 2
"create_collation()" : 1
"sqlite3.ProgrammingError" : 1
bpo-44688.) : 1
"sqlite_errorcode" : 1
"sqlite_errorname" : 1
bpo-16379 : 1
bpo-24139.) : 1
bpo-45243.) : 1
bpo-45613.) : 1
handler" : 2
bpo-45828.) : 1
bpo-44092.) : 1
bpo-41930.) : 1
bpo-34916.) : 1
bpo-24905.) : 1
"get_identifiers()" : 1
"is_valid()" : 1
Kehoe : 1
gh-90465.) : 1
"exc_info()" : 4
"sys.exc_info()[1]") : 1
bpo-46328.) : 1
"sys.flags.safe_path" : 1
(*posix_venv* : 2
*venv*) : 1
*nt_venv*) : 1
bpo-45413.) : 2
"SpooledTemporaryFile" : 4
gh-70363.) : 1
bpo-41710.) : 1
(10^-9 : 1
"select()" : 21
microsecond : 16
(10^-6 : 1
bpo-21302.) : 1
bpo-21302 : 1
bpo-45429.) : 1
gh-91827.) : 1
bpo-44569.) : 1
bpo-33809.) : 1
confirm : 5
gh-90633.) : 1
inferred : 22
gh-90572.) : 1
gh-90638.) : 1
Samodya : 1
Abeysiriwardane : 1
gh-89026.) : 1
bpo-43923.) : 1
gh-91154.) : 1
gh-90500.) : 1
introspecting : 3
gh-89263.) : 1
Badarasco : 1
gh-88970.) : 1
("Tuple[()]") : 1
"get_args(Tuple[()])" : 1
gh-91137.) : 1
Loosen : 1
"typing._type_check" : 1
gh-90802.) : 1
Rosenstein : 1
gh-85542.) : 1
gh-90353.) : 1
gh-90711.) : 1
gh-90729.) : 1
bpo-45190) : 1
bpo-45046.) : 1
bpo-47074.) : 1
"ZipFile"'s : 1
bpo-28080.) : 1
Ezeh : 1
gh-49083.) : 1
"stem" : 2
"suffix" : 4
"suffixes" : 1
gh-88261.) : 1
*f-string* : 3
bpo-28307.) : 1
("//") : 1
tuned : 2
gh-90564.) : 1
gh-68264.) : 1
Resizing : 4
speeding : 5
≈15% : 1
comprehension*s : 1
gh-91165.) : 1
(23% : 1
smaller) : 1
bpo-46845.) : 1
"asyncio.DatagramProtocol" : 1
≈60 : 1
msoxzw : 1
gh-91487.) : 1
"comb()" : 1
"perm()" : 1
≈10 : 1
*k*) : 2
bpo-37295.) : 1
"mean()" : 4
"variance()" : 4
"stdev()" : 3
gh-90415.) : 1
bpo-44987.) : 1
pyperformance : 7
Unmarshal : 1
Evaluate : 8
"frozen" : 8
bytecode) : 2
10-15% : 1
short-running : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
optimizations: : 1
Streamlined : 2
re-using : 2
Frames : 2
Old-style : 1
"inspect.currentframe()" : 1
3-7% : 1
bpo-44590.) : 1
"jumps" : 1
1.7x : 1
deeper : 12
"sys.setrecursionlimit()") : 1
1-3% : 1
bpo-45256.) : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
659** : 2
stability* : 1
cases/types : 1
outperform : 1
*inline : 1
caching* : 1
specializer : 1
superinstruction : 1
specialize : 4
"hot" : 1
(executed : 2
times) : 4
wasting : 2
run-once : 1
de-specialize : 1
Brunthaler : 1
Sweeney.) : 1
+-----------------+----------------------+---------------------------------------------------------+---------------------+---------------------+ : 10
Contributor(s) : 1
|=================|======================|=========================================================|=====================|=====================| : 1
Subscript : 3
10-25% : 2
"a[i] : 2
"f(arg)" : 1
"C(arg)" : 1
Load : 42
globals/builtins : 1
"o.attr" : 1
class/object's : 1
"o.meth()" : 1
"o.attr : 1
"*seq" : 1
8% : 1
specializes : 2
bpo-45947 : 1
bpo-45340 : 1
bpo-40116.) : 1
"Zero-cost" : 1
bpo-40222.) : 2
"re"'s : 1
gh-91404.) : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 2
practices; : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
spends : 1
workloads : 1
geometric : 4
slowed : 1
~~~~~~~~~~~~~~~~~~~~~~~~ : 5
exploring : 2
explores : 2
full-time : 1
Bloomberg : 1
LP : 1
part-time : 1
newly-added : 1
Populated : 2
"ASYNC_GEN_WRAP" : 1
co-routines : 1
caller-side : 1
"MAKE_CELL" : 1
"PUSH_EXC_INFO" : 1
+--------------------------------------+-------------------------------------+-------------------------------------------+ : 7
Opcode(s) : 2
|======================================|=====================================|===========================================| : 1
binary/in-place : 1
Decouples : 1
"DUP_TOP" : 1
"ROT_N" : 1
[3]; : 1
"TRUE" : 1
"FALSE" : 1
"NONE" : 2
"POP_JUMP_BACKWARD_IF_*" : 1
"NOT_NONE" : 1
"POP_JUMP_FORWARD_IF_*" : 1
"SETUP_WITH" : 1
"SETUP_ASYNC_WITH" : 1
"BEFORE_WITH" : 1
"MATCH_CLASS" : 1
"MATCH_KEYS" : 1
success/failure : 1
pushed : 20
gh-89874) : 1
"COPY_DICT_WITHOUT_KEYS" : 1
"POP_BLOCK" : 1
"SETUP_FINALLY" : 1
"pass-through" : 1
gh-89519.) : 1
(255 : 1
gh-81548.) : 1
bpo-44977.) : 1
+-----------------------+-----------------------+-----------------------+-----------------------+-----------------------+ : 5
bpo-47061 : 1
gh-68966.) : 1
bpo-47022.) : 1
bpo-47152.) : 1
"configparser.SafeConfigParser" : 1
"configparser.ParsingError.filename" : 1
"configparser.RawConfigParser.readfp()" : 1
bpo-45173.) : 1
"configparser.LegacyInterpolation" : 1
"configparser.BasicInterpolation" : 2
"configparser.ExtendedInterpolation" : 1
bpo-46607.) : 1
subdirectories: : 3
"importlib.resources.is_resource()" : 1
"importlib.resources.open_binary()" : 1
"importlib.resources.open_text()" : 1
"importlib.resources.read_text()" : 1
"importlib.resources.path()" : 1
gh-90817.) : 2
Stricter : 1
gh-91760.) : 1
gh-92728.) : 1
"turtle.settiltangle()" : 1
3.1; : 1
"turtle.tiltangle()" : 1
corrected) : 1
bpo-45837.) : 1
unplanned : 1
gh-92332.) : 1
gh-90224.) : 1
bpo-42255.) : 1
not-formally-documented : 1
"unittest.findTestCases()" : 1
"unittest.getTestCaseNames()" : 1
bpo-5846.) : 1
"sqlite3.enable_shared_cache()" : 1
"sqlite3.OptimizedUnicode()" : 1
+------------------------------+---------------------------------+-----------------+ : 16
|==============================|=================================|=================| : 1
"failUnless" : 1
"failIf" : 1
"failUnlessEqual" : 1
"failIfEqual" : 1
"failUnlessAlmostEqual" : 1
"failIfAlmostEqual" : 1
"failUnlessRaises" : 1
"assert_" : 1
"assertEquals" : 1
"assertNotEquals" : 1
"assertAlmostEquals" : 1
"assertNotAlmostEquals" : 1
"assertRegexpMatches" : 3
"assertRaisesRegexp" : 3
"assertNotRegexpMatches" : 3
"assertNotRegex()" : 5
"@asyncio.coroutine()" : 1
bpo-43216.) : 2
bpo-45129.) : 1
similarly-deprecated : 1
"binascii.a2b_hqx()" : 1
"binascii.b2a_hqx()" : 1
"binascii.rlecode_hqx()" : 1
"binascii.rldecode_hqx()" : 1
bpo-45085.) : 1
bpo-45124.) : 1
bpo-45132.) : 1
"NullTranslations.output_charset()" : 1
"NullTranslations.set_output_charset()" : 1
bpo-44235.) : 1
"Signature.from_builtin()" : 1
"Signature.from_function()" : 1
bpo-45320.) : 1
bpo-46483.) : 1
"MailmanProxy" : 1
bpo-23882.) : 1
bpo-46852.) : 1
Pythonically : 1
Natural : 1
Hue : 1
"Tools/scripts" : 3
newline" : 1
bpo-37330.) : 1
gh-93351) : 1
"asyncio.loop.set_default_executor()" : 1
bpo-43234.) : 1
"calendar": : 1
bpo-46659.) : 1
(శ్ : 1
రీనివాస్ : 1
రెడ్డి : 1
తాటిపర్తి) : 1
bpo-41137.) : 1
*population* : 6
"set"s : 1
"list"s : 1
bpo-40465.) : 1
shuffle; : 1
"random.random()" : 1
(its : 5
bpo-47066.) : 1
bpo-35859.) : 1
**Tier : 1
support** : 1
("wasm32-unknown-emscripten" : 1
browser) : 2
(WASI) : 2
("wasm32-unknown-wasi") : 1
Pyodide : 4
APIs; : 2
users/groups : 1
(Emscripten : 1
gh-84461 : 1
gh-90473; : 1
gh-95085) : 1
requires: : 1
bpo-46656 : 1
bpo-45440 : 1
bpo-46640.) : 1
bpo-46656.) : 1
bpo-46996.) : 1
libsqlite3 : 1
liblzma : 1
Egeberg : 1
bpo-45847 : 1
bpo-45747 : 1
bpo-45763.) : 1
Gilbert : 1
bpo-45433.) : 1
"thin" : 1
bpo-44340.) : 1
Freelists : 1
"--without-freelists" : 1
bpo-45522.) : 1
bpo-45548 : 1
bpo-45570 : 1
bpo-45571 : 1
bpo-43974.) : 1
"TCLTK_CFLAGS" : 1
"TCLTK_LIBS" : 1
"--with-tcltk-includes" : 1
libs" : 1
removed.On : 1
"tcl.pc" : 1
"tk.pc"; : 1
"TCLTK_LIBS="-ltk8.5 : 1
-ltkstub8.5 : 1
-ltcl8.5"" : 1
"Misc/rhel7" : 1
".pc" : 1
"SIZEOF_VOID_P : 1
"PC/pyconfig.h" : 1
bpo-45569.) : 1
bpo-42035.) : 2
bpo-43931.) : 1
ABI: : 2
"PyBuffer_CopyData()" : 1
"PyBuffer_IsContiguous()" : 3
"PyBuffer_FillContiguousStrides()" : 2
"PyBuffer_FillInfo()" : 4
"bf_getbuffer" : 3
"bf_releasebuffer" : 4
bpo-45459.) : 1
"PyType_GetModuleByDef" : 3
"PyCMethod") : 1
bpo-46613.) : 1
bpo-46906.) : 1
bpo-46343.) : 1
"PyConfig.safe_path" : 2
>=3.11 : 1
670** : 1
gh-89653.) : 1
steals : 6
field) : 5
bpo-46608.) : 1
"_PyFrameEvalFunction()" : 1
"_PyInterpreterFrame*" : 2
"PyFrameObject*" : 2
"exception_table" : 1
bpo-46841 : 1
gh-92154 : 1
gh-94936.) : 1
mytype_dealloc(mytype : 2
*p) : 39
PyObject_GC_UnTrack(p); : 2
Py_TRASHCAN_SAFE_BEGIN(p); : 1
Py_TRASHCAN_SAFE_END : 1
Py_TRASHCAN_BEGIN(p : 1
mytype_dealloc) : 1
(credit: : 1
"mypy" : 1
codebase): : 1
CPy_TRASHCAN_BEGIN(op : 2
dealloc) : 3
Py_TRASHCAN_BEGIN(op : 1
CPy_TRASHCAN_END(op) : 2
Py_TRASHCAN_SAFE_BEGIN(op) : 1
Py_TRASHCAN_SAFE_END(op) : 1
bpo-44263.) : 1
bpo-43908) : 1
new_type" : 1
"Py_SET_TYPE(obj : 1
new_type)": : 1
!defined(Py_SET_TYPE) : 1
_Py_SET_TYPE(PyObject : 1
*ob : 4
ob->ob_type : 1
Py_SET_TYPE(ob : 1
_Py_SET_TYPE((PyObject*)(ob) : 1
new_size" : 1
"Py_SET_SIZE(obj : 1
new_size)": : 1
!defined(Py_SET_SIZE) : 1
_Py_SET_SIZE(PyVarObject : 1
ob->ob_size : 1
Py_SET_SIZE(ob : 1
_Py_SET_SIZE((PyVarObject*)(ob) : 1
bpo-45434.) : 2
"code.h" : 1
bpo-46007.) : 1
gh-93937.) : 1
"f_back": : 1
"f_blockstack": : 1
"f_builtins": : 1
"f_code": : 1
"f_gen": : 1
"f_globals": : 1
"f_iblock": : 1
"f_lasti": : 1
"f_lineno": : 1
"f_locals": : 1
"f_stackdepth": : 1
"f_state": : 1
(renamed : 2
"f_frame.f_state") : 1
"f_trace": : 1
"f_trace_lines": : 1
"PyObject_GetAttrString((PyObject*)frame : 2
"f_trace_lines")" : 1
"f_trace_opcodes": : 1
"f_trace_opcodes")" : 1
"f_localsplus": : 1
"f_frame.localsplus") : 1
"f_valuestack": : 1
Debuggers : 1
older: : 4
0x030900B1 : 3
PyCodeObject* : 1
PyFrame_GetCode(PyFrameObject : 1
*frame) : 11
Py_INCREF(frame->f_code); : 1
frame->f_code; : 1
PyFrameObject* : 2
PyFrame_GetBack(PyFrameObject : 1
Py_XINCREF(frame->f_back); : 1
frame->f_back; : 1
pythoncapi_compat : 2
members: : 6
"frame": : 1
bpo-40429) : 1
"tracing": : 1
bpo-43760) : 1
"recursion_depth": : 1
"(tstate->recursion_limit : 1
tstate->recursion_remaining)" : 1
"stackcheck_counter": : 1
PyThreadState_GetFrame(PyThreadState : 1
*tstate) : 16
Py_XINCREF(tstate->frame); : 1
tstate->frame; : 1
0x030B00A2 : 1
PyThreadState_EnterTracing(PyThreadState : 2
tstate->tracing++; : 1
0x030A00A1 : 2
tstate->cframe->use_tracing : 2
tstate->use_tracing : 2
PyThreadState_LeaveTracing(PyThreadState : 2
use_tracing : 1
(tstate->c_tracefunc : 1
|| : 4
tstate->c_profilefunc : 1
tstate->tracing--; : 1
use_tracing; : 2
Distributors : 1
"PySys_GetObject()" : 2
gh-88279.) : 1
"ob_shash" : 1
"PyBytesObject" : 5
"PyObject_Hash()" : 3
bpo-46864.) : 1
"PyUnicode_GetSize()" : 2
"PyUnicode_IS_COMPACT()" : 1
"PyUnicode_IS_READY()" : 1
"PyUnicode_READY()" : 4
"Py_UNICODE_WSTR_LENGTH()" : 1
"_PyUnicode_AsUnicode()" : 1
"PyUnicodeObject" : 2
"PyFrame_BlockSetup()" : 1
"PyFrame_BlockPop()" : 1
bpo-45412.) : 2
bpo-45440.) : 1
bpo-45474.) : 1
bpo-40170.) : 1
"PyUnicode_Encode()" : 1
"PyUnicode_EncodeASCII()" : 1
"PyUnicode_EncodeLatin1()" : 1
"PyUnicode_EncodeUTF8()" : 1
**migration : 1
guidance** : 1
bpo-44029.) : 1
polishing : 1
benefited : 1
""ab" : 1
databases.. : 1
sets.Set([1,2,3]) : 3
Set([1 : 7
3]) : 7
S.add(5) : 1
S.remove(3) : 1
"union()" : 3
"intersection()" : 3
methods; : 7
"union_update()" : 1
"intersection_update()" : 3
S1 : 7
S2 : 6
sets.Set([4,5,6]) : 1
S1.union(S2) : 1
6]) : 6
S1.intersection(S2) : 1
Set([]) : 2
S1.union_update(S2) : 1
("^") : 1
ungainly : 1
"symmetric_difference_update()" : 2
sets.Set([1,2,3,4]) : 1
sets.Set([3,4,5,6]) : 1
S1.symmetric_difference(S2) : 1
"issubset()" : 2
"issuperset()" : 2
sets.Set([2,3]) : 1
S2.issubset(S1) : 1
S1.issubset(S2) : 1
S1.issuperset(S2) : 1
Martelli : 2
present; : 7
2.2" : 2
".next()" : 1
2.3; : 1
alphanumerics : 6
Suzuki : 1
Hisao : 1
explicitly; : 2
amk@nyman:~/src/python$ : 2
-l : 26
/tmp/example.zip : 2
Archive: : 2
8467 : 4
11-26-02 : 2
22:30 : 2
jwzthreading.py : 2
(#1 : 2
19:54:32) : 2
sys.path.insert(0 : 4
'/tmp/example.zip') : 1
jwzthreading : 2
jwzthreading.__file__ : 2
'/tmp/example.zip/jwzthreading.py' : 1
"*.pyo" : 1
"/tmp/example.zip/lib/" : 1
"lib/" : 2
273** : 4
Ahlstrom : 2
Traditionally : 5
inadequate : 1
"os.getcwdu()" : 2
"os.path.supports_unicode_filenames" : 1
277** : 1
Hodgson; : 1
Hodgson : 1
irritation : 1
linefeed : 6
(ASCII : 10
13) : 3
two-character : 4
"'rU'" : 2
--without-universal-newlines" : 1
"enumerate(thing)" : 1
*thing* : 3
thing[0])" : 1
thing[1])" : 1
thing[2])" : 1
range(len(L)): : 1
enumerate(L): : 1
279** : 1
address; : 1
"server" : 15
"server.auth" : 3
"server.network" : 2
verbosity : 29
"setLevel()" : 6
"warning()" : 8
"(msg : 2
"msg : 4
logging.exception('Problem : 1
recorded') : 1
ERROR:root:Problem : 1
"getLogger(name)" : 1
"getLogger(None)" : 1
logging.getLogger('server') : 1
log.info('Listening : 1
log.critical('Disk : 1
full') : 1
"root" : 10
"propagate" : 7
told : 5
"Handler" : 14
"Formatter" : 32
282** : 4
Mick; : 1
type.) : 1
"bool"; : 1
bool(1) : 1
bool(0) : 1
bool([]) : 1
bool( : 1
(1,) : 3
Booleans : 7
hasattr(obj : 4
'append') : 1
wonder : 3
multiplies : 1
type- : 6
285** : 2
sentence: : 1
spell : 1
"'True'" : 1
"'False'" : 1
(raising : 6
"UnicodeError") : 1
(skipping : 1
character) : 17
"codecs.register_error()" : 5
"codecs.lookup_error()" : 1
framework: : 1
293** : 1
**register** : 1
&c. : 1
*classifiers* : 2
Trove-style : 1
classify : 1
classifiers : 8
"Quixote" : 1
"0.5.1" : 1
framework" : 1
(hasattr(core : 1
'setup_keywords') : 1
'classifiers' : 1
core.setup_keywords): : 1
kw['classifiers'] : 1
['Topic : 1
:: : 51
WWW/HTTP : 1
Content' : 4
'Environment : 3
Input/Output : 2
(Daemon)' : 1
'Intended : 5
Audience : 5
Developers'] : 1
core.setup(**kw) : 1
--list-classifiers" : 1
301** : 2
"iu" : 2
predecessors : 6
McMillan's : 1
Importer : 1
"find_module(fullname : 1
path=None)" : 1
*fullname* : 13
"distutils.core" : 6
"load_module(fullname)" : 1
Pseudo-code : 1
(simplified : 1
bit; : 2
mp : 3
sys.meta_path: : 2
mp(fullname) : 1
loader.load_module(fullname) : 2
sys.path: : 1
sys.path_hooks: : 1
hook(path) : 1
ImportError: : 8
importer.find_module(fullname) : 1
deceptively : 1
glance: : 1
Costs,150,200,3.95 : 1
"line.split(',')": : 1
toss : 1
complicated: : 1
"Costs",150,200,3.95,"Includes : 1
sundry : 1
items" : 2
simpler: : 1
open('datafile' : 1
csv.reader(input) : 1
"reader()" : 2
dialects : 6
registered; : 2
Excel : 2
"csv.writer" : 1
succession : 1
305** : 2
Altis : 1
Wells : 1
compactly; : 1
307** : 4
"pickle.dumps()" : 1
text-or-binary : 1
text-mode : 7
2.3-specific : 1
"pickle.HIGHEST_PROTOCOL" : 1
fanciest : 1
"__safe_for_unpickling__" : 1
audited : 2
ripped : 1
codes; : 1
Ever : 3
"stride" : 1
"L[1:10:2]" : 1
"L[:-1:1]" : 1
"L[::-1]" : 1
shortcoming : 1
indexes: : 1
L[::2] : 1
Negative : 13
L[::-1] : 1
s='abcd' : 1
s[::2] : 1
'ac' : 1
s[::-1] : 1
'dcba' : 1
range(3) : 1
replacing: : 1
range(4) : 2
a[::2] : 5
-1] : 1
[0,1,2] : 1
Deletion : 8
range(10).__getitem__(slice(0 : 1
subscripts: : 1
range(10)[slice(0 : 1
"indices(length)" : 1
"(start : 4
step)" : 6
"indices()" : 1
of-bounds : 1
innocuous : 1
welter : 1
details!) : 1
FakeSeq: : 1
calc_item(self : 1
i): : 2
item): : 1
isinstance(item : 3
slice): : 2
item.indices(len(self)) : 1
FakeSeq([self.calc_item(i) : 1
range(*indices)]) : 1
self.calc_item(i) : 1
"isinstance(int(expression) : 1
"sum(iterable : 1
start=0)" : 2
Martelli.) : 1
"list.insert(pos : 1
*pos* : 25
"list.index(value)" : 1
"pop(key[ : 1
*default*])" : 1
{1:2} : 1
{1: : 3
d.pop(4) : 1
d.pop(1) : 2
'pop(): : 1
empty' : 1
"dict.fromkeys(iterable : 1
(Patches : 1
black=4) : 1
{'blue': : 1
'black': : 1
types.ModuleType('abc','docstring') : 1
m.__doc__ : 1
'docstring' : 1
"-Walways::PendingDeprecationWarning::" : 1
string-based : 2
file_obj" : 1
C3 : 4
paper : 5
Linearization : 1
Dylan" : 1
Simionato's : 1
Order" : 1
https://mail.python.org/pipermail/python- : 1
dev/2002-October/029035.html : 1
"sys.setcheckinterval(N)" : 1
s.__class__ : 2
'socket'> : 1
'_socket.socket'> : 1
old- : 1
*Y* : 5
changed; : 6
'ab' : 8
'abcd' : 5
'ad' : 1
starts; : 1
"strip()" : 1
"lstrip()" : 1
"rstrip()" : 1
'.strip() : 3
'><><abc<><><>'.strip('<>') : 1
'><><abc<><><>\n'.strip('<>') : 1
'abc<><><>\n' : 1
u'\u4000\u4001abc\u4000'.strip(u'\u4000') : 1
u'\u4001abc' : 1
Brunning : 2
"zfill()" : 3
'45'.zfill(4) : 1
'0045' : 1
'12345'.zfill(4) : 1
'12345' : 1
'goofy'.zfill(6) : 1
'0goofy' : 1
basestring)" : 1
Interned : 2
garbage- : 2
Tirosh.) : 1
faster; : 1
Multiplication : 4
Karatsuba : 2
O(n*n) : 1
grade-school : 1
"SET_LINENO" : 3
xrange(n)" : 1
range(n)" : 1
rearrangements : 1
hotspots : 1
changes.) : 1
Orendorff.) : 1
4.1.6 : 1
PyBSDDB : 2
transactional : 1
"bsddb185" : 1
automatically; : 5
"db2pickle.py" : 1
"pickle2db.py" : 1
bz2-compressed : 1
"zlib"-compressed : 1
*depends* : 4
"sampmodule.c" : 1
"sample.h" : 2
Extension("samp" : 1
sources=["sampmodule.c"] : 1
depends=["sample.h"]) : 1
"CPP" : 1
Weber) : 1
"gc.get_referents(object)" : 1
"gnu_getopt()" : 1
GNU-style : 2
non-option : 8
getopt.getopt(['-f' : 1
'filename' : 2
'output' : 3
'-v'] : 2
'f:v') : 2
([('-f' : 2
'filename')] : 1
['output' : 1
'-v']) : 1
getopt.gnu_getopt(['-f' : 1
'filename') : 1
('-v' : 1
'')] : 2
['output']) : 1
Åstrand.) : 1
grp.getgrnam('amk') : 1
g.gr_name : 1
g.gr_gid : 1
('amk' : 1
500) : 1
exceeding : 1
*k* : 29
"heap[k] : 4
heap[2*k+1]" : 2
heap[2*k+2]" : 2
O(lg : 1
n) : 30
https://xlinux.nist.gov/dads//HTML/priorityque.html : 1
structure.) : 1
"heappush()" : 4
"heappop()" : 4
1]: : 1
heapq.heappush(heap : 2
item) : 7
heapq.heappop(heap) : 3
O'Connor.) : 1
IDLEfork : 1
(http://idlefork.sourceforge.net) : 1
"idlelib" : 2
Tino : 1
Lange.) : 1
ML : 3
"itertools.ifilter(predicate : 1
iterator)" : 1
"predicate()" : 1
"itertools.repeat(obj : 1
"degrees(rads)" : 1
"radians(degs)" : 1
"math.sin()" : 2
"math.cos()" : 1
"math.log()" : 1
"e" : 13
("getpgid()" : 1
"killpg()" : 1
"lchown()" : 1
"loadavg()" : 1
"major()" : 1
"makedev()" : 1
"minor()" : 1
"mknod()") : 1
Denis : 1
Otkidach.) : 1
"*stat()" : 1
stamps : 9
"stat_result" : 8
2.2) : 2
os.stat("/tmp").st_mtime : 2
1034791200 : 1
os.stat_float_times(True) : 1
1034791200.6335014 : 1
confronted : 3
per-use : 1
never-documented : 1
"linuxaudiodev" : 3
drivers : 3
tidied : 1
FitzRoy-Dale.) : 1
"buffer_text" : 4
"sample(population : 1
"len(population)" : 1
['Mo' : 1
'Tu' : 2
'We' : 2
'Th' : 2
'Fr' : 3
'St' : 3
'Sn'] : 2
random.sample(days : 4
Choose : 4
['St' : 1
'Sn' : 2
'Th'] : 2
['Tu' : 1
'Mo' : 2
['We' : 1
"random.py" : 1
"sample : 6
population" : 1
random.sample(xrange(1,10000,2) : 1
nos : 1
10000 : 4
[3407 : 1
3805 : 1
1505 : 1
7023 : 1
2401 : 1
2267 : 1
9733 : 1
3151 : 1
8083 : 1
9195] : 1
studied : 2
"get_history_item()" : 1
"get_current_history_length()" : 1
"redisplay()" : 1
"rexec" : 5
"Bastion" : 1
(Sticking : 1
repeat: : 2
immediately.) : 1
AES : 2
"move(src : 1
dest)" : 1
"settimeout(t)" : 1
*t* : 18
Subsequent : 9
Gilfix : 1
collaborative : 1
action.) : 1
(SSL) : 1
"PYTHON_API_VERSION" : 3
"sys.api_version" : 1
**tar**-format : 1
"wrap(text : 1
width)" : 2
"fill(text : 1
reformatted : 2
"fill()" : 8
"wrap()" : 7
whit : 3
defy : 3
augury: : 3
textwrap.wrap(paragraph : 1
60) : 2
["Not : 1
providence : 2
sparrow : 2
'tis : 2
come; : 2
it" : 1
textwrap.fill(paragraph : 1
35) : 2
now; : 1
come: : 1
fine-tuning : 4
companion : 3
"dummy_thread" : 1
do-nothing : 3
thread-aware : 3
*don't* : 3
run) : 2
top: : 1
_threading : 2
dummy_threading : 1
"_threading" : 2
magically : 2
threads; : 3
"timeit.py" : 1
"unicode()" : 1
timer1 : 1
timeit.Timer('unicode("abc")') : 1
timer2 : 1
timeit.Timer('"abc" : 1
u""') : 1
trials : 1
timer1.repeat(repeat=3 : 1
number=100000) : 6
timer2.repeat(repeat=3 : 1
laptop : 1
outputs: : 2
[0.36831796169281006 : 1
0.37441694736480713 : 1
0.35304892063140869] : 1
[0.17574405670166016 : 1
0.18193507194519043 : 1
0.17565798759460449] : 1
"Tix" : 4
thread-enabled : 1
Tcl's : 4
created; : 6
panic : 1
/python-dev/2002-December/031107.html : 1
"_tkinter.Tcl_Obj" : 2
"wantobjects()" : 1
"tkapp" : 2
will) : 1
Tkinter.wantobjects : 1
"DictMixin" : 1
UserDict : 1
SeqDict(UserDict.DictMixin): : 1
"""Dictionary : 1
lookalike : 1
lists.""" : 1
self.keylist : 1
self.valuelist : 1
self.keylist.index(key) : 3
self.valuelist[i] : 2
__setitem__(self : 4
self.keylist.append(key) : 1
self.valuelist.append(value) : 1
__delitem__(self : 3
self.keylist.pop(i) : 1
self.valuelist.pop(i) : 1
keys(self): : 1
list(self.keylist) : 1
SeqDict() : 1
dir(s) : 2
['__cmp__' : 1
'__module__' : 5
'get' : 1
'has_key' : 1
'iteritems' : 1
'iterkeys' : 1
'itervalues' : 1
'keylist' : 1
'keys' : 1
'popitem' : 1
'setdefault' : 1
'update' : 1
'valuelist' : 1
'values'] : 1
nil : 1
Nil : 1
*allow_none* : 8
"Marshaller" : 1
program) : 4
Pointing : 1
pydoc- : 1
(RFCs : 1
3454 : 1
3490 : 1
3491 : 1
3492) : 1
"idna" : 3
ASCII-compatible : 7
(ACE) : 1
>{}>{}> : 1
u"www.Alliancefrançaise.nu".encode("idna") : 1
'www.xn--alliancefranaise-npb.nu' : 1
ACE : 8
"ftplib") : 1
names; : 10
"Host" : 1
"mkstringprep" : 1
"punycode" : 2
calendars : 7
year; : 1
hour : 38
"datetime.date(year=1972 : 1
month=10 : 1
day=15)" : 1
"date.today()" : 3
now.isoformat() : 1
'2002-12-30T21:27:03.994956' : 1
now.ctime() : 1
'Mon : 3
21:27:03 : 1
2002' : 5
now.strftime('%Y : 1
%b') : 1
'2002 : 1
Dec' : 1
datetime.datetime(2002 : 1
827738) : 2
d.replace(year=2001 : 1
12) : 15
datetime.datetime(2001 : 1
"isoformat()") : 1
Optik) : 1
OptionParser : 29
OptionParser() : 3
op.add_option('-i' : 1
'--input' : 1
type='string' : 1
dest='input' : 1
help='set : 2
filename') : 1
op.add_option('-l' : 1
'--length' : 1
type='int' : 2
dest='length' : 1
"parse_args()" : 39
op.parse_args(sys.argv[1:]) : 1
opt.py : 4
<Values : 2
0x400cad4c: : 1
{'input': : 2
'length': : 2
None}> : 1
['arg1'] : 1
--input=data : 1
--length=4 : 1
0x400cad2c: : 1
4}> : 1
-iINPUT : 1
--input=INPUT : 1
-lLENGTH : 1
--length=LENGTH : 1
Getopt : 1
Pymalloc : 2
"--without-pymalloc" : 1
consolidated : 1
undistinguished : 1
"raw : 1
memory" : 4
family: : 1
"object : 2
biased : 5
allocations: : 3
"PyObject_Del()" : 3
"Misc/pymemcompat.h" : 1
https://hg.python.org/cpython/file/default/Objects/obmalloc.c : 1
proven : 3
"--with-cycle-gc" : 1
("libpython2.3.so") : 1
Ondrej : 1
Palkovsky.) : 1
"DL_EXPORT" : 1
"DL_IMPORT" : 1
"PyAPI_FUNC" : 1
"PyAPI_DATA" : 1
"PyArg_NoArgs()" : 1
pre-2.2 : 1
"PyArg_ParseTuple(args : 1
"H" : 5
"I" : 7
"K" : 4
"PyObject_DelItemString(mapping : 1
*key)" : 1
"PyObject_DelItem(mapping : 1
PyString_New(key))" : 1
exponentially : 1
"Lib/test/test_bufio.py" : 1
57 : 3
measurement) : 1
"METH_CLASS" : 1
"METH_STATIC" : 1
"'__module__'" : 2
key; : 3
EMX : 5
POSIX-like : 1
succeeds; : 1
Age : 1
weaklinked : 1
Jansen.) : 1
"Misc/RPM/" : 1
(http://www.atheos.cx/) : 1
OpenVMS : 1
514 : 2
"all : 2
*foo*." : 1
("'-'") : 1
"remove : 1
resource." : 1
'"-uall,-bsddb"' : 1
mists : 1
"pdb") : 1
-O" : 2
"PyCode_Addr2Line(f->f_code : 1
f->f_lasti)" : 1
nifty : 1
"jump" : 2
Richie : 1
Hindle.) : 1
whatever) : 3
"0xffffffff" : 1
"~(1 : 1
(bit : 1
"0xffffffffL : 1
&~(1L<<31)" : 1
"get_distutil_options()" : 1
{'sources': : 1
'foo.c' : 1
...} : 2
hasattr(core : 1
'get_distutil_options'): : 1
kw['depends'] : 1
['foo.h'] : 1
Extension(**kw) : 1
Bauer : 1
Chermside : 1
Daniels : 1
Fraser : 1
Gerber : 1
MacIntyre : 1
Lalo : 1
Martins : 1
Netzer : 1
Nowak : 1
Francesco : 1
Ricciardi : 1
Suzi : 1
361** : 1
preparing : 4
redesign : 2
259 : 1
612 : 1
influenced : 2
far-ranging : 1
3.0-derived : 1
exc" : 1
future_builtins : 3
map" : 2
"sys.py3kwarning" : 1
"Py_Py3kWarningFlag" : 1
3xxx : 1
3000** : 1
3100** : 1
higher-numbered : 1
LaTeX : 7
customization; : 1
committee : 2
examined: : 1
Jira : 3
Launchpad : 1
Trac : 1
settled : 1
no-cost : 1
free-software : 1
projects; : 1
open-source : 4
administer : 1
surely : 1
edition : 8
Hosting : 1
Upfront : 1
Stellenbosch : 1
South : 4
Africa : 1
SourceForge; : 1
"https://svn.python.org/view/tracker/importer/" : 1
https://bugs.jython.org: : 1
https://roundup.sourceforge.io/ : 1
downloads : 2
https://svn.python.org/view/tracker/importer/ : 1
Löwis's : 1
1980s : 1
attractive : 2
publications : 1
destined : 3
landscape : 1
reams : 1
long-time : 1
SGML : 3
https://www : 1
.sphinx-doc.org/ : 1
concentrates : 2
HTML; : 1
(listed : 2
site) : 2
with_statement" : 1
enabled; : 2
2.5" : 2
VAR" : 1
("type : 1
traceback" : 1
occurred) : 2
cursor(self): : 1
commit(self): : 1
rollback(self): : 1
__enter__(self): : 7
__exit__(self : 7
db_transaction(connection): : 1
"closing()" : 1
302-style : 1
""site-packages"" : 1
"~/.local/" : 1
"%APPDATA%/Python" : 1
"lib/python2.6/site-packages" : 1
Unix/Mac : 1
"Python26 : 1
/site-packages" : 2
"PYTHONUSERBASE" : 3
"APPDATA" : 1
"PYTHONNOUSERSITE" : 3
synchronize : 15
"start()" : 25
strangely : 2
factorial(queue : 1
N): : 1
"Compute : 4
factorial." : 3
(N : 3
time.sleep(.05 : 1
N/4) : 1
1L : 2
N+1): : 2
queue.put(fact) : 1
Queue() : 9
Process(target=factorial : 1
args=(queue : 4
N)) : 1
p.start() : 16
p.join() : 12
queue.get() : 5
'Factorial' : 1
versa.) : 1
"Manager" : 2
"apply_async()" : 2
factorial(N : 2
dictionary): : 2
Pool(5) : 4
p.map(factorial : 1
39916800 : 2
51090942171709440000 : 2
8222838654177922817725562880000000 : 2
33452526613163807108170062053440751665152000000000 : 2
(Locking : 1
"Manager"'s : 1
"Lock()" : 1
"RLock()" : 1
"Semaphore()" : 1
locks.) : 1
dictionary[N] : 1
mgr : 1
Manager() : 3
mgr.dict() : 1
p.apply_async(factorial : 1
d)) : 3
sorted(d.items()): : 1
15511187532873822802242430164693032110632597200169861120000.. : 1
371** : 1
Oudkerk; : 1
supplemented : 2
("{" : 1
"}") : 1
Substitute : 2
"User : 2
ID: : 5
{0}".format("root") : 1
'User : 2
root' : 1
{uid} : 1
Last : 4
seen: : 4
{last_login}".format( : 1
uid="root" : 1
last_login : 1
"5 : 2
07:20") : 1
07:20' : 1
doubling : 2
dict: : 2
{{}}".format() : 1
"{0}" : 1
"{1}" : 1
'Platform: : 1
{0.platform}\nPython : 1
{0.version}'.format(sys) : 1
2.6a1+ : 1
(trunk:61261M : 1
20:29:41) : 1
4.0.1 : 1
(Apple : 1
Computer : 4
5367)]' : 1
'Content-type: : 2
{0[.mp4]}'.format(mimetypes.types_map) : 1
video/mp4' : 1
dictionary-style : 2
"[.mp4]" : 1
".mp4" : 1
controllable : 2
justify : 4
'{0:15} : 1
${1:>6}' : 1
fmt.format('Registration' : 1
'Registration : 1
35' : 1
fmt.format('Tutorial' : 1
'Tutorial : 1
50' : 2
fmt.format('Banquet' : 1
125) : 1
'Banquet : 1
125' : 1
nesting: : 1
'{0:{1}}' : 1
fmt.format('Invoice : 2
#1234' : 2
width) : 18
'Invoice : 2
#1234 : 2
specified: : 4
+------------------+----------------------------------------------+ : 5
Effect : 1
|==================|==============================================| : 1
Left-align : 1
Right-align : 1
Pad : 2
notation: : 2
'{0:g}'.format(3.75) : 1
'3.75' : 1
'{0:e}'.format(3.75) : 1
'3.750000e+00' : 1
sample: : 3
+-------+--------------------------------------------------------------------------+ : 10
lower-case : 5
Exponent : 2
fixed-point : 10
integers) : 2
Percentage : 2
Multiplies : 2
('f') : 1
specifier: : 2
__format__(self : 2
format_spec): : 1
isinstance(format_spec : 1
unicode): : 1
unicode(str(self)) : 1
str(self) : 1
format(75.6564 : 1
'75.66' : 1
Talin : 2
print(...)" : 1
print_function : 3
print('# : 1
entries' : 1
len(dictionary) : 1
print(*args : 1
sep=' : 3
end='\n' : 2
file=None) : 16
*args*: : 2
*sep*: : 1
*end*: : 1
*file*: : 1
3105** : 1
Wrong : 3
different: : 3
""ValueError"" : 1
(TypeError : 1
ValueError): : 1
ambiguous: : 2
Winter : 3
"b'string'" : 1
3.0's : 2
ways; : 2
"bytes([65 : 2
66 : 4
67])" : 2
"ABC"; : 1
12-byte : 1
bytes)" : 2
intends : 3
unicode_literals : 2
('\u751f\u3080\u304e\u3000\u751f\u3054' : 1
'\u3081\u3000\u751f\u305f\u307e\u3054') : 1
"PyStringObject" : 1
"PyBytesObject()" : 1
"PyBytes_FromStringAndSize()" : 2
bytearray([65 : 1
67]) : 1
bytearray(b'ABC') : 1
bytearray(u'\u21ef\u3244' : 1
'utf-8') : 2
bytearray(b'\xe2\x87\xaf\xe3\x89\x84') : 1
b[0] : 4
'\xe3' : 1
bytearray(b'\xe3\x87\xaf\xe3\x89\x84') : 1
unicode(str(b) : 1
u'\u31ef : 1
\u3244' : 1
"startswith()"/"endswith()" : 1
"find()"/"rfind()" : 1
bytearray('ABC') : 1
b.append('d') : 1
b.append(ord('e')) : 1
bytearray(b'ABCde') : 1
"PyByteArray_FromObject()" : 2
"PyByteArray_FromStringAndSize()" : 2
3112** : 1
Orendorff; : 1
imitate : 1
layered : 2
separates : 3
text- : 1
"RawIOBase" : 19
"readable()" : 3
"writable()" : 3
"seekable()" : 2
"BufferedIOBase" : 22
"raw" : 4
"BufferedWriter" : 10
"BufferedReader" : 9
write-only : 6
"BufferedRandom" : 7
"BufferedRWPair" : 4
TTYs : 1
unconnected : 2
"BytesIO" : 12
"TextIOBase": : 1
"TextIOBase" : 16
"buffer" : 29
releases.) : 1
forward- : 2
Verdone : 1
Doerwald : 1
Lownds : 1
numeric-processing : 1
"PyObject_GetBuffer(PyObject : 1
*view : 8
"PyBuffer_Release(Py_buffer : 1
*view)" : 1
"PyBUF_WRITABLE" : 7
"PyBUF_LOCK" : 1
"PyBUF_C_CONTIGUOUS" : 1
"PyBUF_F_CONTIGUOUS" : 1
(last : 2
fastest) : 2
Fortran- : 1
(first : 2
"z*" : 2
locked : 29
Banks; : 1
ABCs) : 1
"dictionary-style" : 1
vague : 1
"obj[1]" : 1
Does : 20
imply : 10
"obj[2] : 1
iterative : 2
distinctions : 2
ABC's : 5
Storage(collections.MutableMapping): : 1
Storage: : 1
collections.MutableMapping.register(Storage) : 1
"PrintableType" : 1
PrintableType.register(int) : 1
PrintableType.register(float) : 1
PrintableType.register(str) : 1
obey : 8
this; : 8
func(d): : 1
isinstance(d : 1
collections.MutableMapping): : 1
ValueError("Mapping : 1
%r" : 3
type-checking : 7
judicious : 1
"abc.ABCMeta" : 2
ABCMeta : 3
abstractmethod : 26
Drawable(): : 1
@abstractmethod : 14
draw(self : 2
scale=1.0): : 1
draw_doubled(self : 1
self.draw(x : 1
scale=2.0) : 1
Square(Drawable): : 1
scale): : 1
"Drawable" : 2
"draw_doubled()" : 2
"draw()" : 2
though; : 2
"@abstractmethod" : 2
implemented; : 2
Circle(Drawable): : 1
Circle() : 1
Circle : 1
draw : 10
"@abstractproperty" : 1
abstractproperty : 1
@abstractproperty : 1
readonly(self): : 1
self._x : 14
"readonly()" : 1
3119** : 5
Aranguren : 1
(base-8) : 1
"0o" : 6
"0O" : 1
(base-2) : 1
"0b" : 5
"0B" : 1
"0b": : 1
0o21 : 1
2*8 : 1
17) : 1
0b101111 : 1
47 : 3
oct(42) : 1
'052' : 1
future_builtins.oct(42) : 1
'0o52' : 1
bin(173) : 1
'0b10101101' : 1
base-8 : 1
(signalling : 1
string): : 2
('0o52' : 1
int('1101' : 1
int('0b1101' : 2
3127** : 1
Maupin; : 1
@foo : 1
@bar : 1
foo(bar(A)) : 1
3129** : 2
Scheme's : 3
Number)" : 2
"Complex" : 8
undergo : 1
number's : 1
conjugate : 3
"Real" : 5
"floor()" : 4
"trunc()" : 4
"Rational" : 4
"numerator" : 5
"denominator" : 6
rational-number : 2
"numbers.Rational".) : 1
"Integral" : 13
"<<" : 5
">>" : 8
3141** : 2
Guile : 1
R5RS : 1
Scheme : 3
forming : 3
"2/3" : 1
float(a) : 2
float(b) : 1
(0.66666666666666663 : 1
0.40000000000000002) : 1
Fraction(16 : 2
15) : 11
(2.5) : 1
.as_integer_ratio() : 3
(3.1415) : 1
(7074029114692207L : 1
2251799813685248L) : 1
(1./3) : 1
(6004799503160661L : 1
18014398509481984L) : 1
1./3 : 1
approximated; : 1
**exactly** : 1
"Demo/classes/" : 1
Chu : 1
however; : 1
bpo-2196.) : 1
f(**kw): : 1
sorted(kw) : 1
ud=UserDict.UserDict() : 1
ud['a'] : 1
ud['b'] : 1
f(**ud) : 1
bpo-1686487.) : 1
f(1,2,3 : 1
*(4,5,6) : 1
keyword=13) : 1
{'keyword': : 1
13} : 2
bpo-3473.) : 1
"next(iterator : 1
[default])" : 1
exhausted; : 1
bpo-2719.) : 1
(0,1,2,3,4,0,1,2) : 1
t.index(3) : 1
t.count(0) : 1
Hettinger) : 1
deleter : 4
x(self): : 6
@x.setter : 4
x(self : 5
@x.deleter : 2
@C.x.getter : 1
iterables: : 3
"difference()" : 2
s=set('1234567890') : 1
s.intersection('abc123' : 1
'cdf246') : 1
Intersection : 2
set(['2']) : 1
s.difference('246' : 1
'789') : 1
set(['1' : 1
'5']) : 1
"+inf" : 1
"-inf" : 6
Heimes; : 6
bpo-1635.) : 2
(bpo-1640) : 1
(bpo-3008) : 1
Floats : 1
"float.fromhex()" : 3
a.hex() : 1
'0x1.e000000000000p+1' : 1
float.fromhex('0x1.e000000000000p+1') : 1
b=1./3 : 1
b.hex() : 1
'0x1.5555555555555p-2' : 1
nicety: : 1
+0) : 1
"complex()" : 9
bpo-1507.) : 1
"__hash__ : 8
"hash(obj)" : 1
"Hashable" : 2
"id(obj)" : 1
"PyObject_HashNotImplemented()" : 6
bpo-2235.) : 1
Exception:" : 1
Austin; : 1
bpo-1537.) : 1
"gi_code" : 1
bpo-1473257.) : 1
bpo-1444529.) : 1
"complex(repr(cplx))" : 1
"complex('(3+4j)')" : 1
(3+4j) : 1
(bpo-1491866) : 1
Bengt : 1
Richter : 1
bpo-1193128.) : 1
pseudo-attributes : 1
(bpo-1591665) : 1
comprising : 3
"im_self" : 1
"__self__" : 9
"im_func" : 1
(Free : 1
Cannon; : 1
bpo-1631171.) : 1
Jacobs; : 1
bpo-1700288.) : 1
(To : 5
"tp_dict" : 7
bpo-1878 : 1
discussion.) : 1
bpo-1819.) : 1
breaks; : 1
"-J" : 1
Jython-specific : 1
JVM : 1
"sys.dont_write_bytecode" : 2
"<encoding>" : 1
"<encoding>:<errorhandler>" : 1
encoding's : 3
"latin-1"; : 1
*errorhandler* : 1
(Maintained : 1
Carlson; : 3
bpo-1736190 : 1
patch.) : 1
www.jcea.es/programacion/pybsddb.htm : 1
"bsddb.dbshelve" : 1
restricting : 3
Barnes.) : 1
"/cgi- : 1
bin/add.py?category=1" : 1
Fiori : 1
Nubis; : 1
bpo-1817.) : 1
"parse_qs()" : 2
"parse_qsl()" : 2
relocated : 1
(bpo-600362) : 1
Five : 1
"polar()" : 1
"rect()" : 1
"phase()" : 1
angle) : 1
revisions : 3
soundness : 1
(ulps) : 1
bpo-1381 : 1
"asinh()" : 2
"atanh()": : 1
"atan()" : 1
expanded; : 1
Annex : 8
'G' : 1
"namedtuple(typename : 1
fieldnames)" : 1
var_type : 1
collections.namedtuple('variable' : 1
size') : 2
size' : 2
var_type._fields : 1
('id' : 2
'size') : 1
var_type(1 : 1
'frequency' : 1
var[0] : 1
var.id : 1
var[2] : 1
var.type : 1
var._asdict() : 1
{'size': : 1
'type': : 1
'id': : 3
'name': : 7
'frequency'} : 1
var._replace(name='amplitude') : 1
variable(id=1 : 1
name='amplitude' : 1
size=4) : 2
"Decimal.as_tuple()" : 1
"sign" : 4
"exponent" : 3
*maxlen* : 4
parameter; : 6
deque's : 2
dq=deque(maxlen=3) : 1
dq : 3
deque([] : 1
maxlen=3) : 3
dq.append(1); : 1
dq.append(2); : 1
dq.append(3) : 1
deque([1 : 1
dq.append(4) : 1
deque([2 : 1
"httponly" : 3
Arvin : 1
Schnell; : 1
bpo-1638033.) : 1
"chgat()" : 1
Fabian : 1
Kreutz.) : 1
Boldface : 1
y=0,x=21 : 1
stdscr.chgat(0 : 1
curses.A_BOLD) : 1
"Textbox" : 6
*insert_mode* : 1
"%f" : 8
Montanaro; : 1
bpo-1158.) : 1
1.66 : 1
"log10()": : 1
Decimal(1).exp() : 3
Decimal("2.718281828459045235360287471") : 1
Decimal("2.7182818").ln() : 1
Decimal("0.9999999895305022877376682436") : 1
Decimal(1000).log10() : 1
Decimal("3") : 1
"as_tuple()" : 2
Batista.) : 5
"storlines()" : 1
Schwartz; : 1
bpo-1221598.) : 1
"functools"; : 1
(Patched : 1
bpo-1739906.) : 1
(bpo-1001604) : 1
"merge(iter1 : 1
iter2 : 3
list(heapq.merge([1 : 1
16])) : 1
16] : 2
"heappushpop(heap : 1
item)" : 3
*item* : 43
*heap* : 5
less-than : 3
less-than-or-equal : 1
"heapq"'s : 1
"httplib.HTTPConnection" : 1
"getmoduleinfo()" : 1
"getargs()" : 1
"isgenerator()" : 1
"isgeneratorfunction()" : 1
"isabstract()" : 1
"izip_longest(iter1 : 1
...[ : 1
fillvalue])" : 1
*fillvalue* : 4
tuple(itertools.izip_longest([1,2,3] : 1
[1,2,3,4,5])) : 1
((1 : 1
"product(iter1 : 1
[repeat=N])" : 1
list(itertools.product([1,2,3] : 1
[4,5,6])) : 1
*repeat* : 7
*N*-tuples : 1
returned: : 9
list(itertools.product([1,2] : 2
repeat=3)) : 1
*2N*-tuples : 1
[3,4] : 1
repeat=2)) : 1
"combinations(iterable : 1
sub-sequences : 2
list(itertools.combinations('123' : 2
[('1' : 3
'2') : 1
('1' : 3
'3') : 3
('2' : 2
'3')] : 2
list(itertools.combinations('1234' : 1
'4') : 2
'4')] : 1
"permutations(iter[ : 1
r])" : 1
iterable's : 5
list(itertools.permutations([1,2,3,4] : 1
"itertools.chain(*iterables)" : 1
"itertools.chain.from_iterable(iterable)" : 1
"chain()" : 3
list(itertools.chain.from_iterable([[1,2,3] : 1
[4,5,6]])) : 1
"FileHandler" : 16
"WatchedFileHandler" : 5
"emit()" : 11
*utc* : 2
(positive : 5
negative) : 8
Number) : 2
"math.copysign(1 : 1
-0.0)" : 3
Heimes.) : 9
"factorial()" : 1
bpo-2138.) : 1
"fsum()" : 1
Jean : 1
Brouwers : 1
bpo-2819.) : 1
"acosh()" : 1
"atanh()" : 1
hyperbolic : 14
"log1p()" : 1
*1+x* : 2
*e*) : 3
3141's : 1
754's : 1
"sqrt(-1.)" : 1
"sqrt(float('NaN'))" : 1
'divide-by- : 1
zero' : 1
'invalid' : 1
'overflow' : 1
bpo-711019 : 1
bpo-1640.) : 1
Lenton.) : 1
s.replace('old' : 1
'new') : 2
replacer : 1
operator.methodcaller('replace' : 1
'old' : 1
replacer('old : 1
wine : 2
bottles') : 1
'new : 3
bottles' : 1
Petrosyan.) : 1
lookups: : 1
inst_name : 1
operator.attrgetter( : 1
'__class__.__name__') : 1
inst_name('') : 1
inst_name(help) : 1
'_Helper' : 1
"fchmod(fd : 1
mode)" : 4
"fchown(fd : 1
gid)" : 2
"lchmod(path : 1
"lchflags()" : 1
"UF_IMMUTABLE" : 1
"UF_APPEND" : 1
Levinson.) : 1
"os.closerange(low : 1
high)" : 2
*low* : 14
*high* : 15
bpo-1663329.) : 1
Horcicka; : 1
bpo-1181.) : 1
"followlinks" : 3
(bpo-1273829) : 1
"splitext()" : 1
Unix's : 1
dot-files : 1
"os.path.splitext('.ipython')" : 1
"('.ipython' : 1
"('' : 2
'.ipython')" : 1
(bpo-1115886) : 1
"os.path.relpath(path : 1
start='.')" : 1
Barran; : 1
bpo-1339796.) : 1
"os.path.expandvars()" : 3
"%var%" : 2
bpo-957650.) : 2
"run" : 6
restarts : 2
Rocky : 1
Bernstein; : 1
bpo-1393667.) : 1
"pdb.post_mortem()" : 2
Batista; : 1
bpo-1106316.) : 1
"optimize()" : 1
pkgutil.get_data('test' : 1
'exception_hierarchy.txt') : 1
+-- : 20
StandardError : 1
Moore; : 1
bpo-2439.) : 1
"Parser" : 10
"buffer_size" : 1
Achim : 1
Gaedke; : 1
bpo-1137.) : 1
"PriorityQueue" : 2
queued : 17
"LifoQueue" : 3
2.6's : 2
Shawn : 1
Ligocki; : 1
bpo-1727780.) : 1
"triangular(low : 1
triangular : 2
Wladmir : 1
Laan : 1
bpo-1681432.) : 1
Schmitt; : 2
bpo-846388.) : 1
regex-specific : 1
Untrusted : 1
verifier : 1
Engine; : 1
bpo-3487.) : 1
"Completer.complete()" : 1
Quack; : 1
bpo-2250.) : 1
scheduler's : 1
"(time : 1
argument)" : 1
bpo-1861.) : 1
"epoll()" : 2
"kqueue()" : 2
"poll" : 1
"pollobj.modify(fd : 1
eventmask)" : 2
bpo-1657.) : 1
"ignore_patterns()" : 4
".svn" : 3
'~': : 1
shutil.copytree('Doc/library' : 1
'/tmp/library' : 1
ignore=shutil.ignore_patterns('*~' : 1
'.svn')) : 1
bpo-2663.) : 1
Integrating : 3
GTk+ : 1
waking : 1
"signal.set_wakeup_fd(fd)" : 1
"PySignal_SetWakeupFd()" : 1
monitored : 11
woken : 2
bpo-1583.) : 1
Schmitt.) : 1
"setitimer()" : 4
"getitimer()" : 2
wall-clock : 3
process+system : 1
bpo-2240.) : 1
2033**) : 1
agents : 2
(LMTP : 1
Leif : 1
Hedstrom; : 1
bpo-957003.) : 1
"SMTP.starttls()" : 1
3207** : 1
Fenner; : 1
bpo-829951.) : 1
TIPC : 6
(http://tipc.sourceforge.net/) : 1
non-IP-based : 1
clustered : 4
4- : 1
5-tuples : 7
Bertogli; : 1
bpo-1646.) : 1
connects : 11
address's : 2
"socket(socket.AF_INET : 1
inactivity : 1
Pomraning.) : 1
Pedro : 1
Werneck : 1
bpo-742598 : 1
bpo-1193577.) : 1
_Bool : 5
Remahl.) : 1
"terminate()" : 13
"kill()" : 5
"send_signal()" : 2
"SIGTERM" : 5
"float_info" : 1
"float.h" : 4
"mant_dig" : 2
mantissa) : 2
"epsilon" : 2
(smallest : 3
representable) : 2
bpo-1534.) : 2
"dont_write_bytecode" : 2
"verbose" : 6
"getsizeof()" : 3
results; : 4
"__sizeof__()" : 1
Schuppenies; : 1
bpo-2898.) : 1
"sys.getprofile()" : 1
"sys.gettrace()" : 1
bpo-1648.) : 1
(pax) : 3
POSIX.1-1988 : 4
(ustar) : 3
tar; : 1
tarfile.open("output.tar" : 1
format=tarfile.PAX_FORMAT) : 1
errors,; : 1
(Character : 1
PAX : 1
encoding.) : 1
"TarFile.add()" : 1
archived : 5
Gustäbel) : 1
"telnetlib.Telnet" : 1
"tempfile.NamedTemporaryFile" : 1
"delete=False" : 2
Miller; : 1
bpo-1537850.) : 1
on-disk : 8
Mitchell.) : 1
"NamedTemporaryFile" : 2
tempfile.NamedTemporaryFile() : 1
tmp: : 1
bpo-2021.) : 1
"test.test_support" : 1
"EnvironmentVarGuard()" : 1
"TransientResource" : 1
site: : 1
test_support.TransientResource(IOError : 1
errno=errno.ETIMEDOUT): : 1
urllib.urlopen('https://sf.net') : 1
"check_warnings()" : 3
"warning" : 8
(bpo-3781): : 1
test_support.check_warnings() : 1
wrec: : 1
warnings.simplefilter("always") : 2
str(wrec.message) : 1
outdated" : 1
len(wrec.warnings) : 1
"Multiple : 1
raised" : 1
beginnings : 1
"drop_whitespace=False" : 1
"""This : 1
whitespace.""" : 1
textwrap.fill(S : 2
width=15) : 2
drop_whitespace=False : 1
Dwayne : 1
Bailey; : 1
bpo-1581073.) : 1
"setDaemon()" : 1
"isDaemon()" : 1
camel- : 1
"activeCount()" : 1
"active_count()" : 1
3.x; : 1
(Carried : 1
bpo-2871.) : 1
"repeat(stmt : 1
number)" : 2
"timeit(stmt : 1
Demaine; : 1
bpo-1533909.) : 1
bpo-2906.) : 1
Gregor : 1
Lingl : 1
animation : 7
"delay()" : 2
"tracer()" : 3
"speed()" : 5
"undo()" : 4
roll : 5
reacting : 1
"turtle.cfg" : 8
turtle's : 19
(bpo-1513695) : 1
"urllib.urlopen()" : 1
"urllib.ftpwrapper" : 1
"urllib2.urlopen()" : 1
urllib2.urlopen("http://slow.example.com" : 1
timeout=3) : 1
urllib2.URLError: : 1
<urlopen : 1
out> : 1
5.1.0 : 1
bpo-3811.) : 1
"formatwarning()" : 3
"showwarning()" : 8
*line* : 18
bpo-1631171 : 1
re-implemented : 1
"catch_warnings()" : 2
(bpo-3781) : 1
*bind_and_activate* : 3
"allow_reuse_address" : 1
"server_bind()" : 3
"server_activate()" : 3
Parente; : 1
bpo-1599845.) : 1
"_send_traceback_header" : 1
"X-Exception" : 1
"X-Traceback" : 1
2007.) : 1
"xmlrpclib.DateTime" : 2
(bpo-1330538) : 2
bpo-2014) : 1
"<i8>" : 1
Riku : 1
Lindblad; : 1
bpo-2985) : 1
"extract()" : 6
zipfile.ZipFile('python-251.zip') : 1
/tmp : 1
z.extract('Python/sysmodule.c' : 1
'/tmp') : 1
z.extractall() : 1
McIntyre; : 1
bpo-467924.) : 1
Horler; : 1
bpo-1775025.) : 1
Borzenkov; : 1
bpo-1734346.) : 1
analyzers : 3
debugging: : 3
ast.parse(""" : 1
'abcdefghijklm': : 1
d[i : 1
i] : 2
ord(i) : 1
ord('a') : 2
ast.dump(t) : 1
Module(body=[ : 1
Assign(targets=[ : 2
Name(id='d' : 5
ctx=Store()) : 22
value=Dict(keys=[] : 1
values=[])) : 1
For(target=Name(id='i' : 1
iter=Str(s='abcdefghijklm') : 1
body=[ : 77
Subscript(value= : 1
ctx=Load()) : 77
slice= : 1
Index(value= : 1
BinOp(left=Name(id='i' : 1
op=Add() : 5
right=Name(id='i' : 1
ctx=Load()))) : 4
value= : 1
BinOp(left= : 2
Call(func= : 1
Name(id='ord' : 2
args=[ : 8
Name(id='i' : 1
keywords=[] : 2
starargs=None : 2
kwargs=None) : 2
op=Sub() : 1
right=Call(func= : 1
Str(s='a') : 1
kwargs=None)) : 1
right=Num(n=1))) : 1
orelse=[]) : 1
Print(dest=None : 1
values=[ : 5
nl=True) : 1
"literal_eval()" : 2
safely: : 1
'("a" : 1
{2:4 : 1
3:8 : 1
1:2})' : 1
ast.literal_eval(literal) : 1
8}) : 1
ast.literal_eval('"a" : 1
"b"') : 1
"NodeVisitor" : 3
repertoire : 4
3.0-compatible : 1
"ascii(obj)": : 1
"filter(predicate : 2
iterable)" : 2
iterable1 : 1
...)": : 1
"hex(value)" : 1
"oct(value)": : 1
(Javascript : 1
http://www.json.org : 1
{"spam": : 2
"parrot": : 2
42} : 3
in_json : 2
json.dumps(data) : 1
'{"parrot": : 1
"spam": : 1
"foo"}' : 1
json.loads(in_json) : 1
Decode : 31
Pretty-printing : 1
simplejson) : 1
XML-based : 1
Mac- : 1
data_struct : 2
dict(lastAccessed=datetime.datetime.now() : 1
categories=('Personal','Shared','Private')) : 1
plist_str : 1
plistlib.writePlistToString(data_struct) : 1
new_struct : 3
plistlib.readPlistFromString(plist_str) : 1
plistlib.writePlist(data_struct : 2
'/tmp/customizations.plist') : 1
plistlib.readPlist('/tmp/customizations.plist') : 1
read/writePlist : 1
sys.stdout) : 1
"c_bool" : 2
Remahl; : 1
bpo-1649190.) : 1
"from_buffer()" : 2
"from_buffer_copy()" : 2
LastError : 2
outset : 1
bpo-1798.) : 1
"use_errno=True" : 2
"DLL()" : 2
"set_errno()" : 1
"get_errno()" : 1
"OleDLL()" : 1
"WinDLL()" : 1
"use_last_error=True" : 1
"set_last_error()" : 1
"get_last_error()" : 1
"byref()" : 4
Janssen : 1
negotiated : 2
clients) : 1
"message" : 19
(3.0-warning : 3
3.0-warning : 1
"audiodev" : 1
"bgenlocations" : 1
"buildtools" : 1
"bundlebuilder" : 1
"Canvas" : 1
"compiler" : 1
"dircache" : 1
"fpformat" : 1
"gensuitemodule" : 1
"imageop" : 1
"imgfile" : 1
"mhlib" : 1
"mimetools" : 1
"multifile" : 1
"pure" : 1
"statvfs" : 2
"test.testall" : 1
"toaiff" : 1
"MimeWriter" : 1
"mimify" : 1
"fcntl.lockf()" : 1
"rgbimg" : 1
C89 : 3
years!) : 1
"memmove()" : 1
"strerror()" : 2
9.0) : 2
4-way : 2
"--with-universal- : 1
archs=[32-bit|64-bit|all]" : 1
(x86 : 1
PowerPC) : 1
(x86-64 : 1
PPC-64) : 1
"bsddb.db.api" : 1
Duncan : 1
Grisby.) : 1
3118 : 1
"PyFile_IncUseCount()" : 2
"PyFile_DecUseCount()" : 2
re-acquired : 2
deadlocks; : 1
"PyFloat_GetMax()" : 2
"PyFloat_GetMin()" : 2
"PyFloat_GetInfo()" : 2
""mant_dig"" : 1
""epsilon"" : 1
"PyComplex_AsCComplex()" : 1
bpo-1675423.) : 1
"PyOS_stricmp(char* : 1
char*)" : 1
"PyOS_strnicmp(char* : 1
Py_ssize_t)" : 1
"init*" : 1
"PyModule_AddStringMacro" : 1
"PyModule_AddIntMacro()" : 1
"Py_Size()" : 1
"Py_Type()" : 1
"Py_Refcnt()" : 1
mixed-case : 1
(bpo-1629) : 1
bpo-1530959.) : 1
"free_list" : 1
"numfree" : 1
"Py<typename>_MAXFREELIST" : 1
patchcheck" : 1
patch: : 1
"Misc/ACKS" : 1
GCC's : 1
95 : 5
ME : 1
NT4 : 1
SP4 : 1
7.1) : 1
8.0) : 2
PC/ : 1
X64 : 1
"getwch()" : 1
"getwche()" : 1
"putwch()" : 1
"WSAIoctl()" : 1
"ExpandEnvironmentStrings()" : 1
"%NAME%" : 2
x64 : 1
reflection : 13
(bpo-1753245) : 1
"Record" : 1
"GetInteger()" : 1
"GetString()" : 1
Floris : 1
Bruynooghe; : 1
bpo-2125.) : 1
"--with-framework-name=" : 1
"macfs" : 3
"macostools.touched()" : 1
(bpo-1490190) : 1
3.0: : 6
"_builtinSuites" : 1
"aepack" : 1
"aetools" : 1
"aetypes" : 1
"applesingle" : 1
"appletrawmain" : 1
"appletrunner" : 1
"argvemulator" : 1
"Audio_mac" : 1
"autoGIL" : 1
"Carbon" : 1
"cfmfile" : 1
"CodeWarrior" : 1
"ColorPicker" : 1
"EasyDialogs" : 1
"Explorer" : 1
"Finder" : 3
"FrameWork" : 1
"findertools" : 1
"ic" : 1
"icglue" : 1
"icopen" : 1
"macerrors" : 1
"MacOS" : 1
"macostools" : 1
"macresource" : 1
"MiniAEFrame" : 1
"Nav" : 1
"Netscape" : 1
"OSATerminology" : 1
"pimp" : 1
"PixMapWrapper" : 1
"StdSuites" : 1
"SystemEvents" : 1
"Terminal" : 1
"terminalcommand" : 1
IRIX-specific : 1
"al" : 1
"AL" : 1
"cd" : 1
"cddb" : 1
"cdplayer" : 1
"CL" : 1
"cl" : 1
"DEVICE" : 1
"ERRNO" : 1
"FILE" : 2
"FL" : 1
"fl" : 1
"flp" : 1
"fm" : 1
"GET" : 13
"GLWS" : 1
"GL" : 1
"gl" : 1
"IOCTL" : 1
"jpeg" : 1
"panelparser" : 1
"readcd" : 1
"SV" : 1
"sv" : 1
"torgb" : 1
"videoreader" : 1
"WAIT" : 1
"list.__init__()" : 1
"object.__init__()" : 2
"super()") : 2
bpo-1683368 : 1
"ConversionSyntax" : 1
bpo-1706815.) : 1
access; : 2
"dict1 : 2
dict2" : 2
Ralph : 1
Corderoy : 1
Lambacher : 1
Michlmayr : 1
Warner : 1
*PyImport_ImportModule(const : 1
*Return : 343
reference.** : 254
ABI.* : 540
"['*']" : 1
(Unfortunately : 1
subpackage : 7
submodule: : 1
loaded.) : 1
*PyImport_ImportModuleNoBlock(const : 1
*PyImport_ImportModuleEx(const : 1
*globals : 12
*locals : 8
*fromlist) : 1
reference.* : 73
*PyImport_ImportModuleLevelObject(PyObject : 1
*fromlist : 2
3.7.* : 62
*PyImport_ImportModuleLevel(const : 1
"PyImport_ImportModuleLevelObject()" : 2
*PyImport_Import(PyObject : 1
*PyImport_ReloadModule(PyObject : 1
*m) : 3
*PyImport_AddModuleObject(PyObject : 1
Borrowed : 42
"package.module" : 5
*PyImport_AddModule(const : 1
"PyImport_AddModuleObject()" : 2
*PyImport_ExecCodeModule(const : 1
*co) : 7
"package.module") : 1
"PyImport_ExecCodeModule()" : 3
Leaving : 8
damaged : 3
author's : 2
intents) : 1
spec's : 2
"SourceFileLoader" : 1
reload : 12
"PyImport_ReloadModule()" : 2
"PyImport_ExecCodeModuleEx()" : 3
"PyImport_ExecCodeModuleWithPathnames()" : 3
*PyImport_ExecCodeModuleEx(const : 1
*co : 7
*pathname) : 1
*pathname* : 20
*PyImport_ExecCodeModuleObject(PyObject : 1
*pathname : 2
*cpathname) : 2
*cpathname* : 3
*PyImport_ExecCodeModuleWithPathnames(const : 1
"PyImport_ExecCodeModuleObject()" : 2
Attempts : 7
"imp.source_from_cache()" : 1
PyImport_GetMagicNumber() : 1
*PyImport_GetMagicTag() : 1
*PyImport_GetModuleDict() : 1
*PyImport_GetModule(PyObject : 1
3.8.* : 5
*PyImport_GetImporter(PyObject : 1
*path) : 5
"sys.path"/"pkg.__path__" : 1
could; : 1
PyImport_ImportFrozenModuleObject(PyObject : 1
misnomer : 1
imported.) : 1
PyImport_ImportFrozenModule(const : 1
"PyImport_ImportFrozenModuleObject()" : 2
_frozen : 3
**freeze** : 1
"Tools/freeze/" : 1
"Include/import.h" : 2
*code; : 1
is_package; : 1
*PyImport_FrozenModules : 1
PyImport_AppendInittab(const : 1
*(*initfunc)(void)) : 1
*initfunc* : 1
_inittab : 3
(*initfunc)(void); : 1
PyImport_ExtendInittab(struct : 1
*newtab) : 1
*newtab* : 1
marshalled : 7
PyMarshal_WriteLongToFile(long : 1
Marshal : 2
least-significant : 1
*value*; : 1
PyMarshal_WriteObjectToFile(PyObject : 1
*PyMarshal_WriteObjectToString(PyObject : 1
PyMarshal_ReadLongFromFile(FILE : 1
*file) : 4
("EOFError") : 2
PyMarshal_ReadShortFromFile(FILE : 1
*PyMarshal_ReadObjectFromFile(FILE : 1
("EOFError" : 3
"TypeError") : 7
*PyMarshal_ReadLastObjectFromFile(FILE : 1
"PyMarshal_ReadObjectFromFile()" : 1
de-serialization : 2
*PyMarshal_ReadObjectFromString(const : 1
len) : 7
*len* : 18
PyList_Type : 1
PyList_Check(PyObject : 1
PyList_CheckExact(PyObject : 1
*PyList_New(Py_ssize_t : 1
PyList_Size(PyObject : 1
*list*; : 2
"len(list)" : 1
PyList_GET_SIZE(PyObject : 1
*PyList_GetItem(PyObject : 1
index) : 10
non-negative; : 1
(<0 : 1
>=len(list)) : 1
*PyList_GET_ITEM(PyObject : 1
PyList_SetItem(PyObject : 1
*item) : 6
"steals" : 6
PyList_SET_ITEM(PyObject : 1
*o) : 112
Macro : 8
replaced; : 5
PyList_Insert(PyObject : 1
successful; : 3
Analogous : 6
"list.insert(index : 1
PyList_Append(PyObject : 1
"list.append(item)" : 1
*PyList_GetSlice(PyObject : 1
high) : 2
"list[low:high]" : 1
PyList_SetSlice(PyObject : 1
*itemlist) : 1
*itemlist* : 2
"list[low:high] : 1
itemlist" : 1
(slice : 1
deletion) : 1
PyList_Sort(PyObject : 1
PyList_Reverse(PyObject : 1
"list.reverse()" : 1
*PyList_AsTuple(PyObject : 1
"tuple(list)" : 1
units." : 1
unit; : 3
(round) : 2
[square] : 2
variable(s) : 3
NUL-terminated : 7
"y*" : 4
**you : 1
call** : 2
**You : 1
"borrowed": : 1
"PyBufferProcs.bf_releasebuffer" : 2
("s#" : 1
("str") : 12
[const : 24
*] : 19
points; : 4
"O&" : 4
*converter* : 7
object*) : 11
[Py_buffer] : 4
"Py_ssize_t"] : 10
"buf" : 6
(read-only : 2
(*bytes-like : 1
bytes- : 3
**This : 2
data.** : 1
("bytes") : 5
[PyBytesObject : 1
Requires : 9
"Y" : 3
("bytearray") : 1
[PyByteArrayObject : 1
API; : 6
[PyObject : 5
(read-write : 1
*encoding : 16
**buffer] : 2
char**; : 2
**buffer* : 4
"bytearray") : 8
recoding : 2
**buffer : 6
*buffer_length] : 2
integer; : 6
operation: : 4
buffer) : 5
**buffer_length* : 2
NUL- : 1
[unsigned : 11
char] : 3
nonnegative : 12
[short : 2
[int] : 5
[long : 4
long] : 6
["Py_ssize_t"] : 2
("bytes" : 4
[char] : 3
[float] : 2
[double] : 2
("complex") : 3
[Py_complex] : 1
"Py_complex" : 11
"O" : 7
conversion) : 2
"O!" : 1
[*typeobject* : 1
PyObject*) : 11
[*converter* : 2
*anything*] : 2
void* : 20
converter(object : 1
address); : 2
*status* : 7
"Py_CLEANUP_SUPPORTED" : 2
("bool") : 3
**p**redicate) : 1
"(items)" : 2
("tuple") : 2
[*matching-items*] : 4
*items* : 14
(integers : 3
"LONG_MAX") : 1
downcasts : 1
mileage : 2
vary) : 1
Indicates : 18
only: : 19
raises) : 1
*instead* : 1
PyArg_VaParse(PyObject : 1
va_list : 10
vargs) : 6
*kw : 2
*keywords[] : 2
*keywords* : 8
PyArg_VaParseTupleAndKeywords(PyObject : 1
PyArg_ValidateKeywordArguments(PyObject*) : 1
PyArg_Parse(PyObject : 1
deconstruct : 1
"old-style" : 1
PyArg_UnpackTuple(PyObject : 1
*args*; : 5
*min* : 2
*max*; : 1
*max* : 1
variable; : 4
"_weakref" : 1
weakref_ref(PyObject : 1
*object; : 1
*callback : 2
(PyArg_UnpackTuple(args : 1
&object : 2
&callback)) : 1
PyWeakref_NewRef(object : 1
callback); : 1
"O|O:ref" : 1
&callback) : 1
value(s) : 5
"s#") : 1
tad : 1
(UTF-16 : 2
UCS-4) : 2
[Py_complex : 1
*anything* : 2
void*) : 1
"[items]" : 1
("list") : 1
"{items}" : 1
("dict") : 2
*Py_VaBuildValue(const : 1
****************************** : 12
*_PyObject_New(PyTypeObject : 1
*_PyObject_NewVar(PyTypeObject : 1
*PyObject_Init(PyObject : 1
*op : 6
*op* : 29
participates : 1
detector's : 1
*PyObject_InitVar(PyVarObject : 1
variable-size : 1
TYPE : 8
*PyObject_New(TYPE : 1
*TYPE* : 4
initialized; : 2
*PyObject_NewVar(TYPE : 1
PyObject_Del(void : 1
*op) : 16
*********************************** : 14
preinitialized : 5
configuration: : 7
isolates : 1
**argv) : 5
status; : 7
PyConfig_InitPythonConfig(&config); : 4
config.isolated : 1
Implicitly : 6
preinitialize : 7
PyConfig_SetBytesArgv(&config : 1
argv); : 1
(PyStatus_Exception(status)) : 13
Py_InitializeFromConfig(&config); : 4
PyConfig_Clear(&config); : 6
Py_RunMain(); : 1
(PyStatus_IsExit(status)) : 1
status.exitcode; : 1
Py_ExitStatusException(status); : 6
Methods: : 1
PyWideStringList_Append(PyWideStringList : 1
PyWideStringList_Insert(PyWideStringList : 1
**items : 1
======== : 57
*err_msg : 1
*func : 2
PyStatus_Ok(void) : 1
PyStatus_Error(const : 1
*err_msg) : 1
*err_msg* : 3
PyStatus_NoMemory(void) : 1
(out : 1
PyStatus_Exit(int : 1
exitcode) : 1
PyStatus_Exception(PyStatus : 1
status) : 8
handled; : 2
PyStatus_IsError(PyStatus : 1
PyStatus_IsExit(PyStatus : 1
Py_ExitStatusException(PyStatus : 1
"exit(exitcode)" : 1
"PyStatus_Exception(status)" : 1
"PyStatus.func" : 1
alloc(void : 2
**ptr : 1
size_t : 31
*ptr : 3
PyMem_RawMalloc(size); : 1
(*ptr : 1
PyStatus_NoMemory(); : 1
PyStatus_Ok(); : 1
*ptr; : 1
alloc(&ptr : 1
16); : 1
PyMem_Free(ptr); : 1
preconfiguration: : 1
PyPreConfig_InitPythonConfig(PyPreConfig : 1
*preconfig) : 3
preconfiguration : 6
PyPreConfig_InitIsolatedConfig(PyPreConfig : 1
"PYMEM_ALLOCATOR_NOT_SET" : 3
("0"): : 1
defaults) : 4
"PYMEM_ALLOCATOR_DEFAULT" : 1
("1"): : 1
"PYMEM_ALLOCATOR_DEBUG" : 1
("2"): : 1
"PYMEM_ALLOCATOR_MALLOC" : 1
("3"): : 1
"PYMEM_ALLOCATOR_MALLOC_DEBUG" : 1
("4"): : 1
"PYMEM_ALLOCATOR_PYMALLOC" : 2
("5"): : 1
"PYMEM_ALLOCATOR_PYMALLOC_DEBUG" : 2
("6"): : 1
"configured : 4
pymalloc" : 1
configure_locale : 1
"coerce_c_locale" : 1
"coerce_c_locale_warn" : 1
coerce_c_locale : 1
coerce_c_locale_warn : 1
dev_mode : 2
Mode: : 3
"PyConfig.dev_mode" : 2
"PyConfig.isolated" : 2
legacy_windows_fs_encoding : 1
non-zero: : 1
"PyPreConfig.utf8_mode" : 4
"PyConfig.filesystem_encoding" : 1
""mbcs"" : 2
"PyConfig.filesystem_errors" : 1
""replace"" : 2
Initialized : 2
MS_WINDOWS" : 2
parse_argv : 2
use_environment : 2
utf8_mode : 1
preinitialization : 10
("PyPreConfig.allocator") : 1
(*locale : 1
encoding*) : 1
("PyPreConfig.utf8_mode") : 1
"_PyRuntime.preconfig" : 1
Py_PreInitialize(const : 1
*preconfig* : 8
Py_PreInitializeFromBytesArgs(const : 1
*preconfig : 2
*argv) : 4
"parse_argv" : 6
Py_PreInitializeFromArgs(const : 1
(wide : 1
(error : 3
("PyPreConfig_InitPythonConfig()") : 1
pre-configuration : 1
"PyMem_SetAllocator()" : 4
"PyPreConfig.allocator" : 2
preconfig; : 1
PyPreConfig_InitPythonConfig(&preconfig); : 1
preconfig.utf8_mode : 1
Py_PreInitialize(&preconfig); : 1
speaks : 1
Py_Finalize(); : 1
PyConfig_InitPythonConfig(PyConfig : 1
*config) : 5
PyConfig_InitIsolatedConfig(PyConfig : 1
PyConfig_SetString(PyConfig : 1
*config : 5
*config_str : 2
*str) : 3
*str* : 38
"*config_str" : 2
PyConfig_SetBytesString(PyConfig : 1
PyConfig_SetArgv(PyConfig : 1
("argv" : 2
*config*) : 2
PyConfig_SetBytesArgv(PyConfig : 1
PyConfig_SetWideStringList(PyConfig : 1
**items) : 1
PyConfig_Read(PyConfig : 1
PyConfig_Clear(PyConfig : 1
("PyPreConfig") : 1
non-zero) : 2
argv : 3
safe_path : 1
prepends : 2
"L"-m"" : 1
module") : 2
script.py") : 1
"python") : 3
*base_exec_prefix : 1
"sys.base_exec_prefix" : 2
*base_executable : 1
executable: : 2
"PyConfig.executable" : 2
*base_prefix : 1
"sys.base_prefix" : 2
buffered_stdio : 1
"configure_c_stdio" : 1
bytes_warning : 1
Incremented : 7
warn_default_encoding : 1
code_debug_ranges : 1
carets : 1
*check_hash_pycs_mode : 1
"--check-hash-based-pycs" : 1
"L"always"": : 1
'check_source' : 2
"L"never"": : 1
"L"default"": : 1
"L"default"" : 1
"Deterministic : 1
pycs" : 2
configure_c_stdio : 1
streams: : 5
("O_BINARY") : 1
"buffered_stdio" : 1
"interactive" : 2
dump_refs : 1
*exec_prefix : 1
*executable : 1
*filesystem_encoding : 1
*Filesystem : 2
encoding*: : 4
"legacy_windows_fs_encoding" : 2
""ascii"" : 2
announces : 2
"mbstowcs()" : 1
""ANSI_X3.4-1968"" : 1
*filesystem_errors : 1
handler*: : 2
""surrogatepass"" : 2
""surrogateescape"" : 6
""strict"" : 6
hash_seed : 1
use_hash_seed : 1
"use_hash_seed" : 1
"hash_seed" : 1
*use_hash_seed* : 1
*home : 1
import_time : 1
inspect: : 1
install_signal_handlers : 1
"safe_path" : 4
"1": : 4
"use_environment" : 2
"user_site_directory" : 2
"0": : 4
"PyPreConfig.isolated" : 1
legacy_windows_stdio : 1
"io.WindowsConsoleIO" : 1
malloc_stats : 1
*platlibdir : 1
--with-platlibdir : 1
""DLLs"" : 1
*pythonpath_env : 1
("sys.path") : 4
"DELIM" : 1
("os.path.pathsep") : 1
module_search_paths : 1
module_search_paths_set : 1
paths: : 7
"module_search_paths_set" : 5
("module_search_paths") : 1
("module_search_paths_set") : 1
optimization_level : 1
level: : 9
Peephole : 1
"2": : 3
orig_argv : 1
zero) : 15
parser_debug : 1
pathconfig_warnings : 1
*prefix : 1
*program_name : 1
"executable" : 4
"PYTHONEXECUTABLE" : 1
"WITH_NEXT_FRAMEWORK" : 1
"L"python"" : 1
"L"python3"" : 1
*pycache_prefix : 1
*run_command : 1
*run_filename : 1
Filename : 6
"script.py" : 4
arg" : 2
"PyConfig.skip_source_first_line" : 1
*run_module : 1
show_ref_count : 1
site_import : 1
"sys.flags.no_site" : 1
"site_import" : 3
skip_source_first_line : 1
"PyConfig.run_filename" : 1
"-x" : 5
*stdio_encoding : 1
*stdio_errors : 1
""UTF-8"" : 1
tracemalloc=N" : 1
"PYTHONTRACEMALLOC" : 4
user_site_directory : 1
Verbose : 3
warnoptions : 1
"warnings.filters" : 1
(highest : 1
priority) : 3
"warnoptions" : 1
(",") : 1
write_bytecode : 1
"write_bytecode" : 1
xoptions : 1
"xoptions" : 1
Py_InitializeFromConfig(const : 1
*config* : 2
"PyImport_FrozenModules()" : 1
init_python(void) : 2
PyConfig_SetString(&config : 2
&config.program_name : 2
L"/path/to/my_program"); : 1
init_python(const : 1
*program_name) : 1
(decode : 1
PyConfig_SetBytesString(&config : 1
program_name); : 1
done; : 5
PyConfig_Read(&config); : 1
PySys_GetObject("path") : 1
config.module_search_paths_set : 1
PyWideStringList_Append(&config.module_search_paths : 2
L"/path/to/stdlib"); : 1
L"/path/to/more/modules"); : 1
PyConfig_Read() : 1
&config.executable : 1
L"/path/to/my_executable"); : 1
("PyConfig.argv" : 1
parsed) : 1
"stdout") : 2
unspecified : 28
"PyConfig.home" : 3
538**) : 1
540**) : 1
inputs: : 1
"PyConfig.pathconfig_warnings" : 1
"PyConfig.program_name" : 2
"PyConfig.pythonpath_env" : 1
"PyConfig.program_name") : 1
"SoftwarePythonPythonCoreX.YPythonPath" : 1
HKEY_CURRENT_USER : 1
HKEY_LOCAL_MACHINE : 1
"PyConfig.base_exec_prefix" : 1
"PyConfig.base_executable" : 2
"PyConfig.base_prefix" : 1
"PyConfig.exec_prefix" : 1
"PyConfig.prefix" : 1
"output : 4
field" : 1
"pathconfig_warnings" : 1
(Unix : 6
warning) : 1
"base_prefix" : 4
"base_exec_prefix" : 4
"run_filename" : 3
"isolated" : 5
zero: : 4
"run_module" : 1
"python._pth") : 1
Py_RunMain(void) : 1
("PyConfig.run_command") : 1
("PyConfig.run_filename") : 1
("PyConfig.run_module") : 1
finalizes : 1
Py_GetArgcArgv(int : 1
*argc : 1
***argv) : 1
"PyConfig.orig_argv" : 3
432**: : 1
"Core" : 5
"bare : 1
Python": : 1
exceptions; : 5
yet) : 6
"Main" : 4
initialized: : 2
"importlib"; : 1
Configuration; : 1
"sys.path"); : 1
"tracemalloc"; : 1
"PyConfig._init_main": : 1
"PyConfig._isolated_interpreter": : 1
_Py_InitializeMain(void) : 1
configured: : 3
calculatin : 1
provisional: : 1
anytime : 4
phases: : 1
config._init_main : 1
'config' : 1
_Py_InitializeMain() : 1
PyRun_SimpleString( : 1
sys; : 3
"print('Run : 1
_Py_InitializeMain' : 1
"file=sys.stderr)"); : 1
_Py_InitializeMain(); : 1
*********** : 1
"PyObject_IsTrue()" : 2
"PyObject_GetIter()") : 1
"PyNumber_And()" : 2
"PyNumber_Subtract()" : 2
"PyNumber_Or()" : 2
"PyNumber_Xor()" : 2
"PyNumber_InPlaceAnd()" : 2
"PyNumber_InPlaceSubtract()" : 2
"PyNumber_InPlaceOr()" : 2
"PyNumber_InPlaceXor()") : 1
PySetObject : 1
"PyDictObject" : 1
(much : 3
medium : 2
PySet_Type : 1
PyFrozenSet_Type : 1
PySet_Check(PyObject : 1
PyFrozenSet_Check(PyObject : 1
PyAnySet_Check(PyObject : 1
PySet_CheckExact(PyObject : 1
PyAnySet_CheckExact(PyObject : 1
PyFrozenSet_CheckExact(PyObject : 1
*PySet_New(PyObject : 1
*iterable) : 2
("c=set(s)") : 1
*PyFrozenSet_New(PyObject : 1
PySet_Size(PyObject : 1
*anyset) : 2
"len(anyset)" : 1
"PyExc_SystemError" : 5
*anyset* : 2
PySet_GET_SIZE(PyObject : 1
PySet_Contains(PyObject : 1
*anyset : 1
*key) : 22
PySet_Add(PyObject : 1
*set : 2
*set* : 9
PySet_Discard(PyObject : 1
taken) : 1
"discard()" : 5
*PySet_Pop(PyObject : 1
*set) : 2
PySet_Clear(PyObject : 1
PyByteArrayObject : 1
PyByteArray_Type : 1
PyByteArray_Check(PyObject : 1
PyByteArray_CheckExact(PyObject : 1
*PyByteArray_FromObject(PyObject : 1
*PyByteArray_FromStringAndSize(const : 1
*PyByteArray_Concat(PyObject : 1
*a : 8
*b) : 3
Concat : 2
PyByteArray_Size(PyObject : 1
*bytearray) : 4
*bytearray* : 3
*PyByteArray_AsString(PyObject : 1
PyByteArray_Resize(PyObject : 1
*bytearray : 1
*PyByteArray_AS_STRING(PyObject : 1
"PyByteArray_AsString()" : 2
PyByteArray_GET_SIZE(PyObject : 1
"PyByteArray_Size()" : 2
PyCoroObject : 1
PyCoro_Type : 1
PyCoro_CheckExact(PyObject : 1
*ob) : 15
*ob*'s : 2
"PyCoro_Type"; : 1
*ob* : 38
*PyCoro_New(PyFrameObject : 1
*frame : 4
*qualname) : 3
*frame* : 25
*PyOS_FSPath(PyObject : 1
3.6.* : 4
Py_FdIsInteractive(FILE : 1
*fp : 17
*filename) : 9
*fp* : 31
*filename* : 121
"isatty(fileno(fp))" : 1
"Py_InteractiveFlag" : 1
"'<stdin>'" : 1
"'???'" : 1
clones : 3
cloning : 7
"os.register_at_fork()" : 1
fork().* : 1
fork; : 1
PyOS_CheckStack() : 1
"USE_STACKCHECK" : 3
PyOS_sighandler_t : 3
PyOS_getsig(int : 1
"PyOS_sighandler_t" : 3
(*)(int) : 2
PyOS_setsig(int : 1
h) : 2
*h*; : 1
*Py_DecodeLocale(const : 1
*size) : 4
preinitialized.This : 1
U+DC80..U+DCFF; : 1
"PyMem_RawFree()" : 3
"*size" : 2
"(size_t)-1" : 3
"(size_t)-2" : 1
"PyConfig_Read()": : 2
"PyUnicode_DecodeFSDefaultAndSize()" : 4
"Py_LegacyWindowsFSEncodingFlag" : 2
zero; : 6
*Py_EncodeLocale(const : 1
*error_pos) : 1
U+DC80..U+DCFF : 1
0x80..0xFF : 1
error_pos : 1
"*error_pos" : 1
**************** : 10
*PySys_GetObject(const : 1
PySys_SetObject(const : 1
*v* : 23
PySys_ResetWarnOptions() : 1
PySys_AddWarnOption(const : 1
*s) : 3
compatibility: : 11
*s* : 98
PySys_AddWarnOptionUnicode(PyObject : 1
*unicode) : 14
*unicode* : 4
PySys_SetPath(const : 1
(":" : 2
PySys_WriteStdout(const : 1
occur; : 3
"%.<N>s" : 1
<N> : 2
watch : 14
PySys_WriteStderr(const : 1
"PySys_WriteStdout()" : 2
PySys_FormatStdout(const : 1
PySys_WriteStdout() : 1
"PyUnicode_FromFormatV()" : 2
PySys_FormatStderr(const : 1
"PySys_FormatStdout()" : 2
PySys_AddXOption(const : 1
"PySys_GetXOptions()" : 2
*PySys_GetXOptions() : 1
PySys_Audit(const : 1
*event : 5
single-element : 1
consumes : 10
leaks.) : 1
3.8.2: : 1
PySys_AddAuditHook(Py_AuditHookFunction : 1
*userData) : 3
*hook* : 3
*userData* : 2
notified : 9
silenced) : 1
(*)(const : 1
"PyTupleObject" : 5
"sys.addaudithook" : 2
Py_FatalError(const : 1
*message) : 2
"abort()" : 2
"core" : 2
Py_Exit(int : 1
"exit(status)" : 1
Py_AtExit(void : 1
(*func)()) : 1
"Py_AtExit()" : 2
"0"; : 1
*buffer* : 25
characteristic : 1
sides: : 1
"buffer : 1
interface" : 2
Structures; : 1
consumer : 28
parameter) : 3
siblings) : 1
Failure : 3
"buffers") : 1
zero-copy : 3
3.11.* : 19
*buf : 8
exporter : 13
"strides" : 6
*contiguous* : 6
*temporary* : 1
MUST : 20
"product(shape) : 2
itemsize" : 2
"((char : 1
*)buf)[0] : 1
((char : 1
*)buf)[len-1]" : 1
"PyBUF_SIMPLE" : 4
"PyBUF_FORMAT" : 3
"itemsize" : 8
"shape" : 6
navigate : 5
disregard : 1
"itemsize : 1
""B"" : 1
ndim : 8
n-dimensional : 5
"suboffsets" : 2
"PyBUF_MAX_NDIM" : 2
Exporters : 1
SHOULD : 1
*shape : 2
"ndim" : 7
"shape[0] : 1
shape[ndim-1] : 1
Shape : 7
"shape[n] : 2
*strides : 3
Stride : 1
"strides[n] : 1
*suboffsets : 2
"suboffsets[n] : 1
nth : 4
suboffset : 2
dictates : 3
de-referencing : 3
(striding : 1
block) : 5
Imaging : 1
(PIL) : 1
*internal : 1
re-cast : 1
drastically : 2
unambiguously : 5
PyBUF_WRITABLE : 1
"readonly" : 6
MAY : 3
PyBUF_FORMAT : 1
|'d : 2
+-------------------------------+---------+-----------+--------------+ : 5
|===============================|=========|===========|==============| : 1
PyBUF_INDIRECT : 1
PyBUF_STRIDES : 1
PyBUF_ND : 1
PyBUF_SIMPLE : 1
*contiguity* : 1
stride : 5
+-------------------------------------+---------+-----------+--------------+----------+ : 5
contig : 2
|=====================================|=========|===========|==============|==========| : 1
PyBUF_C_CONTIGUOUS : 1
PyBUF_F_CONTIGUOUS : 1
PyBUF_ANY_CONTIGUOUS : 1
"PyBUF_ND" : 1
*U* : 1
+---------------------------------+---------+-----------+--------------+----------+------------+----------+ : 9
|=================================|=========|===========|==============|==========|============|==========| : 1
PyBUF_FULL : 1
U : 7
PyBUF_FULL_RO : 1
PyBUF_RECORDS : 1
PyBUF_RECORDS_RO : 1
PyBUF_STRIDED : 1
PyBUF_STRIDED_RO : 1
PyBUF_CONTIG : 1
PyBUF_CONTIG_RO : 1
"ndim : 1
C-array : 2
ptr : 2
(char : 8
*)buf : 2
indices[0] : 1
strides[0] : 1
indices[n-1] : 1
strides[n-1]; : 1
*((typeof(item) : 1
*)ptr); : 1
verify_structure(memlen : 1
offset): : 2
"""Verify : 1
*mem: : 1
memlen: : 2
offset: : 2
mem : 1
itemsize: : 1
offset+itemsize : 1
any(v : 1
strides): : 1
shape: : 1
imin : 1
sum(strides[j]*(shape[j]-1) : 2
range(ndim) : 2
strides[j] : 2
imax : 1
offset+imin : 1
offset+imax+itemsize : 1
memlen : 1
PIL-style : 2
three-dimensional : 1
v[2][2][3]" : 1
two- : 4
dimensional : 6
arrays: : 2
(*v[2])[2][3]" : 1
x[2][3]" : 1
N-D : 1
N-dimensional : 3
suboffsets: : 1
*get_item_pointer(int : 1
*indices) : 2
*pointer : 2
(char*)buf; : 1
ndim; : 1
i++) : 4
strides[i] : 1
indices[i]; : 1
(suboffsets[i] : 1
>=0 : 1
*((char**)pointer) : 1
suboffsets[i]; : 1
(void*)pointer; : 1
PyObject_CheckBuffer(PyObject : 1
PyObject_GetBuffer(PyObject : 1
*exporter : 4
Send : 76
*exporter* : 9
"PyExc_BufferError" : 5
"view->obj" : 6
Structures) : 1
Successful : 3
PyBuffer_Release(Py_buffer : 1
*view) : 2
PyBuffer_SizeFromFormat(const : 1
*format) : 1
PyBuffer_IsContiguous(const : 1
(*order* : 3
"'C'") : 1
Fortran-style : 5
"'F'") : 2
"'A'") : 1
*PyBuffer_GetPointer(const : 1
*indices* : 2
"view->ndim" : 1
PyBuffer_FromContiguous(const : 1
fort) : 1
*buf* : 14
*fort* : 1
PyBuffer_ToContiguous(void : 1
*src : 1
*src* : 69
*order* : 6
"'A'" : 7
*src->len* : 1
PyObject_CopyData(PyObject : 1
*dest : 1
*src) : 1
PyBuffer_FillContiguousStrides(int : 1
ndims : 1
*strides* : 1
byte-strides : 1
(C-style : 1
PyBuffer_FillInfo(Py_buffer : 1
writability : 2
*readonly* : 2
"-1"; : 4
getbufferproc : 2
(FILE*) : 1
*PyFile_FromFd(int : 1
*errors : 8
*newline : 1
closefd) : 1
*-1* : 2
OS-level : 9
PyObject_AsFileDescriptor(PyObject : 1
exists; : 1
*PyFile_GetLine(PyObject : 1
*p : 31
"p.readline([n])" : 1
PyFile_SetOpenCodeHook(Py_OpenCodeHookFunction : 1
Overrides : 2
*(*)(PyObject : 1
intentionally : 7
"PyFile_SetOpenCodeHook()" : 2
"setopencodehook" : 1
PyFile_WriteObject(PyObject : 1
"Py_PRINT_RAW"; : 2
failure; : 6
PyFile_WriteString(const : 1
*s : 20
Py_INCREF(PyObject : 1
Increment : 6
Py_XINCREF(PyObject : 1
*Py_NewRef(PyObject : 1
3.10.* : 27
Py_INCREF(obj); : 1
self->attr : 2
Py_NewRef(obj); : 1
*Py_XNewRef(PyObject : 1
Py_DECREF(PyObject : 1
Decrement : 6
deallocated) : 1
Py_XDECREF(PyObject : 1
Py_CLEAR(PyObject : 1
Py_IncRef(PyObject : 1
Py_DecRef(PyObject : 1
core: : 1
"_Py_RefTotal" : 1
"Descriptors" : 1
PyProperty_Type : 1
*PyDescr_NewGetSet(PyTypeObject : 1
*getset) : 1
*PyDescr_NewMember(PyTypeObject : 1
*meth) : 6
*PyDescr_NewMethod(PyTypeObject : 1
*PyDescr_NewWrapper(PyTypeObject : 1
*wrapper : 1
*wrapped) : 1
*PyDescr_NewClassMethod(PyTypeObject : 1
*method) : 1
PyDescr_IsData(PyObject : 1
*descr) : 1
*descr* : 3
*PyWrapper_New(PyObject* : 1
PySeqIter_Type : 1
"PySeqIter_New()" : 2
PySeqIter_Check(op) : 1
"PySeqIter_Type" : 2
*PySeqIter_New(PyObject : 1
*seq) : 2
*seq* : 8
PyCallIter_Type : 1
"PyCallIter_New()" : 2
two-argument : 3
PyCallIter_Check(op) : 1
"PyCallIter_Type" : 2
*PyCallIter_New(PyObject : 1
*callable : 11
*sentinel) : 1
*callable* : 23
**built** : 1
**run : 1
time** : 1
PY_MAJOR_VERSION : 1
"3.4.1a2" : 7
PY_MINOR_VERSION : 2
PY_MICRO_VERSION : 2
PY_RELEASE_LEVEL : 2
"0xA" : 2
"0xB" : 1
"0xC" : 1
"0xF" : 1
PY_RELEASE_SERIAL : 2
+---------+---------------------------+---------------------------+----------------------------+ : 5
Bits : 1
(big : 1
|=========|===========================|===========================|============================| : 1
1-8 : 1
"PY_MAJOR_VERSION" : 1
"0x03" : 1
9-16 : 1
"0x04" : 4
17-24 : 1
"PY_MICRO_VERSION" : 1
"0x01" : 2
25-28 : 1
"PY_RELEASE_LEVEL" : 1
+---------------------------+---------------------------+----------------------------+ : 1
29-32 : 1
"PY_RELEASE_SERIAL" : 1
"0x2" : 1
hexversion : 2
"0x030401a2" : 1
"3.10.0" : 1
"0x030a00f0" : 1
"#if : 1
Py_Version : 1
Include/patchlevel.h : 1
*weak : 2
first-class : 2
PyWeakref_Check(ob) : 1
PyWeakref_CheckRef(ob) : 1
PyWeakref_CheckProxy(ob) : 1
*PyWeakref_NewRef(PyObject : 1
*callback) : 2
collected; : 3
*PyWeakref_NewProxy(PyObject : 1
*PyWeakref_GetObject(PyObject : 1
*ref) : 2
*ref* : 1
referent : 32
*PyWeakref_GET_OBJECT(PyObject : 1
"PyWeakref_GetObject()" : 2
PyObject_ClearWeakRefs(PyObject : 1
*object) : 3
*Py_GenericAlias(PyObject : 1
*origin : 1
3.9.* : 7
*origin* : 5
"GenericAlias"'s : 2
"__origin__" : 1
PyTypeObject* : 2
PyTupleObject* : 1
"(args,)" : 1
generic: : 3
my_obj_methods[] : 1
{"__class_getitem__" : 1
Py_GenericAlias : 1
METH_O|METH_CLASS : 1
585"} : 1
Py_GenericAliasType : 1
"Py_GenericAlias()" : 2
*PyMemoryView_FromObject(PyObject : 1
*PyMemoryView_FromMemory(char : 1
*mem : 1
*mem* : 1
"PyBUF_READ" : 1
"PyBUF_WRITE" : 1
*PyMemoryView_FromBuffer(const : 1
*PyMemoryView_GetContiguous(PyObject : 1
buffertype : 1
'F'ortran : 1
*order*) : 1
PyMemoryView_Check(PyObject : 1
*PyMemoryView_GET_BUFFER(PyObject : 1
*mview) : 2
memoryview's : 1
exporter's : 1
*mview* : 2
**must** : 9
instance; : 17
*PyMemoryView_GET_BASE(PyObject : 1
"Py_eval_input" : 2
"Py_file_input" : 2
"Py_single_input" : 2
Py_Main(int : 1
(converted : 2
not) : 14
"Py_InspectFlag" : 2
Py_BytesMain(int : 1
PyRun_AnyFile(FILE : 1
"PyRun_AnyFileExFlags()" : 3
*closeit* : 8
PyRun_AnyFileFlags(FILE : 1
*filename : 24
PyCompilerFlags : 13
*flags) : 10
PyRun_AnyFileEx(FILE : 1
closeit) : 3
PyRun_AnyFileExFlags(FILE : 1
closeit : 3
(console : 1
pseudo-terminal) : 1
("sys.getfilesystemencoding()") : 1
""???"" : 1
PyRun_SimpleString(const : 1
"PyRun_SimpleStringFlags()" : 2
"PyCompilerFlags"* : 1
PyRun_SimpleStringFlags(const : 1
*command : 1
Executes : 2
PyRun_SimpleFile(FILE : 1
PyRun_SimpleFileEx(FILE : 1
PyRun_SimpleFileExFlags(FILE : 1
"fopen(filename : 1
"rb")") : 1
PyRun_InteractiveOne(FILE : 1
"PyRun_InteractiveOneFlags()" : 1
PyRun_InteractiveOneFlags(FILE : 1
prompted : 4
"errcode.h" : 2
needed.) : 1
PyRun_InteractiveLoop(FILE : 1
"PyRun_InteractiveLoopFlags()" : 1
PyRun_InteractiveLoopFlags(FILE : 1
(*PyOS_InputHook)(void) : 1
func(void)" : 1
"Modules/_tkinter.c" : 1
*(*PyOS_ReadlineFunctionPointer)(FILE* : 1
*func(FILE : 1
*stdin : 1
*stdout : 1
*prompt)" : 1
*prompt* : 3
*PyRun_String(const : 1
*str : 18
*locals) : 3
"PyRun_StringFlags()" : 2
*PyRun_StringFlags(const : 1
*PyRun_File(FILE : 1
"PyRun_FileExFlags()" : 4
*PyRun_FileEx(FILE : 1
*PyRun_FileFlags(FILE : 1
*PyRun_FileExFlags(FILE : 1
*Py_CompileString(const : 1
start) : 4
"Py_CompileStringFlags()" : 1
*Py_CompileStringFlags(const : 1
"Py_CompileStringExFlags()" : 1
*optimize* : 18
*Py_CompileStringObject(const : 1
*flags : 2
optimize) : 2
*start*; : 1
compiler; : 2
optimization; : 2
true) : 13
(asserts : 2
(docstrings : 2
*Py_CompileStringExFlags(const : 1
"Py_CompileStringObject()" : 1
*PyEval_EvalCode(PyObject : 1
*PyEval_EvalCodeEx(PyObject : 1
argcount : 3
*kws : 1
kwcount : 1
*defs : 1
defcount : 1
*kwdefs : 1
*PyEval_EvalFrame(PyFrameObject : 1
*f) : 1
*PyEval_EvalFrameEx(PyFrameObject : 1
*f : 1
throwflag) : 2
unvarnished : 1
*throwflag* : 2
thrown; : 1
PyEval_MergeCompilerFlags(PyCompilerFlags : 1
*cf) : 1
Py_eval_input : 1
Py_file_input : 1
Py_single_input : 1
"PyCompilerFlags : 2
*flags" : 2
"cf_flags" : 1
cf_flags : 1
CO_FUTURE_DIVISION : 1
"PyList_New()" : 3
PyTupleObject : 1
PyTuple_Type : 1
PyTuple_Check(PyObject : 1
PyTuple_CheckExact(PyObject : 1
*PyTuple_New(Py_ssize_t : 1
*PyTuple_Pack(Py_ssize_t : 1
"PyTuple_Pack(2 : 1
"Py_BuildValue("(OO)" : 1
PyTuple_Size(PyObject : 1
PyTuple_GET_SIZE(PyObject : 1
*PyTuple_GetItem(PyObject : 1
pos) : 6
*PyTuple_GET_ITEM(PyObject : 1
*PyTuple_GetSlice(PyObject : 1
"p[low:high]" : 1
PyTuple_SetItem(PyObject : 1
pos : 10
PyTuple_SET_ITEM(PyObject : 1
_PyTuple_Resize(PyObject : 1
**p : 1
newsize) : 3
*newsize* : 1
*supposed* : 2
"*p" : 4
*PyStructSequence_NewType(PyStructSequence_Desc : 1
*desc) : 3
*desc* : 3
"PyStructSequence_New()" : 2
PyStructSequence_InitType(PyTypeObject : 1
Initializes : 7
PyStructSequence_InitType2(PyTypeObject : 1
"PyStructSequence_InitType" : 1
members).* : 8
Contains : 17
+---------------------+--------------------------------+----------------------------------------+ : 5
|=====================|================================|========================================| : 1
"PyStructSequence_Field : 1
"n_in_sequence" : 1
+-------------+--------------------+-------------------------------------------+ : 3
|=============|====================|===========================================| : 1
PyStructSequence_UnnamedField : 1
*PyStructSequence_New(PyTypeObject : 1
Creates : 41
"PyStructSequence_NewType()" : 2
*PyStructSequence_GetItem(PyObject : 1
*PyStructSequence_GET_ITEM(PyObject : 1
"PyStructSequence_GetItem()" : 2
PyStructSequence_SetItem(PyObject : 1
PyStructSequence_SET_ITEM(PyObject : 1
"PyStructSequence_SetItem()" : 2
************** : 6
PyModule_Type : 1
PyModule_Check(PyObject : 1
PyModule_CheckExact(PyObject : 1
"PyModule_Type" : 4
*PyModule_NewObject(PyObject : 1
"None"); : 2
*PyModule_New(const : 1
"PyModule_NewObject()" : 2
*PyModule_GetDict(PyObject : 1
*module) : 8
*module*'s : 3
"PyModule_*" : 1
*PyModule_GetNameObject(PyObject : 1
*PyModule_GetName(PyObject : 1
"PyModule_GetNameObject()" : 2
*PyModule_GetState(PyObject : 1
"PyModuleDef.m_size" : 4
*PyModule_GetDef(PyObject : 1
*PyModule_GetFilenameObject(PyObject : 1
*PyModule_GetFilename(PyObject : 1
"PyModule_GetFilenameObject()" : 3
"PyModule_GetFilename()" : 2
(shared : 2
compiled-in : 2
"PyImport_AppendInittab()") : 1
"multi-phase : 2
initialization" : 3
PyModuleDef_Base : 1
m_base : 1
"PyModuleDef_HEAD_INIT" : 1
*m_name : 1
*m_doc : 1
m_size : 1
"PyModule_GetState()" : 8
*m_size* : 1
re-initialized : 1
Non-negative : 1
3121** : 1
*m_methods : 1
PyModuleDef_Slot : 2
*m_slots : 1
"{0 : 2
NULL}" : 2
single-phase : 5
*m_slots* : 4
m_reload : 1
m_clear : 1
"PyTypeObject.tp_clear" : 1
m_free : 1
"single-phase : 1
*PyModule_Create(PyModuleDef : 1
*def) : 9
*def* : 10
"PyModule_Create2()" : 2
*module_api_version* : 4
*PyModule_Create2(PyModuleDef : 1
*def : 3
module_api_version) : 2
*creation : 1
phase* : 2
*execution : 2
*sys.modules* : 1
re-imported : 1
independent: : 1
(PyInit_modulename) : 1
"m_slots" : 1
*PyModuleDef_Init(PyModuleDef : 1
3.5.* : 2
"PyModuleDef_Slot" : 1
Py_mod_create : 1
Specifies : 59
*create_module(PyObject : 1
*spec : 4
"ModuleSpec" : 6
"Py_mod_create" : 3
"PyModule_New()" : 2
*spec* : 31
"m_free"; : 1
"m_size"; : 1
Py_mod_exec : 1
*execute* : 1
exec_module(PyObject : 1
"Py_mod_exec" : 1
"PyModule_FromDefAndSpec" : 3
"PyModule_ExecDef" : 1
*PyModule_FromDefAndSpec(PyModuleDef : 1
*spec) : 2
*PyModule_FromDefAndSpec2(PyModuleDef : 1
PyModule_ExecDef(PyObject : 1
*module : 25
("Py_mod_exec") : 1
PyModule_SetDocString(PyObject : 1
*docstring) : 1
"PyModule_Create" : 2
PyModule_AddFunctions(PyObject : 1
*functions) : 1
*functions* : 1
"functions" : 1
initialization) : 2
PyModule_AddObjectRef(PyObject : 1
*value) : 15
add_spam(PyObject : 4
PyLong_FromLong(value); : 4
(obj : 3
PyModule_AddObjectRef(module : 2
obj); : 2
Py_DECREF(obj); : 2
res; : 5
"NULL": : 2
Py_XDECREF(obj); : 2
PyModule_AddObject(PyObject : 1
misusing : 2
**on : 1
success**.This : 1
(PyModule_AddObject(module : 2
PyModule_AddObject() : 2
stole : 2
Py_DECREF(obj) : 2
PyModule_AddIntConstant(PyObject : 1
PyModule_AddStringConstant(PyObject : 1
PyModule_AddIntMacro(PyObject : 1
*macro* : 1
"PyModule_AddIntMacro(module : 1
AF_INET)" : 1
*AF_INET* : 2
PyModule_AddStringMacro(PyObject : 1
PyModule_AddType(PyObject : 1
*PyState_FindModule(PyModuleDef : 1
"PyState_AddModule()" : 2
beforehand : 2
PyState_AddModule(PyObject : 1
3.3.* : 3
Attaches : 2
"PyState_FindModule()" : 2
"PyState_AddModule" : 1
harmless) : 1
"PyState_FindModule" : 1
updates) : 2
PyState_RemoveModule(PyModuleDef : 1
"old : 1
PyObject_AsCharBuffer(PyObject : 1
*buffer_len) : 3
character-based : 1
*buffer_len* : 3
PyObject_AsReadBuffer(PyObject : 1
single-segment : 3
PyObject_CheckReadBuffer(PyObject : 1
PyObject_AsWriteBuffer(PyObject : 1
Programmer's : 3
*embedding* : 1
well-understood : 1
"cookbook" : 1
headers: : 4
"<limits.h>" : 1
"<assert.h>" : 1
confuses : 1
jeopardizes : 1
"*prefix*/include/pythonversion/" : 1
"*exec_prefix*/include/pythonversion/" : 1
"'%d.%d' : 2
sys.version_info[:2]" : 2
"*prefix*/include" : 1
different) : 4
<pythonX.Y/Python.h>"; : 1
"Py_RETURN_NONE") : 1
Py_ABS(x) : 1
Py_ALWAYS_INLINE : 3
Ask : 3
cost/benefit : 1
random(void) : 2
4; : 2
Py_CHARMASK(c) : 1
[-128 : 1
127] : 1
255] : 1
char" : 1
Py_DEPRECATED(version) : 1
Py_GETENV(s) : 1
"getenv(s)" : 1
Py_MAX(x : 1
Py_MEMBER_SIZE(type : 1
("type") : 1
Py_MIN(x : 1
Py_NO_INLINE : 2
consumption: : 1
LTO+PGO : 1
bpo-33720) : 1
Py_STRINGIFY(x) : 1
"Py_STRINGIFY(123)" : 1
""123"" : 1
Py_UNREACHABLE() : 1
"default:" : 1
"assert(0)" : 1
"_Py_NO_RETURN" : 1
Py_UNUSED(arg) : 1
func(int : 1
Py_UNUSED(b)) : 1
a; : 1
PyDoc_STRVAR(pop_doc : 1
"Remove : 1
element."); : 1
deque_methods[] : 1
{"pop" : 1
(PyCFunction)deque_pop : 1
pop_doc} : 1
PyDoc_STR(str) : 1
"PyDoc_STR" : 1
pysqlite_row_methods[] : 1
{"keys" : 1
(PyCFunction)pysqlite_row_keys : 1
PyDoc_STR("Returns : 1
row.")} : 1
passing) : 1
fitting : 1
heap: : 1
"PyList_Check(a)" : 1
if) : 3
today's : 1
severely : 2
limited) : 1
static) : 1
(There's : 2
"don't : 2
that.") : 1
incref : 1
overflow; : 1
"sizeof(Py_ssize_t) : 2
sizeof(void*)") : 1
pitfall : 2
danger : 3
innocent-looking : 2
"PyObject_" : 1
"PyNumber_" : 1
"PySequence_" : 1
"PyMapping_") : 1
~~~~~~~~~~~~~~~~~~~~~~~ : 4
*ownership : 1
owned: : 1
shared) : 2
"Owning : 1
reference" : 2
decref'ing : 2
needed---or : 1
Conversely : 7
*steals* : 1
*Stealing : 1
put!) : 1
populating : 5
"three")" : 1
(forgetting : 1
moment; : 1
below): : 3
*t; : 1
PyTuple_New(3); : 1
PyTuple_SetItem(t : 3
PyLong_FromLong(1L)); : 1
PyLong_FromLong(2L)); : 1
PyUnicode_FromString("three")); : 1
reference-stealing : 1
"PyObject_SetItem()" : 8
string* : 2
checking): : 1
*list; : 1
Py_BuildValue("(iis)" : 1
"three"); : 2
Py_BuildValue("[iis]" : 1
saner : 1
("have : 1
stolen") : 1
sequence) : 7
item: : 5
set_all(PyObject : 1
*target : 1
n; : 6
PyObject_Length(target); : 1
*index : 1
PyLong_FromSsize_t(i); : 1
(!index) : 1
(PyObject_SetItem(target : 1
Py_DECREF(index); : 2
"PyObject_GetItem()" : 9
*the : 3
plumage* : 1
*doesn't : 1
it!* : 1
integers; : 4
sum_list(PyObject : 1
*item; : 3
PyList_Size(list); : 1
i); : 2
(!PyLong_Check(item)) : 1
continue; : 1
PyLong_AsLong(item); : 2
PyErr_Occurred()) : 3
bail : 2
total; : 2
sum_sequence(PyObject : 1
*sequence) : 1
PySequence_Length(sequence); : 1
Has : 7
PySequence_GetItem(sequence : 1
(item : 3
(PyLong_Check(item)) : 1
Discard : 3
sizeof(size_t)" : 1
(size_t : 1
"PY_SSIZE_T_MAX" : 4
required; : 4
application) : 3
states: : 1
general) : 2
"NULL"): : 1
"sys.exc_info()"; : 1
"sum_sequence()" : 1
incr_item(dict : 1
glory: : 1
incr_item(PyObject : 1
*dict : 1
Py_XDECREF : 1
*const_one : 1
*incremented_item : 1
rv : 5
(failure) : 2
PyObject_GetItem(dict : 1
key); : 1
(!PyErr_ExceptionMatches(PyExc_KeyError)) : 1
PyErr_Clear(); : 1
PyLong_FromLong(0L); : 1
const_one : 1
PyLong_FromLong(1L); : 1
(const_one : 1
incremented_item : 1
PyNumber_Add(item : 1
const_one); : 1
(incremented_item : 1
(PyObject_SetItem(dict : 1
incremented_item) : 1
Py_XDECREF() : 1
Py_XDECREF(item); : 1
Py_XDECREF(const_one); : 1
Py_XDECREF(incremented_item); : 1
rv; : 1
illustrates : 10
"PyErr_ExceptionMatches()" : 3
writers) : 1
"script : 1
("sys.argv") : 1
set: : 5
"lib/python*X.Y*" : 1
"/usr/local/lib/python*X.Y*" : 2
"fallback" : 6
"PATH".) : 1
"Py_SetProgramName(file)" : 1
"Modules/getpath.c") : 1
"uninitialize" : 1
(make : 1
"Py_Initialize()") : 2
"Py_IsInitialized()" : 3
"_DEBUG" : 1
option") : 4
interpreter.) : 1
PyBytesObject : 1
PyBytes_Type : 1
PyBytes_Check(PyObject : 1
PyBytes_CheckExact(PyObject : 1
*PyBytes_FromString(const : 1
*PyBytes_FromStringAndSize(const : 1
*v : 1
*PyBytes_FromFormat(const : 1
"printf()"-style : 2
allowed: : 7
+---------------------+-----------------+----------------------------------+ : 13
|=====================|=================|==================================| : 1
*n/a* : 2
"%c" : 5
"%d" : 10
"printf("%d")" : 2
"printf("%u")" : 2
"%ld" : 4
"printf("%ld")" : 2
"%lu" : 2
"printf("%lu")" : 2
"%zd" : 2
"printf("%zd")" : 2
"%zu" : 2
"printf("%zu")" : 2
"printf("%i")" : 2
"printf("%x")" : 2
"printf("%p")" : 2
"printf" : 4
(d : 3
ld : 2
lu : 2
zd : 2
zu : 2
0-conversion : 2
*PyBytes_FromFormatV(const : 1
*PyBytes_FromObject(PyObject : 1
PyBytes_Size(PyObject : 1
PyBytes_GET_SIZE(PyObject : 1
*PyBytes_AsString(PyObject : 1
"len(o) : 1
"PyBytes_FromStringAndSize(NULL : 2
*PyBytes_AS_STRING(PyObject : 1
*string) : 2
PyBytes_AsStringAndSize(PyObject : 1
*length) : 1
*length*) : 1
PyBytes_Concat(PyObject : 1
**bytes : 3
*newpart) : 2
**bytes* : 7
*newpart* : 3
*bytes*; : 1
PyBytes_ConcatAndDel(PyObject : 1
_PyBytes_Resize(PyObject : 1
"immutable" : 1
lvalue : 3
PyNumber_Check(PyObject : 1
*PyNumber_Add(PyObject : 1
*o1 : 31
*o2) : 27
*o1* : 43
*o2* : 29
*PyNumber_Subtract(PyObject : 1
*PyNumber_Multiply(PyObject : 1
*PyNumber_MatrixMultiply(PyObject : 1
*PyNumber_FloorDivide(PyObject : 1
*PyNumber_TrueDivide(PyObject : 1
"approximate" : 2
approximate; : 2
*PyNumber_Remainder(PyObject : 1
*PyNumber_Divmod(PyObject : 1
"divmod(o1 : 1
o2)" : 1
*PyNumber_Power(PyObject : 1
*o2 : 4
*o3) : 2
"pow(o1 : 2
o2 : 6
o3)" : 2
*o3* : 5
(passing : 5
access) : 7
*PyNumber_Negative(PyObject : 1
*PyNumber_Positive(PyObject : 1
"+o" : 1
*PyNumber_Absolute(PyObject : 1
"abs(o)" : 1
*PyNumber_Invert(PyObject : 1
"~o" : 1
*PyNumber_Lshift(PyObject : 1
*PyNumber_Rshift(PyObject : 1
*PyNumber_And(PyObject : 1
"bitwise : 6
and" : 2
*PyNumber_Xor(PyObject : 1
or" : 4
*PyNumber_Or(PyObject : 1
*PyNumber_InPlaceAdd(PyObject : 1
*in-place* : 17
*PyNumber_InPlaceSubtract(PyObject : 1
*PyNumber_InPlaceMultiply(PyObject : 1
*PyNumber_InPlaceMatrixMultiply(PyObject : 1
@= : 3
*PyNumber_InPlaceFloorDivide(PyObject : 1
//= : 3
*PyNumber_InPlaceTrueDivide(PyObject : 1
/= : 3
*PyNumber_InPlaceRemainder(PyObject : 1
%= : 3
*PyNumber_InPlacePower(PyObject : 1
**= : 7
o3 : 1
*PyNumber_InPlaceLshift(PyObject : 1
<<= : 3
*PyNumber_InPlaceRshift(PyObject : 1
>>= : 3
*PyNumber_InPlaceAnd(PyObject : 1
&= : 5
*PyNumber_InPlaceXor(PyObject : 1
^= : 4
*PyNumber_InPlaceOr(PyObject : 1
|= : 5
*PyNumber_Long(PyObject : 1
"int(o)" : 1
*PyNumber_Float(PyObject : 1
"float(o)" : 1
*PyNumber_Index(PyObject : 1
*PyNumber_ToBase(PyObject : 1
*n : 1
base) : 4
"'0b'" : 2
"'0o'" : 2
"'0x'" : 5
PyNumber_AsSsize_t(PyObject : 1
*o : 46
*exc) : 19
"OverflowError") : 4
clipped : 5
"PY_SSIZE_T_MIN" : 3
PyIndex_Check(PyObject : 1
(has : 6
"tp_as_number" : 4
387** : 3
source-compatible : 1
(ABI) : 1
3.9.x : 1
3.10.x : 1
"_Py_InternalState" : 1
*Limited : 1
*Stable : 1
ABI*: : 1
– : 6
talks : 2
*extensions* : 2
recompilation : 1
"0x030A0000" : 1
"0x03020000" : 1
"python39.dll" : 1
"abi3" : 1
"mymodule.abi3.so") : 1
tools) : 2
“unsafe” : 1
"PyList_GET_ITEM()" : 1
prereleases : 1
*lowest* : 1
reviewing : 1
bugs) : 2
*compile* : 1
“platform” : 1
distributor : 2
"python.org" : 1
"PyAIter_Check()" : 1
"PyArg_VaParse()" : 1
"PyArg_ValidateKeywordArguments()" : 1
"PyBaseObject_Type" : 9
"PyBool_FromLong()" : 1
"PyBool_Type" : 2
"PyByteArrayIter_Type" : 1
"PyByteArray_Concat()" : 1
"PyByteArray_Resize()" : 1
"PyByteArray_Type" : 1
"PyBytesIter_Type" : 1
"PyBytes_Concat()" : 1
"PyBytes_ConcatAndDel()" : 1
"PyBytes_DecodeEscape()" : 1
"PyBytes_FromFormatV()" : 1
"PyBytes_FromObject()" : 1
"PyBytes_FromString()" : 1
"PyBytes_Repr()" : 1
"PyBytes_Type" : 1
"PyCFunctionWithKeywords" : 2
"PyCFunction_Call()" : 1
"PyCFunction_GetFlags()" : 1
"PyCFunction_GetFunction()" : 1
"PyCFunction_GetSelf()" : 1
"PyCFunction_Type" : 1
"PyCallable_Check()" : 1
"PyCapsule_Destructor" : 1
"PyCapsule_GetContext()" : 1
"PyCapsule_GetDestructor()" : 1
"PyCapsule_GetName()" : 1
"PyCapsule_GetPointer()" : 2
"PyCapsule_SetContext()" : 1
"PyCapsule_SetDestructor()" : 1
"PyCapsule_SetName()" : 1
"PyCapsule_SetPointer()" : 1
"PyCapsule_Type" : 1
"PyClassMethodDescr_Type" : 1
"PyCodec_BackslashReplaceErrors()" : 1
"PyCodec_Decode()" : 1
"PyCodec_Decoder()" : 1
"PyCodec_Encode()" : 1
"PyCodec_Encoder()" : 1
"PyCodec_IgnoreErrors()" : 1
"PyCodec_IncrementalDecoder()" : 1
"PyCodec_IncrementalEncoder()" : 1
"PyCodec_KnownEncoding()" : 1
"PyCodec_LookupError()" : 1
"PyCodec_Register()" : 1
"PyCodec_RegisterError()" : 1
"PyCodec_ReplaceErrors()" : 1
"PyCodec_StreamReader()" : 1
"PyCodec_StreamWriter()" : 1
"PyCodec_StrictErrors()" : 1
"PyCodec_XMLCharRefReplaceErrors()" : 1
"PyComplex_FromDoubles()" : 1
"PyComplex_ImagAsDouble()" : 1
"PyComplex_RealAsDouble()" : 1
"PyComplex_Type" : 1
"PyDescr_NewClassMethod()" : 1
"PyDescr_NewGetSet()" : 1
"PyDescr_NewMember()" : 1
"PyDictItems_Type" : 1
"PyDictIterItem_Type" : 1
"PyDictIterKey_Type" : 1
"PyDictIterValue_Type" : 1
"PyDictKeys_Type" : 1
"PyDictProxy_New()" : 1
"PyDictProxy_Type" : 1
"PyDictRevIterItem_Type" : 1
"PyDictRevIterKey_Type" : 1
"PyDictRevIterValue_Type" : 1
"PyDictValues_Type" : 1
"PyDict_Clear()" : 1
"PyDict_Contains()" : 1
"PyDict_Copy()" : 1
"PyDict_DelItem()" : 1
"PyDict_DelItemString()" : 1
"PyDict_GetItemWithError()" : 3
"PyDict_Items()" : 1
"PyDict_Keys()" : 1
"PyDict_Merge()" : 1
"PyDict_MergeFromSeq2()" : 1
"PyDict_New()" : 1
"PyDict_Next()" : 1
"PyDict_SetItemString()" : 1
"PyDict_Size()" : 1
"PyDict_Type" : 1
"PyDict_Update()" : 2
"PyDict_Values()" : 1
"PyEllipsis_Type" : 1
"PyEnum_Type" : 1
"PyErr_BadArgument()" : 1
"PyErr_BadInternalCall()" : 1
"PyErr_CheckSignals()" : 4
"PyErr_GivenExceptionMatches()" : 1
"PyErr_ProgramText()" : 1
"PyErr_SetExcFromWindowsErr()" : 1
"PyErr_SetExcFromWindowsErrWithFilename()" : 1
"PyErr_SetExcFromWindowsErrWithFilenameObject()" : 2
"PyErr_SetExcFromWindowsErrWithFilenameObjects()" : 1
"PyErr_SetFromErrnoWithFilename()" : 1
"PyErr_SetFromErrnoWithFilenameObject()" : 3
"PyErr_SetFromErrnoWithFilenameObjects()" : 1
"PyErr_SetFromWindowsErr()" : 2
"PyErr_SetFromWindowsErrWithFilename()" : 2
"PyErr_SetInterrupt()" : 1
"PyErr_SetNone()" : 1
"PyErr_SyntaxLocation()" : 1
"PyErr_SyntaxLocationEx()" : 2
"PyErr_WarnExplicit()" : 1
"PyErr_WarnFormat()" : 2
"PyEval_CallFunction()" : 1
"PyEval_CallMethod()" : 1
"PyEval_CallObjectWithKeywords()" : 1
"PyEval_EvalFrame()" : 1
"PyEval_GetBuiltins()" : 1
"PyEval_GetFuncDesc()" : 1
"PyEval_GetFuncName()" : 2
"PyEval_GetGlobals()" : 1
"PyEval_GetLocals()" : 1
"PyEval_ReleaseThread()" : 2
"PyExc_ArithmeticError" : 2
"PyExc_AssertionError" : 2
"PyExc_AttributeError" : 2
"PyExc_BaseException" : 2
"PyExc_BaseExceptionGroup" : 1
"PyExc_BlockingIOError" : 3
"PyExc_BrokenPipeError" : 3
"PyExc_BytesWarning" : 2
"PyExc_ChildProcessError" : 3
"PyExc_ConnectionAbortedError" : 3
"PyExc_ConnectionError" : 3
"PyExc_ConnectionRefusedError" : 3
"PyExc_ConnectionResetError" : 3
"PyExc_DeprecationWarning" : 2
"PyExc_EOFError" : 2
"PyExc_EncodingWarning" : 1
"PyExc_EnvironmentError" : 2
"PyExc_Exception" : 2
"PyExc_FileExistsError" : 3
"PyExc_FileNotFoundError" : 3
"PyExc_FloatingPointError" : 2
"PyExc_FutureWarning" : 2
"PyExc_GeneratorExit" : 2
"PyExc_IOError" : 2
"PyExc_ImportError" : 2
"PyExc_ImportWarning" : 2
"PyExc_IndentationError" : 2
"PyExc_IndexError" : 2
"PyExc_InterruptedError" : 3
"PyExc_IsADirectoryError" : 3
"PyExc_KeyError" : 2
"PyExc_KeyboardInterrupt" : 2
"PyExc_LookupError" : 2
"PyExc_MemoryError" : 2
"PyExc_ModuleNotFoundError" : 3
"PyExc_NameError" : 2
"PyExc_NotADirectoryError" : 3
"PyExc_NotImplementedError" : 2
"PyExc_OSError" : 2
"PyExc_OverflowError" : 2
"PyExc_PendingDeprecationWarning" : 2
"PyExc_PermissionError" : 3
"PyExc_ProcessLookupError" : 3
"PyExc_ReferenceError" : 2
"PyExc_ResourceWarning" : 3
"PyExc_RuntimeError" : 3
"PyExc_RuntimeWarning" : 3
"PyExc_StopAsyncIteration" : 3
"PyExc_StopIteration" : 2
"PyExc_SyntaxError" : 2
"PyExc_SyntaxWarning" : 2
"PyExc_SystemExit" : 2
"PyExc_TabError" : 2
"PyExc_TimeoutError" : 3
"PyExc_UnboundLocalError" : 2
"PyExc_UnicodeDecodeError" : 2
"PyExc_UnicodeEncodeError" : 2
"PyExc_UnicodeError" : 2
"PyExc_UnicodeTranslateError" : 2
"PyExc_UnicodeWarning" : 2
"PyExc_UserWarning" : 2
"PyExc_Warning" : 3
"PyExc_WindowsError" : 2
"PyException_GetCause()" : 1
"PyException_GetContext()" : 1
"PyException_GetTraceback()" : 1
"PyException_SetCause()" : 1
"PyException_SetContext()" : 1
"PyFile_FromFd()" : 1
"PyFile_GetLine()" : 1
"PyFile_WriteObject()" : 1
"PyFile_WriteString()" : 1
"PyFilter_Type" : 1
"PyFloat_FromDouble()" : 1
"PyFloat_FromString()" : 1
"PyFloat_Type" : 1
"PyFrozenSet_Type" : 1
"PyGILState_GetThisThreadState()" : 1
"PyGILState_Release()" : 8
"PyGILState_STATE" : 1
"PyGetSetDescr_Type" : 1
"PyImport_GetImporter()" : 1
"PyImport_GetMagicTag()" : 1
"PyImport_GetModuleDict()" : 1
"PyInterpreterState_Clear()" : 2
"PyInterpreterState_Delete()" : 1
"PyInterpreterState_GetDict()" : 1
"PyIter_Next()" : 3
"PyListIter_Type" : 1
"PyListRevIter_Type" : 1
"PyList_Append()" : 1
"PyList_AsTuple()" : 1
"PyList_GetSlice()" : 1
"PyList_Insert()" : 1
"PyList_Reverse()" : 1
"PyList_SetSlice()" : 1
"PyList_Sort()" : 1
"PyList_Type" : 1
"PyLongObject" : 31
"PyLongRangeIter_Type" : 1
"PyLong_AsDouble()" : 1
"PyLong_AsLongLong()" : 1
"PyLong_AsSize_t()" : 1
"PyLong_AsSsize_t()" : 1
"PyLong_AsUnsignedLong()" : 1
"PyLong_AsUnsignedLongMask()" : 1
"PyLong_AsVoidPtr()" : 2
"PyLong_FromSsize_t()" : 1
"PyLong_FromString()" : 1
"PyLong_FromVoidPtr()" : 2
"PyLong_GetInfo()" : 1
"PyLong_Type" : 1
"PyMap_Type" : 1
"PyMapping_Check()" : 2
"PyMapping_GetItemString()" : 2
"PyMapping_HasKey()" : 1
"PyMapping_HasKeyString()" : 1
"PyMapping_Length()" : 1
"PyMapping_SetItemString()" : 1
"PyMemberDescr_Type" : 1
"PyMemoryView_FromObject()" : 1
"PyMemoryView_GetContiguous()" : 1
"PyMemoryView_Type" : 1
"PyMethodDescr_Type" : 1
"PyModuleDef_Base" : 1
"PyModuleDef_Init()" : 1
"PyModuleDef_Type" : 1
"PyModule_AddFunctions()" : 1
"PyModule_GetDef()" : 1
"PyModule_GetDict()" : 1
"PyModule_GetName()" : 1
"PyModule_SetDocString()" : 1
"PyNumber_Absolute()" : 1
"PyNumber_Add()" : 1
"PyNumber_AsSsize_t()" : 1
"PyNumber_Divmod()" : 1
"PyNumber_FloorDivide()" : 1
"PyNumber_InPlaceAdd()" : 1
"PyNumber_InPlaceFloorDivide()" : 1
"PyNumber_InPlaceLshift()" : 1
"PyNumber_InPlaceMultiply()" : 1
"PyNumber_InPlacePower()" : 1
"PyNumber_InPlaceRemainder()" : 1
"PyNumber_InPlaceRshift()" : 1
"PyNumber_InPlaceTrueDivide()" : 1
"PyNumber_InPlaceXor()" : 1
"PyNumber_Invert()" : 1
"PyNumber_Lshift()" : 1
"PyNumber_Multiply()" : 1
"PyNumber_Negative()" : 1
"PyNumber_Positive()" : 1
"PyNumber_Power()" : 1
"PyNumber_Remainder()" : 1
"PyNumber_Rshift()" : 1
"PyNumber_TrueDivide()" : 1
"PyOS_InputHook" : 1
"PyOS_double_to_string()" : 1
"PyOS_mystricmp()" : 1
"PyOS_mystrnicmp()" : 1
"PyOS_strtol()" : 1
"PyOS_strtoul()" : 1
"PyObject.ob_type" : 1
"PyObject_ASCII()" : 1
"PyObject_AsFileDescriptor()" : 1
"PyObject_Bytes()" : 1
"PyObject_CallFunctionObjArgs()" : 3
"PyObject_ClearWeakRefs()" : 2
"PyObject_CopyData()" : 1
"PyObject_DelItem()" : 5
"PyObject_DelItemString()" : 1
"PyObject_Dir()" : 1
"PyObject_Format()" : 2
"PyObject_GenericGetAttr()" : 4
"PyObject_GenericSetAttr()" : 3
"PyObject_GenericSetDict()" : 1
"PyObject_GetAIter()" : 1
"PyObject_GetAttr()" : 5
"PyObject_GetIter()" : 1
"PyObject_HasAttr()" : 1
"PyObject_HasAttrString()" : 1
"PyObject_Length()" : 1
"PyObject_Not()" : 1
"PyObject_SelfIter()" : 1
"PyObject_SetAttr()" : 1
"PyObject_Size()" : 3
"PyObject_Type()" : 1
"PyProperty_Type" : 1
"PyRangeIter_Type" : 1
"PyRange_Type" : 1
"PyReversed_Type" : 1
"PySequence_Check()" : 3
"PySequence_Concat()" : 3
"PySequence_Contains()" : 3
"PySequence_Count()" : 1
"PySequence_DelSlice()" : 1
"PySequence_Fast()" : 4
"PySequence_GetSlice()" : 2
"PySequence_In()" : 1
"PySequence_InPlaceConcat()" : 3
"PySequence_InPlaceRepeat()" : 3
"PySequence_Index()" : 1
"PySequence_List()" : 1
"PySequence_Repeat()" : 3
"PySequence_SetSlice()" : 1
"PySequence_Tuple()" : 1
"PySetIter_Type" : 1
"PySet_Clear()" : 1
"PySet_Pop()" : 1
"PySet_Type" : 1
"PySlice_GetIndices()" : 2
"PySlice_New()" : 1
"PySlice_Type" : 1
"PyState_RemoveModule()" : 1
"PySuper_Type" : 1
"PySys_FormatStderr()" : 1
"PySys_ResetWarnOptions()" : 2
"PySys_SetObject()" : 1
"PySys_WriteStderr()" : 1
"PyThreadState_Get()" : 2
"PyThreadState_GetDict()" : 1
"PyThreadState_New()" : 1
"PyThreadState_Swap()" : 2
"PyThread_GetInfo()" : 1
"PyThread_ReInitTLS()" : 1
"PyThread_acquire_lock()" : 1
"PyThread_acquire_lock_timed()" : 1
"PyThread_allocate_lock()" : 1
"PyThread_create_key()" : 2
"PyThread_delete_key()" : 1
"PyThread_delete_key_value()" : 1
"PyThread_exit_thread()" : 1
"PyThread_free_lock()" : 1
"PyThread_get_key_value()" : 1
"PyThread_get_stacksize()" : 1
"PyThread_init_thread()" : 1
"PyThread_release_lock()" : 1
"PyThread_set_stacksize()" : 1
"PyThread_tss_alloc()" : 2
"PyThread_tss_create()" : 4
"PyThread_tss_delete()" : 2
"PyThread_tss_free()" : 1
"PyThread_tss_get()" : 2
"PyThread_tss_is_created()" : 1
"PyThread_tss_set()" : 2
"PyTraceBack_Here()" : 1
"PyTraceBack_Print()" : 1
"PyTraceBack_Type" : 1
"PyTupleIter_Type" : 1
"PyTuple_GetSlice()" : 1
"PyTuple_New()" : 1
"PyTuple_Type" : 1
"PyType_ClearCache()" : 1
"PyType_IsSubtype()" : 1
"PyType_Modified()" : 1
"PyType_Slot" : 2
"PyType_Spec" : 4
"PyType_Type" : 5
"PyUnicodeDecodeError_Create()" : 1
"PyUnicodeDecodeError_GetEncoding()" : 1
"PyUnicodeDecodeError_GetEnd()" : 1
"PyUnicodeDecodeError_GetObject()" : 1
"PyUnicodeDecodeError_GetReason()" : 1
"PyUnicodeDecodeError_GetStart()" : 1
"PyUnicodeDecodeError_SetEnd()" : 1
"PyUnicodeDecodeError_SetReason()" : 1
"PyUnicodeDecodeError_SetStart()" : 1
"PyUnicodeEncodeError_GetEncoding()" : 1
"PyUnicodeEncodeError_GetEnd()" : 1
"PyUnicodeEncodeError_GetObject()" : 1
"PyUnicodeEncodeError_GetReason()" : 1
"PyUnicodeEncodeError_GetStart()" : 1
"PyUnicodeEncodeError_SetEnd()" : 1
"PyUnicodeEncodeError_SetReason()" : 1
"PyUnicodeEncodeError_SetStart()" : 1
"PyUnicodeIter_Type" : 1
"PyUnicodeTranslateError_GetEnd()" : 1
"PyUnicodeTranslateError_GetObject()" : 1
"PyUnicodeTranslateError_GetReason()" : 1
"PyUnicodeTranslateError_GetStart()" : 1
"PyUnicodeTranslateError_SetEnd()" : 1
"PyUnicodeTranslateError_SetReason()" : 1
"PyUnicodeTranslateError_SetStart()" : 1
"PyUnicode_Append()" : 1
"PyUnicode_AppendAndDel()" : 1
"PyUnicode_AsCharmapString()" : 1
"PyUnicode_AsEncodedString()" : 1
"PyUnicode_AsUTF16String()" : 1
"PyUnicode_AsUTF32String()" : 1
"PyUnicode_BuildEncodingMap()" : 1
"PyUnicode_Contains()" : 1
"PyUnicode_Count()" : 1
"PyUnicode_DecodeASCII()" : 1
"PyUnicode_DecodeCharmap()" : 1
"PyUnicode_DecodeCodePageStateful()" : 1
"PyUnicode_DecodeFSDefault()" : 1
"PyUnicode_DecodeLatin1()" : 1
"PyUnicode_DecodeLocale()" : 1
"PyUnicode_DecodeMBCS()" : 2
"PyUnicode_DecodeMBCSStateful()" : 2
"PyUnicode_DecodeRawUnicodeEscape()" : 1
"PyUnicode_DecodeUTF16()" : 2
"PyUnicode_DecodeUTF16Stateful()" : 2
"PyUnicode_DecodeUTF32()" : 2
"PyUnicode_DecodeUTF32Stateful()" : 2
"PyUnicode_DecodeUTF7()" : 2
"PyUnicode_DecodeUTF7Stateful()" : 1
"PyUnicode_DecodeUTF8()" : 2
"PyUnicode_DecodeUTF8Stateful()" : 1
"PyUnicode_DecodeUnicodeEscape()" : 1
"PyUnicode_Find()" : 1
"PyUnicode_Format()" : 1
"PyUnicode_FromEncodedObject()" : 1
"PyUnicode_FromObject()" : 1
"PyUnicode_FromOrdinal()" : 1
"PyUnicode_FromStringAndSize()" : 1
"PyUnicode_GetDefaultEncoding()" : 1
"PyUnicode_InternFromString()" : 1
"PyUnicode_Partition()" : 1
"PyUnicode_RPartition()" : 1
"PyUnicode_RSplit()" : 1
"PyUnicode_Replace()" : 1
"PyUnicode_Resize()" : 1
"PyUnicode_RichCompare()" : 1
"PyUnicode_Split()" : 1
"PyUnicode_Splitlines()" : 1
"PyUnicode_Translate()" : 1
"PyUnicode_Type" : 2
"PyVarObject" : 6
"PyVarObject.ob_base" : 1
"PyVarObject.ob_size" : 1
"PyWeakref_NewProxy()" : 1
"PyWrapperDescr_Type" : 1
"PyWrapper_New()" : 1
"PyZip_Type" : 1
"Py_BLOCK_THREADS" : 1
"Py_DecRef()" : 1
"Py_FileSystemDefaultEncoding" : 11
"Py_GetCompiler()" : 2
"Py_GetCopyright()" : 2
"Py_GetPlatform()" : 2
"Py_GetRecursionLimit()" : 1
"Py_GetVersion()" : 2
"Py_HasFileSystemDefaultEncoding" : 1
"Py_IncRef()" : 1
"Py_InitializeEx()" : 1
"Py_Is()" : 1
"Py_MakePendingCalls()" : 1
"Py_NewInterpreter()" : 2
"Py_ReprEnter()" : 3
"Py_ReprLeave()" : 1
"Py_SetRecursionLimit()" : 1
"Py_UNBLOCK_THREADS" : 1
"Py_VaBuildValue()" : 1
"Py_intptr_t" : 1
"Py_uintptr_t" : 1
"allocfunc" : 3
"binaryfunc" : 30
"descrgetfunc" : 3
"descrsetfunc" : 3
"getattrfunc" : 3
"getattrofunc" : 3
"getiterfunc" : 3
"hashfunc" : 3
"initproc" : 3
"inquiry" : 6
"iternextfunc" : 3
"lenfunc" : 4
"newfunc" : 3
"objobjargproc" : 3
"objobjproc" : 3
"reprfunc" : 4
"richcmpfunc" : 3
"setattrfunc" : 3
"setattrofunc" : 3
"ssizeargfunc" : 5
"ssizeobjargproc" : 3
"ssizessizeargfunc" : 1
"ssizessizeobjargproc" : 1
"ternaryfunc" : 5
"traverseproc" : 3
"unaryfunc" : 12
"visitproc" : 2
struct).* : 5
PyType_Type : 1
PyType_Check(PyObject : 1
PyType_CheckExact(PyObject : 1
PyType_ClearCache() : 1
PyType_GetFlags(PyTypeObject : 1
"Py_LIMITED_API"; : 1
PyType_Modified(PyTypeObject : 1
PyType_HasFeature(PyTypeObject : 1
feature) : 1
PyType_IS_GC(PyTypeObject : 1
detector; : 1
PyType_IsSubtype(PyTypeObject : 1
"__subclasscheck__()" : 4
*PyType_GenericAlloc(PyTypeObject : 1
nitems) : 2
*PyType_GenericNew(PyTypeObject : 1
PyType_Ready(PyTypeObject : 1
*PyType_GetName(PyTypeObject : 1
*PyType_GetQualName(PyTypeObject : 1
*PyType_GetSlot(PyTypeObject : 1
slot) : 2
3.4.* : 1
"PyType_Slot.slot" : 1
*slot* : 1
*PyType_GetModule(PyTypeObject : 1
"PyType_GetModule(Py_TYPE(self))" : 1
*subclass* : 8
*PyType_GetModuleState(PyTypeObject : 1
*PyType_GetModuleByDef(PyTypeObject : 1
"nb_add") : 1
*PyType_FromModuleAndSpec(PyObject : 1
PyType_Spec : 2
*bases) : 2
("Py_TPFLAGS_HEAPTYPE") : 2
*Py_tp_bases* : 1
*Py_tp_base* : 1
subclasses; : 3
*PyType_FromSpecWithBases(PyType_Spec : 1
"PyType_FromModuleAndSpec(NULL : 1
bases)" : 1
*PyType_FromSpec(PyType_Spec : 1
"PyType_FromSpecWithBases(spec : 1
*PyType_Spec.name : 1
PyType_Spec.basicsize : 1
PyType_Spec.itemsize : 1
"PyTypeObject.tp_itemsize" : 1
PyType_Spec.flags : 1
PyType_Slot : 2
*PyType_Spec.slots : 1
Terminated : 1
PyType_Slot.slot : 1
"PyAsyncMethods" : 2
"Py_" : 1
"Py_tp_dealloc" : 1
"PyTypeObject.tp_dealloc" : 1
"Py_nb_add" : 1
"PyNumberMethods.nb_add" : 1
"Py_sq_length" : 1
"PySequenceMethods.sq_length" : 1
"PyType_Slot": : 1
"tp_mro" : 1
"tp_cache" : 1
"tp_subclasses" : 1
"tp_weaklist" : 2
PyMemberDef) : 3
"tp_dictoffset" : 8
"Py_tp_bases" : 2
"Py_tp_base" : 1
"PyBufferProcs" : 2
*PyType_Slot.pfunc : 1
"Py_tp_doc" : 1
"PyNone_Check()" : 1
*Py_None : 1
Py_RETURN_NONE : 1
expansions : 3
(Only : 9
ABI.)* : 2
"release" : 5
"ob_size" : 10
"Py_SIZE" : 1
ob_base; : 2
Py_Is(PyObject : 1
*x : 1
*y) : 1
Py_IsNone(PyObject : 1
*x) : 3
Py_IsTrue(PyObject : 1
Py_IsFalse(PyObject : 1
False" : 4
*Py_TYPE(PyObject : 1
Py_IS_TYPE(PyObject : 1
"Py_TYPE(o) : 1
Py_SET_TYPE(PyObject : 1
Py_REFCNT(PyObject : 1
Py_SET_REFCNT(PyObject : 1
*refcnt* : 1
Py_SIZE(PyVarObject : 1
PyVarObject* : 1
Py_SET_SIZE(PyVarObject : 1
PyObject_HEAD_INIT(type) : 1
_PyObject_EXTRA_INIT : 2
PyVarObject_HEAD_INIT(type : 1
*PyCFunction(PyObject : 1
*args); : 1
PyCFunctionWithKeywords : 1
METH_KEYWORDS" : 6
*PyCFunctionWithKeywords(PyObject : 1
*kwargs); : 3
_PyCFunctionFast : 1
*_PyCFunctionFast(PyObject : 1
nargs); : 1
_PyCFunctionFastWithKeywords : 1
"METH_FASTCALL : 3
*_PyCFunctionFastWithKeywords(PyObject : 1
*kwnames); : 1
"METH_METHOD : 2
METH_FASTCALL : 5
*PyCMethod(PyObject : 1
*defining_class : 3
*kwnames) : 6
*ml_name : 1
ml_meth : 1
ml_flags : 1
*ml_doc : 1
"ml_meth" : 1
"ml_flags" : 1
bitfield : 2
conventions: : 1
*args*) : 4
"_PyCFunctionFast" : 1
array) : 2
"_PyCFunctionFastWithKeywords" : 1
METH_METHOD : 1
*defining : 2
"Py_UNUSED" : 1
""O"" : 1
METH_CLASS : 1
methods* : 5
METH_STATIC : 1
*static : 1
METH_COEXIST : 1
*METH_COEXIST* : 1
*sq_contains* : 1
PyCFunctions : 1
+--------------------+-----------------+---------------------------------+ : 6
|====================|=================|=================================| : 1
"T_" : 1
+-----------------+--------------------+ : 19
|=================|====================| : 1
T_SHORT : 1
T_LONG : 1
T_FLOAT : 1
T_DOUBLE : 1
T_STRING : 1
T_OBJECT : 1
T_CHAR : 1
T_BYTE : 1
T_UBYTE : 1
T_UINT : 1
T_USHORT : 1
T_ULONG : 1
T_BOOL : 1
T_LONGLONG : 1
T_ULONGLONG : 1
T_PYSSIZET : 2
"T_OBJECT" : 5
"T_OBJECT_EX" : 5
"T_STRING" : 2
"__dictoffset__" : 1
"__weaklistoffset__" : 1
"__vectorcalloffset__" : 1
"T_PYSSIZET" : 1
spam_type_members[] : 1
{"__dictoffset__" : 1
offsetof(Spam_object : 1
READONLY} : 1
*PyMember_GetOne(const : 1
*obj_addr : 2
*obj_addr* : 2
PyMember_SetOne(char : 1
*m : 1
property-like : 1
"PyTypeObject.tp_getset" : 1
+---------------+--------------------+-------------------------------------+ : 6
|===============|====================|=====================================| : 1
"get" : 6
"closure"): : 2
*(*getter)(PyObject : 1
*); : 5
(*setter)(PyObject : 1
PyOS_snprintf(char : 1
*snprintf(3)* : 1
PyOS_vsnprintf(char : 1
va) : 1
*va* : 1
*vsnprintf(3)* : 1
"str[size-1]" : 3
"'\0'" : 6
"'\0'") : 1
"str : 2
INT_MAX" : 1
snprintf(NULL : 1
(*rv*) : 1
*rv* : 2
"str[rv]") : 1
"rv : 3
"something : 1
happened." : 1
PyOS_string_to_double(const : 1
**endptr : 1
*overflow_exception) : 1
"endptr" : 1
"-1.0" : 9
endptr : 1
"*endptr" : 3
unconverted : 1
""1e500"" : 1
"overflow_exception" : 2
"Py_HUGE_VAL" : 1
sign) : 4
*PyOS_double_to_string(double : 1
format_code : 1
*ptype) : 1
*format_code* : 2
"'E'" : 5
"'g'" : 10
"'G'" : 7
"Py_DTSF_SIGN" : 2
"Py_DTSF_ADD_DOT_0" : 2
"Py_DTSF_ALT" : 2
or-ed : 1
together: : 4
"alternate" : 3
"Py_DTST_FINITE" : 1
"Py_DTST_INFINITE" : 1
"Py_DTST_NAN" : 1
signifying : 5
PyOS_stricmp(const : 1
*s1 : 2
*s2) : 1
"strcmp()" : 2
PyOS_strnicmp(const : 1
*s2 : 1
"strncmp()" : 1
PyFunctionObject : 1
PyFunction_Type : 1
PyFunction_Check(PyObject : 1
"PyFunction_Type") : 1
*PyFunction_New(PyObject : 1
*code : 5
*globals) : 1
*code* : 34
*__module__* : 2
*__qualname__* : 1
*PyFunction_NewWithQualName(PyObject : 1
"PyFunction_New()" : 1
*PyFunction_GetCode(PyObject : 1
*PyFunction_GetGlobals(PyObject : 1
*PyFunction_GetModule(PyObject : 1
*NULL* : 24
*PyFunction_GetDefaults(PyObject : 1
PyFunction_SetDefaults(PyObject : 1
*defaults) : 1
*defaults* : 10
*PyFunction_GetClosure(PyObject : 1
PyFunction_SetClosure(PyObject : 1
*closure* : 3
*PyFunction_GetAnnotations(PyObject : 1
PyFunction_SetAnnotations(PyObject : 1
*annotations) : 1
************************************ : 7
"containers" : 1
"tp_clear" : 27
invalidated : 10
subclasses.When : 1
*PyObject_GC_New(TYPE : 1
*PyObject_GC_NewVar(TYPE : 1
*PyObject_GC_Resize(TYPE : 1
PyObject_GC_Track(PyObject : 1
PyObject_IS_GC(PyObject : 1
PyObject_GC_IsTracked(PyObject : 1
"gc.is_tracked()" : 1
PyObject_GC_IsFinalized(PyObject : 1
PyObject_GC_Del(void : 1
PyObject_GC_UnTrack(void : 1
("tp_dealloc" : 1
(*visitproc)(PyObject : 1
visitor : 13
detection; : 1
(*traverseproc)(PyObject : 1
Traversal : 1
*arg*: : 1
Py_VISIT(PyObject : 1
my_traverse(Noddy : 1
Py_VISIT(self->foo); : 1
Py_VISIT(self->bar); : 1
(*inquiry)(PyObject : 1
PyGC_Collect(void) : 1
unconditionally.) : 1
PyGC_Enable(void) : 1
"gc.enable()" : 1
PyGC_Disable(void) : 1
"gc.disable()" : 3
PyGC_IsEnabled(void) : 1
"gc.isenabled()" : 1
PySlice_Type : 1
PySlice_Check(PyObject : 1
*PySlice_New(PyObject : 1
*start : 7
*stop : 5
*step) : 3
PySlice_GetIndices(PyObject : 1
*slice : 3
Retrieve : 24
*slice* : 6
Treats : 1
"PySliceObject*" : 2
PySlice_GetIndicesEx(PyObject : 1
*step : 1
*slicelength) : 1
Usable : 1
*slicelength* : 1
Out : 6
(PySlice_GetIndicesEx(slice : 1
&start : 3
&stop : 3
&step : 1
&slicelength) : 1
(PySlice_Unpack(slice : 1
&step) : 1
slicelength : 1
PySlice_AdjustIndices(length : 1
3.6.1: : 4
PySlice_Unpack(PyObject : 1
Silently : 1
boost : 3
"-PY_SSIZE_T_MAX" : 2
PySlice_AdjustIndices(Py_ssize_t : 1
step) : 4
start/end : 3
Doesn't : 1
*Py_Ellipsis : 1
"PyDict_Check()" : 1
"family : 1
tree" : 1
chapter; : 1
"PyType_*" : 1
examined : 10
at-a-glance : 1
insight : 1
+--------------------+--------------------+--------------------+----+----+----+----+ : 49
methods/attrs : 1
+----+----+----+----+ : 1
O : 21
|====================|====================|====================|====|====|====|====| : 1
<R> : 1
"tp_vectorcall_of : 1
fset" : 1
("tp_getattr") : 1
__getattribute__ : 3
("tp_setattr") : 1
__setattr__ : 2
__delattr__ : 2
"tp_as_sequence" : 3
"PySequenceMethod : 1
s" : 8
"tp_as_mapping" : 3
"tp_as_buffer" : 2
__lt__ : 1
__le__ : 1
__gt__ : 1
__ge__ : 1
"tp_weaklistoffse : 1
__next__ : 1
__base__ : 1
"tp_descr_get" : 3
__get__ : 1
"tp_descr_set" : 2
__set__ : 2
__delete__ : 1
"freefunc" : 2
"tp_is_gc" : 1
<"tp_bases"> : 1
__bases__ : 1
<"tp_mro"> : 1
__mro__ : 1
["tp_cache"] : 1
["tp_subclasses"] : 1
__subclasses__ : 1
["tp_weaklist"] : 1
("tp_del") : 1
["tp_version_tag"] : 1
"vectorcallfunc" : 4
**()**: : 1
(effectively) : 1
**<>**: : 1
**[]**: : 1
**<R>** : 1
prefix) : 3
(must : 2
non-"NULL") : 3
Columns: : 1
**"O"**: : 1
**"T"**: : 1
**"D"**: : 1
PyType_Ready : 4
("I") : 1
**"I"**: : 1
*PyType_Ready* : 1
sub-struct : 1
slots; : 1
slot's : 5
complicated; : 1
+----------------------------+-------------------+--------------+ : 58
|============================|===================|==============| : 1
"am_await" : 1
__await__ : 1
"am_aiter" : 1
"am_anext" : 1
"am_send" : 2
"sendfunc" : 1
"nb_add" : 3
__radd__ : 2
"nb_inplace_add" : 2
__iadd__ : 2
"nb_subtract" : 1
__sub__ : 1
__rsub__ : 1
"nb_inplace_subtract" : 1
__isub__ : 1
"nb_multiply" : 2
__rmul__ : 1
"nb_inplace_multiply" : 2
__imul__ : 2
"nb_remainder" : 1
__mod__ : 1
"nb_inplace_remainder" : 1
__imod__ : 1
"nb_divmod" : 1
__divmod__ : 1
__rdivmod__ : 1
"nb_power" : 1
__pow__ : 1
__rpow__ : 1
"nb_inplace_power" : 1
__ipow__ : 1
"nb_negative" : 1
__neg__ : 1
"nb_positive" : 1
__pos__ : 1
"nb_absolute" : 1
__abs__ : 2
"nb_invert" : 1
__invert__ : 1
"nb_lshift" : 1
__lshift__ : 1
__rlshift__ : 1
"nb_inplace_lshift" : 1
__ilshift__ : 1
"nb_rshift" : 1
__rshift__ : 1
__rrshift__ : 1
"nb_inplace_rshift" : 1
__irshift__ : 1
"nb_and" : 1
__and__ : 1
__rand__ : 1
"nb_inplace_and" : 1
__iand__ : 1
"nb_xor" : 1
__xor__ : 1
__rxor__ : 1
"nb_inplace_xor" : 1
__ixor__ : 1
"nb_or" : 1
__or__ : 1
__ror__ : 1
"nb_inplace_or" : 1
__ior__ : 1
"nb_int" : 1
__int__ : 1
"nb_reserved" : 2
"nb_float" : 1
"nb_floor_divide" : 1
__floordiv__ : 1
"nb_inplace_floor_divide" : 1
__ifloordiv : 1
__ : 8
"nb_true_divide" : 1
__truediv__ : 1
"nb_inplace_true_divide" : 1
__itruediv__ : 1
"nb_matrix_multiply" : 1
__matmul__ : 1
__rmatmul__ : 1
"nb_inplace_matrix_multip : 1
__imatmul__ : 1
ly" : 1
"mp_length" : 1
"mp_ass_subscript" : 2
__setitem__ : 2
__delitem__ : 2
"sq_concat" : 1
"sq_repeat" : 1
"sq_ass_item" : 2
"sq_contains" : 1
"sq_inplace_concat" : 1
"sq_inplace_repeat" : 1
"getbufferproc()" : 1
"releasebufferpr : 1
oc()" : 1
+-------------------------------+-------------------------------+------------------------+ : 29
|===============================|===============================|========================| : 1
"getbufferproc" : 1
"releasebufferproc" : 1
"Include/object.h" : 1
there: : 1
metatype) : 1
PyObject.ob_refcnt : 1
"PyObject_HEAD_INIT" : 4
**Inheritance:** : 62
*PyObject.ob_type : 1
metatype : 4
Foo_Type.ob_type : 1
&PyType_Type; : 1
*PyObject._ob_next : 1
*PyObject._ob_prev : 1
PyVarObject.ob_size : 1
defaults.) : 1
*PyTypeObject.tp_name : 1
Pointer : 11
"M" : 9
"P" : 12
""P.Q.M.T"" : 1
*tp_name* : 1
documentations : 2
"PyTypeObject()" : 1
"tp_itemsize") : 1
PyTypeObject.tp_basicsize : 1
PyTypeObject.tp_itemsize : 1
fixed-length : 11
"abs(ob_size)" : 1
"PyObject_VAR_HEAD" : 1
(whichever : 1
struct) : 1
"_ob_prev" : 1
"_ob_next" : 1
"sizeof" : 3
alignment: : 1
"sizeof(double)" : 2
"double") : 1
PyTypeObject.tp_dealloc : 1
tp_dealloc(PyObject : 1
*self); : 11
subtypable : 1
(doesn't : 2
permissible : 5
"PyObject_VarNew()" : 1
foo_dealloc(foo_object : 2
Py_CLEAR(self->ref); : 1
*)self); : 1
*tp : 1
Py_TYPE(self); : 1
tp->tp_free(self); : 1
Py_DECREF(tp); : 1
PyTypeObject.tp_vectorcall_offset : 1
per-instance : 3
*vectorcallfunc* : 3
"PyVectorcall_Call()" : 3
"__call__" : 6
PyTypeObject.tp_getattr : 1
get-attribute-string : 1
Group: : 9
"tp_getattro": : 1
subtype's : 7
PyTypeObject.tp_setattr : 1
"tp_setattro": : 1
*PyTypeObject.tp_as_async : 1
"tp_compare" : 1
PyTypeObject.tp_repr : 1
"PyObject_Repr()": : 1
*tp_repr(PyObject : 1
"'<'" : 12
"'>'" : 10
**Default:** : 14
"<%s : 1
%p>" : 1
*PyTypeObject.tp_as_number : 1
*PyTypeObject.tp_as_sequence : 1
*PyTypeObject.tp_as_mapping : 1
PyTypeObject.tp_hash : 1
"PyObject_Hash()": : 1
tp_hash(PyObject : 1
(*and* : 1
collections.Hashable)" : 1
converse : 3
"tp_richcompare": : 1
PyTypeObject.tp_call : 1
"PyObject_Call()": : 1
*tp_call(PyObject : 2
PyTypeObject.tp_str : 1
handler.) : 1
"PyObject_Str()": : 1
*tp_str(PyObject : 1
"friendly" : 1
PyTypeObject.tp_getattro : 1
get-attribute : 1
"PyObject_GetAttr()": : 1
*tp_getattro(PyObject : 1
*attr); : 1
"tp_getattr": : 1
PyTypeObject.tp_setattro : 1
"PyObject_SetAttr()": : 1
tp_setattro(PyObject : 1
*attr : 3
*value); : 2
"tp_setattr": : 1
*PyTypeObject.tp_as_buffer : 1
PyTypeObject.tp_flags : 1
situations; : 1
"tp_as_buffer") : 1
valid; : 2
guards : 3
pertain : 2
"Py_TPFLAGS_DEFAULT : 1
Py_TPFLAGS_BASETYPE" : 1
**Bit : 1
Masks:** : 1
masks : 2
defined; : 6
ORed : 11
*tp* : 2
"tp->tp_flags : 1
Py_TPFLAGS_HEAPTYPE : 1
INCREF'ed : 2
DECREF'ed : 1
subtypes; : 1
ob_type : 1
DECREF'ed) : 1
?? : 5
subtyped : 1
"final" : 1
Py_TPFLAGS_READY : 1
Py_TPFLAGS_READYING : 1
GC-related : 1
bitmask : 18
bits: : 1
"Py_TPFLAGS_HAVE_STACKLESS_EXTENSION" : 1
Py_TPFLAGS_METHOD_DESCRIPTOR : 1
"type(meth)" : 1
then: : 1
"meth.__get__(obj : 1
cls)(*args : 2
**kwds)" : 16
"meth(obj : 1
"meth.__get__(None : 1
"meth(*args : 1
"obj.meth()": : 1
"bound : 1
method" : 2
"obj.meth" : 1
Py_TPFLAGS_LONG_SUBCLASS : 1
Py_TPFLAGS_LIST_SUBCLASS : 1
Py_TPFLAGS_TUPLE_SUBCLASS : 1
Py_TPFLAGS_BYTES_SUBCLASS : 1
Py_TPFLAGS_UNICODE_SUBCLASS : 1
Py_TPFLAGS_DICT_SUBCLASS : 1
Py_TPFLAGS_BASE_EXC_SUBCLASS : 1
Py_TPFLAGS_TYPE_SUBCLASS : 1
"PyLong_Check()" : 1
ins : 1
Py_TPFLAGS_HAVE_FINALIZE : 1
Py_TPFLAGS_HAVE_VECTORCALL : 1
Py_TPFLAGS_IMMUTABLETYPE : 1
Py_TPFLAGS_DISALLOW_INSTANTIATION : 2
"&PyBaseObject_Type" : 3
instantiable : 1
class*) : 1
Py_TPFLAGS_MAPPING : 1
exclusive; : 3
Py_TPFLAGS_SEQUENCE : 1
*PyTypeObject.tp_doc : 1
PyTypeObject.tp_traverse : 1
tp_traverse(PyObject : 1
*arg); : 1
"local_traverse()" : 2
local_traverse(localobject : 1
Py_VISIT(self->args); : 1
Py_VISIT(self->kw); : 1
Py_VISIT(self->dict); : 1
"self->key" : 1
"get_referents()" : 1
*owns* : 1
(what : 2
*tp_weaklist* : 1
weakreference : 1
alive) : 1
superclass) : 1
40217 : 1
bit: : 8
PyTypeObject.tp_clear : 1
tp_clear(PyObject : 1
prove : 6
local_clear(localobject : 1
Py_CLEAR(self->key); : 1
Py_CLEAR(self->args); : 1
Py_CLEAR(self->kw); : 1
Py_CLEAR(self->dict); : 1
delicate: : 1
reclamation : 1
PyTypeObject.tp_richcompare : 1
*tp_richcompare(PyObject : 1
*other : 1
op); : 1
"Py_False") : 1
"PyObject_RichCompare()": : 1
+------------------+--------------+ : 7
|==================|==============| : 1
Py_RETURN_RICHCOMPARE(VAL_A : 1
VAL_B : 2
VAL_A : 1
"tp_hash": : 1
PyTypeObject.tp_weaklistoffset : 1
(ignoring : 1
present); : 1
"PyWeakref_*" : 1
"tp_weaklist"; : 1
PyTypeObject.tp_iter : 1
"PyObject_GetIter()": : 1
*tp_iter(PyObject : 1
PyTypeObject.tp_iternext : 1
*tp_iternext(PyObject : 1
*PyTypeObject.tp_methods : 1
mechanism) : 5
*PyTypeObject.tp_members : 1
(fields : 1
slots) : 3
(members : 1
*PyTypeObject.tp_getset : 1
getset : 4
*PyTypeObject.tp_base : 1
"address : 1
constants" : 1
designators : 1
constants.However : 1
non-static : 1
"PyBaseObject_Type()" : 1
Compilers : 1
(gcc : 1
does) : 2
behavior.Consequently : 1
(obviously) : 1
*PyTypeObject.tp_dict : 1
"__add__()") : 1
PyTypeObject.tp_descr_get : 1
"descriptor : 1
get" : 2
tp_descr_get(PyObject : 1
*type); : 1
PyTypeObject.tp_descr_set : 1
tp_descr_set(PyObject : 1
PyTypeObject.tp_dictoffset : 1
"tp_dict"; : 1
"-4" : 1
regarded : 6
(Adding : 1
though.) : 2
PyTypeObject.tp_init : 1
tp_init(PyObject : 1
*kwds); : 2
PyTypeObject.tp_alloc : 1
*tp_alloc(PyTypeObject : 1
nitems); : 1
(subtypes : 2
PyTypeObject.tp_new : 1
*tp_new(PyTypeObject : 1
*subtype : 1
*subtype* : 14
"subtype->tp_alloc(subtype : 1
nitems)" : 1
thumb : 8
PyTypeObject.tp_free : 1
tp_free(void : 1
PyObject_Del : 1
PyTypeObject.tp_is_gc : 1
collectible : 3
non-collectible : 1
tp_is_gc(PyObject : 1
types.) : 1
*PyTypeObject.tp_bases : 1
"initialized" : 2
"slot" : 1
"tp_bases" : 1
*PyTypeObject.tp_mro : 1
inherited; : 1
*PyTypeObject.tp_cache : 1
*PyTypeObject.tp_subclasses : 1
*PyTypeObject.tp_weaklist : 1
PyTypeObject.tp_del : 1
PyTypeObject.tp_version_tag : 1
PyTypeObject.tp_finalize : 1
tp_finalize(PyObject : 1
Either : 19
local_finalize(PyObject : 1
*error_type : 1
*error_value : 1
*error_traceback; : 1
PyErr_Fetch(&error_type : 1
&error_value : 1
&error_traceback); : 1
PyErr_Restore(error_type : 1
error_value : 1
error_traceback); : 1
violate : 4
"Py_TPFLAGS_HAVE_FINALIZE" : 1
"Safe : 1
finalization" : 1
PyTypeObject.tp_vectorcall : 1
"type.__call__" : 1
subinterpreter-specific : 1
*heap-allocated : 1
*heap : 2
binaryfunc : 53
nb_add; : 1
nb_subtract; : 1
nb_multiply; : 1
nb_remainder; : 1
nb_divmod; : 1
nb_power; : 1
unaryfunc : 20
nb_negative; : 1
nb_positive; : 1
nb_absolute; : 1
nb_bool; : 1
nb_invert; : 1
nb_lshift; : 1
nb_rshift; : 1
nb_and; : 1
nb_xor; : 1
nb_or; : 1
nb_int; : 1
*nb_reserved; : 1
nb_float; : 1
nb_inplace_add; : 1
nb_inplace_subtract; : 1
nb_inplace_multiply; : 1
nb_inplace_remainder; : 1
nb_inplace_power; : 1
nb_inplace_lshift; : 1
nb_inplace_rshift; : 1
nb_inplace_and; : 1
nb_inplace_xor; : 1
nb_inplace_or; : 1
nb_floor_divide; : 1
nb_true_divide; : 1
nb_inplace_floor_divide; : 1
nb_inplace_true_divide; : 1
nb_index; : 1
nb_matrix_multiply; : 1
nb_inplace_matrix_multiply; : 1
PyNumberMethods; : 1
"nb_long" : 1
PyNumberMethods.nb_add : 1
PyNumberMethods.nb_subtract : 1
PyNumberMethods.nb_multiply : 1
PyNumberMethods.nb_remainder : 1
PyNumberMethods.nb_divmod : 1
PyNumberMethods.nb_power : 1
PyNumberMethods.nb_negative : 1
PyNumberMethods.nb_positive : 1
PyNumberMethods.nb_absolute : 1
PyNumberMethods.nb_bool : 1
PyNumberMethods.nb_invert : 1
PyNumberMethods.nb_lshift : 1
PyNumberMethods.nb_rshift : 1
PyNumberMethods.nb_and : 1
PyNumberMethods.nb_xor : 1
PyNumberMethods.nb_or : 1
PyNumberMethods.nb_int : 1
*PyNumberMethods.nb_reserved : 1
PyNumberMethods.nb_float : 1
PyNumberMethods.nb_inplace_add : 1
PyNumberMethods.nb_inplace_subtract : 1
PyNumberMethods.nb_inplace_multiply : 1
PyNumberMethods.nb_inplace_remainder : 1
PyNumberMethods.nb_inplace_power : 1
PyNumberMethods.nb_inplace_lshift : 1
PyNumberMethods.nb_inplace_rshift : 1
PyNumberMethods.nb_inplace_and : 1
PyNumberMethods.nb_inplace_xor : 1
PyNumberMethods.nb_inplace_or : 1
PyNumberMethods.nb_floor_divide : 1
PyNumberMethods.nb_true_divide : 1
PyNumberMethods.nb_inplace_floor_divide : 1
PyNumberMethods.nb_inplace_true_divide : 1
PyNumberMethods.nb_index : 1
PyNumberMethods.nb_matrix_multiply : 1
PyNumberMethods.nb_inplace_matrix_multiply : 1
lenfunc : 2
PyMappingMethods.mp_length : 1
PyMappingMethods.mp_subscript : 1
objobjargproc : 1
PyMappingMethods.mp_ass_subscript : 1
"PyObject_SetSlice()" : 1
"PyObject_DelSlice()" : 1
PySequenceMethods.sq_length : 1
PySequenceMethods.sq_concat : 1
ssizeargfunc : 3
PySequenceMethods.sq_repeat : 1
PySequenceMethods.sq_item : 1
ssizeobjargproc : 1
PySequenceMethods.sq_ass_item : 1
objobjproc : 1
PySequenceMethods.sq_contains : 1
traverses : 2
PySequenceMethods.sq_inplace_concat : 1
PySequenceMethods.sq_inplace_repeat : 1
PyBufferProcs.bf_getbuffer : 1
flags); : 1
view->obj : 6
Re-export: : 1
Redirect: : 1
react : 3
releasebufferproc : 1
PyBufferProcs.bf_releasebuffer : 1
*view); : 1
buffer- : 2
am_await; : 1
am_aiter; : 1
am_anext; : 1
sendfunc : 2
am_send; : 1
PyAsyncMethods; : 1
PyAsyncMethods.am_await : 1
*am_await(PyObject : 1
PyAsyncMethods.am_aiter : 1
*am_aiter(PyObject : 1
PyAsyncMethods.am_anext : 1
*am_anext(PyObject : 1
PyAsyncMethods.am_send : 1
PySendResult : 4
am_send(PyObject : 1
**result); : 1
*(*allocfunc)(PyTypeObject : 1
*cls : 2
"ob_refcnt" : 1
*nitems* : 2
"tp_basicsize : 1
nitems*tp_itemsize" : 1
"sizeof(void*)"; : 1
(*destructor)(PyObject*) : 1
(*freefunc)(void*) : 1
*(*newfunc)(PyObject* : 1
(*initproc)(PyObject* : 1
*(*reprfunc)(PyObject*) : 1
*(*getattrfunc)(PyObject : 1
*attr) : 2
(*setattrfunc)(PyObject : 1
*(*getattrofunc)(PyObject : 1
(*setattrofunc)(PyObject : 1
*(*descrgetfunc)(PyObject* : 1
(*descrsetfunc)(PyObject* : 1
(*hashfunc)(PyObject*) : 1
*(*richcmpfunc)(PyObject* : 1
*(*getiterfunc)(PyObject*) : 1
*(*iternextfunc)(PyObject*) : 1
(*lenfunc)(PyObject*) : 1
(*getbufferproc)(PyObject* : 1
Py_buffer* : 1
(*releasebufferproc)(PyObject* : 1
Py_buffer*) : 1
*(*unaryfunc)(PyObject*) : 1
*(*binaryfunc)(PyObject* : 1
(*sendfunc)(PyObject* : 1
PyObject**) : 1
*(*ternaryfunc)(PyObject* : 1
*(*ssizeargfunc)(PyObject* : 1
Py_ssize_t) : 1
(*ssizeobjargproc)(PyObject* : 1
(*objobjproc)(PyObject* : 1
(*objobjargproc)(PyObject* : 1
*data; : 2
MyObject; : 4
MyObject_Type : 5
"mymod.MyObject" : 5
sizeof(MyObject) : 4
PyDoc_STR("My : 3
myobj_new : 3
(destructor)myobj_dealloc : 3
.tp_repr : 3
(reprfunc)myobj_repr : 4
tp_itemsize : 1
tp_vectorcall_offset : 1
tp_getattr : 1
tp_setattr : 1
tp_as_async : 1
tp_repr : 1
tp_as_number : 1
tp_as_sequence : 1
tp_as_mapping : 1
tp_hash : 1
tp_call : 1
tp_str : 1
tp_getattro : 1
tp_setattro : 1
tp_as_buffer : 1
tp_doc : 1
tp_clear : 1
tp_richcompare : 1
tp_weaklistoffset : 1
tp_iter : 1
tp_iternext : 1
tp_methods : 1
tp_members : 1
tp_getset : 1
tp_base : 1
tp_dict : 1
tp_descr_get : 1
tp_descr_set : 1
tp_dictoffset : 1
tp_alloc : 1
hashing: : 1
*inst_dict; : 1
offsetof(MyObject : 2
.tp_dictoffset : 1
inst_dict) : 1
(traverseproc)myobj_traverse : 1
(inquiry)myobj_clear : 1
.tp_alloc : 1
.tp_hash : 1
(hashfunc)myobj_hash : 1
.tp_richcompare : 1
PyBaseObject_Type.tp_richcompare : 1
func) : 2
raw; : 1
*extra; : 1
MyStr; : 1
MyStr_Type : 1
"mymod.MyStr" : 1
sizeof(MyStr) : 1
.tp_base : 1
&PyUnicode_Type : 1
PyDoc_STR("my : 1
str") : 3
*data[1]; : 1
sizeof(char : 2
**changed** : 1
"PyContext" : 1
"PyContextVar" : 1
"PyContextToken" : 1
3.7.0: : 1
PyContext : 2
*PyContext_New(void); : 2
3.7.1+: : 1
"contextvars.Context" : 10
"contextvars.ContextVar" : 1
PyContextToken : 1
"contextvars.Token" : 1
PyContext_Type : 1
PyContextVar_Type : 1
variable* : 2
PyContextToken_Type : 1
token* : 1
Type-check : 2
PyContext_CheckExact(PyObject : 1
"PyContext_Type" : 1
PyContextVar_CheckExact(PyObject : 1
"PyContextVar_Type" : 1
PyContextToken_CheckExact(PyObject : 1
"PyContextToken_Type" : 1
*PyContext_New(void) : 1
*PyContext_Copy(PyObject : 1
*ctx) : 4
*ctx* : 8
*PyContext_CopyCurrent(void) : 1
PyContext_Enter(PyObject : 1
PyContext_Exit(PyObject : 1
*PyContextVar_New(const : 1
"ContextVar" : 5
PyContextVar_Get(PyObject : 1
*var : 3
*default_value : 1
**value) : 1
*default_value* : 1
*PyContextVar_Set(PyObject : 1
PyContextVar_Reset(PyObject : 1
*token) : 1
"PyContextVar_Set()" : 1
*token* : 2
"Cell" : 1
byte-code; : 2
de-referenced : 1
PyCellObject : 1
PyCell_Type : 1
PyCell_Check(ob) : 1
*PyCell_New(PyObject : 1
*PyCell_Get(PyObject : 1
*cell) : 2
*cell* : 7
*PyCell_GET(PyObject : 1
PyCell_Set(PyObject : 1
*cell : 2
non-"NULL"; : 1
PyCell_SET(PyObject : 1
safety; : 1
***************************************** : 13
"PyInitFrozenExtensions()" : 1
"PyObject_SetArenaAllocator()" : 1
Informative : 1
"PyMem_GetAllocator()" : 1
"PyObject_GetArenaAllocator()" : 1
Utilities: : 1
**should : 1
called** : 1
Py_BytesWarningFlag : 1
Py_DebugFlag : 1
Py_DontWriteBytecodeFlag : 1
Py_FrozenFlag : 1
"frozenmain" : 1
Py_HashRandomizationFlag : 1
Py_IgnoreEnvironmentFlag : 1
Py_InspectFlag : 1
Py_InteractiveFlag : 1
Py_IsolatedFlag : 1
Py_LegacyWindowsStdioFlag : 1
Py_NoSiteFlag : 1
Py_NoUserSiteDirectory : 1
Py_OptimizeFlag : 1
Py_QuietFlag : 1
Py_UnbufferedStdioFlag : 1
Py_VerboseFlag : 1
("sys.modules") : 2
"sys.argv"; : 1
"O_TEXT" : 1
"O_BINARY" : 2
Py_InitializeEx(int : 1
initsigs) : 1
*initsigs* : 2
Py_IsInitialized() : 1
Undo : 6
(flushing : 1
unloading : 1
**Bugs : 1
caveats:** : 1
order; : 3
("__del__()" : 1
Dynamically : 4
once; : 4
"cpython._PySys_ClearAuditHooks" : 1
Py_Finalize() : 1
disregards : 1
Py_SetStandardStreamEncoding(const : 1
*errors) : 23
"PyConfig.stdio_encoding" : 2
"PyConfig.stdio_errors" : 2
other) : 53
Py_SetProgramName(const : 1
zero-terminated : 6
wchar_* : 5
*Py_GetProgramName() : 1
storage; : 10
*Py_GetPrefix() : 1
*prefix* : 35
variables; : 6
"'/usr/local/bin/python'" : 2
"'/usr/local'" : 3
**prefix** : 1
*Py_GetExecPrefix() : 1
*exec-prefix* : 1
platform-*dependent* : 1
exec-prefix : 5
**exec_prefix** : 1
Background: : 1
"/usr/local/plat" : 2
subtree : 2
Sparc : 1
Non-Unix : 1
story; : 1
compiled!) : 1
**mount** : 1
**automount** : 1
*Py_GetProgramFullPath() : 1
executable; : 3
*Py_GetPath() : 1
path; : 1
"';'" : 6
startup; : 1
Py_SetPath(const : 1
wchar_t*) : 2
"Py_GetProgramFullPath()") : 1
*Py_GetVersion() : 1
"3.0a5+ : 1
(py3k:63103M : 1
00:53:55) : 1
\n[GCC : 1
4.2.3]" : 1
*Py_GetPlatform() : 1
"official" : 2
5.x : 1
"'sunos5'" : 2
"'darwin'" : 2
"'win'" : 1
*Py_GetCopyright() : 1
"'Copyright : 1
Amsterdam'" : 1
"sys.copyright" : 1
*Py_GetCompiler() : 1
"[GCC : 1
2.7.2.2]" : 1
*Py_GetBuildInfo() : 1
"#67 : 1
22:34:28" : 1
PySys_SetArgvEx(int : 1
**argv : 1
updatepath) : 1
algorithm: : 2
(""."") : 1
CVE-2008-5983.On : 1
sys.path.pop(0)\n"); : 1
PySys_SetArgv(int : 1
Py_SetPythonHome(const : 1
*home) : 1
*Py_GetPythonHome() : 1
program: : 6
"sys.setswitchinterval()") : 1
bookkeeping : 2
"PyThreadState": : 1
Reacquire : 1
*_save; : 2
_save : 2
PyEval_SaveThread(); : 1
PyEval_RestoreThread(_save); : 1
long- : 6
management) : 1
PyGILState_STATE : 2
gstate; : 1
gstate : 1
PyGILState_Ensure(); : 1
CallSomeFunction(); : 1
PyGILState_Release(gstate); : 1
"PyGILState_*" : 3
"Py_NewInterpreter()") : 1
"current" : 3
(non-Python) : 1
"pthread_atfork()" : 1
defunct : 1
cooperating : 1
"interp" : 1
(PyInterpreterState*) : 1
PyEval_ThreadsInitialized() : 1
*PyEval_SaveThread() : 1
PyEval_RestoreThread(PyThreadState : 1
ensues : 3
*PyThreadState_Get() : 1
*PyThreadState_Swap(PyThreadState : 1
sub-interpreters: : 1
thread-related : 1
Release() : 1
"handle" : 7
*cannot* : 2
PyGILState_Release(PyGILState_STATE) : 1
GILState : 2
*PyGILState_GetThisThreadState() : 1
thread-state : 1
auto-thread- : 1
helper/diagnostic : 2
PyGILState_Check() : 1
semicolon; : 1
"{ : 1
PyEval_SaveThread();" : 1
brace; : 2
"PyEval_RestoreThread(_save); : 1
Py_BLOCK_THREADS : 1
"PyEval_RestoreThread(_save);": : 1
Py_UNBLOCK_THREADS : 1
"_save : 1
PyEval_SaveThread();": : 1
*PyInterpreterState_New() : 1
serialize : 22
PyInterpreterState_Clear(PyInterpreterState : 1
*interp) : 8
"cpython.PyInterpreterState_Clear" : 1
PyInterpreterState_Delete(PyInterpreterState : 1
Destroy : 5
*PyThreadState_New(PyInterpreterState : 1
PyThreadState_Clear(PyThreadState : 1
PyThreadState_Delete(PyThreadState : 1
PyThreadState_DeleteCurrent(void) : 1
PyFrameObject : 5
*PyThreadState_GetFrame(PyThreadState : 1
uint64_t : 1
PyThreadState_GetID(PyThreadState : 1
*PyThreadState_GetInterpreter(PyThreadState : 1
Resume : 6
*PyInterpreterState_Get(void) : 1
int64_t : 1
PyInterpreterState_GetID(PyInterpreterState : 1
*PyInterpreterState_GetDict(PyInterpreterState : 1
*(*_PyFrameEvalFunction)(PyThreadState : 1
*tstate : 1
_PyFrameEvalFunction : 2
_PyInterpreterState_GetEvalFrameFunc(PyInterpreterState : 1
"Adding : 2
CPython" : 3
_PyInterpreterState_SetEvalFrameFunc(PyInterpreterState : 1
*interp : 1
eval_frame) : 1
*PyThreadState_GetDict() : 1
PyThreadState_SetAsyncExc(unsigned : 1
PyEval_AcquireThread(PyThreadState : 1
PyEval_ReleaseThread(PyThreadState : 1
PyEval_AcquireLock() : 1
PyEval_ReleaseLock() : 1
Sub-interpreters : 1
process- : 1
"PyInterpreterState_Main()" : 1
*Py_NewInterpreter() : 1
totally : 5
(Like : 1
returns; : 1
entry.) : 1
(sub-)interpreters : 3
(shallow) : 1
squirreled : 2
(sub-)interpreter : 2
copy; : 1
"init" : 18
"Py_Initialize()"; : 1
"initmodule" : 2
Py_EndInterpreter(PyThreadState : 1
returns.) : 1
insulation : 1
(accidentally : 1
maliciously) : 1
properly; : 1
(static) : 1
(sub-)interpreter; : 1
(sub-)interpreter's : 1
delicate : 1
bijection : 1
"ctypes") : 2
Py_AddPendingCall(int : 1
(*func)(void*) : 1
*eventually* : 1
boundary; : 2
(*func* : 1
PyGILState : 1
(*Py_tracefunc)(PyObject : 1
*what* : 12
"PyTrace_CALL" : 2
"PyTrace_EXCEPTION" : 3
"PyTrace_LINE" : 3
"PyTrace_RETURN" : 2
"PyTrace_C_CALL" : 3
"PyTrace_C_EXCEPTION" : 3
"PyTrace_C_RETURN" : 3
"PyTrace_OPCODE" : 3
*what*: : 1
+--------------------------------+------------------------------------------+ : 9
|================================|==========================================| : 1
PyTrace_CALL : 1
"Py_tracefunc" : 8
PyTrace_EXCEPTION : 1
unwind : 3
propagates : 4
PyTrace_LINE : 1
line-number : 2
*0* : 3
PyTrace_RETURN : 1
PyTrace_C_CALL : 1
PyTrace_C_EXCEPTION : 1
PyTrace_C_RETURN : 1
PyTrace_OPCODE : 1
PyEval_SetProfile(Py_tracefunc : 1
PyEval_SetTrace(Py_tracefunc : 1
*PyInterpreterState_Head() : 1
*PyInterpreterState_Main() : 1
*PyInterpreterState_Next(PyInterpreterState : 1
*interp* : 2
*PyInterpreterState_ThreadHead(PyInterpreterState : 1
*PyThreadState_Next(PyThreadState : 1
("threading.local") : 2
"pythread.h" : 1
539**) : 1
Py_tss_t : 2
"Py_tss_NEEDS_INIT" : 3
Py_tss_NEEDS_INIT : 1
*PyThread_tss_alloc() : 1
PyThread_tss_free(Py_tss_t : 1
unassigned : 2
PyThread_tss_is_created(Py_tss_t : 1
PyThread_tss_create(Py_tss_t : 1
PyThread_tss_delete(Py_tss_t : 1
PyThread_tss_set(Py_tss_t : 1
associating : 5
*PyThread_tss_get(Py_tss_t : 1
no-ops : 2
PyThread_delete_key(int : 1
PyThread_set_key_value(int : 1
*PyThread_get_key_value(int : 1
PyThread_delete_key_value(int : 1
PyThread_ReInitTLS() : 1
PyCapsule_Destructor : 5
Defined : 2
(*PyCapsule_Destructor)(PyObject : 1
PyCapsule_CheckExact(PyObject : 1
*PyCapsule_New(void : 1
destructor) : 2
encapsulating : 2
*pointer* : 6
(Though : 1
*destructor*.) : 1
*destructor* : 2
"modulename.attributename" : 1
*PyCapsule_GetPointer(PyObject : 1
*capsule : 6
PyCapsule_GetDestructor(PyObject : 1
*capsule) : 3
ambiguous; : 3
*PyCapsule_GetContext(PyObject : 1
*PyCapsule_GetName(PyObject : 1
*PyCapsule_Import(const : 1
no_block) : 1
"module.attribute" : 1
capsule's : 1
PyCapsule_IsValid(PyObject : 1
Determines : 10
*capsule* : 5
"PyCapsule_CheckExact()" : 1
compared.) : 1
(any : 3
"PyCapsule_Get()") : 1
PyCapsule_SetContext(PyObject : 1
*context) : 3
PyCapsule_SetDestructor(PyObject : 1
PyCapsule_SetName(PyObject : 1
PyCapsule_SetPointer(PyObject : 1
*pointer) : 1
protocols: : 1
"callable(*args : 3
*tp_call*: : 1
"PyObject_Call()") : 1
repeating: : 1
*(*vectorcallfunc)(PyObject : 1
nargsf : 4
*nargsf* : 5
"PY_VECTORCALL_ARGUMENTS_OFFSET" : 3
"PyVectorcall_NARGS()" : 1
*kwnames* : 2
(instances : 9
PY_VECTORCALL_ARGUMENTS_OFFSET : 1
"args[-1]" : 2
"PyObject_VectorcallMethod()" : 2
"args[0]" : 2
cheaply : 1
allocation) : 1
provisionally : 1
underscore: : 1
"_PyObject_Vectorcall" : 1
"_Py_TPFLAGS_HAVE_VECTORCALL" : 1
"_PyVectorcall_Function" : 1
"_PyObject_CallMethodNoArgs" : 1
"_PyObject_CallMethodOneArg" : 1
"PyObject_VectorcallDict" : 1
"_PyObject_FastCallDict" : 1
callees : 1
recursion: : 1
vectorcall: : 1
*Py_EnterRecursiveCall* : 1
*Py_LeaveRecursiveCall* : 1
PyVectorcall_NARGS(size_t : 1
nargsf) : 1
(Py_ssize_t)(nargsf : 1
~PY_VECTORCALL_ARGUMENTS_OFFSET) : 1
"PyVectorcall_NARGS" : 1
PyVectorcall_Function(PyObject : 1
"PyVectorcall_Function(op) : 1
*PyVectorcall_Call(PyObject : 1
*dict) : 3
*callable*'s : 1
+--------------------------------------------+--------------------+----------------------+-----------------+ : 14
|============================================|====================|======================|=================| : 1
dict/"NULL" : 2
tuple/"NULL" : 1
"char*" : 1
"PyObject_CallMethodNoArgs()" : 1
"PyObject_CallMethodOneArg()" : 1
"PyObject_VectorcallDict()" : 1
*PyObject_Call(PyObject : 1
*kwargs) : 1
*NULL*; : 1
*PyObject_CallNoArgs(PyObject : 1
*callable) : 1
*PyObject_CallOneArg(PyObject : 1
*PyObject_CallObject(PyObject : 1
"callable(*args)" : 2
*PyObject_CallFunction(PyObject : 1
*PyObject_CallMethod(PyObject : 1
"obj.name(arg1 : 1
*PyObject_CallFunctionObjArgs(PyObject : 1
"callable(arg1 : 1
*PyObject_CallMethodObjArgs(PyObject : 1
*PyObject_CallMethodNoArgs(PyObject : 1
*PyObject_CallMethodOneArg(PyObject : 1
*PyObject_Vectorcall(PyObject : 1
*PyObject_VectorcallDict(PyObject : 1
*kwdict) : 1
Regardless : 13
*PyObject_VectorcallMethod(PyObject : 1
*args[0]* : 2
*args[1]* : 1
PyCallable_Check(PyObject : 1
*by : 1
real; : 1
imag; : 1
Py_complex; : 1
_Py_c_sum(Py_complex : 1
_Py_c_diff(Py_complex : 1
_Py_c_neg(Py_complex : 1
*num* : 9
_Py_c_prod(Py_complex : 1
_Py_c_quot(Py_complex : 1
dividend : 2
divisor) : 1
*divisor* : 1
"EDOM" : 2
_Py_c_pow(Py_complex : 1
exp) : 2
*exp* : 5
PyComplexObject : 1
PyComplex_Type : 1
PyComplex_Check(PyObject : 1
"PyComplexObject" : 5
PyComplex_CheckExact(PyObject : 1
*PyComplex_FromCComplex(Py_complex : 1
*PyComplex_FromDoubles(double : 1
imag) : 2
*real* : 4
*imag* : 2
PyComplex_RealAsDouble(PyObject : 1
PyComplex_ImagAsDouble(PyObject : 1
PyComplex_AsCComplex(PyObject : 1
PyFloatObject : 1
PyFloat_Type : 1
PyFloat_Check(PyObject : 1
"PyFloatObject" : 6
PyFloat_CheckExact(PyObject : 1
*PyFloat_FromString(PyObject : 1
*PyFloat_FromDouble(double : 1
PyFloat_AsDouble(PyObject : 1
*pyfloat) : 2
*pyfloat* : 4
PyFloat_AS_DOUBLE(PyObject : 1
*PyFloat_GetInfo(void) : 1
PyFloat_GetMax() : 1
*DBL_MAX* : 1
PyFloat_GetMin() : 1
*DBL_MIN* : 1
binary16 : 5
binary32 : 4
binary64 : 4
INFs : 1
INF : 1
non-IEEE : 5
packed; : 1
(alas) : 1
*le* : 2
(exponent : 4
"p+1" : 2
"p+3" : 2
"p+6" : 2
"p+7") : 2
*p*) : 2
"PY_BIG_ENDIAN" : 2
endian: : 2
"-0.0" : 1
"+0.0" : 1
PyFloat_Pack2(double : 1
le) : 6
PyFloat_Pack4(double : 1
PyFloat_Pack8(double : 1
big- : 5
PyFloat_Unpack2(const : 1
PyFloat_Unpack4(const : 1
PyFloat_Unpack8(const : 1
*PyEval_GetBuiltins(void) : 1
*PyEval_GetLocals(void) : 1
*PyEval_GetGlobals(void) : 1
*PyEval_GetFrame(void) : 1
*PyEval_GetFuncName(PyObject : 1
*func) : 3
*func*s : 1
*PyEval_GetFuncDesc(PyObject : 1
constructor" : 1
Concatenated : 1
PyIter_Check(PyObject : 1
PyAIter_Check(PyObject : 1
*PyIter_Next(PyObject : 1
this) : 5
*iterator : 2
PyObject_GetIter(obj); : 1
(iterator : 1
((item : 1
PyIter_Next(iterator))) : 1
Py_DECREF(iterator); : 1
PyIter_Send(PyObject : 1
*iter : 1
**presult) : 1
Sends : 9
Returns: : 2
"PYGEN_RETURN" : 1
*presult* : 3
"PYGEN_NEXT" : 1
Yielded : 1
"PYGEN_ERROR" : 1
"datetime.h" : 1
"Python.h") : 1
"PyDateTime_IMPORT" : 1
"PyDateTimeAPI" : 1
singleton: : 1
*PyDateTime_TimeZone_UTC : 1
PyDate_Check(PyObject : 1
"PyDateTime_DateType" : 3
PyDate_CheckExact(PyObject : 1
PyDateTime_Check(PyObject : 1
"PyDateTime_DateTimeType" : 3
PyDateTime_CheckExact(PyObject : 1
PyTime_Check(PyObject : 1
"PyDateTime_TimeType" : 3
PyTime_CheckExact(PyObject : 1
PyDelta_Check(PyObject : 1
"PyDateTime_DeltaType" : 3
PyDelta_CheckExact(PyObject : 1
PyTZInfo_Check(PyObject : 1
"PyDateTime_TZInfoType" : 3
PyTZInfo_CheckExact(PyObject : 1
*PyDate_FromDate(int : 1
day) : 9
*PyDateTime_FromDateAndTime(int : 1
usecond) : 2
*PyDateTime_FromDateAndTimeAndFold(int : 1
usecond : 2
fold) : 2
*PyTime_FromTime(int : 1
*PyTime_FromTimeAndFold(int : 1
*PyDelta_FromDSU(int : 1
useconds) : 1
lie : 4
*PyTimeZone_FromOffset(PyDateTime_DeltaType : 1
*offset) : 1
*PyTimeZone_FromOffsetAndName(PyDateTime_DeltaType : 1
*offset : 1
tzname : 1
"PyDateTime_Date" : 1
"PyDateTime_DateTime") : 1
checked: : 4
PyDateTime_GET_YEAR(PyDateTime_Date : 1
PyDateTime_GET_MONTH(PyDateTime_Date : 1
PyDateTime_GET_DAY(PyDateTime_Date : 1
"PyDateTime_DateTime" : 1
PyDateTime_DATE_GET_HOUR(PyDateTime_DateTime : 1
PyDateTime_DATE_GET_MINUTE(PyDateTime_DateTime : 1
59 : 16
PyDateTime_DATE_GET_SECOND(PyDateTime_DateTime : 1
PyDateTime_DATE_GET_MICROSECOND(PyDateTime_DateTime : 1
999999 : 6
PyDateTime_DATE_GET_FOLD(PyDateTime_DateTime : 1
*PyDateTime_DATE_GET_TZINFO(PyDateTime_DateTime : 1
"PyDateTime_Time" : 1
PyDateTime_TIME_GET_HOUR(PyDateTime_Time : 1
PyDateTime_TIME_GET_MINUTE(PyDateTime_Time : 1
PyDateTime_TIME_GET_SECOND(PyDateTime_Time : 1
PyDateTime_TIME_GET_MICROSECOND(PyDateTime_Time : 1
PyDateTime_TIME_GET_FOLD(PyDateTime_Time : 1
*PyDateTime_TIME_GET_TZINFO(PyDateTime_Time : 1
"PyDateTime_Delta" : 1
PyDateTime_DELTA_GET_DAYS(PyDateTime_Delta : 1
-999999999 : 2
999999999 : 2
PyDateTime_DELTA_GET_SECONDS(PyDateTime_Delta : 1
86399 : 3
PyDateTime_DELTA_GET_MICROSECONDS(PyDateTime_Delta : 1
DB : 7
*PyDateTime_FromTimestamp(PyObject : 1
*PyDate_FromTimestamp(PyObject : 1
"datetime.date.fromtimestamp()" : 1
PyBool_Check(PyObject : 1
*Py_False : 1
*Py_True : 1
Py_RETURN_FALSE : 1
Py_RETURN_TRUE : 1
*PyBool_FromLong(long : 1
PyFrame_Type : 1
"<frameobject.h>" : 2
PyFrame_Check(PyObject : 1
*PyFrame_GetBack(PyFrameObject : 1
*PyFrame_GetBuiltins(PyFrameObject : 1
*frame*'s : 6
"f_builtins" : 2
PyCodeObject : 5
*PyFrame_GetCode(PyFrameObject : 1
(frame : 2
*PyFrame_GetGenerator(PyFrameObject : 1
*PyFrame_GetGlobals(PyFrameObject : 1
"f_globals" : 2
PyFrame_GetLasti(PyFrameObject : 1
"frame.f_lasti" : 1
*PyFrame_GetLocals(PyFrameObject : 1
PyFrame_GetLineNumber(PyFrameObject : 1
*Py_NotImplemented : 1
Py_RETURN_NOTIMPLEMENTED : 1
PyObject_Print(PyObject : 1
PyObject_HasAttr(PyObject : 1
*attr_name) : 6
*attr_name* : 10
"hasattr(o : 2
attr_name)" : 2
PyObject_HasAttrString(PyObject : 1
*PyObject_GetAttr(PyObject : 1
"o.attr_name" : 2
*PyObject_GetAttrString(PyObject : 1
*PyObject_GenericGetAttr(PyObject : 1
present) : 14
outlined : 9
PyObject_SetAttr(PyObject : 1
*attr_name : 2
"o.attr_name : 2
v" : 7
"PyObject_DelAttr()" : 1
PyObject_SetAttrString(PyObject : 1
"PyObject_DelAttrString()" : 1
PyObject_GenericSetAttr(PyObject : 1
PyObject_DelAttr(PyObject : 1
o.attr_name" : 2
PyObject_DelAttrString(PyObject : 1
*PyObject_GenericGetDict(PyObject : 1
PyObject_GenericSetDict(PyObject : 1
**_PyObject_GetDictPtr(PyObject : 1
*PyObject_RichCompare(PyObject : 1
opid) : 2
*opid* : 4
"op" : 6
PyObject_RichCompareBool(PyObject : 1
*PyObject_Format(PyObject : 1
*format_spec) : 1
*format_spec* : 17
"format(obj : 1
format_spec)" : 3
"format(obj)" : 1
*PyObject_Repr(PyObject : 1
"repr(o)" : 1
*PyObject_ASCII(PyObject : 1
*PyObject_Str(PyObject : 1
"str(o)" : 1
*PyObject_Bytes(PyObject : 1
"bytes(o)" : 2
zero-initialized : 1
PyObject_IsSubclass(PyObject : 1
*derived : 1
*cls) : 2
*derived* : 2
*cls* : 29
"cls.__mro__" : 1
PyObject_IsInstance(PyObject : 1
*inst : 1
*inst* : 3
"__instancecheck__()" : 2
PyObject_Hash(PyObject : 1
"hash(o)" : 1
PyObject_HashNotImplemented(PyObject : 1
"type(o)" : 2
PyObject_IsTrue(PyObject : 1
o" : 5
PyObject_Not(PyObject : 1
*PyObject_Type(PyObject : 1
PyObject_TypeCheck(PyObject : 1
PyObject_Size(PyObject : 1
PyObject_Length(PyObject : 1
PyObject_LengthHint(PyObject : 1
defaultvalue) : 1
estimated : 6
"operator.length_hint(o : 1
defaultvalue)" : 1
*PyObject_GetItem(PyObject : 1
"o[key]" : 2
PyObject_SetItem(PyObject : 1
"o[key] : 3
*does : 9
not* : 11
PyObject_DelItem(PyObject : 1
o[key]" : 3
*PyObject_Dir(PyObject : 1
"dir(o)" : 1
locals; : 1
*PyObject_GetIter(PyObject : 1
"iter(o)" : 1
*PyObject_GetAIter(PyObject : 1
"aiter(o)" : 1
Takes : 9
(per : 1
(exception: : 1
"PyArg_*" : 1
failure) : 2
pointers: : 1
indicator; : 1
allocations); : 1
propagating) : 2
PyErr_Clear() : 1
PyErr_PrintEx(int : 1
set_sys_last_vars) : 1
**Unless** : 1
**only** : 4
*set_sys_last_vars* : 1
"sys.last_value" : 2
"sys.last_traceback" : 3
"PyErr_PrintEx(1)" : 1
PyErr_WriteUnraisable(PyObject : 1
PyErr_SetString(PyObject : 1
PyErr_SetObject(PyObject : 1
*PyErr_Format(PyObject : 1
*exception : 3
NULL.** : 16
*exception* : 7
*PyErr_FormatV(PyObject : 1
PyErr_SetNone(PyObject : 1
"PyErr_SetObject(type : 2
Py_None)" : 1
PyErr_BadArgument() : 1
"PyErr_SetString(PyExc_TypeError : 1
message)" : 2
*PyErr_NoMemory() : 1
"PyErr_SetNone(PyExc_MemoryError)"; : 1
PyErr_NoMemory();" : 1
*PyErr_SetFromErrno(PyObject : 1
(gotten : 2
"strerror()") : 1
object)" : 3
PyErr_SetFromErrno(type);" : 1
*PyErr_SetFromErrnoWithFilenameObject(PyObject : 1
*filenameObject) : 1
*filenameObject* : 1
*PyErr_SetFromErrnoWithFilenameObjects(PyObject : 1
*filenameObject : 1
*filenameObject2) : 1
*PyErr_SetFromErrnoWithFilename(PyObject : 1
*PyErr_SetFromWindowsErr(int : 1
ierr) : 2
*ierr* : 3
"GetLastError()" : 5
"FormatMessage()" : 3
"FormatMessage()") : 1
"PyErr_SetObject(PyExc_WindowsError : 1
*PyErr_SetExcFromWindowsErr(PyObject : 1
*PyErr_SetFromWindowsErrWithFilename(int : 1
ierr : 4
"PyErr_SetFromWindowsErrWithFilenameObject()" : 2
("os.fsdecode()") : 1
*PyErr_SetExcFromWindowsErrWithFilenameObject(PyObject : 1
*PyErr_SetExcFromWindowsErrWithFilenameObjects(PyObject : 1
*filename2) : 1
*PyErr_SetExcFromWindowsErrWithFilename(PyObject : 1
*PyErr_SetImportError(PyObject : 1
*msg : 2
"ImportError"'s : 1
*PyErr_SetImportErrorSubclass(PyObject : 1
PyErr_SyntaxLocationObject(PyObject : 1
col_offset) : 2
PyErr_SyntaxLocationEx(const : 1
"PyErr_SyntaxLocationObject()" : 1
PyErr_SyntaxLocation(const : 1
lineno) : 10
PyErr_BadInternalCall() : 1
"PyErr_SetString(PyExc_SystemError : 1
*sys.stderr*; : 1
intentional.) : 1
PyErr_WarnEx(PyObject : 1
*category : 4
*message : 4
stack_level) : 1
*stack_level* : 2
frames; : 2
"PyExc_Warning"; : 1
"PyExc_Exception"; : 1
enumerated : 6
PyErr_WarnExplicitObject(PyObject : 1
*registry) : 2
"warnings.warn_explicit()"; : 1
*registry* : 1
PyErr_WarnExplicit(PyObject : 1
"PyErr_WarnExplicitObject()" : 1
PyErr_WarnFormat(PyObject : 1
stack_level : 2
PyErr_ResourceWarning(PyObject : 1
*source : 1
"warnings.WarningMessage()" : 1
*PyErr_Occurred() : 1
"PyErr_Set*" : 1
"PyErr_Restore()") : 1
exception.) : 3
PyErr_ExceptionMatches(PyObject : 1
"PyErr_GivenExceptionMatches(PyErr_Occurred() : 1
exc)" : 1
PyErr_GivenExceptionMatches(PyObject : 1
*given : 1
*given* : 2
subtuples) : 1
PyErr_Fetch(PyObject : 1
**ptype : 2
**pvalue : 2
**ptraceback) : 2
*traceback; : 1
PyErr_Fetch(&type : 1
&value : 1
&traceback); : 1
PyErr_Restore(type : 1
traceback); : 1
PyErr_Restore(PyObject : 1
*traceback) : 2
(Violating : 1
later.) : 2
you.) : 1
PyErr_NormalizeException(PyObject : 1
**exc : 1
**val : 1
**tb) : 1
"unnormalized" : 1
"*exc" : 1
"*val" : 1
(tb : 1
PyException_SetTraceback(val : 1
tb); : 1
*PyErr_GetHandledException(void) : 1
*already : 4
caught* : 4
PyErr_SetHandledException(PyObject : 1
PyErr_GetExcInfo(PyObject : 1
PyErr_SetExcInfo(PyObject : 1
PyErr_CheckSignals() : 1
yet: : 2
interruptible : 2
Ctrl-C) : 1
PyErr_SetInterrupt() : 1
Simulate : 6
arriving : 3
"PyErr_SetInterruptEx(SIGINT)" : 1
async-signal-safe : 2
PyErr_SetInterruptEx(int : 1
signum) : 2
presses : 4
"signal.SIG_DFL" : 5
"signal.SIG_IGN") : 2
*signum* : 8
PySignal_SetWakeupFd(int : 1
fd) : 1
*PyErr_NewException(const : 1
*base : 4
"module.classname" : 1
(accessible : 1
"PyExc_Exception") : 1
dot) : 8
*PyErr_NewExceptionWithDoc(const : 1
*doc : 1
*PyException_GetTraceback(PyObject : 1
*ex) : 3
PyException_SetTraceback(PyObject : 1
*ex : 3
*tb) : 1
*tb* : 9
*PyException_GetContext(PyObject : 1
*ex* : 1
raised) : 13
PyException_SetContext(PyObject : 1
*PyException_GetCause(PyObject : 1
PyException_SetCause(PyObject : 1
*cause) : 1
*cause* : 3
"__suppress_context__" : 6
*PyUnicodeDecodeError_Create(const : 1
*reason) : 4
*reason* : 7
*PyUnicodeDecodeError_GetEncoding(PyObject : 1
*PyUnicodeEncodeError_GetEncoding(PyObject : 1
*PyUnicodeDecodeError_GetObject(PyObject : 1
*PyUnicodeEncodeError_GetObject(PyObject : 1
*PyUnicodeTranslateError_GetObject(PyObject : 1
PyUnicodeDecodeError_GetStart(PyObject : 1
*exc : 15
*start) : 3
PyUnicodeEncodeError_GetStart(PyObject : 1
PyUnicodeTranslateError_GetStart(PyObject : 1
**start* : 1
PyUnicodeDecodeError_SetStart(PyObject : 1
PyUnicodeEncodeError_SetStart(PyObject : 1
PyUnicodeTranslateError_SetStart(PyObject : 1
PyUnicodeDecodeError_GetEnd(PyObject : 1
*end) : 3
PyUnicodeEncodeError_GetEnd(PyObject : 1
PyUnicodeTranslateError_GetEnd(PyObject : 1
**end* : 1
PyUnicodeDecodeError_SetEnd(PyObject : 1
PyUnicodeEncodeError_SetEnd(PyObject : 1
PyUnicodeTranslateError_SetEnd(PyObject : 1
*PyUnicodeDecodeError_GetReason(PyObject : 1
*PyUnicodeEncodeError_GetReason(PyObject : 1
*PyUnicodeTranslateError_GetReason(PyObject : 1
PyUnicodeDecodeError_SetReason(PyObject : 1
PyUnicodeEncodeError_SetReason(PyObject : 1
PyUnicodeTranslateError_SetReason(PyObject : 1
Py_EnterRecursiveCall(const : 1
*where) : 1
*where* : 2
check"" : 1
Py_LeaveRecursiveCall(void) : 1
*successful* : 1
"reprlib.recursive_repr()" : 1
Py_ReprEnter(PyObject : 1
"[...]" : 2
Py_ReprLeave(PyObject : 1
"PyExc_" : 2
PyObject*; : 3
completeness : 3
+-------------------------------------------+-----------------------------------+------------+ : 54
|===========================================|===================================|============| : 1
"ArithmeticError" : 2
"FloatingPointError" : 2
"LookupError" : 14
"UnicodeTranslateError" : 3
"PyExc_OSError": : 1
+---------------------------------------+------------+ : 4
|=======================================|============| : 1
Windows; : 4
"MS_WINDOWS" : 1
+--------------------------------------------+-----------------------------------+------------+ : 12
|============================================|===================================|============| : 1
"UserWarning" : 4
"PyMethod_New(func : 1
class)" : 3
PyInstanceMethod_Type : 1
PyInstanceMethod_Check(PyObject : 1
"PyInstanceMethod_Type") : 1
*PyInstanceMethod_New(PyObject : 1
*PyInstanceMethod_Function(PyObject : 1
*im) : 2
*im* : 3
*PyInstanceMethod_GET_FUNCTION(PyObject : 1
"PyInstanceMethod_Function()" : 1
PyMethod_Type : 2
PyMethod_Check(PyObject : 1
"PyMethod_Type") : 1
*PyMethod_New(PyObject : 1
*PyMethod_Function(PyObject : 1
*meth* : 2
*PyMethod_GET_FUNCTION(PyObject : 1
"PyMethod_Function()" : 1
*PyMethod_Self(PyObject : 1
*PyMethod_GET_SELF(PyObject : 1
"PyMethod_Self()" : 1
PyCode_Type : 1
PyCode_Check(PyObject : 1
*co* : 3
PyCode_GetNumFree(PyCodeObject : 1
*PyCode_New(int : 1
nlocals : 2
*consts : 2
*names : 2
*varnames : 2
*freevars : 2
*cellvars : 2
firstlineno : 2
*linetable : 2
*exceptiontable) : 2
inter-dependent : 2
"exceptiontable" : 2
*PyCode_NewWithPosOnlyArgs(int : 1
posonlyargcount : 1
"posonlyargcount" : 3
"PyCode_New" : 1
*PyCode_NewEmpty(const : 1
*funcname : 1
firstlineno) : 1
PyCode_Addr2Line(PyCodeObject : 1
byte_offset) : 1
"byte_offset" : 2
PyCode_Addr2Location(PyObject : 1
byte_offset : 1
*start_line : 1
*start_column : 1
*end_line : 1
*end_column) : 1
*PyCode_GetCode(PyCodeObject : 1
"getattr(co : 4
*PyCode_GetVarnames(PyCodeObject : 1
'co_varnames')" : 1
*PyCode_GetCellvars(PyCodeObject : 1
'co_cellvars')" : 1
*PyCode_GetFreevars(PyCodeObject : 1
'co_freevars')" : 1
PyMapping_Check(PyObject : 1
PyMapping_Size(PyObject : 1
PyMapping_Length(PyObject : 1
*PyMapping_GetItemString(PyObject : 1
PyMapping_SetItemString(PyObject : 1
PyMapping_DelItem(PyObject : 1
PyMapping_DelItemString(PyObject : 1
PyMapping_HasKey(PyObject : 1
PyMapping_HasKeyString(PyObject : 1
*PyMapping_Keys(PyObject : 1
*PyMapping_Values(PyObject : 1
*PyMapping_Items(PyObject : 1
PyCodec_Register(PyObject : 1
*search_function) : 2
PyCodec_Unregister(PyObject : 1
Unregister : 6
registry's : 4
PyCodec_KnownEncoding(const : 1
*encoding) : 3
*PyCodec_Encode(PyObject : 1
*PyCodec_Decode(PyObject : 1
*PyCodec_Encoder(const : 1
*PyCodec_Decoder(const : 1
*PyCodec_IncrementalEncoder(const : 1
"IncrementalEncoder" : 7
*PyCodec_IncrementalDecoder(const : 1
"IncrementalDecoder" : 7
*PyCodec_StreamReader(const : 1
*stream : 2
*PyCodec_StreamWriter(const : 1
PyCodec_RegisterError(const : 1
*error) : 1
characters/undecodable : 1
encode/decode : 1
two-item : 3
*PyCodec_LookupError(const : 1
Lookup : 2
*PyCodec_StrictErrors(PyObject : 1
*PyCodec_IgnoreErrors(PyObject : 1
faulty : 1
*PyCodec_ReplaceErrors(PyObject : 1
"U+FFFD" : 2
*PyCodec_XMLCharRefReplaceErrors(PyObject : 1
*PyCodec_BackslashReplaceErrors(PyObject : 1
("\x" : 1
"\U") : 1
*PyCodec_NameReplaceErrors(PyObject : 1
PyDictObject : 1
PyDict_Type : 1
PyDict_Check(PyObject : 1
PyDict_CheckExact(PyObject : 1
*PyDict_New() : 1
*PyDictProxy_New(PyObject : 1
*mapping) : 2
non-dynamic : 1
PyDict_Clear(PyObject : 1
PyDict_Contains(PyObject : 1
p" : 3
*PyDict_Copy(PyObject : 1
PyDict_SetItem(PyObject : 1
*val) : 2
*hashable*; : 2
PyDict_SetItemString(PyObject : 1
"PyUnicode_FromString(key)" : 1
PyDict_DelItem(PyObject : 1
PyDict_DelItemString(PyObject : 1
*PyDict_GetItem(PyObject : 1
*PyDict_GetItemWithError(PyObject : 1
Variant : 2
*PyDict_GetItemString(PyObject : 1
*PyDict_SetDefault(PyObject : 1
*defaultobj) : 1
*defaultobj* : 2
*PyDict_Items(PyObject : 1
"PyListObject" : 4
*PyDict_Keys(PyObject : 1
*PyDict_Values(PyObject : 1
PyDict_Size(PyObject : 1
"len(p)" : 1
PyDict_Next(PyObject : 1
*ppos : 1
**pkey : 1
**pvalue) : 1
*ppos* : 2
iteration; : 1
*pkey* : 1
*pvalue* : 1
*value; : 2
(PyDict_Next(self->dict : 2
&pos : 2
&key : 2
&value)) : 2
values.. : 1
PyLong_AsLong(value); : 1
PyLong_FromLong(i : 1
1); : 1
(o : 1
(PyDict_SetItem(self->dict : 1
o) : 2
Py_DECREF(o); : 2
PyDict_Merge(PyObject : 1
*b : 2
override) : 4
*override* : 2
PyDict_Update(PyObject : 1
"PyDict_Merge(a : 1
"a.update(b)" : 1
"keys" : 5
PyDict_MergeFromSeq2(PyObject : 1
*seq2 : 1
*seq2* : 2
PyDict_MergeFromSeq2(a : 1
override): : 1
seq2: : 1
a[key] : 1
PySequence_Check(PyObject : 1
PySequence_Size(PyObject : 1
PySequence_Length(PyObject : 1
*PySequence_Concat(PyObject : 1
*PySequence_Repeat(PyObject : 1
"o : 2
count" : 3
*PySequence_InPlaceConcat(PyObject : 1
*PySequence_InPlaceRepeat(PyObject : 1
*PySequence_GetItem(PyObject : 1
*i*th : 6
"o[i]" : 1
*PySequence_GetSlice(PyObject : 1
i2) : 2
*i1* : 4
*i2* : 4
"o[i1:i2]" : 1
PySequence_SetItem(PyObject : 1
"o[i] : 2
PySequence_DelItem(PyObject : 1
o[i]" : 1
PySequence_SetSlice(PyObject : 1
"o[i1:i2] : 1
PySequence_DelSlice(PyObject : 1
o[i1:i2]" : 1
PySequence_Count(PyObject : 1
"o.count(value)" : 1
PySequence_Contains(PyObject : 1
PySequence_Index(PyObject : 1
"o.index(value)" : 1
*PySequence_List(PyObject : 1
"list(o)" : 1
*PySequence_Tuple(PyObject : 1
"tuple(o)" : 1
*PySequence_Fast(PyObject : 1
"PySequence_Fast*" : 2
PySequence_Fast_GET_SIZE(PyObject : 1
"PySequence_Fast_GET_SIZE()" : 1
*PySequence_Fast_GET_ITEM(PyObject : 1
**PySequence_Fast_ITEMS(PyObject : 1
*PySequence_ITEM(PyObject : 1
adjustment : 9
staying : 3
65536; : 1
1114112 : 2
"canonical" : 8
"PyUnicode_FromUnicode()") : 1
representation; : 1
Py_UCS4 : 18
Py_UCS2 : 2
Py_UCS1 : 2
"narrow" : 1
"wide" : 1
PyASCIIObject : 1
PyCompactUnicodeObject : 1
PyUnicode_Type : 1
PyUnicode_Check(PyObject : 1
PyUnicode_CheckExact(PyObject : 1
PyUnicode_READY(PyObject : 1
PyUnicode_GET_LENGTH(PyObject : 1
checked) : 7
*PyUnicode_1BYTE_DATA(PyObject : 1
*PyUnicode_2BYTE_DATA(PyObject : 1
*PyUnicode_4BYTE_DATA(PyObject : 1
UCS1 : 3
UCS4 : 4
"PyUnicode_KIND()" : 3
PyUnicode_WCHAR_KIND : 1
PyUnicode_1BYTE_KIND : 1
PyUnicode_2BYTE_KIND : 1
PyUnicode_4BYTE_KIND : 1
PyUnicode_KIND(PyObject : 1
*PyUnicode_DATA(PyObject : 1
PyUnicode_WRITE(int : 1
"PyUnicode_DATA()") : 2
*kind* : 6
(starts : 1
PyUnicode_READ(int : 1
PyUnicode_READ_CHAR(PyObject : 1
"PyUnicode_READ()" : 2
PyUnicode_MAX_CHAR_VALUE(PyObject : 1
PyUnicode_GET_SIZE(PyObject : 1
units) : 2
"PyUnicode_GET_LENGTH()" : 3
PyUnicode_GET_DATA_SIZE(PyObject : 1
*PyUnicode_AS_UNICODE(PyObject : 1
*PyUnicode_AS_DATA(PyObject : 1
"AS_DATA" : 1
(return : 7
"PyUnicode_nBYTE_DATA()" : 2
"PyUnicode_WRITE()" : 1
PyUnicode_IsIdentifier(PyObject : 1
Py_UNICODE_ISSPACE(Py_UCS4 : 1
ch) : 17
Py_UNICODE_ISLOWER(Py_UCS4 : 1
Py_UNICODE_ISUPPER(Py_UCS4 : 1
Py_UNICODE_ISTITLE(Py_UCS4 : 1
Py_UNICODE_ISLINEBREAK(Py_UCS4 : 1
linebreak : 1
Py_UNICODE_ISDECIMAL(Py_UCS4 : 1
Py_UNICODE_ISDIGIT(Py_UCS4 : 1
Py_UNICODE_ISNUMERIC(Py_UCS4 : 1
Py_UNICODE_ISALPHA(Py_UCS4 : 1
alphabetic : 5
Py_UNICODE_ISALNUM(Py_UCS4 : 1
Py_UNICODE_ISPRINTABLE(Py_UCS4 : 1
Nonprintable : 2
"Other" : 2
"Separator" : 3
excepting : 4
(0x20) : 2
bearing : 2
"sys.stderr".) : 2
conversions: : 1
Py_UNICODE_TOLOWER(Py_UCS4 : 1
Py_UNICODE_TOUPPER(Py_UCS4 : 1
Py_UNICODE_TOTITLE(Py_UCS4 : 1
Py_UNICODE_TODECIMAL(Py_UCS4 : 1
Py_UNICODE_TODIGIT(Py_UCS4 : 1
Py_UNICODE_TONUMERIC(Py_UCS4 : 1
surrogates: : 1
Py_UNICODE_IS_SURROGATE(ch) : 1
("0xD800 : 2
ch : 11
0xDFFF") : 2
Py_UNICODE_IS_HIGH_SURROGATE(ch) : 1
0xDBFF") : 1
Py_UNICODE_IS_LOW_SURROGATE(ch) : 1
("0xDC00 : 1
Py_UNICODE_JOIN_SURROGATES(high : 1
low) : 1
Join : 6
*PyUnicode_New(Py_ssize_t : 1
maxchar) : 1
*maxchar* : 1
1114111 : 1
*PyUnicode_FromKindAndData(int : 1
*buffer : 2
(possible : 1
"PyUnicode_KIND()") : 1
("PyUnicode_4BYTE_KIND") : 1
codepoints : 3
("PyUnicode_1BYTE_KIND") : 1
*PyUnicode_FromStringAndSize(const : 1
*u : 4
*PyUnicode_FromString(const : 1
*u) : 2
*PyUnicode_FromFormat(const : 1
+---------------------+-----------------------+------------------------------------+ : 23
|=====================|=======================|====================================| : 1
"%li" : 1
"printf("%li")" : 1
"printf("%lld")" : 1
"%lli" : 1
"printf("%lli")" : 1
"printf("%llu")" : 1
"%zi" : 1
"printf("%zi")" : 1
""%s"" : 2
""%V"" : 3
""%A"" : 2
""%U"" : 2
""%S"" : 2
""%R"" : 2
li : 1
lld : 1
lli : 1
llu : 1
zi : 1
""%lld"" : 1
""%llu"" : 1
""%li"" : 1
""%lli"" : 1
""%zi"" : 1
*PyUnicode_FromFormatV(const : 1
*PyUnicode_FromEncodedObject(PyObject : 1
PyUnicode_GetLength(PyObject : 1
PyUnicode_CopyCharacters(PyObject : 1
*to : 3
to_start : 1
*from : 1
from_start : 1
how_many) : 1
PyUnicode_Fill(PyObject : 1
*unicode : 11
fill_char) : 1
character: : 2
*fill_char* : 2
"unicode[start:start+length]" : 1
PyUnicode_WriteChar(PyObject : 1
PyUnicode_ReadChar(PyObject : 1
"PyUnicode_READ_CHAR()" : 1
*PyUnicode_Substring(PyObject : 1
*PyUnicode_AsUCS4(PyObject : 1
buflen : 1
copy_null) : 1
*copy_null* : 1
*buflen* : 3
*u*) : 1
*PyUnicode_AsUCS4Copy(PyObject : 1
*PyUnicode_FromUnicode(const : 1
*PyUnicode_AsUnicode(PyObject : 1
*PyUnicode_AsUnicodeAndSize(PyObject : 1
"Py_UNICODE()" : 1
terminator) : 2
PyUnicode_GetSize(PyObject : 1
*PyUnicode_FromObject(PyObject : 1
subtype) : 1
*PyUnicode_DecodeLocaleAndSize(const : 1
383**) : 3
*PyUnicode_DecodeLocale(const : 1
*PyUnicode_EncodeLocale(PyObject : 1
529**) : 1
""O&"" : 2
PyUnicode_FSConverter(PyObject : 1
*result) : 2
ParseTuple : 2
converter: : 5
"PyUnicode_EncodeFSDefault()"; : 1
*result* : 10
PyBytesObject* : 1
Accepts : 100
PyUnicode_FSDecoder(PyObject : 1
"PyUnicode_DecodeFSDefaultAndSize()"; : 1
PyUnicodeObject* : 1
*PyUnicode_DecodeFSDefaultAndSize(const : 1
*PyUnicode_DecodeFSDefault(const : 1
*PyUnicode_EncodeFSDefault(PyObject : 1
*PyUnicode_FromWideChar(const : 1
*w : 2
*w* : 4
wcslen : 1
PyUnicode_AsWideChar(PyObject : 1
*PyUnicode_AsWideCharString(PyObject : 1
**size* : 2
"PyMem_Alloc()" : 1
read-only: : 1
setlocale) : 1
("ValueError" : 1
*PyUnicode_Decode(const : 1
*PyUnicode_AsEncodedString(PyObject : 1
*PyUnicode_DecodeUTF8(const : 1
*PyUnicode_DecodeUTF8Stateful(const : 1
*consumed) : 5
*consumed* : 15
*PyUnicode_AsUTF8String(PyObject : 1
*PyUnicode_AsUTF8AndSize(PyObject : 1
*size*) : 1
*PyUnicode_AsUTF8(PyObject : 1
*PyUnicode_DecodeUTF32(const : 1
*byteorder) : 2
*byteorder* : 10
*byteorder : 8
-1: : 6
"*byteorder" : 5
(BOM) : 5
**byteorder* : 1
*PyUnicode_DecodeUTF32Stateful(const : 1
divisible : 3
four) : 1
*PyUnicode_AsUTF32String(PyObject : 1
*PyUnicode_DecodeUTF16(const : 1
"\ufeff" : 1
"\ufffe" : 1
*PyUnicode_DecodeUTF16Stateful(const : 1
pair) : 2
*PyUnicode_AsUTF16String(PyObject : 1
*PyUnicode_DecodeUTF7(const : 1
*PyUnicode_DecodeUTF7Stateful(const : 1
base-64 : 4
"Unicode : 4
Escape" : 2
*PyUnicode_DecodeUnicodeEscape(const : 1
*PyUnicode_AsUnicodeEscapeString(PyObject : 1
"Raw : 1
*PyUnicode_DecodeRawUnicodeEscape(const : 1
Raw- : 1
*PyUnicode_AsRawUnicodeEscapeString(PyObject : 1
ordinals : 8
*PyUnicode_DecodeLatin1(const : 1
*PyUnicode_AsLatin1String(PyObject : 1
*PyUnicode_DecodeASCII(const : 1
*PyUnicode_AsASCIIString(PyObject : 1
*PyUnicode_DecodeCharmap(const : 1
*mapping : 2
Else : 10
ordinals) : 1
Unmapped : 3
"0xFFFE" : 1
"'\ufffe'" : 1
*PyUnicode_AsCharmapString(PyObject : 1
"LookupError") : 2
"undefined : 1
mapping" : 1
*PyUnicode_Translate(PyObject : 1
*table : 1
Translate : 8
(causing : 1
DBCS) : 1
*PyUnicode_DecodeMBCS(const : 1
*PyUnicode_DecodeMBCSStateful(const : 1
*PyUnicode_AsMBCSString(PyObject : 1
*PyUnicode_EncodeCodePage(int : 1
code_page : 1
descriptions) : 2
*PyUnicode_Concat(PyObject : 1
*left : 3
*right) : 2
*PyUnicode_Split(PyObject : 1
*sep : 1
maxsplit) : 1
*sep* : 34
*maxsplit* : 18
Separators : 1
*PyUnicode_Splitlines(PyObject : 1
keepend) : 1
*keepend* : 1
*PyUnicode_Join(PyObject : 1
*separator : 1
*separator* : 8
PyUnicode_Tailmatch(PyObject : 1
*substr : 4
direction) : 3
*substr* : 4
(*direction* : 3
*direction* : 5
match) : 4
PyUnicode_Find(PyObject : 1
search) : 3
"-2" : 7
PyUnicode_FindChar(PyObject : 1
PyUnicode_Count(PyObject : 1
*PyUnicode_Replace(PyObject : 1
*replstr : 1
maxcount) : 1
*maxcount* : 2
*replstr* : 1
PyUnicode_Compare(PyObject : 1
PyUnicode_CompareWithASCIIString(PyObject : 1
*uni : 1
*uni* : 1
*PyUnicode_RichCompare(PyObject : 1
*right : 1
*PyUnicode_Format(PyObject : 1
PyUnicode_Contains(PyObject : 1
*container : 1
*element) : 1
*element* : 9
*container* : 2
PyUnicode_InternInPlace(PyObject : 1
**string) : 1
**string* : 4
(decrementing : 1
(incrementing : 1
(Clarification: : 1
reference-count-neutral; : 1
call.) : 2
*PyUnicode_InternFromString(const : 1
("owned") : 1
ensured : 2
*Python : 3
preallocation : 1
object-specific : 2
peculiarities : 2
speed/space : 1
tradeoffs : 1
*res; : 3
malloc(BUFSIZ); : 2
(buf : 3
PyErr_NoMemory(); : 3
...Do : 3
buf.. : 3
PyBytes_FromString(buf); : 3
free(buf); : 1
malloc'ed : 1
*inform* : 1
compaction : 1
preventive : 1
"domains" : 1
"PyMemAllocatorDomain") : 1
hinted : 3
practice) : 1
domain: : 5
"Mem" : 1
domain,the : 1
"free()"; : 1
"malloc(1)" : 1
"calloc(1 : 1
1)") : 1
*PyMem_RawMalloc(size_t : 1
Allocates : 6
Requesting : 6
"PyMem_RawMalloc(1)" : 1
*PyMem_RawCalloc(size_t : 1
nelem : 4
elsize) : 3
*nelem* : 3
*elsize* : 3
"PyMem_RawCalloc(1 : 1
*PyMem_RawRealloc(void : 1
Resizes : 4
"PyMem_RawMalloc(n)"; : 1
PyMem_RawFree(void : 1
Frees : 3
"PyMem_RawFree(p)" : 1
*PyMem_Malloc(size_t : 1
"PyMem_Malloc(1)" : 1
*PyMem_Calloc(size_t : 1
"PyMem_Calloc(1 : 1
*PyMem_Realloc(void : 1
"PyMem_Malloc(n)"; : 1
PyMem_Free(void : 1
"PyMem_Free(p)" : 1
type-oriented : 2
*PyMem_New(TYPE : 1
sizeof(TYPE))" : 2
TYPE* : 2
*PyMem_Resize(void : 1
macro; : 2
PyMem_Del(void : 1
"PyMem_MALLOC(size)" : 1
"PyMem_NEW(type : 1
"PyMem_REALLOC(ptr : 1
"PyMem_RESIZE(ptr : 1
"PyMem_FREE(ptr)" : 1
"PyMem_DEL(ptr)" : 1
intercepting : 2
*PyObject_Malloc(size_t : 1
"PyObject_Malloc(1)" : 1
*PyObject_Calloc(size_t : 1
"PyObject_Calloc(1 : 1
*PyObject_Realloc(void : 1
"PyObject_Malloc(n)"; : 1
PyObject_Free(void : 1
"PyObject_Free(p)" : 1
+---------------------------------+----------------------+--------------------+-----------------------+----------------------+ : 5
PyMem_RawMalloc : 1
PyMem_Malloc : 2
PyObject_Malloc : 1
|=================================|======================|====================|=======================|======================| : 1
""pymalloc"" : 1
""pymalloc_debug"" : 1
""malloc"" : 1
""malloc_debug"" : 1
Legend: : 1
"+ : 2
debug": : 1
"Debug : 2
build": : 1
PyMemAllocatorEx : 3
+------------------------------------------------------------+-----------------------------------------+ : 6
|============================================================|=========================================| : 1
*ctx" : 2
"void* : 4
malloc(void : 1
*ctx : 6
calloc(void : 1
elsize)" : 1
realloc(void : 1
new_size)" : 1
free(void : 2
*ptr)" : 1
PyMemAllocatorDomain : 1
Domains: : 1
PYMEM_DOMAIN_RAW : 1
Functions: : 3
PYMEM_DOMAIN_MEM : 1
PYMEM_DOMAIN_OBJ : 1
PyMem_GetAllocator(PyMemAllocatorDomain : 1
*allocator) : 4
PyMem_SetAllocator(PyMemAllocatorDomain : 1
safe: : 1
(does : 1
allocator) : 1
contract: : 1
held) : 1
called) : 10
Substituting : 1
**not : 3
supported** : 1
PyMem_SetupDebugHooks(void) : 1
"PYTHONMALLOC=debug") : 1
("PYMEM_CLEANBYTE") : 2
("PYMEM_DEADBYTE") : 2
"forbidden : 1
bytes" : 2
("PYMEM_FORBIDDENBYTE") : 2
underflow) : 1
overflow) : 1
*S* : 1
"sizeof(size_t)" : 1
"2*S" : 1
malloc-like : 2
realloc-like : 4
("p[i:j]" : 1
"*(p+i)" : 1
"*(p+j)" : 1
"p[-2*S:-S]" : 1
dump) : 1
"p[-S]" : 1
character): : 2
"'m'" : 6
"p[-S+1:0]" : 1
Copies : 6
PYMEM_FORBIDDENBYTE : 3
under- : 1
"p[0:N]" : 1
PYMEM_CLEANBYTE : 3
excess : 15
free-like : 2
PYMEM_DEADBYTE : 3
realloc- : 1
"p[N:N+S]" : 1
over- : 1
"p[N+S:N+2*S]" : 1
Big-endian : 1
instant : 1
bumpserialno() : 1
obmalloc.c : 1
intact : 10
Py_FatalError() : 1
provoking : 1
*pymalloc* : 2
(smaller : 2
"arenas" : 1
"VirtualAlloc()" : 1
"VirtualFree()" : 1
"mmap()" : 1
"munmap()" : 1
without-pymalloc" : 1
"PYTHONMALLOC=malloc") : 1
PyObjectArenaAllocator : 1
+----------------------------------------------------+-----------------------------------------+ : 4
|====================================================|=========================================| : 1
PyObject_GetArenaAllocator(PyObjectArenaAllocator : 1
PyObject_SetArenaAllocator(PyObjectArenaAllocator : 1
PyTraceMalloc_Track(unsigned : 1
uintptr_t : 2
Track : 1
(failed : 1
trace) : 1
PyTraceMalloc_Untrack(unsigned : 1
ptr) : 1
Untrack : 1
PyMem_Malloc(BUFSIZ); : 2
PyMem_Free(buf); : 1
PyMem_New(char : 2
BUFSIZ); : 2
PyMem_Del(buf); : 1
PyMem_New : 1
*fatal* : 2
mixes : 4
*buf1 : 1
*buf2 : 1
*buf3 : 1
PyMem_Del(buf3); : 1
PyMem_Free() : 1
free(buf2); : 1
free(buf1); : 1
PyMem_Del() : 1
"PyLong_As*" : 1
"(return : 3
type)-1" : 1
PyLongObject : 1
PyLong_Type : 1
PyLong_Check(PyObject : 1
PyLong_CheckExact(PyObject : 1
*PyLong_FromLong(long : 1
"-5" : 1
"256" : 2
*PyLong_FromUnsignedLong(unsigned : 1
*PyLong_FromSsize_t(Py_ssize_t : 1
*PyLong_FromSize_t(size_t : 1
*PyLong_FromLongLong(long : 1
*PyLong_FromUnsignedLongLong(unsigned : 1
*PyLong_FromDouble(double : 1
*PyLong_FromString(const : 1
**pend : 1
*pend* : 1
**pend* : 1
"36" : 1
*PyLong_FromUnicodeObject(PyObject : 1
*PyLong_FromVoidPtr(void : 1
PyLong_AsLong(PyObject : 1
PyLong_AsLongAndOverflow(PyObject : 1
*overflow) : 2
"LONG_MAX" : 1
"LONG_MIN" : 1
**overflow* : 6
PyLong_AsLongLong(PyObject : 1
PyLong_AsLongLongAndOverflow(PyObject : 1
"LLONG_MAX" : 1
"LLONG_MIN" : 1
PyLong_AsSsize_t(PyObject : 1
*pylong) : 6
PyLong_AsUnsignedLong(PyObject : 1
"(unsigned : 4
long)-1" : 4
PyLong_AsSize_t(PyObject : 1
PyLong_AsUnsignedLongLong(PyObject : 1
PyLong_AsUnsignedLongMask(PyObject : 1
"ULONG_MAX : 1
PyLong_AsUnsignedLongLongMask(PyObject : 1
"ULLONG_MAX : 1
PyLong_AsDouble(PyObject : 1
*PyLong_AsVoidPtr(PyObject : 1
"PyGen_New()" : 1
"PyGen_NewWithQualName()" : 1
PyGenObject : 1
PyGen_Type : 1
PyGen_Check(PyObject : 1
PyGen_CheckExact(PyObject : 1
"PyGen_Type"; : 1
*PyGen_New(PyFrameObject : 1
*PyGen_NewWithQualName(PyFrameObject : 1
operations; : 2
"importlib.import_module()") : 1
*packages* : 4
originate : 6
hierarchically : 1
"email.mime.text" : 2
packages* : 11
"parent" : 4
subpackages: : 1
parent/ : 1
one/ : 1
two/ : 1
three/ : 1
"parent.one" : 1
"parent/__init__.py" : 2
"parent/one/__init__.py" : 1
"parent.two" : 1
"parent.three" : 1
"parent/two/__init__.py" : 1
"parent/three/__init__.py" : 1
*portions* : 1
Portions : 2
"parent/one" : 1
physically : 2
"parent/two" : 1
qualified* : 1
immaterial) : 1
"foo.bar.baz" : 11
"foo.bar" : 12
satisfying : 1
re-import : 2
*same* : 4
reinitialise : 1
conceptual : 5
*finders* : 1
*loaders* : 2
finder's : 3
*importers* : 1
locatable : 1
spec* : 2
*contain* : 1
extensible; : 1
hooks* : 4
"package.__path__") : 1
(optionally) : 4
"mpf.find_spec("foo" : 1
None)" : 11
("mpf") : 1
"mpf.find_spec("foo.bar" : 1
foo.__path__ : 1
"mpf.find_spec("foo.bar.baz" : 1
foo.bar.__path__ : 1
finder*) : 1
contains) : 1
spec.loader : 3
hasattr(spec.loader : 2
'create_module'): : 1
'exec_module' : 1
spec.loader.create_module(spec) : 1
ModuleType(spec.name) : 1
_init_module_attrs(spec : 1
spec.origin : 1
spec.submodule_search_locations : 1
sys.modules[spec.name] : 4
'exec_module'): : 1
spec.loader.load_module(spec.name) : 1
spec.loader.exec_module(module) : 4
BaseException: : 1
crucial : 1
itself; : 3
("_init_module_attrs" : 1
pseudo-code : 1
loading: : 1
requirements: : 2
("module.__dict__") : 1
loading.For : 1
instead.The : 1
clarification: : 1
(Otherwise : 1
correctly.) : 1
module(s) : 5
"import-from" : 1
"__import__()") : 1
"spam.foo" : 1
spam/ : 1
"spam/__init__.py" : 1
.foo : 1
Foo : 6
"Foo" : 9
spam.foo : 1
'spam.foo' : 1
'/tmp/imports/spam/foo.py'> : 1
spam.Foo : 1
'spam.foo.Foo'> : 1
"sys.modules['spam']" : 1
"sys.modules['spam.foo']" : 1
loader-specific : 1
namespace) : 7
Non-package : 1
__cached__ : 1
3147**) : 2
atypical : 2
Ultimately : 2
derived) : 2
adoption : 1
("__spec__") : 1
craft : 3
"module.__name__" : 1
"module.__file__" : 1
"module.__loader__" : 1
"loader" : 3
"origin" : 3
"has_location" : 1
"loader.module_repr()" : 1
repr.For : 1
source's : 2
"--check-hash-based- : 1
("PathFinder") : 1
entries* : 1
(".py" : 1
(".pyc" : 2
searchable : 2
keyed : 8
installation- : 1
"locations" : 1
("PathEntryFinder") : 1
overheads : 1
(despite : 1
*importer* : 5
else) : 3
entry) : 2
hook* : 2
"importlib.machinery.PathFinder.find_spec()" : 1
(optional) : 34
*portion* : 1
"submodule_search_locations" : 1
defined.Older : 1
ignored."find_loader()" : 1
*portion*.For : 1
hook).The : 1
entirely) : 2
parent(s) : 1
layout: : 1
package/ : 1
subpackage1/ : 1
moduleX.py : 1
moduleY.py : 1
subpackage2/ : 1
moduleZ.py : 1
moduleA.py : 1
"subpackage1/moduleX.py" : 1
"subpackage1/__init__.py" : 1
.moduleY : 3
moduleY : 2
..subpackage1 : 1
..subpackage2.moduleZ : 1
..moduleA : 1
<>" : 2
<> : 3
form; : 1
XXX.YYY.ZZZ : 1
"XXX.YYY.ZZZ" : 1
qualify : 1
"__main__.__spec__" : 4
*even : 1
if* : 1
*distinct* : 1
guarded : 3
"__main__":" : 1
evolved : 1
off-loads : 1
**Syntax : 1
Notes:** : 1
of) : 11
othername : 1
"othername" : 1
complex; : 1
operator) : 6
atoms : 3
Forms : 1
categorized : 2
atom : 5
enclosure : 2
parenth_form : 2
list_display : 2
dict_display : 2
set_display : 2
generator_expression : 2
yield_atom : 2
**Private : 1
mangling:** : 1
*private : 2
"Ham" : 1
"_Ham__spam" : 1
syntactical : 4
(longer : 2
stringliteral : 2
bytesliteral : 2
floatnumber : 3
imagnumber : 2
(complex) : 1
evaluations : 5
occurrence) : 1
[starred_expression] : 1
")" : 15
yields: : 1
"nothing" : 1
ambiguities : 6
"displays" : 1
flavors: : 4
*comprehension* : 1
assignment_expression : 11
comp_for : 5
["async"] : 1
target_list : 4
or_test : 6
[comp_iter] : 2
comp_iter : 1
comp_if : 2
"leak" : 1
"[x*y : 1
x+10)]" : 1
"[" : 9
[starred_list : 1
comprehension] : 2
"]" : 7
(starred_list : 1
comprehension) : 1
key/datum : 5
braces: : 3
[key_datum_list : 1
dict_comprehension] : 1
key_datum_list : 1
key_datum : 2
key_datum)* : 1
[","] : 10
or_expr : 5
dict_comprehension : 1
datum : 2
*dictionary : 1
summarize : 4
objects.) : 2
Clashes : 1
detected; : 2
(textually : 1
display) : 2
prevails : 1
generators) : 10
"(x*y : 1
x+10))" : 1
expression* : 1
Iterators) : 1
yield_expression : 4
[expression_list : 1
expression] : 8
agen(): : 2
"expression_list" : 5
proceed : 16
builtin) : 1
yields; : 1
<expr>" : 3
subiterator : 2
subgenerator) : 1
"yield_from" : 1
generator.__next__() : 1
Starts : 5
"__next__()"'s : 1
generator.send(value) : 1
Resumes : 1
"sends" : 2
generator.throw(value) : 1
generator.throw(type[ : 1
value[ : 3
traceback]]) : 3
generator.close() : 2
echo(value=None): : 1
print("Execution : 2
'next()' : 2
time.") : 2
print("Don't : 3
'close()' : 2
called.") : 1
echo(1) : 1
print(next(generator)) : 2
print(generator.send(2)) : 1
generator.throw(TypeError : 1
"spam") : 1
TypeError('spam',) : 1
Python." : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 2
analogously : 3
suspension : 4
context--perhaps : 1
async- : 1
detach : 1
generator-iterator's : 1
*finalizer* : 7
"asyncio.Loop.shutdown_asyncgens" : 2
Lib/asyncio/base_events.py : 3
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
agen.__anext__() : 1
agen.asend(value) : 1
agen.athrow(type[ : 1
agen.aclose() : 1
attributeref : 4
expression_list : 3
__class_getitem__ : 4
"__getitem__()": : 1
Mappings : 4
provision : 3
*sequences* : 5
"x[-1]" : 1
(counting : 1
*characters* : 1
slice_list : 2
slice_item : 2
slice_item)* : 1
proper_slice : 2
[lower_bound] : 1
[upper_bound] : 1
[stride] : 1
lower_bound : 2
upper_bound : 2
complicating : 2
disambiguated : 1
subscription) : 1
*function*) : 1
*arguments*: : 1
[argument_list : 1
argument_list : 1
positional_arguments : 2
["," : 8
starred_and_keywords] : 1
keywords_arguments] : 2
starred_and_keywords : 2
keywords_arguments : 2
positional_item : 2
positional_item)* : 1
("*" : 2
keyword_item) : 1
keyword_item)* : 1
(keyword_item : 1
keyword_item : 2
expression)* : 2
(user-defined : 1
on) : 8
(Default : 1
slot; : 1
avoided.) : 1
'named' : 1
"*identifier" : 3
"**identifier" : 3
"*expression" : 3
"expression" : 7
"f(x1 : 1
*y : 3
x3 : 1
x4)" : 1
*y1* : 4
*yM* : 2
M+4 : 1
*x1* : 1
*x2* : 1
*x3* : 1
*x4* : 1
"**expression" : 3
So: : 1
f(b=1 : 1
*(2,)) : 3
unpacking) : 2
""max-temp : 1
°F"" : 1
declared) : 2
("**") : 1
is--- : 1
await_expr : 1
left; : 5
(await_expr : 1
primary) : 1
["**" : 2
u_expr] : 1
operands): : 1
"-1**2" : 1
"10**2" : 1
"100" : 6
"10**-2" : 1
"0.01" : 2
"0.0" : 6
"ValueError".) : 1
"__pow__()" : 2
u_expr : 9
(minus) : 1
"__neg__()" : 1
(plus) : 1
"__pos__()" : 1
(invert) : 1
inversion : 4
"-(x+1)" : 1
"__invert__()" : 1
additive : 2
m_expr : 10
a_expr : 5
(multiplication) : 1
performed; : 4
"__mul__()" : 3
"__rmul__()" : 2
(at) : 1
(division) : 1
(floor : 1
division) : 2
'floor' : 1
"3.14%0.7" : 1
"0.34" : 1
"3.14" : 1
"4*0.7 : 1
0.34".) : 1
zero); : 2
identity: : 4
(x//y)*y : 1
(x%y)" : 1
Floor : 2
"divmod()": : 1
"divmod(x : 2
x%y)" : 1
interpolation) : 1
"__mod__()" : 1
(addition) : 1
"__add__()" : 12
"__radd__()" : 6
(subtraction) : 1
"__sub__()" : 1
shift_expr : 5
("<<" : 1
">>") : 1
"__lshift__()" : 1
"__rshift__()" : 1
"pow(2,n)" : 2
and_expr : 4
xor_expr : 4
"__and__()" : 2
"__rand__()" : 1
XOR : 2
OR) : 3
"__xor__()" : 1
"__rxor__()" : 1
(inclusive) : 5
"__or__()" : 3
"__ror__()" : 1
mathematics: : 1
(comp_operator : 1
or_expr)* : 2
comp_operator : 1
["not"] : 2
*rich : 2
non-boolean : 1
*z* : 8
*op1* : 1
*op2* : 1
*opN* : 1
op1 : 3
op2 : 3
opN : 2
pretty) : 1
Chapter : 1
identity) : 4
comprised : 4
(direct : 9
identities : 6
reflexive : 2
provided; : 3
value-based : 1
(Numeric : 1
complex) : 5
mathematically : 3
(algorithmically) : 1
"decimal.Decimal('NaN')" : 1
counter-intuitive : 3
implication : 3
float('NaN')" : 1
"3 : 4
3" : 4
"ord()") : 1
"range") : 2
"[1,2] : 2
(1,2)" : 1
same) : 2
"[1,2,x] : 1
[1,2,y]" : 1
reflexivity : 2
orderings : 4
"{1,2}" : 1
"{2,3}" : 1
subsets : 3
supersets : 1
inputs) : 1
transitive : 1
(non-exhaustive) : 1
Inverse : 1
mappings) : 1
"any(x : 1
"y.find(x) : 1
-1" : 1
"y.__contains__(x)" : 1
Lastly : 2
tried: : 2
y[i] : 1
y[i]" : 1
Object's : 1
and_test : 4
not_test : 4
*x*; : 2
'foo'" : 2
"''".) : 1
[identifier : 2
":="] : 1
(sometimes : 7
"walrus") : 1
pattern.search(data): : 1
do_something(matching) : 1
chunks: : 1
file.read(9000): : 1
process(chunk) : 1
sub-expressions : 1
keyword-argument : 2
comprehension-if : 1
conditional_expression : 3
["if" : 1
lambda_expr : 2
"ternary : 1
operator") : 1
[parameter_list] : 3
<lambda>(parameters): : 1
starred_list : 2
starred_item : 2
starred_item)* : 1
starred_expression : 2
(starred_item : 1
",")* : 1
[starred_item] : 1
*iterable : 1
*singleton*); : 1
"()".) : 1
suffixes: : 1
expr3 : 5
expr4 : 2
(expr1 : 1
expr4) : 2
{expr1: : 1
expr3: : 1
expr4} : 1
(expr3 : 1
expr1(expr2 : 1
*expr4 : 1
**expr5) : 1
binding) : 3
(least : 3
left) : 2
+-------------------------------------------------+---------------------------------------+ : 19
|=================================================|=======================================| : 1
"(expressions...)" : 1
"[expressions...]" : 1
"{key: : 1
value...}" : 1
"{expressions...}" : 1
"x[index]" : 1
"x[index:index]" : 1
Subscription : 1
"x(arguments...)" : 1
"x.attribute" : 1
Exponentiation : 2
[5] : 12
"+x" : 2
"~x" : 2
Positive : 6
[6] : 4
Shifts : 1
"abs(x%y) : 1
abs(y)" : 2
roundoff : 1
double- : 1
"-1e-100 : 3
1e100" : 3
"1e100" : 3
"math.fmod()" : 1
"-1e-100" : 2
"x//y" : 1
"(x-x%y)//y" : 1
"divmod(x,y)[0] : 1
distinguishes : 4
points* : 1
U+0041) : 1
characters* : 1
"LATIN : 3
CAPITAL : 9
LETTER : 17
A") : 1
CEDILLA" : 2
*precomposed : 1
character* : 3
U+00C7 : 2
U+0043 : 2
(LATIN : 4
*combining : 1
U+0327 : 2
(COMBINING : 2
CEDILLA) : 3
humans : 2
""\u00C7" : 1
"\u0043\u0327"" : 1
humans) : 1
"2**-1" : 1
"0.5" : 1
*Objects* : 1
Von : 1
Neumann's : 1
"stored : 1
computer" : 1
*identity* : 1
'"is"' : 1
"id(x)" : 1
"does : 1
length?") : 1
unchangeable : 4
*mutable*; : 1
latter's : 3
immutability : 4
subtle.) : 1
destroyed; : 2
reference- : 1
cyclically : 1
explicitly) : 3
collectable : 2
'"try"..."except"' : 1
"external" : 1
'"try"..."finally"' : 1
*containers* : 1
container's : 1
sense: : 4
E.g. : 2
[]; : 1
[]" : 3
"d".) : 1
'special : 1
attributes.' : 1
signify : 8
operator.) : 1
Evaluating : 3
"numbers.Number" : 1
"numbers.Integral" : 4
(virtual) : 1
2's : 2
""False"" : 1
""True"" : 1
"numbers.Real" : 3
machine-level : 2
mercy : 2
dwarfed : 1
complicate : 3
"numbers.Complex" : 1
"z.imag" : 3
*n*-1 : 1
renumbered : 2
slicing" : 1
"a[i:j:k]" : 1
n*k" : 2
mutability: : 1
change.) : 2
"U+0000 : 1
U+10FFFF" : 1
"ord()" : 5
10FFFF"; : 1
"chr()" : 5
10FFFF" : 1
'singleton') : 1
affixing : 1
"b'abc'") : 1
(delete) : 5
1.) : 1
unhashable) : 1
"1.0") : 3
"a[k]" : 1
"a"; : 2
interchangeably : 7
re-inserting : 1
displays) : 1
Calls) : 1
applied: : 4
definitions) : 2
+---------------------------+---------------------------------+-------------+ : 12
|===========================|=================================|=============| : 1
unavailable; : 2
"cell_contents" : 2
"'return'" : 5
"Writable" : 1
dot-notation : 1
*Note : 1
future.* : 1
(same : 11
"__func__.__doc__"); : 1
"__func__.__name__"); : 1
setting) : 1
("__func__") : 1
("__self__") : 1
"x.f(1)" : 2
"C.f(x : 1
"class : 3
"C.f(1)" : 1
"f(C,1)" : 1
fruitful : 1
"iterator.__next__()" : 1
"aiterator.__anext__" : 1
("math" : 1
item); : 1
disguise : 1
"alist.append()" : 1
*alist* : 2
"m.x" : 1
"m.__dict__["x"]" : 1
"m.x : 1
"m.__dict__["x"] : 1
(writable) : 2
annotations* : 9
"C.x" : 2
"C.__dict__["x"]" : 1
'diamond' : 1
ancestor : 18
say) : 2
transformed; : 1
"Classes" : 1
"os.fdopen()" : 2
"makefile()" : 7
streams; : 3
*byte-compiled* : 1
context; : 1
run-time) : 1
"co_name" : 1
"co_argcount" : 1
values); : 3
"co_posonlyargcount" : 1
"co_kwonlyargcount" : 1
"co_nlocals" : 1
arguments); : 1
(starting : 9
compiled; : 2
interpreter); : 1
"co_stacksize" : 1
"co_flags" : 4
"co_flags": : 1
"*arguments" : 1
"0x08" : 2
"**keywords" : 1
"0x20" : 1
division") : 1
"0x2000" : 1
"0x10" : 1
"0x1000" : 1
codeobject.co_positions() : 1
"(start_line : 1
end_line : 1
start_column : 1
end_column)" : 1
*i-th* : 4
0-indexed : 1
non-exhaustive : 2
happen: : 2
"no_debug_ranges" : 3
Position : 1
(towards : 2
frame; : 2
"f_code" : 2
(intrinsic) : 1
""f_code"" : 1
"f_trace" : 1
*may* : 4
bottom-most : 2
Jump : 2
Statement) : 1
belonged : 1
use) : 5
(nicely : 1
formatted) : 2
"tb_frame" : 2
level; : 3
"tb_lineno" : 1
occurred; : 1
"tb_lasti" : 1
""tb_frame"" : 1
"slice()" : 3
bound; : 2
slice.indices(self : 1
length) : 6
defeating : 1
"User-defined : 1
slicing) : 2
*operator : 1
overloading* : 1
"x[i]" : 1
"type(x).__getitem__(x : 1
i)" : 1
"__getitem__()") : 3
(One : 2
"NodeList" : 8
W3C's : 1
Model.) : 1
object.__new__(cls[ : 1
...]) : 16
(special-cased : 1
such) : 2
*cls*) : 1
superclass's : 1
"super().__new__(cls[ : 1
...])" : 3
instance’s : 1
"__init__(self[ : 1
object.__init__(self[ : 1
"super().__init__([args...])" : 1
("__new__()" : 1
non-"None" : 3
"__init__()"; : 1
object.__del__(self) : 1
(improperly) : 1
recommended!) : 1
*resurrection* : 1
"x.__del__()" : 1
"x"'s : 1
precarious : 1
particular: : 3
deleted; : 1
object.__repr__(self) : 1
(given : 7
"<...some : 1
description...>" : 1
"informal" : 3
information-rich : 1
object.__str__(self) : 1
"str(object)" : 2
"object.__repr__()" : 2
object.__bytes__(self) : 1
byte-string : 6
object.__format__(self : 1
format_spec) : 4
"formatted" : 2
"format(str(x) : 1
object.__lt__(self : 1
object.__le__(self : 1
object.__eq__(self : 1
object.__ne__(self : 1
object.__gt__(self : 1
object.__ge__(self : 1
"rich : 2
comparison" : 1
correspondence : 7
"x<y" : 1
"x.__lt__(y)" : 1
"x<=y" : 2
"x.__le__(y)" : 1
"x==y" : 1
"x.__eq__(y)" : 1
"x!=y" : 1
"x.__ne__(y)" : 1
"x>y" : 1
"x.__gt__(y)" : 1
"x>=y" : 1
"x.__ge__(y)" : 1
NotImplemented" : 1
inverts : 1
"(x<y : 1
x==y)" : 1
swapped-argument : 1
does); : 1
operand's : 13
object.__hash__(self) : 1
hash((self.name : 1
self.nick : 1
self.color)) : 1
print(sys.hash_info.width)"" : 1
either; : 1
bucket) : 1
"x.__hash__()" : 1
"hash(x) : 2
hash(y)" : 2
collections.abc.Hashable)" : 2
<ParentClass>.__hash__" : 1
Python.This : 1
details.Changing : 1
builds).See : 1
object.__bool__(self) : 1
"bool()"; : 1
"x.name") : 1
object.__getattr__(self : 1
"self"; : 1
"AttributeError") : 4
(computed) : 2
asymmetry : 1
"__setattr__()".) : 1
object.__getattribute__(self : 1
"object.__getattribute__(self : 1
object.__setattr__(self : 1
"object.__setattr__(self : 1
"object.__setattr__" : 1
object.__delattr__(self : 1
obj.name" : 1
"object.__delattr__" : 1
object.__dir__(self) : 1
(setting : 5
ModuleType : 1
VerboseModule(ModuleType): : 1
f'Verbose : 1
{self.__name__}' : 1
print(f'Setting : 1
{attr}...') : 1
super().__setattr__(attr : 1
sys.modules[__name__].__class__ : 1
VerboseModule : 1
__dir__ : 1
*owner* : 7
owner's : 1
attribute" : 1
class' : 1
object.__get__(self : 1
owner=None) : 1
(class : 4
(instance : 2
specification; : 3
object.__set__(self : 1
descriptor" : 6
object.__delete__(self : 1
"__objclass__" : 1
"binding : 1
behavior" : 1
"a.x" : 9
"a.__dict__['x']" : 2
"type(a).__dict__['x']" : 2
looked-up : 3
assembled : 1
"a": : 2
"x.__get__(a)" : 1
"type(a).__dict__['x'].__get__(a : 1
type(a))" : 2
"A.x" : 2
"A.__dict__['x'].__get__(None : 1
A)" : 6
Super : 1
"super(A : 2
a).x" : 1
"a.__class__.__mro__" : 1
"B.__dict__['x'].__get__(a : 1
descriptor; : 3
(and/or : 1
"__delete__()") : 1
"@classmethod") : 1
properties) : 1
*__weakref__* : 5
parent.) : 1
object.__slots__ : 1
reserves : 1
""""""""""""""""""""""""""""""""""""" : 1
unlisted : 1
"'__dict__'" : 1
"weak : 1
references" : 2
"'__weakref__'" : 2
*__slots__*; : 1
*additional* : 1
nonempty : 8
""variable-length" : 1
"dictionary" : 2
per-attribute : 1
slotted : 1
layouts) : 1
object.__init_subclass__(cls) : 1
in: : 8
Philosopher: : 1
default_name : 2
cls.default_name : 1
AustralianPhilosopher(Philosopher : 1
default_name="Bruce"): : 1
"object.__init_subclass__" : 1
"metaclass" : 2
hint) : 1
"type(cls)" : 1
object.__set_name__(self : 1
x.__set_name__(A : 1
'x') : 4
A.x : 1
c.__set_name__(A : 1
"type(name : 1
namespace)" : 2
"MySubclass" : 1
"Meta": : 1
Meta(type): : 2
MyClass(metaclass=Meta): : 1
MySubclass(MyClass): : 1
occur: : 1
resolved; : 1
determined; : 1
prepared; : 1
object.__mro_entries__(self : 1
bases) : 1
metaclass; : 1
"type(cls)") : 1
meets : 7
"__prepare__" : 8
"namespace : 1
metaclass.__prepare__(name : 1
definition) : 2
initialised : 6
(approximately) : 1
"exec(body : 1
globals() : 8
"metaclass(name : 1
"__prepare__") : 1
"__set_name__" : 1
3135** : 1
boundless : 1
explored : 1
locking/synchronization : 1
classes" : 1
class.__instancecheck__(self : 1
"isinstance(instance : 1
class.__subclasscheck__(self : 1
"issubclass(subclass : 1
(metaclass) : 1
*parameterize* : 1
type* : 6
square-brackets : 1
type-checkers : 4
*generally* : 1
object.__class_getitem__(cls : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 2
parameterization : 4
standard-library : 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 3
Presented : 1
"obj[x]" : 1
called: : 10
isclass : 1
subscribe(obj : 1
'obj[x]'""" : 1
class_of_obj : 1
class_of_obj.__getitem__(obj : 2
hasattr(class_of_obj : 1
'__getitem__'): : 1
obj.__class_getitem__(x) : 2
isclass(obj) : 1
'__class_getitem__'): : 1
TypeError( : 1
f"'{class_of_obj.__name__}' : 1
subscriptable" : 1
*metaclass* : 4
"dict[str : 1
float]" : 1
"tuple[str : 1
bytes]" : 1
type(list) : 2
'type'> : 1
type(dict) : 1
type(tuple) : 1
type(str) : 1
type(bytes) : 1
"list.__class_getitem__(int)" : 1
list.__class_getitem__ : 1
type(list[int]) : 1
'types.GenericAlias'> : 2
subscribing : 1
Menu(Enum): : 1
breakfast : 1
menu""" : 1
SPAM : 1
BACON : 1
'bacon' : 4
metaclass: : 3
type(Menu) : 1
'enum.EnumMeta'> : 1
EnumMeta : 1
Menu['SPAM'] : 1
<Menu.SPAM: : 1
'spam'> : 1
type(Menu['SPAM']) : 1
<enum : 8
'Menu'> : 1
outlining : 1
object.__call__(self[ : 1
args...]) : 1
"x(arg1 : 1
"type(x).__call__(x : 1
"lists" : 3
"tuples") : 1
*mappings* : 2
"dictionaries") : 1
mapping; : 3
concatenation) : 1
repetition) : 1
"__imul__()" : 3
below; : 3
mapping's : 6
keys; : 4
container; : 1
object.__len__(self) : 1
"len()") : 2
object.__length_hint__(self) : 1
"__length_hint__" : 1
a[1:2] : 1
a[slice(1 : 1
object.__getitem__(self : 1
"self[key]" : 4
raised; : 7
container) : 1
object.__setitem__(self : 1
object.__delitem__(self : 1
object.__missing__(self : 1
"dict"."__getitem__()" : 1
object.__iter__(self) : 1
object.__reversed__(self) : 1
("in" : 1
in") : 1
object.__contains__(self : 1
key-item : 1
object.__add__(self : 1
object.__sub__(self : 1
object.__mul__(self : 1
object.__matmul__(self : 1
object.__truediv__(self : 1
object.__floordiv__(self : 1
object.__mod__(self : 1
object.__divmod__(self : 1
object.__pow__(self : 1
other[ : 3
modulo]) : 3
object.__lshift__(self : 1
object.__rshift__(self : 1
object.__and__(self : 1
object.__xor__(self : 1
object.__or__(self : 1
("+" : 3
"|") : 2
"type(x).__add__(x : 1
"__mod__()"; : 1
object.__radd__(self : 1
object.__rsub__(self : 1
object.__rmul__(self : 1
object.__rmatmul__(self : 1
object.__rtruediv__(self : 1
object.__rfloordiv__(self : 1
object.__rmod__(self : 1
object.__rdivmod__(self : 1
object.__rpow__(self : 1
object.__rlshift__(self : 1
object.__rrshift__(self : 1
object.__rand__(self : 1
object.__rxor__(self : 1
object.__ror__(self : 1
(swapped) : 1
"__rsub__()" : 2
"type(y).__rsub__(y : 1
"type(x).__sub__(x : 1
*NotImplemented* : 1
"__rpow__()" : 1
complicated) : 2
non-reflected : 1
ancestors' : 1
object.__iadd__(self : 1
object.__isub__(self : 1
object.__imul__(self : 1
object.__imatmul__(self : 1
object.__itruediv__(self : 1
object.__ifloordiv__(self : 1
object.__imod__(self : 1
object.__ipow__(self : 1
object.__ilshift__(self : 1
object.__irshift__(self : 1
object.__iand__(self : 1
object.__ixor__(self : 1
object.__ior__(self : 1
("+=" : 1
"//=" : 2
(modifying : 3
x.__iadd__(y)" : 1
"x.__add__(y)" : 1
"y.__radd__(x)" : 1
works?) : 1
object.__neg__(self) : 1
object.__pos__(self) : 1
object.__abs__(self) : 1
object.__invert__(self) : 1
("-" : 1
"~") : 1
object.__complex__(self) : 1
object.__int__(self) : 1
object.__float__(self) : 1
object.__index__(self) : 1
Presence : 1
object.__round__(self[ : 1
ndigits]) : 1
object.__trunc__(self) : 1
object.__floor__(self) : 1
object.__ceil__(self) : 1
"ceil()" : 3
*ndigits* : 5
"__round__()" : 1
unlocking : 1
object.__enter__(self) : 1
target(s) : 1
object.__exit__(self : 1
exc_type : 9
exc_value : 5
traceback) : 3
propagated) : 1
"case : 5
MyClass(x : 2
*__match_args__* : 2
object.__match_args__ : 1
"MyClass.__match_args__" : 1
"("left" : 1
"center" : 4
"right")" : 1
MyClass(left=x : 1
center=y)" : 1
*__match_args__*; : 1
c.__len__ : 1
.__hash__() : 1
hash(1) : 2
int.__hash__() : 1
hash(int) : 2
Incorrectly : 2
'metaclass : 1
confusion' : 1
bypassing : 5
type(1).__hash__(1) : 1
type(int).__hash__(int) : 1
__getattribute__(*args): : 2
print("Metaclass : 1
getattribute : 4
invoked") : 2
type.__getattribute__(*args) : 1
C(object : 1
metaclass=Meta): : 1
__len__(self): : 6
print("Class : 1
object.__getattribute__(*args) : 1
c.__len__() : 1
type(c).__len__(c) : 1
Bypassing : 1
optimisations : 1
*Coroutine : 2
"types.coroutine()" : 1
object.__await__(self) : 1
"asyncio") : 1
coroutine.send(value) : 1
coroutine.throw(value) : 1
coroutine.throw(type[ : 1
coroutine.close() : 1
object.__aiter__(self) : 1
object.__anext__(self) : 1
Reader: : 1
readline(self): : 2
__aiter__(self): : 1
__anext__(self): : 1
self.readline() : 1
b'': : 2
iterator*.Starting : 1
"__aenter__" : 7
"__aexit__" : 8
object.__aenter__(self) : 1
object.__aexit__(self : 1
AsyncContextManager: : 2
__aenter__(self): : 3
log('entering : 1
__aexit__(self : 3
log('exiting : 1
"Does : 2
support" : 1
method—that : 1
Mars : 1
definitely : 3
imposes : 1
"implementation : 1
notes" : 1
sprinkled : 1
audiences : 1
most-maintained : 1
Lloyd : 1
Python.NET : 1
IL : 1
assemblies : 1
Hugunin : 1
stackless : 1
lc_letter : 2
(lc_letter : 1
"_")* : 1
"a"..."z" : 1
"lc_letter" : 2
"lc_letter"s : 1
adhered : 2
document.) : 1
rule) : 1
"::=" : 1
vertical : 21
alternatives; : 1
repetitions : 20
("[ : 1
]") : 3
optional) : 1
angular : 1
("<...>") : 1
'control : 1
character' : 1
("Lexical : 1
Analysis") : 1
definitions; : 1
prescribe : 1
minimally : 1
(various : 1
services) : 3
(built-in : 3
mode; : 10
compound) : 1
forms: : 7
file_input : 1
(NEWLINE : 2
statement)* : 1
situations: : 1
string); : 1
grammar: : 2
interactive_input : 1
[stmt_list] : 1
compound_stmt : 3
(top-level) : 1
eval_input : 1
NEWLINE* : 3
*tokens* : 1
*lexical : 1
analyzer* : 1
analyzer : 3
3120** : 2
*logical : 6
lines* : 2
*physical : 1
*line : 1
joining* : 1
end-of- : 1
(linefeed) : 1
linefeed) : 1
(return) : 1
("#") : 1
signifies : 4
"coding[=:]\s*([-\w.]+)" : 1
declaration; : 2
comment-only : 1
<encoding-name> : 1
vim:fileencoding=<encoding-name> : 1
Moolenaar's : 1
VIM : 1
byte-order : 2
("b'\xef\xbb\xbf'") : 1
**notepad**) : 1
Encodings) : 1
("\") : 4
2100 : 1
60: : 1
month_names : 1
['Januari' : 1
'Februari' : 1
'Maart' : 1
'April' : 1
'Mei' : 1
'Juni' : 1
Dutch : 2
'Juli' : 1
'Augustus' : 1
'September' : 1
'Oktober' : 1
'November' : 1
'December'] : 1
below); : 1
formfeeds : 1
generated) : 4
read-eval-print : 5
comment) : 1
(spaces : 2
tabs) : 3
Unix) : 8
line's : 2
backslashes; : 1
**Cross-platform : 1
note:** : 4
non-UNIX : 1
unwise : 1
formfeed : 4
Formfeed : 2
INDENT : 10
DEDENT : 10
popped : 25
confusingly) : 1
perm(l): : 2
len(l) : 1
[l] : 1
range(len(l)): : 2
l[:i] : 2
l[i+1:] : 2
perm(s) : 1
r.append(l[i:i+1] : 2
perm(l[:i] : 1
l[i+1:]) : 1
dedent : 1
parser; : 4
r" : 1
stack.) : 1
ab : 1
tokens) : 2
*identifiers* : 1
*literals* : 1
*operators* : 1
*delimiters* : 6
earlier) : 1
delimit : 7
comprises : 1
*names*) : 1
annex : 1
UAX-31 : 1
elaboration : 1
3131** : 1
(U+0001..U+007F) : 1
2.x: : 1
3131**) : 1
classification : 1
xid_start : 2
xid_continue* : 1
id_start : 3
<all : 4
Ll : 2
Lt : 3
Lm : 1
Lo : 2
Nl : 1
Other_ID_Start : 1
property> : 2
id_continue : 2
Mn : 2
Nd : 1
Pc : 1
Other_ID_Continue : 1
NFKC : 8
"id_start : 1
xid_continue*"> : 1
xid_continue : 1
"id_continue*"> : 1
*Lu* : 1
*Ll* : 1
*Lt* : 1
*Lm* : 1
*Lo* : 1
*Nl* : 1
*Mn* : 1
nonspacing : 1
*Mc* : 1
spacing : 5
*Nd* : 1
*Pc* : 1
connector : 1
punctuations : 1
*Other_ID_Start* : 1
PropList.txt : 1
*Other_ID_Continue* : 1
non-normative : 1
https://www.unicode.org/Public/14.0.0/ucd/DerivedCoreProperties.txt : 1
*soft : 1
keywords* : 1
(besides : 2
"_*" : 1
Separately : 1
"print".) : 1
Elsewhere : 1
"special" : 2
internationalization; : 1
convention.It : 1
"__*__" : 2
System-defined : 1
"dunder" : 2
*Any* : 1
"__*" : 1
Class-private : 1
"private" : 2
[stringprefix](shortstring : 1
longstring) : 1
stringprefix : 1
"R" : 4
"fr" : 1
"Fr" : 1
"fR" : 1
"FR" : 1
"rf" : 1
"rF" : 1
"Rf" : 1
"RF" : 1
shortstring : 1
"'" : 5
shortstringitem* : 2
'"' : 4
longstring : 1
"'''" : 4
longstringitem* : 2
'"""' : 4
shortstringitem : 1
shortstringchar : 2
stringescapeseq : 3
longstringitem : 1
longstringchar : 2
<any : 9
quote> : 2
"\"> : 2
character> : 3
bytesprefix(shortbytes : 1
longbytes) : 1
bytesprefix : 1
"br" : 1
"Br" : 1
"bR" : 1
"BR" : 1
"rB" : 1
"Rb" : 1
"RB" : 1
shortbytes : 1
shortbytesitem* : 2
longbytes : 1
longbytesitem* : 2
shortbytesitem : 1
shortbyteschar : 2
bytesescapeseq : 3
longbytesitem : 1
longbyteschar : 2
productions : 1
"stringprefix" : 1
"bytesprefix" : 1
English: : 1
("'") : 3
(""") : 3
*triple-quoted : 1
strings*) : 1
"'B'"; : 1
"'R'"; : 1
2.x's : 1
3.x's : 1
"'ur'" : 1
"'br'" : 1
("u'value'") : 1
*formatted : 2
literal*; : 1
retained) : 1
""".) : 1
"'R'" : 6
+-------------------+-----------------------------------+---------+ : 18
|===================|===================================|=========| : 2
"\"<newline> : 1
"\'" : 1
"\"" : 1
Double : 5
"\a" : 1
(BEL) : 1
"\b" : 18
Backspace : 3
(BS) : 1
"\f" : 3
(FF) : 1
Linefeed : 1
(LF) : 1
Carriage : 4
(CR) : 1
Horizontal : 2
(TAB) : 1
"\v" : 3
Vertical : 3
(VT) : 1
"\ooo" : 1
*ooo* : 1
(2,4) : 1
"\xhh" : 5
*hh* : 1
(3,4) : 1
"\uxxxx" : 3
(6) : 9
*xxxx* : 1
"\Uxxxxxxxx" : 3
(7) : 5
*xxxxxxxx* : 1
newline: : 1
characters.' : 2
Exactly : 8
result* : 1
mistyped : 1
broken.) : 1
Unrecognized : 1
"r"\""" : 1
quote; : 1
"r"\"" : 1
backslashes) : 1
backslash* : 1
(delimited : 1
whitespace) : 3
""hello" : 1
'world'" : 1
""helloworld"" : 1
re.compile("[A-Za-z_]" : 1
"[A-Za-z0-9_]*" : 1
literal* : 1
f_string : 1
(literal_char : 2
"{{" : 2
"}}" : 2
replacement_field)* : 2
replacement_field : 2
f_expression : 2
["="] : 1
["!" : 2
conversion] : 2
[":" : 3
format_spec] : 2
(conditional_expression : 1
or_expr) : 1
format_spec : 4
literal_char : 1
NULL> : 1
"'{{'" : 1
"'}}'" : 1
"'{'" : 6
(useful : 1
debugging) : 2
"'='" : 16
exclamation : 6
"'!'" : 8
"'}'" : 1
Replacement : 1
Spaces : 1
{name!r}." : 1
"He : 4
'Fred'." : 2
{repr(name)}." : 1
!r : 1
datetime(year=2017 : 1
month=1 : 1
day=27) : 1
f"{today:%B : 1
%Y}" : 2
'January : 1
2017' : 3
f"{today=:%B : 1
'today=January : 1
f"{number:#0x}" : 1
'0x400' : 1
f"{ : 1
'bar'" : 1
mill's : 2
f"{line : 3
mill\'s : 2
closed"' : 1
:20}" : 1
"line : 1
!r:20}" : 1
f"abc : 2
{a["x"]} : 1
{a['x']} : 1
Backslashes : 4
f"newline: : 2
{ord('\n')}" : 1
ord('\n') : 1
{newline}" : 1
'newline: : 1
10' : 3
f"Not : 1
docstring" : 1
foo.__doc__ : 1
(complex : 1
sign; : 1
'"-"' : 2
decinteger : 2
bininteger : 2
octinteger : 2
hexinteger : 2
nonzerodigit : 2
(["_"] : 7
digit)* : 3
"0"+ : 1
"0")* : 1
"B") : 1
bindigit)+ : 1
("o" : 1
"O") : 1
octdigit)+ : 1
"X") : 1
hexdigit)+ : 1
"1"..."9" : 1
"0"..."9" : 1
bindigit : 1
octdigit : 1
"0"..."7" : 1
hexdigit : 1
"a"..."f" : 1
"A"..."F" : 1
0o177 : 1
0b100110111 : 1
79228162514264337593543950336 : 1
0o377 : 1
0xdeadbeef : 1
100_000_000_000 : 1
0b_1110_0101 : 1
pointfloat : 2
exponentfloat : 2
[digitpart] : 2
digitpart : 8
(digitpart : 1
pointfloat) : 1
("e" : 3
"E") : 2
["+" : 2
"-"] : 2
"077e010" : 1
"77e10" : 1
.001 : 2
1e100 : 1
3.14e-10 : 1
0e0 : 1
3.14_15_93 : 1
(floatnumber : 2
digitpart) : 1
("j" : 1
"J") : 1
"(3+4j)" : 1
3.14j : 1
10.j : 1
10j : 1
.001j : 1
1e100j : 1
3.14e-10j : 1
3.14_15_93j : 1
; : 5
analyzer: : 1
` : 1
https://www.unicode.org/Public/11.0.0/ucd/NameAliases.txt : 1
*block* : 16
"__main__") : 4
frame* : 1
*Names* : 1
as-pattern : 1
unbind : 1
global.) : 1
*free : 1
*binding* : 1
*environment* : 1
fail: : 3
list(a : 1
"__builtins__"; : 1
wanting : 3
"builtins"; : 1
42: : 2
*raised* : 1
*handled* : 1
"termination" : 1
repair : 1
top) : 1
*non-virtual : 1
"core : 1
semantics" : 1
non-essential : 1
Grammar/python.gram) : 1
recovery : 6
EBNF : 1
consumed) : 3
PEG's : 1
"ordered : 1
choice" : 1
grammars) : 1
grammar's : 1
@trailer : 1
_PyPegen_parse(Parser : 1
p->keywords : 1
reserved_keywords; : 1
p->n_keyword_lists : 1
n_keyword_lists; : 1
p->soft_keywords : 1
soft_keywords; : 1
(p->start_rule : 5
Py_file_input) : 1
file_rule(p); : 1
Py_single_input) : 1
interactive_rule(p); : 1
Py_eval_input) : 1
eval_rule(p); : 1
Py_func_type_input) : 1
func_type_rule(p); : 1
Py_fstring_input) : 1
fstring_rule(p); : 1
START : 2
GRAMMAR : 2
grammatical : 1
SOFT : 1
KEYWORDS : 2
Upper : 3
(NAME) : 1
Grammar/Tokens : 1
"invalid_" : 1
rules) : 2
PEG) : 1
information): : 1
rule_name: : 1
rule_name[return_type]: : 2
e1 : 4
e2 : 4
so: : 8
first_alt : 1
second_alt : 1
'(e)*') : 1
e* : 1
e+ : 1
s.e+ : 1
(e : 1
(s : 1
e)*) : 1
&e : 1
Succeed : 1
!e : 1
Commit : 6
STARTING : 1
RULES : 2
file[mod_ty]: : 1
a=[statements] : 1
ENDMARKER : 6
_PyPegen_make_module(p : 1
interactive[mod_ty]: : 1
a=statement_newline : 1
_PyAST_Interactive(a : 1
p->arena) : 7
eval[mod_ty]: : 1
a=expressions : 1
_PyAST_Expression(a : 1
func_type[mod_ty]: : 1
a=[type_expressions] : 1
')' : 39
'->' : 1
b=expression : 12
_PyAST_FunctionType(a : 1
fstring[expr_ty]: : 1
star_expressions : 4
GENERAL : 1
STATEMENTS : 3
statements[asdl_stmt_seq*]: : 1
a=statement+ : 1
(asdl_stmt_seq*)_PyPegen_seq_flatten(p : 1
statement[asdl_stmt_seq*]: : 1
a=compound_stmt : 2
(asdl_stmt_seq*)_PyPegen_singleton_seq(p : 4
a[asdl_stmt_seq*]=simple_stmts : 1
statement_newline[asdl_stmt_seq*]: : 1
simple_stmts : 2
CHECK(stmt_ty : 1
_PyAST_Pass(EXTRA))) : 1
_PyPegen_interactive_exit(p) : 1
simple_stmts[asdl_stmt_seq*]: : 1
a=simple_stmt : 1
!';' : 1
a[asdl_stmt_seq*]=';'.simple_stmt+ : 1
[';'] : 1
simple_stmt[stmt_ty] : 1
(memo): : 16
e=star_expressions : 1
_PyAST_Expr(e : 1
EXTRA) : 135
&'return' : 1
return_stmt : 3
&('import' : 1
'from') : 1
import_stmt : 3
&'raise' : 1
raise_stmt : 3
'pass' : 1
_PyAST_Pass(EXTRA) : 1
&'del' : 1
del_stmt : 3
&'yield' : 1
yield_stmt : 3
&'assert' : 1
assert_stmt : 3
'break' : 1
_PyAST_Break(EXTRA) : 1
'continue' : 1
_PyAST_Continue(EXTRA) : 1
&'global' : 1
global_stmt : 3
&'nonlocal' : 1
nonlocal_stmt : 3
compound_stmt[stmt_ty]: : 1
&('def' : 1
ASYNC) : 3
function_def : 1
&'if' : 1
if_stmt : 3
&('class' : 1
class_def : 1
&('with' : 1
with_stmt : 4
&('for' : 1
for_stmt : 4
&'try' : 1
try_stmt : 3
&'while' : 1
while_stmt : 3
match_stmt : 3
SIMPLE : 1
annotated_rhs : 1
'yield'; : 1
yield_expr : 2
'yield' : 3
assignment[stmt_ty]: : 1
a=NAME : 16
c=['=' : 2
d=annotated_rhs : 2
}] : 12
CHECK_VERSION( : 2
stmt_ty : 2
"Variable : 2
_PyAST_AnnAssign(CHECK(expr_ty : 1
_PyPegen_set_expr_context(p : 9
Store)) : 3
a=('(' : 1
b=single_target : 1
single_subscript_attribute_target) : 1
CHECK_VERSION(stmt_ty : 7
_PyAST_AnnAssign(a : 1
EXTRA)) : 13
a[asdl_expr_seq*]=(z=star_targets : 1
})+ : 7
b=(yield_expr : 1
star_expressions) : 3
!'=' : 1
tc=[TYPE_COMMENT] : 5
_PyAST_Assign(a : 1
NEW_TYPE_COMMENT(p : 7
tc) : 15
a=single_target : 2
b=augassign : 1
c=(yield_expr : 1
_PyAST_AugAssign(a : 1
b->kind : 1
invalid_assignment : 1
annotated_rhs[expr_ty]: : 1
augassign[AugOperator*]: : 1
'+=' : 1
_PyPegen_augoperator(p : 13
Add) : 1
'-=' : 1
Sub) : 1
'*=' : 1
Mult) : 1
'@=' : 1
CHECK_VERSION(AugOperator* : 1
MatMult)) : 1
'/=' : 1
Div) : 1
'%=' : 1
Mod) : 1
'&=' : 1
BitAnd) : 1
'|=' : 1
BitOr) : 1
'^=' : 1
BitXor) : 1
'<<=' : 1
LShift) : 1
'>>=' : 1
RShift) : 1
'**=' : 1
Pow) : 1
'//=' : 1
FloorDiv) : 1
return_stmt[stmt_ty]: : 1
a=[star_expressions] : 2
_PyAST_Return(a : 1
raise_stmt[stmt_ty]: : 1
'raise' : 2
a=expression : 22
b=['from' : 1
z=expression : 4
_PyAST_Raise(a : 1
_PyAST_Raise(NULL : 1
global_stmt[stmt_ty]: : 1
'global' : 1
a[asdl_expr_seq*]=','.NAME+ : 2
_PyAST_Global(CHECK(asdl_identifier_seq* : 1
_PyPegen_map_names_to_ids(p : 4
nonlocal_stmt[stmt_ty]: : 1
'nonlocal' : 1
_PyAST_Nonlocal(CHECK(asdl_identifier_seq* : 1
del_stmt[stmt_ty]: : 1
'del' : 2
a=del_targets : 1
&(';' : 1
NEWLINE) : 1
_PyAST_Delete(a : 1
invalid_del_stmt : 1
yield_stmt[stmt_ty]: : 1
y=yield_expr : 1
_PyAST_Expr(y : 1
assert_stmt[stmt_ty]: : 1
'assert' : 1
b=[',' : 2
_PyAST_Assert(a : 1
import_stmt[stmt_ty]: : 1
import_name : 1
import_from : 1
import_name[stmt_ty]: : 1
'import' : 3
a=dotted_as_names : 1
_PyAST_Import(a : 1
('.' : 1
'...') : 1
tokenized : 5
ELLIPSIS : 1
import_from[stmt_ty]: : 1
'from' : 7
a=('.' : 2
'...')* : 1
b=dotted_name : 1
c=import_from_targets : 1
_PyAST_ImportFrom(b->v.Name.id : 1
_PyPegen_seq_count_dots(a) : 2
'...')+ : 1
b=import_from_targets : 1
_PyAST_ImportFrom(NULL : 1
import_from_targets[asdl_alias_seq*]: : 1
a=import_from_as_names : 1
[','] : 11
import_from_as_names : 2
!',' : 3
(asdl_alias_seq*)_PyPegen_singleton_seq(p : 1
CHECK(alias_ty : 1
_PyPegen_alias_for_star(p : 1
EXTRA))) : 1
invalid_import_from_targets : 1
import_from_as_names[asdl_alias_seq*]: : 1
a[asdl_alias_seq*]=','.import_from_as_name+ : 1
import_from_as_name[alias_ty]: : 1
b=['as' : 2
z=NAME : 4
_PyAST_alias(a->v.Name.id : 2
((expr_ty) : 10
b)->v.Name.id : 2
dotted_as_names[asdl_alias_seq*]: : 1
a[asdl_alias_seq*]=','.dotted_as_name+ : 1
dotted_as_name[alias_ty]: : 1
a=dotted_name : 2
dotted_name[expr_ty]: : 1
b=NAME : 6
_PyPegen_join_names_with_dot(p : 1
COMPOUND : 1
block[asdl_stmt_seq*] : 1
a=statements : 1
invalid_block : 1
decorators[asdl_expr_seq*]: : 1
a[asdl_expr_seq*]=('@' : 1
f=named_expression : 1
class_def[stmt_ty]: : 1
a=decorators : 1
b=class_def_raw : 1
_PyPegen_class_def_decorators(p : 1
class_def_raw : 1
class_def_raw[stmt_ty]: : 1
invalid_class_def_raw : 1
b=['(' : 1
z=[arguments] : 1
c=block : 1
_PyAST_ClassDef(a->v.Name.id : 1
b)->v.Call.args : 3
b)->v.Call.keywords : 3
function_def[stmt_ty]: : 1
d=decorators : 1
f=function_def_raw : 1
_PyPegen_function_def_decorators(p : 1
function_def_raw : 1
function_def_raw[stmt_ty]: : 1
invalid_def_raw : 1
n=NAME : 2
&&'(' : 2
params=[params] : 2
a=['->' : 2
&&':' : 7
tc=[func_type_comment] : 2
b=block : 20
_PyAST_FunctionDef(n->v.Name.id : 1
(params) : 2
CHECK(arguments_ty : 3
_PyPegen_empty_arguments(p)) : 3
ASYNC : 6
"Async : 5
are" : 13
_PyAST_AsyncFunctionDef(n->v.Name.id : 1
params[arguments_ty]: : 1
invalid_parameters : 1
parameters[arguments_ty]: : 1
a=slash_no_default : 1
b[asdl_arg_seq*]=param_no_default* : 1
c=param_with_default* : 1
d=[star_etc] : 1
CHECK_VERSION(arguments_ty : 4
"Positional-only : 4
_PyPegen_make_arguments(p : 10
a=slash_with_default : 2
b=param_with_default* : 2
c=[star_etc] : 2
c)) : 4
a[asdl_arg_seq*]=param_no_default+ : 3
a=param_with_default+ : 1
b=[star_etc] : 1
b)} : 2
a=star_etc : 1
(',' : 3
&')') : 1
(yet) : 3
slash_no_default[asdl_arg_seq*]: : 1
',' : 59
&')' : 7
slash_with_default[SlashWithDefault*]: : 1
a=param_no_default* : 2
b=param_with_default+ : 2
_PyPegen_slash_with_default(p : 4
(asdl_arg_seq : 4
*)a : 4
star_etc[StarEtc*]: : 1
invalid_star_etc : 1
a=param_no_default : 3
b=param_maybe_default* : 2
c=[kwds] : 3
_PyPegen_star_etc(p : 7
a=param_no_default_star_annotation : 1
b=param_maybe_default+ : 1
a=kwds : 1
kwds[arg_ty]: : 1
invalid_kwds : 1
'**' : 16
*includes* : 1
styles: : 2
comments: : 2
paren : 2
param_no_default[arg_ty]: : 1
a=param : 7
tc=TYPE_COMMENT : 8
_PyPegen_add_type_comment_to_arg(p : 4
param_no_default_star_annotation[arg_ty]: : 1
a=param_star_annotation : 2
param_with_default[NameDefaultPair*]: : 1
c=default : 8
_PyPegen_name_default_pair(p : 8
param_maybe_default[NameDefaultPair*]: : 1
param[arg_ty]: : 1
b=annotation : 1
_PyAST_arg(a->v.Name.id : 3
param_star_annotation[arg_ty]: : 1
b=star_annotation : 1
annotation[expr_ty]: : 1
star_annotation[expr_ty]: : 1
a=star_expression : 3
default[expr_ty]: : 1
invalid_default : 1
if_stmt[stmt_ty]: : 1
invalid_if_stmt : 1
a=named_expression : 9
c=elif_stmt : 2
_PyAST_If(a : 4
CHECK(asdl_stmt_seq* : 2
_PyPegen_singleton_seq(p : 8
c=[else_block] : 3
elif_stmt[stmt_ty]: : 1
invalid_elif_stmt : 1
'elif' : 4
else_block[asdl_stmt_seq*]: : 1
invalid_else_stmt : 1
'else' : 5
while_stmt[stmt_ty]: : 1
invalid_while_stmt : 1
'while' : 3
_PyAST_While(a : 1
for_stmt[stmt_ty]: : 1
invalid_for_stmt : 1
t=star_targets : 2
ex=star_expressions : 2
el=[else_block] : 4
_PyAST_For(t : 1
ex : 5
_PyAST_AsyncFor(t : 1
invalid_for_target : 2
with_stmt[stmt_ty]: : 1
invalid_with_stmt_indent : 1
a[asdl_withitem_seq*]=','.with_item+ : 4
"Parenthesized : 1
_PyAST_With(a : 2
_PyAST_AsyncWith(a : 2
invalid_with_stmt : 1
with_item[withitem_ty]: : 1
e=expression : 4
'as' : 6
t=star_target : 1
&(',' : 2
':') : 6
_PyAST_withitem(e : 2
invalid_with_item : 1
try_stmt[stmt_ty]: : 1
invalid_try_stmt : 1
f=finally_block : 1
_PyAST_Try(b : 2
ex[asdl_excepthandler_seq*]=except_block+ : 1
f=[finally_block] : 2
ex[asdl_excepthandler_seq*]=except_star_block+ : 1
"Exception : 2
_PyAST_TryStar(b : 1
except_block[excepthandler_ty]: : 1
invalid_except_stmt_indent : 1
t=['as' : 2
_PyAST_ExceptHandler(e : 2
(t) : 2
t)->v.Name.id : 2
_PyAST_ExceptHandler(NULL : 1
invalid_except_stmt : 2
except_star_block[excepthandler_ty]: : 1
invalid_except_star_stmt_indent : 1
finally_block[asdl_stmt_seq*]: : 1
invalid_finally_stmt : 1
a=block : 1
match_stmt[stmt_ty]: : 1
subject=subject_expr : 2
cases[asdl_match_case_seq*]=case_block+ : 1
"Pattern : 2
_PyAST_Match(subject : 1
invalid_match_stmt : 1
subject_expr[expr_ty]: : 1
value=star_named_expression : 1
values=star_named_expressions : 1
_PyAST_Tuple(CHECK(asdl_expr_seq* : 6
_PyPegen_seq_insert_in_front(p : 9
values)) : 1
named_expression : 9
case_block[match_case_ty]: : 1
invalid_case_block : 1
pattern=patterns : 1
guard=guard : 1
body=block : 1
_PyAST_match_case(pattern : 1
guard[expr_ty]: : 1
guard=named_expression : 1
patterns[pattern_ty]: : 1
patterns[asdl_pattern_seq*]=open_sequence_pattern : 1
_PyAST_MatchSequence(patterns : 3
pattern[pattern_ty]: : 1
as_pattern : 3
or_pattern : 6
as_pattern[pattern_ty]: : 1
pattern=or_pattern : 1
target=pattern_capture_target : 4
_PyAST_MatchAs(pattern : 1
target->v.Name.id : 2
invalid_as_pattern : 1
or_pattern[pattern_ty]: : 1
patterns[asdl_pattern_seq*]='|'.closed_pattern+ : 1
asdl_seq_LEN(patterns) : 1
asdl_seq_GET(patterns : 1
_PyAST_MatchOr(patterns : 1
closed_pattern[pattern_ty] : 1
literal_pattern : 3
capture_pattern : 5
wildcard_pattern : 4
value_pattern : 3
group_pattern : 3
sequence_pattern : 3
mapping_pattern : 3
class_pattern : 3
literal_pattern[pattern_ty]: : 1
value=signed_number : 1
!('+' : 2
_PyAST_MatchValue(value : 3
value=complex_number : 1
value=strings : 1
_PyAST_MatchSingleton(Py_None : 1
_PyAST_MatchSingleton(Py_True : 1
_PyAST_MatchSingleton(Py_False : 1
literal_expr[expr_ty]: : 1
signed_number : 4
complex_number : 1
_PyAST_Constant(Py_None : 2
_PyAST_Constant(Py_True : 2
_PyAST_Constant(Py_False : 2
complex_number[expr_ty]: : 1
real=signed_real_number : 2
imag=imaginary_number : 2
_PyAST_BinOp(real : 2
imag : 3
Sub : 3
signed_number[expr_ty]: : 1
NUMBER : 10
number=NUMBER : 1
_PyAST_UnaryOp(USub : 3
signed_real_number[expr_ty]: : 1
real_number : 1
real=real_number : 1
real_number[expr_ty]: : 1
real=NUMBER : 1
_PyPegen_ensure_real(p : 1
real) : 1
imaginary_number[expr_ty]: : 1
imag=NUMBER : 1
_PyPegen_ensure_imaginary(p : 1
capture_pattern[pattern_ty]: : 1
_PyAST_MatchAs(NULL : 2
pattern_capture_target[expr_ty]: : 1
!"_" : 1
name=NAME : 1
!('.' : 2
'=') : 3
Store) : 4
wildcard_pattern[pattern_ty]: : 1
value_pattern[pattern_ty]: : 1
attr=attr : 1
_PyAST_MatchValue(attr : 1
attr[expr_ty]: : 1
value=name_or_attr : 1
attr=NAME : 1
_PyAST_Attribute(value : 1
attr->v.Name.id : 1
name_or_attr[expr_ty]: : 1
group_pattern[pattern_ty]: : 1
pattern=pattern : 2
sequence_pattern[pattern_ty]: : 1
patterns=maybe_sequence_pattern : 2
patterns=open_sequence_pattern : 1
open_sequence_pattern[asdl_seq*]: : 1
pattern=maybe_star_pattern : 1
maybe_sequence_pattern[asdl_seq*]: : 1
patterns=','.maybe_star_pattern+ : 1
maybe_star_pattern[pattern_ty]: : 1
star_pattern : 3
star_pattern[pattern_ty] : 1
_PyAST_MatchStar(target->v.Name.id : 1
_PyAST_MatchStar(NULL : 1
mapping_pattern[pattern_ty]: : 1
'}' : 10
_PyAST_MatchMapping(NULL : 2
rest=double_star_pattern : 2
rest->v.Name.id : 2
items=items_pattern : 2
_PyAST_MatchMapping( : 2
CHECK(asdl_expr_seq* : 11
_PyPegen_get_pattern_keys(p : 4
items)) : 4
CHECK(asdl_pattern_seq* : 4
_PyPegen_get_patterns(p : 4
items_pattern[asdl_seq*]: : 1
','.key_value_pattern+ : 1
key_value_pattern[KeyPatternPair*]: : 1
key=(literal_expr : 1
attr) : 7
_PyPegen_key_pattern_pair(p : 2
double_star_pattern[expr_ty]: : 1
class_pattern[pattern_ty]: : 1
cls=name_or_attr : 4
_PyAST_MatchClass(cls : 2
patterns=positional_patterns : 2
keywords=keyword_patterns : 2
_PyAST_MatchClass( : 2
CHECK(asdl_identifier_seq* : 2
keywords)))) : 2
keywords)) : 2
invalid_class_pattern : 1
positional_patterns[asdl_pattern_seq*]: : 1
args[asdl_pattern_seq*]=','.pattern+ : 1
keyword_patterns[asdl_seq*]: : 1
','.keyword_pattern+ : 1
keyword_pattern[KeyPatternPair*]: : 1
arg=NAME : 1
value=pattern : 1
EXPRESSIONS : 1
expressions[expr_ty]: : 1
b=(',' : 4
c=expression : 4
b)) : 10
expression[expr_ty] : 1
invalid_expression : 1
invalid_legacy_expression : 1
a=disjunction : 4
b=disjunction : 5
_PyAST_IfExp(b : 2
disjunction : 2
lambdef : 2
yield_expr[expr_ty]: : 1
_PyAST_YieldFrom(a : 1
_PyAST_Yield(a : 1
star_expressions[expr_ty]: : 1
c=star_expression : 1
star_expression : 1
star_expression[expr_ty] : 1
a=bitwise_or : 16
_PyAST_Starred(a : 3
star_named_expressions[asdl_expr_seq*]: : 1
a[asdl_expr_seq*]=','.star_named_expression+ : 1
star_named_expression[expr_ty]: : 1
assignment_expression[expr_ty]: : 1
':=' : 5
CHECK_VERSION(expr_ty : 3
"Assignment : 1
_PyAST_NamedExpr(CHECK(expr_ty : 1
named_expression[expr_ty]: : 1
invalid_named_expression : 1
!':=' : 1
disjunction[expr_ty] : 1
a=conjunction : 1
b=('or' : 1
c=conjunction : 1
_PyAST_BoolOp( : 2
conjunction[expr_ty] : 1
a=inversion : 2
b=('and' : 1
c=inversion : 1
inversion[expr_ty] : 1
'not' : 3
_PyAST_UnaryOp(Not : 1
comparison[expr_ty]: : 1
b=compare_op_bitwise_or_pair+ : 1
_PyAST_Compare( : 1
CHECK(asdl_int_seq* : 1
_PyPegen_get_cmpops(p : 1
_PyPegen_get_exprs(p : 1
bitwise_or : 5
compare_op_bitwise_or_pair[CmpopExprPair*]: : 1
eq_bitwise_or : 1
noteq_bitwise_or : 1
lte_bitwise_or : 1
lt_bitwise_or : 1
gte_bitwise_or : 1
gt_bitwise_or : 1
notin_bitwise_or : 1
in_bitwise_or : 1
isnot_bitwise_or : 1
is_bitwise_or : 1
eq_bitwise_or[CmpopExprPair*]: : 1
_PyPegen_cmpop_expr_pair(p : 9
Eq : 2
noteq_bitwise_or[CmpopExprPair*]: : 1
(tok='!=' : 1
_PyPegen_check_barry_as_flufl(p : 1
tok) : 1
tok}) : 1
{_PyPegen_cmpop_expr_pair(p : 1
NotEq : 2
lte_bitwise_or[CmpopExprPair*]: : 1
'<=' : 2
LtE : 2
lt_bitwise_or[CmpopExprPair*]: : 1
gte_bitwise_or[CmpopExprPair*]: : 1
'>=' : 3
GtE : 2
gt_bitwise_or[CmpopExprPair*]: : 1
Gt : 2
notin_bitwise_or[CmpopExprPair*]: : 1
NotIn : 2
in_bitwise_or[CmpopExprPair*]: : 1
isnot_bitwise_or[CmpopExprPair*]: : 1
IsNot : 2
is_bitwise_or[CmpopExprPair*]: : 1
bitwise_or[expr_ty]: : 1
'|' : 2
b=bitwise_xor : 1
_PyAST_BinOp(a : 13
BitOr : 2
bitwise_xor : 1
bitwise_xor[expr_ty]: : 1
a=bitwise_xor : 1
'^' : 2
b=bitwise_and : 1
BitXor : 2
bitwise_and : 1
bitwise_and[expr_ty]: : 1
a=bitwise_and : 1
b=shift_expr : 1
BitAnd : 2
shift_expr[expr_ty]: : 1
a=shift_expr : 2
'<<' : 1
b=sum : 2
LShift : 2
'>>' : 1
RShift : 2
sum[expr_ty]: : 1
a=sum : 2
b=term : 2
term[expr_ty]: : 1
a=term : 5
b=factor : 6
Mult : 2
Div : 2
'//' : 3
FloorDiv : 2
Mod : 2
MatMult : 2
factor[expr_ty] : 1
a=factor : 3
_PyAST_UnaryOp(UAdd : 1
_PyAST_UnaryOp(Invert : 1
power[expr_ty]: : 1
a=await_primary : 1
Pow : 2
await_primary : 1
"obj.something.something" : 1
"obj[something]" : 1
"obj(something)" : 1
await_primary[expr_ty] : 1
AWAIT : 1
a=primary : 5
"Await : 1
_PyAST_Await(a : 1
primary[expr_ty]: : 1
_PyAST_Attribute(a : 5
b->v.Name.id : 5
b=genexp : 2
_PyAST_Call(a : 4
(asdl_expr_seq*)_PyPegen_singleton_seq(p : 4
b=[arguments] : 2
b=slices : 5
_PyAST_Subscript(a : 5
slices[expr_ty]: : 1
a=slice : 1
a[asdl_expr_seq*]=','.(slice : 1
starred_expression)+ : 1
_PyAST_Tuple(a : 4
slice[expr_ty]: : 1
a=[expression] : 1
b=[expression] : 1
c=[':' : 1
d=[expression] : 1
_PyAST_Slice(a : 1
atom[expr_ty]: : 1
&STRING : 1
&'(' : 1
(tuple : 1
genexp) : 1
&'[' : 1
listcomp) : 1
&'{' : 1
(dict : 1
dictcomp : 1
setcomp) : 1
_PyAST_Constant(Py_Ellipsis : 1
group[expr_ty]: : 1
a=(yield_expr : 1
named_expression) : 1
invalid_group : 1
lambdef[expr_ty]: : 1
'lambda' : 1
a=[lambda_params] : 1
_PyAST_Lambda((a) : 1
lambda_params[arguments_ty]: : 1
invalid_lambda_parameters : 1
lambda_parameters : 2
above.) : 9
lambda_parameters[arguments_ty]: : 1
a=lambda_slash_no_default : 1
b[asdl_arg_seq*]=lambda_param_no_default* : 1
c=lambda_param_with_default* : 1
d=[lambda_star_etc] : 1
a=lambda_slash_with_default : 2
b=lambda_param_with_default* : 2
c=[lambda_star_etc] : 2
a[asdl_arg_seq*]=lambda_param_no_default+ : 3
a=lambda_param_with_default+ : 1
b=[lambda_star_etc] : 1
a=lambda_star_etc : 1
lambda_slash_no_default[asdl_arg_seq*]: : 1
&':' : 5
lambda_slash_with_default[SlashWithDefault*]: : 1
a=lambda_param_no_default* : 2
b=lambda_param_with_default+ : 2
lambda_star_etc[StarEtc*]: : 1
invalid_lambda_star_etc : 1
a=lambda_param_no_default : 3
b=lambda_param_maybe_default* : 1
c=[lambda_kwds] : 2
b=lambda_param_maybe_default+ : 1
a=lambda_kwds : 1
lambda_kwds[arg_ty]: : 1
invalid_lambda_kwds : 1
lambda_param_no_default[arg_ty]: : 1
a=lambda_param : 7
lambda_param_with_default[NameDefaultPair*]: : 1
lambda_param_maybe_default[NameDefaultPair*]: : 1
lambda_param[arg_ty]: : 1
LITERALS : 1
strings[expr_ty] : 1
a=STRING+ : 1
_PyPegen_concatenate_strings(p : 1
list[expr_ty]: : 1
a=[star_named_expressions] : 1
_PyAST_List(a : 3
tuple[expr_ty]: : 1
a=[y=star_named_expression : 1
z=[star_named_expressions] : 1
set[expr_ty]: : 1
a=star_named_expressions : 1
_PyAST_Set(a : 1
Dicts : 1
dict[expr_ty]: : 1
a=[double_starred_kvpairs] : 1
_PyAST_Dict( : 1
_PyPegen_get_keys(p : 1
_PyPegen_get_values(p : 1
invalid_double_starred_kvpairs : 1
double_starred_kvpairs[asdl_seq*]: : 1
a=','.double_starred_kvpair+ : 1
double_starred_kvpair[KeyValuePair*]: : 1
_PyPegen_key_value_pair(p : 2
kvpair : 1
kvpair[KeyValuePair*]: : 1
for_if_clauses[asdl_comprehension_seq*]: : 1
a[asdl_comprehension_seq*]=for_if_clause+ : 1
for_if_clause[comprehension_ty]: : 1
a=star_targets : 2
c[asdl_expr_seq*]=('if' : 2
z=disjunction : 2
})* : 3
CHECK_VERSION(comprehension_ty : 1
_PyAST_comprehension(a : 2
p->arena)) : 1
listcomp[expr_ty]: : 1
b=for_if_clauses : 7
_PyAST_ListComp(a : 1
invalid_comprehension : 3
setcomp[expr_ty]: : 1
_PyAST_SetComp(a : 1
genexp[expr_ty]: : 1
a=( : 1
!':=') : 2
_PyAST_GeneratorExp(a : 1
dictcomp[expr_ty]: : 1
a=kvpair : 1
_PyAST_DictComp(a->key : 1
a->value : 1
invalid_dict_comprehension : 1
FUNCTION : 2
CALL : 3
ARGUMENTS : 1
arguments[expr_ty] : 1
a=args : 4
invalid_arguments : 1
args[expr_ty]: : 1
a[asdl_expr_seq*]=','.(starred_expression : 1
!'=')+ : 1
k=kwargs : 1
{k}] : 1
_PyPegen_collect_call_seqs(p : 1
a=kwargs : 1
_PyAST_Call(_PyPegen_dummy_name(p) : 1
CHECK_NULL_ALLOWED(asdl_expr_seq* : 1
_PyPegen_seq_extract_starred_exprs(p : 1
CHECK_NULL_ALLOWED(asdl_keyword_seq* : 1
_PyPegen_seq_delete_starred_exprs(p : 1
kwargs[asdl_seq*]: : 1
a=','.kwarg_or_starred+ : 1
b=','.kwarg_or_double_starred+ : 1
_PyPegen_join_sequences(p : 1
','.kwarg_or_starred+ : 1
','.kwarg_or_double_starred+ : 1
starred_expression[expr_ty]: : 1
kwarg_or_starred[KeywordOrStarred*]: : 1
invalid_kwarg : 2
_PyPegen_keyword_or_starred(p : 4
CHECK(keyword_ty : 3
_PyAST_keyword(a->v.Name.id : 2
a=starred_expression : 3
kwarg_or_double_starred[KeywordOrStarred*]: : 1
_PyAST_keyword(NULL : 1
ASSIGNMENT : 1
TARGETS : 1
star_targets : 3
*bitwise_or : 1
star_targets[expr_ty]: : 1
a=star_target : 4
c=star_target : 2
star_targets_list_seq[asdl_expr_seq*]: : 1
a[asdl_expr_seq*]=','.star_target+ : 1
star_targets_tuple_seq[asdl_expr_seq*]: : 1
(asdl_expr_seq*) : 2
star_target[expr_ty] : 1
a=(!'*' : 1
star_target) : 1
_PyAST_Starred(CHECK(expr_ty : 1
target_with_star_atom : 1
target_with_star_atom[expr_ty] : 1
a=t_primary : 10
!t_lookahead : 6
star_atom : 1
star_atom[expr_ty]: : 1
a=target_with_star_atom : 1
a=[star_targets_tuple_seq] : 1
a=[star_targets_list_seq] : 1
single_target[expr_ty]: : 1
single_subscript_attribute_target : 1
single_subscript_attribute_target[expr_ty]: : 1
t_primary[expr_ty]: : 1
&t_lookahead : 5
a=atom : 1
t_lookahead: : 1
Targets : 1
del_targets[asdl_expr_seq*]: : 1
a[asdl_expr_seq*]=','.del_target+ : 1
del_target[expr_ty] : 1
Del : 5
del_t_atom : 1
del_t_atom[expr_ty]: : 1
Del) : 2
a=del_target : 1
a=[del_targets] : 2
TYPING : 1
ELEMENTS : 1
type_expressions : 1
*/** : 1
type_expressions[asdl_expr_seq*]: : 1
a=','.expression+ : 3
(asdl_expr_seq*)_PyPegen_seq_append_to_end( : 2
CHECK(asdl_seq* : 2
_PyPegen_seq_append_to_end(p : 1
(asdl_expr_seq*)_PyPegen_seq_append_to_end(p : 2
a[asdl_expr_seq*]=','.expression+ : 1
{a} : 1
func_type_comment[Token*]: : 1
t=TYPE_COMMENT : 1
&(NEWLINE : 1
INDENT) : 1
invalid_double_type_comments : 1
TYPE_COMMENT : 4
END : 1
INVALID : 2
invalid_arguments: : 1
RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a : 35
"iterable : 2
unpacking") : 1
[args : 3
for_if_clauses] : 1
RAISE_SYNTAX_ERROR_KNOWN_RANGE(a : 14
_PyPegen_get_last_comprehension_item(PyPegen_last_item(b : 2
comprehension_ty)) : 2
"Generator : 3
parenthesized") : 5
b='=' : 5
for_if_clauses : 6
'='?")} : 2
_PyPegen_nonparen_genexp_in_call(p : 1
_PyPegen_arguments_parsing_error(p : 1
invalid_kwarg: : 1
a[Token*]=('True'|'False'|'None') : 1
PyBytes_AS_STRING(a->bytes)) : 1
!(NAME : 3
RAISE_SYNTAX_ERROR_KNOWN_RANGE( : 2
"expression : 3
\"==\"?") : 1
IMPORTANT: : 1
"_without_invalid" : 1
expression_without_invalid[expr_ty]: : 1
invalid_legacy_expression: : 1
!'(' : 1
b=star_expressions : 1
_PyPegen_check_legacy_stmt(p : 2
"Missing : 1
'%U' : 1
%U(...)?" : 1
a->v.Name.id : 1
a->v.Name.id) : 1
invalid_expression: : 1
STRING) : 1
kf"dsfsdf" : 1
STRING : 4
SOFT_KEYWORD) : 1
b=expression_without_invalid : 1
p->tokens[p->mark-1]->level : 1
comma?") : 1
!('else'|':') : 1
"expected : 5
expression") : 2
invalid_named_expression(memo): : 1
RAISE_SYNTAX_ERROR_KNOWN_LOCATION( : 3
_PyPegen_get_expr_name(a)) : 2
b=bitwise_or : 1
!('='|':=') : 2
'='?") : 1
!(list|tuple|genexp|'True'|'None'|'False') : 1
'='?" : 1
invalid_assignment: : 1
a=invalid_ann_assign_target : 2
"only : 2
%s) : 1
annotated" : 1
_PyPegen_get_expr_name(a) : 2
)} : 2
a=star_named_expression : 3
star_named_expressions* : 1
annotated") : 1
"illegal : 1
annotation") : 1
(star_targets : 2
'=')* : 2
a=star_expressions : 4
RAISE_SYNTAX_ERROR_INVALID_TARGET(STAR_TARGETS : 2
a=yield_expr : 1
"assignment : 1
possible") : 1
augassign : 1
(yield_expr : 1
"'%s' : 1
assignment" : 1
invalid_ann_assign_target[expr_ty]: : 1
invalid_del_stmt: : 1
RAISE_SYNTAX_ERROR_INVALID_TARGET(DEL_TARGETS : 1
invalid_block: : 1
!INDENT : 17
RAISE_INDENTATION_ERROR("expected : 17
block") : 2
invalid_comprehension: : 1
('[' : 3
'{') : 3
comprehension") : 2
b=star_named_expressions : 1
PyPegen_last_item(b : 1
expr_ty) : 1
"did : 2
target?") : 2
b=',' : 1
invalid_dict_comprehension: : 1
a='**' : 2
"dict : 1
invalid_parameters: : 1
param_no_default* : 2
invalid_parameters_helper : 1
"non-default : 2
argument") : 7
a='(' : 2
param_no_default+ : 1
b=')' : 2
"Function : 1
a="/" : 2
"at : 3
/") : 2
(slash_no_default : 2
slash_with_default) : 2
param_maybe_default* : 4
a='/' : 4
"/ : 4
once") : 4
param_no_default) : 1
*") : 7
param_maybe_default+ : 1
a='*' : 7
invalid_default: : 1
a='=' : 5
&(')'|',') : 1
invalid_star_etc: : 1
(')' : 2
'**')) : 2
RAISE_SYNTAX_ERROR("bare : 1
comment") : 1
"var-positional : 2
value") : 7
(param_no_default : 2
',') : 4
"* : 5
invalid_kwds: : 1
"var-keyword : 2
"arguments : 4
a[Token*]=('*'|'**'|'/') : 2
invalid_parameters_helper: : 1
param_with_default+ : 1
invalid_lambda_parameters: : 1
lambda_param_no_default* : 2
invalid_lambda_parameters_helper : 1
','.lambda_param+ : 1
"Lambda : 1
(lambda_slash_no_default : 2
lambda_slash_with_default) : 2
lambda_param_maybe_default* : 4
lambda_param_no_default) : 1
lambda_param_maybe_default+ : 1
invalid_lambda_parameters_helper: : 1
lambda_param_with_default+ : 1
invalid_lambda_star_etc: : 1
(':' : 2
RAISE_SYNTAX_ERROR("named : 1
lambda_param : 4
(lambda_param_no_default : 2
invalid_lambda_kwds: : 1
invalid_double_type_comments: : 1
RAISE_SYNTAX_ERROR("Cannot : 1
def") : 1
invalid_with_item: : 1
invalid_for_target: : 1
RAISE_SYNTAX_ERROR_INVALID_TARGET(FOR_TARGETS : 1
invalid_group: : 1
here") : 3
invalid_import_from_targets: : 1
RAISE_SYNTAX_ERROR("trailing : 1
parentheses") : 1
invalid_with_stmt: : 1
[ASYNC] : 7
','.(expression : 2
['as' : 10
star_target])+ : 4
RAISE_SYNTAX_ERROR("expected : 13
':'") : 13
','.(expressions : 2
invalid_with_stmt_indent: : 1
a='with' : 2
%d" : 20
a->lineno) : 16
invalid_try_stmt: : 1
a='try' : 1
!('except' : 1
'finally') : 1
block* : 2
except_block+ : 1
a='except' : 8
b='*' : 1
NAME] : 1
'except*' : 3
'try'") : 2
except_star_block+ : 1
[expression : 3
NAME]] : 1
invalid_except_stmt: : 1
RAISE_SYNTAX_ERROR_STARTING_FROM(a : 3
"multiple : 1
types") : 1
invalid_finally_stmt: : 1
a='finally' : 1
invalid_except_stmt_indent: : 1
invalid_except_star_stmt_indent: : 1
invalid_match_stmt: : 1
subject_expr : 3
CHECK_VERSION(void* : 1
a="match" : 1
invalid_case_block: : 1
a="case" : 1
invalid_as_pattern: : 1
a="_" : 1
target") : 2
!NAME : 1
invalid_class_pattern: : 1
name_or_attr : 4
a=invalid_class_argument_pattern : 1
PyPegen_first_item(a : 1
pattern_ty) : 2
PyPegen_last_item(a : 1
"positional : 3
patterns") : 1
invalid_class_argument_pattern[asdl_pattern_seq*]: : 1
[positional_patterns : 1
','] : 1
keyword_patterns : 3
a=positional_patterns : 1
invalid_if_stmt: : 1
a='if' : 1
invalid_elif_stmt: : 1
a='elif' : 1
invalid_else_stmt: : 1
a='else' : 1
invalid_while_stmt: : 1
a='while' : 1
invalid_for_stmt: : 1
a='for' : 1
invalid_def_raw: : 1
a='def' : 1
[params] : 1
['->' : 1
invalid_class_def_raw: : 1
['(' : 2
[arguments] : 2
')'] : 3
a='class' : 1
invalid_double_starred_kvpairs: : 1
','.double_starred_kvpair+ : 1
invalid_kvpair : 1
a=':' : 2
&('}'|',') : 2
invalid_kvpair: : 1
!(':') : 1
RAISE_ERROR_KNOWN_LOCATION(p : 1
PyExc_SyntaxError : 1
a->lineno : 1
a->end_col_offset : 1
a->end_lineno : 1
"':' : 1
key") : 1
{RAISE_SYNTAX_ERROR_KNOWN_LOCATION(a : 1
(groups : 2
incarnations : 1
'clauses.' : 1
'suite.' : 1
semicolon-separated : 1
header's : 6
belong: : 1
test1: : 1
test2: : 1
executed: : 6
print(x); : 1
print(y); : 1
print(z) : 1
Summarizing: : 1
funcdef : 2
classdef : 2
async_with_stmt : 2
async_for_stmt : 2
async_funcdef : 2
stmt_list : 3
statement+ : 1
simple_stmt : 2
(";" : 1
simple_stmt)* : 1
[";"] : 1
"DEDENT" : 1
'dangling : 1
"else"' : 1
indented) : 2
execution: : 2
("elif" : 1
suite)* : 1
["else" : 5
suite] : 7
false); : 1
evaluated) : 1
tested) : 2
"starred_list" : 1
for-loop: : 1
Hint: : 2
"range(3)" : 1
try1_stmt : 2
try2_stmt : 2
try3_stmt : 2
("except" : 2
["as" : 13
identifier]] : 1
suite)+ : 2
["finally" : 2
identifier] : 6
clause(s) : 2
expression-less : 1
"compatible" : 1
*non- : 1
non-virtual : 1
target" : 1
N: : 3
print(sys.exception()) : 2
print(repr(sys.exception())) : 3
TypeError() : 2
ValueError() : 1
"ExceptionGroup"s : 1
ExceptionGroup("eg" : 1
[ValueError(1) : 3
TypeError(2) : 1
OSError(3) : 1
OSError(4)]) : 1
{type(e)} : 2
{e.exceptions}') : 2
'ExceptionGroup'> : 2
(TypeError(2),) : 1
(OSError(3) : 1
OSError(4)) : 1
eg : 4
print(repr(e)) : 1
ExceptionGroup('' : 1
(BlockingIOError())) : 1
'cleanup' : 1
discarded: : 2
'on : 1
out.' : 1
Managers) : 1
"try"..."except"..."finally" : 2
with_stmt_contents : 3
with_item : 2
with_item)* : 1
target] : 1
"with_item") : 1
EXPRESSION : 2
TARGET: : 2
SUITE : 9
(EXPRESSION) : 2
type(manager).__enter__ : 1
type(manager).__exit__ : 1
enter(manager) : 1
hit_except : 4
TARGET : 4
exit(manager : 2
*sys.exc_info()): : 2
hit_except: : 2
multi-item : 1
Syntax: : 10
case_block+ : 1
star_named_expression : 1
star_named_expressions : 1
case_block : 1
[guard] : 1
"case") : 2
"match") : 1
subpatterns) : 1
outcomes : 2
termed : 1
prerequisites : 1
"subject_expr" : 1
"case_block" : 3
**Name : 1
statement** : 1
subpatterns : 14
(100 : 4
200): : 1
300): : 1
Mismatch: : 1
print('Case : 3
2') : 2
print(f'Case : 1
{y}') : 1
anything!') : 1
flag" : 1
bubbles : 3
(I.e. : 1
order.) : 1
irrefutable : 9
match-all : 1
irrefutable: : 1
EBNF: : 1
"SEP.RULE+" : 1
"RULE : 1
(SEP : 1
RULE)*" : 1
"!RULE" : 1
"patterns" : 5
open_sequence_pattern : 2
closed_pattern : 1
"in : 2
terms" : 1
(credits : 1
**may : 1
not** : 2
bars : 8
"|".closed_pattern+ : 1
subpattern : 12
"P1 : 1
P2 : 3
"P1" : 4
"P2" : 3
"capture_pattern" : 1
"P : 3
NAME" : 1
"NAME : 2
<subject>" : 3
~~~~~~~~~~~~~~~~~~~~~~~~~ : 4
signed_number: : 1
"NUMBER" : 1
Triple-quoted : 1
"signed_number : 2
NUMBER" : 2
4j" : 1
"LITERAL" : 1
"<subject> : 2
LITERAL" : 1
!'_' : 1
"!'_'" : 1
expresses) : 1
"wildcard_pattern" : 1
[x] : 4
572**; : 1
(matches : 1
anything) : 1
"guard"s : 1
"NAME1.NAME2" : 1
NAME1.NAME2" : 1
"(P)" : 1
[maybe_sequence_pattern] : 2
[open_sequence_pattern] : 1
maybe_star_pattern : 2
maybe_sequence_pattern : 1
",".maybe_star_pattern+ : 1
(capture_pattern : 1
wildcard_pattern) : 1
4)") : 1
"[3 : 1
4]") : 1
pattern; : 8
fixed-length: : 1
variable-length: : 1
non-star : 4
"[P1 : 1
P3," : 1
P<N>]" : 1
happens: : 5
"<subject>" : 2
"len(subject) : 1
<N>" : 1
"<subject>[0]" : 1
"<subject>[1]" : 1
pattern/element : 1
[items_pattern] : 1
items_pattern : 1
",".key_value_pattern+ : 1
key_value_pattern : 1
(literal_pattern : 1
value_pattern) : 1
double_star_pattern : 2
[3],the : 1
Key-value : 1
Matched : 2
on-the-fly : 1
"{KEY1: : 1
P1 : 1
KEY2: : 1
"KEY1 : 1
"<subject>[KEY1]" : 1
KEY/pattern : 1
[pattern_arguments : 1
","?] : 1
pattern_arguments : 1
positional_patterns : 2
keyword_patterns] : 1
",".pattern+ : 1
",".keyword_pattern+ : 1
keyword_pattern : 1
"name_or_attr" : 3
subject; : 1
matching: : 1
"getattr(cls : 1
())" : 1
"len(cls.__match_args__)" : 1
"__match_args__[i]" : 2
"int(0|1)" : 1
"CLS(P1 : 1
attr=P2)" : 1
"isinstance(<subject> : 1
CLS)" : 1
"CLS.__match_args__" : 1
"attr=P2": : 1
"hasattr(<subject> : 1
"attr")" : 1
"<subject>.attr" : 1
argument/pattern : 1
hierarchy): : 2
[decorators] : 3
["->" : 2
decorator+ : 1
parameter_list : 1
defparameter : 3
defparameter)* : 3
[parameter_list_no_posonly]] : 1
parameter_list_no_posonly : 2
[parameter_list_starargs]] : 1
parameter_list_starargs : 2
[parameter] : 1
[","]]] : 1
["=" : 2
body; : 2
@f1(arg) : 2
@f2 : 2
f1(arg)(f2(func)) : 1
"assignment_expression" : 2
restrictive; : 2
*parameters* : 7
"default : 3
values." : 2
""*"" : 3
**Default : 1
executed.** : 1
"pre- : 2
computed" : 1
whats_on_the_telly(penguin=None): : 1
penguin : 3
penguin.append("property : 1
zoo") : 1
""*identifier"" : 2
""**identifier"" : 1
""/"" : 4
"": : 1
expression"" : 2
""-> : 1
"annotations" : 2
""def"" : 3
**Programmer's : 3
Ability : 1
[inheritance] : 1
[argument_list] : 1
uses) : 2
"object"; : 1
Foo(object): : 1
(Usually : 1
definitions.) : 1
decorated: : 1
decorating : 2
f1(arg)(f2(Foo)) : 1
attributes; : 7
"self.name : 1
""self.name"" : 1
*coroutine*) : 1
func(param1 : 1
param2): : 1
do_stuff() : 1
some_coroutine() : 1
keywords; : 1
iterable* : 4
ITER: : 1
SUITE2 : 2
(ITER) : 1
type(iter).__aiter__(iter) : 1
type(iter).__anext__(iter) : 1
StopAsyncIteration: : 1
*enter* : 1
*exit* : 3
aenter : 1
type(manager).__aenter__ : 1
aexit : 1
type(manager).__aexit__ : 1
aenter(manager) : 1
aexit(manager : 2
(CPython) : 2
namespace's : 1
expression_stmt : 2
assignment_stmt : 2
augmented_assignment_stmt : 2
annotated_assignment_stmt : 2
pass_stmt : 2
break_stmt : 2
continue_stmt : 2
future_stmt : 2
(mostly : 3
(usually) : 4
output.) : 2
(re)bind : 1
(target_list : 1
"=")+ : 1
(starred_expression : 2
yield_expression) : 2
target)* : 1
[target_list] : 2
*attributeref* : 1
*subscription* : 1
*slicing*.) : 1
(list) : 1
Else: : 2
"starred" : 1
target: : 2
(name): : 1
Otherwise: : 1
sides : 4
exists) : 9
Cls: : 1
inst : 3
Cls() : 1
inst.x : 3
Cls.x : 1
subscription: : 1
sequence's : 5
insofar : 3
overlaps : 3
'simultaneous' : 1
swaps : 1
*within* : 1
assigned-to : 1
"[0 : 5
2]": : 1
x[i] : 2
3132** : 1
"*target" : 1
augtarget : 3
augop : 2
(expression_list : 1
symbols.) : 1
f(x)" : 1
looks-up : 1
lastly : 2
caveat : 2
*Annotation* : 1
yield_expression)] : 1
(mangled : 1
private) : 1
applicable) : 2
"assert : 3
__debug__: : 2
expression1 : 1
expression2" : 1
expression1: : 1
AssertionError(expression2) : 1
equivalences : 1
"-O") : 1
subscriptions : 1
slicings : 1
involved; : 2
[expression_list] : 1
"StopIteration.value" : 1
<expr> : 2
<expr>) : 2
["from" : 1
expression]] : 1
*active : 2
"with_traceback()" : 1
Exception("foo : 1
occurred").with_traceback(tracebackobj) : 1
chaining: : 1
writable) : 1
print(1 : 3
RuntimeError("Something : 3
happened") : 3
Something : 7
identifier])* : 5
relative_module : 4
(identifier : 4
".")* : 1
"."* : 1
"."+ : 1
(separated : 2
commas) : 1
*or* : 6
clauses: : 1
foo.bar.baz : 7
foo.bar : 9
fbb : 2
baz : 9
foo.attr : 1
("'*'") : 2
*public : 2
names* : 1
"__all__"; : 1
("'_'") : 1
card : 4
mod" : 2
"pkg.mod" : 3
..subpkg2 : 1
"pkg.subpkg1" : 1
"pkg.subpkg2.mod" : 1
*future : 1
"absolute_import" : 1
"division" : 1
"generators" : 2
"generator_stop" : 1
"unicode_literals" : 1
"print_function" : 1
"nested_scopes" : 1
"with_statement" : 1
word) : 2
name] : 2
identifier)* : 2
freedom : 3
*containing* : 1
(module) : 1
unambiguously) : 1
collide : 1
3104** : 1
Built : 4
distribution" : 1
"binary : 1
"installer" : 2
spoken : 3
mainstream : 1
systems.) : 2
distribution: : 13
RPM-based : 4
RPM; : 1
installer; : 1
Debian-based : 1
specialty : 1
---writing : 1
distributions---while : 1
intermediary : 2
species : 1
*packagers* : 2
springs : 1
packager; : 1
"out : 2
there" : 2
grabbing : 1
**bdist** : 6
bdist : 4
"dumb" : 5
(That : 1
work.) : 1
"Distutils-1.0.*plat*.tar.gz"; : 1
"right : 2
place" : 1
**bdist_dumb** : 3
dumb : 3
"*prefix*".) : 1
install"---but : 1
"smart" : 1
"--formats" : 3
generate: : 1
--format=zip : 1
"Distutils-1.0.*plat*.zip"--- : 1
+---------------+--------------------------------+-----------+ : 11
|===============|================================|===========| : 1
(".tar.gz") : 3
"bztar" : 7
(".tar.bz2") : 2
xzipped : 1
(".tar.xz") : 2
"ztar" : 5
(".tar.Z") : 2
"tar" : 7
(".tar") : 2
(".zip") : 2
(2),(4) : 1
"rpm" : 1
"pkgtool" : 1
**pkgtool** : 2
"sdux" : 1
**swinstall** : 2
"msi" : 1
**compress** : 5
1.6) : 2
**rpm** : 2
3.0.4 : 1
"rpm : 1
--version" : 1
have) : 1
"sub-commands" : 1
formats; : 1
("tar" : 1
"zip") : 1
**bdist_rpm** : 11
RPMs : 2
+----------------------------+---------------------------------------+ : 3
|============================|=======================================| : 1
gztar : 1
bztar : 1
xztar : 1
ztar : 1
rpm : 1
srpm : 1
Mandrake : 2
distributions) : 2
"--format" : 1
--formats=rpm : 1
RPM-specific : 1
--packager="John : 1
Doe : 1
<jdoe@example.org>" : 1
".spec" : 11
+--------------------------------------------+------------------------------------------------+ : 8
|============================================|================================================| : 1
preamble) : 1
"description" : 5
Vendor : 2
"author_email" : 2
"maintainer_email" : 2
Url : 1
%description : 1
(section) : 1
"long_description" : 4
+---------------------------------+-------------------------------+---------------------------+ : 12
|=================================|===============================|===========================| : 1
"Development/Libraries" : 1
"vendor" : 1
Packager : 1
"packager" : 1
(none) : 8
"conflicts" : 1
Obsoletes : 1
"distribution_name" : 1
BuildRequires : 1
"build_requires" : 1
"icon" : 1
"setup.cfg"---see : 1
("~/.pydistutils.cfg") : 1
(analogous : 1
winds : 2
"binary" : 4
together; : 1
spec-only" : 1
"distribution : 1
directory"---normally : 1
"dist/" : 2
"--dist-dir" : 1
(Normally : 1
tree," : 1
**bdist_rpm**.) : 1
"--plat-name" : 1
'win32' : 1
'win- : 1
amd64' : 1
execute: : 1
--plat-name=win-amd64 : 1
.lib : 2
included.) : 1
"PCbuild/PCbuild.sln" : 1
"x64" : 1
'pythoncore' : 1
reexecute : 1
Panel->[Add/Remove] : 1
install.) : 2
Postinstallation : 1
postinstallation : 1
"--install-script" : 1
"-install" : 1
"-remove" : 1
("sys.stdout" : 1
"sys.stderr") : 3
directory_created(path) : 1
file_created(path) : 1
postinstall : 1
get_special_folder_path(csidl_string) : 1
Desktop : 1
*csidl_string* : 1
"CSIDL_APPDATA" : 1
"CSIDL_COMMON_STARTMENU" : 1
"CSIDL_STARTMENU" : 1
"CSIDL_COMMON_DESKTOPDIRECTORY" : 1
"CSIDL_DESKTOPDIRECTORY" : 1
"CSIDL_COMMON_STARTUP" : 1
"CSIDL_STARTUP" : 1
"CSIDL_COMMON_PROGRAMS" : 1
"CSIDL_PROGRAMS" : 1
"CSIDL_FONTS" : 1
"SHGetSpecialFolderPath()" : 1
create_shortcut(target : 1
filename[ : 2
arguments[ : 1
workdir[ : 1
iconpath[ : 1
iconindex]]]]) : 1
*description* : 10
*workdir* : 1
*iconpath* : 2
*iconindex* : 1
"IShellLink" : 1
"distutils.cmd.Command" : 3
distutils.core.setup(arguments) : 1
do-everything : 1
+----------------------+----------------------------------+---------------------------------------------------------------+ : 26
|======================|==================================|===============================================================| : 1
"distutils.version" : 3
*long_description* : 1
*author* : 1
*author_email* : 1
*maintainer* : 1
*maintainer_email* : 1
*url* : 30
(homepage) : 1
*download_url* : 1
*py_modules* : 1
*scripts* : 1
*ext_modules* : 1
"distutils.core.Extension" : 1
*distclass* : 1
"distutils.core.Distribution" : 1
*script_name* : 3
*script_args* : 3
*options* : 17
*license* : 1
Descriptive : 1
meta-data : 12
*platforms* : 1
*cmdclass* : 1
"Command" : 9
*data_files* : 1
*package_dir* : 1
distutils.core.run_setup(script_name[ : 1
script_args=None : 1
stop_after='run']) : 1
(passed : 4
"setup()") : 1
"sys.argv[1:]" : 8
*stop_after* : 1
processing; : 2
+-----------------+-----------------------------------------------+ : 10
|=================|===============================================| : 2
*init* : 1
*commandline* : 1
("sys.argv[1:]" : 1
*script_args*) : 1
instance.) : 1
*run* : 2
way) : 1
"distutils.extension" : 3
"distutils.cmd" : 3
"distutils.dist" : 3
distutils.core.Extension : 1
+--------------------------+----------------------------------+-----------------------------+ : 16
|==========================|==================================|=============================| : 1
ie : 6
*sources* : 5
lives) : 1
(slash- : 1
separated) : 1
(.i) : 1
*include_dirs* : 4
portability) : 1
*define_macros* : 1
define; : 1
"(name : 15
FOO" : 2
"-DFOO" : 1
*undef_macros* : 1
undefine : 5
*library_dirs* : 3
*libraries* : 4
paths) : 2
*runtime_library_dirs* : 2
*extra_objects* : 1
'sources' : 2
*extra_compile_args* : 1
compiler-specific : 2
*extra_link_args* : 1
'extra_compile_args' : 1
*export_symbols* : 2
symbol: : 1
extension_name : 1
*language* : 13
"'c++'" : 1
"'objc'") : 1
*optional* : 4
distutils.core.Distribution : 1
distutils.core.Command : 1
"distutils.ccompiler" : 2
CCompiler : 3
"CCompiler" : 9
distutils.ccompiler.gen_lib_options(compiler : 1
runtime_library_dirs : 1
filenames!) : 1
distutils.ccompiler.gen_preprocess_options(macros : 1
include_dirs) : 1
("-D" : 1
compilers: : 2
*macros* : 3
1- : 2
"(name,)" : 2
("-U") : 1
("-D") : 1
("-I") : 2
distutils.ccompiler.get_default_compiler(osname : 1
*osname* : 1
"os.name") : 1
*platform* : 3
"os.name" : 5
distutils.ccompiler.new_compiler(plat=None : 1
compiler=None : 1
dry_run=0 : 3
force=0) : 1
platform/compiler : 1
*plat* : 2
"'posix'" : 3
"'nt'") : 1
*compiler* : 3
"'nt'" : 2
"traditional : 1
("UnixCCompiler" : 1
("MSVCCompiler" : 1
Unix---if : 1
distutils.ccompiler.show_compilers() : 1
"--help-compiler" : 1
**build_clib**) : 1
distutils.ccompiler.CCompiler([verbose=0 : 1
force=0]) : 1
variability : 7
per-compilation : 1
per-link : 1
(show : 1
*dry_run* : 10
steps) : 1
(rebuild : 1
dependencies) : 1
(off) : 1
"distutils.CCompiler.new_compiler()" : 1
add_include_dir(dir) : 1
*dir* : 22
instructed : 6
"add_include_dir()" : 3
set_include_dirs(dirs) : 1
*dirs* : 3
"add_include_dir()"; : 1
"set_include_dirs()" : 1
add_library(libname) : 1
*libname* : 2
"add_library()" : 3
"set_libraries()" : 3
set_libraries(libnames) : 1
*libnames* : 1
add_library_dir(dir) : 1
"add_library_dir()" : 2
"set_library_dirs()" : 2
set_library_dirs(dirs) : 1
add_runtime_library_dir(dir) : 1
set_runtime_library_dirs(dirs) : 1
define_macro(name[ : 1
value=None]) : 1
compilations : 4
undefine_macro(name) : 1
Undefine : 1
"define_macro()" : 2
"undefine_macro()" : 2
redefinitions : 1
undefinitions) : 1
redefined/undefined : 1
"compile()") : 4
add_link_object(object) : 1
analogues : 2
"resource : 1
compilers") : 1
set_link_objects(objects) : 1
analogues) : 1
*objects* : 8
autodetection : 2
**autoconf** : 1
detect_language(sources) : 1
"language_map" : 1
"language_order" : 1
find_library_file(dirs : 1
lib[ : 1
debug=0]) : 1
*lib* : 4
*debug* : 12
has_function(funcname[ : 1
includes=None : 1
include_dirs=None : 3
libraries=None : 5
library_dirs=None]) : 1
*funcname* : 1
library_dir_option(dir) : 1
library_option(lib) : 1
runtime_library_dir_option(dir) : 1
set_executables(**args) : 1
'executables' : 1
have: : 4
+----------------+--------------------------------------------+ : 5
|================|============================================| : 1
*linker_so* : 1
*linker_exe* : 1
*archiver* : 1
DOS/Windows) : 3
(Splitting : 1
operate: : 1
"distutils.util.split_quoted()".) : 1
compile(sources[ : 1
output_dir=None : 6
macros=None : 2
debug=0 : 8
extra_preargs=None : 6
extra_postargs=None : 5
depends=None]) : 1
Generates : 6
".o" : 2
"MSVCCompiler" : 4
*sources*) : 1
*output_dir* : 5
"foo/bar.c" : 1
"foo/bar.o" : 1
implementation); : 1
*build* : 2
"build/foo/bar.o" : 1
undefines : 1
definitions/redefinitions/undefinitions : 1
boolean; : 4
alongside) : 1
*extra_preargs* : 2
*extra_postargs* : 2
implementation- : 2
prepend/append : 1
hatch : 1
mustard : 1
"CompileError" : 1
create_static_lib(objects : 1
output_libname[ : 2
target_lang=None]) : 5
"bunch : 2
"add_link_object()" : 1
"set_link_objects()" : 1
*output_libname* : 2
filename; : 1
matters: : 2
consistency) : 1
*target_lang* : 2
"LibError" : 1
link(target_desc : 1
output_filename[ : 2
library_dirs=None : 4
runtime_library_dirs=None : 4
export_symbols=None : 3
build_temp=None : 3
*output_filename* : 4
"libfoo.a" : 1
"foo.lib" : 1
component) : 3
*it* : 2
Unix.) : 2
"create_static_lib()" : 2
form's : 1
sake) : 1
"LinkError" : 1
link_executable(objects : 1
output_progname[ : 1
*output_progname* : 1
link_shared_lib(objects : 1
link_shared_object(objects : 1
preprocess(source[ : 1
output_file=None : 1
extra_postargs=None]) : 1
Preprocess : 1
*output_file* : 2
"PreprocessError" : 1
executable_filename(basename[ : 1
strip_dir=0 : 4
output_dir='']) : 4
*basename* : 3
Typically : 26
library_filename(libname[ : 1
lib_type='static' : 1
*lib_type* : 2
"'static'" : 1
"liblibname.a" : 1
"'dynamic'" : 1
"liblibname.so" : 1
object_filenames(source_filenames[ : 1
*source_filenames* : 1
shared_object_filename(basename[ : 1
execute(func : 1
args[ : 6
msg=None : 7
level=1]) : 2
Invokes : 4
"distutils.util.execute()" : 1
spawn(cmd) : 1
"distutils.util.spawn()" : 1
mkpath(name[ : 1
mode=511]) : 1
"distutils.dir_util.mkpath()" : 1
move_file(src : 1
dst) : 1
"distutils.file_util.move_file()" : 1
*dst* : 76
announce(msg[ : 1
"distutils.log.debug()" : 1
warn(msg) : 1
debug_print(msg) : 1
"distutils.unixccompiler" : 2
"UnixCCompiler" : 2
"-Dname[=value]" : 1
"-Uname" : 1
"-Idir" : 1
"-llib" : 1
"-Ldir" : 1
**cc** : 2
**ar** : 1
**ranlib**) : 1
"distutils.msvccompiler" : 2
*DISTUTILS_USE_SDK* : 2
*MSSdk* : 2
SDK's : 1
"SetEnv.Cmd" : 1
"distutils.bcppcompiler" : 2
"BorlandCCompiler" : 1
"distutils.cygwincompiler" : 2
"CygwinCCompiler" : 1
Mingw32CCompiler : 1
mingw32 : 1
cygwin : 1
"distutils.archive_util" : 2
tarballs : 1
distutils.archive_util.make_archive(base_name : 1
format[ : 2
root_dir=None : 3
base_dir=None : 2
dry_run=0]) : 9
"tar") : 2
*base_name* : 4
format-specific : 18
archive; : 1
"chdir" : 1
from; : 4
distutils.archive_util.make_tarball(base_name : 1
base_dir[ : 3
compress='gzip' : 1
'Create : 1
(optional : 2
compressed) : 1
*compress* : 1
"'gzip'" : 1
"'bzip2'" : 1
"'xz'" : 1
"'compress'" : 2
Unix-specific : 1
"base_dir.tar" : 1
(".gz" : 1
".bz2" : 1
".Z") : 1
distutils.archive_util.make_zipfile(base_name : 1
InfoZIP : 1
"DistutilsExecError" : 1
"distutils.dep_util" : 2
Dependency : 4
distutils.dep_util.newer(source : 1
"DistutilsFileError" : 3
distutils.dep_util.newer_pairwise(sources : 1
targets) : 2
Walk : 3
(*sources* : 1
*targets*) : 1
"newer()" : 1
distutils.dep_util.newer_group(sources : 1
target[ : 1
missing='error']) : 1
out-of-date : 2
*missing* : 1
missing; : 1
("'error'") : 1
blow : 7
"os.stat()"; : 1
"'newer'" : 1
"dry- : 1
run" : 1
commands) : 2
"distutils.dir_util" : 2
distutils.dir_util.mkpath(name[ : 1
mode=0o777 : 5
distutils.dir_util.create_tree(base_dir : 1
files[ : 1
*files* : 10
"mkpath()" : 2
distutils.dir_util.copy_tree(src : 1
dst[ : 3
preserve_mode=1 : 2
preserve_times=1 : 2
preserve_symlinks=0 : 1
update=0 : 2
*update* : 3
*dry_run*: : 1
*preserve_mode* : 2
*preserve_times* : 2
"distutils.file_util.copy_file()"; : 1
*preserve_symlinks* : 1
them!); : 1
"copy_file()" : 3
".nfs" : 1
(more : 6
page) : 3
3.3.1: : 2
distutils.dir_util.remove_tree(directory[ : 1
underneath : 1
(apart : 2
"distutils.file_util" : 2
distutils.file_util.copy_file(src : 1
link=None : 1
ruthlessly : 1
clobbered.) : 1
last-access : 1
*link* : 2
"os.link()") : 1
"os.symlink()") : 1
copying: : 1
"'hard'" : 1
"'sym'"; : 1
"_copy_file_contents()" : 1
"(dest_name : 1
copied)": : 1
*dest_name* : 1
*copied* : 1
distutils.file_util.move_file(src : 1
dry_run]) : 1
cross-device : 1
distutils.file_util.write_file(filename : 1
contents) : 1
terminators) : 1
9.11 : 2
"distutils.util" : 2
assorted : 2
distutils.util.get_platform() : 1
'os.uname()') : 2
OS; : 3
"linux-i586" : 1
"linux-alpha" : 1
"solaris-2.6-sun4u" : 1
non-POSIX : 9
"MACOSX_DEPLOYMENT_TARGET" : 2
"fat" : 1
"fat64" : 1
"universal" : 1
"fat3" : 1
3-way : 1
(ppc : 1
x86_64) : 1
"intel" : 1
"macosx-10.3-ppc" : 1
"macosx-10.3-fat" : 1
"macosx-10.5-universal" : 1
"macosx-10.6-intel" : 1
"aix" : 1
"'-'") : 3
Technology : 1
(second : 1
bit-size : 2
(third : 1
"aix-5307-0747-32" : 1
"oslevel : 2
-s": : 2
5300-07-00-0000 : 1
"aix-7105-1731-64" : 1
7100-05-01-1731 : 1
"aix-7.2" : 1
distutils.util.convert_path(pathname) : 1
'pathname' : 1
Needed : 1
non-Unix-ish : 1
distutils.util.change_root(new_root : 1
pathname) : 2
*new_root* : 1
"os.path.join(new_root,pathname)" : 1
distutils.util.check_environ() : 1
'os.environ' : 1
"PLAT" : 1
"get_platform()") : 1
distutils.util.subst_vars(s : 1
local_vars) : 1
shell/Perl-style : 1
*local_vars* : 3
*os.environ* : 1
checked/augmented : 1
full-fledged : 1
"$variable" : 1
distutils.util.split_quoted(s) : 1
short: : 1
backslash-escaped : 1
distutils.util.execute(func : 1
filesystem) : 1
bureaucracy : 1
you; : 2
"external : 1
action" : 1
performed) : 2
distutils.util.strtobool(val) : 1
"yes" : 3
"1"; : 3
distutils.util.byte_compile(py_files[ : 1
force=0 : 1
prefix=None : 7
verbose=1 : 1
direct=None]) : 1
*py_files* : 1
compile; : 1
-O") : 1
-OO") : 1
*py_files*; : 1
*basedir* : 1
stripped) : 1
neither) : 1
Byte-compilation : 1
"byte_compile()" : 1
*direct* : 1
3.2.3: : 5
tag" : 1
distutils.util.rfc822_escape(header) : 1
9.12 : 2
built/installed/distributed : 1
9.13 : 2
9.14 : 2
"distutils.debug" : 2
DEBUG : 45
9.15 : 2
"distutils.errors" : 2
obviously : 7
"Distutils" : 1
9.16 : 2
"distutils.fancy_getopt" : 2
Wrapper : 3
============================================================================ : 3
"fancy_getopt()" : 1
"negative : 2
aliases" : 1
alias" : 1
"--verbose" : 8
distutils.fancy_getopt.fancy_getopt(options : 1
negative_opt : 1
args) : 24
"(long_option : 2
short_option : 2
help_string)" : 2
3-tuples : 3
"FancyGetopt" : 4
*negative_opt* : 1
distutils.fancy_getopt.wrap_text(text : 1
distutils.fancy_getopt.FancyGetopt([option_table=None]) : 1
option_table : 1
3-tuples: : 1
*long_option* : 2
appended; : 1
*short_option* : 3
FancyGetopt.getopt([args=None : 1
object=None]) : 1
"OptionDummy" : 1
"(args : 2
FancyGetopt.get_option_order() : 1
"(option : 2
FancyGetopt.generate_help([header=None]) : 1
9.17 : 2
"distutils.filelist" : 2
FileList : 2
"FileList" : 1
poking : 1
9.18 : 2
"distutils.log" : 2
282**-style : 2
9.19 : 2
"distutils.spawn" : 2
Spawn : 6
sub-process : 2
"spawn()" : 2
"find_executable()" : 1
9.20 : 2
run; : 3
"config.h" : 1
distutils.sysconfig.PREFIX : 1
"os.path.normpath(sys.prefix)" : 1
distutils.sysconfig.EXEC_PREFIX : 1
"os.path.normpath(sys.exec_prefix)" : 1
distutils.sysconfig.get_config_var(name) : 1
"get_config_vars().get(name)" : 2
distutils.sysconfig.get_config_vars(...) : 1
distutils.sysconfig.get_config_h_filename() : 1
distutils.sysconfig.get_makefile_filename() : 1
distutils.sysconfig.get_python_inc([plat_specific[ : 1
prefix]]) : 1
*plat_specific* : 4
"PREFIX" : 2
"EXEC_PREFIX" : 2
distutils.sysconfig.get_python_lib([plat_specific[ : 1
standard_lib[ : 1
prefix]]]) : 1
*standard_lib* : 1
distutils.sysconfig.customize_compiler(compiler) : 1
"distutils.ccompiler.CCompiler" : 1
forward-compatibility : 1
special-purpose : 2
distutils.sysconfig.set_python_build() : 1
Inform : 1
9.21 : 2
"distutils.text_file" : 2
TextFile : 2
"TextFile" : 4
distutils.text_file.TextFile([filename=None : 1
file=None : 11
**options]) : 1
"unreadline()" : 3
line-at-a-time : 2
+--------------------+----------------------------------+-----------+ : 7
|====================|==================================|===========| : 1
*strip_comments* : 1
"'#'"---unless : 1
*lstrip_ws* : 1
*rstrip_ws* : 4
terminator!) : 1
*skip_blanks* : 3
lstrip_ws : 1
rstrip_ws : 1
whitespace: : 1
true.) : 1
*join_lines* : 2
*collapse_join* : 1
predecessor; : 1
"(join_lines : 1
lstrip_ws)" : 1
end-of-file: : 1
warn(msg[ : 1
line=None]) : 1
""lines : 1
3-5"" : 1
"unread" : 2
"unreadline()") : 1
involve : 15
line(s) : 4
*strip_blanks* : 1
unreadline(line) : 1
Push : 13
re-cleansed : 1
(whitespace : 3
9.22 : 2
9.23 : 2
distutils.cmd.Command(dist) : 1
"worker : 1
bees" : 1
"initialize_options()" : 4
"finalize_options()" : 3
influences : 1
9.24 : 2
outlines : 3
"distutils.command" : 5
"command_template" : 2
"peel_banana" : 2
peel_banana") : 1
"distutils/command/peel_banana.py" : 1
Command.initialize_options() : 1
"self.foo : 1
Command.finalize_options() : 1
dependencies: : 2
Command.run() : 1
raison : 1
d'etre: : 1
Command.sub_commands : 1
*sub_commands* : 3
formalizes : 1
"family" : 5
"install_lib" : 1
"install_headers" : 2
"(command_name : 1
predicate)" : 1
*command_name* : 1
*predicate* : 7
(E.g : 1
9.25 : 2
9.26 : 2
"distutils.command.bdist" : 2
9.27 : 2
"distutils.command.bdist_packager" : 2
============================================================================== : 2
9.28 : 2
"distutils.command.bdist_dumb" : 2
9.29 : 2
"distutils.command.bdist_rpm" : 2
Redhat : 2
SRPM : 2
============================================================================================ : 1
9.30 : 2
"distutils.command.sdist" : 2
=============================================================== : 3
9.31 : 2
"distutils.command.build" : 2
9.32 : 2
"distutils.command.build_clib" : 2
=========================================================================== : 1
9.33 : 2
"distutils.command.build_ext" : 2
9.34 : 2
"distutils.command.build_py" : 2
.py/.pyc : 2
distutils.command.build_py.build_py : 1
distutils.command.build_py.build_py_2to3 : 1
build_py : 4
distutils.command.build_py : 3
build_py_2to3 : 1
later: : 2
cmdclass : 1
{'build_py': : 1
build_py} : 2
setup() : 2
9.35 : 2
"distutils.command.build_scripts" : 2
========================================================================== : 1
9.36 : 2
"distutils.command.clean" : 2
9.37 : 2
"distutils.command.config" : 2
================================================================== : 1
9.38 : 2
9.39 : 2
"distutils.command.install_data" : 2
9.40 : 2
"distutils.command.install_headers" : 2
======================================================================================= : 1
9.41 : 2
"distutils.command.install_lib" : 2
9.42 : 2
"distutils.command.install_scripts" : 2
================================================================================= : 1
9.43 : 2
"distutils.command.register" : 2
"register" : 1
registers : 5
9.44 : 2
"distutils.command.check" : 2
concentrating : 2
developer/distributor: : 1
users/administrators : 1
well-tested : 2
course!) : 1
("setup.py" : 1
multitude : 2
intermediaries : 1
Packagers : 1
Autoconf-style : 1
setup(name='foo' : 3
version='1.0' : 13
py_modules=['foo'] : 3
observations: : 1
categories: : 3
Script : 4
Accessories) : 1
".zip") : 2
end-user : 7
and---from : 1
directory---run : 1
occasionally) : 1
(**bdist_pkgtool**) : 1
(**bdist_sdux**) : 1
"foo-1.0.noarch.rpm": : 1
Linux.) : 1
--help-formats : 1
terms: : 1
reusability : 1
module." : 1
something.) : 1
Distutils-specific : 2
*en : 1
masse* : 1
mxBase : 1
packages.) : 1
distribution." : 2
"non-pure : 1
distribution); : 1
*************************************** : 14
priori*: : 1
simple---a : 1
example---then : 1
solicit : 2
middle-ground : 1
script---which : 1
ideally : 3
[1]---and : 1
consequences: : 2
[command] : 2
option=value : 1
**build_py** : 1
**install**) : 1
*option* : 24
[...] : 9
'build_ext' : 1
--build-lib : 1
(-b) : 1
--build-temp : 1
(-t) : 1
(build : 2
by-products) : 1
--inplace : 2
(-i) : 1
build-lib : 1
--include-dirs : 1
(-I) : 1
--define : 1
(-D) : 1
--undef : 1
(-U) : 1
--swig-opts : 1
"--foo-bar" : 2
"foo_bar" : 2
"in-place"--- : 1
"pkg.ext" : 1
("ext.so" : 1
"pkg.mod1" : 1
"pkg.mod2" : 1
"--inplace" : 2
"set : 5
forget" : 1
[build_ext] : 1
inplace=1 : 1
builds--- : 1
(Distributing : 1
"spec" : 7
Distutils' : 5
"setup.cfg": : 1
[bdist_rpm] : 1
<gward@python.net> : 1
doc_files : 1
CHANGES.txt : 1
USAGE.txt : 1
doc/ : 1
examples/ : 1
"doc_files" : 1
whitespace-separated : 3
"Installing : 1
auto-configuration : 1
Authors: : 1
("Distutils") : 1
developer's : 4
Relationships : 2
2.8 : 4
2.9 : 2
Manifest-related : 2
centre : 1
sections: : 6
(Keep : 2
1.5.2.) : 1
setup(name='Distutils' : 1
description='Python : 1
Utilities' : 1
author='Greg : 1
Ward' : 1
author_email='gward@python.net' : 1
url='https://www.python.org/sigs/distutils-sig/' : 1
packages=['distutils' : 1
'distutils.command'] : 1
one-file : 1
slash- : 1
neutral : 2
spirit : 2
slash-separated : 1
glob.glob(os.path.join('mydir' : 1
'subdir' : 1
'*.html')) : 1
os.listdir(os.path.join('mydir' : 1
'subdir')) : 1
"packages" : 5
"packages : 3
['foo']" : 2
promising : 2
"foo/__init__.py" : 1
idea) : 1
promise : 2
lay : 1
"package_dir" : 8
"root : 3
"lib/foo" : 1
package_dir : 2
{'': : 1
'lib'} : 2
"lib/foo/__init__.py" : 1
"lib/bar" : 1
{'foo': : 3
"package: : 1
dir" : 1
'foo.bar']" : 1
"lib/__init__.py" : 1
"lib/bar/__init__.py" : 1
"packages": : 1
packages---especially : 1
Example; : 1
['mod1' : 1
'pkg.mod2'] : 1
package/directory : 2
"mod1.py" : 1
"pkg/mod2.py" : 1
"pkg/__init__.py" : 1
(include : 1
"foo.c" : 2
Extension('foo' : 4
['foo.c']) : 2
ext_modules=[Extension('foo' : 3
['foo.c'])] : 3
extension-building : 1
['src/foo1.c' : 2
'src/foo2.c']) : 2
Extension('pkg.foo' : 1
cases; : 2
"ext_package" : 1
setup(... : 7
ext_package='pkg' : 1
Extension('subpkg.bar' : 1
['bar.c'])] : 1
"pkg.foo" : 1
"bar.c" : 1
"pkg.subpkg.bar" : 1
Objective-C : 1
C/C++/Objective-C : 1
(Be : 1
".cpp" : 1
compilers.) : 1
(".i") : 1
ext_modules=[Extension('_foo' : 1
['foo.i'] : 1
swig_opts=['-modern' : 1
'-I../include'])] : 1
--swig-opts="-modern : 1
-I../include" : 1
(".mc") : 1
(".rc") : 1
(".res") : 1
define/undefine: : 1
"include_dirs" : 2
"define_macros" : 3
"undef_macros" : 3
['foo.c'] : 2
include_dirs=['include']) : 1
X11R6 : 1
include_dirs=['/usr/include/X11']) : 1
non-portable : 3
<X11/Xlib.h> : 1
**install_headers** : 1
"/usr/local/include/python1.5/Numerical" : 1
installation.) : 1
directory---"/usr/local/include/python1.5" : 1
---is : 1
<Numerical/arrayobject.h> : 1
"Numerical" : 1
get_python_inc : 1
incdir : 1
os.path.join(get_python_inc(plat_specific=1) : 1
'Numerical') : 1
Extension(... : 4
include_dirs=[incdir]) : 1
portable---it : 1
platform---it's : 1
(Defining : 1
"FOO" : 3
"1".) : 1
define_macros=[('NDEBUG' : 1
('HAVE_STRFTIME' : 1
undef_macros=['HAVE_FOO' : 1
'HAVE_BAR']) : 1
NDEBUG : 1
HAVE_STRFTIME : 1
#undef : 2
HAVE_FOO : 1
HAVE_BAR : 1
2.3.4 : 1
"libraries" : 2
"library_dirs" : 1
link-time : 1
"runtime_library_dirs" : 1
(dynamically : 1
libraries=['gdbm' : 1
'readline']) : 1
"library_dirs": : 1
library_dirs=['/usr/X11R6/lib'] : 1
libraries=['X11' : 1
'Xt']) : 1
(Again : 1
2.3.5 : 1
"optional" : 1
"extra_objects" : 1
"extra_compile_args" : 1
"extra_link_args" : 1
"export_symbols" : 1
"depends" : 1
"distutils.core.setup()" : 4
*requires* : 2
"'mymodule'" : 1
"'xml.parsers.expat'" : 1
matched; : 2
+---------------------------+------------------------------------------------+ : 3
|===========================|================================================| : 1
"==1.0" : 1
">1.0 : 1
!=1.5.1 : 1
<2.0" : 1
"2.0" : 1
"1.5.1" : 1
*provides* : 1
+-----------------------+------------------------------------------------+ : 3
|=======================|================================================| : 1
"mypkg" : 3
"mypkg : 1
(1.1)" : 1
obsoletes : 2
*obsoletes* : 1
"--executable" : 1
"-e") : 1
"scripts" : 2
scripts=['scripts/xmlproc_parse' : 1
'scripts/xmlproc_val'] : 1
*package : 1
data* : 1
"package_data" : 3
(information : 1
appropriate); : 1
portions; : 1
arranged : 8
src/ : 3
mypkg/ : 2
module.py : 1
data/ : 1
tables.dat : 1
spoons.dat : 1
forks.dat : 1
packages=['mypkg'] : 1
package_dir={'mypkg': : 1
'src/mypkg'} : 1
package_data={'mypkg': : 1
['data/*.dat']} : 1
"data_files" : 5
(*directory* : 2
*files*) : 2
data_files=[('bitmaps' : 1
['bm/b1.gif' : 1
'bm/b2.gif']) : 1
('config' : 1
['cfg/data.cfg'])] : 1
(Python's : 1
installations; : 1
installations) : 1
+------------------------+-----------------------------+-------------------+----------+ : 15
Meta-Data : 1
|========================|=============================|===================|==========| : 1
(1)(2) : 2
maintainer's : 1
(6)(7) : 2
(6)(8) : 2
*major.minor[.patch[.sub]]* : 1
"PKG- : 1
INFO" : 1
"License" : 1
Trove : 1
"Classifier" : 1
"licence" : 1
"'foo : 1
bar'" : 1
"['foo' : 3
'bar']" : 3
'short : 1
string' : 2
'long : 1
http://docutils.sourceforge.net/) : 1
'list : 1
strings' : 1
art : 3
*major.minor[.patch][sub]* : 1
milestones : 1
bug-fix : 1
sub-releases : 1
"a1,a2,...,aN" : 1
"b1,b2,...,bN" : 1
"pr1,pr2,...,prN" : 1
0.1.0 : 1
1.0.1a2 : 1
classifiers=[ : 1
'Development : 1
Status : 13
Beta' : 1
Console' : 1
Users/Desktop' : 1
Developers' : 2
Administrators' : 1
'License : 2
OSI : 2
Approved : 2
License' : 2
'Operating : 3
X' : 2
Windows' : 5
POSIX' : 1
'Programming : 8
Python' : 2
'Topic : 4
Communications : 1
Email' : 1
Office/Business' : 1
Tracking' : 1
"DISTUTILS_DEBUG" : 1
**install_lib** : 1
**install_data** : 2
**install_scripts** : 2
8.1.1 : 1
8.1.2 : 1
(Python) : 1
+---------------------------------------------+-------------------------------------------------+ : 9
|=============================================|=================================================| : 1
**include : 1
pat1 : 6
pat2 : 6
...** : 6
**exclude : 1
**recursive-include : 1
**recursive-exclude : 1
**global-include : 1
**global-exclude : 1
**prune : 1
dir** : 2
**graft : 1
"[range]" : 1
"a-z" : 1
"a-zA-Z" : 1
"a-f0-9_.") : 1
platform-specific: : 1
slash; : 2
"py_modules" : 3
about: : 2
<root>/ : 8
diagrams : 1
*<root>* : 1
follow) : 1
bar.py : 6
setup(name='foobar' : 10
py_modules=['foo' : 1
'bar'] : 1
packages=[''] : 2
package.) : 1
live: : 1
package_dir={'': : 1
'src'} : 2
sub-packages) : 1
"foobar" : 3
foobar/ : 2
packages=['foobar'] : 3
"src" : 23
package_dir={'foobar': : 2
root: : 7
''} : 1
sub-packages : 3
files.) : 2
sub-package: : 1
subfoo/ : 1
blah.py : 1
packages=['foobar' : 1
'foobar.subfoo'] : 1
foo.c : 2
distutils.extension : 2
"foopkg" : 2
ext_modules=[Extension('foopkg.foo' : 1
setup(name='foobar') : 1
check: : 5
meta-data: : 2
(author : 1
author_email) : 1
(maintainer : 1
maintainer_email) : 1
"restructuredtext" : 1
"""\ : 4
``foobar`` : 1
version='1' : 1
author='tarek' : 1
author_email='tarek@ziade.org' : 1
url='http://example.com' : 1
long_description=desc) : 1
"docutils" : 1
parser: : 4
--restructuredtext : 1
Title : 1
underline : 8
--name : 1
Distutils-based : 2
"NAME- : 1
VERSION-pyX.X.egg-info" : 1
"VERSION" : 2
"pyX.X" : 1
"2.7" : 1
"distutils.dist.DistributionMetadata" : 1
"read_pkg_file()" : 1
distutils.dist : 1
DistributionMetadata : 1
DistributionMetadata() : 1
metadata.read_pkg_file(open('distribute-0.6.8-py2.7.egg-info')) : 1
metadata.name : 1
'distribute' : 2
metadata.version : 1
'0.6.8' : 1
metadata.description : 1
'Easily : 1
pkg_info_path : 1
'distribute-0.6.8-py2.7.egg-info' : 1
DistributionMetadata(pkg_info_path).name : 1
commands; : 2
lobby : 1
require) : 2
_build_py : 1
build_py(_build_py): : 1
"""Specialized : 1
builder.""" : 1
different.. : 1
setup(cmdclass={'build_py': : 1
"command_packages" : 1
(command-line : 2
"--command-packages") : 1
"[global]" : 1
"--command-packages : 1
distcmds,buildcmds" : 1
"distcmds" : 1
"buildcmds" : 1
**bdist_openpkg** : 1
"distcmds.bdist_openpkg.bdist_openpkg" : 1
"buildcmds.bdist_openpkg.bdist_openpkg" : 1
"(command : 1
filename)" : 1
"self.distribution.dist_files" : 1
dry-run : 3
gzip'ed : 5
--formats=gztar,zip : 1
+-------------+---------------------------+---------------+ : 7
|=============|===========================|===============| : 1
(1),(3) : 1
bzip2'ed : 3
xz'ed : 3
(4),(5) : 1
527; : 1
".tar.gz" : 3
("gztar" : 1
--owner=root : 1
--group=root : 1
"test/test*.py" : 2
("README" : 1
"README.rst") : 1
*manifest : 1
template* : 1
everything: : 1
3.1.3: : 1
3.2.2: : 1
template: : 1
*.txt : 2
recursive-include : 1
*.py : 1
prune : 2
examples/sample?/build : 1
"*.txt" : 4
"examples" : 2
"examples/sample?/build" : 1
"--no-defaults" : 2
entirely.) : 1
mini-language; : 1
"build/") : 1
"RCS" : 2
"CVS" : 2
".hg" : 2
".git" : 2
".bzr" : 2
"_darcs" : 2
archive(s) : 2
defaults" : 1
--no-prune" : 1
"distutils/command" : 1
script---see : 1
Script) : 1
(standard : 8
redundancies : 1
weeded : 1
sub-tree : 3
sub-trees : 1
"examples/sample?/build"---this : 1
"prune" : 1
"recursive-include" : 1
slash-separated; : 1
("MANIFEST" : 1
"--no-prune" : 1
(re)generate : 1
--manifest-only : 1
"--manifest-only" : 1
(PyPI) : 2
author: : 8
^^^^^^^^ : 10
internal-only : 1
*could* : 3
parsing—the : 1
"black : 1
box" : 1
*args" : 1
*kwargs") : 1
problem—and : 1
paramount : 2
It'd : 1
possible—we : 1
tailor-made : 1
possible!) : 1
behaviors; : 1
"signatures" : 1
Clinic: : 4
admittedly : 1
evolves : 1
smart : 2
"Tools/clinic/clinic.py" : 4
Tools/clinic/clinic.py : 1
/*[clinic : 33
input] : 31
[clinic : 22
code]*/ : 28
checksum : 22
checksum=...]*/ : 2
(That's : 2
checksum—to : 1
("/*[clinic : 2
input]") : 1
("[clinic : 1
code]*/") : 1
*end : 1
checksum=...]*/") : 1
*checksum : 1
*output* : 11
inclusively : 1
block.) : 1
farther : 1
converters") : 1
walkthrough : 2
dive : 1
trunk : 1
"_pickle.Pickler.dump()" : 1
"PyArg_Parse" : 2
units: : 3
O& : 1
es : 1
es# : 1
et# : 1
*does* : 4
topics—let's : 1
"[clinic]" : 1
margin : 3
(Argument : 2
docstring.) : 1
anymore—when : 1
signature.) : 2
Sample: : 8
"summary" : 2
80-column : 1
(Our : 1
Above : 1
function—it : 1
_pickle.Pickler.dump : 9
hygiene : 1
other.) : 1
_pickle.Pickler : 5
"PicklerObject : 6
"&Pickler_Type" : 5
name_of_parameter: : 2
default_value : 1
sophisticated; : 1
"converter" : 8
establishes : 3
converter"—a : 1
unit" : 2
*that* : 2
("format : 1
one-to-three : 1
values.) : 2
multicharacter : 1
two-or- : 1
infers : 2
("_pickle.Pickler.dump" : 1
unchanged.) : 1
"PyArg_ParseTupleAndKeywords()") : 1
all-or-nothing; : 1
relax : 1
restriction.) : 1
per-parameter : 6
docstring; : 3
outdented : 1
luck : 2
worked---your : 1
".c.h" : 2
Reopen : 1
see: : 3
_pickle_Pickler_dump(PicklerObject : 1
output=87ecad1261e02ac7 : 1
input=552eb1c0f52260d9]*/ : 1
retrying : 3
"clinic/_pickle.c.h" : 1
Double-check : 1
argument-parsing : 2
"PyArg_ParseTupleAndKeywords()"; : 1
*exact* : 1
semi- : 1
code's : 2
harmless—don't : 1
Fourth : 1
builtin: : 1
__PICKLE_PICKLER_DUMP_METHODDEF : 2
{"dump" : 1
(PyCFunction)__pickle_Pickler_dump : 1
__pickle_Pickler_dump__doc__} : 1
*any : 1
way* : 1
rerun : 1
"impl" : 1
builtin's : 1
reiterate : 1
weird : 3
return_type : 1
your_function_impl(...) : 1
closing) : 2
checksum=da39a3ee5e6b4b0d3255bfef95601890afd80709]*/ : 1
PyDoc_STRVAR(__pickle_Pickler_dump__doc__ : 1
file.\n" : 1
_pickle_Pickler_dump_impl(PicklerObject : 1
checksum=3bd30745bf206a48f8b576a1da3d90f55a0a4187]*/ : 1
(issue3664) : 1
(self->write : 1
PyErr_Format(PicklingError : 1
"Pickler.__init__() : 1
%s.__init__()" : 1
Py_TYPE(self)->tp_name); : 1
(_Pickler_ClearBuffer(self) : 1
Pickler_methods[] : 1
__PICKLE_PICKLER_CLEAR_MEMO_METHODDEF : 1
regression-test : 1
Well : 1
difference: : 1
Congratulations : 1
(integer : 9
"CONSTANT : 1
1".) : 1
collides : 3
""as"" : 4
(generated) : 1
""_impl"" : 1
"pickle.Pickler.dump" : 2
it'd : 2
pickle.Pickler.dump : 3
pickler_dumper : 1
"pickler_dumper()" : 1
"pickler_dumper_impl()" : 1
file_obj: : 1
fix_imports: : 1
"file_obj" : 1
(These : 1
*left* : 1
"curses.window.addch()" : 1
"y"; : 1
"y"—and : 1
either.) : 1
*optional : 1
groups* : 1
*almost : 1
never* : 1
"curses.window.addch" : 1
curses.window.addch : 1
X-coordinate : 1
Y-coordinate : 1
ch: : 1
attr: : 7
"group_{direction}_{number}" : 1
"{direction}" : 1
"right" : 4
"left" : 8
"{number}" : 1
monotonically : 3
invocation.) : 1
favors : 1
"Legacy : 1
supports; : 1
nutshell : 2
(non-legacy) : 1
"c_default" : 3
"parse : 1
"annotation" : 3
mandates : 3
meanings: : 2
pseudo-types); : 1
facility; : 2
table.) : 1
"bitwise" : 1
"converter : 2
"subclass_of" : 3
""PyObject : 1
*"" : 1
"zeroes" : 1
("'\\0'") : 1
"<parameter_name>_length" : 1
units* : 1
"unsigned_short" : 1
"bitwise=True" : 2
yet.) : 1
+-----------+-----------------------------------------------------------------------------------+ : 42
"'B'" : 4
"unsigned_char(bitwise=True)" : 1
"unsigned_char" : 1
"char" : 1
"int(accept={str})" : 1
"'D'" : 7
"'es'" : 1
"str(encoding='name_of_encoding')" : 1
"'es#'" : 1
"str(encoding='name_of_encoding' : 3
zeroes=True)" : 5
"'et'" : 1
accept={bytes : 2
str})" : 2
"'et#'" : 1
str} : 3
"unsigned_short(bitwise=True)" : 1
"'I'" : 3
"unsigned_int(bitwise=True)" : 1
"'k'" : 3
"unsigned_long(bitwise=True)" : 1
"'K'" : 1
"unsigned_long_long(bitwise=True)" : 1
"'l'" : 3
"'L'" : 7
"'n'" : 15
"'O'" : 5
"'O!'" : 1
"object(subclass_of='&PySomething_Type')" : 1
"'O&'" : 2
"object(converter='name_of_c_function')" : 1
"'p'" : 3
"'S'" : 4
"'s#'" : 1
"str(zeroes=True)" : 1
"'s*'" : 2
"Py_buffer(accept={buffer : 2
"'u#'" : 1
"Py_UNICODE(zeroes=True)" : 1
"'w*'" : 2
"Py_buffer(accept={rwbuffer})" : 1
"PyByteArrayObject" : 1
"'y'" : 2
"str(accept={bytes})" : 1
"'y#'" : 1
"str(accept={robuffer} : 1
"'y*'" : 1
"Py_UNICODE(accept={str : 2
NoneType})" : 3
"'Z#'" : 1
NoneType} : 2
"str(accept={str : 2
"'z#'" : 1
"'z*'" : 2
"unsigned_int" : 1
"unsigned_" : 1
converters) : 2
"Tools/clinic/clinic.py : 2
--converters" : 2
"'*y'" : 1
arguments—either : 1
converter; : 1
"O&") : 1
"O!") : 1
"e") : 4
"object()": : 1
"object(type='PyUnicodeObject : 1
*' : 1
subclass_of='&PyUnicode_Type')" : 1
theoretically : 3
Argument-Clinic- : 1
preprocessing-time : 1
deliberate; : 1
unreasonable; : 1
foo: : 6
bar: : 2
bat: : 1
45.6 : 1
yep: : 1
nope: : 1
nada: : 1
convenience's : 1
sakes : 1
reason: : 3
perspective : 3
non-obvious : 1
sys.maxsize : 5
hard-code : 3
""max_widgets"" : 1
max_widgets : 1
itself.) : 1
Py_ssize_t(c_default="PY_SSIZE_T_MAX : 1
1") : 4
complication: : 1
*actually* : 2
("3 : 1
5") : 1
("*[1 : 1
3]") : 1
List/set/dict : 1
Tuple/list/set/dict : 1
types—why : 1
(non-impl) : 1
converters; : 1
converter.) : 1
complication : 3
converters: : 3
(non-"NULL") : 1
("PyErr_Occurred()" : 1
DecodeFSDefault : 1
"DecodeFSDefault" : 1
using.) : 1
reuse: : 1
module.class.new_function : 1
c_basename] : 1
module.class.existing_function : 1
new_function : 1
"module.class" : 1
*both* : 2
functions.) : 5
Sorry : 1
all-or : 1
proposition : 1
/*[python : 6
[python : 4
"output" : 7
print('static : 1
__ignored_unused_variable__ : 2
0;') : 1
checksum:...]*/ : 2
"pointer : 1
"self_converter" : 2
self(type="PicklerObject : 1
PicklerObject_converter(self_converter): : 1
PicklerObject : 1
gaining : 2
"Modules/zlibmodule.c" : 1
zlib.Compress.compress : 1
cls: : 5
defining_class : 1
generated: : 2
zlib_Compress_compress_impl(compobject : 1
*data) : 1
output=6731b3f0ff357ca6 : 1
input=04d00f65ab01d260]*/ : 1
"PyType_GetModuleState(cls)" : 1
zlibstate : 1
PyType_GetModuleState(cls); : 1
"PyTypeObject : 1
"setattro" : 1
"Modules/_threadmodule.c": : 1
local_setattro(localobject : 1
PyType_GetModuleByDef(Py_TYPE(self) : 2
&thread_module); : 1
thread_module_state : 1
get_thread_state(module); : 1
section.. : 1
"CConverter" : 3
unit—parsing : 1
"*something*_converter" : 1
Clinic; : 1
"_converter" : 1
metaclass.) : 1
"CConverter.__init__" : 1
"converter_init()" : 3
"' : 11
*'" : 1
"unspecified" : 1
"py_default" : 1
"c_ignored_default" : 1
"uninitialized : 1
variable" : 3
groups—although : 1
"use" : 1
"impl_by_reference" : 1
"parse_by_reference" : 1
"Modules/zlibmodule.c": : 1
ssize_t_converter(CConverter): : 1
'Py_ssize_t' : 1
'ssize_t_converter' : 1
output=da39a3ee5e6b4b0d : 1
input=35521e4e733823c7]*/ : 1
"ssize_t_converter" : 1
tree; : 2
"CReturnConverter" : 2
positional-only: : 1
meth_o_sample : 1
any.) : 1
interspersed : 4
hand-edited : 1
configurable: : 1
earlier!) : 1
boon : 1
Clinic-generated : 1
hampers : 1
definition-before-use : 2
problems.) : 1
*field* : 14
"methoddef_define" : 2
docstring_prototype : 1
docstring_definition : 1
methoddef_define : 1
impl_prototype : 1
parser_prototype : 1
parser_definition : 1
impl_definition : 1
""<a>_<b>"" : 1
""<a>"" : 1
""<b>"" : 1
""_prototype"" : 1
body/data : 2
thing; : 1
""_definition"" : 1
(""methoddef"" : 1
""_define"" : 1
#define.) : 1
*destination* : 4
destinations: : 1
destination: : 1
"clinic : 2
"{basename}.clinic{extension}" : 1
"basename" : 1
"extension" : 1
"os.path.splitext()" : 2
(Example: : 1
"_pickle.clinic.c".) : 1
**Important: : 1
a** : 1
**destination : 1
you** : 1
*must : 1
in* : 2
**the : 1
file!** : 1
"two-pass" : 8
two-pass : 2
"suppress" : 2
suppressed—thrown : 1
"dump": : 1
<destination> : 2
empties : 1
<field> : 1
meta-destination : 1
"everything" : 1
preset : 12
<preset> : 1
push" : 1
pop" : 1
preset" : 1
Writes : 11
"parser_prototype" : 4
"docstring_prototype" : 4
Designed : 2
"#include" : 1
"typedef" : 1
"impl_definition" : 3
""{dirname}/clinic/{basename}.h"" : 1
"impl_prototype" : 3
Suppresses : 2
"partial-buffer" : 1
"docstring_definition" : 1
"parser_definition" : 1
"destination": : 1
"clear" : 8
subcommand : 3
<type> : 2
"<name>" : 1
"<type>" : 1
Throws : 2
<file_template> : 1
filename: : 4
{path} : 2
{dirname} : 1
{basename} : 2
{basename_root} : 1
Basename : 1
'.') : 2
{basename_extension} : 1
{filename} : 1
{extension} : 1
"{basename}{extension}" : 1
"{filename}"." : 1
someone's : 1
experimenting.) : 1
"set": : 1
line_prefix : 1
line_suffix : 1
"line_prefix" : 1
"line_suffix" : 1
"{block : 2
start}" : 1
Turns : 2
"/*" : 1
start-comment : 1
end}" : 1
"*/" : 1
end-comment : 1
"preserve": : 1
HAVE_FUNCTIONNAME : 6
module_functionname(...) : 2
{'functionname' : 1
"#ifdef" : 3
module.functionname : 1
MODULE_FUNCTIONNAME_METHODDEF : 3
yourself: : 5
uppercased : 3
""_METHODDEF"" : 1
end.) : 1
wondering: : 1
"HAVE_FUNCTIONNAME" : 1
"MODULE_FUNCTIONNAME_METHODDEF" : 1
deactivated : 2
!defined(MODULE_FUNCTIONNAME_METHODDEF) : 1
ticklish : 1
point!) : 1
"Modules/posixmodule.c" : 1
12357: : 1
Destination : 2
'buffer' : 1
"dump : 1
buffer" : 1
(it'll : 1
bottom) : 2
preprocess : 2
#/*[python : 2
#print("def : 1
pass") : 1
#[python : 1
**************************** : 6
0.32 : 1
*iterator*s : 1
*generator*s : 4
programming; : 1
decomposing : 1
**procedural**: : 1
**declarative** : 1
declarative : 3
with; : 1
subclauses : 1
**Object-oriented** : 1
**Functional** : 1
decomposes : 1
Well-known : 1
(Standard : 1
OCaml : 1
variants) : 1
multi-paradigm : 1
multi-paradigm; : 1
approaches; : 1
flows : 1
discourages : 1
**purely : 1
functional** : 1
runs; : 1
purity : 1
"a=3" : 1
assignments; : 1
functional-appearing : 1
non-functional : 1
flowing : 1
(e-mail : 1
theoretical : 2
style: : 2
proof : 5
researchers : 1
concluding : 2
rigorous : 1
**invariants** : 1
**before** : 1
**after** : 1
programming's : 1
avoidance : 1
arose : 1
technique; : 1
proving : 1
impractical : 1
proofs : 1
long; : 1
proof; : 1
functional-style : 6
test; : 4
synthesize : 1
<...iterator : 1
...> : 13
it.__next__() : 1
iter(obj): : 1
tuple(iterator) : 1
iterators: : 3
N-tuple: : 1
""in"" : 2
""not : 2
in"" : 2
infinite; : 2
print(key : 2
m[key]) : 1
[('Italy' : 1
'Rome') : 1
('France' : 1
'Paris') : 1
('US' : 1
'Washington : 2
DC')] : 1
dict(iter(L)) : 1
{'Italy': : 1
'Rome' : 1
'France': : 1
'Paris' : 1
'US': : 1
DC'} : 1
{2 : 2
S: : 2
"listcomps" : 1
"genexps") : 1
(https://www.haskell.org/) : 1
line_list : 2
1\n' : 1
\n' : 2
''] : 13
stripped_iter : 1
(line.strip() : 1
line_list) : 1
stripped_list : 2
[line.strip() : 3
line_list] : 1
""if"" : 1
""] : 1
"stripped_list" : 1
("[]") : 39
condition1 : 1
condition2 : 1
sequence3 : 1
condition3 : 1
conditionN : 1
(square : 1
"condition" : 2
obj_total : 1
"for...in" : 2
"sequence1" : 2
"sequence2" : 2
"sequence3" : 1
(condition1): : 1
(condition2): : 1
(conditionN): : 1
next(gen) : 4
"StopIteration(value)" : 1
Lib/test/test_generators.py : 1
"test_generators.py" : 1
NxN : 2
(finding : 1
**always** : 2
counter(maximum): : 1
"throw(value)" : 1
"StopIteration"; : 1
**coroutines** : 2
"map(f : 2
iterA : 3
iterB : 5
"f(iterA[0] : 1
iterB[0]) : 1
f(iterA[1] : 1
iterB[1]) : 1
f(iterA[2] : 1
iterB[2]) : 1
upper(s): : 1
s.upper() : 1
list(map(upper : 1
['sentence' : 2
'fragment'])) : 1
['SENTENCE' : 2
'FRAGMENT'] : 2
[upper(s) : 1
'fragment']] : 1
iter)" : 5
**predicate** : 1
condition; : 2
is_even(x): : 1
list(filter(is_even : 1
list(x : 1
is_even(x)) : 1
"enumerate(iter : 1
*start*) : 1
enumerate(['subject' : 1
'verb' : 1
'object']): : 1
print(item) : 3
'subject') : 1
'verb') : 1
'object') : 1
open('data.txt' : 1
enumerate(f): : 1
line.strip() : 1
print('Blank : 1
#%i' : 1
"sorted(iterable : 5
reverse=False)" : 1
rand_list : 2
random.sample(range(10000) : 1
[769 : 2
7953 : 3
9828 : 3
6431 : 3
8442 : 3
9878 : 1
6213 : 3
2207] : 1
sorted(rand_list) : 1
2207 : 2
9878] : 1
sorted(rand_list : 1
reverse=True) : 5
[9878 : 1
769] : 1
TO.) : 1
"any(iter)" : 1
"all(iter)" : 1
any([0 : 2
0]) : 8
any([1 : 1
all([0 : 2
all([1 : 1
"zip(iterA : 1
zip(['a' : 2
exhaust : 1
returning; : 1
evaluation.) : 1
"itertools.count(start : 1
evenly : 4
spaced : 4
itertools.count(10) : 1
itertools.count(10 : 1
45 : 5
"itertools.cycle(iter)" : 1
itertools.cycle([1 : 1
"itertools.repeat(elem : 1
[n])" : 2
itertools.repeat('abc') : 1
itertools.repeat('abc' : 1
"itertools.chain(iterA : 1
itertools.chain(['a' : 1
"itertools.islice(iter : 1
[start] : 1
[step])" : 1
*stop-start* : 1
itertools.islice(range(10) : 3
"itertools.tee(iter : 1
replicates : 4
Replicating : 1
itertools.tee( : 1
"operator.add(a : 1
(adds : 1
"operator.ne(a : 1
b") : 2
"operator.attrgetter('id')" : 1
(returns : 2
".id" : 1
"itertools.starmap(func : 1
itertools.starmap(os.path.join : 1
[('/bin' : 1
'python') : 1
('/usr' : 3
'java') : 1
'ruby')]) : 1
/bin/python : 1
/usr/bin/java : 1
/usr/bin/perl : 1
/usr/bin/ruby : 1
"itertools.filterfalse(predicate : 1
itertools.filterfalse(is_even : 1
itertools.count()) : 5
"itertools.takewhile(predicate : 1
less_than_10(x): : 1
itertools.takewhile(less_than_10 : 1
itertools.takewhile(is_even : 1
"itertools.dropwhile(predicate : 1
itertools.dropwhile(less_than_10 : 1
itertools.dropwhile(is_even : 1
exhausted: : 1
itertools.compress([1 : 1
True]) : 1
"itertools.combinations(iterable : 1
*r*-tuple : 1
itertools.combinations([1 : 2
"itertools.permutations(iterable : 1
r=None)" : 1
arrangements : 1
*r*: : 1
itertools.permutations([1 : 2
permuted : 1
unique: : 1
itertools.permutations('aba' : 1
"itertools.combinations_with_replacement(iterable : 1
relaxes : 1
constraint: : 1
Conceptually : 4
itertools.combinations_with_replacement([1 : 1
"itertools.groupby(iter : 1
key_func=None)" : 1
"key_func(elem)" : 1
city_list : 1
[('Decatur' : 1
'AL') : 6
('Huntsville' : 2
('Selma' : 2
('Anchorage' : 2
'AK') : 4
('Nome' : 2
('Flagstaff' : 2
'AZ') : 6
('Phoenix' : 2
('Tucson' : 2
get_state(city_state): : 1
city_state[1] : 1
itertools.groupby(city_list : 1
get_state) : 1
('AL' : 1
iterator-1) : 1
('AK' : 1
iterator-2) : 1
('AZ' : 1
iterator-3) : 1
iterator-1 : 2
('Decatur' : 1
iterator-2 : 2
iterator-3 : 1
higher-order : 2
**higher-order : 1
function** : 1
"f()"'s : 2
log(message : 1
"""Write : 1
subsystem.""" : 1
print('%s: : 2
message)) : 1
"functools.reduce(func : 1
[initial_value])" : 1
cumulatively : 2
"func(A : 1
B)" : 3
"func(func(A : 1
"func(initial_value : 1
functools.reduce(operator.concat : 2
'BB' : 1
'C']) : 1
'ABBC' : 1
[]) : 8
reduce() : 1
functools.reduce(operator.mul : 3
"operator.add()" : 1
functools.reduce(operator.add : 1
sum([1 : 1
4]) : 9
sum([]) : 1
"itertools.accumulate(iterable : 1
func=operator.add)" : 1
itertools.accumulate([1 : 2
operator.mul) : 2
Math : 4
"mul()" : 2
"floordiv()" : 1
"not_()" : 1
"truth()" : 1
"and_()" : 1
"or_()" : 1
"invert()" : 1
Comparisons: : 2
"eq()" : 1
"ne()" : 1
"lt()" : 2
"le()" : 1
"gt()" : 1
"ge()" : 1
"is_()" : 1
"is_not()" : 1
stripped_lines : 1
lines] : 1
existing_files : 1
filter(os.path.exists : 1
file_list) : 1
adder : 1
x+y : 4
print_assign : 1
adder(x : 1
print_assign(name : 1
question; : 2
computable : 2
multiway : 1
"try.. : 1
except" : 1
functools.reduce(lambda : 1
b[1]) : 1
items)[1] : 2
disentangle : 1
better: : 1
combine(a : 1
b[1] : 1
functools.reduce(combine : 1
sum(b : 2
items) : 4
"lambda": : 1
heck : 1
essence : 2
disagree : 2
lambda-free : 1
Bicking : 1
Efford : 1
Krell : 1
Leandro : 1
Lameiro : 1
Jussi : 1
Salmela : 1
Blake : 1
Winton : 1
0.1: : 1
0.11: : 1
Typo : 2
0.2: : 1
Merged : 2
genexp : 1
0.21: : 1
tutor : 1
0.30: : 1
"functional" : 1
**Structure : 1
Interpretation : 1
Programs** : 1
Harold : 1
Abelson : 1
Gerald : 1
Sussman : 2
Julie : 1
https://mitpress.mit.edu/sicp/ : 1
https://www.defmacro.org/ramblings/fp.html: : 1
https://en.wikipedia.org/wiki/Functional_programming: : 1
https://en.wikipedia.org/wiki/Coroutine: : 1
https://en.wikipedia.org/wiki/Currying: : 1
currying : 1
https://gnosis.cx/TPiP/: : 1
Mertz's : 1
*Text : 1
Python* : 1
"Utilizing : 1
Higher-Order : 1
Processing" : 1
Mertz : 1
3-part : 1
DeveloperWorks : 1
site; : 1
289**: : 1
Expressions" : 1
342**: : 1
"Coroutines : 1
Generators" : 1
Contact: : 1
<python : 1
rcn : 1
com> : 3
*Descriptors* : 1
"primer" : 1
gently : 1
primer : 1
"Ten" : 1
"10": : 1
Ten: : 1
objtype=None): : 10
Ten() : 1
lookup: : 2
a.x : 2
Normal : 10
a.y : 2
"'x': : 1
"a.y" : 1
"__get__" : 6
Interesting : 2
DirectorySize: : 1
len(os.listdir(obj.dirname)) : 1
Directory: : 1
DirectorySize() : 1
dirname): : 1
self.dirname : 1
dirname : 1
Directory('songs') : 1
Directory('games') : 1
s.size : 1
songs : 1
twenty : 1
g.size : 2
os.remove('games/chess') : 1
*DirectorySize* : 1
*Directory* : 2
*objtype* : 1
*age* : 6
*_age* : 2
update: : 1
LoggedAgeAccess: : 1
obj._age : 2
logging.info('Accessing : 2
%r' : 5
'age' : 11
logging.info('Updating : 2
Person: : 2
LoggedAgeAccess() : 1
age): : 3
self.age : 6
__set__() : 2
birthday(self): : 2
__get__() : 1
logged: : 1
mary : 1
Person('Mary : 1
M' : 2
INFO:root:Updating : 7
dave : 1
Person('David : 1
D' : 3
vars(mary) : 1
'Mary : 1
'_age': : 4
30} : 1
vars(dave) : 1
'David : 2
40} : 1
mary.age : 1
INFO:root:Accessing : 3
mary.birthday() : 1
dave.name : 1
dave.age : 1
hardwired : 2
*LoggedAgeAccess* : 1
"Person" : 3
*LoggedAccess* : 1
*public_name* : 1
*private_name*: : 1
LoggedAccess: : 1
self.public_name : 3
self.private_name : 4
getattr(obj : 9
self.private_name) : 2
setattr(obj : 3
LoggedAccess() : 2
vars(vars(Person)['name']) : 1
{'public_name': : 2
'private_name': : 2
'_name'} : 1
vars(vars(Person)['age']) : 1
'_age'} : 1
*age*: : 2
pete : 1
Person('Peter : 1
P' : 3
'Peter : 2
kate : 1
Person('Catherine : 1
C' : 3
'Catherine : 2
*Person* : 1
vars(pete) : 1
{'_name': : 2
vars(kate) : 1
20} : 2
descriptor.) : 1
"vars(some_class)[descriptor_name]" : 1
invert : 1
looked- : 1
notoriously : 2
"Validator" : 2
descriptor: : 3
Validator(ABC): : 1
self.validate(value) : 1
validate(self : 4
"validate()" : 2
utilities: : 2
"OneOf" : 1
"String" : 1
OneOf(Validator): : 1
*options): : 1
self.options : 1
set(options) : 1
self.options: : 1
ValueError(f'Expected : 1
{value!r} : 7
{self.options!r}') : 1
Number(Validator): : 1
minvalue=None : 1
maxvalue=None): : 1
self.minvalue : 2
minvalue : 1
self.maxvalue : 2
maxvalue : 1
float)): : 1
TypeError(f'Expected : 2
float') : 1
self.minvalue: : 1
ValueError( : 6
f'Expected : 5
{self.minvalue!r}' : 1
self.maxvalue: : 1
{self.maxvalue!r}' : 1
String(Validator): : 1
minsize=None : 1
maxsize=None : 2
predicate=None): : 1
self.minsize : 2
minsize : 1
self.maxsize : 4
self.predicate : 2
str): : 5
str') : 1
len(value) : 2
self.minsize: : 1
{self.minsize!r}' : 1
self.maxsize: : 3
{self.maxsize!r}' : 1
self.predicate(value): : 1
{self.predicate} : 1
{value!r}' : 1
Component: : 1
String(minsize=3 : 1
maxsize=10 : 1
predicate=str.isupper) : 1
OneOf('wood' : 1
'metal' : 5
'plastic') : 1
Number(minvalue=0) : 1
quantity): : 1
self.kind : 1
self.quantity : 1
Component('Widget' : 1
Blocked: : 4
'Widget' : 2
Expected : 22
<method : 1
'isupper' : 1
objects> : 1
Component('WIDGET' : 4
'metle' : 3
{'metal' : 1
'plastic' : 1
'wood'} : 1
'V') : 1
'V' : 2
Allowed: : 1
everyday : 4
"descr.__get__(self : 1
type=None) : 1
"descr.__set__(self : 1
"descr.__delete__(self : 1
"desc.__get__(obj)" : 1
"desc.__get__(None : 2
"desc.__get__(a : 1
find_name_in_mro(cls : 1
_PyType_Lookup() : 1
Objects/typeobject.c" : 2
cls.__mro__: : 1
vars(base): : 1
vars(base)[name] : 1
object_getattribute(obj : 1
PyObject_GenericGetAttr() : 1
Objects/object.c" : 1
objtype : 1
cls_var : 3
find_name_in_mro(objtype : 1
null) : 2
descr_get : 3
getattr(type(cls_var) : 1
'__get__' : 1
null: : 5
(hasattr(type(cls_var) : 1
'__set__') : 1
hasattr(type(cls_var) : 1
'__delete__')): : 1
descr_get(cls_var : 2
objtype) : 2
'__dict__') : 1
vars(obj): : 1
vars(obj)[name] : 1
AttributeError(name) : 1
"super().__getattribute__" : 1
getattr_hook(obj : 1
slot_tp_getattr_hook() : 1
obj.__getattribute__(name) : 1
hasattr(type(obj) : 1
'__getattr__'): : 1
type(obj).__getattr__(obj : 1
"type.__getattribute__()" : 2
Objects/typeobject.c : 3
super's : 2
obj).m" : 1
"obj.__class__.__mro__" : 1
"B.__dict__['m'].__get__(obj : 1
"super_getattro()" : 1
Non-data : 2
"set_names()" : 1
skeleton : 1
database's : 2
Field: : 1
self.fetch : 1
f'SELECT : 1
{owner.table} : 2
{owner.key}=?;' : 2
self.store : 1
f'UPDATE : 1
SET : 2
{name}= : 1
conn.execute(self.fetch : 1
[obj.key]).fetchone()[0] : 1
conn.execute(self.store : 1
[value : 1
obj.key]) : 1
conn.commit() : 1
"Field" : 6
database: : 6
Movie: : 1
'Movies' : 1
'title' : 3
director : 2
Field() : 5
self.key : 2
Song: : 1
'Music' : 1
artist : 1
genre : 1
sqlite3.connect('entertainment.db') : 1
Movie('Star : 3
Wars').director : 3
'George : 1
Lucas' : 1
jaws : 1
Movie('Jaws') : 1
f'Released : 1
{jaws.year} : 1
{jaws.director}' : 1
'Released : 1
1975 : 6
Spielberg' : 1
Song('Country : 1
Roads').artist : 1
'John : 2
Denver' : 1
'J.J : 2
Abrams' : 2
prepackaged : 1
property(fget=None : 2
fset=None : 4
fdel=None : 4
doc=None) : 4
getx(self): : 2
self.__x : 3
setx(self : 2
delx(self): : 2
property(getx : 2
setx : 2
delx : 2
property.") : 2
Property: : 1
PyProperty_Type() : 1
Objects/descrobject.c" : 1
fget=None : 1
doc=None): : 1
self.fget : 2
fget : 2
self.fset : 4
fset : 2
self.fdel : 4
fdel : 2
fget.__doc__ : 1
self.__doc__ : 1
self._name : 10
AttributeError(f"property : 3
'{self._name}' : 3
getter") : 1
self.fget(obj) : 1
setter") : 1
self.fset(obj : 1
__delete__(self : 2
obj): : 7
deleter") : 1
self.fdel(obj) : 1
getter(self : 1
fget): : 1
prop : 6
type(self)(fget : 1
self.__doc__) : 3
prop._name : 3
setter(self : 1
fset): : 1
type(self)(self.fget : 2
deleter(self : 1
fdel): : 1
intervention : 2
spreadsheet : 2
"Cell('b10').value" : 1
recalculated : 2
Cell: : 2
value(self): : 2
"Recalculate : 1
self.recalc() : 1
self._value : 1
"Property()" : 1
seamlessly : 1
*this* : 1
MethodType: : 1
Objects/classobject.c" : 1
self.__func__ : 2
self.__self__ : 2
func(obj : 1
Function: : 1
"Simulate : 1
func_descr_get() : 1
Objects/funcobject.c" : 3
MethodType(self : 1
practice: : 2
introspection: : 1
D.f.__qualname__ : 1
'D.f' : 1
D.__dict__['f'] : 1
D.f : 5
0x00C45070> : 3
D() : 1
d.f : 1
<bound : 2
<__main__.D : 2
0x00B18C90>> : 1
d.f.__func__ : 1
d.f.__self__ : 1
0x1012e1f98> : 1
wondered : 2
recap : 1
"obj.f(*args)" : 1
"f(obj : 1
*args)" : 2
"cls.f(*args)" : 1
+-------------------+------------------------+--------------------+ : 4
Transformation : 2
|===================|========================|====================| : 1
f(obj : 1
f(*args) : 3
f(type(obj) : 1
f(cls : 3
"c.f" : 1
"C.f" : 1
"object.__getattribute__(c : 1
"f")" : 2
"object.__getattribute__(C : 1
"erf(x)" : 1
"s.erf(1.5) : 1
.9332" : 2
"Sample.erf(1.5) : 1
unexciting: : 1
E: : 2
E.f(3) : 1
E().f(3) : 1
StaticMethod: : 1
PyStaticMethod_Type() : 1
self.f : 3
self.f(*args : 1
F: : 1
cls.__name__ : 1
F.f(3) : 1
('F' : 2
F().f(3) : 1
"dict.fromkeys()" : 1
Dict(dict): : 2
fromkeys(cls : 1
value=None): : 1
dict_fromkeys() : 1
Objects/dictobject.c" : 1
d[key] : 7
Dict.fromkeys('abracadabra') : 1
type(d) : 1
None} : 3
ClassMethod: : 1
PyClassMethod_Type() : 1
cls=None): : 1
hasattr(type(self.f) : 1
'__get__'): : 1
self.f.__get__(cls : 1
cls) : 3
MethodType(self.f : 1
"hasattr(type(self.f) : 1
'__get__')" : 1
G: : 1
__doc__(cls): : 1
f'A : 1
{cls.__name__!r}' : 1
G.__doc__ : 1
'G'" : 1
Vehicle: : 1
('id_number' : 1
'make' : 1
'model') : 1
Vehicle() : 1
auto.id_nubmer : 1
'VYE483814LQEX' : 1
'Vehicle' : 1
'id_nubmer' : 1
"__slots__": : 1
Immutable: : 1
('_dept' : 1
'_name') : 1
self._dept : 2
dept(self): : 1
Immutable('Botany' : 1
'Mark : 2
Watney') : 1
mark.dept : 2
'Botany' : 1
'Space : 1
Pirate' : 1
'dept' : 1
'Immutable' : 2
mark.location : 1
'Mars' : 1
'location' : 3
Saves : 2
152 : 1
flyweight : 1
M1 : 2
processor) : 2
correctly: : 1
cached_property : 1
CP: : 1
Eliminates : 1
pi(self): : 1
sum((-1.0)**n : 1
(2.0*n : 1
1.0) : 6
reversed(range(100_000))) : 1
CP().pi : 1
'__dict__' : 1
'CP' : 1
'pi' : 1
faithful : 1
simulation : 10
"_slotvalues" : 1
Reads : 10
Member: : 1
clsname : 5
'Emulate : 9
Include/structmember.h' : 1
descr_new() : 1
Objects/descrobject.c : 1
self.clsname : 1
self.offset : 1
member_get() : 1
Objects/descrobject.c' : 4
PyMember_GetOne() : 1
Python/structmember.c : 1
obj._slotvalues[self.offset] : 4
AttributeError(self.name) : 2
member_set() : 1
member_delete() : 1
member_repr() : 1
f'<Member : 1
{self.name!r} : 1
{self.clsname!r}>' : 1
Type(type): : 1
'Simulate : 2
slots' : 3
__new__(mcls : 1
type_new() : 2
Objects/typeobject.c' : 2
PyTypeReady() : 1
add_methods() : 1
slot_names : 2
mapping.get('slot_names' : 1
enumerate(slot_names): : 1
mapping[name] : 1
Member(name : 1
type.__new__(mcls : 1
"object.__new__()" : 1
Object: : 3
object.__new__() : 1
__slots__' : 1
object_new() : 1
super().__new__(cls) : 1
hasattr(cls : 3
'slot_names'): : 1
empty_slots : 1
[null] : 1
len(cls.slot_names) : 1
object.__setattr__(inst : 1
'_slotvalues' : 1
empty_slots) : 1
_PyObject_GenericSetAttrWithDict() : 2
Objects/object.c' : 2
type(self) : 4
'slot_names') : 2
cls.slot_names: : 2
AttributeError( : 2
f'{cls.__name__!r} : 2
{name!r}' : 2
super().__setattr__(name : 1
__delattr__(self : 1
super().__delattr__(name) : 1
"Object" : 1
"Type": : 1
H(Object : 1
metaclass=Type): : 1
'Instance : 2
self.x : 10
self.y : 7
*y*: : 1
pp(dict(vars(H))) : 1
{'__module__': : 1
'__doc__': : 1
'slot_names': : 1
'__init__': : 1
H.__init__ : 1
0x7fb5d302f9d0> : 1
<Member : 2
'H'> : 1
'H'>} : 1
"slot_values" : 1
stored: : 2
H(10 : 1
vars(h) : 2
{'_slotvalues': : 2
20]} : 2
h.x : 1
[55 : 1
Misspelled : 1
h.xz : 1
'H' : 1
'xz' : 1
and—perhaps : 1
importantly—accessing : 1
about—users : 1
interpreters: : 1
"Py_InitializeEx()"/"Py_FinalizeEx()" : 1
"sub-interpreters" : 1
"Py_NewInterpreter()"/"Py_EndInterpreter()" : 1
"main : 2
interpreter" : 2
*per- : 1
process* : 1
*per-interpreter* : 1
granular : 1
*per-module* : 1
Per-module : 1
ownership: : 1
shutdown" : 2
think—or : 1
forget—about : 1
"globals": : 1
per-task : 1
them.) : 2
old_binascii : 2
sys.modules['binascii'] : 1
State) : 1
"old_binascii.Error" : 1
caught: : 3
old_binascii.Error : 1
old_binascii.unhexlify(b'qwertyuiop') : 1
print('boo') : 1
Mutating : 2
"manually" : 1
"more : 2
global" : 1
*the* : 2
circuit : 1
on-board : 1
LED : 1
*access* : 11
(along : 2
process-global : 2
process—see : 1
module-specific : 3
"csv"'s : 1
"field_size_limit") : 1
error- : 1
sufficiently.However : 1
longer; : 1
xxlimited; : 1
exec_module(PyObject* : 1
(loaded) : 1
PyErr_SetString(PyExc_ImportError : 1
process"); : 1
"PyModule_GetState": : 1
func(PyObject : 1
my_struct : 4
(my_struct*)PyModule_GetState(module); : 2
(state : 4
"PyModule_GetState" : 1
*static*; : 1
PyTypeObject" : 1
"str.myattribute : 1
123" : 2
detail: : 3
"their" : 1
*heap- : 1
"lossless" : 2
types—that : 1
list): : 2
"blueprint" : 1
should: : 1
"Py_tp_traverse" : 1
visits : 2
Py_VISIT(Py_TYPE(self))) : 1
...and : 2
(my_struct*)PyType_GetModuleState(type); : 1
=== : 5
roadblock : 1
"Base.get_defining_class" : 1
"type(self) : 1
Sub": : 1
get_type_of_self(self): : 1
get_defining_class(self): : 1
Sub(Base): : 2
"calling : 1
convention" : 1
*PyCMethod( : 1
example_method(PyObject : 1
(my_struct*)PyType_GetModuleState(defining_class); : 1
PyDoc_STRVAR(example_method_doc : 1
"..."); : 1
my_methods[] : 1
{"example_method" : 1
(PyCFunction)(void(*)(void))example_method : 1
METH_METHOD|METH_FASTCALL|METH_KEYWORDS : 1
example_method_doc} : 1
methods—the : 1
initialization—have : 1
getters : 3
&module_def); : 1
superclasses) : 1
(inheritance : 1
spanning : 2
capi- : 1
sig : 11
future—perhaps : 1
ironically : 1
per-class : 1
scope) : 4
2.04 : 1
terminal-independent : 1
screen-painting : 1
keyboard-handling : 1
text-based : 2
terminals; : 2
VT100s : 2
erasing : 2
"why : 1
bother" : 1
niches : 1
niche : 1
small-footprint : 1
Unixes : 3
configurators : 1
ways---adding : 1
appearance--- : 1
user-interface : 1
dialogs; : 1
Urwid : 4
AT&T : 2
UniCurses : 1
curses; : 1
"addstr()" : 9
"mvaddstr()" : 2
"mvwaddstr()" : 2
guide's : 1
"initscr()" : 10
screen; : 4
"stdscr" : 5
stdscr : 1
curses.initscr() : 2
"noecho()" : 1
curses.noecho() : 2
instantly : 3
pressed; : 1
cbreak : 9
curses.cbreak() : 2
Terminals : 1
Page : 4
"curses.KEY_LEFT" : 2
keypad : 12
stdscr.keypad(True) : 1
Terminating : 1
curses.nocbreak() : 2
stdscr.keypad(False) : 1
curses.echo() : 3
curses-friendly : 1
"endwin()" : 2
curses.endwin() : 2
messed : 1
main(stdscr): : 2
stdscr.clear() : 1
i-10 : 1
stdscr.addstr(i : 1
'10 : 1
{}'.format(v : 1
10/v)) : 1
stdscr.refresh() : 4
stdscr.getkey() : 1
wrapper(main) : 1
"wrapper()" : 5
funny : 2
rectangular : 2
redraw : 3
"newwin()" : 2
begin_x : 1
20; : 1
begin_y : 6
5; : 2
curses.newwin(height : 1
begin_x) : 8
Coordinates : 2
*y,x* : 4
top-left : 1
(0,0) : 4
"curses.LINES" : 1
"curses.COLS" : 1
Legal : 8
"(0,0)" : 1
"(curses.LINES : 1
curses.COLS : 1
"refresh()" : 15
300-baud : 1
mind; : 1
redrawn : 4
"stdscr.refresh()" : 1
window; : 2
pad's : 1
refreshing : 1
on-screen : 2
curses.newpad(100 : 1
letters; : 2
99): : 2
pad.addch(y,x : 1
(x*x+y*y) : 1
26) : 2
upper-left : 8
(5,5) : 2
(20 : 1
75) : 1
lower-right : 1
pad.refresh( : 1
0,0 : 1
5,5 : 1
20,75) : 1
(20,75) : 1
flicker : 2
"noutrefresh()" : 6
"doupdate()" : 5
twisty : 1
maze : 1
y,x : 1
"waddstr()" : 1
+-----------------------------------+-------------------------------------------------+ : 5
|===================================|=================================================| : 1
*attr* : 17
boldface : 1
They'll : 2
bytestrings : 7
window's : 11
"addch()" : 1
"ACS_PLMINUS" : 2
+/- : 1
"ACS_ULCORNER" : 3
(handy : 1
borders) : 1
"move(y,x)" : 1
flashing : 2
positioned : 6
distracting; : 1
blinking : 2
apparently : 3
"curs_set(False)" : 1
"leaveok(bool)" : 1
"curs_set()" : 1
*bool* : 1
video : 6
safest : 3
+------------------------+----------------------------------------+ : 7
|========================|========================================| : 1
"A_BLINK" : 2
Blinking : 1
"A_BOLD" : 2
bright : 2
bold : 1
"A_DIM" : 2
Half : 1
"A_REVERSE" : 4
Reverse-video : 1
"A_STANDOUT" : 3
"A_UNDERLINE" : 2
Underlined : 1
reverse-video : 2
stdscr.addstr(0 : 2
"Current : 1
curses.A_REVERSE) : 1
xterms : 1
"start_color()" : 3
"has_colors()" : 1
TRUE : 1
(Note: : 4
American : 3
Canadian/British : 1
British : 1
resign : 1
foreground : 13
text) : 16
"color_pair()" : 2
bitwise-OR'ed : 1
stdscr.addstr("Pretty : 1
text" : 2
curses.color_pair(1)) : 2
"init_pair(n : 1
hard-wired : 1
Colors : 2
0:black : 1
1:red : 1
2:green : 1
3:yellow : 1
4:blue : 1
5:magenta : 1
6:cyan : 1
7:white : 1
"curses.COLOR_BLACK" : 1
"curses.COLOR_RED" : 1
curses.init_pair(1 : 1
curses.COLOR_RED : 2
curses.COLOR_WHITE) : 1
stdscr.addstr(0,0 : 1
"RED : 1
ALERT!" : 1
purple : 10
"can_change_color()" : 2
lucky : 1
talented : 1
text-input : 1
widgets.) : 1
window: : 3
refreshes : 5
"echo()" : 1
"getkey()" : 3
"KEY_UP" : 4
"^G" : 1
"nodelay()" : 1
"nodelay(True)" : 1
"curses.ERR" : 1
"halfdelay()" : 1
"getch()"; : 1
(measured : 2
tenths : 2
second) : 3
"curses.KEY_PPAGE" : 1
"curses.KEY_HOME" : 1
stdscr.getch() : 1
ord('p'): : 1
PrintDocument() : 1
ord('q'): : 1
curses.KEY_HOME: : 1
-character-string : 1
"curses.ascii.ctrl()" : 1
"getstr()" : 1
limited; : 1
15-character : 1
stdscr.getstr(0,0 : 1
Emacs-like : 1
keybindings : 6
curses.textpad : 1
"Enter : 1
IM : 1
(hit : 1
Ctrl-G : 2
send)") : 1
editwin : 1
curses.newwin(5,30 : 1
2,1) : 1
rectangle(stdscr : 1
1,0 : 1
1+5+1 : 1
1+30+1) : 1
Textbox(editwin) : 1
struck : 1
box.edit() : 1
box.gather() : 1
xterm : 2
"ACS_*" : 1
NCURSES: : 1
"Use : 3
curses.. : 1
swear": : 1
"Console : 1
Urwid": : 1
ascending : 8
sorted([5 : 1
confusion) : 1
a.sort() : 1
sorted({1: : 1
'A'}) : 1
sorted("This : 1
Andrew".split() : 1
key=str.lower) : 1
'test' : 7
'This'] : 1
student_tuples : 1
('john' : 8
('jane' : 13
('dave' : 6
sorted(student_tuples : 4
key=lambda : 2
student: : 3
student[2]) : 1
[('dave' : 7
15)] : 8
self.grade : 2
repr((self.name : 1
self.age)) : 1
student_objects : 1
Student('john' : 1
Student('jane' : 1
Student('dave' : 1
sorted(student_objects : 5
student.age) : 1
key-function : 2
key=itemgetter(2)) : 1
key=attrgetter('age')) : 2
*grade* : 3
key=itemgetter(1,2)) : 1
[('john' : 5
key=attrgetter('grade' : 1
'age')) : 1
key=itemgetter(2) : 1
10)] : 5
key=attrgetter('age') : 1
[('red' : 5
('blue' : 14
('red' : 13
sorted(data : 3
key=itemgetter(0)) : 1
[('blue' : 4
*blue* : 1
"('blue' : 2
*grade*: : 1
sorted(s : 1
key=attrgetter('grade') : 1
abstracted : 1
multisort(xs : 1
specs): : 1
reversed(specs): : 1
xs.sort(key=attrgetter(key) : 1
reverse=reverse) : 1
xs : 1
multisort(list(student_objects) : 1
(('grade' : 1
('age' : 1
False))) : 1
decorations : 1
DSU : 1
approach: : 4
[(student.grade : 1
student) : 1
enumerate(student_objects)] : 1
decorated.sort() : 1
[student : 1
decorated] : 1
undecorate : 1
lexicographically; : 1
compared; : 2
benefits: : 1
popularized : 1
key-functions : 1
lighter : 1
heavier : 1
"locale.strcoll()" : 2
"functools.cmp_to_key" : 1
sorted(words : 1
key=cmp_to_key(strcoll)) : 1
"alphabetical" : 1
cultures : 1
alphabet : 20
standard_way : 3
key=itemgetter(0) : 1
double_reversed : 2
list(reversed(sorted(reversed(data) : 1
key=itemgetter(0)))) : 1
Student.__lt__ : 1
other: : 9
other.age : 1
sorted(student_objects) : 1
"object.__lt__()") : 1
grades : 2
['dave' : 1
'john' : 1
'jane'] : 1
newgrades : 1
{'john': : 1
'jane':'A' : 1
'dave': : 1
'C'} : 1
sorted(students : 1
key=newgrades.__getitem__) : 1
['jane' : 1
'dave' : 1
'john'] : 1
Migrating : 1
*Supporting : 1
guide* : 1
*py3c* : 1
opinionated : 1
CFFI : 1
******************************************************* : 4
Le : 3
manquant : 1
Articles : 3
^^^^^^^^^^^^^^^^ : 1
*Basic : 1
Authentication* : 1
**urllib.request** : 1
(Uniform : 3
Locators) : 1
*urlopen* : 3
openers : 4
"URL : 2
schemes" : 1
(identified : 1
"":"" : 2
""ftp"" : 1
""ftp://python.org/"") : 1
HTTP) : 4
*urllib* : 1
supplementary : 1
urllib.request.urlopen('http://python.org/') : 2
response.read() : 5
tempfile.NamedTemporaryFile(delete=False) : 1
tmp_file: : 1
shutil.copyfileobj(response : 1
tmp_file) : 1
open(tmp_file.name) : 1
html: : 2
'http:' : 2
'ftp:' : 1
'file:' : 1
mirrors : 4
"urlopen" : 5
".read()" : 2
urllib.request.Request('http://www.voidspace.org.uk') : 2
urllib.request.urlopen(req) : 9
the_page : 3
urllib.request.Request('ftp://example.com/') : 1
("metadata") : 1
*about* : 1
(Common : 2
**POST** : 1
POSTs : 2
transmit : 9
'http://www.someserver.com/cgi-bin/register.cgi' : 2
{'name' : 1
'Michael : 2
Foord' : 2
'Northampton' : 3
'language' : 1
urllib.parse.urlencode(values) : 2
data.encode('ascii') : 3
urllib.request.Request(url : 3
Submission : 1
**GET** : 1
GET : 24
"side-effects": : 1
hundredweight : 1
tinned : 1
door) : 1
*never* : 3
data['name'] : 1
'Somebody : 1
Here' : 1
data['location'] : 1
data['language'] : 1
url_values : 2
urllib.parse.urlencode(data) : 1
print(url_values) : 1
name=Somebody+Here&language=Python&location=Northampton : 1
'http://www.example.com/example.cgi' : 1
full_url : 1
'?' : 1
urllib.request.urlopen(full_url) : 1
websites : 1
dislike : 3
browsed : 1
"Python-urllib/x.y" : 1
"Python- : 1
urllib/2.5") : 1
"User-Agent" : 2
user_agent : 1
'Mozilla/5.0 : 1
6.1; : 1
Win64; : 1
x64)' : 1
'location': : 1
'language': : 1
{'User-Agent': : 1
user_agent} : 1
server) : 8
'reason' : 1
urllib.request.Request('http://www.pretend_server.org') : 1
urllib.error.URLError : 2
print(e.reason) : 1
'getaddrinfo : 1
"status : 1
fulfil : 1
"redirection" : 1
'404' : 1
(page : 1
'403' : 1
(request : 2
forbidden) : 1
'401' : 1
(authentication : 2
'code' : 1
(codes : 2
100--299 : 1
400--599 : 1
"http.server.BaseHTTPRequestHandler.responses" : 2
reproduced : 3
messages; : 1
{code: : 1
(shortmessage : 2
longmessage)} : 1
100: : 1
('Continue' : 1
'Request : 9
continue') : 1
101: : 1
('Switching : 1
Protocols' : 1
'Switching : 1
header') : 1
200: : 1
('OK' : 2
fulfilled : 7
follows') : 3
201: : 1
('Created' : 1
'Document : 2
202: : 1
('Accepted' : 1
off-line') : 1
203: : 1
('Non-Authoritative : 1
Information' : 1
cache') : 1
204: : 1
('No : 1
('Reset : 1
'Clear : 2
input.') : 1
206: : 1
('Partial : 1
'Partial : 1
follows.') : 1
300: : 1
('Multiple : 1
Choices' : 1
'Object : 5
list') : 5
('Moved : 1
Permanently' : 1
('Found' : 1
303: : 1
('See : 1
Other' : 1
304: : 1
('Not : 4
Modified' : 1
time') : 1
('Use : 1
Proxy' : 1
'You : 4
'resource.') : 1
('Temporary : 1
Redirect' : 1
('Bad : 2
Request' : 1
'Bad : 1
method') : 1
401: : 1
('Unauthorized' : 1
'No : 5
schemes') : 2
402: : 1
('Payment : 1
Required' : 3
payment : 1
charging : 1
403: : 1
('Forbidden' : 1
help') : 24
Found' : 2
'Nothing : 1
URI') : 1
('Method : 1
Allowed' : 1
'Specified : 1
server.') : 3
406: : 1
Acceptable' : 1
'URI : 3
format.') : 2
407: : 1
('Proxy : 1
authenticate : 10
'this : 2
proceeding.') : 1
408: : 1
('Request : 2
Timeout' : 2
out; : 3
later.') : 1
('Conflict' : 1
conflict.') : 1
410: : 1
('Gone' : 1
removed.') : 1
411: : 1
('Length : 1
'Client : 1
Content-Length.') : 1
('Precondition : 1
Failed' : 2
'Precondition : 1
false.') : 1
413: : 1
Entity : 2
Too : 8
Large' : 1
'Entity : 2
large.') : 1
('Request-URI : 1
Long' : 1
long.') : 1
415: : 1
('Unsupported : 1
Type' : 1
416: : 1
('Requested : 1
Range : 5
Satisfiable' : 1
range.') : 1
417: : 1
('Expectation : 1
'Expect : 1
satisfied.') : 1
500: : 1
('Internal : 1
Error' : 1
'Server : 2
trouble') : 1
501: : 1
Implemented' : 1
operation') : 1
502: : 1
Gateway' : 1
'Invalid : 1
server/proxy.') : 1
503: : 1
('Service : 1
Unavailable' : 1
load') : 1
504: : 1
('Gateway : 1
gateway : 5
505: : 1
('HTTP : 1
Supported' : 1
request.') : 3
urllib.request.Request('http://www.python.org/fish.html') : 1
print(e.code) : 1
print(e.read()) : 1
404 : 8
b'<!DOCTYPE : 2
PUBLIC : 6
"-//W3C//DTD : 6
Transitional//EN" : 4
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n\n\n<html : 2
<title>Page : 1
Found</title>\n : 1
urllib.error : 2
Request(someurl) : 2
urlopen(req) : 2
couldn\'t : 2
print('Error : 5
e.code) : 2
print('Reason: : 2
e.reason) : 2
HTTPError" : 1
URLError" : 1
hasattr(e : 2
'reason'): : 1
'code'): : 1
"info()" : 13
"geturl()" : 1
"urllib.response". : 1
**geturl** : 1
**info** : 1
"http.client.HTTPMessage" : 6
'Content-length' : 1
'Content-type' : 1
confusingly : 3
"urllib.request.OpenerDirector") : 1
"heavy : 1
lifting" : 1
(http : 1
"OpenerDirector" : 18
".add_handler(some_handler_instance)" : 1
"build_opener" : 3
"install_opener" : 2
"opener" : 2
Opener : 1
"HTTPBasicAuthHandler" : 4
'realm' : 1
"WWW- : 1
Authenticate: : 1
SCHEME : 1
realm="REALM"" : 1
WWW-Authenticate: : 1
realm="cPanel : 1
Users" : 1
'basic : 1
authentication' : 1
realms : 1
"HTTPPasswordMgr" : 2
"HTTPPasswordMgrWithDefaultRealm" : 6
"add_password" : 1
"deeper" : 1
.add_password() : 1
password_mgr : 1
urllib.request.HTTPPasswordMgrWithDefaultRealm() : 1
top_level_url : 2
"http://example.com/foo/" : 1
password_mgr.add_password(None : 1
password) : 7
urllib.request.HTTPBasicAuthHandler(password_mgr) : 1
(OpenerDirector : 1
urllib.request.build_opener(handler) : 1
opener.open(a_url) : 1
urllib.request.install_opener(opener) : 4
"ProxyHandler" : 11
"http_proxy" : 3
"UnknownHandler" : 3
"HTTPHandler" : 7
"HTTPDefaultErrorHandler" : 3
"HTTPRedirectHandler" : 2
"FTPHandler" : 3
"HTTPErrorProcessor" : 2
"top_level_url" : 1
*either* : 1
""http://example.com/"" : 1
"authority" : 1
""example.com"" : 4
""example.com:8080"" : 1
authority : 7
"userinfo" : 1
""joe:password@example.com"" : 1
**urllib** : 1
proxy_support : 1
urllib.request.ProxyHandler({}) : 1
urllib.request.build_opener(proxy_support) : 1
"https" : 5
"HTTP_PROXY" : 3
"REQUEST_METHOD" : 4
"getproxies()" : 2
timeout* : 1
socket.setdefaulttimeout(timeout) : 2
sniffing : 1
MSIE : 3
*'Mozilla/4.0 : 1
(compatible; : 1
6.0; : 1
5.1; : 1
SV1; : 1
CLR : 1
1.1.4322)'* : 1
*localhost* : 1
IE : 5
(CONNECT : 1
method): : 1
ASPN : 2
Recipe : 2
*for* : 2
hints" : 1
"un-stringize" : 1
viable : 1
"o.__annotations__" : 2
*specific* : 1
callables--for : 1
"functools.partial()"--may : 1
"getattr(o : 1
'__annotations__' : 2
objects-- : 1
modules--is : 1
"inspect.get_annotations()": : 1
class.* : 1
print(Derived.__annotations__) : 1
("isinstance(o : 1
type)") : 1
isinstance(o : 3
type): : 3
ann : 2
o.__dict__.get('__annotations__' : 1
getattr(o : 1
"ann" : 2
double-check : 1
"stringized" : 1
"o": : 1
"o.__dict__" : 1
"globals" : 9
"sys.modules[o.__module__].__dict__" : 1
"dict(vars(o))" : 1
"locals" : 7
iteratively : 4
"o.__wrapped__" : 1
"o.func" : 1
unwrapped : 2
"o.__globals__" : 1
"typing.TYPE_CHECKING" : 1
fn.__annotations__" : 2
"fn.__annotations__" : 2
"AttributeError"; : 1
lazy- : 1
stringizes : 1
annotations") : 4
*twice.* : 1
foo(a: : 1
"str"): : 1
print(foo.__annotations__) : 1
"{'a': : 1
"'str'"}" : 1
"quirk"; : 1
(IP) : 1
Explaining : 1
"host : 2
addresses" : 1
"ipaddress.ip_address()" : 1
ipaddress.ip_address('192.0.2.1') : 5
IPv4Address('192.0.2.1') : 5
ipaddress.ip_address('2001:DB8::1') : 1
IPv6Address('2001:db8::1') : 3
ipaddress.ip_address(3221225985) : 2
ipaddress.ip_address(42540766411282592856903984951653826561) : 1
ipaddress.ip_address(1) : 1
IPv4Address('0.0.0.1') : 2
ipaddress.IPv4Address(1) : 1
ipaddress.IPv6Address(1) : 1
IPv6Address('::1') : 1
"network : 1
address/network : 1
ipaddress.ip_network('192.0.2.0/24') : 5
IPv4Network('192.0.2.0/24') : 5
ipaddress.ip_network('2001:db8::0/96') : 3
IPv6Network('2001:db8::/96') : 2
"192.0.2.1/24" : 2
ip- : 1
on-a-network : 1
ipaddress.ip_network('192.0.2.1/24') : 1
192.0.2.1/24 : 1
ipaddress.ip_network('192.0.2.1/24' : 1
strict=False) : 3
address: : 5
ipaddress.ip_network(3221225984) : 1
IPv4Network('192.0.2.0/32') : 1
ipaddress.ip_network(42540766411282592856903984951653826560) : 1
IPv6Network('2001:db8::/128') : 1
routers : 1
"192.0.2.1" : 1
"192.0.2.0/24"" : 1
ipaddress.ip_interface('192.0.2.1/24') : 2
IPv4Interface('192.0.2.1/24') : 1
ipaddress.ip_interface('2001:db8::1/96') : 2
IPv6Interface('2001:db8::1/96') : 1
networks) : 1
You've : 3
IPv(4|6)(Address|Network|Interface) : 1
addr4 : 5
ipaddress.ip_address('2001:db8::1') : 1
addr6.version : 1
addr4.version : 1
host4 : 1
host4.network : 1
host6 : 1
host6.network : 1
network: : 3
net4 : 3
net4.num_addresses : 1
net6 : 2
net6.num_addresses : 1
4294967296 : 2
"usable" : 1
net4.hosts(): : 1
192.0.2.1 : 1
192.0.2.2 : 1
192.0.2.3 : 1
192.0.2.4 : 1
192.0.2.252 : 1
192.0.2.253 : 1
192.0.2.254 : 1
netmask : 8
hostmask : 3
netmask): : 1
net4.netmask : 1
IPv4Address('255.255.255.0') : 1
net4.hostmask : 1
IPv4Address('0.0.0.255') : 1
net6.netmask : 1
IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff::') : 1
net6.hostmask : 1
IPv6Address('::ffff:ffff') : 1
Exploding : 1
addr6.exploded : 1
'2001:0db8:0000:0000:0000:0000:0000:0001' : 1
addr6.compressed : 1
'2001:db8::1' : 1
net6.exploded : 1
'2001:0db8:0000:0000:0000:0000:0000:0000/96' : 1
net6.compressed : 1
'2001:db8::/96' : 1
explosion : 2
net4[1] : 1
net4[-1] : 1
IPv4Address('192.0.2.255') : 1
net6[1] : 1
net6[-1] : 1
IPv6Address('2001:db8::ffff:ffff') : 1
Containment : 2
prefix: : 2
ipaddress.ip_network('192.0.3.0/24') : 1
ipaddress.ip_address('192.0.2.2') : 1
accept: : 2
str(addr4) : 1
'192.0.2.1' : 1
int(addr4) : 1
3221225985 : 1
address/network/interface : 1
version- : 1
agnostic : 2
"ipaddress.AddressValueError" : 1
"ipaddress.NetmaskValueError" : 1
ipaddress.ip_address("192.168.0.256") : 1
'192.168.0.256' : 2
ipaddress.IPv4Address("192.168.0.256") : 1
ipaddress.AddressValueError: : 2
Octet : 1
(> : 1
ipaddress.ip_network("192.168.0.1/64") : 1
'192.168.0.1/64' : 1
ipaddress.IPv4Network("192.168.0.1/64") : 1
ipaddress.NetmaskValueError: : 1
'64' : 1
ipaddress.IPv4Network(address) : 1
print('address/netmask : 1
IPv4:' : 1
Tshepang : 1
Lekhonkhobe : 1
**ls** : 2
ls : 9
prog.py : 85
pypy : 3
rm-unused-function.patch : 2
ctypes_configure : 1
dotviewer : 1
lib_pypy : 1
lib-python : 1
drwxr-xr-x : 4
wena : 10
18:51 : 1
12:04 : 1
-rwxr-xr-x : 3
535 : 1
00:05 : 1
00:59 : 1
741 : 1
01:01 : 1
[OPTION].. : 1
[FILE].. : 1
FILEs : 1
-cftuvSUX : 1
--sort : 1
"pypy" : 1
**cp** : 1
"cp : 1
SRC : 1
DEST" : 1
*what : 1
copied,* : 1
*where : 1
to* : 2
nothing: : 2
argparse.ArgumentParser() : 64
--verbose : 15
prog.py: : 14
happening: : 4
parser.add_argument("echo") : 1
print(args.echo) : 2
required: : 7
"add_argument()" : 21
'magic' : 2
parser.add_argument("echo" : 1
help="echo : 1
parser.add_argument("square" : 8
help="display : 8
number") : 7
print(args.square**2) : 3
"prog.py" : 3
pow(): : 1
type=int) : 10
square: : 1
'four' : 1
helpfully : 1
playing : 11
ones: : 1
parser.add_argument("--verbosity" : 1
help="increase : 9
verbosity") : 7
args.verbosity: : 1
print("verbosity : 3
on") : 3
--verbosity : 8
[--verbosity : 2
VERBOSITY] : 3
VERBOSITY : 1
--verbosity: : 1
"--verbosity" : 11
"args.verbosity" : 1
parser.add_argument("--verbose" : 1
verbosity" : 2
action="store_true") : 6
args.verbose: : 5
[--verbose] : 2
""store_true"" : 5
"args.verbose" : 1
parser.add_argument("-v" : 9
goes: : 1
complexity: : 1
action="store_true" : 16
args.square**2 : 6
print(f"the : 6
{args.square} : 6
{answer}") : 17
print(answer) : 10
ours : 1
args.verbosity : 15
print(f"{args.square}^2 : 5
[-v : 6
-v/--verbosity: : 2
4^2 : 6
choices=[0 : 1
{0,1,2}] : 2
choice: : 3
(choose : 3
{0,1,2} : 2
(check : 1
--help"): : 1
action="count" : 6
-vv : 2
-vvv : 2
"action="store_true"") : 1
fix: : 1
bugfix: : 1
gives: : 2
-vvvv : 1
(hence : 5
And: : 2
scratched : 1
surface : 1
squares: : 1
parser.add_argument("x" : 4
help="the : 8
base") : 4
parser.add_argument("y" : 4
exponent") : 4
args.x**args.y : 4
print(f"{args.x} : 3
{args.y} : 3
print(f"{args.x}^{args.y} : 4
Output: : 6
*change* : 1
*more* : 1
print(f"Running : 1
'{__file__}'") : 1
'prog.py' : 1
verbose" : 1
parser.add_mutually_exclusive_group() : 3
group.add_argument("-v" : 2
group.add_argument("-q" : 2
args.quiet: : 2
Anyways : 1
-vq : 1
-q] : 3
-q/--quiet: : 2
-v/--verbose : 2
--quiet : 9
conclude : 2
know: : 1
argparse.ArgumentParser(description="calculate : 1
"[-v : 1
-q]" : 1
overwhelmed : 1
type-safety : 1
week: : 1
Weekday(Enum): : 3
MONDAY : 5
TUESDAY : 6
WEDNESDAY : 5
THURSDAY : 5
FRIDAY : 5
SATURDAY : 6
SUNDAY : 6
MembersBecause : 1
Weekday(3) : 1
<Weekday.WEDNESDAY: : 2
3> : 12
print(Weekday.THURSDAY) : 1
Weekday.THURSDAY : 2
type(Weekday.MONDAY) : 1
'Weekday'> : 1
isinstance(Weekday.FRIDAY : 1
Weekday) : 1
"name": : 2
print(Weekday.TUESDAY.name) : 1
"value": : 2
Weekday.WEDNESDAY.value : 1
name/value : 3
weekday: : 1
"weekday()" : 3
"isoweekday()" : 3
0-6 : 1
1-7 : 1
"Weekday" : 4
from_date(cls : 2
date): : 2
cls(date.isoweekday()) : 2
Observe: : 1
Weekday.from_date(date.today()) : 1
<Weekday.TUESDAY: : 2
plot : 1
chores : 3
Weekday(Flag): : 2
selection: : 2
first_week_day : 2
Weekday.MONDAY : 2
<Weekday.MONDAY: : 1
weekend : 2
Weekday.SATURDAY : 3
Weekday.SUNDAY : 2
<Weekday.SATURDAY|SUNDAY: : 1
96> : 1
weekend: : 1
print(day) : 1
Okay : 1
chores_for_ethan : 1
'feed : 1
cat': : 1
Weekday.WEDNESDAY : 1
Weekday.FRIDAY : 1
'do : 2
dishes': : 1
Weekday.TUESDAY : 1
'answer : 1
questions': : 1
day: : 2
show_chores(chores : 1
chores.items(): : 1
days: : 1
print(chore) : 1
show_chores(chores_for_ethan : 1
Weekday.SATURDAY) : 1
"auto()" : 2
WEEKEND : 1
"Color.RED" : 3
program-writing : 1
Color(1) : 1
<Color.RED: : 3
Color(3) : 2
<Color.BLUE: : 8
Color['RED'] : 1
Color['GREEN'] : 1
<Color.GREEN: : 12
Color.RED : 19
member.name : 2
'RED' : 2
member.value : 2
Shape(Enum): : 2
SQUARE : 6
'SQUARE' : 1
By-value : 1
By-name : 2
DIAMOND : 1
CIRCLE : 4
ALIAS_FOR_SQUARE : 1
Shape.SQUARE : 1
<Shape.SQUARE: : 5
Shape.ALIAS_FOR_SQUARE : 1
Shape(2) : 1
"unique()" : 3
@unique : 2
Mistake(Enum): : 2
ONE : 5
THREE : 5
FOUR : 4
'Mistake'>: : 2
unimportant : 2
[member.value : 2
Color] : 1
"_generate_next_value_()" : 3
overridden: : 4
AutoName(Enum): : 1
_generate_next_value_(name : 3
last_values): : 2
Ordinal(AutoName): : 1
NORTH : 1
SOUTH : 1
EAST : 1
WEST : 1
Ordinal] : 1
['NORTH' : 1
'SOUTH' : 1
'EAST' : 1
'WEST'] : 1
aliases: : 6
list(Shape) : 1
[<Shape.SQUARE: : 1
<Shape.DIAMOND: : 2
<Shape.CIRCLE: : 2
list(Weekday) : 1
[<Weekday.MONDAY: : 1
4> : 4
<Weekday.THURSDAY: : 1
8> : 1
<Weekday.FRIDAY: : 1
16> : 1
<Weekday.SATURDAY: : 1
32> : 1
<Weekday.SUNDAY: : 1
64>] : 1
"Shape.ALIAS_FOR_SQUARE" : 1
"Weekday.WEEKEND" : 1
Shape.__members__.items(): : 1
('SQUARE' : 1
2>) : 2
('DIAMOND' : 1
1>) : 1
('CIRCLE' : 1
3>) : 1
('ALIAS_FOR_SQUARE' : 1
[name : 2
Shape.__members__.items() : 1
['ALIAS_FOR_SQUARE'] : 1
Enumeration : 1
Color.BLUE : 13
'Color' : 2
though: : 2
non-enumeration : 1
(again : 3
identical/equal : 1
enumeration: : 4
Mood(Enum): : 1
FUNKY : 1
HAPPY : 2
describe(self): : 1
__str__(self): : 12
'my : 5
{0}'.format(self.value) : 1
favorite_mood(cls): : 1
cls.HAPPY : 1
Then: : 1
Mood.favorite_mood() : 1
<Mood.HAPPY: : 1
Mood.HAPPY.describe() : 1
('HAPPY' : 1
str(Mood.FUNKY) : 1
("__str__()" : 1
"object"-based : 1
EnumName([mix-in : 1
...,] : 1
[data-type,] : 1
base-enum): : 1
forbidden: : 1
MoreColor(Color): : 1
PINK : 1
'MoreColor'> : 1
'Color'> : 1
Foo(Enum): : 1
some_behavior(self): : 1
Bar(Foo): : 1
SAD : 1
example.) : 5
unpickled: : 1
test.test_enum : 1
Fruit : 1
Fruit.TOMATO : 1
loads(dumps(Fruit.TOMATO)) : 1
pickled/unpickled : 1
"__reduce_ex__()" : 3
Enum('Animal' : 3
'ANT : 3
BEE : 4
CAT : 4
DOG') : 1
'Animal'> : 1
Animal.ANT : 1
<Animal.ANT: : 1
list(Animal) : 1
[<Animal.ANT: : 1
<Animal.BEE: : 1
<Animal.CAT: : 1
<Animal.DOG: : 1
4>] : 4
enumerations; : 1
auto-assign : 1
"Animal" : 1
Animal(Enum): : 1
ANT : 1
DOG : 1
Jython) : 1
DOG' : 2
module=__name__) : 1
unpicklable; : 1
SomeData : 1
qualname='SomeData.Animal') : 1
Enum( : 1
value='NewEnumName' : 1
names=<...> : 1
module='...' : 1
qualname='...' : 1
type=<mixed-in : 1
class> : 1
start=1 : 2
whitespace- : 1
(values : 1
specified): : 2
'RED : 3
BLUE' : 4
'RED,GREEN,BLUE' : 1
['RED' : 4
'GREEN' : 5
'BLUE'] : 2
[('CYAN' : 1
('MAGENTA' : 1
('YELLOW' : 1
{'CHARTREUSE': : 1
'SEA_GREEN': : 1
'ROSEMARY': : 1
qualname: : 2
start: : 3
Shape(IntEnum): : 2
Request(IntEnum): : 1
Shape.CIRCLE : 3
Request.POST : 1
enumerations: : 1
expect: : 2
int(Shape.CIRCLE) : 1
'c'][Shape.CIRCLE] : 1
range(Shape.SQUARE)] : 1
(& : 2
~) : 2
bit-wise : 1
membership.Bit-wise : 1
Sample : 6
Perm(IntFlag): : 2
Perm.R : 5
Perm.W : 3
<Perm.R|W: : 1
6> : 3
RW : 2
RWX : 1
Perm.RWX : 1
<Perm.RWX: : 2
7> : 6
~Perm.RWX : 1
<Perm: : 2
0> : 10
Perm(7) : 1
Perm.X : 3
bool(Perm.R : 1
Perm.X) : 1
membership: : 1
<Perm.R|X: : 1
5> : 3
(~Perm.X).value : 1
(Perm.R|Perm.W).value : 1
over: : 2
list(RW) : 1
[<Perm.R: : 1
<Perm.W: : 1
2>] : 2
Color(Flag): : 6
Color.GREEN : 14
<Color: : 6
bool(Color.RED : 1
Color.GREEN) : 1
WHITE : 4
Color.WHITE : 3
<Color.WHITE: : 2
Giving : 1
"no : 3
set" : 4
BLACK : 4
Color.BLACK : 2
<Color.BLACK: : 2
bool(Color.BLACK) : 1
list(purple) : 2
[<Color.RED: : 6
promises : 1
transitivity : 1
enumerations) : 1
do; : 1
independently: : 2
IntEnum(int : 1
Enum): : 4
"FloatEnum" : 1
Mix-in : 1
mix-ins : 1
same* : 1
%-style : 4
respectively; : 1
"%h" : 1
IntEnum) : 1
enum's : 2
drop- : 1
Coordinate(bytes : 1
Coordinate : 1
unit): : 1
bytes.__new__(cls : 1
[value]) : 1
obj._value_ : 3
obj.label : 1
obj.unit : 1
PX : 1
'P.X' : 1
'km') : 2
PY : 1
'P.Y' : 1
VX : 1
'V.X' : 1
'km/s') : 2
VY : 1
'V.Y' : 1
print(Coordinate['PY']) : 1
Coordinate.PY : 1
print(Coordinate(3)) : 1
Coordinate.VY : 1
"member_name":"member" : 2
members; : 4
"_value_" : 4
"_name_" : 2
"_order_" : 6
"_generate_next_value_" : 6
one.For : 2
power-of-two : 8
_order_: : 1
'BLUE' : 2
'GREEN'] : 1
"EnumClass.member" : 1
MyEnum(IntEnum): : 1
help(int) : 1
int(x : 2
base=10) : 2
'11' : 2
x='11' : 1
base=16 : 1
MyEnum.example.value : 1
hex(11) : 1
is.. : 1
non-"Enum" : 1
rules; : 2
__bool__(self): : 2
bool(self.value) : 1
Plain : 1
dir(Planet) : 1
['EARTH' : 1
'JUPITER' : 1
'MARS' : 1
'MERCURY' : 1
'NEPTUNE' : 1
'SATURN' : 1
'URANUS' : 1
'VENUS' : 1
'__members__' : 3
'__module__'] : 1
dir(Planet.EARTH) : 1
['__class__' : 2
'mass' : 1
'radius' : 1
'surface_gravity' : 1
'value'] : 2
MAGENTA : 1
YELLOW : 1
CYAN : 1
<Color.YELLOW: : 1
Color(7) : 2
<Color.RED|GREEN|BLUE: : 2
Color(IntFlag): : 2
PURPLE : 1
single-bit : 1
multi-bit : 2
zero-bit : 1
iteration: : 2
list(Color.WHITE) : 1
negating : 1
flag/flag : 1
~Color.BLUE : 1
<Color.RED|GREEN: : 3
pseudo-flags : 1
(Color.RED : 1
Color.GREEN).name : 1
'RED|GREEN' : 1
aka : 2
<Color.PURPLE: : 1
Color(-1) : 1
Color(0) : 4
checking: : 1
zero-valued : 3
contained: : 1
Color.PURPLE : 2
handled: : 1
"STRICT" : 3
"CONFORM" : 2
"EJECT" : 3
"KEEP": : 1
EJECT : 3
KEEP : 3
str() : 4
"_convert_" : 1
"KEEP" : 3
"ssl.Options" : 1
(members) : 2
"list(Color)" : 1
"some_enum_var : 1
Color" : 1
"__repr__()") : 1
aliasing: : 1
"3") : 2
"BLACK" : 1
"PURPLE" : 1
"WHITE" : 1
up.) : 1
Inverting : 1
~Color.RED : 2
<Color.GREEN|BLUE: : 2
len(Color.PURPLE) : 1
reorder : 2
renumber : 1
<object : 1
0x...>> : 1
"__repr__()": : 1
"<%s.%s>" : 1
(self.__class__.__name__ : 1
self._name_) : 1
<Color.GREEN> : 1
'stop' : 1
'go' : 1
'too : 1
fast!' : 1
'go'> : 1
AutoNumber(Enum): : 2
__new__(cls): : 1
len(cls.__members__) : 2
object.__new__(cls) : 2
Color(AutoNumber): : 1
"AutoNumber" : 2
Swatch(AutoNumber): : 1
pantone='unknown'): : 1
self.pantone : 1
pantone : 1
AUBURN : 1
'3497' : 1
SEA_GREEN : 1
'1246' : 2
BLEACHED_CORAL : 1
Pantone : 1
Swatch.SEA_GREEN : 1
<Swatch.SEA_GREEN: : 1
Swatch.SEA_GREEN.pantone : 1
Swatch.BLEACHED_CORAL.pantone : 1
enumerations): : 1
OrderedEnum(Enum): : 1
__ge__(self : 1
self.__class__ : 5
other.__class__: : 4
other.value : 4
__gt__(self : 1
__le__(self : 1
Grade(OrderedEnum): : 1
Grade.C : 1
Grade.A : 1
alias: : 2
DuplicateFreeEnum(Enum): : 1
any(self.value : 1
e.value : 1
cls): : 1
cls(self.value).name : 1
"aliases : 1
DuplicateFreeEnum: : 2
e)) : 2
Color(DuplicateFreeEnum): : 1
GRENE : 1
'GRENE' : 1
Planet(Enum): : 1
MERCURY : 1
(3.303e+23 : 1
2.4397e6) : 1
VENUS : 1
(4.869e+24 : 1
6.0518e6) : 1
EARTH : 1
(5.976e+24 : 2
6.37814e6) : 1
MARS : 1
(6.421e+23 : 1
3.3972e6) : 1
JUPITER : 1
(1.9e+27 : 1
7.1492e7) : 1
SATURN : 1
(5.688e+26 : 1
6.0268e7) : 1
URANUS : 1
(8.686e+25 : 1
2.5559e7) : 1
NEPTUNE : 1
(1.024e+26 : 1
2.4746e7) : 1
radius): : 1
self.mass : 2
kilograms : 1
self.radius : 1
radius : 3
meters : 1
surface_gravity(self): : 1
gravitational : 2
(m3 : 1
kg-1 : 1
s-2) : 1
6.67300E-11 : 1
(self.radius : 1
self.radius) : 1
Planet.EARTH.value : 1
6378140.0) : 1
Planet.EARTH.surface_gravity : 1
9.802652743337129 : 1
Period(timedelta : 1
"different : 1
time" : 2
_ignore_ : 2
'Period : 1
i' : 1
Period : 1
vars() : 2
range(367): : 1
Period['day_%d' : 1
list(Period)[:2] : 1
[<Period.day_0: : 1
datetime.timedelta(0)> : 1
<Period.day_1: : 1
datetime.timedelta(days=1)>] : 1
list(Period)[-2:] : 1
[<Period.day_365: : 1
datetime.timedelta(days=365)> : 1
<Period.day_366: : 1
datetime.timedelta(days=366)>] : 1
Modelled : 1
Project's : 1
foster : 1
<vinay_sajip : 2
red-dove : 2
software's : 2
event) : 3
ascribes : 1
event; : 1
*severity* : 1
+---------------------------------------+----------------------------------------+ : 6
|=======================================|========================================| : 1
"logging.info()" : 1
"logging.debug()" : 1
purposes) : 1
investigation) : 1
avoidable : 1
"logging.warning()" : 1
"logging.error()" : 1
"logging.exception()" : 1
"logging.critical()" : 1
severity : 25
applicability : 1
severity): : 1
+----------------+-----------------------------------------------+ : 18
|================|===============================================| : 2
diagnosing : 1
Confirmation : 2
indicative : 1
'disk : 1
low') : 1
logging.warning('Watch : 2
out!') : 3
logging.info('I : 1
so') : 1
WARNING:root:Watch : 2
'Watch : 1
out!' : 1
now: : 3
flexibly : 2
above: : 5
logging.basicConfig(filename='example.log' : 2
encoding='utf-8' : 13
level=logging.DEBUG) : 3
logging.debug('This : 2
logging.info('So : 2
this') : 2
logging.warning('And : 2
too') : 2
logging.error('And : 1
Øresund : 2
Malmö') : 1
messages: : 8
DEBUG:root:This : 1
INFO:root:So : 1
WARNING:root:And : 1
ERROR:root:And : 1
Malmö : 1
--log=INFO : 1
"--log" : 1
*loglevel* : 1
getattr(logging : 4
loglevel.upper()) : 1
loglevel : 1
--log=DEBUG : 1
--log=debug : 1
numeric_level : 1
loglevel.upper() : 1
isinstance(numeric_level : 1
ValueError('Invalid : 1
loglevel) : 1
logging.basicConfig(level=numeric_level : 1
one-off : 1
anything: : 2
*example.log* : 1
afresh : 3
filemode='w' : 1
myapp.py : 1
mylib : 1
logging.basicConfig(filename='myapp.log' : 1
level=logging.INFO) : 1
logging.info('Started') : 1
mylib.do_something() : 1
logging.info('Finished') : 1
mylib.py : 1
do_something(): : 1
logging.info('Doing : 1
something') : 3
*myapp.py* : 1
*myapp.log*: : 1
INFO:root:Started : 1
INFO:root:Doing : 1
INFO:root:Finished : 1
generalize : 2
*mylib.py* : 1
logging.warning('%s : 1
'Look' : 1
'leap!') : 1
display: : 3
WARNING:root:Look : 1
pre-dates : 1
tutorial: : 1
logging.basicConfig(format='%(levelname)s:%(message)s' : 1
console') : 1
DEBUG:This : 1
INFO:So : 1
WARNING:And : 1
*levelname* : 1
(severity) : 1
(event : 2
'%(asctime)s' : 1
logging.basicConfig(format='%(asctime)s : 2
%(message)s') : 13
logging.warning('is : 2
logged.') : 2
2010-12-12 : 1
11:41:42,612 : 1
(shown : 1
ISO8601 : 2
3339** : 1
*datefmt* : 5
"basicConfig" : 1
%(message)s' : 20
datefmt='%m/%d/%Y : 1
%I:%M:%S : 1
%p') : 1
12/12/2010 : 1
11:46:36 : 1
AM : 4
concludes : 1
invest : 1
favourite : 1
beverage : 1
https://groups.google.com/forum/#!forum/comp.lang.python) : 1
advanced/in-depth : 1
loggers) : 3
(hereafter : 1
*loggers*) : 1
(periods) : 1
'scan' : 1
'scan.text' : 1
'scan.html' : 1
'scan.pdf' : 1
originates : 1
logger's : 16
GET/POST : 1
Destinations : 1
*handler* : 12
("sys.stderr") : 2
severity:logger : 1
name:message : 1
diagram : 3
threefold : 1
facility) : 1
"Logger.setLevel()" : 1
lowest-severity : 1
WARNING : 23
"Logger.addHandler()" : 1
"Logger.removeHandler()" : 1
"Logger.addFilter()" : 1
"Logger.removeFilter()" : 1
"Logger.debug()" : 1
"Logger.info()" : 1
"Logger.warning()" : 1
"Logger.error()" : 2
"Logger.critical()" : 1
"Logger.exception()" : 2
"Logger.log()" : 1
"getLogger()" : 3
period-separated : 2
"foo.bam" : 2
*effective : 1
level* : 1
("WARNING" : 1
*propagate* : 3
"False".) : 2
messages' : 1
severity) : 1
handler's : 17
"addHandler()" : 3
Handlers); : 1
handlers) : 3
"setFormatter()" : 2
"addFilter()" : 2
"removeFilter()" : 1
deconfigure : 1
"logging.Handler" : 1
logging.Formatter.__init__(fmt=None : 1
datefmt=None : 2
style='%') : 1
%Y-%m-%d : 1
%H:%M:%S : 4
tacked : 1
"style" : 7
"'%'" : 20
"'$'" : 10
"%(<dictionary : 1
key>)s" : 1
substitution; : 1
"string.Template.substitute()" : 1
human- : 1
'%(asctime)s : 13
%(levelname)s : 9
user-configurable : 2
GMT : 7
"time.gmtime" : 1
logging.getLogger('simple_example') : 2
logger.setLevel(logging.DEBUG) : 5
logging.StreamHandler() : 8
ch.setLevel(logging.DEBUG) : 1
logging.Formatter('%(asctime)s : 5
%(name)s : 9
ch.setFormatter(formatter) : 3
logger.addHandler(ch) : 3
'application' : 4
logger.debug('debug : 4
logger.info('info : 4
logger.warning('warn : 4
logger.error('error : 4
logger.critical('critical : 4
simple_logging_module.py : 1
2005-03-19 : 10
15:10:26,618 : 1
simple_example : 5
15:10:26,620 : 1
15:10:26,695 : 1
15:10:26,697 : 1
15:10:26,773 : 1
logging.config.fileConfig('logging.conf') : 2
logging.getLogger('simpleExample') : 2
logging.conf : 1
[loggers] : 2
keys=root,simpleExample : 1
[handlers] : 2
keys=consoleHandler : 1
[formatters] : 2
keys=simpleFormatter : 1
[logger_root] : 2
level=DEBUG : 5
handlers=consoleHandler : 2
[logger_simpleExample] : 1
qualname=simpleExample : 1
propagate=0 : 1
[handler_consoleHandler] : 1
class=StreamHandler : 2
formatter=simpleFormatter : 1
args=(sys.stdout,) : 2
[formatter_simpleFormatter] : 1
format=%(asctime)s : 1
%(message)s : 2
non-config-file-based : 1
simple_logging_config.py : 1
15:38:55,977 : 1
simpleExample : 5
15:38:55,979 : 1
15:38:56,054 : 1
15:38:56,055 : 1
15:38:56,130 : 1
noncoders : 1
"disable_existing_loggers" : 3
ancestor) : 1
wish.The : 1
logger-disabling : 1
(relative : 4
"mypackage.mymodule.MyHandler" : 1
"mypackage" : 2
"mymodule" : 3
config-file-based : 1
deployments : 1
formatters: : 3
console: : 2
logging.StreamHandler : 2
formatter: : 5
stream: : 2
ext://sys.stdout : 2
loggers: : 2
simpleExample: : 1
[console] : 2
propagate: : 1
*logging.raiseExceptions* : 2
(production : 1
(development : 1
X.Y.Z' : 1
'handler : 1
resort' : 1
(therefore : 3
severities : 3
pre-3.2 : 1
3.1) : 1
(*if* : 1
'foo.x' : 1
'foo.x.y' : 1
logging.getLogger('foo').addHandler(logging.NullHandler()) : 1
'orgname.foo' : 1
*do : 3
logger* : 2
identifiable : 1
than* : 1
loggers* : 1
prerogative : 1
'under : 1
hood' : 1
+----------------+-----------------+ : 14
|================|=================| : 2
"NOTSET" : 10
subjected : 1
*handlers* : 5
"LogRecord") : 1
locations) : 1
staff : 1
"Logger") : 1
*all : 1
stops) : 1
convinced : 1
exercised : 1
library* : 1
(file-like : 1
rotate : 7
"SMTPHandler" : 3
"NTEventLogHandler" : 3
NT/2000/XP : 1
"MemoryHandler" : 7
criteria : 10
"POST" : 16
XXX' : 1
functionality.) : 1
Logged : 1
"BufferingFormatter" : 1
batch) : 1
trailer : 10
"handleError()" : 4
"raiseExceptions" : 5
logger.isEnabledFor(logging.DEBUG): : 1
logger.debug('Message : 2
expensive_func1() : 1
expensive_func2()) : 1
"expensive_func1()" : 1
"expensive_func2()" : 1
tight : 2
common) : 1
need: : 1
+-------------------------------------------------------+-----------------------------------------------------+ : 5
|=======================================================|=====================================================| : 1
"logging._srcfile" : 1
"sys._getframe()") : 1
"logging.logThreads" : 1
("os.getpid()") : 1
"logging.logProcesses" : 1
"logging.logMultiprocessing" : 1
*********************************************** : 10
domain-specific : 1
which: : 1
"probes" : 1
via: : 1
yum : 1
systemtap-sdt-devel : 1
or: : 11
sudo : 4
apt-get : 1
systemtap-sdt-dev : 1
option": : 1
--with-dtrace.. : 1
provider: : 1
python3.6 : 10
python$ : 1
PROVIDER : 1
MODULE : 1
29564 : 1
python18035 : 8
function-entry : 2
29565 : 1
dtrace_function_entry : 1
29566 : 1
function-return : 2
29567 : 1
dtrace_function_return : 1
29568 : 1
gc-done : 1
29569 : 1
gc-start : 1
29570 : 1
29571 : 1
maybe_dtrace_line : 1
".note.stapsdt" : 1
readelf : 4
.note.stapsdt : 4
[30] : 1
NOTE : 2
0000000000000000 : 2
00308d78 : 1
libpython3.3dm.so.1.0 : 1
[29] : 1
00365b68 : 1
Sufficiently : 1
metadata: : 4
-n : 14
0x00000254 : 1
0x00000020: : 1
0x00000010 : 1
NT_GNU_ABI_TAG : 1
(ABI : 1
tag) : 7
OS: : 1
2.6.32 : 1
0x00000274 : 1
0x00000024: : 1
0x00000014 : 1
NT_GNU_BUILD_ID : 1
(unique : 2
bitstring) : 1
df924a2b08a7e89f6e11251d4602022977af2670 : 1
0x002d6c30 : 1
0x00000144: : 1
stapsdt : 4
0x00000031 : 1
NT_STAPSDT : 4
(SystemTap : 4
Provider: : 4
gc__start : 1
0x00000000004371c3 : 1
0x0000000000630ce2 : 4
Semaphore: : 4
0x00000000008d6bf6 : 1
-4@%ebx : 1
0x00000030 : 1
gc__done : 1
0x00000000004374e1 : 1
0x00000000008d6bf8 : 1
-8@%rax : 1
0x00000045 : 1
function__entry : 2
0x000000000053db6c : 1
0x00000000008d6be8 : 1
8@%rbp : 2
8@%r12 : 2
-4@%eax : 2
0x00000046 : 1
function__return : 2
0x000000000053dba8 : 1
0x00000000008d6bea : 1
strategically : 1
listed: : 4
indent; : 1
python$target:::function-entry : 2
/copyinstr(arg1) : 2
"start"/ : 2
self->trace : 2
/self->trace/ : 2
printf("%d\t%*s:" : 2
probename); : 2
printf("%*s" : 2
self->indent : 2
printf("%s:%s:%d\n" : 2
basename(copyinstr(arg0)) : 2
copyinstr(arg1) : 2
arg2); : 2
self->indent++; : 1
python$target:::function-return : 2
self->indent--; : 1
call_stack.d : 1
156641360502280 : 1
function-entry:call_stack.py:start:23 : 1
156641360518804 : 1
function-entry: : 8
call_stack.py:function_1:1 : 2
156641360532797 : 1
call_stack.py:function_3:9 : 3
156641360546807 : 1
function-return: : 8
call_stack.py:function_3:10 : 3
156641360563367 : 1
call_stack.py:function_1:2 : 2
156641360578365 : 1
call_stack.py:function_2:5 : 1
156641360591757 : 1
156641360605556 : 1
156641360617482 : 1
156641360629814 : 1
156641360642285 : 1
call_stack.py:function_2:6 : 1
156641360656770 : 1
156641360669707 : 1
156641360687853 : 1
call_stack.py:function_4:13 : 1
156641360700719 : 1
call_stack.py:function_4:14 : 1
156641360719640 : 1
call_stack.py:function_5:18 : 1
156641360732567 : 1
call_stack.py:function_5:21 : 1
156641360747370 : 1
function-return:call_stack.py:start:28 : 1
process("python").mark("function__entry") : 3
user_string($arg1); : 4
user_string($arg2); : 4
$arg3; : 4
printf("%s : 4
%s:%d\\n" : 2
thread_indent(1) : 2
lineno); : 4
process("python").mark("function__return") : 2
thread_indent(-1) : 2
stap : 1
show-call-hierarchy.stp : 1
test.py" : 1
11408 : 1
python(8274): : 6
Lib/_abcoll.py:362 : 1
11414 : 1
Lib/os.py:425 : 1
11418 : 1
Lib/os.py:490 : 1
11424 : 1
Lib/os.py:493 : 1
11428 : 1
Lib/os.py:426 : 1
11433 : 1
Lib/_abcoll.py:366 : 1
PID : 13
probe's : 1
process("python").library("libpython3.6dm.so.1.0").mark("function__entry") : 1
function__entry(str : 1
(bytecode) : 4
"$arg1" : 2
"$arg2" : 2
"$arg3": : 1
"(const : 2
*)" : 3
"user_string($arg1)" : 1
"user_string($arg2)" : 1
"$arg3" : 1
function__return(str : 1
"function__entry()" : 3
line(str : 1
gc__start(int : 1
generation) : 1
Fires : 5
"arg0" : 5
gc__done(long : 1
import__find__load__start(str : 1
modulename) : 1
import__find__load__done(str : 1
"importlib"'s : 1
find_and_load : 1
"arg1" : 2
audit(str : 1
*tuple) : 1
"tapset": : 1
SystemTap's : 2
tapset : 4
non-shared : 1
CPython: : 2
markers: : 2
\*/ : 2
python.function.entry : 3
frameptr : 2
$arg4 : 2
python.function.return : 2
"/usr/share/systemtap/tapset") : 1
probepoints : 1
python.function.entry(str : 1
frameptr) : 2
python.function.return(str : 1
"python.function.return" : 1
pure- : 1
function-call : 2
%s:%d\n" : 2
top-like : 1
fn_calls; : 2
fn_calls[pid() : 1
lineno] : 2
timer.ms(1000) : 1
printf("\033[2J\033[1;1H") : 1
printf("%6s : 1
%80s : 2
%6s : 1
%30s : 2
%6s\n" : 1
"PID" : 1
"FILENAME" : 1
"FUNCTION" : 1
"CALLS") : 1
foreach : 1
([pid : 1
fn_calls- : 1
printf("%6d : 1
%6d : 1
%6d\n" : 1
fn_calls[pid : 1
lineno]); : 1
Coghlan's : 1
Q : 11
Cannon's : 1
python-porting : 1
single-source : 2
(coverage.py : 1
coverage") : 1
Futurize : 5
Modernize) : 2
future") : 1
regress : 2
pylint") : 1
caniusepython3 : 2
caniusepython3") : 1
(tox : 1
tox") : 1
mypy") : 1
**today** : 1
modernize : 1
**now** : 1
modernizing : 1
**much** : 2
six") : 1
**you** : 1
Pylint) : 1
trove : 1
classifier : 1
"Programming : 4
Only" : 1
major/minor : 2
2.7" : 1
90% : 4
coverage) : 1
coverage.py : 1
New" : 3
online) : 1
cheat : 2
sheet : 4
Python-Future : 1
accustomed : 2
(not) : 1
watched : 3
"2"; : 1
"-Q" : 1
"__truediv__" : 2
confluence : 1
brittle : 1
predates : 3
internet) : 1
pose : 1
**highly** : 1
working; : 1
realizing : 2
"str"/"bytes" : 1
**unique** : 1
+--------------------------+-----------------------+ : 7
**Text : 1
data** : 2
**Binary : 2
isdecimal : 1
isnumeric : 1
(there : 5
dichotomy : 1
bothered : 1
reading) : 1
incompatible; : 1
written) : 3
"io.open()") : 1
"bytes(3) : 2
'3'" : 1
b'\x00\x00\x00'" : 1
back: : 1
"str(b'3') : 2
b'3'" : 1
"b'3'"" : 1
(slicing : 1
"b'123'[1] : 2
b'2'" : 1
50" : 1
str" : 3
one-item : 1
"six.indexbytes()" : 1
"six.indexbytes(b'123' : 1
summarize: : 1
Decide : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
Inevitably : 1
importlib2 : 4
sys.version_info[0] : 2
future- : 1
absolute_import : 2
"--py3k" : 1
lint : 1
deviate : 2
Pylint's : 1
**After** : 1
https://caniusepython3.com : 1
tox : 2
type-differing : 1
text/binary : 1
"logging.getLogger('someLogger')" : 1
configure) : 1
auxiliary_module : 1
'spam_application' : 1
logging.getLogger('spam_application') : 1
fh : 3
logging.FileHandler('spam.log') : 2
fh.setLevel(logging.DEBUG) : 2
ch.setLevel(logging.ERROR) : 2
fh.setFormatter(formatter) : 2
logger.addHandler(fh) : 2
logger.info('creating : 1
auxiliary_module.Auxiliary') : 2
auxiliary_module.Auxiliary() : 1
logger.info('created : 1
logger.info('calling : 2
auxiliary_module.Auxiliary.do_something') : 2
a.do_something() : 1
logger.info('finished : 1
auxiliary_module.some_function()') : 2
auxiliary_module.some_function() : 3
logger.info('done : 1
module_logger : 1
logging.getLogger('spam_application.auxiliary') : 1
Auxiliary: : 1
self.logger : 4
logging.getLogger('spam_application.auxiliary.Auxiliary') : 1
self.logger.info('creating : 1
Auxiliary') : 1
do_something(self): : 1
self.logger.info('doing : 1
self.logger.info('done : 1
some_function(): : 2
module_logger.info('received : 1
"some_function"') : 1
2005-03-23 : 10
23:47:11,663 : 1
spam_application : 6
auxiliary_module.Auxiliary : 2
23:47:11,665 : 2
spam_application.auxiliary.Auxiliary : 3
Auxiliary : 1
23:47:11,668 : 2
auxiliary_module.Auxiliary.do_something : 2
23:47:11,669 : 1
23:47:11,670 : 1
23:47:11,671 : 1
23:47:11,672 : 1
spam_application.auxiliary : 1
'some_function' : 1
23:47:11,673 : 1
(initial) : 1
worker(arg): : 1
arg['stop']: : 1
logging.debug('Hi : 1
myfunc') : 1
logging.basicConfig(level=logging.DEBUG : 3
format='%(relativeCreated)6d : 1
%(threadName)s : 1
{'stop': : 1
False} : 3
args=(info,)) : 1
thread.start() : 1
logging.debug('Hello : 1
main') : 1
time.sleep(0.75) : 1
KeyboardInterrupt: : 5
info['stop'] : 1
thread.join() : 1
Thread-1 : 15
Hi : 11
myfunc : 10
MainThread : 7
505 : 1
1007 : 1
1507 : 1
1508 : 1
2258 : 1
2512 : 1
3009 : 1
3013 : 1
3515 : 1
3761 : 1
4017 : 1
4513 : 1
4518 : 1
quota : 1
module-based : 1
*fh* : 1
higher- : 4
lower-severity : 1
"logger.debug": : 1
logger.debug : 1
dormant : 1
Say : 1
format='%(asctime)s : 1
%(name)-12s : 1
datefmt='%m-%d : 1
%H:%M' : 1
filename='/tmp/myapp.log' : 1
filemode='w') : 1
console.setLevel(logging.INFO) : 1
logging.Formatter('%(name)-12s: : 1
console.setFormatter(formatter) : 1
logging.getLogger('').addHandler(console) : 1
root.. : 2
logging.info('Jackdaws : 2
quartz.') : 2
logger1 : 2
logging.getLogger('myapp.area1') : 2
logger2 : 2
logging.getLogger('myapp.area2') : 2
logger1.debug('Quick : 2
zephyrs : 4
vexing : 4
daft : 9
Jim.') : 2
logger1.info('How : 2
zebras : 5
vex.') : 2
logger2.warning('Jail : 2
zesty : 5
vixen : 5
quack.') : 2
logger2.error('The : 2
boxing : 5
quickly.') : 2
Jackdaws : 3
quartz : 3
myapp.area1 : 5
vex : 3
myapp.area2 : 6
Jail : 3
quack : 3
10-22 : 5
22:19 : 5
"/tmp/myapp.log" : 1
"app.log" : 7
JSON: : 2
"version": : 2
"disable_existing_loggers": : 2
"simple": : 2
"format": : 2
"%(levelname)-8s : 2
%(message)s" : 2
"stdout": : 4
"ext://sys.stdout" : 3
"stderr": : 2
"ext://sys.stderr" : 2
"file": : 2
"filename": : 2
"mode": : 3
*almost* : 4
"formatters" : 2
"filters": : 4
"warnings_and_below": : 2
"__main__.filter_maker" : 3
["warnings_and_below"] : 2
"filter_maker" : 2
filter_maker(level): : 2
filter(record): : 2
record.levelno : 2
CONFIG : 1
logging.config.dictConfig(json.loads(CONFIG)) : 1
logging.debug('A : 1
logging.info('An : 1
logging.warning('A : 1
logging.error('An : 1
logging.critical('A : 1
main.py : 3
2>stderr.log : 1
>stdout.log : 1
expected: : 4
*.log : 2
:::::::::::::: : 6
app.log : 5
stderr.log : 1
stdout.log : 1
logging.config.listen(9999) : 1
logging.config.stopListening() : 2
t.join() : 2
binary-encoded : 1
open(sys.argv[1] : 1
data_to_send : 1
'localhost' : 2
PORT : 13
socket.socket(socket.AF_INET : 13
socket.SOCK_STREAM) : 10
print('connecting...') : 1
s.connect((HOST : 2
PORT)) : 6
print('sending : 1
config...') : 1
s.send(struct.pack('>L' : 1
len(data_to_send))) : 1
s.send(data_to_send) : 1
s.close() : 3
print('complete') : 1
culprit : 1
sluggish : 1
"SMTPHandler": : 1
infrastructure) : 1
network- : 1
control) : 4
two-part : 2
"queue.Full" : 5
precaution : 1
(together : 1
"QueueHandlers" : 3
fires : 2
listens : 7
LogRecords : 2
"LogRecords" : 3
resource-friendly : 1
eat : 1
(imports : 1
omitted): : 1
que : 1
queue.Queue(-1) : 1
queue_handler : 1
QueueHandler(que) : 1
QueueListener(que : 1
root.addHandler(queue_handler) : 1
logging.Formatter('%(threadName)s: : 1
handler.setFormatter(formatter) : 4
listener.start() : 3
monitors : 3
root.warning('Look : 1
listener.stop() : 2
produce: : 1
MainThread: : 1
(blocking : 1
filled.) : 1
onwards : 7
"respect_handler_level=True" : 1
listener's : 1
logging.handlers : 10
rootLogger : 1
logging.getLogger('') : 1
rootLogger.setLevel(logging.DEBUG) : 1
socketHandler : 1
logging.handlers.SocketHandler('localhost' : 1
logging.handlers.DEFAULT_TCP_LOGGING_PORT) : 1
unformatted : 3
rootLogger.addHandler(socketHandler) : 1
LogRecordStreamHandler(socketserver.StreamRequestHandler): : 1
"""Handler : 1
handle(self): : 5
Logs : 18
self.connection.recv(4) : 1
len(chunk) : 3
slen : 1
struct.unpack('>L' : 1
chunk)[0] : 1
self.connection.recv(slen) : 1
slen: : 1
self.connection.recv(slen : 1
len(chunk)) : 1
self.unPickle(chunk) : 1
logging.makeLogRecord(obj) : 1
self.handleLogRecord(record) : 1
unPickle(self : 1
pickle.loads(data) : 2
handleLogRecord(self : 1
record): : 12
self.server.logname : 2
record.name : 2
logging.getLogger(name) : 1
EVERY : 1
Logger.handle : 1
AFTER : 1
logger-level : 1
logger.handle(record) : 4
LogRecordSocketReceiver(socketserver.ThreadingTCPServer): : 1
socket-based : 1
allow_reuse_address : 2
host='localhost' : 1
port=logging.handlers.DEFAULT_TCP_LOGGING_PORT : 1
handler=LogRecordStreamHandler): : 1
socketserver.ThreadingTCPServer.__init__(self : 1
self.abort : 2
self.timeout : 1
self.logname : 1
serve_until_stopped(self): : 1
abort: : 1
rd : 1
wr : 1
select.select([self.socket.fileno()] : 1
self.timeout) : 1
rd: : 1
self.handle_request() : 3
logging.basicConfig( : 1
format='%(relativeCreated)5d : 1
tcpserver : 1
LogRecordSocketReceiver() : 1
print('About : 1
server...') : 1
tcpserver.serve_until_stopped() : 1
console; : 1
server.. : 1
"makePickle()" : 2
adapting : 4
process-management : 1
Supervisor : 6
Gist : 2
bare-bones : 1
+---------------------------+------------------------------------------------------+ : 8
|===========================|======================================================| : 1
"prepare.sh" : 1
"supervisor.conf" : 1
multi-process : 3
"ensure_app.sh" : 1
"log_listener.py" : 1
"webapp.json" : 1
"client.py" : 1
Unzip : 1
"bash : 2
prepare.sh" : 1
Supervisor- : 1
"bottle" : 1
"gunicorn" : 1
"supervisor" : 1
ensure_app.sh" : 1
"venv/bin/python : 1
client.py" : 1
"app.log*" : 1
"venv/bin/supervisorctl : 1
supervisor.conf : 1
networked : 2
client-specific : 1
*extra* : 12
per-connection : 1
"LoggerAdapter": : 1
debug(self : 1
Delegate : 1
self.process(msg : 2
self.logger.debug(msg : 1
(potentially) : 2
'extra' : 4
CustomAdapter(logging.LoggerAdapter): : 1
'connid' : 1
process(self : 1
kwargs): : 1
'[%s] : 1
(self.extra['connid'] : 1
CustomAdapter(logger : 1
{'connid': : 1
some_conn_id}) : 1
"some_conn_id" : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
(whereas : 1
constant) : 1
threadlocal : 1
'ip' : 1
'user' : 3
ContextFilter(logging.Filter): : 1
['jim' : 1
'fred' : 1
'sheila'] : 1
IPS : 1
['123.231.231.123' : 1
'127.0.0.1' : 8
'192.168.0.1'] : 1
filter(self : 3
record.ip : 2
choice(ContextFilter.IPS) : 1
record.user : 3
choice(ContextFilter.USERS) : 1
(logging.DEBUG : 2
logging.INFO : 5
logging.WARNING : 5
logging.ERROR : 6
logging.CRITICAL) : 2
format='%(asctime)-15s : 1
%(name)-5s : 1
IP: : 13
%(ip)-15s : 1
User: : 15
%(user)-8s : 3
a1 : 3
logging.getLogger('a.b.c') : 1
a2 : 1
logging.getLogger('d.e.f') : 1
ContextFilter() : 1
a1.addFilter(f) : 1
a2.addFilter(f) : 1
a1.debug('A : 1
a1.info('An : 1
parameters') : 1
lvl : 3
choice(levels) : 1
lvlname : 2
logging.getLevelName(lvl) : 1
a2.log(lvl : 1
'parameters') : 1
2010-09-06 : 12
22:38:15,292 : 1
a.b.c : 2
123.231.231.123 : 4
fred : 7
22:38:15,300 : 8
192.168.0.1 : 5
sheila : 9
d.e.f : 10
127.0.0.1 : 10
jim : 13
22:38:15,301 : 3
context-local : 2
thread-locals : 1
webapplib.py : 1
useful(): : 1
representative : 3
logger.debug('Hello : 2
webapplib!') : 1
time.sleep(0.01) : 2
"WebApp" : 1
ContextVar : 1
webapplib : 13
root.setLevel(logging.DEBUG) : 6
Request: : 1
user): : 1
self.method : 1
self.ip : 1
self.user : 1
192.168.2.XXX : 1
192.16.3.XXX : 1
REQUESTS : 1
Request('GET' : 3
'192.168.2.20' : 1
'jim') : 2
Request('POST' : 3
'192.168.3.20' : 1
'fred') : 2
'192.168.2.21' : 1
'sheila') : 2
'192.168.3.21' : 1
'192.168.2.22' : 1
'192.168.3.22' : 1
logging.Formatter('%(threadName)-11s : 1
%(appName)s : 1
%(name)-9s : 1
%(user)-6s : 1
%(ip)s : 1
%(method)-4s : 1
ctx_request : 1
ContextVar('request') : 1
ctx_appname : 1
ContextVar('appname') : 1
InjectingFilter(logging.Filter): : 1
webapp : 2
app): : 2
self.app : 2
ctx_request.get() : 1
record.method : 1
request.method : 1
request.ip : 1
request.user : 1
record.appName : 1
appName : 2
ctx_appname.get() : 1
self.app.name : 1
WebApp: : 1
webapp-specific : 2
logging.FileHandler(name : 1
'.log' : 1
InjectingFilter(self) : 1
handler.addFilter(f) : 1
root.addHandler(handler) : 3
self.num_requests : 2
process_request(self : 1
request): : 3
ctx_request.set(request) : 1
ctx_appname.set(self.name) : 1
logger.debug('Request : 2
started') : 3
webapplib.useful() : 1
finished') : 1
fn : 10
os.path.splitext(os.path.basename(__file__))[0] : 1
adhf : 1
argparse.ArgumentDefaultsHelpFormatter : 2
ap : 2
argparse.ArgumentParser(formatter_class=adhf : 1
prog=fn : 1
description='Simulate : 1
'applications : 1
'requests : 1
'context : 1
'populate : 1
logs') : 1
aa : 2
ap.add_argument : 2
aa('--count' : 1
'-c' : 4
default=100 : 1
help='How : 1
simulate') : 1
ap.parse_args() : 2
webapps : 1
app1 : 11
WebApp('app1') : 1
app2 : 13
WebApp('app2') : 1
[app1 : 1
app2] : 1
logging.FileHandler('app.log' : 1
range(options.count): : 1
Pick : 2
choice(apps) : 1
choice(REQUESTS) : 1
threading.Thread(target=app.process_request : 1
args=(request,)) : 1
threads.append(t) : 1
threads: : 2
apps: : 1
print('%s : 1
requests' : 1
(app.name : 1
app.num_requests)) : 1
"app1.log" : 1
"app2.log" : 1
~/logging-contextual-webapp$ : 9
wc : 5
153 : 3
app1.log : 3
app2.log : 3
Thread-3 : 4
(process_request) : 16
192.168.3.21 : 7
Thread-5 : 2
192.168.2.21 : 4
Thread-2 : 3
192.168.2.20 : 3
Thread-4 : 2
192.168.2.22 : 2
Thread-6 : 1
filter(record: : 1
logging.LogRecord): : 1
copy.copy(record) : 1
'jim' : 1
logger.setLevel(logging.INFO) : 3
logging.Formatter('%(message)s : 1
%(user)-8s') : 1
handler.addFilter(filter) : 1
logger.addHandler(handler) : 2
logger.info('A : 1
processes* : 2
dedicate : 1
"Lock" : 17
https://bugs.python.org/issue3770) : 1
analogous) : 1
configurer : 1
listener_configurer(): : 1
logging.handlers.RotatingFileHandler('mptest.log' : 1
%(processName)-10s : 4
h.setFormatter(f) : 1
root.addHandler(h) : 3
(LogRecords)on : 1
listener_process(queue : 1
configurer): : 2
configurer() : 1
logging.getLogger(record.name) : 3
print('Whoops : 1
Problem:' : 1
traceback.print_exc(file=sys.stderr) : 1
LEVELS : 2
[logging.DEBUG : 3
logging.CRITICAL] : 3
LOGGERS : 1
['a.b.c' : 1
'd.e.f'] : 1
MESSAGES : 1
'Random : 3
#1' : 1
#2' : 1
#3' : 1
worker_configurer(queue): : 1
logging.handlers.QueueHandler(queue) : 2
demo; : 1
delays : 7
worker_process(queue : 1
configurer(queue) : 1
multiprocessing.current_process().name : 2
print('Worker : 2
started: : 2
time.sleep(random()) : 1
logging.getLogger(choice(LOGGERS)) : 1
choice(LEVELS) : 1
choice(MESSAGES) : 1
logger.log(level : 3
finished: : 1
orchestrated : 1
multiprocessing.Queue(-1) : 2
multiprocessing.Process(target=listener_process : 1
listener_configurer)) : 1
multiprocessing.Process(target=worker_process : 2
worker_configurer)) : 2
workers.append(worker) : 2
worker.start() : 2
workers: : 4
w.join() : 2
queue.put_nowait(None) : 1
listener.join() : 1
logger_thread(q): : 1
q.get() : 2
worker_process(q): : 1
qh : 1
logging.handlers.QueueHandler(q) : 1
root.addHandler(qh) : 1
'foo.bar' : 2
'foo.bar.baz' : 3
'spam.ham' : 2
'spam.ham.eggs'] : 2
range(100): : 2
random.choice(levels) : 2
logging.getLogger(random.choice(loggers)) : 2
logger.log(lvl : 2
'Message : 3
%d' : 7
'detailed': : 2
'logging.Formatter' : 3
'console': : 4
'logging.StreamHandler' : 6
'file': : 2
'logging.FileHandler' : 6
'mplog.log' : 2
'mode': : 8
'detailed' : 6
'foofile': : 2
'mplog-foo.log' : 2
'errors': : 2
'mplog-errors.log' : 2
'ERROR' : 5
'foo': : 4
['foofile'] : 2
'DEBUG' : 7
['console' : 3
'errors'] : 2
wp : 4
Process(target=worker_process : 2
args=(q,)) : 5
workers.append(wp) : 2
wp.start() : 2
logging.config.dictConfig(d) : 1
lp : 2
threading.Thread(target=logger_thread : 1
lp.start() : 2
terminate.. : 1
wp.join() : 2
q.put(None) : 1
lp.join() : 2
"mplog-foo.log" : 1
processes) : 2
multiprocessing.Manager().Queue(-1) : 1
(remembering : 1
"concurrent.futures"): : 1
concurrent.futures.ProcessPoolExecutor(max_workers=10) : 1
executor: : 5
executor.submit(worker_process : 1
worker_configurer) : 1
file-based : 2
"RotatingFileHandler": : 1
LOG_FILENAME : 2
'logging_rotatingfile_example.out' : 1
my_logger : 1
logging.getLogger('MyLogger') : 1
my_logger.setLevel(logging.DEBUG) : 1
logging.handlers.RotatingFileHandler( : 1
maxBytes=20 : 1
backupCount=5) : 2
my_logger.addHandler(handler) : 1
range(20): : 2
my_logger.debug('i : 1
logfiles : 1
glob.glob('%s*' : 1
LOG_FILENAME) : 1
logfiles: : 1
print(filename) : 1
logging_rotatingfile_example.out : 1
logging_rotatingfile_example.out.1 : 1
logging_rotatingfile_example.out.2 : 1
logging_rotatingfile_example.out.3 : 1
logging_rotatingfile_example.out.4 : 1
logging_rotatingfile_example.out.5 : 1
"logging_rotatingfile_example.out" : 1
".1" : 1
(".1" : 1
".2" : 1
".6" : 1
erased : 1
*maxBytes* : 5
approaches: : 2
2.4) : 3
3.2) : 2
expect) : 1
bf : 1
logging.Formatter('{asctime} : 1
{levelname:8s} : 1
{message}' : 1
style='{') : 1
handler.setFormatter(bf) : 1
logging.getLogger('foo.bar') : 1
logger.debug('This : 2
2010-10-28 : 5
15:11:55,341 : 1
logger.critical('This : 2
15:12:11,526 : 1
df : 1
logging.Formatter('$asctime : 1
$name : 1
${levelname} : 1
$message' : 1
style='$') : 1
handler.setFormatter(df) : 1
15:13:06,924 : 1
15:13:11,494 : 1
logger.error('This : 1
an%s : 1
'other,' : 1
'ERROR,' : 1
'message') : 1
15:19:29,833 : 1
("logger.debug()" : 1
"logger.info()" : 1
log) : 4
%-format : 3
{}- : 4
$- : 2
Recall : 2
BraceMessage: : 2
self.fmt : 5
self.args : 3
self.kwargs : 6
self.fmt.format(*self.args : 2
**self.kwargs) : 2
DollarMessage: : 2
Template(self.fmt).substitute(**self.kwargs) : 2
$-formatting : 4
"%(message)s" : 2
"{message}" : 1
"$message" : 1
unwieldy : 3
palatable : 2
synonym/alias : 1
brethren) : 1
"wherever"): : 1
BraceMessage : 2
print(__('Message : 6
{name}' : 1
name='placeholders')) : 1
Point() : 2
p.x : 3
p.y : 3
coordinates: : 5
({point.x:.2f} : 2
{point.y:.2f})' : 2
point=p)) : 2
(0.50 : 2
0.50) : 2
DollarMessage : 2
$num : 2
$what' : 3
num=2 : 2
what='placeholders')) : 2
"logger.debug()" : 1
XXXMessage : 1
Message: : 1
args): : 5
self.fmt.format(*self.args) : 1
StyleAdapter(logging.LoggerAdapter): : 1
extra=None): : 1
super().__init__(logger : 2
{}) : 5
log(self : 2
self.isEnabledFor(level): : 1
self.logger._log(level : 1
Message(msg : 1
StyleAdapter(logging.getLogger(__name__)) : 1
{}' : 1
'world!') : 1
logging.basicConfig(level=logging.DEBUG) : 3
world!" : 4
"Logger.makeRecord()" : 2
"makeLogRecord()" : 4
"HTTPHandler") : 1
"setLoggerClass()" : 2
(say) : 3
intentions : 1
"setLogRecordFactory()" : 6
interrogate : 1
"getLogRecordFactory()" : 3
old_factory : 2
logging.getLogRecordFactory() : 3
record_factory(*args : 2
old_factory(*args : 2
record.custom_attribute : 2
0xdecafbad : 2
logging.setLogRecordFactory(record_factory) : 2
borne : 1
'publish' : 1
below,the : 1
'queue'): : 1
zmq : 1
pyzmq : 1
ctx : 6
zmq.Context() : 3
zmq.Socket(ctx : 1
zmq.PUB) : 1
zmq.PUSH : 1
sock.bind('tcp://*:5556') : 1
ZeroMQSocketHandler(QueueHandler): : 2
enqueue(self : 2
self.queue.send_json(record.__dict__) : 2
ZeroMQSocketHandler(sock) : 1
organizing : 2
uri : 6
socktype=zmq.PUB : 1
ctx=None): : 1
self.ctx : 2
zmq.Socket(self.ctx : 2
socktype) : 1
socket.bind(uri) : 1
super().__init__(socket) : 1
close(self): : 5
self.queue.close() : 1
'subscribe' : 1
ZeroMQSocketListener(QueueListener): : 1
*handlers : 3
kwargs.get('ctx') : 1
zmq.SUB) : 1
socket.setsockopt_string(zmq.SUBSCRIBE : 1
socket.connect(uri) : 1
super().__init__(socket : 1
dequeue(self): : 1
self.queue.recv_json() : 1
logging.makeLogRecord(msg) : 1
effect: : 3
LOGGING : 5
'disable_existing_loggers': : 6
'verbose': : 1
'%(levelname)s : 2
%(asctime)s : 2
%(module)s : 1
%(process)d : 1
%(thread)d : 1
'simple': : 2
'filters': : 5
'special': : 1
'()': : 7
'project.logging.SpecialFilter' : 1
'bar' : 15
'null': : 1
'level':'DEBUG' : 4
'class':'django.utils.log.NullHandler' : 1
'console':{ : 1
'class':'logging.StreamHandler' : 1
'mail_admins': : 1
'django.utils.log.AdminEmailHandler' : 1
['special'] : 2
'django': : 1
'handlers':['null'] : 1
'propagate': : 2
'level':'INFO' : 1
'django.request': : 1
['mail_admins'] : 1
'myproject.custom': : 1
'mail_admins'] : 1
namer(name): : 1
".gz" : 2
rotator(source : 1
dest): : 1
open(source : 1
f_in: : 2
gzip.open(dest : 1
f_out: : 2
shutil.copyfileobj(f_in : 2
f_out) : 2
os.remove(source) : 1
rh : 1
logging.handlers.RotatingFileHandler('rotated.log' : 1
maxBytes=128 : 1
rh.rotator : 1
rh.namer : 1
root.setLevel(logging.INFO) : 1
root.addHandler(rh) : 1
rh.setFormatter(f) : 1
range(1000): : 1
root.info(f'Message : 1
{i : 1
1}') : 1
compressed: : 1
rotated.log* : 1
rotated.log : 1
rotated.log.2.gz : 1
rotated.log.4.gz : 1
rotated.log.1.gz : 2
rotated.log.3.gz : 1
rotated.log.5.gz : 1
zcat : 1
2023-01-20 : 3
02:28:17,767 : 3
996 : 1
997 : 1
998 : 1
illustrative : 5
current_process : 3
MyHandler: : 1
dispatches : 4
handle(self : 1
logger.isEnabledFor(record.levelno): : 1
record.processName : 1
'%s : 5
%s)' : 1
(current_process().name : 2
record.processName) : 1
listener_process(q : 1
stop_event : 3
config): : 1
initialises : 2
logging.config.dictConfig(config) : 3
logging.handlers.QueueListener(q : 1
MyHandler()) : 1
os.name : 5
'posix': : 2
logging.getLogger('setup') : 3
logger.critical('Should : 2
stop_event.wait() : 1
worker_process(config): : 1
hundred : 1
config_initial : 1
['console'] : 2
config_worker : 1
'queue': : 2
'logging.handlers.QueueHandler' : 1
['queue'] : 1
config_listener : 1
'%(name)-15s : 1
logging.config.dictConfig(config_initial) : 1
logger.info('About : 2
args=(config_worker,)) : 1
logger.info('Started : 3
worker: : 1
wp.name) : 1
Event() : 2
Process(target=listener_process : 1
name='listener' : 1
args=(q : 1
config_listener)) : 1
listener') : 1
logger.info('Telling : 1
stop_event.set() : 1
logger.info('All : 1
5424** : 2
**relevant : 1
specification**.) : 1
unfortunately : 3
5424**-compliant : 2
Attach : 5
'ASCII : 1
section\ufeffUnicode : 1
section' : 1
U+FEFF : 1
"b'\xef\xbb\xbf'" : 1
like; : 1
5424-compliant : 1
machine-parseable : 2
StructuredMessage: : 2
self.message : 4
(self.message : 2
json.dumps(self.kwargs)) : 1
StructuredMessage : 2
logging.basicConfig(level=logging.INFO : 2
format='%(message)s') : 2
logging.info(_('message : 2
foo='bar' : 3
bar='baz' : 1
num=123 : 1
fnum=123.456)) : 1
prints: : 3
{"fnum": : 1
123.456 : 1
"num": : 1
"bar": : 1
"baz" : 4
"foo": : 1
"bar"} : 1
Encoder(json.JSONEncoder): : 1
default(self : 3
o): : 2
set): : 1
tuple(o) : 1
o.encode('unicode_escape').decode('ascii') : 1
super().default(o) : 1
Encoder().encode(self.kwargs) : 1
set_value={1 : 1
snowman='\u2603')) : 1
{"snowman": : 1
"\u2603" : 1
"set_value": : 1
3]} : 1
"shutil.chown()" : 3
owned_file_handler(filename : 2
mode='a' : 5
encoding=None : 40
owner=None): : 2
owner: : 2
os.path.exists(filename): : 2
'a').close() : 2
shutil.chown(filename : 2
*owner) : 2
logging.FileHandler(filename : 3
'default': : 2
'file':{ : 2
owned_file_handler : 3
'owner': : 2
['pulse' : 2
'pulse'] : 2
'chowntest.log' : 2
'encoding': : 2
['file'] : 2
"pulse" : 1
"chowntest.py": : 1
logging.config.dictConfig(LOGGING) : 3
logging.getLogger('mylogger') : 1
logger.debug('A : 1
python3.3 : 1
chowntest.py : 1
chowntest.log : 3
2013-11-05 : 2
09:34:51,128 : 1
mylogger : 1
pulse : 2
09:34 : 1
"os.chown()" : 2
handler-creating : 1
'ext://project.util.owned_file_handler' : 1
"project.util" : 1
"'ext://__main__.owned_file_handler'" : 1
"ext://" : 3
governs : 1
orthogonal : 1
("debug()" : 1
interoperably : 1
accommodated : 1
Thing : 1
"getMessage()" : 1
Care : 3
"str(self.msg)" : 1
recall : 2
messages) : 7
“%(message)s” : 1
“{message}” : 1
“$message” : 1
"__" : 1
localization) : 1
Firstly : 3
"str.format()": : 1
{1}' : 1
'placeholders')) : 1
Secondly : 1
"string.Template": : 1
That’s : 1
"XXXMessage" : 1
*can* : 5
recipe) : 1
cater : 2
MyFilter(logging.Filter): : 1
param=None): : 1
self.param : 3
record.msg : 3
allow: : 1
'changed: : 1
'myfilter': : 1
MyFilter : 1
'param': : 1
'noshow' : 1
['myfilter'] : 1
logging.debug('hello') : 1
logging.debug('hello : 1
noshow') : 1
"ext://..." : 1
"'ext://__main__.MyFilter'" : 1
"MyFilter" : 1
dictConfig() : 1
OneLineExceptionFormatter(logging.Formatter): : 1
formatException(self : 1
exc_info): : 1
super().formatException(exc_info) : 1
repr(result) : 1
format(self : 2
super().format(record) : 2
record.exc_text: : 1
s.replace('\n' : 1
configure_logging(): : 2
logging.FileHandler('output.txt' : 1
OneLineExceptionFormatter('%(asctime)s|%(levelname)s|%(message)s|' : 1
'%d/%m/%Y : 1
%H:%M:%S') : 1
fh.setFormatter(f) : 1
root.addHandler(fh) : 1
configure_logging() : 2
logging.info('Sample : 1
logging.exception('ZeroDivisionError: : 1
e) : 3
28/01/2015 : 2
07:21:23|INFO|Sample : 1
message| : 1
07:21:23|ERROR|ZeroDivisionError: : 1
zero|'Traceback : 1
last):\n : 1
"logtest7.py" : 1
main\n : 1
0\nZeroDivisionError: : 1
zero'| : 1
simplistic : 1
liking : 2
audible : 2
text-to-speech : 1
(TTS) : 1
TTS : 4
frequency : 10
swamp : 1
"espeak" : 1
TTSHandler(logging.Handler): : 1
emit(self : 2
self.format(record) : 3
Speak : 1
female : 3
voice : 2
['espeak' : 1
'-s150' : 1
'-ven+f3' : 1
msg] : 1
subprocess.Popen(cmd : 1
stdout=subprocess.PIPE : 4
stderr=subprocess.STDOUT) : 1
p.communicate() : 1
TTSHandler() : 1
logging.info('Hello') : 1
logging.debug('Goodbye') : 1
sys.exit(main()) : 5
"Goodbye" : 2
"logging.handlers.MemoryHandler" : 2
"flushed" : 1
"target" : 14
attaches : 4
buffered) : 2
"logging.ERROR" : 1
logger.addHandler(logging.NullHandler()) : 1
log_if_errors(logger : 1
target_handler=None : 1
flush_level=None : 1
capacity=None): : 1
target_handler : 2
flush_level : 2
MemoryHandler(capacity : 1
flushLevel=flush_level : 1
target=target_handler) : 1
decorator(fn): : 1
fn(*args : 1
logger.exception('call : 1
super(MemoryHandler : 1
handler).flush() : 1
logger.removeHandler(handler) : 1
write_line(s): : 1
sys.stderr.write('%s\n' : 1
foo(fail=False): : 2
write_line('about : 5
logger.debug('Actually : 1
DEBUG') : 1
logger.info('Actually : 1
INFO') : 1
logger.warning('Actually : 1
WARNING') : 1
logger.error('Actually : 1
ERROR') : 1
logger.critical('Actually : 1
CRITICAL') : 1
decorated_foo : 1
log_if_errors(logger)(foo) : 1
write_line('Calling : 4
undecorated : 6
False') : 2
foo(False) : 1
True') : 2
foo(True) : 1
decorated_foo(False) : 1
decorated_foo(True) : 1
observed: : 1
decoration: : 1
@log_if_errors(logger) : 1
"BufferingHandler" : 2
harness : 2
(Run : 1
BufferingSMTPHandler(logging.handlers.BufferingHandler): : 1
mailhost : 2
capacity): : 1
logging.handlers.BufferingHandler.__init__(self : 1
capacity) : 1
self.mailhost : 1
self.mailport : 1
self.username : 1
self.password : 1
self.fromaddr : 1
isinstance(toaddrs : 1
[toaddrs] : 1
self.toaddrs : 2
self.subject : 1
self.setFormatter(logging.Formatter("%(asctime)s : 1
%(levelname)-5s : 1
%(message)s")) : 1
flush(self): : 2
len(self.buffer) : 1
smtp : 2
smtplib.SMTP(self.mailhost : 1
self.mailport) : 1
smtp.starttls() : 1
smtp.login(self.username : 1
self.password) : 1
"From: : 1
%s\r\nTo: : 2
%s\r\nSubject: : 1
%s\r\n\r\n" : 2
(self.fromaddr : 1
','.join(self.toaddrs) : 1
self.subject) : 1
self.buffer: : 2
smtp.sendmail(self.fromaddr : 1
smtp.quit() : 1
logging.raiseExceptions: : 1
self.buffer : 8
aa('host' : 1
metavar='HOST' : 1
help='SMTP : 4
server') : 1
aa('--port' : 1
'-p' : 1
default=587 : 1
port') : 1
aa('user' : 1
metavar='USER' : 1
username') : 1
aa('password' : 1
metavar='PASSWORD' : 1
password') : 3
aa('to' : 1
metavar='TO' : 1
help='Addressee : 1
emails') : 1
aa('sender' : 1
metavar='SENDER' : 1
help='Sender : 1
address') : 1
aa('--subject' : 1
default='Test : 1
(buffering)' : 1
help='Subject : 1
email') : 1
BufferingSMTPHandler(options.host : 1
options.port : 1
options.user : 1
options.password : 1
options.sender : 1
options.to : 1
options.subject : 1
logger.addHandler(h) : 2
range(102): : 1
logger.info("Info : 1
h.flush() : 1
h.close() : 1
eleven : 1
addressee : 1
eleventh : 1
"UTCFormatter" : 2
UTCFormatter(logging.Formatter): : 2
time.gmtime : 2
'utc': : 1
UTCFormatter : 1
'local': : 1
'console1': : 1
'utc' : 1
'console2': : 1
'local' : 1
['console1' : 1
'console2'] : 1
logging.warning('The : 1
time.asctime()) : 1
2015-10-17 : 2
12:53:29,501 : 1
Sat : 4
13:53:29 : 2
13:53:29,501 : 1
LoggingContext: : 1
level=None : 1
handler=None : 1
close=True): : 2
self.level : 4
self.handler : 3
self.close : 1
self.old_level : 1
self.logger.level : 1
self.logger.setLevel(self.level) : 1
self.handler: : 2
self.logger.addHandler(self.handler) : 1
ev : 1
self.logger.setLevel(self.old_level) : 1
self.logger.removeHandler(self.handler) : 1
self.close: : 1
self.handler.close() : 1
logging.getLogger('foo') : 1
logger.addHandler(logging.StreamHandler()) : 1
logger.info('1 : 1
stderr.') : 3
logger.debug('2 : 1
appear.') : 3
LoggingContext(logger : 2
level=logging.DEBUG): : 1
logger.debug('3 : 1
logger.debug('4 : 1
logging.StreamHandler(sys.stdout) : 1
level=logging.DEBUG : 1
handler=h : 1
logger.debug('5 : 1
stdout.') : 1
logger.info('6 : 1
logger.debug('7 : 1
#2 : 4
#3 : 3
#4 : 1
#5 : 2
(once : 2
#6 : 1
#1) : 1
#7 : 1
#2) : 1
logctx.py : 3
"/dev/null" : 2
2>/dev/null : 1
>/dev/null : 1
generalised : 1
can: : 2
organised : 2
"app.py" : 2
"start.py" : 1
"stop.py" : 1
"restart.py" : 1
"logging.INFO" : 5
main(args=None): : 2
scriptname : 1
os.path.basename(__file__) : 1
argparse.ArgumentParser(scriptname) : 1
('DEBUG' : 1
'WARNING' : 1
'CRITICAL') : 1
parser.add_argument('--log-level' : 1
default='INFO' : 1
choices=levels) : 1
parser.add_subparsers(dest='command' : 1
help='Available : 1
commands:') : 1
start_cmd : 1
subparsers.add_parser('start' : 1
help='Start : 1
service') : 1
start_cmd.add_argument('name' : 1
metavar='NAME' : 3
help='Name : 3
start') : 1
stop_cmd : 1
subparsers.add_parser('stop' : 1
help='Stop : 1
services') : 2
stop_cmd.add_argument('names' : 1
nargs='+' : 9
stop') : 1
restart_cmd : 1
subparsers.add_parser('restart' : 1
help='Restart : 1
restart_cmd.add_argument('names' : 1
restart') : 1
importlib.import_module(options.command) : 1
getattr(mod : 1
'command') : 1
AttributeError): : 1
print('Unable : 1
\'%s\'' : 1
options.command) : 1
logging.basicConfig(level=options.log_level : 1
format='%(levelname)s : 1
cmd(options) : 1
"restart" : 2
starting: : 1
start.py : 4
command(options): : 3
logger.debug('About : 3
options.name) : 2
\'%s\' : 1
service.' : 1
stopping: : 1
stop.py : 1
len(options.names) : 2
'\'%s\'' : 2
options.names[0] : 2
'.join('\'%s\'' : 2
options.names) : 2
services.rfind(' : 2
services[:i] : 2
services[i : 2
2:] : 2
logger.info('Stopped : 1
service%s.' : 2
plural) : 2
restarting: : 1
restart.py : 1
logger.info('Restarted : 1
app.py : 9
Stopped : 2
Restarted : 2
'baz' : 9
--log-level : 6
less: : 1
PySide2 : 3
PyQt5 : 3
"QtHandler" : 1
logging) : 2
between) : 2
Qt's : 1
"QThread" : 2
"Qt" : 1
"PySide2" : 1
"PyQt5" : 1
Deal : 2
QtCore : 2
QtGui : 2
QtWidgets : 2
QtCore.Signal : 1
QtCore.Slot : 1
QtCore.pyqtSignal : 1
QtCore.pyqtSlot : 1
QObject : 1
Signaller(QtCore.QObject): : 1
Signal(str : 1
logging.LogRecord) : 2
QtHandler(logging.Handler): : 1
slotfunc : 1
super().__init__(*args : 3
self.signaller : 1
Signaller() : 1
self.signaller.signal.connect(slotfunc) : 1
self.signaller.signal.emit(s : 1
record) : 3
QThreads : 1
"Dummy-1" : 1
ctname(): : 1
QtCore.QThread.currentThread().objectName() : 1
kicked : 1
threadName : 3
qThreadName : 3
QThread : 3
Worker(QtCore.QObject): : 1
@Slot() : 3
start(self): : 1
{'qThreadName': : 2
ctname() : 2
logger.debug('Started : 1
work' : 2
extra=extra) : 4
QtCore.QThread.currentThread().isInterruptionRequested(): : 1
time.sleep(delay) : 1
random.choice(LEVELS) : 2
%3.1f: : 1
Window(QtWidgets.QWidget): : 1
COLORS : 1
logging.DEBUG: : 1
'black' : 5
logging.INFO: : 1
logging.WARNING: : 1
logging.ERROR: : 1
logging.CRITICAL: : 1
'purple' : 1
super().__init__() : 3
self.textedit : 1
te : 1
QtWidgets.QPlainTextEdit(self) : 1
monospace : 1
QtGui.QFont('nosuchfont') : 1
f.setStyleHint(f.Monospace) : 1
te.setFont(f) : 1
te.setReadOnly(True) : 1
PB : 1
QtWidgets.QPushButton : 1
self.work_button : 1
PB('Start : 1
self) : 7
self.log_button : 1
PB('Log : 1
level' : 1
self.clear_button : 1
PB('Clear : 1
window' : 1
QtHandler(self.update_status) : 1
fs : 2
%(qThreadName)-12s : 1
logging.Formatter(fs) : 1
h.setFormatter(formatter) : 1
app.aboutToQuit.connect(self.force_quit) : 1
Lay : 1
QtWidgets.QVBoxLayout(self) : 1
layout.addWidget(te) : 1
layout.addWidget(self.work_button) : 1
layout.addWidget(self.log_button) : 1
layout.addWidget(self.clear_button) : 1
self.setFixedSize(900 : 1
400) : 2
non-worker : 1
self.log_button.clicked.connect(self.manual_update) : 1
self.clear_button.clicked.connect(self.clear_display) : 1
self.start_thread() : 1
self.work_button.clicked.connect(self.worker.start) : 1
self.work_button.clicked.connect(lambda : 1
self.work_button.setEnabled(False)) : 1
start_thread(self): : 1
self.worker : 1
Worker() : 1
self.worker_thread : 1
QtCore.QThread() : 1
self.worker.setObjectName('Worker') : 1
self.worker_thread.setObjectName('WorkerThread') : 1
self.worker.moveToThread(self.worker_thread) : 1
self.worker_thread.start() : 1
kill_thread(self): : 1
self.worker_thread.requestInterruption() : 1
self.worker_thread.isRunning(): : 2
self.worker_thread.quit() : 1
self.worker_thread.wait() : 1
print('worker : 1
exited.') : 1
force_quit(self): : 1
self.kill_thread() : 1
@Slot(str : 1
update_status(self : 1
self.COLORS.get(record.levelno : 1
'black') : 3
'<pre><font : 1
color="%s">%s</font></pre>' : 1
(color : 1
self.textedit.appendHtml(s) : 1
manual_update(self): : 1
(level) : 1
'Manually : 1
logged!' : 1
clear_display(self): : 1
self.textedit.clear() : 1
QtCore.QThread.currentThread().setObjectName('MainThread') : 1
logging.getLogger().setLevel(logging.DEBUG) : 1
QtWidgets.QApplication(sys.argv) : 1
Window(app) : 1
example.show() : 1
sys.exit(app.exec_()) : 1
__name__=='__main__': : 1
detault : 1
3164** : 1
hails : 1
existing) : 1
5424 : 2
SysLogHandler5424(logging.handlers.SysLogHandler): : 1
tz_offset : 1
re.compile(r'([+-]\d{2})(\d{2})$') : 1
re.compile(r'([\]"\\])') : 1
self.msgid : 1
kwargs.pop('msgid' : 1
self.appname : 2
kwargs.pop('appname' : 1
asctime : 4
datetime.datetime.fromtimestamp(record.created).isoformat() : 1
self.tz_offset.match(time.strftime('%z')) : 1
has_offset : 2
time.timezone: : 1
hrs : 1
mins : 1
m.groups() : 7
int(hrs) : 1
int(mins): : 1
has_offset: : 1
'Z' : 2
f'{hrs}:{mins}' : 1
socket.gethostname() : 2
appname : 1
procid : 1
record.process : 1
msgid : 3
sdata : 2
hasattr(record : 1
'structured_data'): : 1
sd : 2
record.structured_data : 1
SD-ID : 1
PARAM-NAME : 1
PARAM-VALUE : 1
(refer : 2
mean) : 2
replacer(m): : 1
g[0] : 1
sdid : 1
dv : 2
sd.items(): : 1
f'[{sdid}' : 1
dv.items(): : 1
str(v) : 1
self.escaped.sub(replacer : 1
f' : 1
{k}="{s}"' : 1
parts.append(part) : 1
''.join(parts) : 1
f'{version} : 1
{asctime} : 1
{hostname} : 1
{appname} : 1
{procid} : 1
{msgid} : 1
{sdata} : 1
{msg}' : 1
speciric : 1
'foo@12345': : 1
{'bar': : 3
'baz': : 5
'bozz' : 3
'fizz': : 1
r'buzz'} : 2
'foo@54321': : 1
{'rab': : 1
'zab': : 1
'zzif': : 1
{'structured_data': : 1
sd} : 1
illustrating : 4
LoggerWriter: : 1
level): : 3
message): : 3
'\n': : 1
self.logger.log(self.level : 3
logging.getLogger('demo') : 1
info_fp : 1
LoggerWriter(logger : 5
logging.INFO) : 2
debug_fp : 1
logging.DEBUG) : 1
message' : 4
file=info_fp) : 1
print('A : 1
file=debug_fp) : 1
INFO:demo:An : 1
DEBUG:demo:A : 1
"LoggerWriter" : 3
logging.WARNING) : 2
print('Foo') : 1
INFO:demo:Foo : 1
print('Bar' : 1
WARNING:demo:Bar : 1
WARNING:demo:Traceback : 2
WARNING:demo: : 8
"/home/runner/cookbook-loggerwriter/test.py" : 2
WARNING:demo:main() : 1
WARNING:demo:1 : 1
WARNING:demo:ZeroDivisionError : 1
WARNING:demo:: : 1
WARNING:demo:division : 1
mutiple : 1
slghtly : 1
"LoggerWriter": : 1
BufferingLoggerWriter(LoggerWriter): : 1
'\n' : 25
message.split('\n') : 1
parts.pop(0) : 1
parts.pop() : 1
part) : 4
"/home/runner/cookbook-loggerwriter/main.py" : 2
WARNING:demo:ZeroDivisionError: : 1
*unhelpful* : 1
"file : 11
process" : 1
copy/paste/forget-to-change : 1
Forking : 3
*appear* : 1
garbled : 1
rotation) : 1
wasted : 1
size-based : 1
circumvent : 2
"logging.getLogger(name)" : 2
C# : 1
----------------------------------------------------------------- : 1
misunderstood : 1
10,000 : 1
operational : 2
decently : 1
INET : 4
IPv4) : 6
99% : 1
STREAM : 2
TCP) : 2
you!) : 1
mystery : 1
"client" : 8
conversation : 4
switchboard : 1
exclusively; : 1
(Inter : 1
Communication) : 1
town : 1
invented : 6
wildfire : 1
unbelievably : 1
schemes) : 1
Roughly : 24
clicked : 7
STREAMing : 2
s.connect(("www.python.org" : 1
80)) : 2
reply : 21
exchanges) : 1
"server : 1
socket": : 1
serversocket : 1
serversocket.bind((socket.gethostname() : 1
serversocket.listen(5) : 1
"socket.gethostname()" : 2
"s.bind(('localhost' : 1
80))" : 3
"s.bind(('127.0.0.1' : 1
"s.bind(('' : 1
"well : 1
known" : 2
SNMP : 1
digits) : 5
"listen" : 1
max) : 2
refusing : 2
(clientsocket : 1
serversocket.accept() : 1
clientsocket : 1
ct : 1
client_thread(clientsocket) : 1
ct.run() : 1
"clientsocket" : 4
multiplex : 1
"clientsocket"s : 1
*other* : 26
"clients" : 1
chat : 1
AF_INET : 1
"'localhost'" : 2
browser's : 1
beasts : 1
"peer : 1
peer" : 1
*as : 1
etiquette : 2
conversation* : 1
"connect"ing : 1
signon : 1
verbs : 2
beast : 1
"flush" : 3
stumbling : 1
("send") : 1
emptied : 1
("recv") : 1
*your* : 1
successfully; : 1
*there : 1
no* : 1
EOT : 1
(End : 2
Transfer) : 1
*on : 1
socket.* : 1
now) : 1
sockets: : 1
*messages : 1
length* : 1
(yuck) : 1
*or : 4
delimited* : 1
(shrug) : 1
are* : 1
better) : 1
connection* : 1
righter : 1
MySocket: : 1
"""demonstration : 1
sock=None): : 1
self.sock : 2
socket.socket( : 2
socket.AF_INET : 3
connect(self : 1
port): : 3
self.sock.connect((host : 1
port)) : 3
mysend(self : 1
msg): : 1
totalsent : 4
MSGLEN: : 2
self.sock.send(msg[totalsent:]) : 1
RuntimeError("socket : 2
broken") : 2
myreceive(self): : 1
bytes_recd : 5
self.sock.recv(min(MSGLEN : 1
2048)) : 1
chunks.append(chunk) : 1
b''.join(chunks) : 1
messaging : 1
"strlen" : 1
"\0"s.) : 1
"recv"s : 1
(4096 : 1
8192 : 3
sizes) : 1
conversational : 1
reply) : 1
Prefixing : 1
(believe : 1
Nasty : 1
competitive : 1
position) : 7
Lets : 1
"00 : 1
01" : 1
(x86/AMD64 : 1
RISC-V) : 1
"01 : 1
00" : 2
"ntohl : 1
htonl : 1
ntohs : 1
htons" : 1
*network* : 3
*short* : 1
*long* : 1
byte-reversed : 1
""0"" : 2
Decisions : 1
listen" : 1
riddance!" : 1
neglecting : 1
"shutdown(); : 1
close()" : 1
HTTP-like : 1
"shutdown(1)" : 1
receive." : 1
"EOF" : 1
disappears : 1
*Please* : 1
"close") : 1
recycling : 1
screwed : 1
inside-out : 1
"socket.setblocking(False)" : 1
indistinguishable : 3
"O_NDELAY" : 1
"TCP_NODELAY") : 1
nuts : 1
forth.) : 1
crazy : 1
suck : 1
brain-dead : 1
cake : 1
ready_to_read : 1
ready_to_write : 1
in_error : 1
select.select( : 1
potential_readers : 2
potential_writers : 2
potential_errs : 1
timeout) : 3
reading; : 1
minute) : 1
as-close-to- : 1
certain-as-we-ever-get-in-this-business : 1
*something* : 3
healthy : 1
outbound : 1
available.) : 1
(almost : 1
certainly) : 1
**Portability : 1
alert**: : 1
<amk@amk.ca> : 1
gentler : 2
REs : 20
sentences : 3
TeX : 1
pattern?" : 1
"Is : 1
string?" : 1
engine's : 1
task: : 1
(deterministic : 1
automata) : 1
"Test" : 1
"TEST" : 1
well; : 4
rule; : 1
*metacharacters* : 1
out-of-the-ordinary : 1
discussing : 1
metacharacters : 14
metacharacters; : 1
"[abc]" : 1
"c"; : 1
"[a-c]" : 1
"[a-z]" : 5
"\") : 1
"[akm$]" : 1
"'$'"; : 1
metacharacter : 9
*complementing* : 2
"'^'" : 11
"[^5]" : 2
"'5'" : 3
"[5^]" : 1
patterns; : 3
meaning: : 6
"\[" : 1
"\w" : 17
"[a-zA-Z0-9_]" : 5
"\d" : 7
digit; : 2
"[0-9]" : 5
"\D" : 3
non-digit : 1
"[^0-9]" : 2
"\s" : 7
\t\n\r\f\v]" : 7
"\S" : 5
"[^ : 2
"\W" : 7
"[^a-zA-Z0-9_]" : 2
"[\s,.]" : 1
"','" : 5
("re.DOTALL") : 1
"'*'"; : 1
"ca*t" : 1
"'ct'" : 2
"'cat'" : 2
"'a'") : 2
"'caaat'" : 2
Repetitions : 2
*greedy*; : 2
step-by-step : 1
"a[bcd]*b" : 1
"[bcd]" : 1
"'abcbd'" : 1
+--------+-------------+-----------------------------------+ : 8
Step : 1
|========|=============|===================================| : 1
"abcbd" : 1
"[bcd]*" : 4
*Failure* : 2
"abcb" : 2
"bc" : 1
"'abcb'" : 1
progressively : 4
Pay : 1
"+"; : 1
*zero* : 1
whatever's : 1
*one* : 1
"ca+t" : 1
"'a'"s) : 1
times; : 2
"home-?brew" : 1
"'homebrew'" : 1
"'home-brew'" : 1
quantifier : 9
"{m,n}" : 4
"a/{1,3}b" : 1
"'a/b'" : 1
"'a//b'" : 1
"'a///b'" : 1
"'ab'" : 6
"'a////b'" : 1
*n*; : 2
reductionist : 1
bent : 1
"{0,}" : 1
"{1,}" : 1
"{0,1}" : 1
re.compile('ab*') : 2
re.compile('ab*' : 1
re.IGNORECASE) : 1
bloat : 1
("'\'") : 3
"\section" : 2
"\\section" : 3
*again* : 1
+---------------------+--------------------------------------------+ : 12
Stage : 1
|=====================|============================================| : 2
""\\\\section"" : 2
"'\\\\'" : 2
"r"\n"" : 2
""\n"" : 3
one-character : 9
+---------------------+--------------------+ : 4
|=====================|====================| : 1
""ab*"" : 1
"r"ab*"" : 1
"r"\\section"" : 1
""\\w+\\s+\\1"" : 1
"r"\w+\s+\1"" : 1
+--------------------+-------------------------------------------------+ : 9
Method/Attribute : 3
|====================|=================================================| : 2
"match()" : 18
experimenting : 1
Tools/demo/redemo.py : 1
"redemo.py" : 1
RE: : 1
re.compile('[a-z]+') : 2
"[a-z]+" : 1
'one : 1
repetitions' : 1
p.match("") : 1
print(p.match("")) : 1
"tempo" : 1
p.match('tempo') : 1
<re.Match : 20
match='tempo'> : 1
+--------------------+----------------------------------------------+ : 9
|====================|==============================================| : 2
"end()" : 4
"span()" : 3
(start : 1
m.group() : 3
'tempo' : 1
m.start() : 1
m.end() : 2
m.span() : 2
print(p.match('::: : 1
message')) : 1
p.search('::: : 1
message'); : 1
span=(4 : 2
match='message'> : 1
re.compile( : 1
p.match( : 1
'string : 1
print('Match : 1
m.group()) : 1
print('No : 1
match') : 1
re.compile(r'\d+') : 3
p.findall('12 : 1
drummers : 2
drumming : 2
pipers : 1
lords : 1
a-leaping') : 1
['12' : 1
'10'] : 1
"cooked" : 3
*iterator*: : 1
p.finditer('12 : 1
<callable_iterator : 1
iterator: : 3
print(match.span()) : 1
(22 : 2
24) : 4
(29 : 1
print(re.match(r'From\s+' : 1
'Fromage : 1
amk')) : 1
re.match(r'From\s+' : 1
'From : 2
amk : 1
Thu : 1
19:12:10 : 1
1998') : 1
match='From : 1
'> : 3
pre-compiling : 1
"IGNORECASE" : 5
one-letter : 2
"re.VERBOSE" : 5
"re.X" : 3
OR-ing : 1
them; : 7
"re.I : 1
re.M" : 1
+-----------------------------------+----------------------------------------------+ : 7
|===================================|==============================================| : 1
"DOTALL" : 2
"MULTILINE" : 10
"VERBOSE" : 1
'extended') : 1
understandably : 1
IGNORECASE : 1
matching; : 2
"[A-Z]" : 4
letters: : 2
'İ' : 2
(U+0130 : 2
'ı' : 2
(U+0131 : 2
dotless : 2
'ſ' : 2
(U+017F : 2
'K' : 2
(U+212A : 2
Kelvin : 2
"Spam" : 1
"'Spam'" : 1
"'spam'" : 1
"'spAM'" : 1
"'ſpam'" : 1
lowercasing : 3
account; : 1
LOCALE : 1
"\B" : 7
Locales : 1
"\w+" : 2
"[A-Za-z]" : 1
"é" : 2
"ç" : 1
"\w"; : 1
"culture" : 2
locales/languages : 2
MULTILINE : 1
("^" : 1
Metacharacters.) : 1
(immediately : 3
newline) : 3
DOTALL : 1
newline; : 6
*except* : 4
VERBOSE : 1
backslash; : 1
engine; : 1
"re.VERBOSE"; : 1
charref : 2
re.compile(r""" : 2
&[#] : 1
0[0-7]+ : 1
[0-9]+ : 1
x[0-9a-fA-F]+ : 1
re.VERBOSE) : 4
re.compile("&#(0[0-7]+" : 1
"|[0-9]+" : 1
"|x[0-9a-fA-F]+);") : 1
*zero-width : 1
assertions* : 1
zero-width : 4
Alternation : 1
"A|B" : 2
alternating : 2
"Crow|Servo" : 1
"'Crow'" : 1
"'Servo'" : 1
"'Cro'" : 1
"'ervo'" : 1
"'|'" : 6
"\|" : 2
"[|]" : 2
"From" : 5
"^From" : 1
print(re.search('^From' : 2
Eternity')) : 1
match='From'> : 1
'Reciting : 1
Memory')) : 1
"\^" : 1
print(re.search('}$' : 3
'{block}')) : 1
span=(6 : 2
match='}'> : 2
'{block} : 1
')) : 1
'{block}\n')) : 1
"\$" : 2
"[$]" : 1
"\Z" : 2
word; : 1
re.compile(r'\bclass\b') : 1
print(p.search('no : 2
all')) : 2
span=(3 : 1
match='class'> : 1
print(p.search('the : 1
declassified : 1
algorithm')) : 1
print(p.search('one : 1
is')) : 1
subtleties : 3
re.compile('\bclass\b') : 1
print(p.search('\b' : 1
'\b')) : 1
match='\x08class\x08'> : 1
dissect : 2
RFC-822 : 1
author@example.com : 1
User-Agent: : 1
Thunderbird : 1
1.5.0.9 : 1
(X11/20061227) : 1
MIME-Version: : 1
editor@example.com : 1
"'('" : 7
"')'" : 5
"(ab)*" : 1
"ab" : 1
re.compile('(ab)*') : 1
print(p.match('ababababab').span()) : 1
re.compile('(a)b') : 1
p.match('ab') : 1
m.group(0) : 5
Subgroups : 1
upward : 3
nested; : 2
re.compile('(a(b)c)d') : 1
p.match('abcd') : 1
m.group(1) : 6
m.group(2) : 3
m.group(2,1,2) : 1
Backreferences : 4
"\1" : 3
backreferences : 6
re.compile(r'\b(\w+)\s+\1\b') : 1
p.search('Paris : 2
spring').group() : 2
the' : 2
Elaborate : 1
single-keystroke : 1
"\&" : 3
"[&]" : 1
"(?...)" : 3
"(?=foo)" : 1
assertion) : 1
"(?:foo)" : 1
non-capturing : 5
"(?:...)" : 3
re.match("([abc])+" : 1
"abc") : 2
('c',) : 1
re.match("(?:[abc])+" : 1
group; : 4
(capturing : 1
non-capturing) : 1
groups; : 1
groups: : 2
"(?P<name>...)" : 6
re.compile(r'(?P<word>\b\w+\b)') : 1
p.search( : 1
'(((( : 1
)))' : 1
m.group('word') : 1
'Lots' : 2
"groupdict()": : 1
re.match(r'(?P<first>\w+) : 1
(?P<last>\w+)' : 1
'Jane : 1
Doe') : 1
m.groupdict() : 2
{'first': : 1
'Jane' : 1
'last': : 1
'Doe'} : 1
InternalDate : 1
re.compile(r'INTERNALDATE : 1
r'(?P<day>[ : 1
123][0-9])-(?P<mon>[A-Z][a-z][a-z])-' : 1
r'(?P<year>[0-9][0-9][0-9][0-9])' : 1
r' : 2
(?P<hour>[0-9][0-9]):(?P<min>[0-9][0-9]):(?P<sec>[0-9][0-9])' : 1
(?P<zonen>[-+])(?P<zoneh>[0-9][0-9])(?P<zonem>[0-9][0-9])' : 1
r'"') : 1
"m.group('zonem')" : 1
"(...)\1" : 1
naturally : 5
"(?P=name)" : 2
"\b(\w+)\s+\1\b" : 1
"\b(?P<word>\w+)\s+(?P=word)\b": : 1
re.compile(r'\b(?P<word>\w+)\s+(?P=word)\b') : 1
"(?=...)" : 2
"(?!...)" : 2
assertion; : 1
*doesn't* : 2
"news.rc" : 1
"news" : 3
"rc" : 4
filename's : 1
".*[.].*$" : 1
"$"; : 1
"autoexec.bat" : 2
"sendmail.cf" : 3
"printers.conf" : 1
"bat" : 6
attempts: : 1
".*[.][^b].*$" : 1
".*[.]([^b]..|.[^a].|..[^t])$" : 1
"b"; : 1
three-letter : 1
two-letter : 2
".*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$" : 1
pattern's : 1
"exe" : 1
confusion: : 1
".*[.](?!bat$)[^.]*$" : 1
means: : 3
"bat$" : 1
"sample.batch" : 1
"[^.]*" : 1
Excluding : 1
easy; : 1
"exe": : 1
".*[.](?!bat$|exe$)[^.]*$" : 1
by; : 1
.split(string[ : 1
maxsplit=0]) : 1
re.compile(r'\W+') : 2
p.split('This : 2
sweet : 3
split().') : 1
['This' : 4
'and' : 2
'sweet' : 1
'of' : 1
split().' : 1
'test : 1
split().'] : 1
re.compile(r'(\W+)') : 1
p.split('This.. : 1
test.') : 2
p2.split('This.. : 1
re.split(r'[\W]+' : 2
'Words : 7
words.') : 5
['Words' : 6
'words' : 12
re.split(r'([\W]+)' : 1
words.' : 2
'words : 2
words.'] : 2
.sub(replacement : 1
string[ : 1
count=0]) : 1
*replacement* : 4
"colour": : 1
re.compile('(blue|white|red)') : 2
p.sub('colour' : 2
'blue : 3
socks : 6
shoes') : 2
'colour : 2
shoes' : 4
count=1) : 2
performed: : 3
p.subn('colour' : 2
('colour : 1
'no : 1
colours : 2
all') : 1
('no : 1
all' : 1
re.compile('x*') : 1
p.sub('-' : 1
'abxd') : 1
'-a-b--d-' : 1
"\6" : 2
"section" : 3
"subsection": : 1
re.compile('section{ : 2
[^}]* : 2
}' : 2
p.sub(r'subsection{\1}','section{First} : 1
section{second}') : 1
'subsection{First} : 1
subsection{second}' : 1
"\g<name>" : 2
"\g<number>" : 2
"\g<2>" : 2
"\2" : 2
"\g<2>0" : 2
("\20" : 1
"'0'".) : 1
(?P<name> : 1
p.sub(r'subsection{\1}','section{First}') : 1
'subsection{First}' : 3
p.sub(r'subsection{\g<1>}','section{First}') : 1
p.sub(r'subsection{\g<name>}','section{First}') : 1
hexadecimal: : 1
hexrepl(match): : 1
int(match.group()) : 1
hex(value) : 1
p.sub(hexrepl : 1
'Call : 2
65490 : 1
49152 : 1
code.') : 1
0xffd2 : 1
0xc000 : 1
code.' : 1
"sub("(?i)b+" : 1
"bbbb : 1
BBBB")" : 1
"'x : 3
x'" : 1
"word" : 5
"deed" : 1
"swordfish" : 1
"sdeedfish" : 1
"\bword\b" : 1
"replace()"'s : 1
abilities.) : 1
"re.sub('\n' : 1
S)" : 1
print(re.match('super' : 2
'superstition').span()) : 2
'insuperable')) : 1
print(re.search('super' : 2
'insuperable').span()) : 1
".*" : 6
Resist : 1
be; : 2
"Crow" : 1
"a*" : 4
balanced : 1
greedy : 5
'<html><head><title>Title</title>' : 1
print(re.match('<.*>' : 2
s).span()) : 1
32) : 3
s).group()) : 2
<html><head><title>Title</title> : 1
"'<html>'" : 2
backtrack : 1
"'</title>'" : 1
non-greedy : 3
"*?" : 3
"+?" : 2
"??" : 2
"{m,n}?" : 2
*little* : 1
advances : 2
print(re.match('<.*?>' : 1
<html> : 3
Quick-and-dirty : 1
expression; : 2
tasks.) : 1
terribly : 1
moderate : 4
*isn't* : 2
"dog : 1
cat" : 1
"dog|cat" : 1
RE; : 1
neatly: : 1
\s* : 2
(?P<header>[^:]+) : 1
(?P<value>.*?) : 1
\s*$ : 1
than: : 1
re.compile(r"\s*(?P<header>[^:]+)\s*:(?P<value>.*?)\s*$") : 1
Were : 1
unclear : 1
Friedl's : 1
Mastering : 3
Java's : 5
now-removed : 1
much.) : 1
Today's : 1
user-selectable : 2
languages; : 1
Hebrew : 6
Russian : 7
(https://www.unicode.org/) : 1
**character** : 1
'È' : 1
'Í' : 1
"Roman : 1
Numeral : 1
One" : 1
'Ⅰ' : 1
**code : 3
points** : 1
0x10FFFF : 1
(about : 1
"U+265E" : 2
"0x265e" : 1
(9,822 : 1
0061 : 1
'a'; : 1
LATIN : 5
SMALL : 7
0062 : 1
'b'; : 1
0063 : 1
'c'; : 1
007B : 1
'{'; : 1
LEFT : 2
CURLY : 2
BRACKET : 1
2167 : 1
'Ⅷ'; : 1
ROMAN : 3
NUMERAL : 3
2168 : 1
'Ⅸ'; : 1
NINE : 1
265E : 1
'♞'; : 1
CHESS : 3
KNIGHT : 1
265F : 1
'♟'; : 1
PAWN : 1
1F600 : 1
'😀'; : 1
GRINNING : 1
FACE : 2
1F609 : 1
'😉'; : 1
WINKING : 1
"U+265E"' : 1
'BLACK : 1
KNIGHT' : 1
'♞' : 1
**glyph** : 1
glyph : 5
horizontal : 12
glyphs; : 1
figuring : 2
terminal's : 1
renderer : 1
(1,114,111 : 1
units** : 2
**character : 1
encoding** : 1
**encoding** : 1
0x50 : 1
74 : 2
68 : 4
6f : 1
6e : 1
portable; : 1
occupied : 1
"0x00" : 1
(desktop : 1
gigabytes : 2
large) : 1
intolerable : 1
UTF : 2
Format" : 1
UTF-8.) : 1
(U+0000) : 1
"strcpy()" : 1
end-of-string : 1
compact; : 1
UTF-8-encoded : 2
byte-ordering : 1
Consortium : 2
charts : 1
chronology : 1
Computerphile : 1
Youtube : 1
(9 : 4
Korpela : 1
Spolsky : 1
helpful; : 1
"character : 1
encoding" : 1
rudiments : 1
""unicode : 1
rocks!"" : 1
"'unicode : 1
rocks!'" : 1
open('/tmp/input.txt' : 1
'File : 1
print("Fichier : 1
trouvé") : 1
répertoire : 1
"/tmp/records.log" : 1
open(répertoire : 1
f.write("test\n") : 1
(Depending : 1
capital-delta : 1
escape.) : 1
"\N{GREEK : 1
DELTA}" : 1
'\u0394' : 3
"\u0394" : 1
"\U00000394" : 1
(raise : 4
"REPLACEMENT : 1
CHARACTER") : 1
(inserts : 4
"\xNN" : 1
differences: : 3
b'\x80abc'.decode("utf-8" : 4
UnicodeDecodeError: : 1
"replace") : 1
'\ufffdabc' : 1
"backslashreplace") : 1
'\\x80abc' : 1
"ignore") : 1
encodings; : 2
"'latin-1'" : 2
"'iso_8859_1'" : 1
"'8859"' : 1
synonyms : 3
One-character : 1
chr(57344) : 1
'\ue000' : 1
ord('\ue000') : 1
57344 : 1
"'xmlcharrefreplace'" : 6
"\uNNNN" : 1
chr(40960) : 1
chr(1972) : 1
u.encode('utf-8') : 1
b'\xea\x80\x80abcd\xde\xb4' : 1
u.encode('ascii') : 1
'\ua000' : 1
range(128) : 1
u.encode('ascii' : 5
'ignore') : 1
b'abcd' : 1
'replace') : 1
b'?abcd?' : 1
'xmlcharrefreplace') : 1
b'&#40960;abcd&#1972;' : 1
'backslashreplace') : 2
b'\\ua000abcd\\u07b4' : 1
'namereplace') : 1
b'\\N{YI : 1
SYLLABLE : 1
IT}abcd\\u07b4' : 1
comfortable : 1
four: : 1
"a\xac\u1234\u20ac\U00008000" : 1
^^^^ : 1
four-digit : 1
^^^^^^^^^^ : 1
eight-digit : 1
[ord(c) : 1
s] : 1
172 : 1
4660 : 1
8364 : 1
32768] : 1
doses : 1
accented : 3
accent-using : 1
'abcdé' : 1
print(ord(u[-1])) : 1
Emacs's : 1
'coding' : 1
"-*-" : 1
special; : 1
"coding: : 1
"coding=name" : 1
numerals : 2
four-fifths : 1
display-related : 1
chr(233) : 1
chr(0x0bf2) : 1
chr(3972) : 1
chr(6000) : 1
chr(13231) : 1
enumerate(u): : 1
'%04x' : 1
ord(c) : 2
unicodedata.category(c) : 1
print(unicodedata.name(c)) : 1
print(unicodedata.numeric(u[1])) : 1
00e9 : 1
ACUTE : 1
0bf2 : 1
TAMIL : 1
THOUSAND : 1
0f84 : 1
TIBETAN : 1
HALANTA : 1
1770 : 1
TAGBANWA : 1
SA : 1
33af : 1
RAD : 1
OVER : 2
SQUARED : 1
"Letter" : 2
"Punctuation" : 1
"Symbol" : 3
subcategories : 1
"'Ll'" : 1
'Letter : 1
lowercase' : 1
"'No'" : 1
"Number : 1
"'Mn'" : 1
"Mark : 1
nonspacing" : 1
"'So'" : 1
"Symbol : 1
Category : 3
'ê' : 3
U+00EA : 1
U+0065 : 1
U+0302 : 1
'COMBINING : 1
CIRCUMFLEX : 3
ACCENT' : 1
'ß' : 1
U+00DF) : 1
'ss' : 1
street : 2
'Gürzenichstraße' : 1
street.casefold() : 1
'gürzenichstrasse' : 1
"normalize()" : 4
falsely : 1
differently: : 3
compare_strs(s1 : 1
s2): : 2
NFD(s): : 2
unicodedata.normalize('NFD' : 2
NFD(s1) : 1
NFD(s2) : 1
single_char : 2
multiple_chars : 2
'\N{LATIN : 2
E}\N{COMBINING : 2
ACCENT}' : 2
print('length : 2
string=' : 2
len(single_char)) : 1
len(multiple_chars)) : 1
print(compare_strs(single_char : 1
multiple_chars)) : 2
compare-strs.py : 1
string= : 2
'NFC' : 3
'NFKC' : 3
'NFD' : 3
'NFKD' : 3
compare_caseless(s1 : 1
NFD(NFD(s1).casefold()) : 1
NFD(NFD(s2).casefold()) : 1
print(compare_caseless(single_char : 1
(Why : 1
"NFD()" : 1
non-normalized : 1
"'Nd'" : 1
numerals: : 1
"Over : 1
\u0e55\u0e57 : 1
flavours" : 1
p.search(s) : 1
print(repr(m.group())) : 1
"\d+" : 3
"57" : 1
Pragmatic : 1
Unicode" : 1
(PDF : 1
slides) : 1
EuroPython : 1
slides : 4
"u") : 1
transmission : 12
destinations; : 1
"bytes.decode(encoding)" : 1
arbitrary-sized : 1
large; : 1
memory.) : 2
"open()"'s : 1
open('unicode.txt' : 1
print(repr(line)) : 1
open('test' : 1
mode='w+') : 1
f.write('\u4500 : 1
blah : 4
blah\n') : 1
f.seek(0) : 1
print(repr(f.readline()[:1])) : 1
"U+FEFF" : 6
'utf-16-le' : 1
'utf-16-be' : 1
"BOM" : 2
'utf-8-sig' : 1
converging : 1
'filename\u4500abc' : 2
f.write('blah\n') : 1
issue: : 2
open(fn : 1
print(os.listdir(b'.')) : 1
print(os.listdir('.')) : 1
listdir-test.py : 1
[b'filename\xe4\x94\x80abc' : 1
['filename\u4500abc' : 1
tip : 1
decoding: : 2
bijective : 1
bytestream : 1
"StreamRecoder" : 6
new_f : 1
codecs.StreamRecoder(f : 1
en/decoder: : 1
codecs.getencoder('utf-8') : 1
codecs.getdecoder('utf-8') : 1
reader/writer: : 1
codecs.getreader('latin-1') : 1
codecs.getwriter('latin-1') : 1
open(fname : 2
encoding="ascii" : 2
errors="surrogateescape") : 2
'.new' : 1
f.write(data) : 3
U+DC80 : 2
U+DCFF : 2
Lemburg's : 1
"Writing : 1
localize : 1
Guts : 1
Bastin : 1
Gedminas : 1
Krugler : 1
Whitacre : 1
Wideman : 1
"devpoll()" : 4
2.5+ : 1
sockets; : 2
select.error : 1
select.devpoll() : 1
derivatives.) : 1
select.epoll(sizehint=- : 1
flags=0) : 17
2.5.44 : 1
Triggered : 1
informs : 2
epoll : 8
"epoll_create1()" : 1
"select.EPOLL_CLOEXEC" : 2
epolling : 1
select.poll() : 1
unregistering : 1
select.kqueue() : 1
BSD.) : 2
select.kevent(ident : 1
filter=KQ_FILTER_READ : 1
flags=KQ_EV_ADD : 1
fflags=0 : 1
data=0 : 1
udata=0) : 1
kevent : 4
select.select(rlist : 1
wlist : 1
xlist[ : 1
timeout]) : 10
'waitable : 1
objects': : 1
*rlist*: : 1
*wlist*: : 1
*xlist*: : 1
"exceptional : 1
condition" : 1
condition) : 2
ready: : 1
"os.popen()") : 1
"socket.socket()" : 1
*wrapper* : 2
rationale) : 24
O(highest : 2
O(number : 2
O(active : 1
devpoll.close() : 1
devpoll.closed : 1
devpoll.fileno() : 1
devpoll.register(fd[ : 1
eventmask]) : 4
*eventmask* : 3
"POLLIN" : 5
"POLLPRI" : 3
"POLLOUT" : 5
Registering : 5
devpoll.modify(fd[ : 1
"unregister()" : 2
devpoll.unregister(fd) : 1
devpoll.poll([timeout]) : 1
Polls : 2
"(fd : 2
event)" : 2
*event* : 12
https://linux.die.net/man/4/epoll : 1
+---------------------------+-------------------------------------------------+ : 24
|===========================|=================================================| : 3
"EPOLLIN" : 2
"EPOLLOUT" : 2
"EPOLLPRI" : 1
Urgent : 1
"EPOLLERR" : 1
assoc : 2
"EPOLLHUP" : 1
Hang : 1
"EPOLLET" : 1
"EPOLLONESHOT" : 1
"EPOLLEXCLUSIVE" : 2
Wake : 4
"EPOLLRDHUP" : 1
"EPOLLRDNORM" : 1
"EPOLLRDBAND" : 1
band : 2
"EPOLLWRNORM" : 1
"EPOLLWRBAND" : 1
"EPOLLMSG" : 1
epoll.close() : 1
epoll.closed : 1
epoll.fileno() : 1
epoll.fromfd(fd) : 1
epoll.register(fd[ : 1
epoll.modify(fd : 1
eventmask) : 2
epoll.unregister(fd) : 1
epoll.poll(timeout=None : 1
maxevents=- : 1
(float) : 4
scalability : 1
bitmap : 15
afterward : 1
linearly : 5
scanned : 8
poll.register(fd[ : 1
urgent : 1
Ready : 2
"POLLERR" : 1
"POLLHUP" : 1
Hung : 1
"POLLRDHUP" : 1
"POLLNVAL" : 1
poll.modify(fd : 1
Modifies : 2
"register(fd : 1
"ENOENT" : 2
poll.unregister(fd) : 1
poll.poll([timeout]) : 1
kqueue.close() : 1
kqueue.closed : 1
kqueue.fileno() : 1
kqueue.fromfd(fd) : 1
kqueue.control(changelist : 1
max_events[ : 1
eventlist : 1
Low : 3
changelist : 1
max_events : 1
(floats : 1
possible); : 1
https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2 : 1
kevent.ident : 1
ident : 4
kevent.filter : 1
+-----------------------------+-----------------------------------------------+ : 20
|=============================|===============================================| : 2
"KQ_FILTER_READ" : 2
"KQ_FILTER_WRITE" : 2
"KQ_FILTER_AIO" : 1
AIO : 1
"KQ_FILTER_VNODE" : 2
*fflag* : 1
"KQ_FILTER_PROC" : 2
"KQ_FILTER_NETDEV" : 2
[not : 1
macOS] : 1
"KQ_FILTER_SIGNAL" : 1
"KQ_FILTER_TIMER" : 1
Establishes : 2
kevent.flags : 1
"KQ_EV_ADD" : 1
"KQ_EV_DELETE" : 1
"KQ_EV_ENABLE" : 1
Permitscontrol() : 1
"KQ_EV_DISABLE" : 1
Disablesevent : 1
"KQ_EV_ONESHOT" : 1
"KQ_EV_CLEAR" : 1
"KQ_EV_SYSFLAGS" : 1
"KQ_EV_FLAG1" : 1
"KQ_EV_EOF" : 1
"KQ_EV_ERROR" : 1
kevent.fflags : 1
+------------------------------+----------------------------------------------+ : 23
|==============================|==============================================| : 4
"KQ_NOTE_LOWAT" : 1
"KQ_NOTE_DELETE" : 1
*unlink()* : 1
"KQ_NOTE_WRITE" : 1
"KQ_NOTE_EXTEND" : 1
"KQ_NOTE_ATTRIB" : 1
"KQ_NOTE_LINK" : 1
"KQ_NOTE_RENAME" : 1
"KQ_NOTE_REVOKE" : 1
revoked : 1
"KQ_NOTE_EXIT" : 1
"KQ_NOTE_FORK" : 1
*fork()* : 2
"KQ_NOTE_EXEC" : 1
"KQ_NOTE_PCTRLMASK" : 1
"KQ_NOTE_PDATAMASK" : 1
"KQ_NOTE_TRACK" : 1
"KQ_NOTE_CHILD" : 1
*NOTE_TRACK* : 1
"KQ_NOTE_TRACKERR" : 1
macOS): : 1
"KQ_NOTE_LINKUP" : 1
"KQ_NOTE_LINKDOWN" : 1
"KQ_NOTE_LINKINV" : 1
kevent.data : 1
kevent.udata : 1
code:** : 239
Lib/http/__init__.py : 1
Protocol: : 1
client; : 1
"enum.IntEnum" : 9
HTTPStatus.OK.value : 1
HTTPStatus.OK.phrase : 1
'OK' : 1
HTTPStatus.OK.description : 1
follows' : 1
list(HTTPStatus) : 1
[HTTPStatus.CONTINUE : 1
HTTPStatus.SWITCHING_PROTOCOLS : 1
IANA-registered : 2
+---------+-------------------------------------+---------------------------------------------------------------------------------+ : 63
|=========|=====================================|=================================================================================| : 1
7231** : 43
"101" : 1
"SWITCHING_PROTOCOLS" : 1
"102" : 1
"PROCESSING" : 1
WebDAV : 8
2518** : 1
"103" : 1
"EARLY_HINTS" : 1
Indicating : 1
8297** : 1
"200" : 2
"201" : 1
"202" : 1
"ACCEPTED" : 1
"203" : 1
"NON_AUTHORITATIVE_INFORMATION" : 1
"204" : 1
"NO_CONTENT" : 1
6.3.5 : 1
"205" : 1
"RESET_CONTENT" : 1
6.3.6 : 1
"206" : 1
"PARTIAL_CONTENT" : 1
7233** : 2
"207" : 1
"MULTI_STATUS" : 1
4918** : 5
"208" : 1
"ALREADY_REPORTED" : 1
5842** : 2
(Experimental) : 5
"226" : 1
"IM_USED" : 1
Delta : 5
3229** : 1
10.4.1 : 1
"300" : 1
"MULTIPLE_CHOICES" : 1
"301" : 1
"MOVED_PERMANENTLY" : 1
"302" : 1
"FOUND" : 1
"303" : 1
"SEE_OTHER" : 1
6.4.4 : 1
"304" : 2
"NOT_MODIFIED" : 1
7232** : 2
"305" : 1
"USE_PROXY" : 1
6.4.5 : 1
"307" : 1
"TEMPORARY_REDIRECT" : 1
6.4.7 : 1
"308" : 1
"PERMANENT_REDIRECT" : 1
Permanent : 1
Redirect : 2
7238** : 1
"400" : 2
"BAD_REQUEST" : 1
6.5.1 : 1
"UNAUTHORIZED" : 1
7235** : 2
"402" : 1
"PAYMENT_REQUIRED" : 1
6.5.2 : 1
"403" : 1
"FORBIDDEN" : 1
6.5.3 : 1
"NOT_FOUND" : 1
6.5.4 : 1
"405" : 1
"METHOD_NOT_ALLOWED" : 1
6.5.5 : 1
"406" : 1
"NOT_ACCEPTABLE" : 1
6.5.6 : 1
"407" : 1
"PROXY_AUTHENTICATION_REQUIRED" : 1
"408" : 1
"REQUEST_TIMEOUT" : 1
6.5.7 : 1
"409" : 1
"CONFLICT" : 1
6.5.8 : 1
"410" : 1
"GONE" : 1
6.5.9 : 1
"411" : 1
"LENGTH_REQUIRED" : 1
6.5.10 : 1
"412" : 1
"PRECONDITION_FAILED" : 1
"413" : 1
"REQUEST_ENTITY_TOO_LARGE" : 1
6.5.11 : 1
"414" : 1
"REQUEST_URI_TOO_LONG" : 1
6.5.12 : 1
"415" : 1
"UNSUPPORTED_MEDIA_TYPE" : 1
6.5.13 : 1
"416" : 1
"REQUESTED_RANGE_NOT_SATISFIABLE" : 1
Requests : 6
"417" : 1
"EXPECTATION_FAILED" : 1
6.5.14 : 1
"418" : 1
"IM_A_TEAPOT" : 1
HTCPCP/1.0 : 1
2324** : 1
"421" : 1
"MISDIRECTED_REQUEST" : 1
7540** : 1
9.1.2 : 1
"422" : 1
"UNPROCESSABLE_ENTITY" : 1
"423" : 1
"LOCKED" : 1
"424" : 1
"FAILED_DEPENDENCY" : 1
"425" : 1
"TOO_EARLY" : 1
Early : 1
8470** : 1
"426" : 1
"UPGRADE_REQUIRED" : 1
6.5.15 : 1
"428" : 1
"PRECONDITION_REQUIRED" : 1
6585** : 4
"429" : 1
"TOO_MANY_REQUESTS" : 1
"431" : 1
"REQUEST_HEADER_FIELDS_TOO_LARGE" : 1
"451" : 1
"UNAVAILABLE_FOR_LEGAL_REASONS" : 1
Obstacles : 1
7725** : 1
"500" : 1
"INTERNAL_SERVER_ERROR" : 1
6.6.1 : 1
"501" : 1
"NOT_IMPLEMENTED" : 1
6.6.2 : 1
"502" : 1
"BAD_GATEWAY" : 1
6.6.3 : 1
"503" : 1
"SERVICE_UNAVAILABLE" : 1
6.6.4 : 1
"504" : 1
"GATEWAY_TIMEOUT" : 1
6.6.5 : 1
"505" : 1
"HTTP_VERSION_NOT_SUPPORTED" : 1
6.6.6 : 1
"506" : 1
"VARIANT_ALSO_NEGOTIATES" : 1
Transparent : 1
2295** : 1
"507" : 1
"INSUFFICIENT_STORAGE" : 1
"508" : 1
"LOOP_DETECTED" : 1
"510" : 1
"NOT_EXTENDED" : 1
2774** : 1
"511" : 1
"NETWORK_AUTHENTICATION_REQUIRED" : 1
"http.HTTPStatus.OK" : 1
"http.client.OK") : 1
"421 : 1
MISDIRECTED_REQUEST" : 1
"451 : 1
UNAVAILABLE_FOR_LEGAL_REASONS" : 1
HTTPMethod : 1
HTTPMethod.GET : 2
<HTTPMethod.GET> : 2
'GET' : 2
HTTPMethod.GET.value : 1
HTTPMethod.GET.description : 1
'Retrieve : 2
target.' : 1
list(HTTPMethod) : 1
[<HTTPMethod.CONNECT> : 1
<HTTPMethod.DELETE> : 1
<HTTPMethod.HEAD> : 1
<HTTPMethod.OPTIONS> : 1
<HTTPMethod.PATCH> : 1
<HTTPMethod.POST> : 1
<HTTPMethod.PUT> : 1
<HTTPMethod.TRACE>] : 1
"http.HTTPMethod" : 1
+-------------+-------------------------------------+--------------------------------------------------------------------+ : 10
|=============|=====================================|====================================================================| : 1
4.3.1 : 1
"HEAD" : 6
4.3.2 : 1
4.3.3 : 2
"PUT" : 8
4.3.4 : 1
"DELETE" : 5
4.3.5 : 1
"CONNECT" : 2
4.3.6 : 1
"OPTIONS" : 2
4.3.7 : 1
"TRACE" : 2
4.3.8 : 1
"PATCH" : 2
5789** : 1
**************************************************** : 2
"xmlparser" : 10
xml.parsers.expat.ExpatError : 1
xml.parsers.expat.error : 1
"ExpatError" : 4
xml.parsers.expat.XMLParserType : 1
"ParserCreate()" : 1
xml.parsers.expat.ErrorString(errno) : 1
*errno* : 3
xml.parsers.expat.ParserCreate(encoding=None : 1
namespace_separator=None) : 1
extended; : 1
(Latin1) : 1
*namespace_separator* : 2
omission) : 1
"StartElementHandler" : 3
"EndElementHandler" : 2
("chr(0)") : 1
("' : 1
'") : 1
parsed: : 1
<?xml : 7
version="1.0"?> : 8
<root : 1
"http://default-namespace.org/" : 1
xmlns:py : 1
"http://www.python.org/ns/"> : 1
<py:elem1 : 1
<elem2 : 1
xmlns="" : 1
</root> : 1
element: : 12
http://default-namespace.org/ : 1
http://www.python.org/ns/ : 1
elem1 : 1
elem2 : 1
"Expat" : 1
"ParserCreate" : 1
xmlparser.Parse(data[ : 1
isfinal]) : 1
Parses : 9
*isfinal* : 1
xmlparser.ParseFile(file) : 1
"read(nbytes)" : 1
xmlparser.SetBase(base) : 1
"ExternalEntityRefHandler()" : 2
"NotationDeclHandler()" : 1
"UnparsedEntityDeclHandler()" : 1
xmlparser.GetBase() : 1
"SetBase()" : 3
xmlparser.GetInputContext() : 1
xmlparser.ExternalEntityParserCreate(context[ : 1
encoding]) : 1
"child" : 2
"ordered_attributes" : 3
"specified_attributes" : 1
xmlparser.SetParamEntityParsing(flag) : 1
subset) : 2
*flag* : 51
"XML_PARAM_ENTITY_PARSING_NEVER" : 1
"XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE" : 1
"XML_PARAM_ENTITY_PARSING_ALWAYS" : 1
xmlparser.UseForeignDTD([flag]) : 1
"ExternalEntityRefHandler" : 2
"StartDoctypeDeclHandler" : 1
"EndDoctypeDeclHandler" : 1
"Parse()" : 2
"ParseFile()" : 2
"errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING]" : 1
xmlparser.buffer_size : 1
xmlparser.buffer_text : 1
"CharacterDataHandler()" : 1
xmlparser.buffer_used : 1
xmlparser.ordered_attributes : 1
presented: : 1
(Older : 1
xmlparser.specified_attributes : 1
xmlparser.ErrorByteIndex : 1
xmlparser.ErrorCode : 1
"ErrorString()" : 1
xmlparser.ErrorColumnNumber : 1
xmlparser.ErrorLineNumber : 1
callback) : 7
xmlparser.CurrentByteIndex : 1
xmlparser.CurrentColumnNumber : 1
xmlparser.CurrentLineNumber : 1
"o.handlername : 1
func" : 1
*handlername* : 1
xmlparser.XmlDeclHandler(version : 1
standalone) : 1
"standalone" : 2
*standalone* : 7
1.95.0 : 3
xmlparser.StartDoctypeDeclHandler(doctypeName : 1
systemId : 6
publicId : 6
has_internal_subset) : 1
("<!DOCTYPE : 1
*doctypeName* : 1
*systemId* : 5
*publicId* : 6
*has_internal_subset* : 1
xmlparser.EndDoctypeDeclHandler() : 1
xmlparser.ElementDeclHandler(name : 1
model) : 1
*model* : 1
xmlparser.AttlistDeclHandler(elname : 1
attname : 1
*elname* : 1
*attname* : 1
*type*; : 1
"'CDATA'" : 2
"'ID'" : 1
"'IDREF'" : 1
("#IMPLIED" : 1
*required* : 6
xmlparser.StartElementHandler(name : 1
*attributes* : 5
description) : 3
xmlparser.EndElementHandler(name) : 1
xmlparser.ProcessingInstructionHandler(target : 1
xmlparser.CharacterDataHandler(data) : 1
ignorable : 10
"StartCdataSectionHandler" : 1
"EndCdataSectionHandler" : 2
"ElementDeclHandler" : 1
xmlparser.UnparsedEntityDeclHandler(entityName : 1
notationName) : 2
unparsed : 7
(NDATA) : 1
"EntityDeclHandler" : 1
obsolete.) : 1
xmlparser.EntityDeclHandler(entityName : 1
is_parameter_entity : 1
entity; : 2
*notationName* : 2
*is_parameter_entity* : 1
entities) : 2
xmlparser.NotationDeclHandler(notationName : 1
publicId) : 2
xmlparser.StartNamespaceDeclHandler(prefix : 1
uri) : 6
xmlparser.EndNamespaceDeclHandler(prefix) : 1
"StartNamespaceDeclHandler" : 1
declaration's : 1
xmlparser.CommentHandler(data) : 1
"'<!-""-'" : 1
"'-""->'" : 1
xmlparser.StartCdataSectionHandler() : 1
xmlparser.EndCdataSectionHandler() : 1
xmlparser.DefaultHandler(data) : 1
xmlparser.DefaultHandlerExpand(data) : 1
"DefaultHandler()" : 1
inhibit : 2
xmlparser.NotStandaloneHandler() : 1
"XML_ERROR_NOT_STANDALONE" : 1
xmlparser.ExternalEntityRefHandler(context : 1
sub-parser : 5
"ExternalEntityParserCreate(context)" : 1
"XML_ERROR_EXTERNAL_ENTITY_HANDLING" : 1
"DefaultHandler" : 1
ExpatError.code : 1
Expat's : 2
"errors.messages" : 1
xml.parsers.expat : 2
ParserCreate : 1
ParserCreate() : 1
p.Parse(some_xml_document) : 1
print("Error:" : 1
errors.messages[err.code]) : 1
"codes" : 1
ExpatError.lineno : 1
ExpatError.offset : 1
start_element(name : 1
print('Start : 1
attrs) : 6
end_element(name): : 1
print('End : 2
char_data(data): : 1
print('Character : 1
data:' : 1
repr(data)) : 3
xml.parsers.expat.ParserCreate() : 1
p.StartElementHandler : 1
start_element : 1
p.EndElementHandler : 1
end_element : 1
p.CharacterDataHandler : 1
char_data : 1
p.Parse("""<?xml : 1
<parent : 1
id="top"><child1 : 1
name="paul">Text : 1
here</child1> : 1
<child2 : 1
name="fred">More : 1
text</child2> : 1
</parent>""" : 1
'top'} : 1
child1 : 4
'paul'} : 1
'Text : 3
child2 : 4
'fred'} : 1
'More : 1
text' : 7
Children : 3
"xml.parsers.expat.model" : 1
xml.parsers.expat.model.XML_CTYPE_ANY : 1
xml.parsers.expat.model.XML_CTYPE_CHOICE : 1
xml.parsers.expat.model.XML_CTYPE_EMPTY : 1
"EMPTY" : 1
xml.parsers.expat.model.XML_CTYPE_MIXED : 1
xml.parsers.expat.model.XML_CTYPE_NAME : 1
xml.parsers.expat.model.XML_CTYPE_SEQ : 1
Models : 1
xml.parsers.expat.model.XML_CQUANT_NONE : 1
xml.parsers.expat.model.XML_CQUANT_OPT : 1
"A?" : 1
xml.parsers.expat.model.XML_CQUANT_PLUS : 1
"A+") : 1
xml.parsers.expat.model.XML_CQUANT_REP : 1
"A*" : 1
constants' : 1
"errors.codes[errors.XML_ERROR_*CONSTANT_NAME*]" : 1
xml.parsers.expat.errors.codes : 1
xml.parsers.expat.errors.messages : 1
xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY : 1
xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF : 1
xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF : 1
'"&#0;"') : 1
xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF : 1
xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE : 1
xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING : 1
xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN : 1
Raised : 80
xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT : 1
xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI : 1
xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS : 1
(XML : 3
element). : 1
xml.parsers.expat.errors.XML_ERROR_NO_MEMORY : 1
xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF : 1
xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR : 1
xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF : 1
xml.parsers.expat.errors.XML_ERROR_SYNTAX : 1
xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH : 1
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN : 1
xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY : 1
xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING : 1
xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION : 1
xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING : 1
xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE : 1
"NotStandaloneHandler" : 1
xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE : 1
xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE : 1
xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD : 1
xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING : 1
behavioral : 1
(currently) : 1
"UseForeignDTD()" : 1
xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX : 1
undeclared : 1
xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX : 1
xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE : 1
xml.parsers.expat.errors.XML_ERROR_XML_DECL : 1
xml.parsers.expat.errors.XML_ERROR_TEXT_DECL : 1
xml.parsers.expat.errors.XML_ERROR_PUBLICID : 1
xml.parsers.expat.errors.XML_ERROR_SUSPENDED : 1
xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED : 1
xml.parsers.expat.errors.XML_ERROR_ABORTED : 1
xml.parsers.expat.errors.XML_ERROR_FINISHED : 1
xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE : 1
xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML : 1
undeclare : 2
xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS : 1
"xmlns" : 2
xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI : 1
xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT : 1
xml.parsers.expat.errors.XML_ERROR_NO_BUFFER : 1
xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH : 1
amplification : 1
breached : 1
"UTF8" : 3
https://www.w3.org/TR/2006/REC-xml11-20060816/#NT- : 2
EncodingDecl : 2
https://www.iana.org/assignments/character-sets : 2
/character-sets.xhtml : 2
configparser.__name__ : 1
'configparser' : 1
process.__name__ : 1
'concurrent.futures.process' : 1
"Top-level : 1
"top-level" : 1
*entry : 1
point* : 1
helloworld.py : 1
tarfile.py : 1
(...) : 2
this" : 2
Beautiful : 6
__name___ : 1
echo(phrase: : 1
print.""" : 1
print(phrase) : 1
"""Echo : 1
output""" : 1
shlex.join(sys.argv) : 1
echo(phrase) : 1
sys.exit : 2
"phrase" : 1
"echo.py" : 2
"sys.exit()"; : 1
proactively : 1
echo.py") : 1
entry-point : 1
pip-installable : 1
exemplifies : 1
"sys.exit(main())" : 1
"bandclass": : 1
bandclass : 2
├── : 55
__main__.py : 1
└── : 19
student.py : 1
teacher : 1
students: : 1
bandclass/__main__.py : 1
.student : 2
search_students : 1
student_name : 1
sys.argv[2] : 1
len(sys.argv) : 4
print(f'Found : 1
{search_students(student_name)}') : 1
search_students" : 1
fenced : 1
unit-tested : 1
asyncio.__main__ : 1
asyncio.__main__.__name__ : 1
'asyncio.__main__' : 1
[directory]" : 1
*.zip* : 1
(*namespace*) : 1
namespace: : 2
namely.py : 1
did_user_define_their_name(): : 2
'my_name' : 2
dir(__main__) : 1
print_user_name(): : 1
ValueError('Define : 1
`my_name`!') : 1
dir(__main__): : 1
print(__main__.my_name : 1
"found : 1
__main__.__file__) : 1
print(__main__.my_name) : 1
print_user_name : 1
my_name : 2
"Dinsdale" : 1
print_user_name() : 1
ve: : 1
str(ve) : 1
`my_name` : 2
Uncommenting : 1
"my_name : 1
"Dinsdale"" : 1
success: : 1
Dinsdale : 1
/path/to/start.py : 1
"__main__"" : 1
"namely" : 3
"start") : 1
namely.did_user_define_their_name() : 2
namely.print_user_name() : 2
'Jabberwocky' : 1
Jabberwocky : 1
Lib/aifc.py : 1
AIFF-C : 6
Interchange : 5
digital : 10
sampled : 3
mono : 11
quadro : 1
"nchannels : 2
samplesize" : 1
second's : 2
samplesize : 1
framerate" : 1
CD : 10
(16 : 1
(stereo) : 1
44,100 : 1
frames/second : 1
(2*2) : 1
2*2*44100 : 1
(176,400 : 1
aifc.open(file : 1
mode=None) : 2
"file.mode" : 2
"setnframes()" : 2
aifc.getnchannels() : 1
stereo) : 3
aifc.getsampwidth() : 1
aifc.getframerate() : 1
aifc.getnframes() : 1
aifc.getcomptype() : 1
"b'NONE'" : 2
aifc.getcompname() : 1
convertible : 3
"b'not : 1
compressed'" : 3
aifc.getparams() : 1
"(nchannels : 5
sampwidth : 6
framerate : 6
nframes : 5
comptype : 6
compname)" : 5
"get*()" : 5
aifc.getmarkers() : 1
aifc.getmark(id) : 1
"getmarkers()" : 1
aifc.readframes(nframes) : 1
*nframes* : 12
aifc.rewind() : 1
Rewind : 3
"readframes()" : 2
aifc.setpos(pos) : 1
Seek : 1
aifc.tell() : 2
aifc.close() : 2
"setpos()" : 2
"set*()" : 3
aifc.aiff() : 1
"'.aiff'" : 2
aifc.aifc() : 1
aifc.setnchannels(nchannels) : 1
aifc.setsampwidth(width) : 1
aifc.setframerate(rate) : 1
aifc.setnframes(nframes) : 1
aifc.setcomptype(type : 1
"b'ULAW'" : 1
"b'ALAW'" : 1
"b'G722'" : 1
aifc.setparams(nchannels : 1
compname) : 1
"setparams()" : 2
aifc.setmark(id : 1
(larger : 1
"setmark()" : 1
aifc.writeframes(data) : 1
aifc.writeframesraw(data) : 1
Lib/sunau.py : 1
interface-compatible : 1
+-----------------+-------------------------------------------------+ : 8
|=================|=================================================| : 1
".snd" : 2
(padded : 1
sunau.open(file : 1
"AU_read" : 1
"AU_write" : 1
sunau.Error : 1
deficiency : 2
sunau.AUDIO_FILE_MAGIC : 1
sunau.AUDIO_FILE_ENCODING_MULAW_8 : 1
sunau.AUDIO_FILE_ENCODING_LINEAR_8 : 1
sunau.AUDIO_FILE_ENCODING_LINEAR_16 : 1
sunau.AUDIO_FILE_ENCODING_LINEAR_24 : 1
sunau.AUDIO_FILE_ENCODING_LINEAR_32 : 1
sunau.AUDIO_FILE_ENCODING_ALAW_8 : 1
sunau.AUDIO_FILE_ENCODING_FLOAT : 1
sunau.AUDIO_FILE_ENCODING_DOUBLE : 1
sunau.AUDIO_FILE_ENCODING_ADPCM_G721 : 1
sunau.AUDIO_FILE_ENCODING_ADPCM_G722 : 1
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3 : 1
sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5 : 1
AU_read.close() : 1
deletion.) : 1
AU_read.getnchannels() : 1
AU_read.getsampwidth() : 1
AU_read.getframerate() : 1
AU_read.getnframes() : 1
AU_read.getcomptype() : 1
"'ULAW'" : 2
"'ALAW'" : 1
"'NONE'" : 3
AU_read.getcompname() : 1
Human-readable : 3
"getcomptype()" : 2
"'CCITT : 2
G.711 : 2
u-law'" : 1
A-law'" : 1
"'not : 2
AU_read.getparams() : 1
AU_read.readframes(n) : 1
AU_read.rewind() : 1
AU_read.setpos(pos) : 1
AU_read.tell() : 1
AU_read.getmarkers() : 1
AU_read.getmark(id) : 1
AU_write.setnchannels(n) : 1
AU_write.setsampwidth(n) : 1
bytes.) : 2
AU_write.setframerate(n) : 1
AU_write.setnframes(n) : 1
AU_write.setcomptype(type : 1
AU_write.setparams(tuple) : 1
AU_write.tell() : 1
"AU_read.tell()" : 1
"AU_read.setpos()" : 1
AU_write.writeframesraw(data) : 1
correcting : 2
AU_write.writeframes(data) : 1
AU_write.close() : 1
************************************************************* : 1
Lib/urllib/error.py : 1
"URLError") : 3
urllib.error.ContentTooShortError(msg : 1
content) : 1
*Content-Length* : 5
header) : 7
"content" : 2
truncated) : 2
Lib/imp.py : 1
imp.get_magic() : 1
version.) : 1
"importlib.util.MAGIC_NUMBER" : 1
imp.get_suffixes() : 1
3-element : 6
"(suffix : 1
*suffix* : 22
"PY_SOURCE" : 1
"PY_COMPILED" : 1
"C_EXTENSION" : 1
imp.find_module(name[ : 1
path]) : 2
searched: : 2
("C_BUILTIN") : 1
("PY_FROZEN") : 1
"get_suffixes()" : 3
"(file : 2
description)": : 1
"PKG_DIRECTORY" : 1
(names : 1
dots) : 1
*P.M* : 1
*M* : 1
*P* : 3
"P.__path__" : 1
"importlib.util.find_spec()" : 5
imp.load_module(name : 2
conducted : 1
results) : 2
**Important:** : 2
"imp.find_module()" : 2
"imp.load_module()" : 1
"importlib.util.module_from_spec()" : 3
imp.new_module(name) : 1
imp.reload(module) : 1
"reload(module)" : 1
reexecuted : 1
reclaimed : 3
caveats: : 3
Redefinitions : 2
table's : 5
desired: : 2
re-execute : 3
(*module*.*name*) : 1
Relies : 2
imp.cache_from_source(path : 1
debug_override=None) : 1
"/foo/bar/baz.py" : 7
"/foo/bar/__pycache__/baz.cpython-32.pyc" : 6
"cpython-32" : 2
"get_tag()"; : 2
imp.source_from_cache(path) : 1
imp.lock_held() : 1
imp.acquire_lock() : 1
blocking; : 3
imp.release_lock() : 1
imp.PY_SOURCE : 1
imp.PY_COMPILED : 1
imp.C_EXTENSION : 1
imp.PKG_DIRECTORY : 1
imp.C_BUILTIN : 1
imp.PY_FROZEN : 1
imp.NullImporter(path_string) : 1
"NullImporter" : 3
non-directory : 6
find_module(fullname[ : 1
*implementation* : 2
1.4.) : 1
__import__(name : 2
globals=None : 14
locals=None : 8
fromlist=None): : 1
sys.modules[name] : 3
fp : 26
imp.find_module(name) : 1
fp: : 16
fp.close() : 2
Lib/plistlib.py : 1
"property : 1
iOS : 1
(".plist") : 1
"UID" : 1
NSKeyedArchiver : 2
NSKeyedUnarchiver : 1
PList : 2
plistlib.load(fp : 1
fmt=None : 3
dict_type=dict) : 2
*fmt* : 11
Autodetect : 1
"FMT_XML": : 2
"FMT_BINARY": : 2
*dict_type* : 6
"FMT_XML" : 1
plistlib.loads(data : 1
plistlib.dump(value : 1
fmt=FMT_XML : 2
sort_keys=True : 3
skipkeys=False) : 2
*Fp* : 1
*sort_keys* : 3
*skipkeys* : 4
plistlib.dumps(value : 1
plist-formatted : 1
plistlib.UID(data) : 1
manual) : 2
2**64" : 1
plistlib.FMT_XML : 1
plistlib.FMT_BINARY : 1
plist: : 2
pl : 2
dict( : 2
aString : 1
"Doodah" : 1
aList : 1
["A" : 2
32.1 : 1
aFloat : 1
anInt : 1
728 : 1
aDict : 1
anotherString : 1
"<hello : 1
hi : 1
there!>" : 1
aThirdString : 1
"M\xe4ssig : 1
Ma\xdf" : 1
aTrueValue : 1
aFalseValue : 1
someData : 1
b"<binary : 1
gunk>" : 2
someMoreData : 1
b"<lots : 1
aDate : 1
print(plistlib.dumps(pl).decode()) : 1
b"""<plist : 1
<dict> : 1
<key>foo</key> : 1
<string>bar</string> : 1
</dict> : 1
</plist>""" : 1
plistlib.loads(plist) : 1
print(pl["foo"]) : 1
Lib/codecs.py : 1
(encoders : 1
decoders) : 1
encodings* : 3
codec: : 1
codecs.encode(obj : 1
errors='strict') : 18
Encodes : 6
*Errors* : 2
"UnicodeEncodeError") : 1
codecs.decode(obj : 1
Decodes : 4
"UnicodeDecodeError") : 1
codecs.lookup(encoding) : 1
codecs.CodecInfo(encode : 1
streamreader=None : 1
streamwriter=None : 1
incrementalencoder=None : 1
incrementaldecoder=None : 1
name=None) : 6
stateless : 11
incrementalencoder : 1
incrementaldecoder : 1
streamwriter : 1
streamreader : 1
"lookup()" : 3
codecs.getencoder(encoding) : 1
codecs.getdecoder(encoding) : 1
codecs.getincrementalencoder(encoding) : 1
codecs.getincrementaldecoder(encoding) : 1
codecs.getreader(encoding) : 1
codecs.getwriter(encoding) : 1
codecs.register(search_function) : 1
Hyphens : 1
codecs.unregister(search_function) : 1
codecs.open(filename : 1
errors='strict' : 6
buffering=- : 8
"StreamReaderWriter" : 4
codecs.EncodedFile(file : 1
data_encoding : 1
file_encoding=None : 1
*data_encoding* : 3
*file_encoding* : 3
codecs.iterencode(iterator : 1
bytes-to-bytes : 3
"base64_codec" : 1
codecs.iterdecode(iterator : 1
text-to-text : 1
"rot_13" : 3
"iterencode()" : 1
codecs.BOM : 1
codecs.BOM_BE : 1
codecs.BOM_LE : 1
codecs.BOM_UTF8 : 1
codecs.BOM_UTF16 : 1
codecs.BOM_UTF16_BE : 1
codecs.BOM_UTF16_LE : 1
codecs.BOM_UTF32 : 1
codecs.BOM_UTF32_BE : 1
codecs.BOM_UTF32_LE : 1
(BOMs) : 1
"BOM_UTF16" : 2
"BOM_UTF16_BE" : 2
"BOM_UTF16_LE" : 2
"BOM_LE" : 1
"BOM_BE" : 1
standardize : 1
'German : 2
ß : 2
♬'.encode(encoding='ascii' : 2
errors='backslashreplace') : 1
b'German : 2
\\xdf : 1
\\u266c' : 1
errors='xmlcharrefreplace') : 1
&#223; : 1
&#9836;' : 1
codecs: : 2
"strict_errors()" : 1
"ignore_errors()" : 1
"�" : 2
(U+FFFD : 2
REPLACEMENT : 2
CHARACTER) : 2
"replace_errors()" : 1
backslashed : 4
"backslashreplace_errors()" : 1
"U+DC80" : 1
"U+DCFF" : 1
more.) : 1
encodings*): : 1
XML/HTML : 2
"&#num;" : 2
"xmlcharrefreplace_errors()" : 1
"'namereplace'" : 6
"namereplace_errors()" : 1
+---------------------+--------------------------+---------------------------------------------+ : 2
|=====================|==========================|=============================================| : 1
"'surrogatepass'" : 3
utf-16 : 2
utf-32 : 2
utf-16-be : 1
utf-16-le : 1
("U+D800" : 1
"U+DFFF") : 1
utf-32-be : 1
utf-32-le : 1
utf-16* : 2
utf-32* : 3
codecs.register_error(name : 1
error_handler) : 1
*error_handler* : 4
codecs.lookup_error(name) : 1
codecs.strict_errors(exception) : 1
Implements : 25
codecs.ignore_errors(exception) : 1
Malformed : 3
codecs.replace_errors(exception) : 1
Substitutes : 1
codecs.backslashreplace_errors(exception) : 1
codecs.xmlcharrefreplace_errors(exception) : 1
codecs.namereplace_errors(exception) : 1
"'ß'" : 2
"\N{LATIN : 1
SHARP : 1
S}" : 1
"Codec" : 6
decoder: : 1
Codec.encode(input : 1
(output : 2
"cp1252" : 1
"iso-8859-1") : 2
Codec.decode(input : 1
Encoding/decoding : 1
"encode()"/"decode()" : 2
codecs.IncrementalEncoder(errors='strict') : 1
encode(object : 1
final=False) : 2
(taking : 2
account) : 2
*final* : 3
reset() : 9
".encode(object : 1
final=True)" : 1
getstate() : 2
(States : 1
marshaling/pickling : 2
integer.) : 3
setstate(state) : 2
*state* : 9
"getstate()" : 6
codecs.IncrementalDecoder(errors='strict') : 1
decode(object : 1
undecoded : 1
info.) : 1
feeding : 3
(Additional : 1
"encodings.utf_8" : 1
codecs.StreamWriter(stream : 1
write(object) : 1
writelines(list) : 1
Resets : 9
rescan : 2
codecs.StreamReader(stream : 1
"register_error()" : 1
read(size=- : 6
chars=- : 1
firstline=False) : 1
*chars* : 21
*firstline* : 1
readline(size=None : 1
keepends=True) : 2
*keepends* : 4
readlines(sizehint=None : 1
Line-endings : 1
codec's : 1
repositioning : 1
codecs.StreamReaderWriter(stream : 1
*Reader* : 3
*Writer* : 3
codecs.StreamRecoder(stream : 1
two-way : 2
conversion: : 3
*encode* : 2
*decode* : 6
frontend : 1
transcodings : 1
"U+0000"--"U+10FFFF" : 1
endianness : 5
serialising : 1
*decoding* : 1
collectivity : 1
"'iso-8859-1'") : 1
0--255 : 2
"0x0"--"0xff" : 2
"U+00FF" : 1
differ): : 1
"UnicodeEncodeError: : 1
'latin-1' : 1
'\u1234' : 1
range(256)" : 1
charmap : 3
encodings) : 3
"encodings/cp1252.py" : 1
"UTF-32-BE" : 2
"UTF-32-LE" : 1
"UTF-32" : 4
"UTF-16" : 3
("Byte : 1
Mark") : 1
("0xFFFE") : 1
"U+FFFE" : 1
"ZERO : 4
WIDTH : 4
NO-BREAK : 4
SPACE": : 1
ligature : 1
SPACE" : 3
"U+2060" : 1
("WORD : 1
JOINER") : 1
role) : 1
roles: : 1
+-------------------------------------+------------------------------------------------+ : 5
|=====================================|================================================| : 1
"U-00000000" : 1
"U-0000007F" : 1
0xxxxxxx : 1
"U-00000080" : 1
"U-000007FF" : 1
110xxxxx : 1
10xxxxxx : 6
"U-00000800" : 1
"U-0000FFFF" : 1
1110xxxx : 1
"U-00010000" : 1
"U-0010FFFF" : 1
11110xxx : 1
reliability : 3
""utf-8-sig"") : 1
Notepad : 1
"0xef" : 2
"0xbb" : 2
"0xbf") : 1
improbable : 1
DIAERESIS : 1
RIGHT-POINTING : 1
DOUBLE : 1
ANGLE : 1
INVERTED : 1
QUESTION : 1
iso-8859-1) : 1
"utf-8-sig" : 2
utf-8-sig : 1
"0xbf" : 1
"'utf_8'" : 1
opportunities : 2
(case : 2
insensitive) : 2
iso-8859-1 : 2
iso8859-1 : 2
us-ascii : 2
utf16 : 2
utf32 : 2
dashes : 10
us- : 1
EURO : 1
SIGN : 1
European : 2
8859 : 3
codeset : 2
graphic : 2
+-------------------+----------------------------------+----------------------------------+ : 98
Languages : 1
|===================|==================================|==================================| : 1
big5-tw : 1
csbig5 : 1
big5-hkscs : 1
hkscs : 1
cp037 : 1
IBM037 : 1
IBM039 : 1
cp273 : 1
273 : 2
IBM273 : 1
csIBM273 : 1
cp424 : 1
EBCDIC-CP-HE : 1
IBM424 : 1
cp437 : 1
437 : 1
IBM437 : 1
cp500 : 1
EBCDIC-CP-BE : 1
EBCDIC-CP-CH : 1
Western : 11
Europe : 16
IBM500 : 1
cp720 : 1
cp737 : 1
Greek : 7
cp775 : 1
IBM775 : 1
Baltic : 4
cp850 : 1
IBM850 : 1
cp852 : 1
852 : 1
IBM852 : 1
Central : 6
Eastern : 10
cp855 : 1
855 : 1
IBM855 : 1
Bulgarian : 4
Byelorussian : 4
Macedonian : 4
Serbian : 4
cp856 : 1
cp857 : 1
857 : 1
IBM857 : 1
Turkish : 5
cp858 : 1
858 : 1
IBM858 : 1
cp860 : 1
860 : 1
IBM860 : 1
cp861 : 1
861 : 2
CP-IS : 1
IBM861 : 1
Icelandic : 2
cp862 : 1
862 : 1
IBM862 : 1
cp863 : 1
863 : 1
IBM863 : 1
Canadian : 1
cp864 : 1
IBM864 : 1
cp865 : 1
865 : 1
IBM865 : 1
Danish : 1
Norwegian : 1
cp866 : 1
866 : 1
IBM866 : 1
cp869 : 1
869 : 1
CP-GR : 1
IBM869 : 1
cp874 : 1
cp875 : 1
932 : 1
ms932 : 1
mskanji : 1
ms-kanji : 1
949 : 1
ms949 : 1
uhc : 1
950 : 1
ms950 : 1
cp1006 : 1
Urdu : 1
cp1026 : 1
ibm1026 : 1
cp1125 : 1
1125 : 1
ibm1125 : 1
cp866u : 1
ruscii : 1
cp1140 : 1
ibm1140 : 1
cp1250 : 1
windows-1250 : 1
cp1251 : 1
windows-1251 : 1
windows-1252 : 1
cp1253 : 1
windows-1253 : 1
cp1254 : 1
windows-1254 : 1
cp1255 : 1
windows-1255 : 1
cp1256 : 1
windows-1256 : 1
cp1257 : 1
windows-1257 : 1
cp1258 : 1
windows-1258 : 1
Vietnamese : 1
euc_jp : 1
eucjp : 1
ujis : 1
u-jis : 1
euc_jis_2004 : 1
jisx0213 : 1
eucjis2004 : 1
euc_jisx0213 : 1
eucjisx0213 : 1
euc_kr : 1
euckr : 1
korean : 1
ksc5601 : 1
ks_c-5601 : 1
ks_c-5601-1987 : 1
ksx1001 : 1
ks_x-1001 : 1
chinese : 1
csiso58gb231280 : 1
euc- : 1
cn : 1
euccn : 1
eucgb2312-cn : 1
gb2312-1980 : 1
gb2312-80 : 1
iso- : 1
ir-58 : 1
936 : 1
cp936 : 1
ms936 : 1
gb18030-2000 : 1
hzgb : 1
hz-gb : 1
hz-gb-2312 : 1
iso2022_jp : 1
csiso2022jp : 1
iso2022jp : 1
iso2022_jp_1 : 1
iso2022jp-1 : 1
iso2022_jp_2 : 1
iso2022jp-2 : 1
iso2022_jp_2004 : 1
iso2022jp-2004 : 1
iso2022_jp_3 : 1
iso2022jp-3 : 1
iso2022_jp_ext : 1
iso2022jp-ext : 1
iso2022_kr : 1
csiso2022kr : 1
iso2022kr : 1
latin_1 : 1
cp819 : 1
latin : 1
iso8859_2 : 1
iso-8859-2 : 1
latin2 : 1
iso8859_3 : 1
iso-8859-3 : 1
latin3 : 1
L3 : 1
Esperanto : 1
Maltese : 1
iso8859_4 : 1
iso-8859-4 : 1
latin4 : 1
L4 : 1
iso8859_5 : 1
iso-8859-5 : 1
cyrillic : 1
iso8859_6 : 1
iso-8859-6 : 1
arabic : 1
iso8859_7 : 1
iso-8859-7 : 1
greek : 1
greek8 : 1
iso8859_8 : 1
iso-8859-8 : 1
hebrew : 1
iso8859_9 : 1
iso-8859-9 : 1
latin5 : 1
L5 : 1
iso8859_10 : 1
iso-8859-10 : 1
latin6 : 1
L6 : 1
Nordic : 1
iso8859_11 : 1
iso-8859-11 : 1
thai : 1
iso8859_13 : 1
iso-8859-13 : 1
latin7 : 1
L7 : 1
iso8859_14 : 1
iso-8859-14 : 1
latin8 : 1
L8 : 1
Celtic : 1
iso8859_15 : 1
iso-8859-15 : 1
latin9 : 1
L9 : 1
iso8859_16 : 1
iso-8859-16 : 1
latin10 : 1
L10 : 1
South-Eastern : 1
cp1361 : 1
ms1361 : 1
koi8_r : 1
koi8_u : 1
kz_1048 : 1
strk1048_2002 : 1
rk1048 : 1
mac_cyrillic : 1
maccyrillic : 1
mac_greek : 1
macgreek : 1
mac_iceland : 1
maciceland : 1
maclatin2 : 1
maccentraleurope : 1
mac_centeuro : 1
mac_roman : 1
macroman : 1
macintosh : 1
mac_turkish : 1
macturkish : 1
ptcp154 : 1
csptcp154 : 1
pt154 : 1
cp154 : 1
cyrillic-asian : 1
shift_jis : 1
csshiftjis : 1
shiftjis : 1
sjis : 1
s_jis : 1
shift_jis_2004 : 1
shiftjis2004 : 1
sjis_2004 : 1
sjis2004 : 1
shift_jisx0213 : 1
shiftjisx0213 : 1
sjisx0213 : 1
s_jisx0213 : 1
utf_32 : 1
U32 : 1
utf_32_be : 1
UTF-32BE : 1
utf_32_le : 1
UTF-32LE : 1
utf_16 : 1
U16 : 1
utf_16_be : 1
UTF-16BE : 1
utf_16_le : 1
UTF-16LE : 1
utf_7 : 1
U7 : 1
unicode-1-1-utf-7 : 1
utf_8 : 1
U8 : 1
utf_8_sig : 1
("U+D800"--"U+DFFF") : 1
asymmetric : 1
+----------------------+-----------+-----------------------------+ : 11
|======================|===========|=============================| : 2
idna : 2
3490** : 5
"errors='strict'" : 2
dbcs : 1
(CP_ACP) : 2
OEM : 1
(CP_OEMCP) : 1
palmos : 1
PalmOS : 1
3492** : 2
raw_unicode_escape : 1
"\uXXXX" : 1
"\UXXXXXXXX" : 1
unicode_escape : 1
ASCII- : 1
transforms: : 1
+------------------------+--------------------+--------------------------------+--------------------------------+ : 7
Encoder : 1
|========================|====================|================================|================================| : 1
base64_codec : 1
base_64 : 1
"'\n'") : 1
bz2_codec : 1
Compress : 8
"bz2.compress()" : 1
hex_codec : 1
"binascii.b2a_hex()" : 1
"binascii.a2b_hex()" : 1
quopri_codec : 1
quopri : 1
"quopri.encode()" : 1
quotedprintable : 1
"quotetabs=True" : 1
quoted_printable : 1
"quopri.decode()" : 1
zlib_codec : 1
"'base64_codec'" : 1
Restoration : 4
transform: : 1
rot_13 : 1
Caesar-cypher : 1
"rot13" : 1
Applications) : 1
(Nameprep: : 1
Stringprep : 1
(IDN)) : 1
5891** : 1
5895** : 1
"www.Alliancefrançaise.nu") : 1
(ACE : 1
"www.xn--alliancefranaise-npb.nu") : 1
*Host* : 2
user: : 2
**section : 1
("http.client" : 1
lookup) : 1
nameprep : 2
normalizations : 1
insensitivity : 1
unify : 1
encodings.idna.nameprep(label) : 1
nameprepped : 1
*label* : 3
"AllowUnassigned" : 1
encodings.idna.ToASCII(label) : 1
"UseSTD3ASCIIRules" : 1
encodings.idna.ToUnicode(label) : 1
stream) : 2
there) : 3
purpose; : 1
"persistence" : 1
"pseudo-compiled" : 1
reserve : 2
de-serializing : 2
independence : 2
unmarshal : 1
therein : 3
marshal.dump(value : 1
file[ : 1
version]) : 2
has) : 2
"marshal.dumps" : 2
marshal.load(file) : 1
version's : 2
"marshal.load" : 2
unmarshallable : 1
marshal.dumps(value[ : 1
"dump(value : 1
file)" : 1
"dumps" : 1
marshal.loads(bytes) : 1
"marshal.loads" : 2
marshal.version : 1
instancing : 1
stems : 1
(amongst : 1
"marshalling" : 1
"to : 1
marshal" : 1
"unmarshalling" : 1
Lib/importlib/metadata/__init__.py : 1
(Import : 1
"pkg_resources" : 3
Along : 3
*distribution : 3
"egg-info" : 1
Important: : 7
1:1 : 2
package_distributions() : 1
Through : 1
https://importlib-metadata.readthedocs.io/ : 1
example/bin/activate : 1
(example) : 2
version('wheel') : 2
'0.32.3' : 3
selectable : 2
'group' : 3
"console_scripts" : 2
"distutils.commands" : 1
list(metadata('wheel')) : 1
['Metadata-Version' : 1
'Name' : 1
'Version' : 1
'Summary' : 1
'Home-page' : 1
'Author' : 1
'Author-email' : 1
'Maintainer' : 1
'Maintainer-email' : 1
'License' : 1
'Project-URL' : 3
'Keywords' : 1
'Platform' : 1
'Classifier' : 12
'Requires-Python' : 1
'Provides-Extra' : 1
'Requires-Dist' : 1
'Requires-Dist'] : 1
constituent : 3
".group" : 1
".value" : 2
".load()" : 1
".module" : 1
".attr" : 1
".extras" : 1
eps : 1
entry_points() : 1
"names" : 3
convenience: : 1
sorted(eps.groups) : 1
['console_scripts' : 1
'distutils.commands' : 1
'distutils.setup_keywords' : 1
'egg_info.writers' : 1
'setuptools.installation'] : 1
eps.select(group='console_scripts') : 1
Equivalently : 4
select: : 1
entry_points(group='console_scripts') : 1
project): : 1
'wheel' : 1
scripts.names : 1
scripts['wheel'] : 1
(wheel,) : 2
entry_points(group='console_scripts' : 1
name='wheel') : 2
entry_points().select(group='console_scripts' : 1
EntryPoint(name='wheel' : 1
value='wheel.cli:main' : 1
group='console_scripts') : 1
wheel.module : 1
'wheel.cli' : 1
wheel.attr : 1
'main' : 3
wheel.extras : 1
wheel.load() : 1
0x103528488> : 1
*Compatibility : 1
Note* : 1
"selectable" : 1
entry_points : 1
"SelectableGroups" : 1
wheel_metadata : 1
metadata('wheel') : 1
wheel_metadata['Requires-Python'] : 1
'>=2.7 : 3
!=3.0.* : 3
!=3.1.* : 3
!=3.2.* : 3
!=3.3.*' : 3
566**: : 1
wheel_metadata.json['requires_python'] : 1
PackageMetadata : 1
"version()" : 2
Package's : 1
"PackagePath" : 1
"dist" : 2
util : 3
[p : 1
files('wheel') : 1
'util.py' : 1
str(p)][0] : 1
PackagePath('wheel/util.py') : 1
util.size : 1
859 : 1
util.dist : 1
<importlib.metadata._hooks.PathDistribution : 1
0x101e0cef0> : 1
util.hash : 1
<FileHash : 1
bYkw5oMccfazVCoYQwKkkemoVyMAFoR34mmKBx8R1NI> : 1
print(util.read_text()) : 1
as_bytes(s): : 1
isinstance(s : 1
text_type): : 1
s.encode('utf-8') : 1
"locate" : 1
util.locate() : 1
PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py') : 1
(RECORD : 1
SOURCES.txt) : 1
always_iterable : 1
requires('wheel') : 1
["pytest : 1
(>=3.0.0) : 1
'test'" : 1
"pytest-cov : 1
'test'"] : 1
Package: : 1
packages_distributions() : 1
{'importlib_metadata': : 1
['importlib-metadata'] : 1
'yaml': : 1
['PyYAML'] : 1
'jaraco': : 1
['jaraco.classes' : 1
'jaraco.functools'] : 1
distribution('wheel') : 1
dist.version : 1
dist.metadata['Requires-Python'] : 1
dist.metadata['License'] : 1
'MIT' : 4
incidentally : 2
*distributions* : 1
"find_distributions" : 1
"DistributionFinder" : 1
@abc.abstractmethod : 2
find_distributions(context=DistributionFinder.Context()): : 1
``context`` : 1
"DistributionFinder.Context" : 1
"find_distributions()" : 1
Lib/xml/sax/saxutils.py : 1
xml.sax.saxutils.escape(data : 1
entities={}) : 3
"'&'" : 4
*entities* : 4
xml.sax.saxutils.unescape(data : 1
Unescape : 1
"'&amp;'" : 1
"'&lt;'" : 2
"'&gt;'" : 2
unescape : 1
"'&amp'" : 1
xml.sax.saxutils.quoteattr(data : 1
"quoteattr()" : 1
double-quote : 2
double-quotes : 1
print("<element : 1
attr=%s>" : 1
quoteattr("ab : 1
\" : 1
ef")) : 1
<element : 1
attr="ab : 1
&quot; : 1
ef"> : 1
xml.sax.saxutils.XMLGenerator(out=None : 1
encoding='iso-8859-1' : 1
short_empty_elements=False) : 1
"ContentHandler" : 6
"XMLGenerator" : 1
*sys.stdout* : 3
self-closed : 2
xml.sax.saxutils.XMLFilterBase(base) : 1
sit : 9
"XMLReader" : 12
xml.sax.saxutils.prepare_input_source(source : 1
base='') : 1
"InputSource" : 14
Lib/csv.py : 1
(Comma : 1
Separated : 1
Values) : 2
4180** : 1
tabular : 2
"write : 2
Excel," : 2
"read : 1
"writer" : 10
"DictWriter" : 3
csv.reader(csvfile : 3
dialect='excel' : 4
**fmtparams) : 2
*csvfile* : 5
"newline=''" : 4
"Dialect" : 13
"list_dialects()" : 3
*fmtparams* : 3
"QUOTE_NONNUMERIC" : 1
unquoted : 11
open('eggs.csv' : 2
newline='') : 11
csvfile: : 6
spamreader : 1
delimiter=' : 2
quotechar='|') : 1
spamreader: : 1
print(' : 4
'.join(row)) : 1
Spam : 8
Baked : 1
Beans : 3
Wonderful : 1
csv.writer(csvfile : 3
preprocessing : 2
"cursor.fetch*" : 1
spamwriter : 1
quotechar='|' : 1
quoting=csv.QUOTE_MINIMAL) : 1
spamwriter.writerow(['Spam'] : 1
['Baked : 1
Beans']) : 1
spamwriter.writerow(['Spam' : 1
'Lovely : 1
Spam' : 3
'Wonderful : 1
Spam']) : 1
csv.register_dialect(name[ : 1
dialect[ : 1
**fmtparams]]) : 1
sub-class : 3
csv.unregister_dialect(name) : 1
csv.get_dialect(name) : 1
csv.list_dialects() : 1
csv.field_size_limit([new_limit]) : 1
csv.DictReader(f : 1
fieldnames=None : 1
restkey=None : 1
restval=None : 1
*fieldnames* : 7
fieldname : 4
*restkey* : 1
*restval* : 2
Returned : 20
open('names.csv' : 2
csv.DictReader(csvfile) : 1
print(row['first_name'] : 1
row['last_name']) : 1
print(row) : 13
{'first_name': : 2
'last_name': : 5
'Cleese'} : 1
csv.DictWriter(f : 1
restval='' : 1
extrasaction='raise' : 1
"sequence" : 3
*extrasaction* : 1
"'raise'" : 1
['first_name' : 1
'last_name'] : 1
csv.DictWriter(csvfile : 1
fieldnames=fieldnames) : 1
writer.writeheader() : 1
writer.writerow({'first_name': : 3
'Baked' : 1
'Beans'}) : 1
'Lovely' : 1
'Spam'}) : 2
'Wonderful' : 1
doublequotes : 1
("__init__") : 1
open('students.csv' : 1
^^^^^^^^^^^^^^ : 2
csv.excel : 1
"excel" : 1
Excel- : 2
"'excel'" : 1
csv.excel_tab : 1
"excel_tab" : 1
TAB-delimited : 1
"'excel-tab'" : 1
csv.unix_dialect : 1
"'unix'" : 1
csv.Sniffer : 1
"Sniffer" : 3
sniff(sample : 1
delimiters=None) : 1
Analyze : 3
*sample* : 1
has_header(sample) : 1
n-th : 7
putative : 1
Twenty : 1
sampled; : 1
open('example.csv' : 1
csv.Sniffer().sniff(csvfile.read(1024)) : 1
csvfile.seek(0) : 1
dialect) : 1
csv.QUOTE_ALL : 1
Instructs : 6
csv.QUOTE_MINIMAL : 1
*delimiter* : 6
*quotechar* : 7
*lineterminator* : 2
csv.QUOTE_NONNUMERIC : 1
non-numeric : 3
non-quoted : 1
*float* : 1
csv.QUOTE_NONE : 1
csv.Error : 2
Dialect.delimiter : 1
Dialect.doublequote : 1
Dialect.escapechar : 1
*quoting* : 1
"QUOTE_NONE" : 1
Dialect.lineterminator : 1
recognise : 3
Dialect.quotechar : 1
new-line : 1
"'"'" : 4
Dialect.quoting : 1
"QUOTE_*" : 1
Contents) : 2
"QUOTE_MINIMAL" : 1
Dialect.skipinitialspace : 1
Dialect.strict : 1
("DictReader" : 1
csvreader.__next__() : 1
"reader()") : 1
"next(reader)" : 1
csvreader.dialect : 1
csvreader.line_num : 1
DictReader : 1
DictReader.fieldnames : 1
"Writer" : 2
("DictWriter" : 1
"writer()" : 1
*row* : 3
csvwriter.writerow(row) : 1
writer's : 3
*write* : 6
csvwriter.writerows(rows) : 1
*rows* : 1
csvwriter.dialect : 1
DictWriter : 1
DictWriter.writeheader() : 1
constructor) : 10
"csvwriter.writerow()" : 2
open('some.csv' : 3
csv.reader(f) : 3
open('passwd' : 2
csv.reader(f : 2
delimiter=':' : 2
quoting=csv.QUOTE_NONE) : 2
csv.writer(f) : 1
writer.writerows(someiterable) : 1
open: : 1
newline='' : 1
dialect: : 1
csv.register_dialect('unixpwd' : 1
'unixpwd') : 1
'some.csv' : 1
sys.exit('file : 1
{}'.format(filename : 1
reader.line_num : 1
csv.reader(['one,two,three']): : 1
linendings : 1
(*universal*) : 1
Lib/pprint.py : 1
"pretty-print" : 1
Construct : 21
pprint.PrettyPrinter(indent=1 : 1
width=80 : 3
depth=None : 4
stream=None : 2
compact=False : 3
sort_dicts=True : 3
underscore_numbers=False) : 3
"sys.stdout") : 4
printed; : 1
(lists : 7
*underscore_numbers* : 4
['spam' : 3
'lumberjack' : 8
'knights' : 8
'ni'] : 7
stuff.insert(0 : 2
stuff[:]) : 1
pprint.PrettyPrinter(indent=4) : 1
pp.pprint(stuff) : 2
pprint.PrettyPrinter(width=41 : 1
compact=True) : 1
[['spam' : 1
tup : 2
('eggs' : 2
('lumberjack' : 2
('knights' : 2
('ni' : 2
('dead' : 2
('parrot' : 1
('fresh : 1
fruit',)))))))) : 1
pprint.PrettyPrinter(depth=6) : 1
pp.pprint(tup) : 1
(...))))))) : 1
pprint.pformat(object : 1
indent=1 : 2
pprint.pp(object : 1
sort_dicts=False : 1
pprint.pprint(object : 1
pprint.pprint" : 1
stuff) : 1
pprint.pprint(stuff) : 1
[<Recursion : 1
id=...> : 2
pprint.isreadable(object) : 1
"readable" : 2
pprint.isreadable(stuff) : 1
pprint.isrecursive(object) : 1
pprint.saferepr(object) : 1
"<Recursion : 1
typename : 2
id=number>" : 1
pprint.saferepr(stuff) : 1
"[<Recursion : 1
'ni']" : 1
PrettyPrinter.pformat(object) : 1
PrettyPrinter.pprint(object) : 1
PrettyPrinter.isreadable(object) : 1
"readable," : 1
PrettyPrinter.isrecursive(object) : 1
"saferepr()" : 1
PrettyPrinter.format(object : 1
maxlevels : 1
presentation) : 1
*maxlevels* : 3
recursion; : 2
PyPI: : 1
urlopen('https://pypi.org/pypi/sampleproject/json') : 1
resp: : 1
project_info : 1
json.load(resp)['info'] : 1
pprint.pprint(project_info) : 1
{'author': : 3
Authority' : 3
'author_email': : 3
'pypa-dev@googlegroups.com' : 3
'bugtrack_url': : 3
'classifiers': : 3
['Development : 1
Alpha' : 1
MIT : 1
2' : 1
2.6' : 1
2.7' : 1
3' : 2
3.2' : 1
3.3' : 1
3.4' : 1
Tools'] : 1
project\n' : 3
'=======================\n' : 3
project.\n' : 2
'ReStructured : 2
It\n' : 3
'will : 3
webpage : 2
'should : 2
for\n' : 2
'that : 3
purpose.\n' : 3
'Typical : 3
basic\n' : 2
'usage : 3
'changelog : 2
not\n' : 3
"What\'s : 3
'most : 2
version\n' : 3
'may : 3
appropriate.' : 3
'description_content_type': : 3
'docs_url': : 3
'download_url': : 3
'UNKNOWN' : 7
'downloads': : 3
{'last_day': : 1
'last_month': : 1
'last_week': : 1
-1} : 1
'home_page': : 3
'https://github.com/pypa/sampleproject' : 3
'keywords': : 3
'sample : 3
development' : 3
'license': : 3
'maintainer': : 3
'maintainer_email': : 3
'sampleproject' : 3
'package_url': : 3
'https://pypi.org/project/sampleproject/' : 6
'platform': : 3
'project_url': : 3
'project_urls': : 3
{'Download': : 1
'Homepage': : 1
'https://github.com/pypa/sampleproject'} : 1
'release_url': : 3
'https://pypi.org/project/sampleproject/1.2.0/' : 3
'requires_dist': : 3
'requires_python': : 3
'summary': : 3
project' : 3
'1.2.0'} : 3
(ellipsis : 1
contents): : 1
pprint.pprint(project_info : 2
depth=1) : 1
{...} : 4
exceeded: : 1
depth=1 : 4
width=60) : 1
'project.\n' : 1
'written : 1
ReStructured : 1
'webpage : 1
'for\n' : 1
'include : 1
'basic\n' : 1
'New" : 1
Lib/gzip.py : 1
**gunzip** : 3
**pack** : 1
gzip.open(filename : 1
mode='rb' : 3
compresslevel=9 : 4
errors=None : 14
newline=None) : 6
gzip-compressed : 1
"'xb'" : 6
"'rt'" : 3
"'at'" : 2
"'wt'" : 3
"'xt'" : 3
"GzipFile(filename : 1
compresslevel)" : 1
ending(s) : 3
gzip.BadGzipFile : 1
"zlib.error" : 1
gzip.GzipFile(filename=None : 1
mode=None : 3
fileobj=None : 3
mtime=None) : 2
discernible; : 2
"io.TextIOWrapper") : 2
compression; : 2
peek(n) : 1
mtime : 3
"st_mtime" : 5
"io.BufferedIOBase.read1()" : 1
gzip.compress(data : 1
*wbits* : 12
"31" : 1
gzip.decompress(data) : 1
Decompress : 8
gzip.open('/home/joe/file.txt.gz' : 3
file_content : 2
b"Lots : 2
here" : 2
f.write(content) : 1
open('/home/joe/file.txt' : 1
s_in : 1
s_out : 1
gzip.compress(s_in) : 1
compression) : 2
(best : 1
--decompress : 1
Lib/ast.py : 1
release; : 1
"ast.PyCF_ONLY_AST" : 1
ASDL's : 1
Module(stmt* : 1
type_ignore* : 1
type_ignores) : 1
Interactive(stmt* : 1
Expression(expr : 1
FunctionType(expr* : 1
argtypes : 3
FunctionDef(identifier : 1
stmt* : 19
expr* : 11
decorator_list : 4
type_comment) : 16
AsyncFunctionDef(identifier : 1
ClassDef(identifier : 1
keyword* : 2
decorator_list) : 2
Return(expr : 1
Delete(expr* : 1
Assign(expr* : 1
AugAssign(expr : 1
AnnAssign(expr : 1
simple) : 2
'orelse' : 1
For(expr : 1
orelse : 8
AsyncFor(expr : 1
While(expr : 1
orelse) : 6
If(expr : 1
With(withitem* : 1
AsyncWith(withitem* : 1
Match(expr : 1
match_case* : 1
Raise(expr : 1
cause) : 3
Try(stmt* : 1
excepthandler* : 2
finalbody) : 4
TryStar(stmt* : 1
Assert(expr : 1
Import(alias* : 1
ImportFrom(identifier : 1
alias* : 1
Global(identifier* : 1
Nonlocal(identifier* : 1
Expr(expr : 1
end_lineno : 10
end_col_offset) : 7
BoolOp() : 1
BoolOp(boolop : 1
NamedExpr(expr : 1
BinOp(expr : 1
UnaryOp(unaryop : 1
operand) : 2
Lambda(arguments : 1
IfExp(expr : 1
Dict(expr* : 1
Set(expr* : 1
elts) : 1
ListComp(expr : 1
elt : 3
SetComp(expr : 1
DictComp(expr : 1
GeneratorExp(expr : 1
Await(expr : 1
Yield(expr : 1
YieldFrom(expr : 1
Compare(expr : 1
cmpop* : 1
ops : 2
comparators) : 2
Call(expr : 1
FormattedValue(expr : 1
JoinedStr(expr* : 1
Constant(constant : 1
Attribute(expr : 1
expr_context : 7
ctx) : 12
Subscript(expr : 1
Starred(expr : 1
Name(identifier : 1
List(expr* : 1
elts : 2
Tuple(expr* : 1
Slice(expr : 1
boolop : 1
unaryop : 1
Invert : 2
UAdd : 1
USub : 1
cmpop : 1
(expr : 2
ifs : 2
is_async) : 2
excepthandler : 1
ExceptHandler(expr : 1
(arg* : 1
posonlyargs : 1
arg* : 2
kwonlyargs : 3
kw_defaults : 2
(NULL : 2
asname) : 2
withitem : 1
context_expr : 1
optional_vars) : 2
match_case : 1
(pattern : 1
MatchValue(expr : 1
MatchSingleton(constant : 1
MatchSequence(pattern* : 1
MatchMapping(expr* : 1
pattern* : 3
rest) : 2
MatchClass(expr : 1
identifier* : 1
kwd_attrs : 2
kwd_patterns) : 2
MatchStar(identifier : 1
MatchMapping : 1
MatchAs(pattern : 1
MatchOr(pattern* : 1
type_ignore : 1
TypeIgnore(int : 1
ast.AST : 1
re-exported : 1
"ast.stmt" : 2
"ast.expr") : 1
side; : 1
"ast.expr" : 3
"sums") : 1
abstract: : 2
mark) : 1
zero-or-more : 2
(marked : 1
asterisk) : 3
end_col_offset : 2
(1-indexed : 1
"source_line[node.col_offset : 1
node.end_col_offset]" : 1
"ast.T" : 1
"T._fields"; : 1
"ast.UnaryOp" : 1
ast.UnaryOp() : 1
node.op : 1
ast.USub() : 1
node.operand : 1
ast.Constant() : 1
node.operand.value : 1
node.operand.lineno : 1
node.operand.col_offset : 1
node.lineno : 1
node.col_offset : 1
ast.UnaryOp(ast.USub() : 1
ast.Constant(5 : 1
lineno=0 : 6
col_offset=0) : 2
"ast.Str" : 1
"ast.Bytes" : 1
"ast.NameConstant" : 1
"ast.Ellipsis" : 1
"ast.Index" : 1
"ast.ExtSlice" : 1
fantastic : 1
Green : 4
Snakes : 2
ast.Constant(value) : 1
(tuples : 1
print(ast.dump(ast.parse('123' : 1
mode='eval') : 23
indent=4)) : 68
Expression( : 22
body=Constant(value=123)) : 1
ast.FormattedValue(value : 1
"JoinedStr" : 2
call) : 2
115: : 1
114: : 1
97: : 1
"format_spec" : 2
ast.JoinedStr(values) : 1
print(ast.dump(ast.parse('f"sin({a}) : 1
{sin(a):.3}"' : 1
body=JoinedStr( : 1
Constant(value='sin(') : 1
FormattedValue( : 2
value=Name(id='a' : 4
conversion=-1) : 1
Constant(value=') : 1
value=Call( : 3
func=Name(id='sin' : 1
Name(id='a' : 8
ctx=Load())] : 6
keywords=[]) : 2
conversion=-1 : 1
format_spec=JoinedStr( : 1
Constant(value='.3')]))])) : 1
ast.List(elts : 1
ast.Tuple(elts : 1
"elts" : 2
"ctx" : 4
"Store" : 4
"(x,y)=something") : 1
"Load" : 3
print(ast.dump(ast.parse('[1 : 1
3]' : 2
body=List( : 1
elts=[ : 6
Constant(value=1) : 6
Constant(value=2) : 3
Constant(value=3)] : 4
ctx=Load())) : 6
print(ast.dump(ast.parse('(1 : 1
3)' : 1
body=Tuple( : 1
ast.Set(elts) : 1
print(ast.dump(ast.parse('{1 : 1
3}' : 2
body=Set( : 1
Constant(value=3)])) : 1
ast.Dict(keys : 1
"dictionary.keys()" : 1
"dictionary.values()") : 1
print(ast.dump(ast.parse('{"a":1 : 1
**d}' : 1
body=Dict( : 1
keys=[ : 2
Constant(value='a') : 1
ctx=Load())])) : 2
ast.Name(id : 1
"id" : 4
ast.Load : 1
ast.Store : 1
ast.Del : 1
print(ast.dump(ast.parse('a') : 1
Module( : 45
Expr( : 36
ctx=Load()))] : 6
type_ignores=[]) : 45
print(ast.dump(ast.parse('a : 4
Assign( : 4
targets=[ : 6
ctx=Store())] : 6
value=Constant(value=1))] : 2
print(ast.dump(ast.parse('del : 2
a') : 1
Delete( : 2
ctx=Del())])] : 2
ast.Starred(value : 1
"*var" : 1
"Name" : 16
"Call" : 4
it') : 1
Tuple( : 2
Starred( : 2
value=Name(id='b' : 1
value=Name(id='it' : 1
ast.Expr(value) : 1
"Lambda" : 1
"YieldFrom" : 1
print(ast.dump(ast.parse('-a') : 1
value=UnaryOp( : 1
op=USub() : 1
operand=Name(id='a' : 1
ctx=Load())))] : 3
ast.UnaryOp(op : 1
ast.UAdd : 1
ast.USub : 1
ast.Not : 1
ast.Invert : 1
"Not" : 1
"Invert" : 1
print(ast.dump(ast.parse('not : 1
body=UnaryOp( : 1
op=Not() : 1
operand=Name(id='x' : 1
ast.BinOp(left : 1
print(ast.dump(ast.parse('x : 3
body=BinOp( : 1
left=Name(id='x' : 3
right=Name(id='y' : 1
ast.Add : 1
ast.Sub : 1
ast.Mult : 1
ast.Div : 1
ast.FloorDiv : 1
ast.Mod : 1
ast.Pow : 1
ast.LShift : 1
ast.RShift : 1
ast.BitOr : 1
ast.BitXor : 1
ast.BitAnd : 1
ast.MatMult : 1
ast.BoolOp(op : 1
'or' : 1
"Or" : 1
"And" : 1
Consecutive : 1
collapsed : 6
"UnaryOp" : 1
body=BoolOp( : 1
op=Or() : 1
Name(id='x' : 2
Name(id='y' : 2
ast.And : 1
ast.Or : 1
ast.Compare(left : 1
"ops" : 1
"comparators" : 1
print(ast.dump(ast.parse('1 : 1
body=Compare( : 1
left=Constant(value=1) : 1
ops=[ : 5
LtE() : 1
Lt()] : 2
comparators=[ : 5
Constant(value=10)])) : 1
ast.Eq : 1
ast.NotEq : 1
ast.Lt : 1
ast.LtE : 1
ast.Gt : 1
ast.GtE : 1
ast.Is : 1
ast.IsNot : 1
ast.In : 1
ast.NotIn : 1
ast.Call(func : 1
"starargs" : 2
print(ast.dump(ast.parse('func(a : 1
b=c : 1
*d : 2
**e)' : 1
body=Call( : 1
func=Name(id='func' : 1
value=Name(id='d' : 1
keywords=[ : 2
keyword( : 3
arg='b' : 1
value=Name(id='c' : 2
value=Name(id='e' : 1
ctx=Load()))])) : 1
ast.keyword(arg : 1
ast.IfExp(test : 1
c' : 5
body=IfExp( : 1
test=Name(id='b' : 1
body=Name(id='a' : 1
orelse=Name(id='c' : 1
ast.Attribute(value : 1
"d.keys" : 1
"Del" : 3
acted : 2
print(ast.dump(ast.parse('snake.colour' : 1
body=Attribute( : 1
value=Name(id='snake' : 1
attr='colour' : 1
ast.NamedExpr(target : 1
"Assign" : 2
print(ast.dump(ast.parse('(x : 1
4)' : 1
body=NamedExpr( : 1
target=Name(id='x' : 6
value=Constant(value=4))) : 1
ast.Subscript(value : 1
"l[1]" : 1
mapping) : 1
"Tuple" : 9
"Slice" : 1
print(ast.dump(ast.parse('l[1:2 : 1
body=Subscript( : 2
value=Name(id='l' : 2
slice=Tuple( : 1
Slice( : 1
lower=Constant(value=1) : 2
upper=Constant(value=2)) : 2
ast.Slice(lower : 1
"lower:upper" : 1
"lower:upper:step") : 1
"Subscript" : 3
print(ast.dump(ast.parse('l[1:2]' : 1
slice=Slice( : 1
ast.ListComp(elt : 1
ast.SetComp(elt : 1
ast.GeneratorExp(elt : 1
ast.DictComp(key : 1
"elt" : 1
"value") : 1
"comprehension" : 1
print(ast.dump(ast.parse('[x : 1
numbers]' : 1
body=ListComp( : 3
elt=Name(id='x' : 2
generators=[ : 6
comprehension( : 7
iter=Name(id='numbers' : 3
ifs=[] : 6
is_async=0)])) : 5
print(ast.dump(ast.parse('{x: : 1
numbers}' : 2
body=DictComp( : 1
key=Name(id='x' : 1
value=BinOp( : 2
op=Pow() : 2
right=Constant(value=2)) : 2
print(ast.dump(ast.parse('{x : 1
body=SetComp( : 1
ast.comprehension(target : 1
"ifs" : 2
print(ast.dump(ast.parse('[ord(c) : 1
line]' : 1
elt=Call( : 1
func=Name(id='ord' : 1
Name(id='c' : 1
target=Name(id='line' : 1
iter=Name(id='file' : 1
is_async=0) : 1
target=Name(id='c' : 2
iter=Name(id='line' : 1
print(ast.dump(ast.parse('(n**2 : 1
n>5 : 1
n<10)' : 1
body=GeneratorExp( : 1
elt=BinOp( : 1
left=Name(id='n' : 3
target=Name(id='n' : 1
iter=Name(id='it' : 1
ifs=[ : 1
Compare( : 2
Gt()] : 3
Constant(value=5)]) : 2
Constant(value=10)])] : 1
print(ast.dump(ast.parse('[i : 1
soc]' : 1
elt=Name(id='i' : 1
target=Name(id='i' : 1
iter=Name(id='soc' : 1
is_async=1)])) : 1
ast.Assign(targets : 1
"targets" : 4
type_comment : 5
"type_comment" : 6
Name(id='b' : 3
print(ast.dump(ast.parse('a,b : 1
c') : 2
ast.AnnAssign(target : 1
print(ast.dump(ast.parse('c: : 1
int') : 3
AnnAssign( : 4
annotation=Name(id='int' : 4
simple=1)] : 1
print(ast.dump(ast.parse('(a): : 1
target=Name(id='a' : 2
value=Constant(value=1) : 1
simple=0)] : 3
print(ast.dump(ast.parse('a.b: : 1
target=Attribute( : 1
attr='b' : 1
print(ast.dump(ast.parse('a[1]: : 1
target=Subscript( : 1
slice=Constant(value=1) : 1
ast.AugAssign(target : 1
"Add" : 1
AugAssign( : 1
value=Constant(value=2))] : 1
ast.Raise(exc : 1
"cause" : 1
print(ast.dump(ast.parse('raise : 1
y') : 1
Raise( : 1
exc=Name(id='x' : 1
cause=Name(id='y' : 1
ast.Assert(test : 1
"Compare" : 3
print(ast.dump(ast.parse('assert : 1
x,y') : 1
Assert( : 1
test=Name(id='x' : 3
msg=Name(id='y' : 1
ast.Delete(targets) : 1
Represents : 36
x,y,z') : 5
ctx=Del()) : 2
Name(id='z' : 1
ast.Pass : 1
print(ast.dump(ast.parse('pass') : 1
Pass()] : 3
ast.Import(names) : 1
"alias" : 2
print(ast.dump(ast.parse('import : 1
Import( : 1
names=[ : 5
alias(name='x') : 2
alias(name='y') : 2
alias(name='z')])] : 1
ast.ImportFrom(module : 1
print(ast.dump(ast.parse('from : 2
ImportFrom( : 2
module='y' : 1
alias(name='z')] : 1
level=0)] : 1
ast.alias(name : 1
"asname" : 1
..foo.bar : 1
module='foo.bar' : 1
alias(name='a' : 1
asname='b') : 1
alias(name='c')] : 1
level=2)] : 1
ast.If(test : 1
"body" : 10
"orelse" : 4
"If" : 1
print(ast.dump(ast.parse(""" : 14
If( : 3
value=Constant(value=Ellipsis))] : 7
orelse=[ : 6
test=Name(id='y' : 1
value=Constant(value=Ellipsis))])])] : 10
ast.For(target : 1
For( : 2
iter=Name(id='y' : 1
value=Constant(value=Ellipsis))])] : 5
ast.While(test : 1
While( : 1
ast.Break : 1
ast.Continue : 1
print(ast.dump(ast.parse("""\ : 6
iter=Name(id='b' : 1
test=Compare( : 1
left=Name(id='a' : 2
Break()] : 1
Continue()])] : 1
orelse=[])] : 1
ast.Try(body : 1
"ExceptHandler" : 2
OtherException : 1
Try( : 2
handlers=[ : 3
ExceptHandler( : 4
type=Name(id='Exception' : 2
value=Constant(value=Ellipsis))]) : 6
type=Name(id='OtherException' : 1
name='e' : 1
finalbody=[ : 1
ast.TryStar(body : 1
"Try" : 1
TryStar( : 1
orelse=[] : 2
finalbody=[])] : 2
ast.ExceptHandler(type : 1
catch-all : 4
right=Constant(value=1)))] : 1
type=Name(id='TypeError' : 1
Pass()])] : 1
ast.With(items : 1
"items" : 3
"withitem" : 1
ast.withitem(context_expr : 1
"context_expr" : 1
"optional_vars" : 1
d: : 2
something(b : 1
With( : 1
items=[ : 1
withitem( : 2
context_expr=Name(id='a' : 1
optional_vars=Name(id='b' : 1
ctx=Store())) : 1
context_expr=Name(id='c' : 1
optional_vars=Name(id='d' : 1
ctx=Store()))] : 1
func=Name(id='something' : 1
keywords=[]))])] : 1
ast.Match(subject : 1
"cases" : 1
"match_case" : 1
ast.match_case(pattern : 1
x>0: : 1
tuple(): : 1
Match( : 9
subject=Name(id='x' : 9
cases=[ : 9
match_case( : 14
pattern=MatchSequence( : 5
patterns=[ : 9
MatchAs(name='x')]) : 3
guard=Compare( : 1
Constant(value=0)]) : 1
pattern=MatchClass( : 3
cls=Name(id='tuple' : 1
patterns=[] : 3
kwd_attrs=[] : 2
kwd_patterns=[]) : 2
ast.MatchValue(value) : 1
Permitted : 2
"Relevant": : 1
pattern=MatchValue( : 1
value=Constant(value='Relevant')) : 1
ast.MatchSingleton(value) : 1
against: : 1
pattern=MatchSingleton(value=None) : 1
ast.MatchSequence(patterns) : 1
MatchValue( : 9
value=Constant(value=1)) : 2
value=Constant(value=2))]) : 1
ast.MatchStar(name) : 1
*rest]: : 1
[*_]: : 1
value=Constant(value=2)) : 1
MatchStar(name='rest')]) : 1
MatchStar()]) : 1
ast.MatchMapping(keys : 1
_}: : 1
{**rest}: : 1
pattern=MatchMapping( : 1
Constant(value=2)] : 1
MatchAs() : 1
MatchAs()]) : 1
pattern=MatchMapping(keys=[] : 1
rest='rest') : 1
ast.MatchClass(cls : 1
"kwd_attrs" : 1
"kwd_patterns" : 1
nominated : 1
class-defined : 1
Point2D(0 : 1
Point3D(x=0 : 1
y=0 : 1
z=0): : 1
cls=Name(id='Point2D' : 1
value=Constant(value=0)) : 3
value=Constant(value=0))] : 1
cls=Name(id='Point3D' : 1
kwd_attrs=[ : 1
'z'] : 1
kwd_patterns=[ : 1
value=Constant(value=0))]) : 1
ast.MatchAs(pattern : 1
"as-pattern" : 1
pattern=MatchAs( : 1
name='y') : 1
pattern=MatchAs() : 1
ast.MatchOr(patterns) : 1
"or-pattern" : 1
or-pattern : 2
or- : 1
(y): : 1
pattern=MatchOr( : 1
MatchSequence( : 1
MatchAs(name='y')]) : 1
ast.FunctionDef(name : 1
"arguments" : 9
"decorator_list" : 2
"returns" : 1
ast.Lambda(args : 1
"FunctionDef" : 4
print(ast.dump(ast.parse('lambda : 1
value=Lambda( : 1
args=arguments( : 3
posonlyargs=[] : 3
arg(arg='x') : 1
arg(arg='y')] : 1
kwonlyargs=[] : 2
kw_defaults=[] : 2
defaults=[]) : 2
body=Constant(value=Ellipsis)))] : 1
ast.arguments(posonlyargs : 1
"posonlyargs" : 1
"kwonlyargs" : 1
"vararg" : 1
"kwarg" : 1
"*args : 1
**kwargs" : 1
"kw_defaults" : 1
ast.arg(arg : 1
@decorator1 : 2
@decorator2 : 2
f(a: : 1
c=2 : 1
f=3 : 1
**g) : 1
'return : 2
annotation': : 1
FunctionDef( : 1
name='f' : 2
arg( : 1
arg='a' : 1
annotation=Constant(value='annotation')) : 1
arg(arg='b') : 1
arg(arg='c')] : 1
vararg=arg(arg='d') : 1
kwonlyargs=[ : 1
arg(arg='e') : 1
arg(arg='f')] : 1
kw_defaults=[ : 1
kwarg=arg(arg='g') : 1
defaults=[ : 1
Constant(value=2)]) : 1
decorator_list=[ : 2
Name(id='decorator1' : 2
Name(id='decorator2' : 2
returns=Constant(value='return : 1
annotation'))] : 1
ast.Return(value) : 1
print(ast.dump(ast.parse('return : 1
4') : 1
Return( : 1
value=Constant(value=4))] : 1
ast.Yield(value) : 1
ast.YieldFrom(value) : 1
"Expr" : 1
print(ast.dump(ast.parse('yield : 2
x') : 2
value=Yield( : 1
value=Name(id='x' : 2
value=YieldFrom( : 1
ast.Global(names) : 1
ast.Nonlocal(names) : 1
print(ast.dump(ast.parse('global : 1
Global( : 1
'z'])] : 2
print(ast.dump(ast.parse('nonlocal : 1
Nonlocal( : 1
ast.ClassDef(name : 1
"bases" : 2
principally : 2
'metaclass' : 1
PEP-3115 : 1
Foo(base1 : 1
base2 : 1
metaclass=meta): : 1
ClassDef( : 1
name='Foo' : 1
bases=[ : 1
Name(id='base1' : 1
Name(id='base2' : 1
arg='metaclass' : 1
value=Name(id='meta' : 1
ctx=Load())])] : 1
ast.AsyncFunctionDef(name : 1
ast.Await(value) : 1
"AsyncFunctionDef" : 4
other_func() : 1
AsyncFunctionDef( : 1
args=[] : 2
value=Await( : 1
func=Name(id='other_func' : 1
keywords=[])))] : 1
decorator_list=[])] : 1
ast.AsyncFor(target : 1
ast.AsyncWith(items : 1
"For" : 1
"With" : 1
(subclasses : 1
"ast.operator" : 1
"ast.unaryop" : 1
"ast.cmpop" : 1
"ast.boolop" : 1
"ast.expr_context") : 1
"ast.Add") : 1
trees: : 1
ast.parse(source : 1
filename='<unknown>' : 1
mode='exec' : 1
type_comments=False : 1
feature_version=None) : 1
"compile(source : 2
ast.PyCF_ONLY_AST)" : 1
"ast.PyCF_TYPE_COMMENTS" : 1
"type_ignores" : 1
"Module" : 2
(otherwise : 3
"'func_type'" : 1
"(str : 1
List[str]" : 1
minor)" : 1
4)"; : 1
"sys.version_info[0:2]" : 1
('0') : 1
node).In : 1
large/complex : 3
"type_comments" : 1
ast.unparse(ast_obj) : 1
Unparse : 1
tuples/frozensets) : 1
ast.literal_eval(node_or_string) : 1
oneself : 1
attack: : 2
compiler.It : 1
"'set()'" : 1
ast.get_docstring(node : 1
clean=True) : 1
*node* : 15
"ClassDef" : 1
node) : 2
*clean* : 1
docstring's : 1
"inspect.cleandoc()" : 1
ast.get_source_segment(source : 1
padded=False) : 1
"end_col_offset") : 2
*padded* : 1
ast.fix_missing_locations(node) : 1
ast.increment_lineno(node : 1
n=1) : 1
"move : 1
ast.copy_location(new_node : 1
old_node) : 1
*old_node* : 1
*new_node* : 2
ast.iter_fields(node) : 1
"(fieldname : 1
"node._fields" : 1
ast.iter_child_nodes(node) : 1
ast.walk(node) : 1
ast.NodeVisitor : 1
visit(node) : 1
"self.visit_*classname*" : 1
*classname* : 1
"generic_visit()" : 3
generic_visit(node) : 1
("NodeTransformer") : 1
ast.NodeTransformer : 1
transformer : 2
rewrites : 2
("foo") : 1
"data['foo']": : 1
RewriteName(NodeTransformer): : 1
visit_Name(self : 1
node): : 1
Subscript( : 1
value=Name(id='data' : 1
slice=Constant(value=node.id) : 1
ctx=node.ctx : 1
nodes) : 2
"lineno") : 1
"fix_missing_locations()" : 1
ast.parse('foo' : 1
new_tree : 1
fix_missing_locations(RewriteName().visit(tree)) : 1
YourTransformer().visit(node) : 1
ast.dump(node : 1
annotate_fields=True : 1
include_attributes=False : 1
indent=None) : 1
*annotate_fields* : 2
*include_attributes* : 1
pretty-printed : 5
""\t"") : 3
ast.PyCF_ONLY_AST : 1
ast.PyCF_TYPE_COMMENTS : 1
("# : 1
<type>" : 1
<stuff>") : 1
[-m : 1
<mode>] : 1
[-a] : 1
[infile] : 1
<mode> : 2
--mode : 1
--no-type-comments : 1
--include-attributes : 1
<indent> : 2
--indent : 2
"infile" : 3
ASTs : 2
ASTTokens : 1
annotates : 1
leoAst.py : 1
token-based : 1
parse-tree-based : 1
(codemod) : 1
Parso : 2
********************************************************* : 2
Lib/wsgiref : 1
3333**) : 3
wsgi.readthedocs.io : 1
*environ* : 5
WSGI-compliant : 2
supplied; : 5
"WSGIEnvironment" : 2
wsgiref.util.guess_scheme(environ) : 1
"wsgi.url_scheme" : 1
"HTTPS" : 2
CGI-like : 3
FastCGI : 2
wsgiref.util.request_uri(environ : 1
include_query=True) : 1
Reconstruction" : 1
*include_query* : 1
wsgiref.util.application_uri(environ) : 1
"request_uri()" : 1
"PATH_INFO" : 10
"QUERY_STRING" : 1
wsgiref.util.shift_path_info(environ) : 1
"SCRIPT_NAME" : 7
*modified* : 1
in-place; : 1
"/foo" : 4
"/foo/bar/baz" : 1
"shift_path_info()" : 2
"/foo/bar" : 2
"/bar/baz" : 1
"/baz" : 1
"/x" : 1
"/x/" : 1
wsgiref.util.setup_testing_defaults(environ) : 1
"HTTP_HOST" : 1
"SERVER_NAME" : 1
"SERVER_PORT" : 1
3333**-defined : 1
"wsgi.*" : 1
wsgiref.util : 2
setup_testing_defaults : 2
wsgiref.simple_server : 4
make_server : 4
simple_app(environ : 2
start_response): : 3
setup_testing_defaults(environ) : 1
'200 : 4
OK' : 3
[('Content-type' : 2
'text/plain; : 1
charset=utf-8')] : 1
start_response(status : 3
ret : 2
[("%s: : 1
(key : 3
value)).encode("utf-8") : 1
environ.items()] : 1
make_server('' : 3
simple_app) : 1
httpd: : 6
print("Serving : 4
8000...") : 8
wsgiref.util.is_hop_by_hop(header_name) : 1
'header_name' : 1
"Hop-by-Hop" : 1
wsgiref.util.FileWrapper(filelike : 1
blksize=8192) : 1
"wsgiref.types.FileWrapper" : 2
*iterable*s : 1
*blksize* : 1
*filelike* : 3
FileWrapper : 1
StringIO-buffer : 1
filelike : 1
StringIO("This : 1
object"*10) : 1
FileWrapper(filelike : 1
blksize=5) : 1
wrapper: : 1
"Headers" : 7
mapping-like : 4
wsgiref.headers.Headers([headers]) : 1
(treated : 2
case-insensitively) : 1
Headers' : 1
multi-valued : 2
querying : 8
get_all(name) : 1
re-inserted : 1
add_header(name : 1
**_params) : 8
multi-valued) : 1
"name="value"" : 1
value.) : 1
h.add_header('content-disposition' : 1
'attachment' : 5
filename='bud.gif') : 3
Content-Disposition: : 4
attachment; : 4
filename="bud.gif" : 3
"wsgiref.util".) : 1
wsgiref.simple_server.make_server(host : 1
server_class=WSGIServer : 1
handler_class=WSGIRequestHandler) : 1
*app* : 3
*server_class* : 1
*handler_class* : 2
demo_app : 1
demo_app) : 1
Respond : 1
Alternative: : 1
httpd.handle_request() : 2
wsgiref.simple_server.demo_app(environ : 1
start_response) : 2
"wsgiref.simple_server") : 1
wsgiref.simple_server.WSGIServer(server_address : 1
RequestHandlerClass) : 4
"WSGIServer" : 5
*server_address* : 1
"(host,port)" : 2
*RequestHandlerClass* : 2
"make_server()" : 3
"http.server.HTTPServer" : 1
"handle_request()") : 1
set_app(application) : 1
*application* : 5
get_app() : 1
"set_app()" : 1
"get_app()" : 1
wsgiref.simple_server.WSGIRequestHandler(request : 1
client_address : 5
*request* : 13
*client_address* : 1
*server* : 2
("WSGIServer" : 1
directly; : 7
get_environ() : 1
"base_environ" : 1
get_stderr() : 2
"wsgi.errors" : 4
handle() : 4
middleware : 1
compliance; : 1
"paste.lint" : 1
Bicking's : 1
Paste" : 1
wsgiref.validate.validator(application) : 1
nonconformance : 1
server- : 3
questionable : 2
(*not* : 2
wsgiref.validate : 1
'text/plain')] : 1
b"Hello : 3
World" : 4
validator_app : 1
validator(simple_app) : 1
validator_app) : 1
print("Listening : 6
8000....") : 1
gateways : 1
wsgiref.handlers.CGIHandler : 1
CGI-based : 2
"CGIHandler().run(app)" : 1
"app" : 2
"BaseCGIHandler" : 5
"wsgi.run_once" : 2
"wsgi.multithread" : 3
"wsgi.multiprocess" : 3
wsgiref.handlers.IISCGIHandler : 1
"CGIHandler" : 6
IIS : 3
allowPathInfo : 1
(IIS>=7) : 1
metabase : 1
allowPathInfoForScriptMappings : 1
(IIS<7) : 1
"PATH_TRANSLATED" : 2
IIS<7 : 2
vhost : 1
(Even : 1
IIS7 : 1
"IISCGIHandler().run(app)" : 1
wsgiref.handlers.BaseCGIHandler(stdin : 1
multithread=True : 2
multiprocess=False) : 2
*multithread* : 1
*multiprocess* : 1
"SimpleHandler" : 2
"origin : 1
servers" : 1
SCGI : 1
"Status:" : 2
wsgiref.handlers.SimpleHandler(stdin : 1
"BaseHandler" : 22
"get_stdin()" : 2
"get_stderr()" : 2
"add_cgi_vars()" : 2
"_write()" : 3
"_flush()" : 2
"environ" : 11
wsgiref.handlers.BaseHandler : 1
run(app) : 1
subclass: : 5
_write(data) : 1
transmits : 1
_flush() : 1
get_stdin() : 1
"InputStream" : 1
"wsgi.input" : 1
"ErrorStream" : 1
add_cgi_vars() : 1
wsgi_multithread : 1
wsgi_multiprocess : 1
wsgi_run_once : 1
os_environ : 1
request's : 3
server_software : 1
"origin_server" : 3
"SERVER_SOFTWARE" : 2
"Server:" : 1
"CGIHandler") : 1
"Jython" : 1
get_scheme() : 1
"guess_scheme()" : 1
setup_environ() : 1
"wsgi_file_wrapper" : 2
"server_software" : 1
log_exception(exc_info) : 1
"(type : 7
flushes : 3
retarget : 1
traceback_limit : 2
"log_exception()" : 1
error_output(environ : 1
*start_response* : 1
Handling" : 2
"error_status" : 1
"error_headers" : 1
"error_body" : 1
spit : 1
user; : 1
error_status : 1
3333**; : 1
error_headers : 1
("(name : 1
error_body : 1
administrator." : 1
3333**'s : 1
"Optional : 1
Platform- : 1
feature: : 1
wsgi_file_wrapper : 1
"wsgi.file_wrapper" : 1
origin_server : 1
http_version : 1
""1.0"" : 1
wsgiref.handlers.read_environ() : 1
Transcode : 1
unicode" : 1
"IISCGIHandler" : 1
OS's : 1
wsgiref.types.StartResponse : 1
start_response() : 1
wsgiref.types.WSGIEnvironment : 1
wsgiref.types.WSGIApplication : 1
wsgiref.types.InputStream : 1
wsgiref.types.ErrorStream : 1
wsgiref.types.FileWrapper : 1
CGI-style : 1
hello_world_app(environ : 1
"200 : 2
OK" : 3
[("Content-type" : 1
"text/plain; : 1
charset=utf-8")] : 1
[b"Hello : 1
World"] : 1
make_server("" : 1
hello_world_app) : 1
Serve : 2
8000) : 6
(defaults : 16
app(environ : 1
respond): : 1
os.path.join(path : 2
environ["PATH_INFO"][1:]) : 1
fn.split(os.path.sep)[-1]: : 1
os.path.join(fn : 1
"index.html") : 1
mime_type : 1
mimetypes.guess_type(fn)[0] : 1
os.path.exists(fn): : 1
respond("200 : 1
[("Content-Type" : 2
mime_type)]) : 1
util.FileWrapper(open(fn : 1
"rb")) : 1
respond("404 : 1
Found" : 1
"text/plain")]) : 1
[b"not : 1
found"] : 1
sys.argv[1] : 3
int(sys.argv[2]) : 1
control-c : 10
simple_server.make_server("" : 1
app) : 1
print(f"Serving : 1
{port} : 1
stop") : 1
print("Shutting : 1
down.") : 1
httpd.server_close() : 1
Lib/operator.py : 1
"operator.add(x : 1
"x+y" : 1
operator.lt(a : 1
operator.le(a : 1
operator.eq(a : 1
operator.ne(a : 1
operator.ge(a : 1
operator.gt(a : 1
operator.__lt__(a : 1
operator.__le__(a : 1
operator.__eq__(a : 1
operator.__ne__(a : 1
operator.__ge__(a : 1
operator.__gt__(a : 1
comparisons" : 1
"lt(a : 2
"le(a : 2
"eq(a : 2
"ne(a : 2
"gt(a : 2
"ge(a : 2
operator.not_(obj) : 1
operator.__not__(obj) : 1
"__not__()" : 1
methods.) : 3
operator.truth(obj) : 1
operator.is_(a : 1
operator.is_not(a : 1
numerous: : 1
operator.abs(obj) : 1
operator.__abs__(obj) : 1
operator.add(a : 1
operator.__add__(a : 1
operator.and_(a : 1
operator.__and__(a : 1
operator.floordiv(a : 1
operator.__floordiv__(a : 1
operator.index(a) : 1
operator.__index__(a) : 1
"a.__index__()" : 1
operator.inv(obj) : 1
operator.invert(obj) : 1
operator.__inv__(obj) : 1
operator.__invert__(obj) : 1
"~obj" : 1
operator.lshift(a : 1
operator.__lshift__(a : 1
operator.mod(a : 1
operator.__mod__(a : 1
operator.mul(a : 1
operator.__mul__(a : 1
operator.matmul(a : 1
operator.__matmul__(a : 1
operator.neg(obj) : 1
operator.__neg__(obj) : 1
("-obj") : 1
operator.or_(a : 1
operator.__or__(a : 1
operator.pos(obj) : 1
operator.__pos__(obj) : 1
("+obj") : 1
operator.pow(a : 1
operator.__pow__(a : 1
operator.rshift(a : 1
operator.__rshift__(a : 1
operator.sub(a : 1
operator.__sub__(a : 1
operator.truediv(a : 1
operator.__truediv__(a : 1
.66 : 1
operator.xor(a : 1
operator.__xor__(a : 1
operator.concat(a : 1
operator.__concat__(a : 1
operator.contains(a : 1
operator.__contains__(a : 1
operator.countOf(a : 1
operator.delitem(a : 1
operator.__delitem__(a : 1
operator.getitem(a : 1
operator.__getitem__(a : 1
operator.indexOf(a : 1
operator.setitem(a : 1
operator.__setitem__(a : 1
operator.length_hint(obj : 1
"object.__length_hint__()" : 1
callables: : 1
operator.call(obj : 1
operator.__call__(obj : 1
"obj(*args : 1
operator.attrgetter(attr) : 1
operator.attrgetter(*attrs) : 1
attrgetter('name')" : 1
"f(b)" : 5
"b.name" : 1
attrgetter('name' : 1
'date')" : 1
"(b.name : 1
b.date)" : 1
attrgetter('name.first' : 1
'name.last')" : 1
"(b.name.first : 1
b.name.last)" : 1
attrgetter(*items): : 1
any(not : 1
items): : 1
TypeError('attribute : 1
string') : 2
len(items) : 2
items[0] : 2
g(obj): : 4
resolve_attr(obj : 2
tuple(resolve_attr(obj : 1
attr.split("."): : 1
operator.itemgetter(item) : 1
operator.itemgetter(*items) : 1
itemgetter(2)" : 1
"f(r)" : 1
"r[2]" : 1
"g : 1
itemgetter(2 : 1
"g(r)" : 1
"(r[2] : 1
r[5] : 2
r[3])" : 1
itemgetter(*items): : 1
obj[item] : 1
tuple(obj[item] : 1
slice: : 2
itemgetter(1)('ABCDEFG') : 1
itemgetter(1 : 1
5)('ABCDEFG') : 1
('B' : 2
'F') : 1
itemgetter(slice(2 : 1
None))('ABCDEFG') : 1
'CDEFG' : 1
soldier : 1
dict(rank='captain' : 1
name='dotterbart') : 1
itemgetter('rank')(soldier) : 1
'captain' : 1
inventory : 1
[('apple' : 1
('banana' : 2
('pear' : 2
('orange' : 1
getcount : 1
itemgetter(1) : 1
list(map(getcount : 1
inventory)) : 1
sorted(inventory : 1
key=getcount) : 1
[('orange' : 1
('apple' : 1
operator.methodcaller(name : 1
methodcaller('name')" : 1
"b.name()" : 1
methodcaller('name' : 1
bar=1)" : 2
"b.name('foo' : 1
methodcaller(name : 1
caller(obj): : 1
name)(*args : 1
+-------------------------+---------------------------+-----------------------------------------+ : 36
|=========================|===========================|=========================================| : 1
"add(a : 1
Concatenation : 1
"seq1 : 1
seq2" : 1
"concat(seq1 : 1
"contains(seq : 1
"truediv(a : 1
"floordiv(a : 1
"and_(a : 1
Exclusive : 1
"xor(a : 1
Inversion : 1
"~ : 1
"invert(a)" : 1
"or_(a : 1
"pow(a : 1
"is_(a : 1
"is_not(a : 1
Indexed : 5
"obj[k] : 1
"setitem(obj : 1
v)" : 2
obj[k]" : 1
"delitem(obj : 1
"obj[k]" : 1
"getitem(obj : 1
"lshift(a : 1
"mod(a : 1
"mul(a : 1
"matmul(a : 1
Negation : 2
(Arithmetic) : 1
"- : 2
"neg(a)" : 1
(Logical) : 1
"not_(a)" : 1
"pos(a)" : 1
"rshift(a : 1
"seq[i:j] : 1
"setitem(seq : 1
slice(i : 3
values)" : 1
seq[i:j]" : 1
"delitem(seq : 1
"seq[i:j]" : 1
"getitem(seq : 1
"mod(s : 1
Subtraction : 2
"sub(a : 1
"truth(obj)" : 1
Difference : 4
"in-place" : 1
Listed : 1
*statement* : 11
operator.iadd(x : 2
"z : 2
x; : 1
iadd(a : 2
['h' : 3
'o'] : 1
iadd(s : 1
operator.iadd(a : 1
operator.__iadd__(a : 1
operator.iand(a : 1
operator.__iand__(a : 1
iand(a : 1
operator.iconcat(a : 1
operator.__iconcat__(a : 1
iconcat(a : 1
operator.ifloordiv(a : 1
operator.__ifloordiv__(a : 1
ifloordiv(a : 1
operator.ilshift(a : 1
operator.__ilshift__(a : 1
ilshift(a : 1
operator.imod(a : 1
operator.__imod__(a : 1
imod(a : 1
operator.imul(a : 1
operator.__imul__(a : 1
imul(a : 1
operator.imatmul(a : 1
operator.__imatmul__(a : 1
imatmul(a : 1
operator.ior(a : 1
operator.__ior__(a : 1
ior(a : 1
operator.ipow(a : 1
operator.__ipow__(a : 1
ipow(a : 1
operator.irshift(a : 1
operator.__irshift__(a : 1
irshift(a : 1
operator.isub(a : 1
operator.__isub__(a : 1
isub(a : 1
operator.itruediv(a : 1
operator.__itruediv__(a : 1
itruediv(a : 1
operator.ixor(a : 1
operator.__ixor__(a : 1
ixor(a : 1
Lib/fnmatch.py : 1
+--------------+--------------------------------------+ : 17
|==============|======================================| : 2
"[seq]" : 1
"[!seq]" : 1
meta-characters : 2
"'[?]'" : 2
("'/'" : 1
("glob" : 1
segments) : 1
"fnmatch()" : 1
"fnmatchcase()" : 2
fnmatch.fnmatch(filename : 1
case-normalized : 1
".txt": : 1
fnmatch : 2
os.listdir('.'): : 1
fnmatch.fnmatch(file : 1
'*.txt'): : 1
print(file) : 1
fnmatch.fnmatchcase(filename : 1
fnmatch.filter(names : 1
"[n : 1
fnmatch(n : 1
pattern)]" : 1
fnmatch.translate(pattern) : 1
fnmatch.translate('*.txt') : 1
'(?s:.*\\.txt)\\Z' : 1
reobj : 1
re.compile(regex) : 1
reobj.match('foobar.txt') : 1
match='foobar.txt'> : 1
Lib/email/iterators.py : 1
"Message.walk" : 1
"email.iterators" : 1
email.iterators.body_line_iterator(msg : 1
decode=False) : 2
subparts : 26
subpart : 17
flat : 3
"Message.get_payload" : 1
email.iterators.typed_subpart_iterator(msg : 1
maintype='text' : 1
subtype=None) : 1
*maintype* : 5
too; : 1
"typed_subpart_iterator()" : 1
*text/** : 2
email.iterators._structure(msg : 1
fp=None : 1
include_default=False) : 1
email.message_from_file(somefile) : 1
_structure(msg) : 3
multipart/mixed : 1
text/plain : 25
multipart/digest : 1
message/rfc822 : 9
*include_default* : 1
**** : 2
Lib/idlelib/ : 1
cross-platform: : 1
colorizing : 2
multi-window : 1
(grep) : 1
===== : 7
Open.. : 1
Module.. : 1
(searches : 1
sys.path) : 1
As.. : 2
namager : 1
'.txt' : 1
Aqua,'.py' : 1
extensions.) : 1
unsaved : 3
save; : 1
execution) : 3
(ask : 1
undone : 5
clipboard; : 2
Find.. : 1
Repeat : 1
Files.. : 1
Replace.. : 1
scrollable : 2
Tip : 1
Parens : 1
Reformat : 1
blank-line-delimited : 1
Region : 6
Dedent : 1
## : 8
Uncomment : 1
Tabify : 1
*leading* : 1
stretches : 2
Untabify : 1
Toggle : 3
Width : 2
Chitespace : 1
str.rstrip : 1
Run.. : 1
*Command : 1
Arguments* : 1
restarting : 3
autosave : 1
Restart : 6
Cycle : 2
Interrupt : 4
File/Line : 1
(toggle) : 1
Auto-open : 1
scrolled : 4
preferences) : 1
Toggles : 1
zoomed : 1
windows; : 1
(deiconifying : 1
necessary) : 1
credits : 3
drawings : 7
(Control-click : 1
".idlerc" : 3
Breakpoint : 3
file/line : 3
squeezing : 2
window* : 1
Squeeze : 1
squeeze : 1
'Squeezed : 2
Thereafter : 2
('Ln') : 1
('Col') : 1
"Control" : 4
"Backspace" : 2
"C-Backspace" : 1
"C-Del" : 1
Arrow : 1
"Page : 3
Up"/"Page : 1
Down" : 2
"C-LeftArrow" : 1
"C-RightArrow" : 1
"Home"/"End" : 1
"C-Home"/"C-End" : 1
Tcl/Tk: : 1
"C-a" : 1
"C-e" : 1
"C-k" : 1
clipboard) : 1
"C-l" : 1
"C-b" : 1
"C-f" : 1
"C-p" : 2
"C-d" : 2
"C-c" : 2
"C-v" : 1
paste) : 1
Keybindings : 1
block-opening : 1
(break : 1
dedented : 1
indent/dedent : 1
"[x] : 1
expresion" : 1
"Up" : 1
"Down" : 1
"PageUp" : 1
"PageDown" : 1
"Home" : 2
"End" : 2
"Escape" : 1
"Enter" : 2
seconds; : 4
popups : 3
100000000.) : 1
"os.sep" : 2
"os.altsep" : 2
first.) : 2
"C-space" : 1
Hitting : 1
(With : 1
indents.) : 1
'Show : 1
Completions' : 1
oppose : 1
Shell) : 1
'__all__' : 2
*accessible* : 1
subscripts : 4
"Show : 1
Tip" : 1
fifth : 4
(Some : 3
(keyword) : 1
"itertools.count(" : 1
"turtle.write(" : 2
turtle" : 2
freezes : 1
contracted : 1
(Most : 1
consoles : 1
Submit : 5
single-line : 3
"Return" : 3
pastes : 2
"RESTART" : 1
re-started : 1
subsections : 3
end-of-file; : 1
"Alt-/" : 1
(Expand : 1
"Alt-p" : 1
"Alt-n" : 1
"C-n" : 1
pattern-matching : 1
coloring : 2
uncolorized : 1
"IDLESTARTUP"; : 1
"Tk" : 15
".Idle.py" : 1
idle.py : 1
command] : 1
[-d] : 1
[-e] : 2
[-i] : 1
[-r : 2
file] : 1
[-s] : 1
[-t : 1
title] : 1
[-] : 1
$IDLESTARTUP : 1
$PYTHONSTARTUP : 1
(- : 1
"sys.argv[1:...]" : 1
"'-r'" : 1
divider : 1
'RESTART') : 1
'cannot : 1
connect' : 1
masquerading : 2
"** : 1
host:" : 1
"127.0.0.1 : 1
(idlelib.rpc.LOCALHOST)" : 1
"tcpconnect : 1
-irv : 1
6543" : 1
"tcplisten : 1
<same : 1
args>" : 1
user-written : 1
*random.py* : 1
*tkinter.py* : 1
antivirus : 2
taught : 2
mis-configuration : 1
admin : 2
(control-C) : 1
Dismissing : 1
"~/.idlerc/" : 1
(~ : 1
glitches : 1
idlelib") : 1
Unix-based : 2
"8.6.11" : 1
"About : 1
IDLE") : 1
re-configure : 1
"sys.__stdin__" : 1
"sys.__stdout__" : 2
"sys.__stderr__" : 2
"pythonw" : 1
"pyw".) : 1
"importlib.reload(sys)" : 1
"sys.getrecursionlimit" : 1
"sys.setrecursionlimit" : 1
(codepoints) : 1
(Basic : 3
Plane) : 1
'characters') : 1
(Moving : 1
arrow : 13
'a\tb\a<\x02><\r>\bc\nd' : 1
'a\tb\x07<\x02><\r>\x08c\nd' : 1
print(s : 1
tk; : 1
tk.Tk()" : 1
"root.update()" : 2
tk.Button(root : 1
text='button'); : 1
b.pack()" : 1
"root.mainloop()" : 1
"mainloop()" : 4
loopback : 3
notify : 4
Run/Run : 1
(F5) : 1
baz) : 1
Help" : 1
Navigate : 1
(Table : 1
Docs" : 1
"docs.python.org/x.y" : 1
'x.y' : 1
off- : 1
Non-default : 1
monospaced : 2
Preferences: : 1
tk/tkinter : 1
config-extensions.def : 1
Lib/idlelib : 2
'Startup' : 1
'private' : 1
434**) : 1
Lib/http/server.py : 2
"HTTPServer" : 3
run(server_class=HTTPServer : 1
handler_class=BaseHTTPRequestHandler): : 1
server_address : 2
server_class(server_address : 1
handler_class) : 1
http.server.HTTPServer(server_address : 1
"server_name" : 1
"server_port" : 1
http.server.ThreadingHTTPServer(server_address : 1
HTTPServer : 2
http.server.BaseHTTPRequestHandler(request : 1
requests; : 1
POST) : 1
"SPAM" : 1
"do_SPAM()" : 1
close_connection : 1
"handle_one_request()" : 3
requestline : 1
"'GET'" : 3
"hier-part" : 1
"query" : 3
request_version : 1
"'HTTP/1.0'" : 2
Holds : 14
"MessageClass" : 1
"parse_headers()" : 2
rfile : 1
wfile : 1
adherence : 1
interoperation : 1
server_version : 2
name[/version] : 1
"'BaseHTTP/0.2'" : 1
sys_version : 1
"version_string" : 1
"server_version" : 2
"'Python/1.4'" : 1
error_message_format : 1
"responses" : 2
error_content_type : 1
Content-Type : 1
"'text/html'" : 1
protocol_version : 1
"'HTTP/1.1'" : 1
connections; : 1
"send_header()") : 1
MessageClass : 1
"email.message.Message"-like : 1
"{code: : 1
longmessage)}" : 1
*shortmessage* : 1
*longmessage* : 1
"send_response_only()" : 1
"do_*()" : 6
handle_one_request() : 1
handle_expect_100() : 1
"Expect: : 1
100-continue" : 1
"417 : 1
Expectation : 1
Failed" : 1
send_error(code : 1
message=None : 9
explain=None) : 1
"???" : 1
HEAD : 2
"1xx" : 1
"204 : 1
Content" : 2
"205 : 1
"304 : 1
Modified" : 1
send_response(code : 1
message=None) : 3
*Server* : 3
*Date* : 2
"version_string()" : 1
"date_time_string()" : 1
"send_header()" : 1
"send_response()" : 1
send_header(keyword : 1
*keyword* : 1
send_header : 1
send_response_only(code : 1
stream.If : 1
end_headers() : 1
(indicating : 3
response) : 6
flush_headers() : 1
log_request(code='-' : 1
size='-') : 1
(successful) : 1
log_error(...) : 1
"log_message()" : 2
(*format* : 2
log_message(format : 1
version_string() : 1
"sys_version" : 1
date_time_string(timestamp=None) : 1
*timestamp* : 2
"time.time()") : 3
"'Sun : 3
06 : 1
08:49:37 : 1
GMT'" : 1
log_date_time_string() : 1
address_string() : 1
http.server.SimpleHTTPRequestHandler(request : 1
directory=None) : 1
"do_GET()" : 3
"do_HEAD()" : 2
"SimpleHTTPRequestHandler": : 1
""SimpleHTTP/" : 1
__version__" : 1
extensions_map : 1
lower-cased : 5
do_HEAD() : 1
do_GET() : 1
"index.htm" : 1
"list_directory()" : 1
"'File : 1
found'" : 1
"'If-Modified-Since'" : 2
"'Not : 2
Modified'" : 1
"guess_type()" : 6
*extensions_map* : 1
"'Content-type:'" : 1
"'Content-Length:'" : 1
"'Last-Modified:'" : 1
"text/" : 1
webserver : 1
http.server.SimpleHTTPRequestHandler : 1
socketserver.TCPServer(("" : 1
PORT) : 5
Handler) : 1
print("serving : 1
port" : 1
9000 : 2
--bind : 1
"--bind" : 2
"-d/--directory" : 1
--directory : 1
/tmp/ : 1
HTTP/1.0 : 2
"-p/--protocol" : 1
--protocol : 1
"--protocol" : 1
http.server.CGIHTTPRequestHandler(request : 1
hierarchic : 1
"CGIHTTPRequestHandler" : 4
302) : 1
(script : 1
follows) : 1
pre-empts : 1
guesses : 3
directory- : 2
"cgi_directories" : 1
cgi_directories : 1
"['/cgi-bin' : 1
'/htbin']" : 1
do_POST() : 1
"'POST'" : 3
501 : 1
"Can : 1
scripts" : 1
non-CGI : 1
nobody : 1
--cgi : 1
scrub : 1
nefarious : 1
3.11.1: : 3
scrubbed : 1
Lib/sched.py : 1
scheduler: : 1
sched.scheduler(timefunc=time.monotonic : 1
delayfunc=time.sleep) : 1
"outside : 1
whatsoever) : 1
*delayfunc* : 4
sched.scheduler(time.time : 1
time.sleep) : 1
print_time(a='default'): : 1
print("From : 1
print_time" : 1
print_some_times(): : 1
print(time.time()) : 2
s.enter(10 : 1
print_time) : 1
s.enter(5 : 2
print_time : 9
argument=('positional',)) : 1
'keyword' : 1
'positional' : 1
enter() : 1
kwargs={'a': : 1
'keyword'}) : 1
s.enterabs(1_650_000_000 : 2
argument=("first : 1
enterabs",)) : 2
argument=("second : 1
s.run() : 1
print_some_times() : 1
1652342830.3640375 : 1
1652342830.3642538 : 1
enterabs : 2
1652342830.3643398 : 1
1652342835.3694863 : 1
1652342835.3696074 : 1
1652342840.369612 : 1
1652342840.3697174 : 1
scheduler.enterabs(time : 1
argument=() : 2
kwargs={}) : 2
*time* : 6
*priority* : 4
"action(*argument : 1
"cancel()") : 1
scheduler.enter(delay : 1
scheduler.cancel(event) : 1
scheduler.empty() : 1
scheduler.run(blocking=True) : 1
"delayfunc()" : 1
deadline : 7
dropped; : 1
scheduler.queue : 1
Lib/xdrlib.py : 1
1014** : 2
Microsystems : 1
1987 : 2
xdrlib.Packer : 1
"Packer" : 4
xdrlib.Unpacker(data) : 1
"Unpacker" : 3
XDR: : 2
1832** : 2
Packer.get_buffer() : 1
Packer.reset() : 1
"pack_type()" : 1
"pack_uint()" : 1
"pack_int()" : 1
"pack_enum()" : 1
"pack_bool()" : 1
"pack_uhyper()" : 1
"pack_hyper()" : 1
Packer.pack_float(value) : 1
Packs : 10
single-precision : 2
Packer.pack_double(value) : 1
double-precision : 3
Packer.pack_fstring(n : 1
Packer.pack_fopaque(n : 1
"pack_fstring()" : 2
Packer.pack_string(s) : 1
Packer.pack_opaque(data) : 1
"pack_string()" : 2
Packer.pack_bytes(bytes) : 1
Packer.pack_list(list : 1
pack_item) : 3
walked : 1
*pack_item* : 2
xdrlib.Packer() : 2
p.pack_list([1 : 1
p.pack_int) : 1
Packer.pack_farray(n : 1
(*array*) : 1
"len(array)" : 1
Packer.pack_array(list : 1
"pack_farray()" : 1
Unpacker.reset(data) : 1
Unpacker.get_position() : 1
Unpacker.set_position(position) : 1
*position* : 1
"get_position()" : 1
"set_position()" : 1
Unpacker.get_buffer() : 1
Unpacker.done() : 1
"unpack_type()" : 1
Unpacker.unpack_float() : 1
Unpacks : 12
Unpacker.unpack_double() : 1
"unpack_float()" : 1
Unpacker.unpack_fstring(n) : 1
Padding : 10
Unpacker.unpack_fopaque(n) : 1
"unpack_fstring()" : 2
Unpacker.unpack_string() : 1
Unpacker.unpack_opaque() : 1
"unpack_string()" : 2
Unpacker.unpack_bytes() : 1
Unpacker.unpack_list(unpack_item) : 1
*unpack_item* : 2
Unpacker.unpack_farray(n : 1
unpack_item) : 1
Unpacker.unpack_array(unpack_item) : 1
"unpack_farray()" : 1
xdrlib.Error : 1
xdrlib.ConversionError : 2
p.pack_double(8.01) : 1
print('packing : 1
failed:' : 1
instance.msg) : 1
Lib/html/parser.py : 1
(HyperText : 1
Mark-up : 1
Language) : 2
html.parser.HTMLParser(* : 1
convert_charrefs=True) : 1
"script"/"style" : 1
end-tag : 2
encountered: : 3
html.parser : 3
MyHTMLParser(HTMLParser): : 2
handle_starttag(self : 2
print("Encountered : 3
tag:" : 2
handle_endtag(self : 2
tag): : 3
:" : 8
handle_data(self : 2
MyHTMLParser() : 2
parser.feed('<html><head><title>Test</title></head>' : 1
'<body><h1>Parse : 1
me!</h1></body></html>') : 1
Encountered : 12
h1 : 6
HTMLParser.feed(data) : 1
Feed : 6
HTMLParser.close() : 1
HTMLParser.reset() : 1
Loses : 1
unprocessed : 1
HTMLParser.getpos() : 1
HTMLParser.get_starttag_text() : 1
deployed" : 1
re-generating : 1
"handle_startendtag()"): : 1
HTMLParser.handle_starttag(tag : 1
"<div : 1
id="main">") : 1
*tag* : 11
tag's : 1
"<A : 1
HREF="https://www.cwi.nl/">" : 1
"handle_starttag('a' : 1
[('href' : 1
'https://www.cwi.nl/')])" : 1
HTMLParser.handle_endtag(tag) : 1
"</div>") : 1
HTMLParser.handle_startendtag(tag : 1
"handle_starttag()" : 2
XHTML-style : 1
("<img : 1
information; : 2
"handle_endtag()" : 1
HTMLParser.handle_data(data) : 1
"<script>...</script>" : 1
"<style>...</style>") : 1
HTMLParser.handle_entityref(name) : 1
"&name;" : 1
"&gt;") : 1
"'gt'") : 1
HTMLParser.handle_charref(name) : 1
"&#NNN;" : 1
"&#xNNN;" : 1
"&gt;" : 2
"&#62;" : 2
"&#x3E;"; : 1
"'62'" : 1
"'x3E'" : 1
HTMLParser.handle_comment(data) : 1
comment-->") : 1
-->" : 1
(condcoms) : 1
"<!--[if : 1
9]>IE9-specific : 2
content<![endif]-->" : 1
"'[if : 1
content<![endif]'" : 1
HTMLParser.handle_decl(decl) : 1
"<!DOCTYPE : 1
html>") : 1
*decl* : 1
"<!...>" : 1
"'DOCTYPE : 1
html'") : 1
HTMLParser.handle_pi(data) : 1
"<?proc : 1
color='red'>" : 1
"handle_pi("proc : 1
color='red'")" : 1
HTMLParser.unknown_decl(data) : 1
"<![...]>" : 1
name2codepoint : 1
print("Start : 1
attrs: : 1
print(" : 2
attr:" : 1
print("End : 1
print("Data : 1
handle_comment(self : 1
print("Comment : 1
handle_entityref(self : 1
chr(name2codepoint[name]) : 1
print("Named : 1
ent:" : 1
handle_charref(self : 1
name.startswith('x'): : 1
chr(int(name[1:] : 1
chr(int(name)) : 1
print("Num : 1
ent : 3
handle_decl(self : 1
print("Decl : 1
doctype: : 1
parser.feed('<!DOCTYPE : 1
4.01//EN" : 2
'"http://www.w3.org/TR/html4/strict.dtd">') : 1
Decl : 1
DOCTYPE : 1
"http://www.w3.org/TR/html4/strict.dtd" : 1
parser.feed('<img : 1
src="python-logo.png" : 1
alt="The : 1
logo">') : 1
img : 1
('src' : 1
'python-logo.png') : 1
('alt' : 1
logo') : 1
parser.feed('<h1>Python</h1>') : 1
"script" : 1
parser.feed('<style : 1
type="text/css">#python : 1
}</style>') : 1
'text/css') : 1
#python : 1
parser.feed('<script : 1
type="text/javascript">' : 1
'alert("<strong>hello!</strong>");</script>') : 1
'text/javascript') : 1
alert("<strong>hello!</strong>"); : 1
parser.feed('<!-- : 1
-->' : 1
'<!--[if : 1
9]>IE-specific : 2
content<![endif]-->') : 1
[if : 1
content<![endif] : 1
(note: : 1
"'>'"): : 1
parser.feed('&gt;&#62;&#x3E;') : 1
ent: : 1
Num : 2
Feeding : 2
"feed()" : 4
"handle_data()" : 1
"True"): : 2
['<sp' : 1
'an>buff' : 1
'ered : 1
'text</s' : 1
'pan>']: : 1
parser.feed(chunk) : 1
buff : 1
ered : 1
parser.feed('<p><a : 1
class=link : 1
href=#main>tag : 1
soup</p : 1
></a>') : 1
('class' : 1
'link') : 1
('href' : 1
'#main') : 1
soup : 1
"gc.set_debug(gc.DEBUG_LEAK)" : 1
"gc.DEBUG_SAVEALL" : 1
gc.garbage : 2
gc.enable() : 1
gc.disable() : 1
gc.isenabled() : 1
gc.collect(generation=2) : 1
gc.set_debug(flags) : 1
gc.get_debug() : 1
gc.get_objects(generation=None) : 1
"generation" : 2
gc.get_stats() : 1
"collected" : 1
generation; : 1
"uncollectable" : 1
"garbage" : 5
gc.set_threshold(threshold0[ : 1
threshold1[ : 1
threshold2]]) : 1
thresholds : 2
frequency) : 1
*threshold0* : 2
classifies : 1
sweeps : 1
survived : 1
youngest : 1
(generation : 1
survives : 1
deallocations : 2
*threshold1* : 1
gc.get_count() : 1
"(count0 : 1
count1 : 1
count2)" : 1
gc.get_threshold() : 1
"(threshold0 : 1
threshold1 : 1
threshold2)" : 1
gc.get_referrers(*objs) : 1
objs : 3
collection; : 1
referrers : 1
"get_referrers()" : 3
"gc.get_referrers" : 1
"objs" : 4
gc.get_referents(*objs) : 1
referents : 3
"gc.get_referents" : 1
gc.is_tracked(obj) : 1
(containers : 1
objects...) : 1
gc.is_tracked(0) : 1
gc.is_tracked("a") : 1
gc.is_tracked([]) : 1
gc.is_tracked({}) : 1
gc.is_tracked({"a": : 2
[]}) : 1
gc.is_finalized(obj) : 1
Lazarus: : 1
__del__(self): : 2
lazarus : 2
Lazarus() : 1
gc.is_finalized(lazarus) : 1
gc.is_finalized(x) : 1
gc.freeze() : 1
gc.unfreeze() : 1
Unfreeze : 1
gc.get_freeze_count() : 1
them): : 2
(uncollectable : 1
"tp_del" : 1
"DEBUG_SAVEALL" : 1
*interpreter : 4
shutdown* : 4
"DEBUG_UNCOLLECTABLE" : 1
gc.callbacks : 1
*phase* : 4
*info* : 8
"start": : 1
"stop": : 1
"generation": : 1
"collected": : 1
"uncollectable": : 1
Gathering : 1
"set_debug()": : 1
gc.DEBUG_STATS : 1
gc.DEBUG_COLLECTABLE : 1
gc.DEBUG_UNCOLLECTABLE : 1
collector) : 1
gc.DEBUG_SAVEALL : 1
*garbage* : 1
gc.DEBUG_LEAK : 1
"DEBUG_COLLECTABLE : 1
DEBUG_UNCOLLECTABLE : 1
DEBUG_SAVEALL") : 1
Kahan's : 1
"Branch : 1
elementary : 5
functions" : 1
part.For : 1
"cmath.sqrt()" : 1
"complex(-2.0 : 2
*below* : 1
axis: : 1
cmath.sqrt(complex(-2.0 : 2
-0.0)) : 2
-1.4142135623730951j : 1
0.0)" : 4
cut: : 1
0.0)) : 2
1.4142135623730951j : 1
*rectangular* : 1
*Cartesian* : 1
*real : 1
part* : 2
*imaginary : 1
z.real : 1
z.imag*1j : 1
*Polar : 1
coordinates* : 1
*phi* : 3
counterclockwise : 3
x-axis : 1
cmath.phase(x) : 1
*x*) : 2
"phase(x)" : 1
"math.atan2(x.imag : 1
x.real)" : 1
[-*π* : 1
*π*] : 1
"x.imag" : 2
phase(complex(-1.0 : 2
3.141592653589793 : 1
-3.141592653589793 : 1
cmath.polar(x) : 1
"(r : 3
phi)" : 1
phi : 1
"polar(x)" : 1
"(abs(x) : 1
phase(x))" : 1
cmath.rect(r : 1
phi) : 1
"r : 5
(math.cos(phi) : 1
math.sin(phi)*1j)" : 1
cmath.exp(x) : 1
cmath.log(x[ : 1
base]) : 2
-∞ : 3
cmath.log10(x) : 1
base-10 : 2
cmath.sqrt(x) : 1
cmath.acos(x) : 1
arc : 8
cosine : 9
cuts: : 5
∞ : 1
cmath.asin(x) : 1
sine : 9
"acos()" : 1
cmath.atan(x) : 1
tangent : 10
"1j" : 3
"∞j" : 2
"-1j" : 2
"-∞j" : 2
cmath.cos(x) : 1
cmath.sin(x) : 1
cmath.tan(x) : 1
cmath.acosh(x) : 1
cmath.asinh(x) : 1
cmath.atanh(x) : 1
"∞" : 1
"-∞" : 1
cmath.cosh(x) : 1
cmath.sinh(x) : 1
cmath.tanh(x) : 1
cmath.isfinite(x) : 1
cmath.isinf(x) : 1
cmath.isnan(x) : 1
cmath.isclose(a : 1
rel_tol=1e-09 : 2
abs_tol=0.0) : 2
*rel_tol* : 4
"rel_tol=0.05" : 2
"1e-09" : 2
assures : 3
*abs_tol* : 4
"abs(a-b) : 2
max(rel_tol : 2
max(abs(a) : 2
abs(b)) : 2
abs_tol)" : 2
"NaN" : 28
cmath.pi : 1
*π* : 2
cmath.e : 1
cmath.tau : 1
*τ* : 2
cmath.inf : 1
"float('inf')" : 2
cmath.infj : 1
"complex(0.0 : 2
float('inf'))" : 2
cmath.nan : 1
(NaN) : 3
"float('nan')" : 3
cmath.nanj : 1
float('nan'))" : 1
"math.sqrt(-1)" : 1
elementary) : 1
enlightenment : 1
Kahan : 1
W: : 1
Branch : 1
ado : 1
nothing's : 1
Iserles : 1
A. : 1
(eds.) : 1
Clarendon : 1
(1987) : 1
pp165--211 : 1
Lib/importlib/__init__.py : 1
three-fold : 1
comprehend : 1
generically : 1
*importer*) : 1
non-code : 1
"resources" : 1
235** : 1
importlib.__import__(name : 1
fromlist=() : 2
level=0) : 3
importlib.import_module(name : 1
package=None) : 2
"..mod") : 1
"import_module('..mod' : 1
'pkg.subpkg')" : 1
"pkg.mod") : 2
"pkg") : 1
Parent : 1
importlib.find_loader(name : 1
path=None) : 8
"sys.modules[name].__loader__" : 1
importlib.reload(module) : 1
re-importing : 1
Reloading : 1
(*module.name*) : 1
Lib/importlib/abc.py : 1
hierarchy: : 2
(deprecated) : 2
MetaPathFinder : 1
PathEntryFinder : 1
Loader : 1
ResourceLoader : 1
--------+ : 1
InspectLoader : 1
ExecutionLoader : 1
--+ : 1
FileLoader : 1
SourceLoader : 1
importlib.abc.Finder : 1
"PathEntryFinder" : 2
find_module(fullname : 4
"MetaPathFinder.find_spec()" : 1
"PathEntryFinder.find_spec()" : 1
importlib.abc.MetaPathFinder : 1
find_spec(fullname : 5
target=None) : 5
educated : 2
"MetaPathFinders" : 1
importlib.abc.PathEntryFinder : 1
"PathEntryFinders" : 1
find_loader(fullname) : 2
"(loader : 1
portion)" : 1
"portion" : 4
contribution : 1
"(None : 5
find_module(fullname) : 1
"Finder.find_module()" : 1
"self.find_loader(fullname)[0]" : 1
importlib.abc.Loader : 1
"importlib.resources.abc.ResourceReader" : 4
create_module(spec) : 3
exec_module(module) : 5
load_module(fullname) : 5
"sys.modules"; : 1
"importlib.util.module_for_loader()") : 1
reloaded): : 1
"create_module()") : 1
module_repr(module) : 1
importlib.abc.ResourceLoader : 1
get_data(path) : 2
importlib.abc.InspectLoader : 1
get_code(fullname) : 5
get_source(fullname) : 5
is_package(fullname) : 6
source_to_code(data : 1
path='<string>') : 1
"Loader.exec_module()" : 4
"Loader.load_module()" : 2
importlib.abc.ExecutionLoader : 1
get_filename(fullname) : 4
importlib.abc.FileLoader(fullname : 1
"ResourceLoader" : 2
"ExecutionLoader" : 2
"ResourceLoader.get_data()" : 2
"ExecutionLoader.get_filename()" : 2
importlib.abc.SourceLoader : 1
"NotImplementedError") : 1
*sourceless* : 1
bytecode-specific : 1
path_stats(path) : 2
"'mtime'" : 1
(mandatory): : 1
"'size'" : 1
(optional): : 9
path_mtime(path) : 1
"path_stats()" : 1
set_data(path : 2
("errno.EACCES"/"PermissionError") : 1
"InspectLoader.get_code()" : 1
"InspectLoader.is_package()" : 2
"ExecutionLoader.get_filename()") : 1
Lib/importlib/machinery.py : 1
importlib.machinery.SOURCE_SUFFIXES : 2
importlib.machinery.DEBUG_BYTECODE_SUFFIXES : 1
non-optimized : 1
"BYTECODE_SUFFIXES" : 2
importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES : 1
importlib.machinery.BYTECODE_SUFFIXES : 1
importlib.machinery.EXTENSION_SUFFIXES : 1
importlib.machinery.all_suffixes() : 1
"inspect.getmodulename()") : 1
importlib.machinery.BuiltinImporter : 1
"Loader.create_module()" : 1
importlib.machinery.FrozenImporter : 1
Gained : 1
importlib.machinery.WindowsRegistryFinder : 1
*Finder* : 2
importlib.machinery.PathFinder : 2
path=None : 5
non-false : 1
"importlib.abc.PathEntryFinder.invalidate_caches()" : 1
importlib.machinery.FileFinder(path : 2
*loader_details) : 1
*loader_details* : 2
2-item : 1
staleness : 1
Attempt : 7
path_hook(*loader_details) : 1
importlib.machinery.SourceFileLoader(fullname : 1
"importlib.abc.SourceLoader" : 2
"importlib.abc.SourceLoader.set_data()" : 1
load_module(name=None) : 2
importlib.machinery.SourcelessFileLoader(fullname : 1
inhibits : 1
importlib.machinery.ExtensionFileLoader(fullname : 1
"importlib.abc.ExecutionLoader" : 1
"EXTENSION_SUFFIXES" : 1
NamespaceLoader(name : 1
path_finder): : 1
importlib.machinery : 2
NamespaceLoader : 1
my_namespace : 1
isinstance(my_namespace.__loader__ : 2
NamespaceLoader) : 1
importlib.abc : 1
importlib.abc.Loader) : 1
importlib.machinery.ModuleSpec(name : 1
origin=None : 2
loader_state=None : 1
is_package=None) : 2
import-system-related : 2
"module.__spec__.origin : 1
module.__file__" : 1
*values* : 16
("__name__") : 1
("__loader__") : 1
("__file__") : 1
submodule_search_locations : 1
("__path__") : 1
loader_state : 1
("__cached__") : 1
("__package__") : 1
(Read-only) : 1
has_location : 1
Lib/importlib/util.py : 1
importlib.util.MAGIC_NUMBER : 1
loading/writing : 1
importlib.util.cache_from_source(path : 1
debug_override=None : 1
optimization=None) : 1
3147**/**PEP : 3
"/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc" : 1
importlib.util.source_from_cache(path) : 1
importlib.util.decode_source(source_bytes) : 1
"importlib.abc.InspectLoader.get_source()") : 1
importlib.util.resolve_name(name : 2
**name** : 15
"importlib.util.resolve_name('sys' : 1
__spec__.parent)" : 1
**package** : 5
"..bacon" : 1
importlib.util.find_spec(name : 1
"sys.modules[name].__spec__" : 1
(contains : 2
importlib.util.module_from_spec(spec) : 5
**spec** : 3
"spec.loader.create_module" : 2
import-controlled : 2
@importlib.util.module_for_loader : 1
"load_module(self : 1
module)") : 1
**self** : 1
"importlib.abc.InspectLoader.is_package()" : 1
@importlib.util.set_loader : 1
@importlib.util.set_package : 1
importlib.util.spec_from_loader(name : 1
importlib.util.spec_from_file_location(name : 1
loader=None : 2
submodule_search_locations=None) : 1
importlib.util.source_hash(source_bytes) : 1
*source_bytes* : 1
"source_hash()" : 1
importlib.util.LazyLoader(loader) : 1
postpones : 1
safely; : 1
**heavily** : 1
Began : 1
factory(loader) : 1
importlib.machinery.SourceFileLoader : 1
lazy_loader : 1
importlib.util.LazyLoader.factory(loader) : 1
(lazy_loader : 1
suffixes)) : 1
importlib.import_module('itertools') : 1
'itertools' : 1
sys.modules: : 1
print(f"{name!r} : 2
sys.modules") : 1
(spec : 1
importlib.util.find_spec(name)) : 1
imported") : 1
print(f"can't : 1
{name!r} : 1
recipe: : 1
file_path : 1
tokenize.__file__ : 1
tokenize.__name__ : 1
importlib.util.spec_from_file_location(module_name : 1
file_path) : 1
sys.modules[module_name] : 1
lazy_import(name): : 1
importlib.util.find_spec(name) : 1
importlib.util.LazyLoader(spec.loader) : 1
loader.exec_module(module) : 1
lazy_typing : 1
lazy_import("typing") : 1
#lazy_typing : 1
#but : 1
lazy_typing.TYPE_CHECKING : 1
needs: : 1
package): : 1
SpamMetaPathFinder : 1
SpamPathEntryFinder : 1
importlib.machinery.FileFinder : 1
loader_details : 1
(importlib.machinery.SourceFileLoader : 1
importlib.machinery.SOURCE_SUFFIXES) : 1
sys.meta_path.append(SpamMetaPathFinder) : 1
sys.path_hooks.append(SpamPathEntryFinder.path_hook(loader_details)) : 1
"importlib.import_module()": : 1
import_module(name : 1
package=None): : 1
"""An : 1
import.""" : 1
absolute_name : 1
sys.modules[absolute_name] : 2
absolute_name: : 1
parent_name : 1
child_name : 2
absolute_name.rpartition('.') : 1
parent_module : 1
import_module(parent_name) : 1
parent_module.__spec__.submodule_search_locations : 1
finder.find_spec(absolute_name : 1
f'No : 1
{absolute_name!r}' : 1
ModuleNotFoundError(msg : 1
name=absolute_name) : 1
setattr(parent_module : 1
Lib/zipapp.py : 1
"myapp:main" : 1
<output : 3
myapp> : 3
--info : 2
understood: : 2
<output> : 1
--output=<output> : 1
*source*) : 1
<interpreter> : 1
--python=<interpreter> : 1
<mainfn> : 1
--main=<mainfn> : 1
*mainfn* : 2
"pkg.mod:fn" : 1
"fn" : 1
"--main" : 1
--compress : 1
zipapp.create_archive(source : 1
target=None : 5
interpreter=None : 1
main=None : 1
filter=None : 1
compressed=False) : 1
"pkg.module:callable" : 1
"pkg.module" : 1
create_archive : 1
zipapp.get_interpreter(archive) : 1
*archive* : 1
zipapp.create_archive('myapp' : 1
'myapp.pyz') : 1
"/usr/bin/env : 6
./myapp.pyz : 1
zipapp.create_archive('old_archive.pyz' : 1
'new_archive.pyz' : 1
'/usr/bin/python3') : 1
temp : 5
zipapp.create_archive('myapp.pyz' : 1
'/usr/bin/python2') : 1
open('myapp.pyz' : 1
f.write(temp.getvalue()) : 1
"/usr/bin/python") : 1
python3" : 4
later" : 1
python3.4" : 1
python2" : 1
pip: : 1
--target : 1
".dist-info" : 1
harm : 2
"interpreter" : 1
"myapp.pyz" : 1
"plain" : 3
"myapp.pyz[w]" : 1
virtue : 1
furthermore : 2
"transparently" : 1
"subprocess.run(['myapp'])" : 1
exe : 3
tacking : 1
WIN32_LEAN_AND_MEAN : 1
<windows.h> : 1
WINDOWS : 1
WINAPI : 3
wWinMain( : 1
HINSTANCE : 2
hInstance : 1
hPrevInstance : 1
LPWSTR : 1
lpCmdLine : 1
nCmdShow : 1
wmain() : 1
**myargv : 1
_alloca((__argc : 1
sizeof(wchar_t*)); : 1
myargv[0] : 1
__wargv[0]; : 1
memcpy(myargv : 1
__wargv : 1
__argc : 1
sizeof(wchar_t : 1
*)); : 1
Py_Main(__argc+1 : 1
myargv); : 1
"WINDOWS" : 1
distutils.ccompiler : 1
new_compiler : 1
compile(src): : 1
Path(src) : 1
cc : 1
new_compiler() : 1
src.stem : 1
cc.add_include_dir(distutils.sysconfig.get_python_inc()) : 1
cc.add_library_dir(os.path.join(sys.base_exec_prefix : 1
'libs')) : 1
cc.compile([str(src)]) : 2
cc.link_executable(objs : 2
exe) : 1
cc.define_macro('WINDOWS') : 1
compile("zastub.c") : 1
"Limited : 1
ABI" : 1
("python3.dll") : 1
"embedded" : 1
unzipped : 1
architecture(s) : 1
machine) : 2
("#!/path/to/interpreter") : 1
therefore: : 1
"b'#!'" : 1
("b'\n'") : 5
subdirectory) : 3
Lib/socket.py : 1
*socket* : 1
transliteration : 1
"socket()" : 10
*socket : 1
"AF_UNIX" : 11
byte; : 1
"AF_INET" : 12
"'daring.cwi.nl'" : 1
"'100.50.200.5'" : 2
"INADDR_ANY" : 1
"'<broadcast>'" : 1
"INADDR_BROADCAST" : 1
"AF_INET6" : 9
four-tuple : 1
flowinfo : 2
scope_id)" : 2
*flowinfo* : 2
*scope_id* : 5
"sin6_flowinfo" : 1
"sin6_scope_id" : 1
sockaddr_in6" : 1
meaningful) : 1
"%scope_id" : 5
"zone : 1
id") : 1
(recommended) : 2
groups)" : 2
Linux-only : 3
"AF_TIPC" : 1
non-IP : 1
"(addr_type : 1
v3 : 1
scope])" : 1
where: : 5
*addr_type* : 4
"TIPC_ADDR_NAMESEQ" : 2
"TIPC_ADDR_NAME" : 2
"TIPC_ADDR_ID" : 2
"TIPC_ZONE_SCOPE" : 1
"TIPC_CLUSTER_SCOPE" : 1
"TIPC_NODE_SCOPE" : 1
*v1* : 5
*v2* : 5
*v3* : 3
"(interface : 3
"AF_CAN" : 3
*interface* : 1
"'can0'" : 1
packets : 10
"CAN_ISOTP" : 2
rx_addr : 1
tx_addr)" : 1
extended) : 1
pgn : 1
ECU : 1
(PGN) : 1
"(id : 3
unit)" : 1
"SYSPROTO_CONTROL" : 1
"AF_BLUETOOTH" : 1
formats: : 4
"BTPROTO_L2CAP" : 1
"(bdaddr : 2
psm)" : 1
"bdaddr" : 4
"psm" : 1
"BTPROTO_RFCOMM" : 2
channel)" : 1
"channel" : 2
"BTPROTO_HCI" : 2
"(device_id,)" : 1
"device_id" : 1
"BTPROTO_SCO" : 1
(ex : 1
"b'12:23:34:45:56:67'") : 1
cryptography : 4
feat : 1
mask]])" : 1
"aead" : 1
"skcipher" : 1
"rng" : 1
"hmac(sha256)" : 1
"cbc(aes)" : 1
"drbg_nopr_ctr_aes256" : 1
*feat* : 1
*mask* : 9
2.6.38 : 3
"(CID : 1
CID : 1
*vsock(7)* : 1
"(ifname : 1
proto[ : 1
pkttype[ : 1
hatype[ : 1
addr]]])" : 1
*ifname* : 1
*proto* : 9
network-byte-order : 1
Ethernet : 2
*pkttype* : 1
"PACKET_HOST" : 1
Packet : 4
"PACKET_BROADCAST" : 1
Physical-layer : 1
"PACKET_MULTICAST" : 1
physical-layer : 1
"PACKET_OTHERHOST" : 1
promiscuous : 2
"PACKET_OUTGOING" : 1
originating : 4
*hatype* : 1
ARP : 1
*addr* : 7
"AF_QIPCRTR" : 1
co-processors : 1
"(node : 1
"IPPROTO_UDPLITE" : 1
"self.setsockopt(IPPROTO_UDPLITE : 2
UDPLITE_SEND_CSCOV : 1
UDPLITE_RECV_CSCOV : 1
"range(8 : 1
2**16 : 1
"socket(AF_INET : 1
SOCK_DGRAM : 4
IPPROTO_UDPLITE)" : 2
"socket(AF_INET6 : 1
2.6.20 : 1
IPv4/v6 : 10
nondeterministic : 1
"setblocking()" : 3
"settimeout()" : 7
socket.error : 1
socket.herror : 1
address- : 3
*h_errno* : 3
"gethostbyname_ex()" : 3
"gethostbyaddr()" : 3
"(h_errno : 1
string)" : 2
"hstrerror()" : 1
socket.gaierror : 1
"(error : 1
"gai_strerror()" : 1
"EAI_*" : 1
socket.timeout : 1
"setdefaulttimeout()") : 1
"timed : 1
out" : 2
AF_* : 1
SOCK_* : 1
"AddressFamily" : 1
"SocketKind" : 1
socket.AF_UNIX : 1
socket.AF_INET6 : 1
socket.SOCK_STREAM : 7
socket.SOCK_DGRAM : 2
socket.SOCK_RAW : 3
socket.SOCK_RDM : 1
socket.SOCK_SEQPACKET : 1
"SOCK_STREAM" : 9
"SOCK_DGRAM" : 3
useful.) : 1
socket.SOCK_CLOEXEC : 1
socket.SOCK_NONBLOCK : 1
calls) : 3
2.6.27 : 6
SO_* : 1
socket.SOMAXCONN : 1
MSG_* : 1
SOL_* : 1
SCM_* : 1
IPPROTO_* : 1
IPPORT_* : 1
INADDR_* : 1
IP_* : 1
IPV6_* : 1
EAI_* : 1
AI_* : 1
NI_* : 1
TCP_* : 1
3.6.5: : 1
"TCP_FASTOPEN" : 1
"TCP_KEEPCNT" : 1
"TCP_NOTSENT_LOWAT" : 1
added.On : 1
"TCP_KEEPIDLE" : 2
"TCP_KEEPINTVL" : 1
"TCP_KEEPALIVE" : 1
"TCP_INFO" : 1
socket.AF_CAN : 1
socket.PF_CAN : 1
SOL_CAN_* : 1
CAN_* : 1
2.6.25 : 4
socket.CAN_BCM : 1
CAN_BCM_* : 1
CAN_BCM : 2
(BCM) : 1
"CAN_BCM_CAN_FD_FRAME" : 1
socket.CAN_RAW_FD_FRAMES : 1
CAN_RAW : 1
socket.CAN_RAW_JOIN_FILTERS : 1
Joins : 1
socket.CAN_ISOTP : 1
(ISO : 2
15765-2) : 1
socket.CAN_J1939 : 1
SAE : 1
socket.AF_PACKET : 1
socket.PF_PACKET : 1
PACKET_* : 1
socket.AF_RDS : 1
socket.PF_RDS : 1
socket.SOL_RDS : 1
RDS_* : 1
2.6.30 : 4
socket.SIO_RCVALL : 1
socket.SIO_KEEPALIVE_VALS : 1
socket.SIO_LOOPBACK_FAST_PATH : 1
RCVALL_* : 1
WSAIoctl() : 1
TIPC_* : 1
socket.AF_ALG : 1
socket.SOL_ALG : 1
ALG_* : 1
socket.AF_VSOCK : 1
socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID : 1
VMADDR* : 1
SO_VM* : 1
host/guest : 1
socket.AF_LINK : 1
socket.has_ipv6 : 1
socket.BDADDR_ANY : 1
socket.BDADDR_LOCAL : 1
"BDADDR_ANY" : 1
socket.HCI_FILTER : 1
socket.HCI_TIME_STAMP : 1
socket.HCI_DATA_DIR : 1
"HCI_FILTER" : 1
"HCI_TIME_STAMP" : 1
"HCI_DATA_DIR" : 1
socket.AF_QIPCRTR : 1
Qualcomm's : 1
router : 1
socket.SCM_CREDS2 : 1
socket.LOCAL_CREDS : 1
socket.LOCAL_CREDS_PERSISTENT : 1
LOCAL_CREDS : 2
LOCAL_CREDS_PERSISTENT : 2
SOCK_STREAM : 1
Linux/DragonFlyBSD : 1
SO_PASSCRED : 1
SCM_CREDS2 : 1
socket.SO_INCOMING_CPU : 1
"SO_REUSEPORT" : 5
socket.socket(family=AF_INET : 1
type=SOCK_STREAM : 1
proto=0 : 6
fileno=None) : 1
"AF_RDS" : 1
"SOCK_RAW" : 1
"SOCK_" : 1
"CAN_RAW" : 1
*fileno* : 6
*family* : 20
auto-detected : 1
Auto-detection : 1
overruled : 1
"socket.getpeername()" : 2
"socket.fromfd()" : 1
"socket.__new__" : 1
"protocol" : 4
AF_RDS : 1
"SOCK_NONBLOCK" : 4
"SOCK_CLOEXEC" : 1
socket.SOCK_NONBLOCK) : 1
"sock.type" : 2
socket.socketpair([family[ : 1
type[ : 1
proto]]]) : 1
platform; : 4
socket.create_connection(address : 1
timeout=GLOBAL_DEFAULT : 1
source_address=None : 5
all_errors=False) : 1
port)") : 2
"socket.connect()": : 1
"getdefaulttimeout()" : 2
socket.create_server(address : 1
family=AF_INET : 1
reuse_port=False : 1
dualstack_ipv6=False) : 1
"socket.listen()"; : 1
*reuse_port* : 6
*dualstack_ipv6* : 2
IPv4-mapped : 1
"has_dualstack_ipv6()": : 1
("" : 2
8080) : 5
8080 : 2
socket.has_dualstack_ipv6(): : 1
socket.create_server(addr : 1
family=socket.AF_INET6 : 1
dualstack_ipv6=True) : 1
socket.create_server(addr) : 1
TIME_WAIT : 1
socket.has_dualstack_ipv6() : 1
socket.fromfd(fd : 1
proto=0) : 1
inet : 1
daemon) : 2
socket.fromshare(data) : 1
Instantiate : 2
"socket.share()" : 1
socket.SocketType : 1
"type(socket(...))" : 1
network-related : 1
services: : 2
socket.close(fd) : 1
socket.getaddrinfo(host : 1
family=0 : 5
type=0 : 2
*host*/*port* : 1
"'http'" : 1
"AI_*" : 1
"AI_NUMERICHOST" : 1
"(family : 1
proto : 3
canonname : 3
sockaddr)" : 1
*canonname* : 2
"AI_CANONNAME" : 1
*sockaddr* : 3
"AF_INET6") : 1
"socket.getaddrinfo" : 1
"example.org" : 1
(results : 1
enabled): : 1
socket.getaddrinfo("example.org" : 1
proto=socket.IPPROTO_TCP) : 1
[(socket.AF_INET6 : 1
('2606:2800:220:1:248:1893:25c8:1946' : 1
(socket.AF_INET : 1
('93.184.216.34' : 1
80))] : 1
socket.getfqdn([name]) : 1
"'0.0.0.0'" : 1
"gethostname()" : 2
socket.gethostbyname(hostname) : 1
"gethostbyname()" : 1
"socket.gethostbyname" : 2
"hostname" : 5
socket.gethostbyname_ex(hostname) : 1
"(hostname : 3
aliaslist : 2
ipaddrlist)" : 2
host's : 2
*aliaslist* : 2
*ipaddrlist* : 2
"socket.gethostname" : 1
"getfqdn()" : 2
socket.gethostbyaddr(ip_address) : 1
*ip_address* : 1
"socket.gethostbyaddr" : 1
"ip_address" : 2
socket.getnameinfo(sockaddr : 1
*getnameinfo(3)* : 1
"socket.getnameinfo" : 1
"sockaddr" : 2
socket.getprotobyname(protocolname) : 1
"'icmp'") : 1
("SOCK_RAW"); : 1
socket.getservbyname(servicename[ : 1
protocolname]) : 2
"'tcp'" : 2
"'udp'" : 2
"socket.getservbyname" : 1
"servicename" : 2
"protocolname" : 4
socket.getservbyport(port[ : 1
"socket.getservbyport" : 1
socket.ntohl(x) : 1
no-op; : 4
socket.ntohs(x) : 1
socket.htonl(x) : 1
socket.htons(x) : 1
socket.inet_aton(ip_string) : 1
dotted-quad : 2
'123.45.67.89') : 2
conversing : 2
"in_addr" : 4
"inet_aton()" : 3
dots; : 1
*inet(3)* : 1
socket.inet_ntoa(packed_ip) : 1
"inet_ntoa()" : 1
socket.inet_pton(address_family : 1
ip_string) : 1
family-specific : 2
"inet_aton()") : 1
"in6_addr" : 2
*address_family* : 3
*ip_string* : 1
socket.inet_ntop(address_family : 1
packed_ip) : 1
"'7.10.0.5'" : 1
"'5aef:2b::8'") : 1
"inet_ntoa()") : 1
*packed_ip* : 1
socket.CMSG_LEN(length) : 1
"CMSG_SPACE()" : 3
socket.CMSG_SPACE(length) : 1
socket.getdefaulttimeout() : 1
socket.sethostname(name) : 1
"socket.sethostname" : 1
socket.if_nameindex() : 1
(index : 3
examples): : 1
UUID: : 2
"{FB605B73-AAC2-49A6-9A2F-25416AEA0573}" : 1
"ethernet_32770" : 2
"vEthernet : 1
(nat)" : 1
description: : 8
"Hyper-V : 1
Adapter" : 1
socket.if_nametoindex(if_name) : 1
"Interface : 2
"if_nameindex()" : 2
socket.if_indextoname(if_index) : 1
socket.send_fds(sock : 1
fds[ : 1
flags[ : 2
address]]) : 1
*fds* : 4
*sock* : 38
"SCM_RIGHTS" : 4
socket.recv_fds(sock : 1
maxfds[ : 1
flags]) : 5
Receive : 23
*maxfds* : 2
list(fds) : 2
"(conn : 3
*conn* : 4
socket.bind(address) : 1
Bind : 14
"socket.bind" : 1
"address" : 17
flushed) : 2
socket.connect(address) : 1
"socket.connect" : 2
socket.connect_ex(address) : 1
"connect(address)" : 1
found," : 1
socket.detach() : 1
socket.dup() : 1
socket.fileno() : 1
"os.fdopen()") : 1
socket.get_inheritable() : 1
handle: : 4
socket.getpeername() : 1
socket.getsockopt(level : 1
optname[ : 1
buflen]) : 1
*getsockopt(2)*) : 1
("SO_*" : 2
"socket.gettimeout() : 1
socket.gettimeout() : 1
socket.ioctl(control : 1
WSAIoctl : 1
"fcntl.fcntl()" : 1
"SIO_RCVALL" : 1
"SIO_KEEPALIVE_VALS" : 1
socket.listen([backlog]) : 1
unaccepted : 1
socket.makefile(mode='r' : 1
socket.recv(bufsize[ : 1
*bufsize* : 12
*recv(2)* : 4
*flags*; : 4
realities : 1
socket.recvfrom(bufsize[ : 1
"(bytes : 1
socket.recvmsg(bufsize[ : 1
ancbufsize[ : 2
flags]]) : 4
*ancbufsize* : 2
"CMSG_LEN()" : 1
4-tuple: : 2
"(data : 1
ancdata : 3
msg_flags : 2
*ancdata* : 3
"(cmsg_level : 2
cmsg_type : 4
cmsg_data)" : 2
(control : 2
received: : 3
*cmsg_level* : 2
*cmsg_type* : 2
protocol-specific : 3
*cmsg_data* : 2
*msg_flags* : 2
"(socket.SOL_SOCKET : 1
socket.SCM_RIGHTS : 2
fds)" : 1
received) : 2
recv_fds(sock : 1
msglen : 1
maxfds): : 1
array.array("i") : 1
sock.recvmsg(msglen : 1
socket.CMSG_LEN(maxfds : 1
fds.itemsize)) : 1
cmsg_level : 2
cmsg_data : 1
ancdata: : 1
socket.SOL_SOCKET : 1
socket.SCM_RIGHTS: : 1
fds.frombytes(cmsg_data[:len(cmsg_data) : 1
(len(cmsg_data) : 1
fds.itemsize)]) : 1
socket.recvmsg_into(buffers[ : 1
scatter : 1
non-ancillary : 4
objects); : 3
("sysconf()" : 6
"SC_IOV_MAX") : 2
"(nbytes : 2
*nbytes* : 14
s1 : 5
s2 : 7
b1 : 1
bytearray(b'----') : 1
b2 : 2
bytearray(b'0123456789') : 1
b3 : 1
bytearray(b'--------------') : 1
s1.send(b'Mary : 1
lamb') : 1
s2.recvmsg_into([b1 : 1
memoryview(b2)[2:9] : 1
b3]) : 1
[b1 : 1
b3] : 1
[bytearray(b'Mary') : 1
bytearray(b'01 : 1
9') : 1
bytearray(b'little : 1
lamb---')] : 1
socket.recvfrom_into(buffer[ : 1
nbytes[ : 2
socket.recv_into(buffer[ : 1
socket.send(bytes[ : 1
sent; : 4
socket.sendall(bytes[ : 1
socket.sendto(bytes : 2
"socket.sendto" : 1
socket.sendmsg(buffers[ : 1
ancdata[ : 1
address]]]) : 1
"CMSG_SPACE()") : 1
send_fds(sock : 1
fds): : 1
sock.sendmsg([msg] : 1
[(socket.SOL_SOCKET : 1
array.array("i" : 1
fds))]) : 1
"socket.sendmsg" : 1
socket.sendmsg_afalg([msg] : 1
op[ : 1
iv[ : 1
assoclen[ : 1
flags]]]) : 1
IV : 1
AEAD : 1
socket.sendfile(file : 1
offset=0 : 3
count=None) : 1
"file.tell()" : 3
socket.set_inheritable(inheritable) : 1
socket.setblocking(flag) : 1
"sock.setblocking(True)" : 1
"sock.settimeout(None)" : 1
"sock.setblocking(False)" : 1
"sock.settimeout(0.0)" : 1
socket.settimeout(value) : 1
socket.setsockopt(level : 3
*setsockopt(2)*) : 1
bytestrings) : 1
*optlen* : 1
"optval=NULL" : 1
"optlen=optlen" : 1
setsockopt(level : 1
socket.shutdown(how) : 1
Shut : 2
halves : 3
*how* : 9
"SHUT_RD" : 1
"SHUT_WR" : 1
"SHUT_RDWR" : 1
socket.share(process_id) : 1
*process_id* : 1
interprocess : 3
"fromshare()" : 1
"write()"; : 2
socket.family : 1
socket.proto : 1
modes: : 4
"setdefaulttimeout()" : 1
*blocking : 3
out) : 4
*non-blocking : 2
*timeout : 3
mode*; : 1
system-dependent : 6
echoes : 1
(servicing : 1
client) : 3
"listen()" : 16
"sendall()"/"recv()" : 1
50007 : 4
non-privileged : 2
s.bind((HOST : 3
s.listen(1) : 2
s.accept() : 2
conn: : 6
print('Connected : 2
by' : 2
addr) : 7
conn.recv(1024) : 2
conn.sendall(data) : 1
'daring.cwi.nl' : 2
s.sendall(b'Hello : 2
s.recv(1024) : 2
print('Received' : 2
IPv6-ready : 2
socket.getaddrinfo(HOST : 2
socket.AF_UNSPEC : 2
socket.AI_PASSIVE): : 1
af : 2
socktype : 4
sa : 2
socket.socket(af : 2
proto) : 2
msg: : 5
s.bind(sa) : 1
print('could : 2
sys.exit(1) : 3
conn.send(data) : 2
socket.SOCK_STREAM): : 1
s.connect(sa) : 1
sniffer : 1
socket.gethostbyname(socket.gethostname()) : 1
socket.IPPROTO_IP) : 1
s.setsockopt(socket.IPPROTO_IP : 1
socket.IP_HDRINCL : 1
s.ioctl(socket.SIO_RCVALL : 2
socket.RCVALL_ON) : 1
print(s.recvfrom(65565)) : 1
socket.RCVALL_OFF) : 1
socket.socket(socket.AF_CAN : 2
socket.CAN_BCM) : 1
("CAN_RAW") : 1
("CAN_BCM") : 1
"socket.recv()" : 2
counterparts) : 1
privileges: : 1
packing/unpacking : 1
'struct : 1
can_frame' : 1
<linux/can.h>) : 1
can_frame_fmt : 1
"=IB3x8s" : 1
can_frame_size : 1
struct.calcsize(can_frame_fmt) : 1
build_can_frame(can_id : 1
can_dlc : 4
data.ljust(8 : 1
b'\x00') : 1
struct.pack(can_frame_fmt : 1
can_id : 2
dissect_can_frame(frame): : 1
struct.unpack(can_frame_fmt : 1
(can_id : 1
data[:can_dlc]) : 1
'vcan0' : 1
socket.CAN_RAW) : 1
s.bind(('vcan0',)) : 1
cf : 1
s.recvfrom(can_frame_size) : 1
print('Received: : 1
can_id=%x : 1
can_dlc=%x : 1
data=%s' : 1
dissect_can_frame(cf)) : 1
s.send(cf) : 1
frame') : 2
s.send(build_can_frame(0x01 : 1
b'\x01\x02\x03')) : 1
executions : 4
98] : 1
"TIME_WAIT" : 3
"socket.SO_REUSEADDR": : 1
s.setsockopt(socket.SOL_SOCKET : 1
socket.SO_REUSEADDR : 1
papers: : 1
*An : 2
Introductory : 1
4.3BSD : 2
Tutorial* : 2
Stuart : 1
Sechrest : 1
Leffler : 1
Supplementary : 1
Documents : 2
(sections : 1
PS1:7 : 1
PS1:8) : 1
socket-related : 1
pages; : 1
Winsock : 1
3493** : 1
********************************************************** : 7
Lib/base64.py : 1
4648** : 8
Ascii85 : 6
**uuencode** : 1
(normal : 2
URL- : 4
filesystem-safe) : 1
76 : 6
2045** : 15
Ascii85/Base85 : 1
provides: : 2
base64.b64encode(s : 1
altchars=None) : 1
*altchars* : 5
base64.b64decode(s : 1
altchars=None : 1
validate=False) : 1
*validate* : 3
non-alphabet : 3
base64.standard_b64encode(s) : 1
base64.standard_b64decode(s) : 1
base64.urlsafe_b64encode(s) : 1
filesystem-safe : 2
substitutes : 3
base64.urlsafe_b64decode(s) : 1
base64.b32encode(s) : 1
base64.b32decode(s : 1
casefold=False : 1
map01=None) : 1
*casefold* : 2
(oh) : 2
(one) : 2
(eye) : 2
(el) : 2
*map01* : 2
O) : 1
base64.b32hexencode(s) : 1
"b32encode()" : 1
base64.b32hexdecode(s : 1
casefold=False) : 2
"b32decode()" : 1
base64.b16encode(s) : 1
base64.b16decode(s : 1
base64.a85encode(b : 1
foldspaces=False : 2
wrapcol=0 : 1
pad=False : 1
adobe=False) : 1
*foldspaces* : 2
0x20) : 2
'btoa' : 1
"standard" : 5
*wrapcol* : 1
*pad* : 2
"btoa" : 1
*adobe* : 2
framed : 3
"~>" : 1
base64.a85decode(b : 1
adobe=False : 1
ignorechars=b' : 1
\t\n\r\x0b') : 1
<~ : 1
~>) : 1
*ignorechars* : 1
base64.b85encode(b : 1
pad=False) : 1
git-style : 1
"b'\0'" : 1
base64.b85decode(b) : 1
base85-encoded : 1
base64.decode(input : 1
"input.readline()" : 1
base64.decodebytes(s) : 1
base64.encode(input : 1
"input.read()" : 1
(MIME) : 2
base64.encodebytes(s) : 1
base64-encoded : 2
base64.b64encode(b'data : 1
encoded') : 1
b'ZGF0YSB0byBiZSBlbmNvZGVk' : 1
base64.b64decode(encoded) : 1
b'data : 1
encoded' : 1
12); : 1
ASCII-to-binary : 2
binary-to-ASCII : 2
1521** : 2
(Multipurpose : 3
Mail : 9
One: : 2
Mechanisms : 2
Bodies : 1
"Base64 : 1
Content-Transfer-Encoding," : 1
Lib/unittest/__init__.py : 1
automation : 1
aggregation : 2
fixture : 6
*test : 8
fixture* : 3
case* : 1
suite* : 2
runner* : 1
orchestrates : 1
test-support : 1
Testing: : 1
pytest : 1
lighter-weight : 1
func(10) : 1
Taxonomy : 1
special-interest-group : 1
"Tools/unittestgui/unittestgui.py" : 1
Buildbot : 1
Jenkins : 1
AppVeyor : 1
suffice : 2
TestStringMethods(unittest.TestCase): : 1
test_upper(self): : 1
self.assertEqual('foo'.upper() : 1
'FOO') : 1
test_isupper(self): : 1
self.assertTrue('FOO'.isupper()) : 1
self.assertFalse('Foo'.isupper()) : 1
test_split(self): : 1
self.assertEqual(s.split() : 1
['hello' : 1
'world']) : 1
s.split : 1
s.split(2) : 1
crux : 1
"tearDown()" : 10
Ran : 3
0.000s : 1
test_isupper : 1
(__main__.TestStringMethods.test_isupper) : 1
test_split : 1
(__main__.TestStringMethods.test_split) : 1
test_upper : 1
(__main__.TestStringMethods.test_upper) : 1
0.001s : 1
test_module1 : 1
test_module2 : 1
test_module.TestClass : 1
test_module.TestClass.test_method : 1
tests/test_something.py : 1
(higher : 1
verbosity) : 2
test_module : 1
**unittest** : 1
--buffer : 1
--catch : 1
-f : 18
"fnmatch.fnmatchcase()"; : 1
"-k : 1
--locals : 1
identifiers) : 4
"TestLoader.discover()" : 2
project_directory : 3
discover" : 1
"discover" : 2
sub-command : 6
--start-directory : 1
("." : 2
--pattern : 1
("test*.py" : 1
--top-level-directory : 1
Top : 9
"*_test.py" : 2
"myproject.subpackage.test" : 1
"foo/bar/baz.py" : 1
"foo.bar.baz".If : 1
exit.If : 1
root/namespace : 1
root") : 1
file.Directories : 1
proj/ : 1
namespace/ : 1
test_mypkg.py : 1
namespace.mypkg : 1
cases* : 1
"FunctionTestCase" : 3
"test") : 1
DefaultWidgetSizeTestCase(unittest.TestCase): : 1
test_default_widget_size(self): : 2
Widget('The : 3
widget') : 3
self.assertEqual(widget.size() : 1
50)) : 1
"assert*()" : 1
*failure* : 1
WidgetTestCase(unittest.TestCase): : 2
setUp(self): : 8
self.widget : 2
self.assertEqual(self.widget.size() : 2
(50,50) : 1
'incorrect : 1
test_widget_resize(self): : 1
self.widget.resize(100,150) : 1
(100,150) : 1
'wrong : 1
resize') : 1
tidies : 1
tearDown(self): : 5
self.widget.dispose() : 1
"unittest"'s : 1
suite(): : 1
unittest.TestSuite() : 1
suite.addTest(WidgetTestCase('test_default_widget_size')) : 1
suite.addTest(WidgetTestCase('test_widget_resize')) : 1
unittest.TextTestRunner() : 1
runner.run(suite()) : 1
"widget.py") : 1
"test_widget.py": : 1
Set-up : 1
tear-down : 3
testSomething(): : 1
makeSomething() : 1
something.name : 1
unittest.FunctionTestCase(testSomething : 1
setUp=makeSomethingDB : 1
tearDown=deleteSomethingDB) : 1
"unittest"-based : 3
"DocTestSuite" : 1
"doctest"-based : 1
failure," : 1
"skip()" : 2
"TestCase.skipTest()" : 2
MyTestCase(unittest.TestCase): : 1
@unittest.skip("demonstrating : 1
skipping") : 2
test_nothing(self): : 1
self.fail("shouldn't : 1
happen") : 1
@unittest.skipIf(mylib.__version__ : 1
version") : 1
test_format(self): : 1
test_windows_support(self): : 1
test_maybe_skipped(self): : 1
external_resource_available(): : 1
self.skipTest("external : 1
test_format : 1
(__main__.MyTestCase.test_format) : 1
version' : 1
test_nothing : 1
(__main__.MyTestCase.test_nothing) : 1
'demonstrating : 1
skipping' : 1
test_maybe_skipped : 1
(__main__.MyTestCase.test_maybe_skipped) : 1
'external : 1
available' : 1
test_windows_support : 1
(__main__.MyTestCase.test_windows_support) : 1
'requires : 1
0.005s : 1
(skipped=4) : 1
@unittest.skip("showing : 1
MySkippedTestCase(unittest.TestCase): : 1
test_not_run(self): : 1
"TestCase.setUp()" : 1
"expectedFailure()" : 4
ExpectedFailureTestCase(unittest.TestCase): : 1
test_fail(self): : 1
self.assertEqual(1 : 1
"broken") : 1
skipUnlessHasattr(obj : 1
func: : 2
unittest.skip("{!r} : 1
{!r}".format(obj : 1
attr)) : 1
failures: : 1
@unittest.skip(reason) : 1
Unconditionally : 1
@unittest.skipIf(condition : 1
reason) : 3
@unittest.skipUnless(condition : 1
unittest.SkipTest(reason) : 1
Skipped : 4
6): : 1
FAIL: : 4
test_even : 8
(__main__.NumbersTest.test_even) : 4
(i=1) : 1
"subtests.py" : 4
AssertionError: : 20
(i=3) : 1
(i=5) : 1
unittest.TestCase(methodName='runTest') : 1
universe : 1
*methodName* : 3
"runTest()" : 3
test) : 2
tearDown() : 2
errors) : 16
setUpClass() : 1
"setUpClass" : 5
"classmethod()": : 2
setUpClass(cls): : 2
tearDownClass() : 1
tearDownClass(cls): : 2
run(result=None) : 2
"defaultTestResult()" : 2
"run()"'s : 2
skipTest(reason) : 1
subTest(msg=None : 1
**params) : 1
*params* : 11
debug() : 2
methods): : 1
+-------------------------------------------+-------------------------------+-----------------+ : 13
Checks : 23
|===========================================|===============================|=================| : 1
"assertEqual(a : 4
"assertNotEqual(a : 3
"assertTrue(x)" : 1
"bool(x) : 2
"assertFalse(x)" : 1
"assertIs(a : 1
"assertIsNot(a : 1
"assertIsNone(x)" : 1
"assertIsNotNone(x)" : 1
"assertIn(a : 1
"assertNotIn(a : 1
"assertIsInstance(a : 1
"isinstance(a : 1
"assertNotIsInstance(a : 1
isinstance(a : 4
"longMessage") : 1
assertEqual(first : 1
msg=None) : 29
assertNotEqual(first : 1
assertTrue(expr : 1
assertFalse(expr : 1
*expr* : 2
"bool(expr) : 1
"expr : 1
"assertIs(expr : 1
True)" : 1
latter) : 2
"assertTrue(a : 1
b)") : 1
assertIs(first : 1
assertIsNot(first : 1
assertIsNone(expr : 1
assertIsNotNone(expr : 1
assertIn(member : 1
assertNotIn(member : 1
*member* : 7
assertIsInstance(obj : 1
assertNotIsInstance(obj : 1
"assertIs(type(obj) : 1
+-----------------------------------------------------------+----------------------------------------+--------------+ : 7
|===========================================================|========================================|==============| : 1
"assertRaises(exc : 2
"fun(*args : 4
"assertRaisesRegex(exc : 1
"assertWarns(warn : 1
*warn* : 2
"assertWarnsRegex(warn : 1
"assertLogs(logger : 1
level)" : 2
*logger* : 10
"assertNoLogs(logger : 1
assertRaises(exception : 2
self.assertRaises(SomeException): : 1
do_something() : 4
"exception" : 2
self.assertRaises(SomeException) : 1
cm: : 9
the_exception : 1
cm.exception : 1
self.assertEqual(the_exception.error_code : 1
assertRaisesRegex(exception : 2
*regex* : 6
self.assertRaisesRegex(ValueError : 2
for.*XYZ'$" : 1
'XYZ') : 2
'literal'): : 1
int('XYZ') : 1
assertWarns(warning : 2
*warning* : 2
*warnings* : 4
self.assertWarns(SomeWarning): : 1
self.assertWarns(SomeWarning) : 1
self.assertIn('myfile.py' : 1
cm.filename) : 1
self.assertEqual(320 : 1
cm.lineno) : 1
assertWarnsRegex(warning : 2
self.assertWarnsRegex(DeprecationWarning : 1
r'legacy_function\(\) : 1
legacy_function : 1
self.assertWarnsRegex(RuntimeWarning : 1
'unsafe : 1
frobnicating'): : 1
frobnicate('/etc/passwd') : 1
assertLogs(logger=None : 1
level=None) : 2
"logging.Logger" : 3
non-propagating : 1
descendent : 1
""ERROR"" : 2
"logging.ERROR") : 2
"logging.LogRecord" : 1
self.assertLogs('foo' : 1
level='INFO') : 1
logging.getLogger('foo').info('first : 1
logging.getLogger('foo.bar').error('second : 1
self.assertEqual(cm.output : 1
['INFO:foo:first : 1
'ERROR:foo.bar:second : 1
message']) : 1
assertNoLogs(logger=None : 1
+-----------------------------------------+----------------------------------+----------------+ : 10
|=========================================|==================================|================| : 1
"assertAlmostEqual(a : 3
"round(a-b : 2
"assertNotAlmostEqual(a : 3
"assertGreater(a : 1
"assertGreaterEqual(a : 1
"assertLess(a : 1
"assertLessEqual(a : 1
"assertRegex(s : 1
"r.search(s)" : 1
"assertNotRegex(s : 1
r.search(s)" : 1
"assertCountEqual(a : 1
assertAlmostEqual(first : 1
places=7 : 2
delta=None) : 2
assertNotAlmostEqual(first : 1
approximately) : 1
*decimal : 1
places* : 1
*significant : 1
digits* : 1
Supplying : 2
assertGreater(first : 1
assertGreaterEqual(first : 1
assertLess(first : 1
assertLessEqual(first : 1
self.assertGreaterEqual(3 : 1
assertRegex(text : 1
assertNotRegex(text : 1
matched) : 2
assertCountEqual(first : 1
"assertEqual(Counter(list(first)) : 1
Counter(list(second)))" : 1
"addTypeEqualityFunc()": : 1
addTypeEqualityFunc(typeobj : 1
Registers : 6
*typeobj* : 1
"self.failureException(msg)" : 1
inequalities : 1
+-------------------------------------------+-------------------------------+----------------+ : 7
|===========================================|===============================|================| : 1
"assertMultiLineEqual(a : 1
"assertSequenceEqual(a : 1
"assertListEqual(a : 1
"assertTupleEqual(a : 1
"assertSetEqual(a : 1
"assertDictEqual(a : 1
assertMultiLineEqual(first : 1
assertSequenceEqual(first : 1
seq_type=None) : 1
*seq_type* : 2
assertListEqual(first : 1
assertTupleEqual(first : 1
assertSetEqual(first : 1
Fails : 4
"set.difference()" : 1
assertDictEqual(first : 1
fail(msg=None) : 1
failureException : 1
"play : 1
fair" : 1
longMessage : 1
assertXYY : 1
self.longMessage : 1
maxDiff : 1
80*8 : 1
countTestCases() : 2
defaultTestResult() : 1
"TestResult"; : 1
id() : 1
shortDescription() : 1
addCleanup(function : 1
(LIFO : 3
(last-in : 7
out)) : 2
enterContext(cm) : 1
doCleanups() : 1
*prior* : 3
addClassCleanup(function : 1
first-out)) : 1
enterClassContext(cm) : 1
doClassCleanups() : 1
unittest.IsolatedAsyncioTestCase(methodName='runTest') : 1
asyncSetUp() : 1
asyncTearDown() : 1
"asyncSetUp()" : 1
addAsyncCleanup(function : 1
enterAsyncContext(cm) : 1
"addAsyncCleanup()" : 1
Test(IsolatedAsyncioTestCase): : 1
events.append("setUp") : 1
self._async_connection : 1
events.append("asyncSetUp") : 1
test_response(self): : 1
events.append("test_response") : 1
self._async_connection.get("https://example.com") : 1
self.addAsyncCleanup(self.on_cleanup) : 1
events.append("tearDown") : 1
self._async_connection.close() : 1
events.append("asyncTearDown") : 1
on_cleanup(self): : 1
events.append("cleanup") : 1
"events" : 2
"["setUp" : 1
"asyncSetUp" : 1
"test_response" : 1
"asyncTearDown" : 1
"tearDown" : 3
"cleanup"]" : 1
unittest.FunctionTestCase(testFunc : 1
setUp=None : 3
tearDown=None : 3
description=None) : 3
+--------------------------------+------------------------+-------------------------+ : 11
|================================|========================|=========================| : 1
failUnlessEqual : 1
assertEquals : 1
failIfEqual : 1
assertNotEquals : 1
failUnless : 1
assert_ : 1
failIf : 1
failUnlessRaises : 1
failUnlessAlmostEqual : 1
assertAlmostEquals : 1
failIfAlmostEqual : 1
assertNotAlmostEquals : 1
assertRegexpMatches : 1
assertNotRegexpMatches : 1
assertRaisesRegexp : 1
fail* : 1
assert* : 1
unittest.TestSuite(tests=()) : 1
*tests* : 2
addTest(test) : 1
addTests(tests) : 1
"addTest()" : 1
"TestCase": : 2
run(result) : 1
"TestCase.run()" : 1
"TestSuite.run()" : 4
sub-suites : 1
__iter__() : 2
equality) : 1
"TestSuite._removeTestAtIndex()" : 2
"TestRunner" : 3
unittest.TestLoader : 1
"unittest.defaultTestLoader" : 1
Non- : 2
loadTestsFromTestCase(testCaseClass) : 1
"TestCase"-derived : 3
"testCaseClass" : 1
loadTestsFromModule(module : 1
pattern=None) : 1
loadTestsFromName(name : 1
module=None) : 3
"SampleTests" : 1
"SampleTestCase" : 1
("test_one()" : 1
"test_two()" : 2
"test_three()") : 1
"'SampleTests.SampleTestCase'" : 1
"'SampleTests.SampleTestCase.test_two'" : 1
imported; : 1
self.errors : 1
loadTestsFromNames(names : 1
getTestCaseNames(testCaseClass) : 1
*testCaseClass*; : 1
discover(start_dir : 1
pattern='test*.py' : 1
top_level_dir=None) : 1
recursing : 1
TestSuite : 1
matching.) : 1
"package.load_tests(loader : 1
pattern)" : 1
"loader.discover" : 1
*top_level_dir* : 1
"loader.discover()" : 1
*start_dir* : 3
testMethodPrefix : 1
"'test'" : 3
"loadTestsFrom*()" : 4
sortTestMethodsUsing : 1
suiteClass : 1
testNamePatterns : 1
unittest.TestResult : 1
recorded; : 1
"TestRunner.run()" : 1
"TestCase.assert*()" : 1
expectedFailures : 1
unexpectedSuccesses : 1
shouldStop : 1
testsRun : 1
"startTest()" : 1
"stopTest()" : 1
Collected : 2
tb_locals : 2
wasSuccessful() : 1
"unexpectedSuccesses" : 2
"shouldStop" : 1
startTest(test) : 1
*test* : 17
stopTest(test) : 1
startTestRun() : 1
stopTestRun() : 1
addError(test : 1
*err* : 5
"sys.exc_info()": : 3
"(test : 4
formatted_err)" : 3
*formatted_err* : 3
addFailure(test : 1
"failures" : 1
addSuccess(test) : 1
addSkip(test : 1
reason)" : 1
"skipped" : 1
addExpectedFailure(test : 1
"expectedFailures" : 1
addUnexpectedSuccess(test) : 1
addSubTest(test : 1
outcome) : 1
*subtest* : 1
*outcome* : 2
unittest.TextTestResult(stream : 1
unittest.defaultTestLoader : 1
unittest.TextTestRunner(stream=None : 1
descriptions=True : 1
verbosity=1 : 2
failfast=False : 1
buffer=False : 1
resultclass=None : 1
warnings=None : 1
tb_locals=False) : 1
runners : 3
special-cased : 1
"'always'" : 1
"-Wa" : 1
_makeResult() : 1
"_makeResult()" : 2
"resultclass" : 2
run(test) : 2
test(s) : 1
unittest.main(module='__main__' : 1
defaultTest=None : 1
argv=None : 1
testRunner=None : 1
testLoader=unittest.defaultTestLoader : 1
exit=True : 1
failfast=None : 1
catchbreak=None : 1
buffer=None : 1
warnings=None) : 1
unittest.main(verbosity=2) : 1
*testRunner* : 1
*testLoader* : 1
"defaultTestLoader" : 1
"exit=False" : 1
"sys.exit()": : 1
main(module='test_module' : 1
exit=False) : 2
*failfast* : 2
*catchbreak* : 2
same-name : 1
"TestProgram" : 1
*verbosity* : 3
load_tests(loader : 5
standard_tests : 5
"loadTestsFromModule" : 1
*standard_tests* : 2
test_cases : 1
(TestCase1 : 1
TestCase2 : 1
TestCase3) : 1
pattern): : 2
TestSuite() : 1
test_class : 1
test_cases: : 1
loader.loadTestsFromTestCase(test_class) : 1
suite.addTests(tests) : 1
("standard_tests" : 1
"__init__.py".) : 1
modify) : 1
nothing' : 1
this_dir : 1
os.path.dirname(__file__) : 1
package_tests : 1
loader.discover(start_dir=this_dir : 1
pattern=pattern) : 1
standard_tests.addTests(package_tests) : 1
impossibility : 1
"tearDownModule" : 3
"setUpModule" : 3
[potential] : 1
parallelization : 2
(etc) : 2
randomize : 2
"BaseTestSuite" : 1
"_ErrorHolder" : 1
"TestCase") : 1
Test(unittest.TestCase): : 1
cls._connection : 1
createExpensiveConnectionObject() : 1
cls._connection.destroy() : 1
setUpModule(): : 1
createConnection() : 1
tearDownModule(): : 1
closeConnection() : 1
"addModuleCleanup": : 1
unittest.addModuleCleanup(function : 1
unittest.enterModuleContext(cm) : 1
unittest.doModuleCleanups() : 1
"doModuleCleanups()" : 2
"-c/--catch" : 1
"catchbreak" : 1
"signal.SIGINT" : 8
unittest.installHandler() : 1
control-c) : 1
unittest.registerResult(result) : 1
unittest.removeResult(result) : 1
unittest.removeHandler(function=None) : 1
@unittest.removeHandler : 1
test_signal_handling(self): : 1
Lib/asyncio/events.py : 1
Preface : 2
call_soon : 1
"get_event_loop_policy().get_event_loop()" : 1
"get_running_loop()" : 4
3.10.0--3.10.8 : 1
implicitly) : 1
3.10.9 : 2
"set_event_loop()" : 2
"new_event_loop()" : 2
"Handle" : 2
"loop.call_later()"; : 1
"loop.create_server()"; : 1
**low-level** : 4
loop.run_until_complete(future) : 1
*future* : 2
"Future") : 1
Future's : 3
loop.run_forever() : 6
"run_forever()" : 3
scheduled) : 1
"run_until_complete()" : 1
loop.stop() : 7
loop.is_running() : 1
loop.is_closed() : 1
irreversible : 1
loop.shutdown_asyncgens() : 1
loop.run_until_complete(loop.shutdown_asyncgens()) : 1
loop.shutdown_default_executor() : 1
"loop.run_in_executor()" : 8
loop.call_soon(callback : 1
context=None) : 40
loop.call_soon_threadsafe(callback : 2
"call_soon()" : 2
"functools.partial()": : 1
"print("Hello" : 1
flush=True)" : 1
loop.call_soon( : 1
functools.partial(print : 2
flush=True)) : 1
loop.call_later(delay : 1
(can : 2
"asyncio.TimerHandle" : 2
loop.call_at(when : 1
*when* : 8
"loop.time()" : 2
loop.time() : 4
*when*) : 1
loop.create_future() : 5
instrumentation) : 1
loop.create_task(coro : 1
name=None : 13
*coro* : 8
"Task.set_name()" : 2
loop.set_task_factory(factory) : 1
*factory* : 14
"(loop : 2
context=None)" : 1
"asyncio.Future"-compatible : 1
loop.get_task_factory() : 1
loop.create_connection(protocol_factory : 1
host=None : 3
port=None : 7
ssl=None : 9
flags=0 : 7
sock=None : 8
local_addr=None : 3
server_hostname=None : 8
ssl_handshake_timeout=None : 10
ssl_shutdown_timeout=None : 6
happy_eyeballs_delay=None : 2
interleave=None) : 2
provided) : 7
*protocol_factory* : 14
"(transport : 13
protocol)" : 14
chronological : 1
synopsis : 5
"connection_made()" : 2
*ssl*: : 1
*ssl* : 5
transport; : 2
"ssl.create_default_context()" : 8
man-in-the-middle : 1
attacks) : 1
"Connection : 2
Delay" : 1
8305** : 2
"0.25" : 1
(250 : 2
milliseconds) : 1
"First : 3
Family : 2
Count" : 1
*local_addr* : 4
"(local_host : 2
local_port)" : 2
*local_host* : 2
*local_port* : 2
"60.0" : 5
*ssl_shutdown_timeout* : 14
"30.0" : 4
parameters.Happy : 1
Algorithm: : 1
Dual-Stack : 1
Hosts : 1
IPv4-only : 1
algorithm.For : 1
https://tools.ietf.org/html/rfc6555 : 1
"open_connection()" : 7
("StreamReader" : 1
"StreamWriter") : 1
loop.create_datagram_endpoint(protocol_factory : 1
remote_addr=None : 1
reuse_port=None : 3
allow_broadcast=None : 1
sock=None) : 1
*remote_addr* : 2
"(remote_host : 1
remote_port)" : 1
*remote_host* : 1
*remote_port* : 1
*allow_broadcast* : 2
preexisting : 3
3.4.4: : 2
"reuse_address=True" : 1
exception.When : 1
sockets.For : 1
loop.create_unix_connection(protocol_factory : 1
ssl_shutdown_timeout=None) : 4
"AF_UNIX"; : 1
loop.create_server(protocol_factory : 1
family=socket.AF_UNSPEC : 2
flags=socket.AI_PASSIVE : 2
backlog=100 : 4
reuse_address=None : 2
start_serving=True) : 4
(socket : 1
"SOCK_STREAM") : 2
listening: : 1
IPv6) : 9
"AF_UNSPEC") : 1
"start_server()" : 7
loop.create_unix_server(protocol_factory : 1
loop.connect_accepted_socket(protocol_factory : 1
transport/protocol : 1
Parameters: : 74
"socket.accept" : 2
loop.sendfile(transport : 1
count=None : 2
fallback=True) : 4
*transport* : 10
*fallback* : 15
"SendfileNotAvailableError" : 2
*sendfile* : 2
loop.start_tls(transport : 1
sslcontext : 1
server_side=False : 4
coder/decoder : 2
*protocol* : 25
*transport*-facing : 1
*protocol*-facing : 1
two-interface : 1
coder : 4
*protocol*-side : 1
sporadically : 1
exchanges : 1
*sslcontext*: : 2
*server_side* : 4
"create_server()") : 1
*server_hostname*: : 2
loop.add_reader(fd : 1
loop.remove_reader(fd) : 1
loop.add_writer(fd : 1
loop.remove_writer(fd) : 1
loop.sock_recv(sock : 1
nbytes) : 2
loop.sock_recv_into(sock : 1
buf) : 1
Modeled : 2
"socket.recv_into()" : 1
loop.sock_recvfrom(sock : 1
bufsize) : 5
(received : 1
loop.sock_recvfrom_into(sock : 1
nbytes=0) : 1
"socket.recvfrom_into()" : 1
loop.sock_sendall(sock : 1
loop.sock_sendto(sock : 1
"socket.sendto()" : 1
loop.sock_connect(sock : 1
"sock_connect" : 1
"socket.inet_pton()" : 1
loop.sock_accept(sock) : 1
"socket.accept()" : 1
loop.sock_sendfile(sock : 1
loop.getaddrinfo(host : 1
loop.getnameinfo(sockaddr : 1
"socket.getnameinfo()" : 2
*getaddrinfo* : 1
*getnameinfo* : 1
loop.connect_read_pipe(protocol_factory : 1
pipe) : 9
*pipe* : 6
"ReadTransport" : 2
loop.connect_write_pipe(protocol_factory : 1
"WriteTransport" : 2
"loop.subprocess_exec()" : 12
"loop.subprocess_shell()" : 7
loop.add_signal_handler(signum : 1
uncatchable : 1
loop.remove_signal_handler(sig) : 1
*sig* : 6
loop.run_in_executor(executor : 1
Arrange : 3
*executor* : 5
"concurrent.futures.Executor" : 1
blocking_io(): : 2
open('/dev/urandom' : 1
f.read(100) : 1
cpu_bound(): : 1
CPU-bound : 5
sum(i : 1
range(10 : 2
7)) : 3
loop.run_in_executor( : 3
blocking_io) : 2
print('default : 1
pool' : 3
pool: : 8
concurrent.futures.ThreadPoolExecutor() : 1
print('custom : 2
concurrent.futures.ProcessPoolExecutor() : 2
cpu_bound) : 1
("if : 1
'__main__'") : 1
3.5.3: : 2
("ThreadPoolExecutor") : 1
loop.set_default_executor(executor) : 1
loop.set_exception_handler(handler) : 1
context)" : 1
"call_exception_handler()" : 2
loop.get_exception_handler() : 1
loop.default_exception_handler(context) : 1
loop.call_exception_handler(context) : 1
versions): : 1
'message': : 1
'future' : 1
'task' : 1
'handle' : 1
'protocol' : 1
'transport' : 1
'asyncgen' : 1
"set_exception_handler()" : 1
loop.get_debug() : 1
loop.set_debug(enabled: : 1
bool) : 1
loop.subprocess_exec(protocol_factory : 1
stdin=subprocess.PIPE : 2
stderr=subprocess.PIPE : 2
"str"; : 2
"shell=False" : 4
*subprocess_exec* : 1
"asyncio.SubprocessProtocol" : 1
these: : 3
"connect_write_pipe()" : 3
"subprocess.DEVNULL" : 3
"subprocess.STDOUT" : 1
process' : 9
"asyncio.SubprocessTransport" : 1
loop.subprocess_shell(protocol_factory : 1
*cmd* : 25
"shell" : 4
"SubprocessProtocol" : 2
"subprocess_exec()" : 1
"SubprocessTransport" : 2
"shlex.quote()" : 3
asyncio.Handle : 1
cancel() : 3
cancelled() : 4
asyncio.TimerHandle : 1
when() : 2
"start_unix_server()" : 2
asyncio.Server : 1
completed: : 2
serving: : 1
"sockets" : 1
"wait_closed()" : 2
start_serving() : 1
serve_forever() : 1
"serve_forever" : 3
client_connected(reader : 1
writer): : 3
Communicate : 1
reader.readline() : 5
main(host : 1
asyncio.start_server( : 3
client_connected : 1
srv.serve_forever() : 2
asyncio.run(main('127.0.0.1' : 1
is_serving() : 1
wait_closed() : 2
"Server.sockets" : 1
asyncio.SelectorEventLoop : 1
*selector* : 1
MyPolicy(asyncio.DefaultEventLoopPolicy): : 1
new_event_loop(self): : 1
selectors.SelectSelector() : 2
asyncio.SelectorEventLoop(selector) : 2
asyncio.set_event_loop_policy(MyPolicy()) : 1
asyncio.ProactorEventLoop : 1
"I/O : 1
Ports" : 1
(IOCP) : 1
MSDN : 3
Ports : 1
asyncio.AbstractEventLoop : 1
asyncio-compliant : 1
**purposefully** : 1
"loop.run_forever()" : 2
""Hello : 1
World"" : 1
hello_world(loop): : 1
World' : 3
loop""" : 1
World') : 1
hello_world() : 1
loop.call_soon(hello_world : 1
reschedule : 2
display_date(end_time : 1
loop): : 2
print(datetime.datetime.now()) : 2
(loop.time() : 2
end_time: : 2
loop.call_later(1 : 1
display_date : 1
end_time : 4
display_date() : 1
loop.call_soon(display_date : 1
"loop.add_reader()" : 7
socketpair : 1
rsock : 3
wsock : 3
socketpair() : 1
reader(): : 1
rsock.recv(100) : 1
print("Received:" : 4
data.decode()) : 4
loop.remove_reader(rsock) : 1
loop.add_reader(rsock : 1
reader) : 1
reception : 4
loop.call_soon(wsock.send : 3
'abc'.encode()) : 3
rsock.close() : 1
wsock.close() : 3
"signals" : 1
"loop.add_signal_handler()" : 3
ask_exit(signame : 1
print("got : 1
%s: : 2
exit" : 2
signame) : 2
signame : 3
{'SIGINT' : 1
'SIGTERM'}: : 1
loop.add_signal_handler( : 1
getattr(signal : 1
functools.partial(ask_exit : 1
loop)) : 1
asyncio.sleep(3600) : 4
print("Event : 1
interrupt.") : 1
print(f"pid : 1
{os.getpid()}: : 1
exit.") : 1
chapter: : 3
Lib/subprocess.py : 1
input/output/error : 1
os.system : 2
os.spawn* : 1
subprocess.run(args : 1
input=None : 1
capture_output=False : 1
timeout=None : 11
check=False : 1
text=None : 3
universal_newlines=None : 3
**other_popen_kwargs) : 4
signature) : 2
(*timeout* : 6
not.) : 3
"stdout=PIPE" : 10
"stderr=PIPE" : 8
"stderr=STDOUT" : 1
expires : 10
"TimeoutExpired" : 4
"stdin=PIPE" : 5
capture_output=True) : 1
/dev/null\n' : 1
stderr=b'') : 1
3.11.3: : 5
"%PATH%" : 5
"%COMSPEC%" : 5
"%SystemRoot%\System32\cmd.exe" : 5
subprocess.CompletedProcess : 1
returncode : 4
"-N" : 3
(POSIX : 10
Captured : 3
"stderr=subprocess.STDOUT" : 1
check_returncode() : 1
subprocess.DEVNULL : 1
subprocess.PIPE : 1
subprocess.STDOUT : 1
subprocess.SubprocessError : 1
subprocess.TimeoutExpired : 1
"SubprocessError" : 4
Timeout : 7
"text=True" : 3
Stderr : 2
"check_call()" : 3
"check=True") : 1
"PIPE" : 11
"STDOUT" : 2
*universal_newlines*) : 1
"os.linesep" : 3
"Popen.stdin" : 1
"Popen.stdout" : 1
"Popen.stderr" : 1
"shutil") : 1
subprocess.Popen(args : 1
bufsize=- : 2
close_fds=True : 1
creationflags=0 : 1
restore_signals=True : 1
start_new_session=False : 1
pass_fds=() : 1
group=None : 1
extra_groups=None : 1
user=None : 4
umask=- : 1
pipesize=- : 1
process_group=None) : 1
"os.execvpe()"-like : 1
"CreateProcess()" : 2
module.Resolving : 1
"os.execvpe()" : 1
"lpApplicationName" : 1
"lpCommandLine" : 1
WinAPI : 1
"CreateProcess" : 2
Popen(["/usr/bin/git" : 1
"commit" : 1
"Fixes : 1
bug."]) : 1
tokenization : 4
command_line : 1
/bin/vikings : 1
-input : 1
eggs.txt : 3
-output : 1
"spam : 2
spam.txt" : 1
-cmd : 1
"echo : 3
'$MONEY'" : 1
shlex.split(command_line) : 1
['/bin/vikings' : 1
'-input' : 1
'eggs.txt' : 1
'-output' : 1
spam.txt' : 1
'-cmd' : 1
'$MONEY'"] : 1
subprocess.Popen(args) : 1
*-input*) : 1
*eggs.txt*) : 1
*echo* : 1
"False") : 21
"/bin/sh" : 2
Popen(['/bin/sh' : 1
args[0] : 1
args[1] : 2
**dir** : 1
**copy**) : 1
console-based : 1
(read : 2
"universal_newlines=True") : 1
seldom : 1
**ps** : 1
SAFE : 1
*process_group* : 3
"os.setpgid()" : 1
mod_wsgi : 2
"handle_list" : 1
*restore_signals* : 2
SIG_IGN : 1
SIGXFZ : 1
SIGXFSZ : 1
"setsid()" : 2
"setpgid(0 : 1
setregid() : 1
"grp.getgrnam()" : 2
"gr_gid" : 2
*user* : 19
setreuid() : 1
"pwd.getpwnam()" : 1
"pw_uid" : 2
*umask* : 1
umask() : 1
assembly : 1
"SystemRoot" : 1
*creationflags* : 3
"CREATE_NEW_CONSOLE" : 2
"CREATE_NEW_PROCESS_GROUP" : 3
"ABOVE_NORMAL_PRIORITY_CLASS" : 1
"BELOW_NORMAL_PRIORITY_CLASS" : 1
"HIGH_PRIORITY_CLASS" : 1
"IDLE_PRIORITY_CLASS" : 1
"NORMAL_PRIORITY_CLASS" : 1
"REALTIME_PRIORITY_CLASS" : 1
"CREATE_NO_WINDOW" : 1
"DETACHED_PROCESS" : 1
"CREATE_DEFAULT_ERROR_MODE" : 1
"CREATE_BREAKAWAY_FROM_JOB" : 1
*pipesize* : 1
writing) : 4
"pipesize" : 1
Popen(["ifconfig"] : 1
stdout=PIPE) : 3
log.write(proc.stdout.read()) : 1
"cwd" : 4
Popen.poll() : 1
Popen.wait(timeout=None) : 1
(non-blocking : 1
sleeps) : 1
wait: : 3
"asyncio.create_subprocess_exec" : 1
Popen.communicate(input=None : 1
timeout=None) : 20
Interact : 2
"communicate()" : 5
process's : 27
well-behaved : 1
communication: : 1
proc : 3
subprocess.Popen(...) : 1
outs : 3
errs : 2
proc.communicate(timeout=15) : 1
TimeoutExpired: : 1
proc.kill() : 1
proc.communicate() : 2
Popen.send_signal(signal) : 1
*signal* : 4
CTRL_C_EVENT : 1
CTRL_BREAK_EVENT : 1
Popen.terminate() : 1
Popen.kill() : 1
Kills : 1
Reassigning : 1
unsupported: : 1
Popen.args : 1
Popen.stdin : 1
Popen.stdout : 1
Popen.stderr : 1
".stdin.write" : 1
".stdout.read" : 1
".stderr.read" : 1
Popen.pid : 1
"communicate()") : 1
subprocess.STARTUPINFO(* : 1
dwFlags=0 : 1
hStdInput=None : 1
hStdOutput=None : 1
hStdError=None : 1
wShowWindow=0 : 1
lpAttributeList=None) : 1
dwFlags : 1
si : 1
subprocess.STARTUPINFO() : 1
si.dwFlags : 1
subprocess.STARTF_USESTDHANDLES : 2
subprocess.STARTF_USESHOWWINDOW : 2
hStdInput : 1
"dwFlags" : 4
"STARTF_USESTDHANDLES" : 4
hStdOutput : 1
hStdError : 1
wShowWindow : 1
"STARTF_USESHOWWINDOW" : 1
"nCmdShow" : 1
ShowWindow : 1
"SW_SHOWDEFAULT" : 1
"SW_HIDE" : 1
lpAttributeList : 1
"STARTUPINFOEX" : 1
UpdateProcThreadAttribute : 1
**handle_list** : 1
"ERROR_INVALID_PARAMETER" : 1
(87) : 1
subprocess.STD_INPUT_HANDLE : 1
"CONIN$" : 1
subprocess.STD_OUTPUT_HANDLE : 1
"CONOUT$" : 2
subprocess.STD_ERROR_HANDLE : 1
subprocess.SW_HIDE : 1
Hides : 2
"STARTUPINFO.hStdInput" : 1
"STARTUPINFO.hStdOutput" : 1
"STARTUPINFO.hStdError" : 1
"STARTUPINFO.wShowWindow" : 1
subprocess.CREATE_NEW_CONSOLE : 1
subprocess.CREATE_NEW_PROCESS_GROUP : 1
"creationflags" : 11
subprocess.ABOVE_NORMAL_PRIORITY_CLASS : 1
subprocess.BELOW_NORMAL_PRIORITY_CLASS : 1
subprocess.HIGH_PRIORITY_CLASS : 1
subprocess.IDLE_PRIORITY_CLASS : 1
(lowest) : 1
subprocess.NORMAL_PRIORITY_CLASS : 1
subprocess.REALTIME_PRIORITY_CLASS : 1
realtime : 1
REALTIME_PRIORITY_CLASS : 1
"talk" : 1
subprocess.CREATE_NO_WINDOW : 1
subprocess.DETACHED_PROCESS : 1
CREATE_NEW_CONSOLE : 1
subprocess.CREATE_DEFAULT_ERROR_MODE : 1
subprocess.CREATE_BREAKAWAY_FROM_JOB : 1
subprocess.call(args : 1
run(...).returncode : 1
subprocess.check_call(args : 1
run(... : 2
subprocess.check_output(args : 1
check=True : 1
stdout=PIPE).stdout : 1
exists: : 3
"input=b''" : 1
"input=''" : 1
"stderr=subprocess.STDOUT": : 1
subprocess.check_output( : 1
"ls : 2
non_existent_file; : 1
stderr=subprocess.STDOUT : 2
'ls: : 1
non_existent_file: : 1
directory\n' : 1
less) : 1
instead.In : 1
output=$(mycmd : 1
myarg) : 1
check_output(["mycmd" : 1
"myarg"]) : 2
output=$(dmesg : 2
hda) : 2
Popen(["dmesg"] : 1
Popen(["grep" : 1
"hda"] : 1
stdin=p1.stdout : 1
p1.stdout.close() : 1
p2.communicate()[0] : 1
"p1.stdout.close()" : 1
check_output("dmesg : 1
hda" : 1
os.system("mycmd" : 1
myarg") : 1
retcode : 6
call("mycmd" : 2
myarg" : 2
SIGQUIT : 1
print("Child : 2
signal" : 1
-retcode : 1
returned" : 2
failed:" : 1
P_NOWAIT : 1
os.spawnlp(os.P_NOWAIT : 1
"/bin/mycmd" : 3
"mycmd" : 3
"myarg") : 2
Popen(["/bin/mycmd" : 2
"myarg"]).pid : 1
P_WAIT : 1
os.spawnlp(os.P_WAIT : 2
call(["/bin/mycmd" : 1
Vector : 3
os.spawnvp(os.P_NOWAIT : 1
Popen([path] : 1
args[1:]) : 1
os.spawnlpe(os.P_NOWAIT : 1
"myarg" : 1
env) : 9
"myarg"] : 3
env={"PATH": : 1
"/usr/bin"}) : 1
(child_stdin : 6
child_stdout) : 2
os.popen2(cmd : 1
Popen(cmd : 4
bufsize=bufsize : 5
stdin=PIPE : 5
stdout=PIPE : 6
close_fds=True) : 5
(p.stdin : 3
p.stdout) : 2
child_stdout : 2
child_stderr) : 2
os.popen3(cmd : 1
stderr=PIPE : 2
p.stdout : 1
p.stderr) : 1
child_stdout_and_stderr) : 2
os.popen4(cmd : 1
stderr=STDOUT : 1
os.popen(cmd : 2
rc : 10
pipe.close() : 1
8: : 1
errors") : 2
stdin=PIPE) : 2
process.stdin.close() : 1
process.wait() : 1
popen2 : 2
(child_stdout : 4
child_stdin) : 4
popen2.popen2("somestring" : 1
Popen("somestring" : 1
(p.stdout : 2
p.stdin) : 2
popen2.popen2(["mycmd" : 1
Popen(["mycmd" : 1
"popen2.Popen3" : 1
"popen2.Popen4" : 1
*capturestderr* : 1
"close_fds=True" : 1
"commands" : 3
subprocess.getstatusoutput(cmd : 1
errors=None) : 18
"(exitcode : 2
output)" : 2
"Popen.check_output()" : 1
subprocess.getstatusoutput('ls : 1
/bin/ls') : 2
'/bin/ls') : 1
subprocess.getstatusoutput('cat : 1
/bin/junk') : 1
'cat: : 1
/bin/junk: : 2
directory') : 1
subprocess.getstatusoutput('/bin/junk') : 1
(127 : 1
'sh: : 1
subprocess.getstatusoutput('/bin/kill : 1
$$') : 1
(-15 : 1
3.3.4: : 2
added.The : 1
(exitcode : 1
(status : 1
subprocess.getoutput(cmd : 1
(stdout : 1
subprocess.getoutput('ls : 1
'/bin/ls' : 1
runtime): : 1
presumed : 4
"subprocess._USE_VFORK" : 1
subprocess._USE_VFORK : 1
gh-NNNNNN : 2
"subprocess._USE_POSIX_SPAWN" : 1
subprocess._USE_POSIX_SPAWN : 1
knobs : 1
"_USE_POSIX_SPAWN" : 1
"_USE_VFORK" : 1
************************************************ : 8
Lib/zipimport.py : 1
("*.py" : 1
"*.pyc") : 2
"example.zip/lib/" : 1
(".pyd" : 1
PKZIP : 6
Katz : 2
zipimport.ZipImportError : 1
zipimport.zipimporter(archivepath) : 1
*archivepath* : 4
"foo/bar.zip/lib" : 1
"foo/bar.zip" : 1
(provided : 2
"ZipImportError" : 6
find_loader(fullname : 1
(dotted) : 2
ignored---it's : 1
get_data(pathname) : 1
subpath : 4
"archive" : 1
example.zip : 2
'example.zip') : 1
'example.zip/jwzthreading.py' : 1
measuring : 5
utilized : 1
resource.error : 1
"setrlimit()" : 4
limits: : 1
lowered : 3
limit.) : 1
*getrlimit(2)* : 2
resource.RLIM_INFINITY : 1
resource.getrlimit(resource) : 1
"(soft : 2
hard)" : 2
*resource* : 25
resource.setrlimit(resource : 1
limits) : 2
*limits* : 6
"RLIM_INFINITY" : 2
"setrlimit" : 1
"RLIMIT_NOFILE" : 2
"resource.setrlimit" : 1
"limits" : 4
resource.prlimit(pid : 1
resource[ : 1
limits]) : 1
Combines : 5
"getrlimit()" : 2
*pid* : 36
"CAP_SYS_RESOURCE" : 1
"resource.prlimit" : 1
"pid" : 4
resource.RLIMIT_CORE : 1
resource.RLIMIT_CPU : 1
"SIGXCPU" : 1
disk.) : 1
resource.RLIMIT_FSIZE : 1
resource.RLIMIT_DATA : 1
resource.RLIMIT_STACK : 1
resource.RLIMIT_RSS : 1
resource.RLIMIT_NPROC : 1
resource.RLIMIT_NOFILE : 1
resource.RLIMIT_OFILE : 1
resource.RLIMIT_MEMLOCK : 1
resource.RLIMIT_VMEM : 1
occupy : 5
resource.RLIMIT_AS : 1
resource.RLIMIT_MSGQUEUE : 1
2.6.8 : 2
resource.RLIMIT_NICE : 1
ceiling : 4
(calculated : 1
rlim_cur) : 1
2.6.12 : 2
resource.RLIMIT_RTPRIO : 1
real-time : 4
resource.RLIMIT_RTTIME : 1
microseconds) : 1
resource.RLIMIT_SIGPENDING : 1
resource.RLIMIT_SBSIZE : 1
mbufs : 1
resource.RLIMIT_SWAP : 1
vm.overcommit : 1
sysctl : 2
tuning(7) : 1
resource.RLIMIT_NPTS : 1
pseudo-terminals : 1
resource.RLIMIT_KQUEUES : 1
kqueues : 1
resource.getrusage(who) : 1
*who* : 7
"RUSAGE_*" : 2
time.sleep(3) : 1
print(getrusage(RUSAGE_SELF)) : 2
8): : 1
tick : 1
"ru_utime" : 2
"ru_stime" : 2
*getrusage(2)* : 1
+----------+-----------------------+-----------------------------------------+ : 17
|==========|=======================|=========================================| : 1
(float : 3
"ru_maxrss" : 1
"ru_ixrss" : 1
"ru_idrss" : 1
unshared : 2
"ru_isrss" : 1
"ru_minflt" : 1
faults : 4
"7" : 1
"ru_majflt" : 1
"8" : 2
"ru_nswap" : 1
"ru_inblock" : 1
"ru_oublock" : 1
"11" : 1
"ru_msgsnd" : 1
"12" : 1
"ru_msgrcv" : 1
"13" : 1
"ru_nsignals" : 1
"14" : 1
"ru_nvcsw" : 1
voluntary : 1
"ru_nivcsw" : 1
involuntary : 1
resource.getpagesize() : 1
size.) : 1
"getrusage()" : 5
resource.RUSAGE_SELF : 1
resource.RUSAGE_CHILDREN : 1
resource.RUSAGE_BOTH : 1
resource.RUSAGE_THREAD : 1
Lib/shutil.py : 1
("shutil.copy()" : 1
"shutil.copy2()") : 1
metadata.On : 1
ACLs : 4
owners : 1
shutil.copyfileobj(fsrc : 1
fdst[ : 1
length]) : 1
*fsrc* : 2
*fdst* : 1
uncontrolled : 1
shutil.copyfile(src : 1
dst : 21
follow_symlinks=True) : 21
metadata) : 2
writable; : 1
"shutil.copyfile" : 3
fast-copy : 6
shutil.SameFileError : 1
shutil.copymode(src : 1
"copymode()" : 2
"shutil.copymode" : 2
shutil.copystat(src : 1
to—reading : 1
"os.chmod : 1
os.supports_follow_symlinks" : 3
"os.utime : 1
"os.chflags : 1
("os.chflags" : 1
platforms.) : 4
failure.Please : 1
"os.supports_follow_symlinks" : 2
"shutil.copystat" : 2
shutil.copy(src : 1
"os.chmod()") : 1
shutil.copy2(src : 1
can; : 1
shutil.ignore_patterns(*patterns) : 1
"copytree()"'s : 1
*patterns* : 1
shutil.copytree(src : 1
symlinks=False : 3
ignore=None : 2
copy_function=copy2 : 1
ignore_dangling_symlinks=False : 1
dirs_exist_ok=False) : 1
Permissions : 2
*symlinks* : 4
allows; : 1
argument); : 1
"copy()") : 1
"shutil.copytree" : 1
shutil.rmtree(path : 1
ignore_errors=False : 1
onerror=None : 3
dir_fd=None) : 12
*ignore_errors* : 1
fd-based : 3
"rmtree.avoids_symlink_attacks" : 1
*excinfo* : 2
junction : 3
rmtree.avoids_symlink_attacks : 1
shutil.move(src : 1
copy_function=copy2) : 1
(*src*) : 1
(*dst*) : 1
"copy_function()" : 1
"shutil.move" : 1
**mv** : 1
shutil.disk_usage(path) : 1
*used* : 1
*free* : 1
shutil.chown(path : 1
group=None) : 1
uid; : 1
"shutil.chown" : 1
shutil.which(cmd : 1
mode=os.F_OK : 1
os.X_OK : 2
"os.access()" : 3
"os.environ()" : 1
"shutil.which("python")" : 1
"which()" : 1
shutil.which("python") : 1
'C:\\Python33\\python.EXE' : 1
shutil.Error : 1
(*srcname* : 1
*dstname* : 1
*exception*) : 1
("copyfile()" : 1
"move()") : 1
bpo-33671) : 1
fcopyfile : 1
"copyfileobj()" : 1
ignore_patterns : 1
copytree(source : 2
ignore=ignore_patterns('*.pyc' : 1
'tmp*')) : 1
"tmp" : 3
_logpath(path : 1
names): : 1
logging.info('Working : 1
ignore=_logpath) : 1
onerror : 1
reattempt : 2
remove_readonly(func : 1
"Clear : 1
removal" : 1
os.chmod(path : 2
stat.S_IWRITE) : 1
func(path) : 1
shutil.rmtree(directory : 1
onerror=remove_readonly) : 1
shutil.make_archive(base_name : 1
root_dir[ : 1
verbose[ : 1
dry_run[ : 1
owner[ : 1
group[ : 1
logger]]]]]]]) : 1
tar) : 1
chdir : 1
base_dir : 1
"shutil.make_archive" : 1
"base_name" : 2
"root_dir" : 5
"base_dir" : 2
archivers : 2
"register_archive_format()" : 2
"format="tar"" : 1
3.10.6: : 1
shutil.get_archive_formats() : 1
description)" : 2
*zip*: : 3
*tar*: : 2
Uncompressed : 1
*gztar*: : 2
tar-file : 7
*bztar*: : 2
*xztar*: : 2
archiver : 3
shutil.register_archive_format(name : 1
function[ : 2
extra_args[ : 2
description]]) : 2
"os.curdir") : 1
"make_archive()") : 1
*extra_args* : 2
"get_archive_formats()" : 1
shutil.unregister_archive_format(name) : 1
shutil.unpack_archive(filename[ : 1
extract_dir[ : 1
format]]) : 1
*extract_dir* : 3
"register_unpack_format()" : 2
unpacker : 2
"shutil.unpack_archive" : 1
"extract_dir" : 2
".." : 4
shutil.register_unpack_format(name : 1
"get_unpack_formats()" : 1
shutil.unregister_unpack_format(name) : 1
shutil.get_unpack_formats() : 1
(unpacking : 1
".ssh" : 1
make_archive : 2
archive_name : 3
os.path.expanduser(os.path.join('~' : 3
'myarchive')) : 2
root_dir : 1
'.ssh')) : 1
make_archive(archive_name : 1
'gztar' : 1
root_dir) : 1
'/Users/tarek/myarchive.tar.gz' : 1
-tzvf : 1
/Users/tarek/myarchive.tar.gz : 1
drwx------ : 1
tarek/staff : 8
2010-02-01 : 1
16:23:40 : 1
./ : 1
609 : 2
2008-06-09 : 6
13:26:54 : 6
./authorized_keys : 1
-rwx------ : 1
668 : 1
./id_dsa : 1
./id_dsa.pub : 1
-rw------- : 1
1675 : 1
./id_rsa : 1
./id_rsa.pub : 1
37192 : 1
2010-02-06 : 1
18:23:10 : 1
./known_hosts : 1
please_add.txt : 1
do_not_add.txt : 1
"please_add.txt" : 1
"do_not_add.txt" : 1
make_archive( : 1
'tar' : 1
root_dir='tmp/root' : 1
base_dir='structure/content' : 1
'/Users/tarek/my_archive.tar' : 1
us: : 4
/Users/tarek/myarchive.tar : 1
structure/content/ : 1
structure/content/please_add.txt : 1
shutil.get_terminal_size(fallback=(columns : 1
lines)) : 1
"COLUMNS" : 4
"(80 : 1
24)" : 1
emulators : 5
"os.terminal_size" : 1
sys.abiflags : 1
("m" : 1
sys.addaudithook(hook) : 1
(sub)interpreter : 2
"PySys_AddAuditHook()" : 4
unobservable : 1
"sandbox" : 1
security-sensitive : 1
initialising : 1
"sys.addaudithook()" : 3
"settrace()") : 2
"__cantrace__" : 1
"[os.fsencode(arg) : 1
sys.argv]" : 1
sys.audit(event : 1
"os.chdir" : 3
sys.base_exec_prefix : 2
same; : 2
sys.base_prefix : 1
sys.byteorder : 1
"'big'" : 1
(most-significant : 1
"'little'" : 1
(least-significant : 1
sys.builtin_module_names : 1
"modules.keys()" : 1
sys.call_tracing(func : 1
"func(*args)" : 1
checkpoint : 1
sys.copyright : 1
sys._clear_type_cache() : 1
sys._current_frames() : 1
deadlock: : 1
deadlocked : 3
threads' : 2
cooperation : 1
non-deadlocked : 1
"sys._current_frames" : 1
sys._current_exceptions() : 1
"sys._current_exceptions" : 1
sys.breakpointhook() : 1
"pdb.set_trace()") : 1
keyword) : 1
"**kws" : 2
Whatever : 3
"breakpointhooks()" : 1
immediately; : 4
dotted-import : 1
nomenclature : 1
"package.subpackage.module.function" : 1
"package.subpackage.module" : 1
"function()" : 2
sys._debugmallocstats() : 1
("configure : 1
sys.dllhandle : 1
sys.displayhook(value) : 1
"repr(value)" : 2
"builtins._" : 1
"sys.stdout.encoding" : 2
"sys.stdout.errors" : 1
"'strict'") : 1
"sys.displayhook" : 2
Pseudo-code: : 1
displayhook(value): : 1
builtins._ : 2
repr(value) : 1
sys.stdout.write(text) : 2
text.encode(sys.stdout.encoding : 1
hasattr(sys.stdout : 1
'buffer'): : 1
sys.stdout.buffer.write(bytes) : 1
bytes.decode(sys.stdout.encoding : 1
'strict') : 1
sys.stdout.write("\n") : 1
sys.dont_write_bytecode : 1
sys._emscripten_info : 1
*wasm32-emscripten* : 1
+-------------------------------+------------------------------------------------+ : 5
|===============================|================================================| : 1
"emscripten_version" : 1
micro) : 1
"runtime" : 1
"'Node.js : 1
v14.18.2'" : 1
"'UNKNOWN'" : 1
"pthreads" : 1
"shared_memory" : 1
sys.pycache_prefix : 1
bytecode-cache : 1
pycache : 2
pre-build : 1
precedence) : 1
sys.excepthook(type : 1
"sys.excepthook" : 5
"hook" : 7
sys.__breakpointhook__ : 1
sys.__displayhook__ : 1
sys.__excepthook__ : 1
sys.__unraisablehook__ : 1
"breakpointhook" : 4
"displayhook" : 2
"excepthook" : 2
"unraisablehook" : 2
__breakpointhook__ : 1
__unraisablehook__ : 1
sys.exception() : 2
"(type(e) : 1
e.__traceback__)" : 1
"BaseException") : 1
"*exec_prefix*/lib/python*X.Y*/config" : 1
"*exec_prefix*/lib/python*X.Y*/lib-dynload" : 1
*X.Y* : 1
sys.exit([arg]) : 1
"successful : 1
termination" : 2
"abnormal : 1
0--127 : 1
underdeveloped; : 1
"sys.exit("some : 1
message")" : 1
"only" : 1
intercepted : 1
streams) : 1
+-------------------------------+----------------------------------------------------------------------------------------------------------------+ : 18
|===============================|================================================================================================================| : 1
"optimize" : 1
"no_user_site" : 1
"no_site" : 1
"ignore_environment" : 1
"bytes_warning" : 1
"hash_randomization" : 2
"dev_mode" : 3
"utf8_mode" : 2
"int_max_str_digits" : 2
limitation) : 3
"division_warning" : 1
sys.float_info : 1
language; : 2
5.2.4.2.2 : 1
ISO/IEC : 2
[C99] : 2
'Characteristics : 1
types' : 1
+-----------------------+-----------------------+----------------------------------------------------+ : 12
float.h : 1
|=======================|=======================|====================================================| : 1
"DBL_EPSILON" : 1
"math.ulp()" : 2
"dig" : 1
"DBL_DIG" : 1
faithfully : 3
float; : 1
"DBL_MANT_DIG" : 1
base-"radix" : 1
significand : 2
"max" : 1
"DBL_MAX" : 1
"max_exp" : 1
"DBL_MAX_EXP" : 1
"radix**(e-1)" : 2
"max_10_exp" : 1
"DBL_MAX_10_EXP" : 1
"10**e" : 2
"min" : 1
"DBL_MIN" : 1
*normalized* : 2
"math.ulp(0.0)" : 1
*denormalized* : 2
"min_exp" : 1
"DBL_MIN_EXP" : 1
"min_10_exp" : 1
"DBL_MIN_10_EXP" : 1
"radix" : 1
"FLT_RADIX" : 1
"rounds" : 1
"FLT_ROUNDS" : 3
indeterminable : 1
characterize : 1
"sys.float_info.dig" : 3
sys.float_info.dig : 1
'3.14159265358979' : 2
format(float(s) : 2
'.15g') : 1
'9876543211234567' : 1
'.16g') : 1
'9876543211234568' : 1
sys.float_repr_style : 1
"'short'" : 1
"repr(x)" : 2
"float(repr(x)) : 1
"float_repr_style" : 1
"'legacy'" : 1
sys.getallocatedblocks() : 1
call; : 3
"_clear_type_cache()" : 1
"getallocatedblocks()" : 1
sys.getandroidapilevel() : 1
sys.getdefaultencoding() : 1
sys.getdlopenflags() : 1
("RTLD_xxx" : 2
"os.RTLD_LAZY") : 2
"getfilesystemencoding()" : 2
"_enablelegacywindowsfsencoding()" : 1
sys.getfilesystemencodeerrors() : 1
sys.get_int_max_str_digits() : 2
"set_int_max_str_digits()" : 1
sys.getrefcount(object) : 1
(temporary) : 1
"getrefcount()" : 1
"setrecursionlimit()" : 1
sys.getsizeof(object[ : 1
default]) : 11
accounted : 1
"__sizeof__" : 2
sizeof : 2
sys.getswitchinterval() : 1
"thread : 1
interval"; : 1
"setswitchinterval()" : 1
sys._getframe([depth]) : 1
"frame" : 4
sys.getprofile() : 1
"setprofile()" : 2
sys.gettrace() : 1
"settrace()" : 6
"gettrace()" : 1
sys.getwindowsversion() : 1
*major* : 3
*minor* : 3
*service_pack* : 2
*service_pack_minor* : 2
*service_pack_major* : 2
*suite_mask* : 2
*product_type* : 3
"sys.getwindowsversion()[0]" : 1
"sys.getwindowsversion().major" : 1
retrievable : 1
(VER_PLATFORM_WIN32_NT)" : 1
+-----------------------------------------+-----------------------------------+ : 4
|=========================================|===================================| : 1
(VER_NT_WORKSTATION)" : 1
workstation : 1
(VER_NT_DOMAIN_CONTROLLER)" : 1
(VER_NT_SERVER)" : 1
"GetVersionEx()" : 1
"OSVERSIONINFOEX()" : 1
achieving : 2
sys.get_asyncgen_hooks() : 1
*asyncgen_hooks* : 1
"(firstiter : 1
finalizer)" : 1
*firstiter* : 2
sys.get_coroutine_origin_tracking_depth() : 1
"set_coroutine_origin_tracking_depth()" : 1
+-----------------------+----------------------------------------------------+ : 9
|=======================|====================================================| : 1
"width" : 8
"modulus" : 2
"imag" : 3
"algorithm" : 1
"hash_bits" : 1
"seed_bits" : 1
*algorithm* : 1
*hash_bits* : 1
*seed_bits* : 1
sys.hexversion : 2
0x010502F0: : 1
human-friendly : 1
"'cpython'" : 1
"sys.implementation.version" : 1
"sys.version_info(1 : 1
'final' : 3
"sys.version_info(2 : 1
*hexversion* : 1
*cache_tag* : 1
"'cpython-33'" : 1
+------------------------------------------+-------------------------------------------------+ : 5
|==========================================|=================================================| : 1
"bits_per_digit" : 1
"2**int_info.bits_per_digit" : 1
"sizeof_digit" : 1
"default_max_str_digits" : 2
"sys.get_int_max_str_digits()" : 2
"str_digits_check_threshold" : 2
sys.__interactivehook__ : 1
"cpython.run_interactivehook" : 1
sys.intern(string) : 1
"interned" : 1
Interning : 1
hashing) : 3
immortal; : 1
sys.is_finalizing() : 1
sys.last_type : 1
sys.last_value : 2
sys.last_traceback : 2
engage : 1
post- : 3
mortem : 3
(Typical : 1
pdb; : 7
pdb.pm()" : 1
debugger; : 1
"2**63 : 2
sys.maxunicode : 1
"meta_path" : 2
*Module : 2
specs* : 1
"sys.modules.copy()" : 1
"tuple(sys.modules)" : 1
sys.orig_argv : 1
(*before* : 1
"PYTHONPATH"): : 1
sys.path_importer_cache : 1
lowercased : 6
"uname : 2
-s" : 1
-r" : 1
"'freebsd8'" : 1
*at : 1
built* : 1
sys.platform.startswith('freebsd'): : 1
FreeBSD-specific : 1
here.. : 5
sys.platform.startswith('linux'): : 1
sys.platform.startswith('aix'): : 1
+------------------+-----------------------------+ : 8
|==================|=============================| : 1
"'emscripten'" : 1
"'linux'" : 2
"'wasi'" : 1
Windows/Cygwin : 1
"'cygwin'" : 1
"'linux2'" : 1
"'linux3'" : 1
"startswith" : 2
"'aix5'" : 1
coarser : 1
"os.uname()" : 4
sys.platlibdir : 1
"major.minor" : 1
version): : 1
"/usr/lib64/pythonX.Y/": : 1
"os.py" : 2
"/usr/lib64/pythonX.Y/lib-dynload/": : 1
specific) : 2
"/usr/lib/pythonX.Y/site-packages/" : 1
(always : 7
"sys.platlibdir"): : 1
"/usr/lib64/pythonX.Y/site-packages/": : 1
"'>>> : 4
"'.. : 2
re-evaluated : 1
sys.setdlopenflags(n) : 1
"sys.setdlopenflags(0)" : 1
"sys.setdlopenflags(os.RTLD_GLOBAL)" : 1
sys.set_int_max_str_digits(maxdigits) : 1
"get_int_max_str_digits()" : 1
sys.setprofile(profilefunc) : 1
"'call'" : 4
"'c_call'" : 2
"'c_return'" : 2
"'c_exception'" : 2
sys.setrecursionlimit(limit) : 1
too-high : 1
sys.setswitchinterval(interval) : 1
"timeslices" : 1
sys.settrace(tracefunc) : 1
specific; : 1
"'line'" : 3
"'exception'" : 3
"'opcode'" : 3
"'call'") : 1
entered; : 2
"settrace(None)" : 1
Per-line : 1
"(exception : 1
traceback)"; : 1
Per-opcode : 1
"frame.f_trace : 1
tracefunc" : 1
sys.set_asyncgen_hooks(firstiter : 1
finalizer) : 1
"sys.set_asyncgen_hooks_firstiter" : 1
"sys.set_asyncgen_hooks_finalizer" : 1
sys.set_coroutine_origin_tracking_depth(depth) : 1
"cr_origin" : 3
sys._enablelegacywindowsfsencoding() : 1
*File : 1
"input()"); : 1
"input()"; : 1
Non-character : 1
codepage) : 1
Non-console : 1
codepages : 2
stdout/stderr : 1
"sys.stdout.buffer.write(b'abc')".However : 1
sys.__stdin__ : 1
sys.__stdout__ : 1
sys.__stderr__ : 1
"sys.std*" : 1
"__stdin__" : 1
"__stdout__" : 1
"__stderr__" : 1
sys.stdlib_module_names : 1
sub-package : 1
"email.message" : 7
sys.thread_info : 1
+--------------------+-----------------------------------------------------------+ : 4
|====================|===========================================================| : 1
"'nt'": : 1
"'pthread'": : 1
"'pthread- : 1
stubs'": : 1
"'solaris'": : 1
"lock" : 2
"'semaphore'": : 1
"'mutex+cond'": : 1
"1000" : 4
sys.unraisablehook(unraisable : 1
*unraisable* : 1
*exc_type*: : 2
*exc_value*: : 2
*exc_traceback*: : 2
*err_msg*: : 1
*object*: : 1
"f'{err_msg}: : 1
{object!r}'"; : 1
resurrecting : 2
"excepthook()" : 1
"version_info" : 2
sys.api_version : 1
*micro* : 1
*releaselevel* : 2
*serial* : 1
"'alpha'" : 1
"'beta'" : 1
"'candidate'" : 1
"'final'" : 1
"sys.version_info[0]" : 1
"sys.version_info.major" : 1
framework; : 2
sys.winver : 1
sys._xoptions : 2
-Xa=b : 1
-Xc : 1
3.2a3+ : 1
(py3k : 1
20:14:50) : 1
4.4.3] : 1
True} : 2
Citations : 1
9899:1999 : 1
C." : 1
https://www.open- : 1
std.org/jtc1/sc22/wg14/www/docs/n1256.pdf : 1
Lib/numbers.py : 1
3141**) : 1
numbers.Number : 1
"conjugate()" : 2
conjugate() : 2
"(1+3j).conjugate() : 1
(1-3j)" : 1
numbers.Real : 1
numbers.Rational : 1
Subtypes : 3
bit-string : 1
self.denominator : 1
hash(self.numerator) : 1
Expensive : 1
float(self): : 1
hash(float(self)) : 1
tuple's : 1
hash((self.numerator : 1
self.denominator)) : 1
precluded : 1
"MyFoo" : 1
MyFoo(Complex): : 1
MyFoo.register(Real) : 1
mixed-mode : 1
MyIntegral(Integral): : 1
__add__(self : 1
isinstance(other : 9
MyIntegral): : 2
do_my_adding_stuff(self : 1
OtherTypeIKnowAbout): : 2
do_my_other_adding_stuff(self : 1
__radd__(self : 1
do_my_adding_stuff(other : 1
do_my_other_adding_stuff(other : 1
Integral): : 1
int(other) : 1
int(self) : 1
Real): : 2
float(other) : 1
float(self) : 1
Complex): : 2
complex(other) : 1
complex(self) : 1
"MyIntegral" : 1
"OtherTypeIKnowAbout" : 1
"boilerplate" : 1
("a : 1
<: : 5
Complex") : 1
Complex" : 2
b": : 1
intelligent : 1
all.) : 1
"B"'s : 1
"B : 2
A" : 1
"B.__radd__" : 1
"A.__add__" : 1
Real" : 1
land : 2
"a+b : 1
b+a" : 1
uses: : 3
_operator_fallbacks(monomorphic_operator : 1
fallback_operator): : 1
forward(a : 1
isinstance(b : 3
Fraction)): : 1
monomorphic_operator(a : 2
float): : 2
fallback_operator(float(a) : 2
complex): : 2
fallback_operator(complex(a) : 2
forward.__name__ : 1
fallback_operator.__name__ : 2
forward.__doc__ : 1
monomorphic_operator.__doc__ : 2
reverse(b : 1
Rational): : 1
float(b)) : 1
complex(b)) : 1
reverse.__name__ : 1
'__r' : 1
reverse.__doc__ : 1
_add(a : 1
"""a : 1
b""" : 1
Fraction(a.numerator : 1
b.denominator : 1
b.numerator : 1
a.denominator : 2
b.denominator) : 1
_operator_fallbacks(_add : 1
operator.add) : 1
Lib/dis.py : 1
disassembling : 2
"Include/opcode.h" : 1
"adaptive=True" : 1
"myfunc()": : 2
myfunc(alist): : 1
len(alist) : 1
dis.dis(myfunc) : 1
(alist) : 1
PRECALL : 2
dis.Bytecode(x : 1
first_line=None : 2
current_offset=None : 1
show_caches=False : 6
adaptive=False) : 6
Analyse : 1
*first_line* : 2
disassembled : 7
*current_offset* : 2
"current : 1
instruction" : 1
*show_caches* : 8
*adaptive* : 8
from_traceback(tb : 1
show_caches=False) : 1
codeobj : 1
first_line : 1
dis() : 1
dis.Bytecode(myfunc) : 1
dis.code_info(x) : 1
dis.show_code(x : 1
"print(code_info(x) : 1
file=file)" : 1
dis.dis(x=None : 1
Disassemble : 3
"depth=0" : 1
dis.distb(tb=None : 1
top-of-stack : 2
dis.disassemble(code : 1
lasti=- : 2
dis.disco(code : 1
*lasti* : 1
"-->" : 1
dis.get_instructions(x : 1
dis.findlinestarts(code) : 1
"co_lines" : 2
"(offset : 2
lineno)" : 2
dis.findlabels(code) : 1
dis.stack_effect(opcode : 1
oparg=None : 1
jump=None) : 1
*opcode* : 2
*oparg* : 1
dis.Instruction : 1
opname : 3
argval : 1
argrepr : 1
starts_line : 1
is_jump_target : 1
"positions" : 2
dis.Positions : 1
**General : 1
instructions** : 1
(TOS) : 2
COPY(i) : 1
*i*-th : 4
SWAP(i) : 1
TOS : 55
CACHE : 1
Logically : 2
**Unary : 1
operations** : 2
UNARY_POSITIVE : 1
"TOS : 9
+TOS" : 1
UNARY_NEGATIVE : 1
-TOS" : 1
UNARY_NOT : 1
TOS" : 4
UNARY_INVERT : 1
~TOS" : 1
GET_ITER : 1
iter(TOS)" : 2
GET_YIELD_FROM_ITER : 1
"TOS" : 1
top-most : 1
(TOS1) : 1
TOS1 : 17
BINARY_OP(op) : 1
*op*) : 1
TOS1[TOS]" : 2
STORE_SUBSCR : 1
"TOS1[TOS] : 1
TOS2" : 1
DELETE_SUBSCR : 1
**Coroutine : 1
opcodes** : 2
GET_AWAITABLE(where) : 1
get_awaitable(TOS)" : 1
"get_awaitable(o)" : 1
CO_ITERABLE_COROUTINE : 1
"o.__await__" : 1
"where" : 2
GET_AITER : 1
TOS.__aiter__()" : 1
GET_ANEXT : 1
Pushes : 17
"get_awaitable(TOS.__anext__())" : 1
"get_awaitable" : 1
END_ASYNC_FOR : 1
Terminates : 1
BEFORE_ASYNC_WITH : 1
Resolves : 1
**Miscellaneous : 1
PRINT_EXPR : 1
"POP_TOP" : 1
SET_ADD(i) : 1
"set.add(TOS1[-i] : 1
TOS)" : 8
LIST_APPEND(i) : 1
"list.append(TOS1[-i] : 1
MAP_ADD(i) : 1
"dict.__setitem__(TOS1[-i] : 1
"SET_ADD" : 1
YIELD_VALUE : 1
Pops : 9
SETUP_ANNOTATIONS : 1
IMPORT_STAR : 1
Loads : 6
POP_EXCEPT : 1
Re-raises : 1
PUSH_EXC_INFO : 1
CHECK_EXC_MATCH : 1
Performs : 14
CHECK_EG_MATCH : 1
Applies : 4
"split(TOS)" : 1
PREP_RERAISE_STAR : 1
try-except* : 1
tb) : 1
"context_manager.__exit__(*exc_info())" : 1
LOAD_ASSERTION_ERROR : 1
LOAD_BUILD_CLASS : 1
"builtins.__build_class__()" : 1
BEFORE_WITH(delta) : 1
"WITH_EXCEPT_START" : 1
GET_LEN : 1
"len(TOS)" : 1
MATCH_MAPPING : 1
technically: : 2
"tp_flags") : 2
MATCH_SEQUENCE : 1
"str"/"bytes"/"bytearray" : 1
MATCH_KEYS : 1
("True") : 4
("False") : 4
STORE_NAME(namei) : 1
*namei* : 4
"STORE_FAST" : 3
"STORE_GLOBAL" : 1
DELETE_NAME(namei) : 1
UNPACK_SEQUENCE(count) : 1
right-to-left : 2
UNPACK_EX(counts) : 1
leftover : 5
STORE_ATTR(namei) : 1
"TOS.name : 1
TOS1" : 1
DELETE_ATTR(namei) : 1
TOS.name" : 1
STORE_GLOBAL(namei) : 1
"STORE_NAME" : 1
DELETE_GLOBAL(namei) : 1
"DELETE_NAME" : 1
LOAD_CONST(consti) : 1
"co_consts[consti]" : 3
LOAD_NAME(namei) : 1
"co_names[namei]" : 4
BUILD_TUPLE(count) : 1
BUILD_LIST(count) : 1
"BUILD_TUPLE" : 2
BUILD_SET(count) : 1
BUILD_MAP(count) : 1
entries: : 2
"{... : 1
TOS3: : 1
TOS2 : 4
TOS1: : 1
TOS}" : 1
pre-sized : 1
BUILD_CONST_KEY_MAP(count) : 1
"BUILD_MAP" : 1
"TOS1" : 2
BUILD_STRING(count) : 1
Concatenates : 1
LIST_EXTEND(i) : 1
"list.extend(TOS1[-i] : 1
SET_UPDATE(i) : 1
"set.update(TOS1[-i] : 1
DICT_UPDATE(i) : 1
"dict.update(TOS1[-i] : 1
DICT_MERGE(i) : 1
LOAD_ATTR(namei) : 1
Replaces : 7
"getattr(TOS : 1
co_names[namei])" : 1
COMPARE_OP(opname) : 1
"cmp_op[opname]" : 1
IS_OP(invert) : 1
"invert" : 2
CONTAINS_OP(invert) : 1
IMPORT_NAME(namei) : 1
IMPORT_FROM(namei) : 1
JUMP_FORWARD(delta) : 1
Increments : 2
JUMP_BACKWARD(delta) : 1
Decrements : 5
JUMP_BACKWARD_NO_INTERRUPT(delta) : 1
POP_JUMP_FORWARD_IF_TRUE(delta) : 1
POP_JUMP_BACKWARD_IF_TRUE(delta) : 1
POP_JUMP_FORWARD_IF_FALSE(delta) : 1
POP_JUMP_BACKWARD_IF_FALSE(delta) : 1
POP_JUMP_FORWARD_IF_NOT_NONE(delta) : 1
POP_JUMP_BACKWARD_IF_NOT_NONE(delta) : 1
POP_JUMP_FORWARD_IF_NONE(delta) : 1
POP_JUMP_BACKWARD_IF_NONE(delta) : 1
JUMP_IF_TRUE_OR_POP(delta) : 1
(TOS : 2
JUMP_IF_FALSE_OR_POP(delta) : 1
FOR_ITER(delta) : 1
(leaving : 1
LOAD_GLOBAL(namei) : 1
"co_names[namei>>1]" : 1
"namei" : 1
LOAD_FAST(var_num) : 1
"co_varnames[var_num]" : 3
STORE_FAST(var_num) : 1
Stores : 4
DELETE_FAST(var_num) : 1
MAKE_CELL(i) : 1
LOAD_CLOSURE(i) : 1
locals" : 4
"co_fastlocalnames[i]" : 1
"LOAD_CLOSURE" : 1
"LOAD_FAST" : 1
LOAD_DEREF(i) : 1
LOAD_CLASSDEREF(i) : 1
"LOAD_DEREF" : 1
consulting : 3
STORE_DEREF(i) : 1
DELETE_DEREF(i) : 1
Empties : 1
COPY_FREE_VARS(n) : 1
RAISE_VARARGS(argc) : 1
*argc*: : 1
(re-raise : 1
"TOS") : 2
CALL(argc) : 1
"argc" : 3
CALL_FUNCTION_EX(flags) : 1
"unpacked" : 1
LOAD_METHOD(namei) : 1
("self") : 1
PRECALL(argc) : 1
PUSH_NULL : 1
non-method : 3
KW_NAMES(i) : 1
MAKE_FUNCTION(flags) : 1
carries : 3
"0x02" : 1
TOS1) : 1
TOS) : 1
BUILD_SLICE(argc) : 1
"slice(TOS1 : 1
pushed; : 1
"slice(TOS2 : 1
EXTENDED_ARG(ext) : 1
*ext* : 5
prefixal : 1
four-byte : 3
FORMAT_VALUE(flags) : 1
(f-strings) : 1
*fmt_spec* : 3
"(flags : 5
0x03) : 4
0x00": : 1
0x01": : 1
0x02": : 1
0x03": : 1
0x04) : 1
0x04": : 1
MATCH_CLASS(count) : 1
sub-patterns : 1
Pop : 6
RESUME(where) : 1
RETURN_GENERATOR : 1
SEND : 1
sub-generator : 1
"async_generator_wrapped_value" : 1
HAVE_ARGUMENT : 1
("< : 1
HAVE_ARGUMENT" : 4
dis.opname : 1
dis.opmap : 1
dis.cmp_op : 1
dis.hasconst : 1
dis.hasfree : 1
'free' : 1
dis.hasname : 1
dis.hasjrel : 1
dis.hasjabs : 1
dis.haslocal : 1
dis.hascompare : 1
Lib/struct.py : 1
Compact : 2
packs : 1
"Struct") : 1
read-writable : 1
read/filled : 1
struct.error : 1
occasions; : 1
struct.pack(format : 1
struct.pack_into(format : 1
struct.unpack(format : 1
(presumably : 2
"pack(format : 2
...)") : 2
"calcsize()" : 3
struct.unpack_from(format : 1
offset=0) : 2
struct.iter_unpack(format : 1
Iteratively : 1
struct.calcsize(format) : 1
packed/unpacked : 1
(according : 5
table: : 6
+-------------+--------------------------+------------+-------------+ : 6
|=============|==========================|============|=============| : 1
(= : 1
big-endian) : 1
x86 : 2
AMD64 : 2
(x86-64) : 1
little-endian; : 1
"sys.byteorder" : 2
"'='": : 1
IETF : 3
1700 : 1
(force : 1
swapping); : 1
'!' : 2
align : 4
meaning; : 3
'Standard : 1
+----------+----------------------------+----------------------+------------------+--------------+ : 22
|==========|============================|======================|==================|==============| : 1
char[] : 2
(9) : 12
(8) : 5
"'N'" : 2
(selected : 2
"'P'" : 3
little- : 1
"half : 1
5-bit : 1
11-bit : 1
stored) : 2
"6.1e-05" : 1
"6.5e+04" : 1
"Pascal : 1
*fixed : 1
bytes* : 1
"count-1" : 2
"'10s'" : 1
10-byte : 1
"'10c'" : 1
"cccccccccc") : 1
difference.) : 1
"'0s'" : 1
"'0c'" : 1
"'4h'" : 1
"'hhhh'" : 1
("'b'" : 1
"'Q'") : 1
(designated : 1
pack(">bhl" : 1
b'\x01\x00\x02\x00\x00\x00\x03' : 1
unpack('>bhl' : 1
b'\x01\x00\x02\x00\x00\x00\x03') : 1
calcsize('>bhl') : 1
pack(">h" : 1
99999) : 1
struct.error: : 1
-32768 : 1
pack("@ccc" : 1
b'1' : 1
b'2' : 6
b'3') : 1
b'123' : 3
pack("@3s" : 1
b'123') : 1
Unpacked : 1
b'raymond : 1
\x32\x12\x08\x01\x08' : 1
serialnum : 2
school : 2
gradelevel : 1
unpack('<10sHHb' : 1
Student : 1
namedtuple('Student' : 1
'name : 2
gradelevel') : 1
Student._make(unpack('<10sHHb' : 1
record)) : 1
Student(name=b'raymond : 1
serialnum=4658 : 1
school=264 : 1
gradelevel=8) : 1
"pack" : 1
machine: : 4
pack('@ci' : 1
b'#' : 1
0x12131415) : 1
b'#\x00\x00\x00\x15\x14\x13\x12' : 1
pack('@ic' : 1
0x12131415 : 1
b'#') : 1
b'\x15\x14\x13\x12#' : 1
calcsize('@ci') : 1
calcsize('@ic') : 1
"'llh0l'" : 1
boundaries: : 1
pack('@llh0l' : 3
b'\x00\x00\x00\x01\x00\x00\x00\x02\x00\x03\x00\x00' : 1
Packed : 1
(native : 1
zero-repeat : 3
consective : 1
machine): : 1
calcsize('@lhl') : 1
calcsize('@llh') : 2
calcsize('@llh0l') : 3
"'0l'" : 1
Revisiting : 1
calcsize('<qh6xq') : 1
pack('<qh6xq' : 1
pack('@lhl' : 1
pack('@llh' : 1
pack('<qqh' : 1
calcsize('<qqh6x') : 2
pack('<qqh6x' : 2
struct.Struct(format) : 1
pack(v1 : 1
("len(result)" : 1
"size".) : 1
pack_into(buffer : 1
"pack_into()" : 1
unpack(buffer) : 1
unpack_from(buffer : 1
"unpack_from()" : 1
iter_unpack(buffer) : 1
"iter_unpack()" : 1
Lib/ctypes : 1
"c_int" : 8
sizeof(int)" : 1
"c_long" : 4
*cdll* : 2
*windll* : 3
*oledll* : 2
"cdecl" : 3
"stdcall" : 8
"HRESULT" : 4
cdecl : 1
print(windll.kernel32) : 1
<WinDLL : 1
'kernel32' : 1
print(cdll.msvcrt) : 1
<CDLL : 3
'msvcrt' : 1
"cdll.msvcrt" : 1
*including* : 1
"LoadLibrary()" : 2
CDLL : 2
cdll.LoadLibrary("libc.so.6") : 1
'libc.so.6' : 3
CDLL("libc.so.6") : 2
libc.printf : 2
<_FuncPtr : 4
print(windll.kernel32.GetModuleHandleA) : 1
print(windll.kernel32.MyOwnFunction) : 1
"ctypes.py" : 2
239 : 1
_StdcallFuncPtr(name : 2
'MyOwnFunction' : 1
"kernel32" : 1
"user32" : 1
UNICODE : 4
"W" : 1
"GetModuleHandle" : 2
handle* : 1
HMODULE : 2
GetModuleHandleA(LPCSTR : 1
lpModuleName); : 2
GetModuleHandleW(LPCWSTR : 1
"GetModuleHandleA" : 1
"GetModuleHandleW" : 1
""??2@YAPAXI@Z"" : 1
getattr(cdll.msvcrt : 1
"??2@YAPAXI@Z") : 1
cdll.kernel32[1] : 1
cdll.kernel32[0] : 1
310 : 1
"time()" : 10
"GetModuleHandleA()" : 1
pointer): : 1
print(libc.time(None)) : 1
1150640792 : 1
print(hex(windll.kernel32.GetModuleHandleA(None))) : 1
0x1d000000 : 1
versa: : 1
cdll.kernel32.GetModuleHandleA(None) : 1
missing) : 1
windll.msvcrt.printf(b"spam") : 1
excess) : 1
windll.kernel32.GetModuleHandleA(32) : 1
0x00000020 : 1
(unicode) : 1
(char* : 1
+------------------------+--------------------------------------------+------------------------------+ : 22
|========================|============================================|==============================| : 1
"c_char" : 2
"c_wchar" : 2
"c_byte" : 2
"c_ubyte" : 2
"c_short" : 2
"c_ushort" : 2
"c_uint" : 2
"c_ulong" : 2
"c_longlong" : 2
__int64 : 2
"c_ulonglong" : 2
"c_size_t" : 1
"c_ssize_t" : 1
"c_float" : 1
"c_double" : 2
"c_longdouble" : 1
"c_char_p" : 6
(NUL : 2
terminated) : 2
"c_wchar_p" : 2
"c_void_p" : 3
c_int() : 2
c_long(0) : 2
c_wchar_p("Hello : 1
c_wchar_p(140018365411392) : 1
c_ushort(-3) : 1
c_ushort(65533) : 1
afterwards: : 2
c_int(42) : 2
c_long(42) : 2
print(i.value) : 2
i.value : 1
-99 : 2
location* : 1
contents* : 1
immutable): : 1
c_s : 1
c_wchar_p(s) : 1
print(c_s) : 2
c_wchar_p(139966785747344) : 1
print(c_s.value) : 2
c_s.value : 1
"Hi : 1
c_wchar_p(139966783348904) : 1
"create_string_buffer()" : 2
changed) : 2
property; : 2
create_string_buffer(3) : 1
print(sizeof(p) : 4
repr(p.raw)) : 4
b'\x00\x00\x00' : 1
create_string_buffer(b"Hello") : 1
b'Hello\x00' : 1
print(repr(p.value)) : 1
b'Hello' : 2
create_string_buffer(b"Hello" : 1
b'Hello\x00\x00\x00\x00\x00' : 1
p.value : 1
b"Hi" : 2
b'Hi\x00lo\x00\x00\x00\x00\x00' : 1
"c_buffer()" : 1
"create_unicode_buffer()" : 1
printf : 2
*IDLE* : 1
*PythonWin*: : 1
printf(b"Hello : 2
b"World!") : 1
%S\n" : 1
"World!") : 1
printf(b"%d : 3
bottles : 6
beer\n" : 3
beer : 2
printf(b"%f : 1
42.5) : 1
ArgumentError: : 4
printf(b"An : 1
%f\n" : 3
1234 : 4
c_double(3.14)) : 1
3.140000 : 1
*argtypes* : 1
non-variadic : 1
libc.printf.argtypes : 1
[ctypes.c_char_p] : 1
"_as_parameter_" : 4
Bottles: : 1
number): : 3
self._as_parameter_ : 1
Bottles(42) : 1
bottles) : 1
feature): : 1
printf.argtypes : 1
[c_char_p : 2
c_char_p : 4
c_int : 6
c_double] : 1
printf(b"String : 1
Int : 2
'Hi' : 1
2.200000 : 1
protects : 1
printf(b"%s : 1
b"X" : 1
3.000000 : 1
typecheck : 1
"strchr" : 1
strchr : 1
libc.strchr : 1
strchr(b"abcdef" : 5
ord("d")) : 2
8059983 : 1
strchr.restype : 2
b'def' : 1
print(strchr(b"abcdef" : 2
ord("x"))) : 1
"ord("x")" : 1
char: : 2
strchr.argtypes : 1
c_char] : 1
b"d") : 2
b"def") : 1
b"x")) : 1
*integer* : 3
GetModuleHandle : 1
windll.kernel32.GetModuleHandleA : 1
ValidHandle(value): : 1
WinError() : 3
GetModuleHandle.restype : 1
ValidHandle : 2
GetModuleHandle(None) : 1
486539264 : 1
GetModuleHandle("something : 1
silly") : 1
126] : 2
"WinError" : 2
api : 15
*returns* : 1
"errcheck" : 4
*passing : 1
"pointer()" : 5
c_float() : 1
create_string_buffer(b'\000' : 1
print(i.value : 2
f.value : 2
repr(s.value)) : 2
libc.sscanf(b"1 : 1
Hello" : 1
b"%d : 1
%f : 2
byref(i) : 1
byref(f) : 1
3.1400001049 : 1
"Structure" : 1
*2-tuples* : 1
*field : 2
POINT : 3
POINT(Structure): : 3
_fields_ : 15
[("x" : 2
c_int) : 8
("y" : 4
c_int)] : 1
POINT(10 : 1
print(point.x : 2
point.y) : 2
POINT(y=5) : 1
POINT(1 : 2
RECT : 3
POINTs : 2
*upperleft* : 1
*lowerright*: : 1
RECT(Structure): : 2
[("upperleft" : 1
POINT) : 3
("lowerright" : 1
POINT)] : 1
RECT(point) : 1
print(rc.upperleft.x : 1
rc.upperleft.y) : 1
print(rc.lowerright.x : 1
rc.lowerright.y) : 1
RECT(POINT(1 : 1
POINT(3 : 2
RECT((1 : 1
print(POINT.x) : 1
<Field : 4
type=c_long : 4
ofs=0 : 1
size=4> : 2
print(POINT.y) : 1
ofs=4 : 1
bit- : 1
Unions : 7
bit-fields : 1
"_pack_" : 2
pack(n)" : 1
"BigEndianStructure" : 1
"LittleEndianStructure" : 1
"BigEndianUnion" : 1
"LittleEndianUnion" : 1
Int(Structure): : 1
[("first_16" : 1
("second_16" : 1
16)] : 1
print(Int.first_16) : 1
ofs=0:0 : 1
bits=16> : 2
print(Int.second_16) : 1
ofs=0:16 : 1
TenPointsArrayType : 1
stuff: : 1
MyStruct(Structure): : 1
[("a" : 1
c_float) : 1
("point_array" : 1
print(len(MyStruct().point_array)) : 1
arr : 3
TenPointsArrayType() : 1
pt : 1
arr: : 1
print(pt.x : 1
pt.y) : 1
TenIntegers : 1
ii : 1
TenIntegers(1 : 1
print(ii) : 1
<c_long_Array_10 : 1
ii: : 1
pointer(i) : 1
pi.contents : 6
OOR : 1
(original : 1
return) : 1
pointer's : 1
c_int(99) : 1
c_long(99) : 2
pi[0] : 2
c_long(22) : 1
"POINTER()" : 2
PI : 5
POINTER(c_int) : 3
'ctypes.LP_c_long'> : 1
PI(42) : 1
c_long : 2
PI(c_int(42)) : 1
<ctypes.LP_c_long : 2
null_ptr : 1
POINTER(c_int)() : 1
print(bool(null_ptr)) : 1
Python): : 1
null_ptr[0] : 2
"POINTER(c_int)" : 3
c_int: : 1
Bar(Structure): : 1
[("count" : 1
("values" : 1
POINTER(c_int))] : 1
Bar() : 2
bar.values : 4
(c_int : 2
3)(1 : 1
bar.count : 1
range(bar.count): : 1
print(bar.values[i]) : 1
"POINTER(c_int)") : 1
("c_int" : 1
"cast()" : 6
"Bar" : 2
(c_byte : 2
4)() : 4
c_byte_Array_4 : 1
LP_c_long : 1
cast(a : 1
POINTER(c_int)) : 4
cast((c_byte : 1
print(bar.values[0]) : 1
*Incomplete : 1
Types* : 1
cell; : 1
*next; : 1
cell(Structure): : 2
[("name" : 3
c_char_p) : 3
("next" : 2
POINTER(cell))] : 2
'cell' : 1
cell" : 1
cell._fields_ : 1
c1 : 2
cell() : 2
c1.name : 1
b"foo" : 1
c2 : 1
c2.name : 1
b"bar" : 1
c1.next : 1
pointer(c2) : 1
c2.next : 1
pointer(c1) : 1
range(8): : 4
print(p.name : 1
p.next[0] : 1
"CFUNCTYPE()" : 2
"WINFUNCTYPE()" : 1
"qsort()" : 3
IntArray5 : 1
ia : 1
IntArray5(5 : 1
99) : 1
qsort : 1
libc.qsort : 1
qsort.restype : 1
CMPFUNC : 1
CFUNCTYPE(c_int : 1
py_cmp_func(a : 3
print("py_cmp_func" : 3
b[0]) : 3
cmp_func : 1
CMPFUNC(py_cmp_func) : 1
qsort(ia : 3
len(ia) : 3
sizeof(c_int) : 3
cmp_func) : 1
py_cmp_func : 15
CMPFUNC(py_cmp_func)) : 1
ia: : 1
@CFUNCTYPE(c_int : 1
py_cmp_func) : 1
made.Also : 1
survive : 3
"Py_OptimizeFlag" : 1
"in_dll()" : 1
*pythonapi* : 1
api: : 1
opt_flag : 1
c_int.in_dll(pythonapi : 1
"Py_OptimizeFlag") : 1
print(opt_flag) : 1
"c_long(1)" : 1
"c_long(2)" : 1
"PyImport_FrozenModules" : 1
"ctypes": : 3
struct_frozen(Structure): : 1
("code" : 1
POINTER(c_ubyte)) : 2
("size" : 1
("get_code" : 1
FrozenTable : 1
POINTER(struct_frozen) : 1
FrozenTable.in_dll(pythonapi : 1
"_PyImport_FrozenBootstrap") : 1
"pointer" : 4
"struct_frozen" : 1
Sooner : 1
entry: : 2
item.name : 1
print(item.name.decode("ascii") : 1
item.size) : 1
31764 : 1
_frozen_importlib_external : 1
41499 : 1
(indicated : 1
__hello__" : 1
RECT(p1 : 1
p2) : 1
print(rc.a.x : 2
rc.a.y : 2
rc.b.x : 2
rc.b.y) : 2
rc.a : 4
rc.b : 6
Hm : 1
"rc.a : 2
rc.a" : 1
temp0 : 2
temp1 : 2
"temp0" : 2
"temp1" : 2
temp0" : 1
's : 1
"rc.b : 1
temp1" : 1
*copy* : 1
sub-object : 1
root-object's : 1
c_char_p() : 1
s.value : 5
b"abc : 1
ghi" : 1
b'abc : 1
ghi' : 1
"resize()" : 1
short_array : 1
(c_short : 2
print(sizeof(short_array)) : 1
resize(short_array : 2
sizeof(short_array) : 1
sizeof(type(short_array)) : 1
short_array[:] : 1
short_array[7] : 1
(re-)define : 1
compiling/linking : 1
"find_library()" : 5
ctypes.util.find_library(name) : 2
".dylib" : 2
"-l") : 2
("/sbin/ldconfig" : 1
"objdump" : 1
"ld") : 1
ctypes.util : 2
find_library : 2
find_library("m") : 2
'libm.so.6' : 1
find_library("c") : 2
find_library("bz2") : 2
'libbz2.so.1.0' : 1
successful: : 1
'/usr/lib/libc.dylib' : 1
'/usr/lib/libm.dylib' : 1
'/usr/lib/libbz2.dylib' : 1
find_library("AGL") : 1
'/System/Library/Frameworks/AGL.framework/AGL' : 1
"find_library("c")" : 1
ctypes.CDLL(name : 1
mode=DEFAULT_MODE : 4
handle=None : 3
use_errno=False : 5
use_last_error=False : 3
winmode=None) : 3
*"[WinError : 1
found".* : 1
DUMPBIN : 1
dependents : 1
ctypes.OleDLL(name : 1
ctypes.WinDLL(name : 1
reacquired : 2
ctypes.PyDLL(name : 1
handle=None) : 1
"LoadLibrary" : 1
*dlopen(3)* : 2
RTLD_NOW : 1
*use_errno* : 3
"ctypes.get_errno()" : 1
"ctypes.set_errno()" : 1
*use_last_error* : 3
"SetLastError()" : 1
"ctypes.get_last_error()" : 1
"ctypes.set_last_error()" : 1
ignored) : 4
hijacking : 1
ctypes.RTLD_GLOBAL : 1
ctypes.RTLD_LOCAL : 1
*RTLD_GLOBAL* : 2
ctypes.DEFAULT_MODE : 1
*RTLD_LOCAL* : 1
libc.time : 2
libc['time'] : 2
PyDLL._handle : 1
PyDLL._name : 1
prefabricated : 2
"LibraryLoader" : 1
ctypes.LibraryLoader(dlltype) : 1
*dlltype* : 1
"PyDLL" : 3
"WinDLL" : 2
"OleDLL" : 2
LoadLibrary(name) : 1
ctypes.cdll : 1
ctypes.windll : 1
ctypes.oledll : 1
ctypes.pydll : 1
ctypes.pythonapi : 1
"ctypes.dlopen" : 1
"ctypes.dlsym" : 1
symbol's : 2
"ctypes.dlsym/handle" : 1
handle) : 1
ctypes._FuncPtr : 1
restype : 1
errcheck : 3
callable(result : 1
ctypes.ArgumentError : 1
violation) : 1
"ctypes.seh_exception" : 1
"ctypes.call_function" : 1
pointer" : 1
C; : 2
ctypes.CFUNCTYPE(restype : 1
*argtypes : 2
use_last_error=False) : 2
ctypes.WINFUNCTYPE(restype : 1
ctypes.PYFUNCTYPE(restype : 1
*argtypes) : 1
prototype(address) : 1
prototype(callable) : 1
prototype(func_spec[ : 1
paramflags]) : 1
*func_spec* : 1
"(name_or_ordinal : 1
library)" : 1
prototype(vtbl_index : 1
name[ : 1
paramflags[ : 1
iid]]) : 1
*vtbl_index* : 1
*iid* : 3
*paramflags* : 2
"MessageBoxW" : 1
WINUSERAPI : 2
MessageBoxW( : 1
HWND : 6
hWnd : 2
LPCWSTR : 5
lpText : 1
lpCaption : 1
UINT : 2
uType); : 1
WINFUNCTYPE : 2
windll : 2
ctypes.wintypes : 2
WINFUNCTYPE(c_int : 1
UINT) : 1
paramflags : 2
"hwnd" : 1
"Hi") : 1
"caption" : 1
ctypes") : 1
MessageBox : 1
prototype(("MessageBoxW" : 1
windll.user32) : 2
paramflags) : 2
"MessageBox" : 1
MessageBox() : 1
MessageBox(text="Spam : 1
spam") : 1
MessageBox(flags=2 : 1
text="foo : 1
bar") : 2
"GetWindowRect" : 2
"RECT" : 3
declaration: : 1
BOOL : 2
GetWindowRect( : 1
LPRECT : 1
lpRect); : 1
WINFUNCTYPE(BOOL : 1
POINTER(RECT)) : 1
"hwnd") : 1
"lprect") : 1
GetWindowRect : 2
prototype(("GetWindowRect" : 1
"BOOL" : 1
failed: : 2
errcheck(result : 2
GetWindowRect.errcheck : 2
place: : 16
rc.left : 1
rc.top : 1
rc.bottom : 1
rc.right : 1
ctypes.addressof(obj) : 1
"ctypes.addressof" : 1
ctypes.alignment(obj_or_type) : 1
*obj_or_type* : 1
ctypes.byref(obj[ : 1
offset]) : 6
light-weight : 1
"byref(obj : 1
(((char : 1
*)&obj) : 1
"pointer(obj)" : 1
ctypes.cast(obj : 1
ctypes.create_string_buffer(init_or_size : 1
size=None) : 2
*init_or_size* : 2
"ctypes.create_string_buffer" : 1
ctypes.create_unicode_buffer(init_or_size : 1
"ctypes.create_unicode_buffer" : 1
ctypes.DllCanUnloadNow() : 1
DllCanUnloadNow : 1
ctypes.DllGetClassObject() : 1
DllGetClassObject : 1
ctypes.util.find_msvcrt() : 1
"free(void : 1
ctypes.FormatError([code]) : 1
GetLastError : 1
ctypes.GetLastError() : 1
ctypes-private : 5
ctypes.get_errno() : 1
"ctypes.get_errno" : 1
ctypes.get_last_error() : 1
"LastError" : 2
"ctypes.get_last_error" : 1
ctypes.memmove(dst : 1
memmove : 1
ctypes.memset(dst : 1
ctypes.POINTER(type) : 1
ctypes.pointer(obj) : 1
"POINTER(type(obj))" : 1
"byref(obj)" : 1
ctypes.resize(obj : 1
"sizeof(type(obj))" : 1
ctypes.set_errno(value) : 1
"ctypes.set_errno" : 1
ctypes.set_last_error(value) : 1
"ctypes.set_last_error" : 1
ctypes.sizeof(obj_or_type) : 1
ctypes.string_at(address : 1
size=- : 2
"ctypes.string_at" : 1
ctypes.WinError(code=None : 1
descr=None) : 1
worst-named : 1
"GetLastError" : 1
"FormatError()" : 1
ctypes.wstring_at(address : 1
"ctypes.wstring_at" : 1
ctypes._CData : 1
"addressof()" : 1
"_objects"; : 1
*metaclass*): : 1
from_buffer(source[ : 1
"ctypes.cdata/buffer" : 2
from_buffer_copy(source[ : 1
from_address(address) : 1
"ctypes.cdata" : 1
from_param(obj) : 1
in_dll(library : 1
_b_base_ : 1
"_b_base_" : 1
_b_needsfree_ : 1
_objects : 1
debugging; : 1
ctypes._SimpleCData : 1
"_SimpleCData" : 1
"_CData" : 1
ctypes.c_byte : 1
initializer; : 10
ctypes.c_char : 1
ctypes.c_char_p : 1
"POINTER(c_char)" : 1
ctypes.c_longdouble : 1
"sizeof(long : 1
double) : 1
sizeof(double)" : 1
ctypes.c_float : 1
ctypes.c_int : 1
"sizeof(int) : 2
sizeof(long)" : 2
ctypes.c_int8 : 1
ctypes.c_int16 : 1
ctypes.c_int32 : 1
ctypes.c_int64 : 1
ctypes.c_long : 1
ctypes.c_longlong : 1
ctypes.c_short : 1
ctypes.c_size_t : 1
ctypes.c_ssize_t : 1
ctypes.c_ubyte : 1
ctypes.c_uint : 1
ctypes.c_uint8 : 1
ctypes.c_uint16 : 1
ctypes.c_uint32 : 1
ctypes.c_uint64 : 1
ctypes.c_ulong : 1
ctypes.c_ulonglong : 1
ctypes.c_ushort : 1
ctypes.c_void_p : 1
ctypes.c_wchar : 1
ctypes.c_wchar_p : 1
ctypes.c_bool : 1
Represent : 6
ctypes.HRESULT : 1
ctypes.py_object : 1
"HWND" : 1
"WPARAM" : 1
"DWORD" : 1
"MSG" : 1
ctypes.Union(*args : 1
**kw) : 41
ctypes.BigEndianUnion(*args : 1
*big : 2
endian* : 4
ctypes.LittleEndianUnion(*args : 1
*little : 2
ctypes.BigEndianStructure(*args : 1
ctypes.LittleEndianStructure(*args : 1
ctypes.Structure(*args : 1
*native* : 1
themselves: : 2
List(Structure): : 1
List._fields_ : 1
[("pnext" : 1
POINTER(List)) : 1
"sizeof()" : 1
sub-subclasses : 2
sub-subclass : 1
_pack_ : 1
_anonymous_ : 2
(anonymous) : 1
(Windows): : 1
_U(Union): : 1
[("lptdesc" : 1
POINTER(TYPEDESC)) : 1
("lpadesc" : 1
POINTER(ARRAYDESC)) : 1
("hreftype" : 1
HREFTYPE)] : 1
TYPEDESC(Structure): : 1
("u",) : 1
[("u" : 1
_U) : 1
("vt" : 1
VARTYPE)] : 1
"TYPEDESC" : 1
"vt" : 1
TYPEDESC : 1
"td.lptdesc" : 1
"td.u.lptdesc" : 1
td : 1
TYPEDESC() : 1
td.vt : 1
VT_PTR : 1
td.lptdesc : 1
POINTER(some_type) : 2
td.u.lptdesc : 1
ctypes.Array(*args) : 1
"_type_" : 1
accesses; : 1
"Array" : 3
_length_ : 1
Out-of-range : 7
_type_ : 2
ctypes._Pointer : 1
lucky) : 1
Lib/bdb.py : 1
bdb.BdbQuit : 1
quitting : 2
bdb.Breakpoint(self : 1
temporary=False : 2
cond=None : 2
funcname=None) : 2
(re-)enabling : 1
"bpbynumber" : 1
line)" : 2
"bplist" : 2
"Breakpoint" : 14
"hit" : 2
"conditional" : 1
deleteMe() : 1
disable() : 2
bpformat() : 1
formatted: : 1
(del : 1
keep) : 1
File/line : 1
bpprint(out=None) : 1
"bpformat()" : 1
(file : 9
bpbynumber : 1
bplist : 1
("file" : 2
"line") : 2
bdb.Bdb(skip=None) : 1
("pdb.Pdb") : 1
*skip* : 4
canonic(filename) : 1
operating-system- : 1
"case-normalized" : 1
"absolute : 1
""<stdin>"" : 1
"botframe" : 1
"stopframe" : 1
"returnframe" : 1
"quitting" : 2
trace_dispatch(frame : 1
""line"": : 1
""call"": : 1
""return"": : 1
""exception"": : 1
""c_call"": : 1
""c_return"": : 1
""c_exception"": : 1
dispatch_line(frame) : 1
"user_line()" : 1
"BdbQuit" : 5
"Bdb.quitting" : 4
"user_line()") : 1
"trace_dispatch()" : 4
dispatch_call(frame : 1
"user_call()" : 1
"user_call()") : 1
dispatch_return(frame : 1
"user_return()" : 1
"user_return()") : 1
dispatch_exception(frame : 1
"user_exception()" : 1
"user_exception()") : 1
is_skipped_line(module_name) : 1
*module_name* : 2
stop_here(frame) : 1
break_here(frame) : 1
"effective()" : 1
break_anywhere(frame) : 1
user_call(frame : 1
argument_list) : 1
"dispatch_call()" : 1
user_line(frame) : 1
"dispatch_line()" : 1
"stop_here()" : 3
"break_here()" : 1
user_return(frame : 1
return_value) : 1
"dispatch_return()" : 1
user_exception(frame : 1
exc_info) : 3
"dispatch_exception()" : 1
do_clear(arg) : 1
set_step() : 1
set_next(frame) : 1
set_return(frame) : 1
set_until(frame : 1
lineno=None) : 2
set_trace([frame]) : 1
set_continue() : 1
set_quit() : 1
"dispatch_*()" : 1
set_break(filename : 1
"canonic()" : 1
clear_break(filename : 1
clear_bpbynumber(arg) : 1
"Breakpoint.bpbynumber" : 1
clear_all_file_breaks(filename) : 1
clear_all_breaks() : 1
get_bpbynumber(arg) : 1
get_break(filename : 1
get_breaks(filename : 1
get_file_breaks(filename) : 1
get_all_breaks() : 1
get_stack(f : 1
format_stack_entry(frame_lineno : 1
lprefix=': : 1
"(frame : 1
""<lambda>"" : 1
run(cmd : 1
locals=None) : 8
"__main__.__dict__" : 1
runeval(expr : 1
runctx(cmd : 3
runcall(func : 2
bdb.checkfuncname(b : 1
"b.line" : 1
bdb.effective(file : 1
"(active : 1
flag)" : 2
breakpoint* : 1
"enabled" : 3
"checkfuncname()" : 1
"cond" : 1
bdb.set_trace() : 1
Lib/locale.py : 1
cultural : 2
locale.Error : 1
locale.setlocale(category : 1
locale=None) : 3
*locale* : 4
(language : 1
+------------------------+---------------------------------------+----------------------------------+ : 16
|========================|=======================================|==================================| : 1
"'decimal_point'" : 1
"'grouping'" : 2
"'thousands_sep'" : 2
"CHAR_MAX" : 3
"'int_curr_symbol'" : 1
International : 2
"'currency_symbol'" : 1
"'p_cs_precedes/n_cs_precedes'" : 1
"'p_sep_by_space/n_sep_by_space'" : 1
"'mon_decimal_point'" : 1
"'frac_digits'" : 1
"'int_frac_digits'" : 1
"'mon_thousands_sep'" : 1
"'mon_grouping'" : 1
"'positive_sign'" : 1
"'negative_sign'" : 1
"'p_sign_posn/n_sign_posn'" : 1
"'p_sign_posn'" : 1
"'n_sign_posn'" : 1
+----------------+-------------------------------------------+ : 7
|================|===========================================| : 1
Currency : 1
locale.nl_langinfo(option) : 1
"nl_langinfo()" : 1
locale.CODESET : 1
locale.D_T_FMT : 1
locale.D_FMT : 1
locale.T_FMT : 1
locale.T_FMT_AMPM : 1
am/pm : 1
DAY_1 : 1
DAY_7 : 1
"DAY_1" : 1
Sunday : 26
8601) : 1
Monday : 18
ABDAY_1 : 1
ABDAY_7 : 1
MON_1 : 1
MON_12 : 1
ABMON_1 : 1
ABMON_12 : 1
locale.RADIXCHAR : 1
(decimal : 1
locale.THOUSEP : 1
locale.YESEXPR : 1
yes/no : 2
locale.NOEXPR : 1
regex(3) : 1
"YESEXPR" : 1
"NOEXPR" : 1
"regex()" : 1
locale.CRNCYSTR : 1
locale.ERA : 1
Japan : 2
then-emperor's : 1
reign : 1
"E" : 3
locale.ERA_D_T_FMT : 1
era-based : 3
locale.ERA_D_FMT : 1
locale.ERA_T_FMT : 1
locale.ALT_DIGITS : 1
locale.getdefaultlocale([envvars]) : 1
Tries : 5
"(language : 1
encoding)" : 2
"setlocale(LC_ALL : 3
envvars : 1
*envvars* : 1
gettext; : 1
"'LANG'" : 2
"'LC_ALL'" : 1
"'LC_CTYPE'" : 1
"'LANGUAGE'" : 1
1766** : 2
*language : 3
code* : 4
locale.getlocale(category=LC_CTYPE) : 1
"LC_*" : 1
locale.getpreferredencoding(do_setlocale=True) : 1
setlocale : 1
*do_setlocale* : 3
locale.getencoding() : 1
"getpreferredencoding(False)" : 1
locale.normalize(localename) : 1
locale.resetlocale(category=LC_ALL) : 1
"getdefaultlocale()" : 1
locale.strcoll(string1 : 1
string2) : 1
Compares : 13
"LC_COLLATE" : 1
*string1* : 1
collates : 1
*string2* : 1
locale.strxfrm(string) : 1
"strxfrm(s1) : 1
strxfrm(s2)" : 1
"strcoll(s1 : 1
s2) : 1
collating : 2
locale.format_string(format : 1
grouping=False : 4
monetary=False) : 3
*grouping* : 2
Processes : 2
val" : 2
locale.format(format : 1
"%char" : 1
"'%f'" : 1
"'%.0f'" : 1
"'%f : 1
KiB'" : 1
locale.currency(val : 1
symbol=True : 1
international=False) : 1
*symbol* : 4
*international* : 1
locale.str(float) : 1
"str(float)" : 1
locale.delocalize(string) : 1
locale.localize(string : 1
locale.atof(string : 1
func=float) : 1
locale.atoi(string) : 1
locale.LC_CTYPE : 1
locale.LC_COLLATE : 1
"strcoll()" : 1
"strxfrm()" : 1
locale.LC_TIME : 1
locale.LC_MONETARY : 1
"localeconv()" : 3
locale.LC_MESSAGES : 1
"os.strerror()" : 2
locale.LC_NUMERIC : 1
"atoi()" : 2
locale.LC_ALL : 1
Combination : 1
locale.CHAR_MAX : 1
loc : 1
locale.getlocale() : 1
locale; : 1
'de_DE') : 1
locale.strcoll('f\xe4n' : 1
'foo') : 4
umlaut : 1
'C') : 1
loc) : 1
program-wide : 1
bad: : 1
"time.strftime()") : 1
convincing : 1
non-"C" : 1
classifications : 3
"C") : 1
work) : 1
"config.c" : 1
locale.gettext(msg) : 1
locale.dgettext(domain : 1
locale.dcgettext(domain : 1
category) : 2
locale.textdomain(domain) : 1
locale.bindtextdomain(domain : 1
dir) : 1
"gettext()" : 8
"dgettext()" : 2
"dcgettext()" : 3
"textdomain()" : 2
"bindtextdomain()" : 4
Lib/poplib.py : 1
1939** : 2
"STLS" : 1
2595** : 2
obsolescent : 1
poplib.POP3(host : 1
port=POP3_PORT[ : 1
(110) : 1
"poplib.connect" : 2
"poplib.putline" : 2
poplib.POP3_SSL(host : 1
port=POP3_SSL_PORT : 1
keyfile=None : 7
certfile=None : 5
POP3-over-SSL : 1
lived) : 2
*certfile* : 15
PEM-formatted : 3
"ssl.SSLContext.check_hostname" : 10
*Server : 11
Indication* : 10
"ssl.HAS_SNI") : 9
"ssl.SSLContext.load_cert_chain()" : 7
poplib.error_proto : 1
(errors : 1
Fetchmail : 1
**fetchmail** : 1
POP/IMAP : 1
noncompliance : 1
lowercase; : 1
POP3.set_debuglevel(level) : 1
POP3.getwelcome() : 1
greeting : 10
POP3.capa() : 1
2449** : 1
"{'name': : 1
['param'...]}" : 1
POP3.user(username) : 1
POP3.pass_(password) : 1
POP3.apop(user : 1
secret) : 1
APOP : 1
POP3.rpop(user) : 1
RPOP : 1
r-commands) : 1
POP3.stat() : 1
"(message : 1
POP3.list([which]) : 1
"(response : 15
['mesg_num : 1
octets' : 1
octets)" : 4
*which* : 14
POP3.retr(which) : 1
['line' : 2
POP3.dele(which) : 1
QUIT : 2
Eudora : 1
QPOP : 1
disconnect) : 1
POP3.rset() : 1
POP3.noop() : 1
Might : 2
POP3.quit() : 1
Signoff: : 1
unlock : 6
POP3.top(which : 1
howmuch) : 1
*howmuch* : 1
TOP : 2
RETR : 1
message's : 43
off-brand : 1
POP3.uidl(which=None) : 1
id) : 2
"'response : 1
mesgnum : 1
uid" : 1
['mesgnum : 1
uid' : 1
POP3.utf8() : 1
"error_proto" : 1
POP3.stls(context=None) : 1
checking) : 2
poplib.POP3('localhost') : 1
M.user(getpass.getuser()) : 1
M.pass_(getpass.getpass()) : 1
numMessages : 1
len(M.list()[1]) : 1
range(numMessages): : 1
M.retr(i+1)[1]: : 1
print(j) : 1
Lib/cgi.py : 1
alternatives).The : 1
(CGI) : 1
"<FORM>" : 1
"<ISINDEX>" : 1
"cgi-bin" : 3
goodies) : 1
"query : 1
print("Content-Type: : 2
text/html") : 1
in-line : 1
HTML: : 1
print("<TITLE>CGI : 1
output</TITLE>") : 1
print("<H1>This : 1
script</H1>") : 1
world!") : 3
cgi" : 1
cgitb.enable() : 3
cgitb.enable(display=0 : 1
logdir="/path/to/logdir") : 1
META : 1
*Content-Type* : 67
standard) : 1
*keep_blank_values* : 4
*Content- : 13
Type* : 5
printed) : 5
"addr" : 4
print("<H1>Error</H1>") : 1
print("Please : 1
fields.") : 1
print("<p>name:" : 1
form["name"].value) : 1
print("<p>addr:" : 1
form["addr"].value) : 1
...further : 1
"form[key]" : 2
"form.getvalue(key)" : 1
"getlist()" : 2
special- : 1
concatenates : 1
commas: : 4
form.getlist("username") : 1
",".join(value) : 1
bytes): : 2
fileitem : 1
form["userfile"] : 1
fileitem.file: : 1
linecount : 3
fileitem.file.readline() : 1
button) : 5
"done" : 2
entertains : 1
*multipart/** : 5
*multipart/form-data* : 2
*multipart/**) : 1
*application/x-www-form-urlencoded*) : 3
form.getvalue("item") : 1
<input : 2
type="checkbox" : 2
name="item" : 2
value="1" : 1
value="2" : 1
form.getvalue("user").upper() : 1
"user=foo" : 1
"getvalue("user")" : 1
"upper()" : 1
"getfirst()" : 1
FieldStorage.getfirst(name : 1
default=None) : 14
FieldStorage.getlist(name) : 1
form.getfirst("user" : 1
"").upper() : 1
form.getlist("item"): : 1
do_something(item) : 1
employ : 1
cgi.parse(fp=None : 1
environ=os.environ : 1
keep_blank_values=False : 3
strict_parsing=False : 3
separator='&') : 4
"sys.stdin") : 2
*strict_parsing* : 3
"multipart/form-data" : 1
"parse_multipart()") : 1
cgi.parse_multipart(fp : 1
pdict : 1
errors='replace' : 4
uploads) : 1
*pdict* : 1
"urllib.parse.parse_qs()": : 1
non-file : 4
megabytes : 1
"email.message.EmailMessage"/"email.message.Message") : 1
cgi.parse_header(string) : 1
*Content-Type*) : 1
RFCs.For : 1
"email.message.EmailMessage": : 1
email.message : 6
EmailMessage : 5
EmailMessage() : 5
msg['content-type'] : 1
'application/json; : 1
charset="utf8"' : 1
msg.get_content_type() : 1
msg['content-type'].params : 1
cgi.test() : 2
Robust : 1
cgi.print_environ() : 1
cgi.print_form(form) : 1
cgi.print_directory() : 1
cgi.print_environ_usage() : 1
CGI) : 1
functionality) : 1
whereby : 8
hackers : 1
gullible : 1
"others"; : 1
"0o755" : 1
0755 : 1
filename") : 1
"others" : 2
"0o644" : 1
"0o666" : 6
(write : 3
execute) : 2
everybody : 1
cgi-bin : 1
("PATH") : 1
("PYTHONPATH") : 1
"/usr/home/joe/lib/python") : 1
"/usr/local/lib/python") : 1
first!) : 1
vary; : 1
scripts) : 1
mysteriously : 2
("cgi.py") : 1
http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home : 1
"At : 1
"Joe : 1
Blow") : 1
"cgi.py" : 2
"test()" : 1
*some* : 5
again; : 3
modules): : 2
text/plain") : 1
...your : 1
("tail : 1
logfile" : 1
useful!) : 1
cgitb; : 1
cgitb.enable()" : 1
userid : 5
"suexec" : 1
set-uid : 1
liability : 1
************************************************* : 11
Lib/runpy.py : 1
runpy.run_module(mod_name : 1
init_globals=None : 2
run_name=None : 1
alter_sys=False) : 1
*mod_name* : 3
*init_globals* : 2
"run_module()" : 2
detail) : 3
*run_name* : 2
"mod_name : 2
'.__main__'" : 1
"__spec__.name" : 3
'.__main__" : 1
*run_name*) : 1
*alter_sys* : 1
"sys.modules[__name__]" : 3
runpy.run_path(path_name : 1
run_name=None) : 1
"'<run_path>'" : 1
alterations : 2
"path_name" : 1
adjustments : 11
serialised : 4
path/to/script") : 1
**Note:** : 1
"os._exit()" : 2
atexit.register(func : 1
completes) : 1
atexit.unregister(func) : 1
("==") : 1
unregistration : 2
counter's : 1
open('counterfile') : 1
_count : 5
int(infile.read()) : 1
incrcounter(n): : 1
savecounter(): : 1
open('counterfile' : 1
outfile.write('%d' : 1
_count) : 1
atexit.register(savecounter) : 1
goodbye(name : 1
adjective): : 1
you.' : 1
adjective)) : 1
atexit.register(goodbye : 2
'Donny' : 1
'nice') : 1
adjective='nice' : 1
name='Donny') : 1
*decorator*: : 2
@atexit.register : 1
goodbye(): : 1
print('You : 1
sector.') : 1
Lib/__future__.py : 1
purposes: : 2
2.1) : 1
"__future__.py" : 1
FeatureName : 1
_Feature(OptionalRelease : 1
MandatoryRelease : 1
CompilerFlag) : 1
*OptionalRelease* : 2
*MandatoryRelease* : 5
"sys.version_info": : 1
(PY_MAJOR_VERSION : 1
2.1.0a3; : 1
"alpha" : 1
"beta" : 1
"candidate" : 1
"final"; : 1
predicts : 1
"_Feature" : 3
"getOptionalRelease()" : 1
"getMandatoryRelease()" : 1
*CompilerFlag* : 1
(bitfield) : 1
"compiler_flag" : 2
mechanism: : 2
+--------------------+---------------+----------------+-----------------------------------------------+ : 10
|====================|===============|================|===============================================| : 1
2.1.0b1 : 1
227**: : 1
*Statically : 1
Scopes* : 1
2.2.0a1 : 1
255**: : 1
*Simple : 1
Generators* : 1
2.2.0a2 : 1
*Changing : 1
Operator* : 1
2.5.0a1 : 2
328**: : 1
*Imports: : 1
Absolute/Relative* : 1
343**: : 1
*The : 2
Statement* : 1
2.6.0a2 : 2
3105**: : 1
*Make : 1
3112**: : 1
*Bytes : 1
3000* : 1
3.5.0b1 : 1
479**: : 1
*StopIteration : 1
generators* : 2
TBD : 1
563**: : 1
*Postponed : 1
(announcement : 1
3.10; : 1
announcement : 1
649** : 1
Lib/concurrent/futures/thread.py : 1
Lib/concurrent/futures/process.py : 1
"Executor" : 13
concurrent.futures.Executor : 1
submit(fn : 1
Schedules : 1
"fn(*args : 1
ThreadPoolExecutor(max_workers=1) : 2
executor.submit(pow : 2
1235) : 1
print(future.result()) : 1
map(func : 2
*iterables : 1
chunksize=1) : 1
*iterables)" : 1
*iterables* : 3
lazily; : 1
chops : 2
submits : 2
(approximate) : 2
shutdown(wait=True : 1
cancel_futures=False) : 1
"Executor.submit()" : 3
*wait* : 5
(waiting : 1
"Executor.shutdown()" : 1
ThreadPoolExecutor(max_workers=4) : 1
'src4.txt' : 1
Deadlocks : 1
wait_on_b(): : 1
print(b.result()) : 1
wait_on_a(): : 1
print(a.result()) : 1
ThreadPoolExecutor(max_workers=2) : 1
executor.submit(wait_on_b) : 1
executor.submit(wait_on_a) : 1
wait_on_future(): : 1
print(f.result()) : 1
executor.submit(wait_on_future) : 1
concurrent.futures.ThreadPoolExecutor(max_workers=None : 1
thread_name_prefix='' : 1
initializer=None : 2
initargs=()) : 1
enqueued : 10
"BrokenThreadPool" : 1
many-core : 1
machines.ThreadPoolExecutor : 1
URLS : 1
['http://www.foxnews.com/' : 1
'http://www.cnn.com/' : 1
'http://europe.wsj.com/' : 1
'http://www.bbc.co.uk/' : 1
'http://nonexistant-subdomain.python.org/'] : 1
load_url(url : 1
timeout): : 1
urllib.request.urlopen(url : 2
timeout=timeout) : 1
conn.read() : 1
concurrent.futures.ThreadPoolExecutor(max_workers=5) : 1
future_to_url : 1
{executor.submit(load_url : 1
60): : 1
URLS} : 1
concurrent.futures.as_completed(future_to_url): : 1
future_to_url[future] : 1
future.result() : 2
print('%r : 3
(url : 2
exc)) : 1
bytes' : 2
len(data))) : 1
side-step : 1
concurrent.futures.ProcessPoolExecutor(max_workers=None : 1
mp_context=None : 1
initargs=() : 1
max_tasks_per_child=None) : 1
"61" : 3
"BrokenProcessPool" : 2
*max_tasks_per_child* : 3
abruptly : 4
start_method : 1
pool.Added : 1
PRIMES : 1
112272535095293 : 2
112582705942171 : 1
115280095190773 : 1
115797848077099 : 1
1099726899285419] : 1
is_prime(n): : 1
sqrt_n : 2
int(math.floor(math.sqrt(n))) : 1
range(3 : 1
zip(PRIMES : 1
executor.map(is_prime : 1
PRIMES)): : 1
print('%d : 1
prime: : 1
prime)) : 1
Encapsulates : 1
running() : 1
done() : 4
result(timeout=None) : 1
exception(timeout=None) : 1
add_done_callback(fn) : 1
set_running_or_notify_cancel() : 1
"wait()") : 3
"Future.running()" : 1
"Future.set_result()" : 2
"Future.set_exception()" : 3
set_result(result) : 2
"concurrent.futures.InvalidStateError" : 2
set_exception(exception) : 2
concurrent.futures.wait(fs : 1
return_when=ALL_COMPLETED) : 2
*fs* : 4
(finished : 2
futures) : 3
"not_done" : 1
(pending : 1
*return_when* : 3
+-------------------------------+------------------------------------------+ : 8
|===============================|==========================================| : 2
"FIRST_COMPLETED" : 2
"FIRST_EXCEPTION" : 2
"ALL_COMPLETED" : 4
concurrent.futures.as_completed(fs : 1
concurrent.futures.CancelledError : 1
concurrent.futures.TimeoutError : 1
concurrent.futures.BrokenExecutor : 1
concurrent.futures.InvalidStateError : 1
concurrent.futures.thread.BrokenThreadPool : 1
"BrokenExecutor" : 2
concurrent.futures.process.BrokenProcessPool : 1
(formerly : 2
"RuntimeError") : 1
non-clean : 1
outside) : 1
Lib/shelve.py : 1
"shelf" : 1
keys!) : 1
shelf : 10
shelve.open(filename : 1
flag='c' : 2
protocol=None : 7
writeback=False) : 2
persistent-dictionary : 1
Example) : 1
*writeback* : 5
"sync()" : 3
"close()"; : 1
handier : 1
mutated) : 1
"shelve.open()" : 1
shelve.open('spam') : 1
db: : 2
db['eggs'] : 1
Shelf : 1
Shelf.sync() : 1
Shelf.close() : 1
Persistent : 1
"dbm.gnu") : 1
(unfortunately) : 1
shelved : 1
(Multiple : 1
safe.) : 1
shelve.Shelf(dict : 1
writeback=False : 2
keyencoding='utf-8') : 2
*keyencoding* : 3
shelve.BsdDbShelf(dict : 1
"first()" : 1
"previous()" : 1
"last()" : 2
"set_location()" : 1
"bsddb.hashopen()" : 1
"bsddb.btopen()" : 1
"bsddb.rnopen()" : 1
shelve.DbfilenameShelf(filename : 1
dict- : 1
("key" : 1
object): : 2
shelve.open(filename) : 1
(overwrites : 1
COPY : 1
klist : 1
list(d.keys()) : 1
(slow!) : 1
writeback=True : 2
beware: : 1
d['xx'] : 4
but.. : 1
d['xx'].append(3) : 1
*this : 1
doesn't!* : 1
STILL : 1
carefully: : 1
temp.append(5) : 1
d=shelve.open(filename,writeback=True) : 1
d['xx'].append(5) : 1
d.close() : 2
"dbm"-style : 1
Lib/doctest.py : 1
doctest: : 8
liberally : 1
input-output : 1
expository : 1
"literate : 1
testing" : 1
documentation" : 1
"example" : 1
factorial() : 1
factorial(5) : 3
factorial(n): : 2
[factorial(n) : 2
120] : 2
factorial(30) : 1
265252859812191058636308480000000 : 2
factorial(-1) : 1
Factorials : 1
factorial(30.1) : 1
factorial(30.0) : 1
ridiculously : 1
large: : 1
factorial(1e100) : 2
OverflowError: : 2
ValueError("n : 2
math.floor(n) : 1
integer") : 1
n+1 : 1
1e300 : 1
OverflowError("n : 1
large") : 1
magic: : 1
example.py : 11
Trying: : 3
Expecting: : 3
__main__.factorial : 1
productive : 1
"Lib/test/test_doctest.py" : 1
verified: : 1
M.py : 2
example(s) : 2
cause(s) : 2
failure(s) : 2
"***Test : 1
Failed*** : 1
failures." : 1
"verbose=True" : 1
"testmod()" : 13
prohibit : 2
"verbose=False" : 1
name(s) : 2
doctest.testfile("example.txt") : 1
"example.txt" : 2
giant : 1
``example`` : 2
``factorial`` : 2
factorial(6) : 2
"doctest.testfile("example.txt")" : 1
"./example.txt" : 1
example.txt : 2
"testfile()"'s : 1
"M.__test__" : 3
true" : 2
(string) : 3
<name : 1
M>.__test__.K : 1
copy-and-paste : 1
13: : 1
print("yes") : 1
print("no") : 1
print("NO") : 1
print("NO!!!") : 1
NO!! : 1
8-column : 1
"NORMALIZE_WHITESPACE" : 3
trial : 3
"DocTestParser" : 7
(exception : 1
means) : 1
backslashing : 1
r'''Backslashes : 1
m\n''' : 1
print(f.__doc__) : 2
m\n : 2
'''Backslashes : 1
m\\n''' : 1
matter: : 1
"Easy!" : 1
math.floor(1.9) : 1
*shallow : 2
copy* : 3
"M"'s : 1
crumbs : 1
"globs=your_dict" : 1
rapidly : 2
3].remove(42) : 1
list.remove(x): : 1
"list.remove(x): : 1
(innermost : 1
part: : 1
ValueError('multi\n : 2
line\ndetail') : 2
multi : 4
"ValueError") : 2
doctest's : 4
"ELLIPSIS" : 3
hundred) : 1
transcript : 1
remember: : 1
Doctest : 5
"ValueError: : 3
prime" : 1
"SyntaxError"s : 1
non-exceptions : 1
tildes: : 1
~~^~~~~~ : 1
+: : 2
^~~~~~~~ : 1
example's : 10
doctest.DONT_ACCEPT_TRUE_FOR_1 : 1
"DONT_ACCEPT_TRUE_FOR_1" : 1
caters : 1
"little : 1
doctest.DONT_ACCEPT_BLANKLINE : 1
delimits : 1
"DONT_ACCEPT_BLANKLINE" : 2
doctest.NORMALIZE_WHITESPACE : 1
(blanks : 1
newlines) : 2
doctest.ELLIPSIS : 1
Complicated : 4
"oops : 1
much!" : 1
doctest.IGNORE_EXCEPTION_DETAIL : 1
3*14" : 1
code/libraries : 1
Exception('message') : 3
builtins.Exception: : 1
__main__.Exception: : 1
doctest.SKIP : 1
random; : 1
SKIP : 1
"commenting : 1
doctest.COMPARISON_FLAGS : 1
or'ing : 2
reported: : 1
doctest.REPORT_UDIFF : 1
doctest.REPORT_CDIFF : 1
doctest.REPORT_NDIFF : 1
"difflib.Differ" : 1
"ndiff.py" : 1
doctest.REPORT_ONLY_FIRST_FAILURE : 1
failures; : 1
"REPORT_ONLY_FIRST_FAILURE" : 1
reported; : 2
doctest.FAIL_FAST : 1
doctest.REPORTING_FLAGS : 1
doctest.register_optionflag(name) : 1
flag's : 1
"register_optionflag()" : 2
MY_FLAG : 1
register_optionflag('MY_FLAG') : 1
"doctest:" : 1
directive_options : 2
directive_option : 2
directive_option)* : 1
on_or_off : 2
directive_option_name : 2
passes: : 1
print(list(range(20))) : 4
+NORMALIZE_WHITESPACE : 3
blanks : 15
+ELLIPSIS : 6
comfortably : 1
print(list(range(5)) : 1
list(range(10 : 1
20)) : 1
list(range(30 : 1
40))) : 1
39] : 1
directive) : 1
{"Hermione" : 2
"Harry"} : 2
sorted(foo()) : 1
['Harry' : 1
'Hermione'] : 1
id(1.0) : 1
7948648 : 1
<C : 2
0x00AC18F0> : 1
1./7 : 1
0.14285714285714285 : 1
print(1./7) : 1
0.142857142857 : 1
print(round(1./7 : 1
0.142857 : 1
"I/2.**J" : 1
3./4 : 1
0.75 : 5
doctest.testfile(filename : 1
module_relative=True : 2
package=None : 2
globs=None : 4
verbose=None : 4
report=True : 2
optionflags=0 : 3
extraglobs=None : 3
raise_on_error=False : 2
parser=DocTestParser() : 3
encoding=None) : 7
"(failure_count : 3
test_count)" : 3
*module_relative* : 8
interpreted: : 3
OS-independent : 2
module-relative : 6
OS-independence : 2
"/") : 6
OS- : 2
relative; : 3
"os.path.basename(filename)" : 1
*globs* : 19
slate : 1
*extraglobs* : 9
"dict.update()": : 1
"'-v'" : 1
*report* : 2
passed) : 1
*optionflags* : 8
*raise_on_error* : 2
"DocTestParser()") : 2
doctest.testmod(m=None : 1
exclude_empty=False) : 1
"m.__doc__" : 1
"m.__test__" : 2
(strings) : 1
"m.__name__" : 1
*exclude_empty* : 3
"doctest.master.summarize()" : 1
"m.__dict__" : 1
doctest.run_docstring_examples(f : 1
globs : 6
verbose=False : 2
name='NoName' : 1
compileflags=None : 2
optionflags=0) : 4
*f*; : 1
""NoName"" : 1
*compileflags* : 2
doctest'ed : 1
"load_tests()" : 1
my_module_with_doctests : 1
ignore): : 1
tests.addTests(doctest.DocTestSuite(my_module_with_doctests)) : 1
doctests: : 1
doctest.DocFileSuite(*paths : 1
synthesized : 6
"failureException" : 2
approximate) : 2
*paths* : 9
*setUp* : 3
"DocTest" : 20
setUp : 3
*tearDown* : 3
or-ing : 2
"set_unittest_reportflags()" : 1
"DocFileSuite()" : 4
doctest.DocTestSuite(module=None : 1
test_finder=None : 1
checker=None) : 1
dotted) : 1
*test_finder* : 1
replacement) : 4
"doctest.DocTestCase" : 1
"DocTestCase" : 7
studying : 1
"doctest.DocFileCase" : 1
"DocFileCase" : 1
doctest.set_unittest_reportflags(flags) : 1
"reporting : 1
"doctest"'s : 2
users' : 1
needs; : 1
revolves : 1
"Example": : 1
"DocTest": : 1
"Example"s : 3
"DocTestFinder": : 1
Finds : 9
"DocTestParser": : 1
docstring) : 2
"DocTestRunner": : 1
"OutputChecker": : 1
diagram: : 1
+------+ : 2
+---------+ : 3
|module| : 1
--DocTestFinder-> : 1
--DocTestRunner-> : 1
(printed) : 1
doctest.DocTest(examples : 1
"Example" : 5
globals) : 1
"globs" : 1
doctest.Example(source : 1
exc_msg=None : 1
indent=0 : 1
options=None) : 1
"want" : 1
exc_msg : 1
"exc_msg" : 1
"DocTestRunner"'s : 4
"optionflags") : 1
doctest.DocTestFinder(verbose=False : 1
recurse=True : 1
exclude_empty=True) : 1
"DocTest"s : 4
staticmethods : 1
*recurse* : 1
"DocTestFinder.find()" : 2
find(obj[ : 1
name][ : 2
module][ : 1
globs][ : 1
extraglobs]) : 1
*obj*'s : 1
"obj.__name__" : 1
DocTests : 1
(Contained : 1
ignored.) : 1
(non-existent) : 1
(bindings : 1
*globs*) : 1
*__dict__* : 1
doctest.DocTestParser : 1
get_doctest(string : 1
get_examples(string : 1
name='<string>') : 2
0-based : 2
parse(string : 2
Divide : 5
doctest.DocTestRunner(checker=None : 1
runner's : 2
"TestRunner.run()"; : 1
"sys.stdout.write" : 1
"report_start()" : 1
"report_success()" : 1
"report_unexpected_exception()" : 1
"report_failure()" : 1
*checker* : 1
iff : 2
report_start(out : 1
*example* : 7
*containing : 1
example* : 1
"DocTestRunner.run()" : 4
report_success(out : 1
got) : 3
*got* : 3
report_failure(out : 1
report_unexpected_exception(out : 1
"sys.exc_info()") : 6
run(test : 1
out=None : 3
clear_globs=True) : 1
"test.globs" : 1
*clear_globs* : 1
*clear_globs=False* : 1
future-import : 1
"DocTestRunner.report_*()" : 1
summarize(verbose=None) : 1
"TestResults(failed : 1
attempted)" : 1
doctest.OutputChecker : 1
"output_difference()" : 1
check_output(want : 1
optionflags) : 2
(*got*) : 2
(*want*) : 1
non-exact : 1
output_difference(example : 1
(*example*) : 1
*want* : 1
"DebugRunner" : 3
"a.py" : 2
g(x*2) : 3
print(x+3) : 2
pdb.set_trace() : 4
f(3) : 2
doctest.testmod(a) : 1
--Return-- : 3
<doctest : 3
a[1]>(3)g()->None : 1
(Pdb) : 15
[EOF] : 2
a[0]>(2)f()->None : 1
a[2]>(1)?()->None : 1
cont : 1
debugger: : 1
doctest.script_from_examples(s) : 1
print(doctest.script_from_examples(r""" : 1
sum: : 2
print(x+y) : 2
""")) : 1
doctest.testsource(module : 1
"script_from_examples()" : 1
print(doctest.testsource(a : 1
"a.f")) : 1
doctest.debug(module : 1
pm=False) : 1
"testsource()" : 1
"module.__dict__" : 1
*pm* : 4
"pdb.run()" : 1
doctest.debug_src(src : 1
pm=False : 1
globs=None) : 1
"DebugRunner"'s : 1
doctest!) : 1
doctest.DebugRunner(checker=None : 1
"UnexpectedException" : 2
"DocTestFailure" : 2
doctest.DocTestFailure(test : 1
DocTestFailure.test : 1
DocTestFailure.example : 1
DocTestFailure.got : 1
doctest.UnexpectedException(test : 1
UnexpectedException.test : 1
UnexpectedException.example : 1
UnexpectedException.exc_info : 1
literate : 1
learned---it : 1
invaluable : 3
amazed : 1
"harmless" : 1
skimp : 1
prose : 3
code-based : 1
attitude : 2
doctest-based : 1
coherent : 1
narrative : 1
blurring : 1
confined : 2
"_regrtest_topic" : 1
"__test__" : 1
runner: : 2
doctest.REPORT_NDIFF|doctest.FAIL_FAST : 1
globals(): : 1
globals()[name] : 1
__test__[name] : 1
doctest.run_docstring_examples(obj : 1
name=name : 1
optionflags=flags) : 1
doctest.testmod(optionflags=flags) : 1
print("{} : 4
tests".format(fail : 1
total)) : 1
overview: : 7
*fcntl(2)* : 1
*ioctl(2)* : 1
"sys.stdin.fileno()" : 2
"F_ADD_SEALS" : 1
"F_GET_SEALS" : 1
"F_SEAL_*" : 1
obtains : 1
Linux(>=3.15) : 1
2.6.11 : 1
"F_GETPIPE_SZ" : 1
"F_SETPIPE_SZ" : 1
pipe's : 1
fcntl.fcntl(fd : 1
arg=0) : 1
"fcntl.fcntl" : 1
"fd" : 17
fcntl.ioctl(fd : 1
arg=0 : 1
mutate_flag=True) : 1
32-bits : 2
"bytes") : 3
*mutate_flag* : 2
os.getpgrp() : 2
13341 : 2
struct.unpack('h' : 1
fcntl.ioctl(0 : 2
termios.TIOCGPGRP : 2
"))[0] : 1
array.array('h' : 1
[0]) : 1
array('h' : 1
[13341]) : 1
"fcntl.ioctl" : 1
"request" : 2
fcntl.flock(fd : 1
*operation* : 3
*flock(2)* : 1
"fcntl()".) : 1
"flock()" : 7
"fcntl.flock" : 1
"operation" : 6
fcntl.lockf(fd : 1
len=0 : 1
whence=0) : 2
"LOCK_UN" : 1
"LOCK_SH" : 2
"LOCK_EX" : 3
"LOCK_NB" : 2
"EACCES" : 2
"EAGAIN" : 2
"io.IOBase.seek()" : 1
specifically: : 1
("os.SEEK_SET") : 1
("os.SEEK_CUR") : 1
("os.SEEK_END") : 1
"fcntl.lockf" : 1
"whence" : 2
SVR4 : 1
system): : 1
open(...) : 1
fcntl.fcntl(f : 2
fcntl.F_SETFL : 1
os.O_NDELAY) : 1
lockdata : 1
struct.pack('hhllhh' : 1
fcntl.F_WRLCK : 1
fcntl.F_SETLKW : 1
lockdata) : 1
*lockdata* : 1
"O_SHLOCK" : 1
"O_EXLOCK" : 1
"lockf()" : 6
Lib/email/header.py : 1
("Compat32") : 5
worldwide : 2
slew : 1
2822**-compliant : 5
2046** : 3
2231** : 15
"email.charset" : 3
*Subject* : 5
*To* : 5
"Header" : 17
email.header : 2
Message() : 1
Header('p\xf6stal' : 1
'iso-8859-1') : 1
msg['Subject'] : 5
msg.as_string() : 1
'Subject: : 2
=?iso-8859-1?q?p=F6stal?=\n\n' : 1
MIME-aware : 5
email.header.Header(s=None : 1
charset=None : 5
maxlinelen=None : 3
header_name=None : 2
continuation_ws=' : 2
MIME-compliant : 1
"us-ascii" : 3
*s*'s : 1
*maxlinelen* : 4
*Subject*) : 1
*header_name* : 3
*continuation_ws* : 3
append(s : 1
"Charset" : 17
"email.charset") : 2
UnicodeError : 3
encode(splitchars='; : 1
\t' : 1
linesep='\n') : 1
RFC-compliant : 8
*splitchars* : 1
weight : 3
2822**'s : 1
'higher : 1
breaks': : 1
splitchar : 1
Splitchars : 1
*linesep* : 8
__str__() : 7
"'unknown-8bit'" : 2
__eq__(other) : 2
__ne__(other) : 2
email.header.decode_header(header) : 1
"(decoded_string : 2
charset)" : 2
non-encoded : 2
decode_header('=?iso-8859-1?q?p=F6stal?=') : 1
[(b'p\xf6stal' : 1
'iso-8859-1')] : 1
email.header.make_header(decoded_seq : 1
Lib/netrc.py : 1
**ftp** : 1
netrc.netrc([file]) : 1
"NetrcParseError" : 2
(owned : 1
user) : 1
tokens' : 1
netrc.NetrcParseError : 1
netrc.authenticators(host) : 1
"(login : 2
password)" : 5
authenticators : 1
netrc.__repr__() : 1
entries.) : 1
netrc.hosts : 1
pseudo- : 3
netrc.macros : 1
Lib/uuid.py : 1
privacy : 1
"is_safe" : 1
UUID's : 1
multiprocessing-safe : 3
uuid.UUID(hex=None : 1
bytes=None : 1
bytes_le=None : 1
fields=None : 1
int=None : 1
version=None : 2
is_safe=SafeUUID.unknown) : 1
*bytes_le* : 3
(32-bit : 1
*time_low* : 2
*time_mid* : 2
*time_hi_version* : 2
*clock_seq_hi_variant* : 1
*clock_seq_low* : 1
48-bit : 3
*node*) : 1
*fields* : 3
*int* : 4
URN : 3
UUID('{12345678-1234-5678-1234-567812345678}') : 1
UUID('12345678123456781234567812345678') : 1
UUID('urn:uuid:12345678-1234-5678-1234-567812345678') : 1
UUID(bytes=b'\x12\x34\x56\x78'*4) : 1
UUID(bytes_le=b'\x78\x56\x34\x12\x34\x12\x78\x56' : 1
b'\x12\x34\x56\x78\x12\x34\x56\x78') : 1
UUID(fields=(0x12345678 : 1
0x1234 : 1
0x5678 : 1
0x12 : 1
0x34 : 1
0x567812345678)) : 1
UUID(int=0x12345678123456781234567812345678) : 1
*hex* : 2
"UUID.int" : 1
non-UUID : 1
"str(uuid)" : 1
"12345678-1234-5678-1234-567812345678" : 1
UUID.bytes : 1
16-byte : 3
UUID.bytes_le : 1
UUID.fields : 1
+--------------------------------+---------------------------------+ : 9
|================================|=================================| : 1
"time_low" : 1
"time_mid" : 1
"time_hi_version" : 1
"clock_seq_hi_variant" : 1
"clock_seq_low" : 1
"node" : 3
60-bit : 1
"clock_seq" : 1
14-bit : 2
UUID.hex : 1
32-character : 1
UUID.int : 1
UUID.urn : 1
UUID.variant : 1
"RESERVED_NCS" : 1
"RFC_4122" : 1
"RESERVED_MICROSOFT" : 1
"RESERVED_FUTURE" : 1
UUID.version : 1
"RFC_4122") : 1
UUID.is_safe : 1
"SafeUUID" : 1
octet) : 1
"Hardware : 1
address" : 1
octet : 4
*unset*) : 1
Universally : 2
uuid.uuid1(node=None : 1
clock_seq=None) : 1
"getnode()" : 1
*clock_seq* : 1
uuid.uuid3(namespace : 1
UUID) : 2
uuid.uuid5(namespace : 1
uuid.NAMESPACE_DNS : 1
uuid.NAMESPACE_URL : 1
uuid.NAMESPACE_OID : 1
OID : 1
uuid.NAMESPACE_X500 : 1
X.500 : 1
"variant" : 1
uuid.RESERVED_NCS : 1
NCS : 1
uuid.RFC_4122 : 1
uuid.RESERVED_MICROSOFT : 1
uuid.RESERVED_FUTURE : 1
Unique : 1
IDentifier : 1
(UUID) : 1
Uniform : 9
(braces : 1
uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}') : 1
str(x) : 1
'00010203-0405-0607-0809-0a0b0c0d0e0f' : 1
x.bytes : 1
b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f' : 1
uuid.UUID(bytes=x.bytes) : 1
UUID('00010203-0405-0607-0809-0a0b0c0d0e0f') : 1
***************************************************** : 8
Lib/symtable.py : 1
symtable.symtable(code : 1
compile_type) : 1
"SymbolTable" : 4
*compile_type* : 1
symtable.SymbolTable : 1
get_type() : 1
"'class'" : 1
"'module'" : 2
"'function'" : 1
get_id() : 1
get_name() : 3
"'top'" : 2
("get_type()" : 1
"'module'") : 1
get_lineno() : 1
is_optimized() : 1
is_nested() : 1
has_children() : 1
"get_children()" : 1
get_identifiers() : 2
lookup(name) : 1
get_symbols() : 1
get_children() : 1
symtable.Function : 1
get_parameters() : 1
get_locals() : 1
get_globals() : 1
get_nonlocals() : 1
nonlocals : 2
get_frees() : 1
symtable.Class : 1
get_methods() : 1
symtable.Symbol : 1
is_referenced() : 1
is_imported() : 1
is_parameter() : 1
is_global() : 1
is_nonlocal() : 1
is_declared_global() : 1
is_local() : 1
is_annotated() : 1
is_free() : 1
is_assigned() : 1
is_namespace() : 1
symtable.symtable("def : 1
some_func(): : 1
"exec") : 1
table.lookup("some_func").is_namespace() : 1
get_namespaces() : 1
get_namespace() : 1
Lib/xml/dom/minidom.py : 1
proficient : 1
parseString : 1
dom1 : 1
parse('c:\\temp\\mydata.xml') : 1
datasource : 1
open('c:\\temp\\mydata.xml') : 1
dom2 : 1
parse(datasource) : 1
dom3 : 2
parseString('<myxml>Some : 1
data<empty/> : 1
data</myxml>') : 1
xml.dom.minidom.parse(filename_or_file : 1
parser=None : 2
bufsize=None) : 2
*filename_or_file* : 1
resolver) : 2
xml.dom.minidom.parseString(string : 1
parser=None) : 9
"DOM : 2
builder" : 1
grasp : 1
Implementation" : 1
"getDOMImplementation()" : 2
DOM: : 1
getDOMImplementation : 1
getDOMImplementation() : 1
newdoc : 1
impl.createDocument(None : 1
"some_tag" : 1
top_element : 1
newdoc.documentElement : 1
newdoc.createTextNode('Some : 1
content.') : 1
top_element.appendChild(text) : 1
"documentElement" : 1
parseString("<myxml>Some : 1
data</myxml>") : 1
dom3.documentElement.tagName : 1
"myxml" : 1
now-unneeded : 1
"xml.dom.minidom"-specific : 1
(DOM) : 4
Node.unlink() : 1
unlink : 2
*dom* : 1
exited: : 1
xml.dom.minidom.parse(datasource) : 1
dom: : 1
dom : 2
Node.writexml(writer : 1
indent='' : 1
addindent='' : 1
newl='' : 1
standalone=None) : 3
*addindent* : 1
subnodes : 1
*newl* : 2
prologue : 1
"standalone="yes"" : 1
""no"" : 2
Node.toxml(encoding=None : 1
Node.toprettyxml(indent='\t' : 1
newl='\n' : 1
tabulator; : 1
<slideshow> : 1
<title>Demo : 1
slideshow</title> : 1
<slide><title>Slide : 1
title</title> : 1
<point>This : 1
demo</point> : 1
<point>Of : 1
slides</point> : 1
</slide> : 2
<slide><title>Another : 1
slide</title> : 1
<point>It : 1
important</point> : 1
<point>To : 1
than</point> : 1
<point>one : 1
slide</point> : 1
</slideshow> : 1
xml.dom.minidom.parseString(document) : 1
getText(nodelist): : 1
nodelist: : 1
node.nodeType : 1
node.TEXT_NODE: : 1
rc.append(node.data) : 1
''.join(rc) : 1
handleSlideshow(slideshow): : 1
print("<html>") : 1
handleSlideshowTitle(slideshow.getElementsByTagName("title")[0]) : 1
slideshow.getElementsByTagName("slide") : 1
handleToc(slides) : 1
handleSlides(slides) : 1
print("</html>") : 1
handleSlides(slides): : 1
slide : 2
slides: : 2
handleSlide(slide) : 1
handleSlide(slide): : 1
handleSlideTitle(slide.getElementsByTagName("title")[0]) : 1
handlePoints(slide.getElementsByTagName("point")) : 1
handleSlideshowTitle(title): : 1
print(f"<title>{getText(title.childNodes)}</title>") : 1
handleSlideTitle(title): : 1
print(f"<h2>{getText(title.childNodes)}</h2>") : 1
handlePoints(points): : 1
print("<ul>") : 1
handlePoint(point) : 1
print("</ul>") : 1
handlePoint(point): : 1
print(f"<li>{getText(point.childNodes)}</li>") : 1
handleToc(slides): : 1
slide.getElementsByTagName("title")[0] : 1
print(f"<p>{getText(title.childNodes)}</p>") : 1
handleSlideshow(dom) : 1
1.0-compatible : 1
features) : 1
themselves; : 1
IDL : 16
OMG : 5
"_get_foo()" : 1
"_set_foo()" : 1
"boolean" : 3
"DOMString" : 3
"null" : 2
"xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE"); : 1
"DOMException" : 3
"Pythonic" : 1
"xml.dom.minidom": : 2
"DOMTimeStamp" : 1
"EntityReference" : 1
document's : 2
https://www.w3.org/TR/2006 : 1
/REC-xml11-20060816/#NT-EncodingDecl : 1
https://www.iana.org/assignments/character-sets/character- : 1
sets.xhtml : 1
Lib/imaplib.py : 1
IMAP4rev1 : 2
2060** : 2
1730**) : 1
"STATUS" : 1
imaplib.IMAP4(host='' : 1
port=IMAP4_PORT : 1
(IMAP4 : 1
IMAP4rev1) : 1
host) : 3
(143) : 1
E.g.: : 2
IMAP4("domain.org") : 1
M: : 1
M.noop() : 1
[b'Nothing : 1
Accomplished : 1
d25if65hy903weo.87']) : 1
IMAP4.error : 1
IMAP4.abort : 1
"IMAP4.error" : 2
IMAP4.readonly : 1
re-opened : 1
re-obtain : 1
imaplib.IMAP4_SSL(host='' : 1
port=IMAP4_SSL_PORT : 1
ssl_context=None : 2
-over-SSL : 1
(993) : 1
*ssl_context* : 8
*keyfile*/*certfile* : 2
imaplib.IMAP4_stream(command) : 1
"stdin/stdout" : 1
imaplib.Internaldate2tuple(datestr) : 1
"INTERNALDATE" : 2
"time.struct_time" : 7
imaplib.Int2AP(num) : 1
"P"] : 1
imaplib.ParseFlags(flagstr) : 1
"FLAGS" : 2
imaplib.Time2Internaldate(date_time) : 1
*date_time* : 3
""DD-Mmm-YYYY : 1
HH:MM:SS : 1
+HHMM"" : 1
double-quotes) : 1
9-tuple : 3
"time.localtime()") : 1
double-quoted : 1
changes; : 1
"EXPUNGE" : 3
advisable : 6
University : 1
Washington's : 1
(**Source : 1
Code**) : 1
https://github.com/uw-imap/imap : 1
(**Not : 1
Maintained**) : 1
upper-case : 1
"AUTHENTICATE" : 1
"APPEND" : 1
protocol- : 1
"LOGIN" : 2
(eg: : 2
"STORE") : 1
"r'(\Deleted)'") : 1
[data : 1
"'OK'" : 1
"'NO'" : 1
mandated : 4
'literal' : 1
*message_set* : 2
("'1'") : 1
("'2:4'") : 1
("'1:3,6:9'") : 1
("'3:*'") : 1
IMAP4.append(mailbox : 1
date_time : 1
IMAP4.authenticate(mechanism : 1
authobject) : 1
Authenticate : 1
*mechanism* : 3
"capabilities" : 1
"AUTH=mechanism" : 1
*authobject* : 3
authobject(response) : 1
responses; : 2
*response* : 9
IMAP4.check() : 1
Checkpoint : 1
IMAP4.close() : 1
IMAP4.copy(message_set : 1
new_mailbox) : 1
*new_mailbox* : 1
IMAP4.create(mailbox) : 1
*mailbox* : 10
IMAP4.delete(mailbox) : 1
IMAP4.deleteacl(mailbox : 1
who) : 2
IMAP4.enable(capability) : 1
*capability* : 1
5161**) : 1
"UTF8=ACCEPT" : 3
6855**) : 1
IMAP4.expunge() : 1
Permanently : 1
IMAP4.fetch(message_set : 1
message_parts) : 1
(parts : 1
*message_parts* : 1
eg: : 1
""(UID : 1
BODY[TEXT])"" : 1
IMAP4.getacl(mailbox) : 1
"ACL"s : 1
"Cyrus" : 4
IMAP4.getannotation(mailbox : 1
"ANNOTATION"s : 2
IMAP4.getquota(root) : 1
"quota" : 3
*root*'s : 2
QUOTA : 3
rfc2087 : 3
IMAP4.getquotaroot(mailbox) : 1
"roots" : 1
IMAP4.list([directory[ : 1
pattern]]) : 1
"LIST" : 6
IMAP4.login(user : 1
Identify : 3
IMAP4.login_cram_md5(user : 1
"CRAM-MD5" : 2
"CAPABILITY" : 3
"AUTH=CRAM-MD5" : 1
IMAP4.logout() : 1
Shutdown : 1
"BYE" : 1
IMAP4.lsub(directory='""' : 1
pattern='*') : 1
IMAP4.myrights(mailbox) : 1
mailbox) : 1
IMAP4.namespace() : 1
IMAP4.noop() : 1
"NOOP" : 2
IMAP4.open(host : 1
Opens : 4
"IMAP4.read()" : 1
"IMAP4.readline()" : 1
"IMAP4.send()" : 1
"IMAP4.shutdown()" : 1
"imaplib.open" : 1
IMAP4.partial(message_num : 1
message_part : 1
IMAP4.proxyauth(user) : 1
authorised : 1
IMAP4.read(size) : 1
IMAP4.readline() : 1
IMAP4.recent() : 1
"RECENT" : 1
IMAP4.rename(oldmailbox : 1
newmailbox) : 1
*oldmailbox* : 1
*newmailbox* : 1
IMAP4.response(code) : 1
IMAP4.search(charset : 1
criterion[ : 1
"CHARSET" : 6
specified; : 1
instance.. : 3
typ : 6
msgnums : 2
M.search(None : 4
'FROM' : 1
'"LDJ"') : 1
'(FROM : 1
"LDJ")') : 1
IMAP4.select(mailbox='INBOX' : 1
readonly=False) : 1
("EXISTS" : 1
"'INBOX'" : 1
IMAP4.send(data) : 1
"imaplib.send" : 1
IMAP4.setacl(mailbox : 1
what) : 1
"ACL" : 1
IMAP4.setannotation(mailbox : 1
attribute[ : 1
IMAP4.setquota(root : 1
IMAP4.shutdown() : 1
"IMAP4.logout()" : 1
IMAP4.socket() : 1
IMAP4.sort(sort_criteria : 1
search_criterion[ : 2
"search" : 8
*search_criterion* : 2
argument(s); : 2
*sort_criteria* : 1
"uid : 4
sort" : 1
search" : 2
"IMAP4rev1" : 2
IMAP4.starttls(ssl_context=None) : 1
"STARTTLS" : 2
IMAP4.status(mailbox : 1
IMAP4.store(message_set : 1
flag_list) : 1
Alters : 1
dispositions : 1
6.4.6 : 1
"+FLAGS" : 1
"-FLAGS" : 1
".SILENT" : 1
'ALL') : 2
data[0].split(): : 2
M.store(num : 1
'+FLAGS' : 1
'\\Deleted') : 1
M.expunge() : 1
"[test]") : 1
3501** : 1
Gmail : 1
nonetheless : 2
IMAP4.subscribe(mailbox) : 1
Subscribe : 1
IMAP4.thread(threading_algorithm : 1
*threading_algorithm* : 1
thread" : 4
IMAP4.uid(command : 1
arg[ : 1
IMAP4.unsubscribe(mailbox) : 1
Unsubscribe : 1
IMAP4.unselect() : 1
IMAP4.xatom(name[ : 1
"IMAP4": : 1
IMAP4.PROTOCOL_VERSION : 1
IMAP4.debug : 1
"Debug" : 1
IMAP4.utf8_enabled : 1
imaplib.IMAP4() : 1
M.login(getpass.getuser() : 1
getpass.getpass()) : 1
M.select() : 1
M.fetch(num : 1
'(RFC822)') : 1
print('Message : 1
%s\n%s\n' : 1
(num : 1
data[0][1])) : 1
M.close() : 1
M.logout() : 1
Lib/pathlib.py : 1
versa) : 3
"WindowsPath" : 1
"PureWindowsPath" : 3
428**: : 1
Path('.') : 1
p.iterdir() : 1
x.is_dir()] : 1
[PosixPath('.hg') : 1
PosixPath('docs') : 1
PosixPath('dist') : 1
PosixPath('__pycache__') : 1
PosixPath('build')] : 1
list(p.glob('**/*.py')) : 1
[PosixPath('test_pathlib.py') : 1
PosixPath('setup.py') : 9
PosixPath('pathlib.py') : 3
PosixPath('docs/conf.py') : 4
PosixPath('build/lib/pathlib.py')] : 1
Path('/etc') : 1
'init.d' : 2
'reboot' : 1
PosixPath('/etc/init.d/reboot') : 1
q.resolve() : 1
PosixPath('/etc/rc.d/init.d/halt') : 1
q.exists() : 1
q.is_dir() : 1
q.open() : 1
'#!/bin/bash\n' : 1
path-handling : 1
*flavours*: : 1
pathlib.PurePath(*pathsegments) : 1
flavour : 8
(instantiating : 2
"PurePosixPath" : 4
"PureWindowsPath"): : 1
PurePath('setup.py') : 1
PurePosixPath('setup.py') : 1
*pathsegments* : 7
PurePath('foo' : 1
'some/path' : 1
PurePosixPath('foo/some/path/bar') : 1
PurePath(Path('foo') : 1
Path('bar')) : 1
PurePosixPath('foo/bar') : 3
assumed: : 1
PurePath() : 1
PurePosixPath('.') : 3
"os.path.join()"): : 1
PurePath('/etc' : 1
'lib64') : 1
PurePosixPath('/usr/lib64') : 1
PureWindowsPath('c:/Windows' : 3
'd:bar') : 1
PureWindowsPath('d:bar') : 1
"r'\foo'") : 2
'/Program : 2
Files') : 9
PureWindowsPath('c:/Program : 10
Spurious : 1
("'..'") : 1
("'//'") : 1
paths): : 1
PurePath('foo//bar') : 1
PurePath('//foo/bar') : 1
PurePosixPath('//foo/bar') : 1
PurePath('foo/./bar') : 1
PurePath('foo/../bar') : 1
PurePosixPath('foo/../bar') : 1
"PurePosixPath('foo/../bar')" : 1
"PurePosixPath('bar')" : 1
pathlib.PurePosixPath(*pathsegments) : 1
PurePosixPath('/etc') : 3
pathlib.PureWindowsPath(*pathsegments) : 1
Files/') : 2
PureWindowsPath('//server/share/file') : 2
flavour's : 1
case-folding : 3
PurePosixPath('foo') : 4
PurePosixPath('FOO') : 1
PureWindowsPath('foo') : 4
PureWindowsPath('FOO') : 2
PureWindowsPath('C:') : 1
PureWindowsPath('d:') : 1
ordered: : 1
'PureWindowsPath' : 1
'PurePosixPath' : 1
"r'\foo'"): : 1
PurePath('/etc') : 3
'apache2' : 1
PurePosixPath('/etc/init.d/apache2') : 2
PurePath('bin') : 1
PurePosixPath('/usr/bin') : 1
'/an_absolute_path' : 1
PurePosixPath('/an_absolute_path') : 1
os.fspath(p) : 1
'/etc' : 2
str(p) : 3
'c:\\Program : 1
Files' : 2
"os.fsencode()": : 1
bytes(p) : 1
b'/etc' : 1
"parts" : 1
(components) : 1
PurePath.parts : 1
path's : 2
PurePath('/usr/bin/python3') : 1
p.parts : 2
('/' : 1
'usr' : 1
'python3') : 1
Files/PSF') : 1
('c:\\' : 1
'Program : 1
'PSF') : 1
regrouped : 1
PurePath.drive : 1
any: : 4
Files/').drive : 2
'c:' : 2
PureWindowsPath('/Program : 1
PurePosixPath('/etc').drive : 1
drives: : 1
PureWindowsPath('//host/share/foo.txt').drive : 1
'\\\\host\\share' : 1
PurePath.root : 1
Files/').root : 2
PureWindowsPath('c:Program : 2
PurePosixPath('/etc').root : 1
PureWindowsPath('//host/share').root : 1
PurePosixPath('//etc').root : 1
PurePosixPath('///etc').root : 1
PurePosixPath('////etc').root : 1
Specifications : 1
6* : 1
Pathname : 2
Resolution:*"A : 1
implementation-defined : 3
slash."* : 1
PurePath.anchor : 1
Files/').anchor : 2
'c:\\' : 1
PurePosixPath('/etc').anchor : 1
PureWindowsPath('//host/share').anchor : 1
'\\\\host\\share\\' : 1
PurePath.parents : 1
PureWindowsPath('c:/foo/bar/setup.py') : 1
p.parents[0] : 1
PureWindowsPath('c:/foo/bar') : 1
p.parents[1] : 1
PureWindowsPath('c:/foo') : 1
p.parents[2] : 1
PureWindowsPath('c:/') : 5
*slices* : 2
PurePath.parent : 1
PurePosixPath('/a/b/c/d') : 1
p.parent : 4
PurePosixPath('/a/b/c') : 1
PurePosixPath('/') : 2
PurePosixPath('foo/..') : 1
upwards : 2
"Path.resolve()" : 2
"".."" : 5
PurePath.name : 1
PurePosixPath('my/library/setup.py').name : 1
'setup.py' : 2
considered: : 1
PureWindowsPath('//some/share/setup.py').name : 1
PureWindowsPath('//some/share').name : 1
PurePath.suffix : 1
PurePosixPath('my/library/setup.py').suffix : 1
PurePosixPath('my/library.tar.gz').suffix : 1
'.gz' : 1
PurePosixPath('my/library').suffix : 1
PurePath.suffixes : 1
PurePosixPath('my/library.tar.gar').suffixes : 1
['.tar' : 2
'.gar'] : 1
PurePosixPath('my/library.tar.gz').suffixes : 1
'.gz'] : 1
PurePosixPath('my/library').suffixes : 1
PurePath.stem : 1
PurePosixPath('my/library.tar.gz').stem : 1
'library.tar' : 1
PurePosixPath('my/library.tar').stem : 1
'library' : 2
PurePosixPath('my/library').stem : 1
PurePath.as_posix() : 1
("/"): : 1
PureWindowsPath('c:\\windows') : 1
'c:\\windows' : 1
p.as_posix() : 1
'c:/windows' : 1
PurePath.as_uri() : 1
PurePosixPath('/etc/passwd') : 4
p.as_uri() : 2
'file:///etc/passwd' : 1
PureWindowsPath('c:/Windows') : 1
'file:///c:/Windows' : 1
PurePath.is_absolute() : 1
allows) : 1
drive: : 1
PurePosixPath('/a/b').is_absolute() : 1
PurePosixPath('a/b').is_absolute() : 1
PureWindowsPath('c:/a/b').is_absolute() : 1
PureWindowsPath('/a/b').is_absolute() : 1
PureWindowsPath('c:').is_absolute() : 1
PureWindowsPath('//some/share').is_absolute() : 1
PurePath.is_relative_to(*other) : 1
PurePath('/etc/passwd') : 1
p.is_relative_to('/etc') : 1
p.is_relative_to('/usr') : 1
PurePath.is_reserved() : 1
PureWindowsPath('nul').is_reserved() : 1
PurePosixPath('nul').is_reserved() : 1
PurePath.joinpath(*other) : 1
turn: : 1
PurePosixPath('/etc').joinpath('passwd') : 1
PurePosixPath('/etc').joinpath(PurePosixPath('passwd')) : 1
PurePosixPath('/etc').joinpath('init.d' : 1
'apache2') : 1
PureWindowsPath('c:').joinpath('/Program : 1
PurePath.match(pattern) : 1
PurePath('a/b.py').match('*.py') : 1
PurePath('/a/b/c.py').match('b/*.py') : 1
PurePath('/a/b/c.py').match('a/*.py') : 1
PurePath('/a.py').match('/*.py') : 1
PurePath('a/b.py').match('/*.py') : 1
case-sensitivity : 1
defaults: : 3
PurePosixPath('b.py').match('*.PY') : 1
PureWindowsPath('b.py').match('*.PY') : 1
PurePath.relative_to(*other) : 1
p.relative_to('/') : 1
PurePosixPath('etc/passwd') : 1
p.relative_to('/etc') : 1
PurePosixPath('passwd') : 1
p.relative_to('/usr') : 1
"pathlib.py" : 2
694 : 1
relative_to : 1
.format(str(self) : 1
str(formatted))) : 1
'/etc/passwd' : 1
PurePath.with_name(name) : 1
PureWindowsPath('c:/Downloads/pathlib.tar.gz') : 3
p.with_name('setup.py') : 2
PureWindowsPath('c:/Downloads/setup.py') : 1
"/home/antoine/cpython/default/Lib/pathlib.py" : 3
751 : 1
with_name : 2
ValueError("%r : 2
(self,)) : 2
PurePath.with_stem(stem) : 1
PureWindowsPath('c:/Downloads/draft.txt') : 1
p.with_stem('final') : 1
PureWindowsPath('c:/Downloads/final.txt') : 1
p.with_stem('lib') : 1
PureWindowsPath('c:/Downloads/lib.gz') : 1
p.with_stem('') : 1
with_stem : 1
self.with_name(stem : 1
self.suffix) : 1
851 : 1
PurePath.with_suffix(suffix) : 1
p.with_suffix('.bz2') : 1
PureWindowsPath('c:/Downloads/pathlib.tar.bz2') : 1
PureWindowsPath('README') : 2
p.with_suffix('.txt') : 1
PureWindowsPath('README.txt') : 2
p.with_suffix('') : 1
pathlib.Path(*pathsegments) : 1
"PosixPath" : 1
"WindowsPath"): : 1
Path('setup.py') : 5
pathlib.PosixPath(*pathsegments) : 1
PosixPath('/etc') : 2
pathlib.WindowsPath(*pathsegments) : 1
WindowsPath('c:/Program : 2
non-compatible : 1
application): : 1
WindowsPath('setup.py') : 1
798 : 1
(cls.__name__,)) : 1
NotImplementedError: : 1
'WindowsPath' : 1
Path.cwd() : 2
"os.getcwd()"): : 1
PosixPath('/home/antoine/pathlib') : 2
Path.home() : 2
construct) : 1
PosixPath('/home/antoine') : 1
Path.stat(* : 1
symlinks; : 2
"follow_symlinks=False" : 8
p.stat().st_size : 2
956 : 2
p.stat().st_mtime : 1
1327883547.852554 : 1
Path.chmod(mode : 1
"lchmod()" : 1
p.stat().st_mode : 2
33277 : 1
p.chmod(0o444) : 1
33060 : 1
Path.exists() : 2
Path('.').exists() : 1
Path('setup.py').exists() : 1
Path('/etc').exists() : 1
Path('nonexistentfile').exists() : 1
*points : 1
Path.expanduser() : 1
PosixPath('~/films/Monty : 1
p.expanduser() : 1
PosixPath('/home/eric/films/Monty : 1
Path.glob(pattern) : 1
Glob : 1
kind): : 1
sorted(Path('.').glob('*.py')) : 1
[PosixPath('pathlib.py') : 1
PosixPath('test_pathlib.py')] : 3
sorted(Path('.').glob('*/*.py')) : 1
[PosixPath('docs/conf.py')] : 1
recursively" : 1
globbing: : 1
sorted(Path('.').glob('**/*.py')) : 1
[PosixPath('build/lib/pathlib.py') : 2
inordinate : 2
("sep" : 2
"altsep") : 2
Path.is_dir() : 2
symlink; : 6
Path.is_file() : 2
Path.is_mount() : 1
*mount : 2
point*: : 2
*path*'s : 2
"path/.." : 2
i-node : 3
Path.is_symlink() : 1
Path.is_socket() : 1
Path.is_fifo() : 1
FIFO) : 1
Path.is_block_device() : 1
device) : 3
Path.is_char_device() : 1
Path.iterdir() : 2
Path('docs') : 1
p.iterdir(): : 1
PosixPath('docs/_templates') : 1
PosixPath('docs/make.bat') : 1
PosixPath('docs/index.rst') : 1
PosixPath('docs/_build') : 1
PosixPath('docs/_static') : 1
PosixPath('docs/Makefile') : 1
"'..'" : 4
Path.lchmod(mode) : 1
"Path.chmod()" : 2
link's : 3
Path.lstat() : 1
"Path.stat()" : 2
Path.mkdir(mode=0o777 : 1
parents=False : 1
exist_ok=False) : 2
"umask" : 2
*parents* : 2
needed; : 3
(mimicking : 1
Path.open(mode='r' : 2
p.open() : 1
'#!/usr/bin/env : 1
python3\n' : 1
Path.read_bytes() : 2
pointed-to : 2
Path('my_binary_file') : 2
p.write_bytes(b'Binary : 2
contents') : 4
p.read_bytes() : 2
b'Binary : 2
contents' : 4
Path.read_text(encoding=None : 1
Path('my_text_file') : 2
p.write_text('Text : 2
p.read_text() : 2
Path.readlink() : 1
"os.readlink()"): : 1
Path('mylink') : 2
p.symlink_to('setup.py') : 2
p.readlink() : 1
Path.rename(target) : 1
Path('foo') : 1
p.open('w').write('some : 1
text') : 1
Path('bar') : 1
p.rename(target) : 1
PosixPath('bar') : 1
target.open().read() : 1
Path.replace(target) : 1
Path.absolute() : 1
Path('tests') : 1
PosixPath('tests') : 1
p.absolute() : 1
PosixPath('/home/antoine/pathlib/tests') : 1
Path.resolve(strict=False) : 1
Path() : 1
PosixPath('.') : 1
p.resolve() : 3
so): : 1
Path('docs/../setup.py') : 1
PosixPath('/home/antoine/pathlib/setup.py') : 2
(pre-3.6 : 1
strict) : 1
Path.rglob(pattern) : 1
""**/"" : 1
*pattern*: : 1
sorted(Path().rglob("*.py")) : 1
"pathlib.Path.rglob" : 1
Path.rmdir() : 1
Path.samefile(other_path) : 1
*other_path* : 1
Path('spam') : 1
Path('eggs') : 1
p.samefile(q) : 1
p.samefile('spam') : 1
Path.symlink_to(target : 1
target_is_directory=False) : 1
*target_is_directory* : 4
*target_is_directory*'s : 1
p.lstat().st_size : 1
"os.symlink()"'s : 1
Path.hardlink_to(target) : 1
"os.link()"'s : 1
Path.link_to(target) : 1
"Path.symlink_to()" : 3
"Path.hardlink_to()" : 3
"Path.link_to()" : 1
Path.touch(mode=0o666 : 1
exist_ok=True) : 1
Path.unlink(missing_ok=False) : 1
"Path.rmdir()" : 2
"rm : 1
-f" : 1
Path.write_bytes(data) : 1
Path.write_text(data : 1
"PurePath"/"Path" : 1
"os.path.abspath()" : 3
"Path.absolute()" : 3
"os.path.relpath()" : 3
"PurePath.relative_to()" : 3
+--------------------------------------+-----------------------------------+ : 28
|======================================|===================================| : 1
"Path.rename()" : 1
"Path.replace()" : 1
"os.rmdir()" : 3
"Path.unlink()" : 1
"Path.cwd()" : 1
"Path.exists()" : 1
"Path.iterdir()" : 1
"Path.is_dir()" : 1
"os.path.isfile()" : 1
"Path.is_file()" : 1
"os.path.islink()" : 2
"Path.is_symlink()" : 1
"Path.readlink()" : 1
"Path.owner()" : 1
"Path.group()" : 1
"os.path.isabs()" : 1
"PurePath.is_absolute()" : 1
"PurePath.joinpath()" : 1
"os.path.basename()" : 1
"PurePath.name" : 1
"os.path.dirname()" : 1
"PurePath.parent" : 1
"PurePath.stem" : 1
"PurePath.suffix" : 1
Lib/io.py : 1
I/O: : 1
I/O* : 3
Independent : 1
(seeking : 1
open("myfile.txt" : 1
In-memory : 2
io.StringIO("some : 1
data") : 1
*buffered : 1
I/O*) : 2
open("myfile.jpg" : 2
io.BytesIO(b"some : 1
\x00\x01") : 1
*unbuffered : 1
building-block : 1
disabled: : 3
buffering=0) : 1
("locale.getencoding()") : 1
Markdown : 1
open("README.md") : 1
686** : 2
3.15 : 2
"encoding=None" : 2
"text_encoding()" : 2
"encoding="utf-8"") : 1
blksize : 1
"os.stat()") : 1
io.open(file : 1
newline=None : 7
closefd=True : 3
opener=None) : 3
io.open_code(path) : 1
"open_code(path)" : 1
"open(path : 1
'rb')" : 1
io.text_encoding(encoding : 1
stacklevel=2 : 2
""locale"" : 2
read_text(path : 1
encoding=None): : 1
io.text_encoding(encoding) : 1
open(path : 2
"read_text()" : 1
io.BlockingIOError : 1
io.UnsupportedOperation : 1
"IOBase" : 20
"UnsupportedOperation" : 4
"FileIO" : 4
("RawIOBase") : 1
("BufferedIOBase") : 1
+---------------------------+--------------------+--------------------------+----------------------------------------------------+ : 5
Inherits : 2
Stub : 1
Mixin : 4
|===========================|====================|==========================|====================================================| : 1
"fileno" : 5
"truncate" : 1
"__next__" : 3
"seekable" : 1
"tell" : 1
"writable" : 1
"writelines" : 1
"readinto" : 2
Inherited : 7
"readall" : 1
"detach" : 2
"read1" : 1
"readinto1" : 1
"newlines" : 1
io.IOBase : 1
selectively; : 1
seeked : 1
"UnsupportedOperation") : 1
inquiries) : 1
(yielding : 2
finished---even : 2
open('spam.txt' : 1
file.write('Spam : 1
eggs!') : 1
Flush : 4
isatty() : 2
terminal/tty : 1
readable() : 2
readline(size=- : 2
"b'\n'" : 1
terminator(s) : 1
readlines(hint=- : 1
*hint* : 3
bytes/characters) : 1
"file.readlines()" : 1
seek(offset : 3
whence=SEEK_SET : 2
default); : 4
"SEEK_*" : 2
seekable() : 1
truncate(size=None : 1
zero-filled) : 1
zero-fill : 1
writable() : 2
writelines(lines : 1
io.RawIOBase : 1
"IOBase": : 9
"readall()" : 1
readinto(b : 2
pre-allocated : 3
write(b : 3
io.BufferedIOBase : 1
(respectively) : 7
detach() : 3
imminent : 1
blocking-mode : 3
read1(size=- : 3
"readinto()") : 2
reached) : 1
readinto1(b : 2
io.FileIO(name : 1
(*name* : 1
io.BytesIO(initial_bytes=b'') : 1
*initial_bytes* : 1
getbuffer() : 1
buffer: : 2
io.BytesIO(b"abcdef") : 1
b.getbuffer() : 1
view[2:4] : 1
b"56" : 1
b.getvalue() : 1
b'ab56ef' : 1
getvalue() : 2
io.BufferedReader(raw : 1
buffer_size=DEFAULT_BUFFER_SIZE) : 3
*raw* : 11
*buffer_size* : 6
"DEFAULT_BUFFER_SIZE" : 4
peek(size=0 : 1
io.BufferedWriter(raw : 1
"flush()" : 17
io.BufferedRandom(raw : 1
io.BufferedRWPair(reader : 1
buffer_size=DEFAULT_BUFFER_SIZE : 1
streams---one : 1
*reader* : 2
*writer* : 2
"BufferedIOBase"'s : 1
writer; : 1
io.TextIOBase : 1
"TextIOBase.tell()" : 1
no-operation : 1
unsupported) : 2
write(s : 1
io.TextIOWrapper(buffer : 1
line_buffering=False : 1
write_through=False) : 1
loss.) : 1
"'?'") : 2
sequences) : 1
untranslated : 4
*line_buffering* : 2
line_buffering : 1
write_through : 1
reconfigure(* : 1
line_buffering=None : 1
write_through=None) : 1
Reconfigure : 1
io.StringIO(initial_value='' : 1
newline='\n') : 1
*initial_value* : 1
"w+" : 1
"a+" : 1
"f.seek(0 : 1
io.SEEK_END)" : 1
reposition : 2
Newlines : 1
output.write('First : 1
line.\n') : 1
print('Second : 1
file=output) : 1
line.\n' : 1
output.getvalue() : 1
.getvalue() : 1
io.IncrementalNewlineDecoder : 1
"codecs.IncrementalDecoder" : 1
inefficiency : 1
"TextIOWrapper.tell()" : 1
"TextIOWrapper.seek()" : 1
reconstruction : 1
"read(2)" : 1
"BufferedRWPair") : 2
lock; : 6
Lib/curses : 1
open- : 1
*character* : 1
string.Whenever : 1
*character : 1
Editable : 1
**Emacs**-like : 2
Tools/demo/ : 1
curses.error : 1
"A_NORMAL" : 2
curses.baudrate() : 1
reasons; : 1
curses.beep() : 1
curses.can_change_color() : 1
"rare" : 1
(interrupt : 1
"raw()" : 1
"cbreak()" : 1
curses.color_content(color_number) : 1
intensity : 1
(RGB) : 1
*color_number* : 2
"COLORS : 3
R,G,B : 2
(maximum : 4
curses.color_pair(pair_number) : 1
"A_*" : 1
"pair_number()" : 1
curses.curs_set(visibility) : 1
*visibility* : 1
"visible" : 1
"very : 1
visible" : 1
curses.def_prog_mode() : 1
"program" : 3
(Its : 3
curses.) : 1
"reset_prog_mode()" : 1
curses.def_shell_mode() : 1
capabilities.) : 1
"reset_shell_mode()" : 1
curses.delay_output(ms) : 1
*ms* : 2
curses.doupdate() : 1
ground : 1
"doupdate()"; : 1
De-initialize : 1
curses.erasechar() : 1
one-byte : 2
curses.filter() : 1
"cup" : 1
"cud" : 1
"cud1" : 1
"cuu1" : 1
"cuu" : 1
"vpa" : 1
disabled; : 1
"cr" : 1
character-at-a-time : 1
curses.flash() : 1
Flash : 1
'visible : 1
bell' : 1
"beep()" : 1
curses.flushinp() : 1
typeahead : 5
curses.getmouse() : 1
"KEY_MOUSE" : 3
5-tuple : 2
bstate)" : 1
event's : 1
(*z* : 1
unused.) : 1
*bstate* : 1
"BUTTONn_PRESSED" : 1
"BUTTONn_RELEASED" : 1
"BUTTONn_CLICKED" : 1
"BUTTONn_DOUBLE_CLICKED" : 1
"BUTTONn_TRIPLE_CLICKED" : 1
"BUTTON_SHIFT" : 1
"BUTTON_CTRL" : 1
"BUTTON_ALT" : 1
curses.getsyx() : 1
"(y : 15
"leaveok" : 2
"(-1 : 4
-1)" : 6
curses.getwin(file) : 1
"putwin()" : 1
curses.has_colors() : 1
colors; : 2
curses.has_extended_color_support() : 1
xterm- : 1
256color) : 1
curses.has_ic() : 1
insert- : 2
delete-character : 1
curses.has_il() : 1
delete-line : 1
curses.has_key(ch) : 1
curses.halfdelay(tenths) : 1
half-delay : 2
*tenths* : 2
"255" : 1
"nocbreak()" : 1
curses.init_color(color_number : 1
components) : 1
"init_color()" : 1
curses.init_pair(pair_number : 1
fg : 1
bg) : 1
color-pair : 5
*pair_number* : 2
"COLOR_PAIRS : 2
wired : 1
*fg* : 1
*bg* : 1
color- : 1
refreshed : 1
curses.is_term_resized(nlines : 1
ncols) : 6
"resize_term()" : 3
curses.isendwin() : 1
deinitialized) : 1
curses.keyname(k) : 1
control-key : 1
two-byte : 1
("b'^'") : 1
alt-key : 1
(128--255) : 1
"b'M-'" : 1
curses.killchar() : 1
curses.longname() : 1
terminfo : 8
curses.meta(flag) : 1
curses.mouseinterval(interval) : 1
elapse : 1
curses.mousemask(mousemask) : 1
"(availmask : 1
oldmask)" : 1
*availmask* : 1
*oldmask* : 1
curses.napms(ms) : 1
Sleep : 6
curses.newpad(nlines : 1
*pminrow* : 3
*pmincol* : 3
*sminrow* : 5
*smincol* : 5
*smaxrow* : 2
*smaxcol*; : 1
clipping : 1
curses.newwin(nlines : 2
ncols : 4
left-upper : 1
"(begin_y : 3
begin_x)" : 3
height/width : 1
*nlines*/*ncols* : 1
curses.nl() : 1
line-feed : 1
Leave : 4
Echoing : 1
curses.nonl() : 1
newline/return : 1
"addch('\n')" : 1
screen) : 1
little; : 1
curses.noqiflush() : 1
"noqiflush()" : 3
"INTR" : 1
"QUIT" : 6
"SUSP" : 1
curses.noraw() : 1
curses.pair_content(pair_number) : 1
"(fg : 1
bg)" : 1
curses.pair_number(attr) : 1
curses.putp(str) : 1
"tputs(str : 1
putchar)"; : 1
"putp()" : 1
curses.qiflush([flag]) : 1
curses.raw() : 1
off; : 1
curses.reset_prog_mode() : 1
"def_prog_mode()" : 1
curses.reset_shell_mode() : 1
"def_shell_mode()" : 1
curses.resetty() : 1
"savetty()" : 1
curses.resize_term(nlines : 1
Backend : 1
"resizeterm()" : 1
blank-fills : 1
curses.resizeterm(nlines : 1
curses.savetty() : 1
"resetty()" : 1
curses.get_escdelay() : 1
"set_escdelay()" : 1
curses.set_escdelay(ms) : 1
curses.get_tabsize() : 1
"set_tabsize()" : 1
curses.set_tabsize(size) : 1
curses.setsyx(y : 1
curses.setupterm(term=None : 1
fd=- : 1
*term* : 1
"TERM" : 3
curses.start_color() : 1
(black : 1
magenta : 1
cyan : 1
white) : 1
"COLORS" : 1
"COLOR_PAIRS" : 1
color-pairs : 1
curses.termattrs() : 1
curses.termname() : 1
curses.tigetflag(capname) : 1
*capname* : 6
curses.tigetnum(capname) : 1
curses.tigetstr(capname) : 1
"string : 3
capability" : 1
curses.tparm(str[ : 1
"tparm(tigetstr("cup") : 1
"b'\033[6;4H'" : 1
curses.typeahead(fd) : 1
"line-breakout : 1
optimization" : 1
doupdate : 1
curses.unctrl(ch) : 1
"b'^C'" : 1
curses.ungetch(ch) : 1
curses.update_lines_cols() : 1
curses.unget_wch(ch) : 1
curses.ungetmouse(id : 1
bstate) : 1
curses.use_env(flag) : 1
newterm : 1
curses.use_default_colors() : 1
"init_pair(x : 1
curses.wrapper(func : 1
curses-using : 1
re-raising : 1
'stdscr' : 1
cooked : 10
window.addch(ch[ : 1
attr]) : 17
window.addch(y : 1
ch[ : 2
Paint : 4
painted : 1
subwindow : 5
"curses.error" : 3
window.addnstr(str : 1
n[ : 6
window.addnstr(y : 1
window.addstr(str[ : 1
window.addstr(y : 1
str[ : 2
SegFaults : 1
ncurses-6.1-20190511 : 1
stuck : 1
window.attroff(attr) : 1
"background" : 3
window.attron(attr) : 1
window.attrset(attr) : 1
window.bkgd(ch[ : 1
window.bkgdset(ch[ : 1
(OR'ed) : 1
insert/delete : 3
line/character : 1
window.border([ls[ : 1
rs[ : 1
ts[ : 1
bs[ : 1
tl[ : 1
tr[ : 1
bl[ : 1
br]]]]]]]]) : 1
Draw : 5
border : 4
border; : 1
+-------------+-----------------------+-------------------------+ : 9
|=============|=======================|=========================| : 1
*ls* : 2
"ACS_VLINE" : 3
*rs* : 2
*ts* : 2
"ACS_HLINE" : 3
*bs* : 2
Bottom : 1
*tl* : 1
Upper-left : 1
*tr* : 1
Upper-right : 1
"ACS_URCORNER" : 2
*bl* : 1
Bottom-left : 1
"ACS_LLCORNER" : 2
*br* : 1
Bottom-right : 1
"ACS_LRCORNER" : 2
window.box([vertch : 1
horch]) : 1
"border()" : 1
*vertch* : 1
*horch* : 1
window.chgat(attr) : 1
window.chgat(num : 1
window.chgat(y : 2
"touchline()" : 1
redisplayed : 1
window.clear() : 1
"erase()" : 1
repainted : 1
window.clearok(flag) : 1
window.clrtobot() : 1
Erase : 2
"clrtoeol()" : 1
window.clrtoeol() : 1
window.cursyncup() : 1
window.delch([y : 1
x]) : 5
window.deleteln() : 1
window.derwin(begin_y : 1
window.derwin(nlines : 1
"derive : 1
"derwin()" : 1
"subwin()" : 1
*begin_y* : 1
*begin_x* : 1
window.echochar(ch[ : 1
window.enclose(y : 1
screen-relative : 2
window.encoding : 1
(Unicode : 3
"window.subwin()" : 1
window.erase() : 1
window.getbegyx() : 1
co-ordinates : 1
window.getbkgd() : 1
character/attribute : 1
window.getch([y : 1
no-delay : 3
window.get_wch([y : 1
window.getkey([y : 1
window.getmaxyx() : 1
window.getparyx() : 1
window.getstr(n) : 1
window.getstr(y : 2
window.getyx() : 1
window.hline(ch : 1
window.hline(y : 1
window.idcok(flag) : 1
terminal; : 3
window.idlok(flag) : 1
insertion/deletion : 1
window.immedok(flag) : 1
refreshed; : 1
degrade : 1
wrefresh : 1
window.inch([y : 1
window.insch(ch[ : 1
window.insch(y : 1
window.insdelln(nlines) : 1
*nlines* : 5
window.insertln() : 1
window.insnstr(str : 1
window.insnstr(y : 1
window.insstr(str[ : 1
window.insstr(y : 1
window.instr([n]) : 1
window.instr(y : 1
x[ : 1
n]) : 1
"instr()" : 1
NUL) : 1
window.is_linetouched(line) : 1
"refresh()"; : 2
window.is_wintouched() : 1
window.keypad(flag) : 1
(keypad : 1
window.leaveok(flag) : 1
"cursor : 2
position." : 1
position" : 1
window.move(new_y : 1
new_x) : 2
"(new_y : 2
new_x)" : 2
window.mvderwin(y : 1
window.mvwin(new_y : 1
window.nodelay(flag) : 1
window.notimeout(flag) : 1
window.noutrefresh() : 1
window.overlay(destwin[ : 1
sminrow : 3
smincol : 3
dminrow : 2
dmincol : 2
dmaxrow : 2
dmaxcol]) : 2
Overlay : 1
*destwin* : 4
"overlay()" : 1
upper- : 2
window.overwrite(destwin[ : 1
Overwrite : 1
"overwrite()" : 1
window.putwin(file) : 1
"getwin()" : 1
window.redrawln(beg : 1
Indicate : 6
*beg* : 1
window.redrawwin() : 1
Touch : 3
window.refresh([pminrow : 1
pmincol : 1
smaxrow : 1
smaxcol]) : 1
(sync : 1
drawing/deleting : 1
"newpad()" : 1
*smaxcol* : 1
rectangles : 2
window.resize(nlines : 1
Reallocate : 1
rendition : 1
"bkgdset()") : 1
window.scroll([lines=1]) : 1
*lines* : 5
window.scrollok(flag) : 1
"idlok()" : 1
window.setscrreg(top : 1
*top* : 3
*bottom* : 1
window.standend() : 1
standout : 1
window.standout() : 1
*A_STANDOUT* : 1
window.subpad(begin_y : 1
window.subpad(nlines : 1
sub-window : 3
width/height : 2
*ncols*/*nlines* : 2
window.subwin(begin_y : 1
window.subwin(nlines : 1
window.syncdown() : 1
window.syncok(flag) : 1
"syncup()" : 1
window.syncup() : 1
window.timeout(delay) : 1
window.touchline(start : 1
count[ : 1
changed]) : 1
Pretend : 2
*changed* : 1
(*changed*"=True") : 1
(*changed*"=False") : 1
window.touchwin() : 1
window.untouchwin() : 1
window.vline(ch : 1
window.vline(y : 1
curses.ERR : 1
"ERR" : 1
curses.OK : 1
"napms()" : 1
curses.version : 1
curses.ncurses_version : 1
*patch* : 1
"curses.ncurses_version[0]" : 1
"curses.ncurses_version.major" : 1
+--------------------+---------------------------------+ : 23
|====================|=================================| : 2
"A_ALTCHARSET" : 1
Bold : 1
Dim : 1
"A_INVIS" : 1
Invisible : 1
"A_ITALIC" : 2
Italic : 1
"A_PROTECT" : 1
Protected : 1
Standout : 1
Underline : 1
"A_HORIZONTAL" : 1
"A_LEFT" : 1
"A_LOW" : 1
"A_RIGHT" : 1
"A_TOP" : 1
"A_VERTICAL" : 1
"A_CHARTEXT" : 2
Bit-mask : 5
"A_ATTRIBUTES" : 1
"A_COLOR" : 1
"KEY_" : 1
keycaps : 1
+---------------------+----------------------------------------------+ : 95
|=====================|==============================================| : 1
"KEY_MIN" : 1
Minimum : 4
"KEY_BREAK" : 1
(unreliable) : 5
"KEY_DOWN" : 3
Down-arrow : 1
Up-arrow : 1
"KEY_LEFT" : 3
Left-arrow : 1
"KEY_RIGHT" : 3
Right-arrow : 1
"KEY_HOME" : 1
(upward+left : 1
arrow) : 1
"KEY_BACKSPACE" : 2
"KEY_F0" : 1
"KEY_Fn" : 1
"KEY_DL" : 1
"KEY_IL" : 1
"KEY_DC" : 1
"KEY_IC" : 1
"KEY_EIC" : 1
"KEY_CLEAR" : 1
"KEY_EOS" : 1
"KEY_EOL" : 1
"KEY_SF" : 1
"KEY_SR" : 1
(reverse) : 1
"KEY_NPAGE" : 1
"KEY_PPAGE" : 1
"KEY_STAB" : 1
"KEY_CTAB" : 1
"KEY_CATAB" : 1
"KEY_ENTER" : 1
"KEY_SRESET" : 1
(partial) : 1
"KEY_RESET" : 1
"KEY_PRINT" : 1
"KEY_LL" : 1
(lower : 3
"KEY_A1" : 1
"KEY_A3" : 1
"KEY_B2" : 1
"KEY_C1" : 1
"KEY_C3" : 1
"KEY_BTAB" : 1
"KEY_BEG" : 1
Beg : 2
(beginning) : 2
"KEY_CANCEL" : 1
"KEY_CLOSE" : 1
"KEY_COMMAND" : 1
(command) : 1
"KEY_COPY" : 1
"KEY_CREATE" : 1
"KEY_END" : 1
"KEY_EXIT" : 1
"KEY_FIND" : 1
"KEY_HELP" : 1
"KEY_MARK" : 1
"KEY_MESSAGE" : 1
"KEY_MOVE" : 1
"KEY_NEXT" : 1
"KEY_OPEN" : 1
"KEY_OPTIONS" : 1
"KEY_PREVIOUS" : 1
Prev : 2
(previous) : 1
"KEY_REDO" : 1
"KEY_REFERENCE" : 1
Ref : 1
(reference) : 1
"KEY_REFRESH" : 1
"KEY_REPLACE" : 1
"KEY_RESTART" : 1
"KEY_RESUME" : 1
"KEY_SAVE" : 1
"KEY_SBEG" : 1
Shifted : 28
"KEY_SCANCEL" : 1
"KEY_SCOMMAND" : 1
"KEY_SCOPY" : 1
"KEY_SCREATE" : 1
"KEY_SDC" : 1
"KEY_SDL" : 1
"KEY_SELECT" : 1
"KEY_SEND" : 1
"KEY_SEOL" : 1
"KEY_SEXIT" : 1
"KEY_SFIND" : 1
"KEY_SHELP" : 1
"KEY_SHOME" : 1
"KEY_SIC" : 1
"KEY_SLEFT" : 1
"KEY_SMESSAGE" : 1
"KEY_SMOVE" : 1
"KEY_SNEXT" : 1
"KEY_SOPTIONS" : 1
"KEY_SPREVIOUS" : 1
"KEY_SPRINT" : 1
"KEY_SREDO" : 1
"KEY_SREPLACE" : 1
"KEY_SRIGHT" : 1
"KEY_SRSUME" : 1
"KEY_SSAVE" : 1
"KEY_SSUSPEND" : 1
"KEY_SUNDO" : 1
"KEY_SUSPEND" : 1
"KEY_UNDO" : 1
Mouse : 1
"KEY_RESIZE" : 1
"KEY_MAX" : 1
Maximum : 10
("KEY_F1" : 1
"KEY_F2" : 1
"KEY_F3" : 1
"KEY_F4") : 1
twelve : 2
(older : 1
keyboards : 1
keys); : 1
standard: : 1
+--------------------+-------------+ : 7
Keycap : 1
|====================|=============| : 1
"Insert" : 1
KEY_IC : 1
"Delete" : 1
KEY_DC : 1
KEY_HOME : 1
KEY_END : 1
Up" : 1
KEY_PPAGE : 1
KEY_NPAGE : 1
VT100 : 1
crude : 1
+--------------------+--------------------------------------------+ : 44
ACS : 1
|====================|============================================| : 1
"ACS_BBSS" : 1
"ACS_BLOCK" : 1
"ACS_BOARD" : 1
"ACS_BSBS" : 1
"ACS_BSSB" : 1
"ACS_BSSS" : 1
tee : 9
"ACS_BTEE" : 1
"ACS_BULLET" : 1
bullet : 2
"ACS_CKBOARD" : 1
(stipple) : 1
"ACS_DARROW" : 1
"ACS_DEGREE" : 1
"ACS_DIAMOND" : 1
"ACS_GEQUAL" : 1
greater-than-or-equal-to : 1
"ACS_LANTERN" : 1
lantern : 1
"ACS_LARROW" : 1
"ACS_LEQUAL" : 1
less-than-or-equal-to : 1
"ACS_LTEE" : 1
"ACS_NEQUAL" : 1
not-equal : 2
"ACS_PI" : 1
plus-or-minus : 1
"ACS_PLUS" : 1
"ACS_RARROW" : 1
"ACS_RTEE" : 1
"ACS_S1" : 1
"ACS_S3" : 1
"ACS_S7" : 1
"ACS_S9" : 1
"ACS_SBBS" : 1
"ACS_SBSB" : 1
"ACS_SBSS" : 1
"ACS_SSBB" : 1
"ACS_SSBS" : 1
"ACS_SSSB" : 1
"ACS_SSSS" : 1
crossover : 1
"ACS_STERLING" : 1
sterling : 1
"ACS_TTEE" : 1
"ACS_UARROW" : 1
+---------------------+------------------------------+ : 9
|=====================|==============================| : 1
"COLOR_BLACK" : 1
"COLOR_BLUE" : 1
Blue : 1
"COLOR_CYAN" : 1
Cyan : 1
(light : 1
greenish : 1
blue) : 1
"COLOR_GREEN" : 1
"COLOR_MAGENTA" : 1
Magenta : 1
(purplish : 1
red) : 1
"COLOR_RED" : 1
"COLOR_WHITE" : 1
"COLOR_YELLOW" : 1
Yellow : 1
Navigator : 1
BBedit : 1
6.x : 1
FrameMaker : 1
programs) : 1
rectangle-drawing : 1
curses.textpad.rectangle(win : 1
uly : 1
ulx : 1
lry : 1
lrx) : 1
drawn; : 1
drawn : 12
VT100/IBM : 1
emulators) : 1
curses.textpad.Textbox(win) : 1
textbox : 3
*win* : 3
"stripspaces" : 3
edit([validator]) : 1
keystrokes : 3
*validator* : 1
do_command(ch) : 1
keystrokes: : 1
+--------------------+---------------------------------------------+ : 21
Keystroke : 2
|====================|=============================================| : 2
"Control-A" : 1
"Control-B" : 3
"Control-D" : 1
"Control-E" : 1
(stripspaces : 2
off) : 2
"Control-F" : 3
"Control-G" : 1
Terminate : 4
"Control-H" : 1
"Control-J" : 1
"Control-K" : 1
"Control-L" : 1
"Control-N" : 3
down; : 1
"Control-O" : 1
up; : 2
+--------------------------+--------------------+ : 6
|==========================|====================| : 1
"Control-h" : 1
wrapping) : 1
gather() : 2
stripspaces : 1
******************************************************** : 6
Lib/gettext.py : 1
class-based : 5
localizing : 5
monolingual : 1
gettext.bindtextdomain(domain : 1
localedir=None) : 1
*localedir* : 6
concretely : 2
".mo" : 12
Unix): : 1
"*localedir*/*language*/LC_MESSAGES/*domain*.mo" : 2
"LANGUAGE" : 8
"LC_MESSAGES" : 2
gettext.textdomain(domain=None) : 1
gettext.gettext(message) : 1
aliased : 3
"_()" : 17
gettext.dgettext(domain : 1
gettext.ngettext(singular : 1
*singular* : 6
*plural* : 4
Plural : 1
formulas : 1
gettext.dngettext(domain : 1
singular : 6
"ngettext()" : 4
gettext.pgettext(context : 1
gettext.dpgettext(domain : 1
gettext.npgettext(context : 1
gettext.dnpgettext(domain : 1
"dngettext()") : 1
unimplemented : 2
gettext.bindtextdomain('myapplication' : 1
'/path/to/my/language/directory') : 1
gettext.textdomain('myapplication') : 1
gettext.gettext : 1
print(_('This : 2
string.')) : 1
gettext.find(domain : 1
localedir=None : 3
languages=None : 2
all=False) : 1
*languages* : 4
gettext.translation(domain : 1
class_=None : 1
fallback=False) : 1
"*Translations" : 1
*class_* : 1
fallbacks : 1
cache; : 1
gettext.install(domain : 1
names=None) : 1
translated.')) : 1
"NullTranslations"; : 1
"NullTranslations": : 2
gettext.NullTranslations(fp=None) : 1
"protected" : 4
*_info* : 1
*_charset* : 6
*_fallback* : 1
"add_fallback()" : 1
"self._parse(fp)" : 1
_parse(fp) : 1
No-op : 1
add_fallback(fallback) : 1
gettext(message) : 2
Overridden : 4
ngettext(singular : 2
pgettext(context : 2
npgettext(context : 2
"npgettext()" : 2
"_info" : 2
charset() : 1
install(names=None) : 1
"'gettext'" : 1
"'ngettext'" : 1
"'pgettext'" : 2
"'npgettext'" : 2
"'lgettext'" : 1
"'lngettext'" : 1
gettext.translation('mymodule' : 1
t.gettext : 2
"_parse()" : 1
822**-style : 2
"key: : 2
"Project-Id- : 1
Version" : 1
"Content-Type" : 3
"charset" : 15
"_charset" : 1
"*gettext()" : 1
gettext.GNUTranslations : 1
fallback's : 4
plural-forms : 2
len(os.listdir('.')) : 1
GNUTranslations(somefile) : 1
cat.ngettext( : 1
%(num)d : 2
directory' : 3
{'num': : 1
n} : 1
Henstridge : 2
was: : 1
gettext.Catalog(domain : 1
localedir) : 1
cat.gettext : 1
print(_('hello : 1
world')) : 2
"Catalog()" : 1
Henstridge's: : 1
Localization : 1
habits : 1
multilingual : 1
language-specific : 2
I18N : 1
"_('...')" : 2
'mylog.txt' : 1
_('writing : 1
fp.write(message) : 1
"'writing : 1
message'" : 1
"'mylog.txt'" : 1
**xgettext** : 4
Babel : 1
"pybabel" : 1
François : 2
Pinard's : 1
**xpot** : 2
po-utils : 1
**msgfmt.py**; : 1
**xgettext**; : 1
"pygettext.py : 1
**msgfmt.py** : 1
**msgfmt** : 2
applications.) : 1
**pygettext** : 2
translators : 1
"<language-name>.po" : 1
machine-readable : 1
"/usr/share/locale" : 2
gettext.translation('spam' : 1
'/usr/share/locale') : 2
application- : 1
gettext.install('myapplication') : 1
gettext.install('myapplication' : 1
lang1 : 1
gettext.translation('myapplication' : 3
languages=['en']) : 1
lang2 : 1
languages=['fr']) : 1
lang3 : 1
languages=['de']) : 1
language1 : 1
lang1.install() : 1
lang2.install() : 1
lang3.install() : 1
['mollusk' : 1
'albatross' : 1
'rat' : 1
'penguin' : 1
animals: : 3
"animals" : 1
situation: : 1
_(message): : 1
[_('mollusk') : 1
_('albatross') : 1
_('rat') : 1
_('penguin') : 1
_('python') : 1
print(_(a)) : 2
(until : 6
N_(message): : 1
[N_('mollusk') : 1
N_('albatross') : 1
N_('rat') : 1
N_('penguin') : 1
N_('python') : 1
"N_()" : 3
"pybabel : 1
extract" : 1
arbitrary; : 1
"MarkThisStringForTranslation()" : 1
Ibáñez : 1
Palomar : 1
Pinard : 1
dependent; : 1
RedHat : 1
"/usr/lib/locale" : 1
"*sys.base_prefix*/share/locale" : 1
"sys.base_prefix") : 1
footnote : 2
Lib/mailcap.py : 1
"mail : 1
capability".) : 1
"video/mpeg; : 1
xmpeg : 1
*video/mpeg* : 1
**xmpeg** : 1
1524** : 2
Agent : 1
Information" : 1
mailcap.findmatch(caps : 1
MIMEtype : 1
key='view' : 1
filename='/dev/null' : 1
plist=[]) : 1
2-tuple; : 1
"os.system()") : 1
'view' : 1
'compose' : 1
'edit' : 1
"'/dev/null'" : 2
*plist* : 3
("'='") : 2
"%{foo}" : 1
"showpartial : 1
%{id} : 1
%{number} : 1
%{total}" : 1
"['id=1' : 1
'number=2' : 1
'total=3']" : 1
"'showpartial : 1
3'" : 1
"findmatch()" : 2
(symbols : 1
"findmatch" : 3
"@+=:,./-_" : 1
line.If : 1
*MIMEtype*) : 1
mailcap.getcaps() : 2
"$HOME/.mailcap" : 1
"/etc/mailcap" : 1
"/usr/etc/mailcap" : 1
"/usr/local/etc/mailcap" : 1
mailcap.findmatch(d : 1
'video/mpeg' : 1
filename='tmp1223') : 1
('xmpeg : 1
tmp1223' : 1
{'view': : 1
'xmpeg : 1
%s'}) : 1
Lib/codeop.py : 1
eval-print : 1
job: : 1
'">>>"' : 1
'"..."' : 1
Remembering : 1
former: : 1
codeop.compile_command(source : 1
filename='<input>' : 3
symbol='single') : 3
"'<input>'" : 2
("'single'" : 1
("'exec'") : 1
("'eval'") : 1
likely) : 1
codeop.Compile : 1
'remembers' : 2
codeop.CommandCompiler : 1
"compile_command()"; : 2
Lib/tracemalloc.py : 1
"25" : 1
"tracemalloc=25" : 1
tracemalloc.start() : 4
snapshot : 27
tracemalloc.take_snapshot() : 6
top_stats : 4
snapshot.statistics('lineno') : 1
print("[ : 2
top_stats[:10]: : 2
print(stat) : 2
suite: : 3
<frozen : 6
importlib._bootstrap>:716: : 2
size=4855 : 1
count=39328 : 1
average=126 : 1
importlib._bootstrap>:284: : 2
size=521 : 1
count=3199 : 1
average=167 : 1
/usr/lib/python3.4/collections/__init__.py:368: : 1
size=244 : 1
count=2315 : 1
average=108 : 1
/usr/lib/python3.4/unittest/case.py:381: : 1
size=185 : 1
count=779 : 1
average=243 : 1
/usr/lib/python3.4/unittest/case.py:402: : 1
size=154 : 1
count=378 : 1
average=416 : 1
/usr/lib/python3.4/abc.py:133: : 1
size=88.7 : 1
count=347 : 1
average=262 : 1
importlib._bootstrap>:1446: : 1
size=70.4 : 1
count=911 : 1
average=79 : 1
importlib._bootstrap>:1454: : 1
size=52.0 : 1
count=25 : 1
average=2131 : 1
<string>:5: : 2
size=49.7 : 1
count=148 : 1
average=344 : 1
/usr/lib/python3.4/sysconfig.py:411: : 1
size=48.0 : 1
count=1 : 2
average=48.0 : 1
"4855 : 1
KiB" : 10
(bytecode : 3
constants) : 3
"244 : 1
"Snapshot.statistics()" : 6
snapshot1 : 1
snapshot2 : 1
snapshot2.compare_to(snapshot1 : 1
'lineno') : 1
before/after : 4
size=8173 : 1
(+4428 : 1
count=71332 : 1
(+39369) : 1
average=117 : 1
/usr/lib/python3.4/linecache.py:127: : 1
size=940 : 1
(+940 : 1
count=8106 : 1
(+8106) : 1
average=119 : 1
/usr/lib/python3.4/unittest/case.py:571: : 1
size=298 : 1
(+298 : 1
count=589 : 1
(+589) : 1
average=519 : 1
size=1005 : 1
(+166 : 1
count=7423 : 1
(+1526) : 1
average=139 : 1
/usr/lib/python3.4/mimetypes.py:217: : 1
size=112 : 1
(+112 : 1
count=1334 : 1
(+1334) : 1
average=86 : 1
/usr/lib/python3.4/http/server.py:848: : 1
size=96.0 : 1
(+96.0 : 1
(+1) : 1
average=96.0 : 1
/usr/lib/python3.4/inspect.py:1465: : 1
size=83.5 : 1
(+83.5 : 1
count=109 : 1
(+109) : 1
average=784 : 1
/usr/lib/python3.4/unittest/mock.py:491: : 1
size=77.7 : 1
(+77.7 : 1
count=143 : 1
(+143) : 1
average=557 : 1
/usr/lib/python3.4/urllib/parse.py:476: : 1
size=71.8 : 1
(+71.8 : 1
count=969 : 1
(+969) : 1
average=76 : 1
/usr/lib/python3.4/contextlib.py:38: : 1
size=67.2 : 1
(+67.2 : 1
count=126 : 1
(+126) : 1
average=546 : 1
"8173 : 1
"4428 : 1
"940 : 1
"Snapshot.dump()" : 1
offline : 2
"Snapshot.load()" : 1
tracemalloc.start(25) : 1
snapshot.statistics('traceback') : 1
top_stats[0] : 1
print("%s : 2
%.1f : 4
(stat.count : 1
stat.size : 2
1024)) : 4
stat.traceback.format(): : 1
print(line) : 5
(traceback : 1
frames): : 1
903 : 1
870.1 : 1
"<frozen : 15
importlib._bootstrap>" : 14
716 : 1
1036 : 1
934 : 1
1068 : 2
619 : 2
1581 : 2
1614 : 2
"/usr/lib/python3.4/doctest.py" : 1
284 : 1
938 : 1
"/usr/lib/python3.4/test/support/__init__.py" : 1
1728 : 1
"/usr/lib/python3.4/test/test_pickletools.py" : 1
support.run_doctest(pickletools) : 1
"/usr/lib/python3.4/test/regrtest.py" : 4
1276 : 1
test_runner() : 1
976 : 1
display_failure=not : 1
verbose) : 1
761 : 1
match_tests=ns.match_tests) : 1
1563 : 1
"/usr/lib/python3.4/test/__main__.py" : 1
regrtest.main_in_temp_cwd() : 1
"/usr/lib/python3.4/runpy.py" : 2
73 : 4
exec(code : 1
run_globals) : 1
pkg_name) : 1
"870.1 : 1
recently: : 1
pdb" : 2
"<unknown>" : 1
display_top(snapshot : 1
key_type='lineno' : 1
limit=10): : 1
snapshot.filter_traces(( : 1
tracemalloc.Filter(False : 2
importlib._bootstrap>") : 1
"<unknown>") : 1
)) : 1
snapshot.statistics(key_type) : 1
print("Top : 1
lines" : 1
limit) : 1
enumerate(top_stats[:limit] : 1
stat.traceback[0] : 1
print("#%s: : 1
%s:%s: : 1
frame.filename : 1
frame.lineno : 1
linecache.getline(frame.filename : 1
frame.lineno).strip() : 1
top_stats[limit:] : 1
sum(stat.size : 2
(len(other) : 1
top_stats) : 1
print("Total : 1
(total : 1
display_top(snapshot) : 1
#1: : 1
Lib/base64.py:414: : 1
419.8 : 2
_b85chars2 : 1
[(a : 2
_b85chars : 1
_b85chars] : 1
#2: : 1
Lib/base64.py:306: : 1
_a85chars2 : 1
_a85chars : 1
_a85chars] : 1
#3: : 1
collections/__init__.py:368: : 1
293.6 : 1
exec(class_definition : 1
#4: : 1
Lib/abc.py:133: : 1
115.2 : 1
super().__new__(mcls : 1
#5: : 2
unittest/case.py:574: : 1
103.1 : 1
testMethod() : 1
#6: : 1
Lib/linecache.py:127: : 1
95.4 : 1
fp.readlines() : 1
#7: : 1
urllib/parse.py:476: : 1
71.8 : 1
_hexdig : 1
_hexdig} : 1
#8: : 1
62.0 : 1
#9: : 1
Lib/_weakrefset.py:37: : 1
60.0 : 1
#10: : 1
Lib/base64.py:142: : 1
59.8 : 1
_b32tab2 : 1
_b32tab : 1
_b32tab] : 1
6220 : 1
3602.8 : 1
5303.1 : 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
inefficiently : 1
"get_traced_memory()" : 2
"reset_peak()" : 4
large_sum : 1
sum(list(range(100000))) : 1
first_size : 1
first_peak : 1
tracemalloc.get_traced_memory() : 3
tracemalloc.reset_peak() : 2
small_sum : 1
sum(list(range(1000))) : 1
second_size : 1
second_peak : 1
print(f"{first_size=} : 1
{first_peak=}") : 1
print(f"{second_size=} : 1
{second_peak=}") : 1
first_size=664 : 1
first_peak=3592984 : 1
second_size=804 : 1
second_peak=29704 : 1
"small_sum" : 1
"second_peak" : 1
"large_sum" : 1
"first_peak") : 1
peaks : 1
optimise : 1
"sum(range(...))") : 1
tracemalloc.clear_traces() : 1
tracemalloc.get_object_traceback(obj) : 1
tracemalloc.get_traceback_limit() : 1
"(current: : 1
peak: : 1
"clear_traces()" : 2
Snapshots : 1
"take_snapshot()" : 4
meaningfully : 1
tracemalloc.get_tracemalloc_memory() : 1
tracemalloc.is_tracing() : 1
tracemalloc.start(nframe: : 1
*nframe* : 3
frame: : 1
"Traceback.total_nframe" : 3
"'traceback'" : 2
"Snapshot.compare_to()" : 2
"get_tracemalloc_memory()" : 1
("PYTHONTRACEMALLOC=NFRAME") : 1
"tracemalloc=NFRAME" : 1
"is_tracing()" : 2
"get_traceback_limit()" : 5
tracemalloc.stop() : 1
"Snapshot" : 4
"get_object_traceback()" : 1
tracemalloc.DomainFilter(inclusive: : 1
*inclusive* : 4
(include) : 2
"domain" : 10
(exclude) : 2
tracemalloc.Filter(inclusive: : 1
filename_pattern: : 1
lineno: : 1
all_frames: : 1
*filename_pattern* : 1
"'.pyc'" : 1
"'.py'" : 2
"Filter(True : 1
subprocess.__file__)" : 1
"Filter(False : 2
tracemalloc.__file__)" : 1
"<unknown>")" : 1
"'.pyo'" : 1
"filename_pattern" : 2
filename_pattern : 1
all_frames : 1
*all_frames* : 2
"Snapshot.traceback_limit" : 1
tracemalloc.Frame : 1
"Frame" : 6
tracemalloc.Snapshot : 1
compare_to(old_snapshot: : 1
key_type: : 1
cumulative: : 2
False) : 9
"StatisticDiff" : 3
*key_type* : 3
*cumulative* : 2
"StatisticDiff.size_diff" : 1
"StatisticDiff.size" : 1
"StatisticDiff.count_diff" : 1
"Statistic.count" : 2
"StatisticDiff.traceback" : 1
dump(filename) : 1
filter_traces(filters) : 1
"traces" : 1
*filters* : 16
load(filename) : 1
statistics(key_type: : 1
"Statistic" : 3
*key_type*: : 1
+-----------------------+--------------------------+ : 4
key_type : 1
|=======================|==========================| : 1
"'filename'" : 3
"'lineno'" : 2
cumulate : 1
"Statistic.size" : 1
"Statistic.traceback" : 1
"traces": : 1
Traces : 1
"Trace" : 4
tracemalloc.Statistic : 1
tracemalloc.StatisticDiff : 1
("int"): : 4
count_diff : 1
size_diff : 1
tracemalloc.Trace : 1
"Snapshot.traces" : 1
tracemalloc.Traceback : 1
""<unknown>"" : 1
"Trace.traceback" : 1
total_nframe : 1
format(limit=None : 1
most_recent_first=False) : 1
"traceback.format_tb()" : 1
print("Traceback : 1
first):") : 1
"test.py" : 3
Object() : 6
tracemalloc.get_object_traceback(f()) : 1
****************************************************************** : 2
Lib/graphlib.py : 1
graphlib.TopologicalSorter(graph=None) : 1
topologically : 1
vertices : 4
vertex : 7
acyclic : 2
*graph* : 1
"TopologicalSorter" : 1
"prepare()" : 7
"is_active()" : 1
"get_ready()" : 3
"done()" : 3
"TopologicalSorter.static_order()" : 1
{"D": : 1
{"B" : 1
"C"} : 1
"C": : 1
{"A"} : 1
{"A"}} : 1
TopologicalSorter(graph) : 1
tuple(ts.static_order()) : 1
('A' : 1
'D') : 1
topological_sorter : 1
TopologicalSorter() : 3
'topological_sorter'.. : 1
topological_sorter.prepare() : 1
topological_sorter.is_active(): : 1
topological_sorter.get_ready(): : 1
'task_queue' : 3
task_queue.put(node) : 1
'finalized_tasks_queue' : 1
'is_active()' : 1
'done()' : 2
'get()' : 1
(eventually) : 1
'get_ready()' : 1
finalized_tasks_queue.get() : 1
topological_sorter.done(node) : 1
add(node : 1
*predecessors) : 1
*predecessors* : 2
(*predecessors* : 1
prepare() : 1
"CycleError" : 2
is_active() : 2
Progress : 1
"TopologicalSorter.get_ready()" : 4
"TopologicalSorter.done()" : 2
ts.is_active(): : 1
ts: : 1
done(*nodes) : 1
*nodes* : 2
"TopologicalSorter.add()" : 1
get_ready() : 1
static_order() : 1
static_order(self): : 1
self.prepare() : 1
self.is_active(): : 1
node_group : 2
self.get_ready() : 1
self.done(*node_group) : 1
ts.add(3 : 1
ts.add(1 : 1
print([*ts.static_order()]) : 1
ts2 : 1
ts2.add(1 : 1
ts2.add(3 : 1
print([*ts2.static_order()]) : 1
"get_ready()") : 1
graphlib.CycleError : 1
"TopologicalSorter.prepare()" : 1
Lib/email/charset.py : 1
email.charset.Charset(input_charset=DEFAULT_CHARSET) : 1
outright : 1
*input_charset* : 8
"iso-8859-1" : 2
quoted- : 3
"euc-jp" : 2
"iso-2022-jp" : 1
input_charset : 1
*official* : 1
"latin_1" : 1
header_encoding : 1
"Charset.QP" : 2
quoted-printable) : 3
"Charset.BASE64" : 2
"Charset.SHORTEST" : 3
QP : 1
BASE64 : 1
body_encoding : 1
*header_encoding* : 2
*body_encoding* : 4
output_charset : 1
input_codec : 1
output_codec : 1
*output_charset* : 5
*input_codec* : 1
get_body_encoding() : 1
"quoted-printable" : 5
"QP" : 1
"BASE64" : 1
get_output_charset() : 1
header_encode(string) : 1
Header-encode : 2
(base64 : 2
header_encode_lines(string : 1
maxlengths) : 1
"header_encode()" : 1
*maxlengths* : 1
body_encode(string) : 1
Body-encode : 1
registries: : 1
email.charset.add_charset(charset : 1
header_enc=None : 1
body_enc=None : 1
output_charset=None) : 1
*header_enc* : 2
*body_enc* : 1
"SHORTEST" : 1
"Charset.convert()" : 1
set-to-codec : 1
"add_codec()" : 1
"CHARSETS" : 1
email.charset.add_alias(alias : 1
canonical) : 1
*alias* : 1
*canonical* : 1
"ALIASES" : 1
email.charset.add_codec(charset : 1
codecname) : 1
*codecname* : 1
"str"'s : 2
Lib/reprlib.py : 1
reprlib.aRepr : 1
"Repr" : 4
reprlib.repr(obj) : 1
"aRepr" : 1
size-limiting : 1
@reprlib.recursive_repr(fillvalue='...') : 1
recursive_repr : 1
Repr.fillvalue : 1
Repr.maxlevel : 1
Depth : 1
Repr.maxdict : 1
Repr.maxlist : 1
Repr.maxtuple : 1
Repr.maxset : 1
Repr.maxfrozenset : 1
Repr.maxdeque : 1
Repr.maxarray : 1
"maxdict" : 1
"maxarray" : 1
Repr.maxlong : 1
Digits : 3
"40" : 1
Repr.maxstring : 1
"normal" : 5
Repr.maxother : 1
"maxstring" : 1
"20" : 3
Repr.repr(obj) : 1
Repr.repr1(obj : 1
"repr1()" : 2
"level : 1
Repr.repr_TYPE(obj : 1
**TYPE** : 1
"'_'.join(type(obj).__name__.split())" : 1
"self.repr1(subobj : 1
"Repr.repr1()" : 1
MyRepr(reprlib.Repr): : 1
repr_TextIOWrapper(self : 1
obj.name : 2
{'<stdin>' : 1
'<stdout>' : 1
'<stderr>'}: : 1
repr(obj) : 1
aRepr : 1
MyRepr() : 1
print(aRepr.repr(sys.stdin)) : 1
'<stdin>' : 1
Lib/mailbox.py : 1
Maildir : 14
mbox : 22
MH : 15
Babyl : 13
MMDF : 7
mailbox.Mailbox : 1
set-like : 6
cautious : 3
Maildir; : 1
"unlock()" : 2
add(message) : 2
"email.message.Message" : 10
remove(key) : 2
__delitem__(key) : 2
discard(key) : 2
__setitem__(key : 2
format- : 1
iterkeys() : 1
itervalues() : 1
values() : 6
iteritems() : 1
items() : 7
(*key* : 3
*message*) : 3
get(key : 2
__getitem__(key) : 1
get_message(key) : 1
get_bytes(key) : 1
get_string(key) : 1
7bit : 1
get_file(key) : 6
__contains__(key) : 1
clear() : 8
pop(key : 1
popitem() : 2
update(arg) : 2
*key*-to-*message* : 1
lock() : 6
"ExternalClashError" : 1
unlock() : 6
mailbox.Maildir(dirname : 1
factory=None : 5
create=True) : 6
*dirname* : 5
directory-based : 3
qmail : 1
namely: : 3
"cur" : 15
"info" : 13
Folders : 2
Folder : 1
"Archived.2005.07" : 1
Maildir-like : 1
("'!'") : 1
mailbox.Maildir.colon : 1
"colon" : 1
list_folders() : 2
get_folder(folder) : 2
*folder* : 6
"NoSuchMailboxError" : 2
add_folder(folder) : 2
remove_folder(folder) : 2
"NotEmptyError" : 2
clean() : 1
mail-reading : 1
deserve : 5
remarks: : 5
coordinated : 1
inventor : 2
name- : 1
mailbox.mbox(path : 1
"From : 21
shortcomings : 1
*mboxo* : 1
">From : 3
used---dot : 4
tin : 3
mailbox.MH(path : 1
*folders*) : 1
sub-folders : 1
".mh_sequences" : 3
**mh**'s : 1
".mh_profile" : 1
**mh** : 4
get_sequences() : 2
set_sequences(sequences) : 2
Re-define : 1
"get_sequences()" : 1
pack() : 2
gaps : 2
Already-issued : 1
nmh : 1
**nmh** : 2
nmh: : 1
GPL-licensed : 1
mailbox.Babyl(path : 1
Rmail : 4
Control-Underscore : 2
("'\037'") : 2
Control-L : 1
("'\014'") : 1
abridged : 1
*labels* : 2
get_labels() : 2
contiguously : 1
mailbox.MMDF(path : 1
Multichannel : 2
Memorandum : 2
Facility : 2
Control-A : 1
("'\001'") : 1
mistaking : 1
mmdf : 1
newsreader : 1
mailbox.Message(message=None) : 1
"mailbox.Message" : 1
mailbox-format-specific : 1
copied; : 3
mailbox.MaildirMessage(message=None) : 1
Maildir-specific : 1
"new".) : 1
"2," : 1
"2,FR") : 1
"1," : 1
+--------+-----------+----------------------------------+ : 7
|========|===========|==================================| : 1
Draft : 1
Marked : 8
Passed : 1
Forwarded : 2
resent : 2
Replied : 6
Seen : 1
Trashed : 1
get_subdir() : 1
""S" : 1
msg.get_flags()" : 1
set_subdir(subdir) : 1
*subdir* : 2
get_flags() : 3
"'T'" : 1
set_flags(flags) : 3
add_flag(flag) : 3
flag(s) : 6
remove_flag(flag) : 3
Unset : 4
get_date() : 1
set_date(date) : 1
*date* : 7
get_info() : 1
set_info(info) : 1
*Status* : 7
*X-Status* : 7
+----------------------+------------------------------------------------+ : 10
Resulting : 17
|======================|================================================| : 2
+---------------------------------+----------------------------+ : 5
|=================================|============================| : 1
"unseen" : 20
"flagged" : 5
"replied" : 7
+---------------------------------+---------------------------------+ : 6
|=================================|=================================| : 1
"forwarded" : 2
"resent" : 1
"answered" : 7
"deleted" : 5
mailbox.mboxMessage(message=None) : 1
mbox-specific : 1
sender's : 4
Conventional : 2
+--------+------------+----------------------------------+ : 12
|========|============|==================================| : 2
MUA : 4
Answered : 2
get_from() : 2
set_from(from_ : 2
time_=None) : 2
*time_* : 4
"time.gmtime()") : 2
+-------------------+---------------------------------+ : 12
|===================|=================================| : 2
+---------------------+----------------------------+ : 10
|=====================|============================| : 2
+---------------------+-------------------------------+ : 10
|=====================|===============================| : 2
correspond: : 2
+-------------------+------------------------------+ : 12
|===================|==============================| : 2
mailbox.MHMessage(message=None) : 1
MH-specific : 1
groupings : 1
**nmh**) : 1
+------------+--------------------------------------------+ : 4
|============|============================================| : 1
unseen : 2
replied : 2
flagged : 4
add_sequence(sequence) : 1
remove_sequence(sequence) : 1
+----------------------+---------------------------------+ : 4
|======================|=================================| : 1
+----------------------+-------------------------------+ : 3
|======================|===============================| : 1
mailbox.BabylMessage(message=None) : 1
Babyl-specific : 1
+-------------+--------------------------------------------+ : 8
|=============|============================================| : 1
Copied : 1
answered : 1
Resent : 1
set_labels(labels) : 1
add_label(label) : 1
remove_label(label) : 1
get_visible() : 1
set_visible(visible) : 1
*visible* : 1
update_visible() : 1
*From* : 2
*Reply-To* : 1
*CC* : 1
+---------------------+---------------------------------+ : 5
|=====================|=================================| : 1
+--------------------+------------------------------------------------+ : 4
|====================|================================================| : 1
+--------------------+----------------------------+ : 3
|====================|============================| : 1
mailbox.MMDFMessage(message=None) : 1
MMDF-specific : 1
"mboxMessage": : 1
mailbox.Error : 1
mailbox.NoSuchMailboxError : 1
mailbox.NotEmptyError : 1
mailbox.ExternalClashError : 1
mailbox-related : 1
mailbox.FormatError : 1
subjects : 3
interesting: : 1
mailbox.mbox('~/mbox'): : 1
message['subject'] : 1
subject.lower(): : 1
print(subject) : 1
converted: : 1
mailbox.MH('~/Mail') : 1
destination.lock() : 1
mailbox.Babyl('~/RMAIL'): : 1
destination.add(mailbox.MHMessage(message)) : 1
destination.flush() : 1
destination.unlock() : 1
mailbox: : 1
email.errors : 1
list_names : 1
('python-list' : 1
'python-bugs') : 1
{name: : 1
mailbox.mbox('~/email/%s' : 1
list_names} : 1
inbox : 1
mailbox.Maildir('~/Maildir' : 1
inbox.iterkeys(): : 1
inbox[key] : 1
email.errors.MessageParseError: : 1
list_names: : 1
list_id : 2
message['list-id'] : 1
list_id: : 1
boxes[name] : 1
box.lock() : 1
box.add(message) : 1
box.flush() : 1
box.unlock() : 1
inbox.lock() : 1
inbox.discard(key) : 1
inbox.flush() : 1
inbox.unlock() : 1
boxes.itervalues(): : 1
box.close() : 1
******************************************************************************* : 1
"Message") : 1
*payload* : 7
5322** : 23
sub-messages : 2
*message/rfc822* : 9
walking : 6
pseudo-dictionary : 1
*Unix-From* : 1
"From_" : 1
*message/rfc822*) : 2
email.message.Message(policy=compat32) : 1
as_string(unixfrom=False : 2
maxheaderlen=0 : 1
policy=None) : 10
*max_line_length* : 2
Flattening : 4
modified) : 6
"flatten()" : 4
StringIO() : 3
Generator(fp : 1
mangle_from_=True : 2
maxheaderlen=60) : 2
g.flatten(msg) : 3
fp.getvalue() : 2
"BytesGenerator".) : 1
"str(msg)" : 2
as_bytes(unixfrom=False : 2
BytesIO : 2
BytesGenerator : 2
BytesIO() : 1
BytesGenerator(fp : 1
"bytes(msg)" : 2
is_multipart() : 2
sub-"Message" : 1
"is_multipart()" : 19
payload) : 2
"msg.get_content_maintype() : 4
'multipart'" : 4
"message/rfc822".) : 1
set_unixfrom(unixfrom) : 2
get_unixfrom() : 2
attach(payload) : 1
"set_payload()" : 4
"set_content()" : 12
"add" : 2
get_payload(i=None : 1
(undecoded) : 1
alphabet) : 1
("InvalidBase64PaddingDefect" : 1
"InvalidBase64CharactersDefect" : 2
8bit : 1
"get_content()" : 4
"iter_parts()" : 5
set_payload(payload : 1
charset=None) : 1
"set_charset()" : 1
set_charset(charset) : 1
*MIME-Version* : 8
*text/plain* : 10
*charset.output_charset* : 2
*charset.input_charset* : 1
Transfer-Encoding* : 3
transfer- : 1
"email.emailmessage.EmailMessage.set_content()" : 1
get_charset() : 1
re-added : 2
contravention : 1
RFCs) : 2
"unknown-8bit" : 6
__contains__(name) : 2
'message-id' : 3
myMessage: : 2
print('Message-ID:' : 2
myMessage['message-id']) : 2
__getitem__(name) : 3
"get_all()" : 2
__setitem__(name : 2
val) : 5
msg['subject'] : 4
'Python : 6
roolz!' : 2
__delitem__(name) : 2
get(name : 2
failobj=None) : 4
*failobj* : 14
get_all(name : 2
add_header(_name : 2
_value : 2
*_name* : 4
*_value* : 2
*primary* : 2
*_params* : 7
"key="value"" : 2
"(CHARSET : 3
LANGUAGE : 3
VALUE)" : 3
possibilities) : 2
"VALUE" : 4
msg.add_header('Content-Disposition' : 4
filename=('iso-8859-1' : 2
'Fußballer.ppt')) : 2
filename*="iso-8859-1''Fu%DFballer.ppt" : 1
replace_header(_name : 2
_value) : 2
get_content_type() : 2
*maintype/subtype* : 3
"get_default_type()" : 2
"get_content_type()" : 6
*multipart/digest* : 4
get_content_maintype() : 2
get_content_subtype() : 2
sub-content : 2
get_default_type() : 2
set_default_type(ctype) : 2
*ctype* : 2
get_params(failobj=None : 1
header='content-type' : 4
unquote=True) : 2
"get_param()" : 2
*unquote* : 2
get_param(param : 1
failobj=None : 1
*param* : 3
insensitively : 2
"email.utils.collapse_rfc2231_value()" : 1
rawparam : 1
msg.get_param('foo') : 1
email.utils.collapse_rfc2231_value(rawparam) : 1
3-tuple) : 1
set_param(param : 2
header='Content-Type' : 3
requote=True : 2
language='' : 2
replace=False) : 2
*requote* : 5
2231 : 1
del_param(param : 2
requote=True) : 3
set_type(type : 1
"make_" : 1
"add_" : 2
get_filename(failobj=None) : 2
Disposition* : 4
"email.utils.unquote()" : 4
get_boundary(failobj=None) : 2
"boundary" : 6
set_boundary(boundary) : 2
"set_boundary()" : 5
"HeaderParseError" : 2
"add_header()" : 3
get_content_charset(failobj=None) : 2
"get_charset()" : 1
get_charsets(failobj=None) : 2
*multipart* : 10
get_content_disposition() : 2
*inline* : 2
*attachment* : 2
2183** : 3
walk() : 2
all-purpose : 2
loop; : 3
msg.walk(): : 5
print(part.get_content_type()) : 2
multipart/report : 4
message/delivery-status : 4
"walk" : 4
"_structure" : 2
print(part.get_content_maintype() : 2
'multipart' : 2
part.is_multipart()) : 2
"multiparts" : 2
descends : 2
armor : 2
non-MIME : 3
*preamble* : 10
extra-armor : 2
discovers : 2
"email.parser" : 6
"email.generator" : 3
epilogue : 3
*epilogue* : 2
*defects* : 3
"email.errors" : 5
100%-pure : 1
"entry : 2
points" : 1
plugin : 1
prebuild : 1
********************************** : 6
Lib/importlib/resources/__init__.py : 1
leverages : 1
**do : 1
semantics.The : 1
"Loaders" : 1
"get_resource_reader(fullname)" : 2
importlib.resources.Package : 1
"Package" : 10
"__spec__.submodule_search_locations" : 1
"Union[str : 2
ModuleType]" : 1
importlib.resources.files(package) : 1
"Traversable" : 2
(think : 3
importlib.resources.as_file(traversable) : 1
"as_file" : 1
("read_text" : 1
drawback : 2
importlib.resources.Resource : 1
"path-like : 1
"Resource" : 1
os.PathLike]" : 1
importlib.resources.open_binary(package : 1
resource) : 6
*package*; : 5
sub-resources : 5
"typing.BinaryIO" : 1
files(package).joinpath(resource).open('rb') : 1
importlib.resources.open_text(package : 1
"typing.TextIO" : 1
files(package).joinpath(resource).open('r' : 1
encoding=encoding) : 1
importlib.resources.read_binary(package : 1
files(package).joinpath(resource).read_bytes() : 1
importlib.resources.read_text(package : 1
files(package).joinpath(resource).read_text(encoding=encoding) : 1
importlib.resources.path(package : 1
"as_file()": : 1
as_file(files(package).joinpath(resource)) : 1
importlib.resources.is_resource(package : 1
files(package).joinpath(resource).is_file() : 1
importlib.resources.contents(package) : 1
non-resources : 1
(resource.name : 1
files(package).iterdir() : 1
resource.is_file()) : 1
*********************************************************** : 3
Lib/asynchat.py : 1
"async_chat" : 8
"collect_incoming_data()" : 3
"found_terminator()" : 6
asynchat.async_chat : 1
message/response : 1
event-processing : 1
conserve : 1
ac_in_buffer_size : 1
"4096") : 2
ac_out_buffer_size : 1
(first-in : 8
first-out) : 10
*producers* : 1
"more()" : 3
(*i.e.* : 1
"handle_write()" : 1
"set_terminator()" : 2
async_chat.close_when_done() : 1
async_chat.collect_incoming_data(data) : 1
async_chat.discard_buffers() : 1
emergencies : 1
async_chat.found_terminator() : 1
async_chat.get_terminator() : 1
async_chat.push(data) : 1
channel's : 6
chunking : 1
async_chat.push_with_producer(producer) : 1
producer's : 1
async_chat.set_terminator(term) : 1
"term" : 1
+-------------+-----------------------------------------------+ : 4
|=============|===============================================| : 1
"http_request_handler" : 1
"Content-Length:" : 1
http_request_handler(asynchat.async_chat): : 1
log): : 1
asynchat.async_chat.__init__(self : 1
sock=sock) : 1
self.addr : 1
self.sessions : 1
self.ibuffer : 3
self.obuffer : 1
self.set_terminator(b"\r\n\r\n") : 1
self.reading_headers : 2
self.handling : 3
self.cgi_data : 2
self.log : 1
collect_incoming_data(self : 1
"""Buffer : 1
data""" : 1
self.ibuffer.append(data) : 1
found_terminator(self): : 1
self.reading_headers: : 1
self.parse_headers(b"".join(self.ibuffer)) : 1
self.op.upper() : 1
b"POST": : 1
clen : 1
self.headers.getheader("content-length") : 1
self.set_terminator(int(clen)) : 1
self.set_terminator(None) : 2
self.handling: : 1
over-send : 1
parse(self.headers : 1
b"".join(self.ibuffer)) : 1
Lib/email/mime/ : 1
non-legacy : 1
Ordinarily : 2
slicing-and-dicing : 1
attachments : 6
email.mime.base.MIMEBase(_maintype : 1
_subtype : 1
policy=compat32 : 5
Module: : 9
"email.mime.base" : 1
MIME-specific : 1
"MIMEBase" : 6
*_maintype* : 2
*image*) : 1
*_subtype* : 11
*plain* : 2
*gif*) : 1
"Message.add_header" : 1
policy) : 3
*_params*) : 1
email.mime.nonmultipart.MIMENonMultipart : 1
"email.mime.nonmultipart" : 1
"attach()" : 6
"MultipartConversionError" : 2
email.mime.multipart.MIMEMultipart(_subtype='mixed' : 1
boundary=None : 1
_subparts=None : 1
"email.mime.multipart" : 1
*mixed* : 1
*multipart/_subtype* : 1
serialized) : 4
*_subparts* : 1
"Message.attach" : 1
email.mime.application.MIMEApplication(_data : 1
_subtype='octet-stream' : 1
_encoder=email.encoders.encode_base64 : 3
"email.mime.application" : 1
"MIMENonMultipart" : 7
"MIMEApplication" : 2
*_data* : 1
*octet- : 1
stream* : 1
*_encoder* : 3
"email.encoders" : 3
email.mime.audio.MIMEAudio(_audiodata : 1
_subtype=None : 2
"email.mime.audio" : 1
"MIMEAudio" : 3
*audio* : 1
*_audiodata* : 1
au : 1
wav : 1
aiff : 1
email.mime.image.MIMEImage(_imagedata : 1
"email.mime.image" : 1
"MIMEImage" : 3
*image* : 1
*_imagedata* : 1
(jpeg : 1
png : 1
tiff : 1
rgb : 1
pbm : 1
pgm : 1
ppm : 1
rast : 1
xbm : 2
bmp : 1
webp : 1
exr : 1
attempted) : 1
email.mime.message.MIMEMessage(_msg : 1
_subtype='rfc822' : 1
policy=compat32) : 2
"email.mime.message" : 1
"MIMEMessage" : 1
*_msg* : 1
*rfc822* : 1
email.mime.text.MIMEText(_text : 1
_subtype='plain' : 1
_charset=None : 1
"MIMEText" : 2
*_text* : 1
constructor; : 2
"us- : 1
ascii" : 1
"set_payload" : 3
"reset" : 3
"Content-Transfer-Encoding" : 1
**************************************** : 9
Lib/pipes.py : 1
*pipeline* : 1
pipes.Template : 1
pipes.Template() : 1
t.append('tr : 1
a-z : 1
A-Z' : 1
'--') : 1
t.open('pipefile' : 1
f.write('hello : 1
open('pipefile').read() : 1
'HELLO : 1
WORLD' : 2
Template.reset() : 1
Template.clone() : 1
Template.debug(flag) : 1
-x" : 1
Template.append(cmd : 1
bourne : 1
last.) : 1
Template.prepend(cmd : 1
Template.open(file : 1
Template.copy(infile : 1
outfile) : 1
*infile* : 4
*outfile* : 3
Lib/tomllib : 1
(Tom's : 1
Obvious : 1
https://toml.io) : 1
Tomli-W : 1
style-preserving : 1
tomllib.load(fp : 1
parse_float=float) : 2
*parse_float* : 4
"float(num_str)" : 3
"decimal.Decimal") : 3
"TOMLDecodeError" : 2
tomllib.loads(s : 1
tomllib.TOMLDecodeError : 1
tomllib : 2
open("pyproject.toml" : 1
tomllib.load(f) : 1
toml_str : 1
python-version : 1
"3.11.0" : 1
python-implementation : 1
tomllib.loads(toml_str) : 1
+--------------------+----------------------------------------------------------------------------------------+ : 11
|====================|========================================================================================| : 1
(configurable : 1
*parse_float*) : 1
date-time : 2
("tzinfo" : 2
"datetime.timezone") : 1
****** : 1
Lib/asyncio/queues.py : 1
asyncio.Queue(maxsize=0) : 1
(FIFO) : 1
put()" : 1
"qsize()" : 1
empty() : 6
full() : 4
"maxsize" : 1
"maxsize=0" : 1
"full()" : 1
get_nowait() : 2
"QueueEmpty" : 1
Block : 9
unblocks : 3
put(item) : 2
put_nowait(item) : 1
"QueueFull" : 1
qsize() : 5
task_done() : 2
"put()" : 7
asyncio.PriorityQueue : 1
"Queue"; : 1
(lowest : 1
"(priority_number : 2
data)" : 4
asyncio.LifoQueue : 1
asyncio.QueueEmpty : 1
"get_nowait()" : 2
asyncio.QueueFull : 1
"put_nowait()" : 2
tasks: : 3
worker(name : 1
queue): : 2
"work : 2
sleep_for : 3
"sleep_for" : 1
asyncio.sleep(sleep_for) : 1
queue.task_done() : 1
print(f'{name} : 1
slept : 2
{sleep_for:.2f} : 1
seconds') : 3
"workload" : 1
asyncio.Queue() : 1
total_sleep_time : 2
random.uniform(0.05 : 1
queue.put_nowait(sleep_for) : 1
asyncio.create_task(worker(f'worker-{i}' : 1
queue)) : 1
tasks.append(task) : 1
started_at : 2
queue.join() : 1
total_slept_for : 1
task.cancel() : 2
asyncio.gather(*tasks : 1
return_exceptions=True) : 1
print('====') : 1
print(f'3 : 1
{total_slept_for:.2f} : 1
print(f'total : 1
{total_sleep_time:.2f} : 1
fixed-type : 1
development: : 1
breakdown : 2
bottlenecks : 1
Auditing : 1
intrusive : 1
Lib/zoneinfo : 1
First-party : 1
"datetime.replace" : 1
"datetime.astimezone": : 1
Datetimes : 1
daylight : 19
transitions : 2
intervention: : 1
dt_add : 1
timedelta(days=1) : 1
print(dt_add) : 1
2020-11-01 : 5
dt_add.tzname() : 1
'PST' : 1
zones : 10
induce : 1
transition) : 1
"fold=0" : 1
"fold=1" : 1
01:00:00-07:00 : 2
print(dt.replace(fold=1)) : 1
01:00:00-08:00 : 2
LOS_ANGELES : 1
ZoneInfo("America/Los_Angeles") : 1
dt_utc : 1
PDT : 2
print(dt_utc.astimezone(LOS_ANGELES)) : 1
print((dt_utc : 1
timedelta(hours=1)).astimezone(LOS_ANGELES)) : 1
"ZoneInfoNotFoundError" : 2
"ZoneInfo(key)" : 1
"TZPATH" : 12
"reset_tzpath()" : 4
"well- : 1
--with-tzpath") : 1
"PYTHONTZPATH" : 3
PYTHONTZPATH : 1
"os.pathsep"-separated : 2
implementation-defined; : 1
"InvalidTZPathWarning" : 1
"PYTHONTZPATH=""" : 1
TZ : 1
zones) : 1
zoneinfo.ZoneInfo(key) : 1
identically; : 1
barring : 1
"ZoneInfo.clear_cache()" : 1
ZoneInfo(key) : 2
up-level : 1
constructors: : 2
ZoneInfo.from_file(fobj : 1
key=None) : 18
pickling) : 1
ZoneInfo.no_cache(key) : 1
datetimes : 7
ZoneInfo.clear_cache(* : 1
only_keys=None) : 1
"only_keys" : 2
ZoneInfo.key : 1
"America/New_York" : 1
"Europe/Paris" : 1
"Asia/Tokyo") : 1
Projects : 1
CLDR : 2
Repository) : 2
"ZoneInfo.key" : 2
documentation): : 1
ZoneInfo("Pacific/Kwajalein") : 1
str(zone) : 1
'Pacific/Kwajalein' : 1
tzinfo=zone) : 1
f"{dt.isoformat()} : 1
[{dt.tzinfo}]" : 1
'2020-04-01T03:15:00+12:00 : 1
[Pacific/Kwajalein]' : 1
"ZoneInfo"'s : 1
constructed: : 2
"ZoneInfo(key)": : 1
deserialized : 7
"europe_berlin_pkl" : 1
"ZoneInfo("Europe/Berlin")" : 1
ZoneInfo("Europe/Berlin") : 2
pickle.loads(europe_berlin_pkl) : 1
"ZoneInfo.no_cache(key)": : 1
cache-bypassing : 1
"europe_berlin_pkl_nc" : 1
"ZoneInfo.no_cache("Europe/Berlin")" : 1
pickle.loads(europe_berlin_pkl_nc) : 1
"ZoneInfo.from_file(fobj : 1
key=None)": : 1
zoneinfo.available_timezones() : 1
"posix/" : 1
"right/" : 1
"posixrules" : 1
end-users; : 1
cautionary : 1
zoneinfo.reset_tzpath(to=None) : 1
("TZPATH") : 1
"reset_tzpath" : 1
zoneinfo.TZPATH : 1
long-lived : 3
zoneinfo.ZoneInfoNotFoundError : 1
zoneinfo.InvalidTZPathWarning : 1
Lib/unittest/mock.py : 1
assertion' : 1
'record : 1
replay' : 1
ProductionClass() : 6
thing.method : 1
MagicMock(return_value=3) : 1
thing.method(3 : 1
key='value') : 3
thing.method.assert_called_with(3 : 1
Mock(side_effect=KeyError('foo')) : 1
mock() : 27
side_effect(arg): : 2
values[arg] : 1
mock.side_effect : 6
mock('a') : 1
mock('b') : 1
mock('c') : 1
ends: : 4
@patch('module.ClassName2') : 1
@patch('module.ClassName1') : 1
test(MockClass1 : 1
MockClass2): : 1
module.ClassName1() : 1
module.ClassName2() : 1
MockClass1 : 1
module.ClassName1 : 1
MockClass2 : 2
module.ClassName2 : 1
MockClass1.called : 1
MockClass2.called : 1
test() : 19
*Python* : 2
applied) : 2
"module.ClassName1" : 1
first.With : 1
patch.object(ProductionClass : 2
'method' : 3
return_value=None) : 5
mock_method: : 2
thing.method(1 : 1
mock_method.assert_called_once_with(1 : 1
{'key': : 3
'value'} : 2
foo.copy() : 2
patch.dict(foo : 3
{'newkey': : 11
'newvalue'} : 7
clear=True): : 2
mock.__str__.return_value : 2
'foobarbaz' : 2
str(mock) : 4
mock.__str__.assert_called_with() : 1
pre-created : 2
(well : 2
Mock() : 33
mock.__str__ : 3
Mock(return_value='wheeeeee') : 1
'wheeeeee' : 1
auto-speccing : 4
Auto- : 1
speccing : 3
*autospec* : 11
Auto-speccing : 2
constructors) : 3
incorrectly: : 2
function(a : 1
c): : 4
mock_function : 1
create_autospec(function : 1
return_value='fishy') : 1
mock_function(1 : 1
'fishy' : 1
mock_function.assert_called_once_with(1 : 1
mock_function('wrong : 1
arguments') : 1
<lambda>() : 2
non-callable : 9
callable: : 2
"NonCallableMock" : 2
"NonCallableMagicMock" : 2
*new_callable* : 6
unittest.mock.Mock(spec=None : 1
side_effect=None : 2
return_value=DEFAULT : 2
wraps=None : 3
spec_set=None : 6
unsafe=False : 2
*spec*: : 1
*spec_set*: : 1
*spec_set* : 9
*side_effect*: : 1
"DEFAULT" : 8
*return_value*: : 1
"return_value" : 14
*unsafe*: : 1
*assert* : 1
*assret* : 1
*asert* : 1
*aseert* : 1
*assrt* : 1
"unsafe=True" : 1
*wraps*: : 1
*wraps* : 1
*name*: : 1
"configure_mock()" : 3
assert_called() : 1
mock.method() : 9
<Mock : 17
name='mock.method()' : 6
id='...'> : 46
mock.method.assert_called() : 1
assert_called_once() : 1
mock.method.assert_called_once() : 2
assert_called_with(*args : 1
mock.method(1 : 1
test='wow') : 2
mock.method.assert_called_with(1 : 1
assert_called_once_with(*args : 1
Mock(return_value=None) : 11
mock('foo' : 3
bar='baz') : 2
mock.assert_called_once_with('foo' : 2
mock('other' : 1
bar='values') : 2
mock.assert_called_once_with('other' : 1
'mock' : 2
assert_any_call(*args : 1
*ever* : 1
"assert_called_with()" : 7
"assert_called_once_with()" : 7
mock(1 : 9
arg='thing') : 2
mock('some' : 1
'thing' : 3
mock.assert_any_call(1 : 1
assert_has_calls(calls : 1
any_order=False) : 2
*any_order* : 4
mock(1) : 1
mock(2) : 1
mock(3) : 2
mock(4) : 1
[call(2) : 1
call(3)] : 2
mock.assert_has_calls(calls) : 1
[call(4) : 1
call(2) : 1
mock.assert_has_calls(calls : 1
any_order=True) : 2
assert_not_called() : 1
m.hello.assert_not_called() : 2
m.hello() : 1
reset_mock(* : 1
return_value=False : 1
side_effect=False) : 1
mock('hello') : 1
mock.called : 5
mock.reset_mock() : 1
"reset_mock()" : 1
mock_add_spec(spec : 1
spec_set=False) : 1
attach_mock(mock : 1
"method_calls" : 7
configure_mock(**kwargs) : 1
attrs : 4
{'method.return_value': : 4
'other.side_effect': : 4
KeyError} : 4
mock.configure_mock(**attrs) : 1
mock.other() : 3
mocks: : 2
Mock(some_attribute='eggs' : 2
**attrs) : 2
mock.some_attribute : 2
__dir__() : 1
"dir(some_mock)" : 2
"FILTER_DIR" : 2
_get_child_mock(**kw) : 1
call_count : 1
mock.call_count : 2
mock: : 9
mock.return_value : 4
'fish' : 11
mock.return_value.attribute : 1
sentinel.Attribute : 1
mock.return_value() : 1
name='mock()()' : 2
mock.return_value.assert_called_with() : 1
Mock(return_value=3) : 3
"return_value") : 1
("DEFAULT" : 1
API): : 1
Exception('Boom!') : 1
Boom : 2
side_effect(*args : 5
Mock(side_effect=side_effect) : 2
mock(-8) : 1
-7 : 4
Mock(side_effect=KeyError : 1
return_value=3) : 1
m() : 15
m.side_effect : 6
print(mock.call_args) : 1
mock.call_args : 5
mock(3 : 3
call(3 : 3
((3 : 2
4),) : 2
mock.call_args.args : 2
mock.call_args.kwargs : 2
key='fish' : 2
next='w00t!') : 3
'next': : 2
'w00t!'} : 1
"call_args" : 5
"call_args_list" : 8
call_args_list : 1
mock(key='fish' : 1
mock.call_args_list : 4
[call() : 2
call(key='fish' : 1
next='w00t!')] : 1
[() : 1
({'key': : 1
'w00t!'},)] : 1
method_calls : 1
*their* : 1
mock.property.method.attribute() : 1
name='mock.property.method.attribute()' : 1
mock.method_calls : 1
[call.method() : 3
call.property.method.attribute()] : 1
mock_calls : 1
mock.first(a=3) : 1
<MagicMock : 22
name='mock.first()' : 1
mock.second() : 1
name='mock.second()' : 1
int(mock) : 2
result(1) : 1
[call(1 : 6
call.first(a=3) : 1
call.second() : 1
call.__int__() : 1
call()(1)] : 1
mock.mock_calls : 7
mock.top(a=3).bottom() : 1
name='mock.top().bottom()' : 1
[call.top(a=3) : 1
call.top().bottom()] : 1
mock.mock_calls[-1] : 1
call.top(a=-1).bottom() : 1
Mock(spec=3) : 1
isinstance(mock : 4
spec: : 1
mock.__class__ : 1
unittest.mock.NonCallableMock(spec=None : 1
"spec_set" : 1
Mock(spec=SomeClass) : 2
SomeClass) : 3
Mock(spec_set=SomeClass()) : 1
MagicMock(attribute=3 : 1
other='fish') : 1
m.attribute : 1
m.other : 1
*spec_set*) : 2
Mock(spec=f) : 2
name='mock()' : 2
id='140161580456576'> : 2
mock.assert_called_with(1 : 1
mock.assert_called_with(a=1 : 2
"assert_has_calls()" : 3
"assert_any_call()" : 1
specced : 3
unittest.mock.PropertyMock(*args : 1
"PropertyMock" : 3
foo(self): : 2
'something' : 3
@foo.setter : 1
foo(self : 1
patch('__main__.Foo.foo' : 1
new_callable=PropertyMock) : 1
mock_foo: : 3
mock_foo.return_value : 2
'mockity-mock' : 1
this_foo : 1
Foo() : 3
print(this_foo.foo) : 1
this_foo.foo : 1
mockity-mock : 1
mock_foo.mock_calls : 1
call(6)] : 1
PropertyMock(return_value=3) : 1
type(m).foo : 1
m.foo : 1
p.assert_called_once_with() : 1
unittest.mock.AsyncMock(spec=None : 1
AsyncMock() : 11
asyncio.iscoroutinefunction(mock) : 1
inspect.isawaitable(mock()) : 1
"mock()" : 1
awaited: : 2
async_func(): : 1
MagicMock(async_func) : 1
spec='function' : 1
<coroutine : 2
AsyncMockMixin._mock_call : 1
"MagicMock") : 1
"Mock") : 1
ExampleClass: : 1
sync_foo(): : 1
async_foo(): : 1
a_mock : 1
AsyncMock(ExampleClass) : 1
a_mock.sync_foo : 1
name='mock.sync_foo' : 2
a_mock.async_foo : 1
<AsyncMock : 2
name='mock.async_foo' : 2
Mock(ExampleClass) : 1
mock.sync_foo : 1
mock.async_foo : 1
assert_awaited() : 1
main(coroutine_mock): : 1
coroutine_mock : 2
mock.assert_awaited() : 2
asyncio.run(main(coroutine_mock)) : 1
assert_awaited_once() : 1
mock.assert_awaited_once() : 1
mock.method.assert_awaited_once() : 1
Awaited : 2
assert_awaited_with(*args : 1
main(*args : 4
mock(*args : 4
asyncio.run(main('foo' : 4
bar='bar')) : 4
mock.assert_awaited_with('foo' : 1
bar='bar') : 5
mock.assert_awaited_with('other') : 1
mock('other') : 2
Actual: : 2
assert_awaited_once_with(*args : 1
mock.assert_awaited_once_with('foo' : 2
assert_any_await(*args : 1
asyncio.run(main('hello')) : 1
mock.assert_any_await('foo' : 1
mock.assert_any_await('other') : 1
assert_has_awaits(calls : 1
"await_args_list" : 3
awaits : 9
[call("foo") : 1
call("bar")] : 1
mock.assert_has_awaits(calls) : 2
Awaits : 1
[call('foo') : 2
call('bar')] : 2
asyncio.run(main('foo')) : 3
asyncio.run(main('bar')) : 3
assert_not_awaited() : 1
mock.assert_not_awaited() : 1
reset_mock(*args : 1
"await_count" : 1
"await_args" : 1
await_count : 1
mock.await_count : 2
await_args : 1
hasn’t : 1
awaited) : 2
"Mock.call_args" : 3
main(*args): : 2
mock(*args) : 2
mock.await_args : 3
call('foo') : 1
call('bar') : 1
await_args_list : 1
mock.await_args_list : 3
[call('foo')] : 1
Mock) : 1
MagicMock(side_effect=IndexError) : 1
m(1 : 4
m.mock_calls : 6
KeyError('Bang!') : 1
m('two' : 1
'three' : 4
'Bang!' : 1
call('two' : 1
side_effect(value): : 1
MagicMock(side_effect=side_effect) : 2
m(1) : 3
m(2) : 1
[call(1) : 3
call(2)] : 1
mock) : 1
"mock.return_value" : 1
"DEFAULT": : 1
m.return_value : 2
MagicMock(return_value=6) : 1
raised): : 1
MagicMock(side_effect=[1 : 1
(33 : 1
66) : 1
MagicMock(side_effect=iterable) : 1
hasattr(mock : 2
'm') : 2
mock.m : 1
mock.f : 2
"configure_mock()": : 1
mock.configure_mock(name='my_name') : 1
mock.name : 2
creation: : 3
MagicMock(return_value=None) : 5
parent.child1 : 1
parent.child2 : 1
child1(1) : 1
child2(2) : 1
parent.mock_calls : 2
[call.child1(1) : 1
call.child2(2)] : 1
"parenting" : 1
not_a_child : 2
MagicMock(name='not-a-child') : 1
mock.attribute : 1
mock.attribute() : 1
name='not-a-child()' : 1
"attach_mock()" : 2
thing1 : 1
thing2 : 1
patch('__main__.thing1' : 1
child1: : 1
patch('__main__.thing2' : 1
child2: : 1
parent.attach_mock(child1 : 1
'child1') : 1
parent.attach_mock(child2 : 1
'child2') : 1
child1('one') : 1
child2('two') : 1
[call.child1('one') : 1
call.child2('two')] : 1
unpatching : 1
unittest.mock.patch(target : 1
new=DEFAULT : 2
spec=None : 3
create=False : 4
autospec=None : 3
new_callable=None : 3
function/with : 1
"'package.module.ClassName'" : 1
decoration : 1
"spec=True" : 1
"spec_set=True" : 1
spec/spec_set : 1
'instance') : 1
"autospec=some_object" : 1
patchings : 1
"patch.TEST_PREFIX" : 6
"as"; : 1
"patch.dict(...)" : 1
"patch.multiple(...)" : 1
"patch.object(...)" : 1
@patch('__main__.SomeClass') : 1
function(normal_argument : 1
mock_class): : 1
print(mock_class : 1
function(None) : 1
Class: : 1
method(self): : 6
patch('__main__.Class') : 1
MockClass: : 1
MockClass.return_value : 1
instance.method.return_value : 2
Class() : 1
Class().method() : 1
patcher : 8
patch('__main__.Class' : 1
spec=True) : 1
MockClass : 1
patcher.start() : 8
MockClass() : 1
isinstance(instance : 1
Original) : 1
patcher.stop() : 2
patch('__main__.thing' : 3
new_callable=NonCallableMock) : 1
mock_thing: : 1
mock_thing : 3
thing() : 1
'NonCallableMock' : 1
print('Something') : 1
@patch('sys.stdout' : 1
new_callable=StringIO) : 1
test(mock_stdout): : 2
mock_stdout.getvalue() : 1
'Something\n' : 1
first='one' : 1
second='two') : 1
mock_thing.first : 1
mock_thing.second : 1
**config) : 1
mock_thing.method() : 1
mock_thing.other() : 1
"AttributeError": : 2
@patch('sys.non_existing_attribute' : 2
test(): : 11
sys.non_existing_attribute : 2
'non_existing_attribute' : 1
patch.object(target : 1
(*attribute*) : 1
(*target*) : 1
"patch.object()" : 9
honours : 3
@patch.object(SomeClass : 6
'class_method') : 2
test(mock_method): : 1
SomeClass.class_method(3) : 1
mock_method.assert_called_with(3) : 1
patch.dict(in_dict : 1
values=() : 1
clear=False : 3
*in_dict* : 2
*clear* : 1
@patch.dict(foo : 1
'newvalue'}) : 3
"'test'") : 1
wrap: : 1
@patch.dict('os.environ' : 1
TestSample(unittest.TestCase): : 1
test_sample(self): : 1
self.assertEqual(os.environ['newkey'] : 1
'newvalue') : 1
patched_foo: : 1
patched_foo : 3
patched_foo['spam'] : 1
patch.dict('os.environ' : 1
'newvalue'}): : 1
print(os.environ['newkey']) : 1
newvalue : 1
'newkey' : 1
mymodule : 4
mymodule.function.return_value : 1
patch.dict('sys.modules' : 4
mymodule=mymodule): : 1
mymodule.function('some' : 1
'args') : 1
Container: : 1
self.values : 1
self.values[name] : 3
iter(self.values) : 1
Container() : 1
thing['one'] : 3
patch.dict(thing : 1
one=2 : 1
two=3): : 1
thing['two'] : 1
list(thing) : 1
['one'] : 1
patch.multiple(target : 1
importing) : 1
patches: : 1
patch.multiple(settings : 1
FIRST_PATCH='one' : 1
SECOND_PATCH='two'): : 1
"patch.multiple()" : 9
@patch.multiple('__main__' : 2
thing=DEFAULT : 3
other=DEFAULT) : 3
test_function(thing : 1
isinstance(thing : 1
MagicMock) : 2
test_function() : 2
"patch" : 5
"patch()": : 1
@patch('sys.exit') : 1
test_function(mock_exit : 1
thing): : 1
'other' : 2
repr(other) : 1
repr(thing) : 1
repr(mock_exit) : 1
patch.multiple('__main__' : 1
repr(values['other']) : 1
repr(values['thing']) : 1
values['thing'] : 1
values['other'] : 1
"setUp" : 4
"patcher" : 2
"patcher.start" : 1
patch('package.module.ClassName') : 1
module.ClassName : 5
new_mock : 6
MyTest(unittest.TestCase): : 10
self.patcher1 : 1
patch('package.module.Class1') : 1
self.patcher2 : 1
patch('package.module.Class2') : 1
self.MockClass1 : 2
self.patcher1.start() : 1
self.MockClass2 : 2
self.patcher2.start() : 1
self.patcher1.stop() : 1
self.patcher2.stop() : 1
test_something(self): : 3
package.module.Class1 : 1
package.module.Class2 : 1
MyTest('test_something').run() : 1
"undone" : 2
fiddlier : 2
easier: : 2
patch('package.module.Class') : 1
self.MockClass : 2
self.addCleanup(patcher.stop) : 3
package.module.Class : 1
"patch.stopall()" : 1
"ord()": : 1
@patch('__main__.ord') : 1
test(mock_ord): : 1
mock_ord.return_value : 1
print(ord('c')) : 1
"unittest.TestLoader" : 1
"patch.TEST_PREFIX": : 1
patch.TEST_PREFIX : 1
@patch('__main__.value' : 1
three') : 1
Thing: : 1
foo_one(self): : 1
print(value) : 2
foo_two(self): : 1
Thing().foo_one() : 1
Thing().foo_two() : 1
'static_method') : 2
test(mock1 : 1
mock2): : 1
SomeClass.static_method : 1
mock1 : 3
SomeClass.class_method : 1
mock2 : 3
SomeClass.static_method('foo') : 1
SomeClass.class_method('bar') : 1
mock1.assert_called_once_with('foo') : 1
mock2.assert_called_once_with('bar') : 1
(temporarily) : 1
*looked : 1
up* : 1
Imagine : 3
a.py : 1
SomeClass : 3
b.py : 1
some_function : 1
"some_function" : 4
"SomeClass" : 6
"a.SomeClass" : 3
@patch('b.SomeClass') : 1
SomeClass" : 3
@patch('a.SomeClass') : 1
django : 1
'fooble' : 7
mock.__iter__ : 1
Mock(return_value=iter([])) : 1
list(mock) : 6
mock.__enter__ : 1
Mock(return_value='foo') : 1
mock.__exit__ : 1
Mock(return_value=False) : 1
mock.__enter__.assert_called_with() : 1
mock.__exit__.assert_called_with(None : 1
"__trunc__" : 1
"__gt__" : 2
"__le__" : 2
"__ge__" : 2
"__ne__" : 3
"__contains__" : 11
"__len__" : 13
"__reversed__" : 5
"__missing__" : 3
"__neg__" : 1
"__pos__" : 1
"__invert__" : 1
variants): : 1
"__sub__" : 2
"__matmul__" : 1
"__lshift__" : 1
"__rshift__" : 1
"__and__" : 2
"__xor__" : 2
"__or__" : 2
"__pow__" : 1
Pickling: : 1
"__reduce_ex__" : 2
"__getinitargs__" : 2
"__getnewargs__" : 3
"__getstate__" : 2
representation: : 2
"os.PathLike.__fspath__()" : 1
problems: : 3
unittest.mock.MagicMock(*args : 1
unittest.mock.NonCallableMagicMock(*args : 1
mock[3] : 1
mock.__setitem__.assert_called_with(3 : 1
'fish') : 2
mock.__getitem__.return_value : 1
'result' : 2
mock[2] : 1
preconfigured : 1
"__lt__": : 1
"__gt__": : 1
"__le__": : 1
"__ge__": : 1
"__int__": : 1
"__contains__": : 1
"__len__": : 1
"__iter__": : 1
"iter([])" : 1
"__exit__": : 1
"__aexit__": : 1
"__complex__": : 1
"__float__": : 1
"__bool__": : 1
"__index__": : 1
"__hash__": : 1
"__str__": : 1
"__sizeof__": : 1
len(mock) : 1
mock.__eq__.return_value : 1
"MagicMock.__iter__()" : 1
mock.__iter__.return_value : 2
iter(['a' : 1
"__getformat__" : 1
monkey : 3
"sentinel.some_object": : 1
real.method : 2
Mock(name="method") : 1
real.method.return_value : 1
sentinel.some_object : 3
real.method() : 2
unittest.mock.DEFAULT : 1
"sentinel.DEFAULT") : 1
unittest.mock.call(*args : 1
a='foo' : 2
b='bar') : 2
m.call_args_list : 1
call()] : 3
call.call_list() : 1
"call_list()" : 2
"call_list" : 1
"chained : 2
m(1).method(arg='foo').other('bar')(2.0) : 1
name='mock().method().other()()' : 1
kall : 4
call(1).method(arg='foo').other('bar')(2.0) : 1
kall.call_list() : 2
call().method(arg='foo') : 1
call().method().other('bar') : 1
call().method().other()(2.0)] : 1
"Mock.call_args_list" : 2
"Mock.mock_calls" : 2
two-tuples : 2
three-tuples : 1
"tupleness" : 1
arg='one' : 1
arg2='two') : 1
m.call_args : 1
kall.args : 2
kall.kwargs : 2
{'arg': : 2
'arg2': : 2
'two'} : 1
kall[0] : 1
kall[1] : 1
m.foo(4 : 1
arg='two' : 1
arg2='three') : 1
name='mock.foo()' : 2
m.mock_calls[0] : 1
'three'} : 1
m.mock_calls[0][0] : 1
unittest.mock.create_autospec(spec : 1
spec_set=False : 1
instance=False : 1
"instance=True" : 1
unittest.mock.ANY : 1
*everything* : 1
bar=object()) : 1
bar=ANY) : 1
"mock_calls": : 2
m(object()) : 1
call(1 : 1
ANY] : 1
unittest.mock.FILTER_DIR : 1
"mock.FILTER_DIR : 1
dir(Mock()) : 1
['assert_any_call' : 1
'assert_called' : 1
'assert_called_once' : 1
'assert_called_once_with' : 1
'assert_called_with' : 1
'assert_has_calls' : 1
'assert_not_called' : 1
'attach_mock' : 1
dir(Mock(spec=request)) : 1
['AbstractBasicAuthHandler' : 1
'AbstractDigestAuthHandler' : 1
'AbstractHTTPHandler' : 1
'BaseHandler' : 1
not-very-useful : 1
(private : 2
mocked) : 1
"FILTER_DIR": : 1
mock.FILTER_DIR : 1
dir(mock.Mock()) : 1
['_NonCallableMock__get_return_value' : 1
'_NonCallableMock__get_side_effect' : 1
'_NonCallableMock__return_value_doc' : 1
'_NonCallableMock__set_return_value' : 1
'_NonCallableMock__set_side_effect' : 1
'__call__' : 1
"vars(my_mock)" : 1
"dir(type(my_mock))" : 1
irrespective : 1
"mock.FILTER_DIR" : 1
unittest.mock.mock_open(mock=None : 1
read_data=None) : 1
*mock* : 3
*read_data* : 6
depleted : 1
simplistic: : 1
rewound : 1
open('/some/path' : 1
f.write('something') : 1
*returned : 1
fiddly : 1
patch('__main__.open' : 2
m): : 1
open('foo' : 1
h: : 2
h.write('some : 1
stuff') : 3
[call('foo' : 1
call().__enter__() : 1
call().write('some : 1
call().__exit__(None : 1
m.assert_called_once_with('foo' : 1
handle.write.assert_called_once_with('some : 1
mock_open(read_data='bibble')) : 1
open('foo') : 1
h.read() : 1
m.assert_called_once_with('foo') : 1
'bibble' : 1
spec) : 1
lazily) : 1
handy: : 2
Mock(name='Thing' : 2
mock.assert_called_once_with(1 : 2
auto-create : 1
misspell : 1
gone: : 1
mock.assret_called_once_with(4 : 1
Intentional : 4
*old : 1
api* : 1
dandy : 1
"wired : 1
together" : 1
"mock" : 3
Mock(spec=request.Request) : 1
mock.assret_called_with : 1
'assret_called_with' : 2
mock.has_data() : 1
<mock.Mock : 1
mock.has_data.assret_called_with() : 1
"lazily" : 1
accessed) : 1
patch('__main__.request' : 1
autospec=True) : 2
mock_request : 3
mock_request.Request : 1
name='request.Request' : 1
spec='Request' : 3
"request.Request" : 3
request.Request() : 1
mocks): : 1
request.Request('foo') : 1
<NonCallableMagicMock : 3
name='request.Request()' : 1
req.add_header('spam' : 1
name='request.Request().add_header()' : 1
req.add_header.assret_called_with : 1
req.add_header.assert_called_with('spam' : 1
create_autospec(request) : 1
mock_request.Request('foo' : 1
name='mock.Request()' : 1
(access : 1
Something: : 5
patch('__main__.Something' : 4
autospec=True): : 2
Something() : 4
thing.a : 3
scenario: : 2
autospec=True : 1
spec_set=True): : 1
MagicMocks): : 1
create_autospec(Something) : 1
mock.member.foo.bar.baz() : 1
name='mock.member.foo.bar.baz()' : 1
Thankfully : 1
SomethingForTest(Something): : 1
autospec=SomethingForTest) : 1
mock.a : 1
name='Something.a' : 1
spec='int' : 1
unittest.mock.seal(mock) : 1
Seal : 1
mock.submock.attribute1 : 1
mock.not_submock : 1
mock.Mock(name="sample_name") : 1
seal(mock) : 1
mock.new_attribute : 1
mock.submock.attribute2 : 1
mock.not_submock.attribute2 : 1
correct; : 1
PYTHONMALLOC=debug : 1
PYTHONASYNCIODEBUG=1 : 1
default" : 2
Unsafe : 1
open(sys.argv[1]) : 3
nlines : 2
len(fp.readlines()) : 2
print(nlines) : 2
269 : 4
script.py:10: : 3
name='README.rst' : 2
opened: : 2
expected; : 2
firstline : 1
fp.readline() : 3
print(firstline.rstrip()) : 1
os.close(fp.fileno()) : 1
name='script.py' : 2
"os.close(fp.fileno())" : 2
bpo-18748 : 1
"closefd=False" : 1
Lib/rlcompleter.py : 1
"Completer" : 2
"complete()" : 1
readline.parse_and_bind("tab: : 2
complete") : 2
<TAB : 1
PRESSED> : 1
readline.__doc__ : 1
readline.get_line_buffer( : 1
readline.read_init_file( : 1
readline.__file__ : 1
readline.insert_text( : 1
readline.set_completer( : 1
readline.__name__ : 1
readline.parse_and_bind( : 1
Completer.complete(text : 1
*state*th : 1
("'.'") : 5
"__getattr__()") : 1
Lib/threading.py : 1
"camelCase" : 1
performance-oriented : 1
I/O-bound : 1
threading.active_count() : 1
threading.excepthook(args : 1
"Thread.run()" : 2
*thread*: : 1
*exc_type* : 1
*thread* : 3
threading.__excepthook__ : 1
threading.get_ident() : 1
'thread : 3
identifier' : 3
threading.get_native_id() : 1
threading.enumerate() : 1
"current_thread()" : 1
threading.main_thread() : 1
threading.settrace(func) : 1
threading.gettrace() : 1
threading.setprofile(func) : 1
threading.getprofile() : 1
threading.stack_size([size]) : 1
32,768 : 2
common; : 3
constant: : 2
threading.TIMEOUT_MAX : 1
("Lock.acquire()" : 1
"Condition.wait()" : 2
loosely : 1
Thread-local : 1
mydata : 1
mydata.x : 1
threading.local : 1
"_threading_local" : 1
Lib/_threading_local.py : 1
activity: : 1
'alive' : 1
"daemon : 1
*daemon* : 5
non-daemonic : 6
"dummy : 1
"alien : 1
Dummy : 2
functionality; : 2
alien : 1
threading.Thread(group=None : 1
args=() : 2
kwargs={} : 2
daemon=None) : 2
"ThreadGroup" : 1
"Thread-*N*" : 1
"Thread-*N* : 1
(target)" : 1
"target.__name__" : 1
("Thread.__init__()") : 1
start() : 3
Thread(target=print : 2
args=[1]) : 2
t.run() : 2
args=(1,)) : 2
join(timeout=None) : 1
getName() : 1
setName() : 1
getter/setter : 2
"name"; : 1
"get_ident()" : 1
native_id : 1
("TID") : 1
(kernel) : 1
"get_native_id()" : 1
(guaranteed : 1
system-wide) : 1
is_alive() : 2
isDaemon() : 1
setDaemon() : 1
"daemon"; : 1
Locks : 3
unlocked; : 1
threading.Lock : 2
released; : 2
acquire(blocking=True : 3
timeout=- : 3
expired) : 1
release() : 12
locked() : 4
"owning : 1
"recursion : 1
level" : 1
locked/unlocked : 1
"acquire()"/"release()" : 1
threading.RLock : 1
awakens : 1
"notify()" : 12
"notify_all()" : 8
awakened : 9
re-acquires : 3
wakes : 6
relinquishes : 2
producer-consumer : 2
capacity: : 1
Consume : 4
cv: : 3
an_item_is_available(): : 1
cv.wait() : 2
get_an_available_item() : 2
Produce : 4
make_an_item_available() : 1
cv.notify() : 1
timeouts: : 1
cv.wait_for(an_item_is_available) : 1
threading.Condition(lock=None) : 1
*lock* : 24
acquire(*args) : 1
wait(timeout=None) : 3
unlocks : 1
wait_for(predicate : 1
satisfied : 1
Ignoring : 2
predicate(): : 1
"wait()": : 1
notify(n=1) : 2
reacquire : 1
notify_all() : 2
"notifyAll" : 1
scientist : 1
Edsger : 1
Dijkstra : 1
(he : 1
"P()" : 1
"V()" : 1
"release()") : 1
threading.Semaphore(value=1) : 1
counter; : 1
awoken : 4
release(n=1) : 1
threading.BoundedSemaphore(value=1) : 1
semaphore: : 1
maxconnections : 1
pool_sema : 1
BoundedSemaphore(value=maxconnections) : 1
semaphore's : 1
pool_sema: : 1
connectdb() : 1
conn.close() : 5
is_set() : 2
"isSet" : 1
Subsequently : 4
Timers : 1
begun) : 1
hello(): : 1
print("hello : 1
world") : 1
Timer(30.0 : 1
hello) : 1
threading.Timer(interval : 1
args=None : 1
*interval* : 11
timer's : 1
Barrier(2 : 1
timeout=5) : 1
server(): : 1
start_server() : 1
b.wait() : 3
accept_connection() : 1
process_server_connection(connection) : 1
client(): : 1
make_connection() : 1
process_client_connection(connection) : 1
threading.Barrier(parties : 1
action=None : 2
*parties* : 3
housekeeping : 2
barrier.wait() : 1
print("passed : 1
barrier") : 1
abort() : 2
deadlocking : 2
awry : 1
parties : 3
n_waiting : 2
threading.BrokenBarrierError : 1
some_lock: : 1
something.. : 2
some_lock.acquire() : 1
some_lock.release() : 1
"Condition" : 4
Lib/tkinter/tix.py : 1
(Tk : 1
Tk: : 1
"HList" : 1
"ComboBox" : 2
SpinBox) : 1
assortment : 1
applications: : 2
"NoteBook" : 1
"FileEntry" : 1
"PanedWindow" : 3
etc; : 3
Homepage : 1
Man : 1
Pages : 1
On-line : 2
Tide : 1
**TixInspect** : 1
inspector : 1
remotely : 1
Tix/Tk/Tkinter : 1
tkinter.tix.Tk(screenName=None : 1
baseName=None : 3
className='Tix') : 1
Toplevel : 3
"tkinter.Tk" : 1
"tix.Tk": : 1
tix : 4
tkinter.constants : 1
tix.Tk() : 3
root.tk.eval('package : 1
Tix') : 1
tkinter.tix.Balloon : 1
Balloon : 2
tkinter.tix.ButtonBox : 1
ButtonBox : 1
"Ok : 1
Cancel" : 1
tkinter.tix.ComboBox : 1
ComboBox : 2
combo : 2
subwidget : 5
listbox : 4
tkinter.tix.Control : 1
"SpinBox" : 1
tkinter.tix.LabelEntry : 1
LabelEntry : 1
mega : 2
"entry- : 1
form" : 4
tkinter.tix.LabelFrame : 1
LabelFrame : 2
tkinter.tix.Meter : 1
Meter : 1
tkinter.tix.OptionMenu : 1
tkinter.tix.PopupMenu : 1
PopupMenu : 1
"tk_popup" : 1
"PopupMenu" : 1
tkinter.tix.Select : 1
subwidgets : 1
radio-box : 1
check-box : 1
tkinter.tix.StdButtonBox : 1
StdButtonBox : 1
Motif- : 1
tkinter.tix.DirList : 1
DirList : 1
tkinter.tix.DirTree : 1
DirTree : 1
tkinter.tix.DirSelectDialog : 1
DirSelectDialog : 1
tkinter.tix.DirSelectBox : 1
"DirSelectBox" : 1
Motif(TM) : 2
DirSelectBox : 1
tkinter.tix.ExFileSelectBox : 1
ExFileSelectBox : 1
tixExFileSelectDialog : 1
"ExFileSelectBox" : 1
tkinter.tix.FileSelectBox : 1
FileSelectBox : 2
tkinter.tix.FileEntry : 1
FileEntry : 1
sits : 1
tkinter.tix.HList : 1
HList : 1
tkinter.tix.CheckList : 1
CheckList : 2
checkbutton : 1
radiobutton : 1
tkinter.tix.Tree : 1
tkinter.tix.TList : 1
TList : 1
"TList" : 2
tkinter.tix.PanedWindow : 1
PanedWindow : 1
panes : 7
vertically : 2
horizontally : 2
dragging : 3
tkinter.tix.ListNoteBook : 1
ListNoteBook : 1
"TixNoteBook" : 1
widget: : 1
(windows) : 1
"hlist" : 1
tkinter.tix.NoteBook : 1
NoteBook : 2
"tabs" : 1
adds: : 1
pixmap : 1
XPM : 1
(texts : 1
bitmaps : 2
"Button" : 2
tkinter.tix.InputOnly : 1
InputOnly : 1
"bind" : 1
augments : 1
providing: : 1
tkinter.tix.Form : 1
attachment : 1
tkinter.tix.tixCommand : 1
"Tix"'s : 1
print(root.tix_configure()) : 1
tixCommand.tix_configure(cnf=None : 1
option-value : 1
option(s) : 3
value(s); : 1
tixCommand.tix_cget(option) : 1
tixCommand.tix_getbitmap(name) : 1
Locates : 2
"name.xpm" : 2
"tix_addbitmapdir()" : 3
"tix_getbitmap()" : 3
"bitmap" : 1
tixCommand.tix_addbitmapdir(directory) : 1
"tix_getimage()" : 3
"$TIX_LIBRARY/bitmaps" : 1
tixCommand.tix_filedialog([dlgclass]) : 1
"tix_filedialog()" : 1
dlgclass : 1
"tix" : 1
"FileSelectDialog" : 1
"tixExFileSelectDialog" : 1
tixCommand.tix_getimage(self : 1
"name.xbm" : 1
"name.ppm" : 1
monochrome : 1
"image" : 6
tixCommand.tix_option_get(name) : 1
Gets : 3
tixCommand.tix_resetoptions(newScheme : 1
newFontSet[ : 1
newScmPrio]) : 1
fontset : 1
*newScheme* : 1
*newFontSet* : 1
resetoptions : 1
*newScmPrio* : 1
inited : 1
"tix_config()" : 1
"tix_resetoptions()" : 1
Lib/filecmp.py : 1
time/correctness : 1
filecmp.cmp(f1 : 1
shallow=True) : 2
*f1* : 1
*f2* : 1
filecmp.cmpfiles(dir1 : 1
dir2 : 1
*dir1* : 1
*dir2* : 1
*common* : 1
*match* : 6
*mismatch* : 2
"cmpfiles('a' : 1
'd/e'])" : 1
"a/c" : 1
"b/c" : 1
"a/d/e" : 1
"b/d/e" : 1
"'d/e'" : 1
filecmp.clear_cache() : 1
filecmp.dircmp(a : 1
hide=None) : 1
"filecmp.DEFAULT_IGNORES" : 1
*hide* : 3
"[os.curdir : 1
os.pardir]" : 1
report() : 2
report_partial_closure() : 1
report_full_closure() : 1
left_list : 1
right_list : 1
left_only : 1
right_only : 1
common_dirs : 1
common_files : 1
common_funny : 1
same_files : 1
diff_files : 1
funny_files : 1
subdirs : 1
"common_dirs" : 1
MyDirCmp : 2
"dircmp") : 1
filecmp.DEFAULT_IGNORES : 1
"subdirs" : 1
print_diff_files(dcmp): : 1
dcmp.diff_files: : 1
print("diff_file : 1
dcmp.left : 1
dcmp.right)) : 1
sub_dcmp : 1
dcmp.subdirs.values(): : 1
print_diff_files(sub_dcmp) : 1
dcmp : 1
dircmp('dir1' : 1
'dir2') : 1
print_diff_files(dcmp) : 1
Lib/typing.py : 1
"greeting" : 1
typing_extensions : 2
timeline : 1
"Type : 2
https://mypy.readthedocs.io/ : 1
standardised : 1
https://typing.readthedocs.io/ : 1
*Introducing* : 16
544**: : 1
Protocols: : 1
(static : 2
typing) : 1
585**: : 1
586**: : 1
589**: : 1
TypedDict: : 1
591**: : 1
593**: : 1
604**: : 1
binary-or : 1
613**: : 1
646**: : 1
647**: : 1
655**: : 1
673**: : 1
675**: : 1
681**: : 1
"@dataclass_transform" : 1
"Vector" : 1
"list[float]" : 1
synonyms: : 1
list[float] : 1
scale(scalar: : 1
vector: : 1
Vector) : 1
Vector: : 1
[scalar : 1
vector] : 1
checking; : 4
qualifies : 1
new_vector : 1
scale(2.0 : 1
[1.0 : 3
-4.2 : 1
5.4]) : 1
ConnectionOptions : 1
dict[str : 7
tuple[Address : 1
ConnectionOptions] : 1
broadcast_message(message: : 1
servers: : 2
Sequence[Server]) : 1
broadcast_message( : 1
Sequence[tuple[tuple[str : 1
str]]]) : 1
"NewType" : 6
get_user_name(user_id: : 1
UserId) : 2
user_a : 1
get_user_name(UserId(42351)) : 1
user_b : 1
get_user_name(-1) : 1
"UserId" : 3
'UserId' : 1
UserId(23413) : 1
UserId(54341) : 1
"Derived : 2
NewType('Derived' : 2
Base)" : 1
"Derived(some_value)" : 1
"some_value : 1
Derived(some_value)" : 1
"Derived": : 1
AdminUserId(UserId): : 1
'derived' : 1
"NewType": : 1
ProUserId : 1
NewType('ProUserId' : 1
typechecking : 3
"ProUserId" : 1
*equivalent* : 1
"Alias : 1
Original" : 1
"Alias" : 1
*exactly : 1
equivalent* : 1
"Original" : 3
signatures.In : 1
Original)" : 1
"Callable[[Arg1Type : 1
Arg2Type] : 1
ReturnType]" : 8
feeder(get_next_item: : 1
Callable[[] : 1
str]) : 5
Body : 3
async_query(on_success: : 1
Callable[[int] : 1
on_error: : 1
Callable[[int : 1
Exception] : 1
None]) : 2
on_update(value: : 1
callback: : 3
Callable[[str] : 1
Awaitable[None]] : 1
on_update : 1
hint: : 2
Callables : 2
"Callable[ParamSpecVariable : 2
"Callable[Concatenate[Arg1Type : 2
Arg2Type : 3
ParamSpecVariable] : 2
notify_by_email(employees: : 1
Sequence[Employee] : 1
overrides: : 1
Mapping[str : 2
TypeVar : 13
TypeVar('T') : 12
first(l: : 1
Sequence[T]) : 2
T: : 5
l[0] : 1
LoggedVar(Generic[T]): : 1
logger: : 1
Logger) : 1
new: : 2
T) : 2
self.log('Set : 1
repr(self.value)) : 2
get(self) : 1
self.log('Get : 1
self.logger.info('%s: : 1
"Generic[T]" : 1
"LoggedVar" : 1
"LoggedVar[T]" : 1
zero_all_vars(vars: : 1
Iterable[LoggedVar[int]]) : 1
vars: : 1
var.set(0) : 1
varieties : 1
TypeVar('T' : 3
contravariant=True) : 1
TypeVar('B' : 1
bound=Sequence[bytes] : 1
covariant=True) : 1
TypeVar('S' : 2
WeirdTrio(Generic[T : 1
S]): : 1
Pair(Generic[T : 1
T]): : 2
"Generic": : 1
Sized : 2
LinkedList(Sized : 1
Generic[T]): : 4
fixed: : 1
MyDict(Mapping[str : 1
"MyDict" : 1
"MyIterable" : 5
"Iterable[Any]": : 1
MyIterable(Iterable): : 1
Iterable[Any] : 1
TypeVar('S') : 1
Iterable[S] : 1
Iterable[str] : 1
response(query: : 1
Response[str]: : 1
Vec : 2
Iterable[tuple[T : 2
T]] : 3
inproduct(v: : 1
Vec[T]) : 1
"Generic[P]" : 1
"ParamSpec": : 2
ParamSpec('P') : 4
Z(Generic[T : 1
P]): : 1
Z[int : 1
[dict : 1
float]] : 1
__main__.Z[int : 1
'dict'> : 1
'float'>)] : 1
"X[[Type1 : 1
Type2 : 2
"X[Type1 : 1
aesthetic : 1
X(Generic[P]): : 1
X[int : 1
__main__.X[(<class : 2
'str'>)] : 2
X[[int : 1
str]] : 1
foo(item: : 1
Any) : 4
Passes : 7
'item' : 1
item.bar() : 1
"Any": : 1
legacy_parser(text): : 1
legacy_parser(text: : 1
Any: : 1
*escape : 1
hatch* : 1
Contrast : 1
hash_a(item: : 1
item.magic() : 2
hash_b(item: : 1
strs : 1
hash_a(42) : 1
hash_a("foo") : 1
hash_b(42) : 1
hash_b("foo") : 1
typesafe : 1
*nominal : 1
subtyping* : 2
unpythonic : 1
484**: : 1
Bucket(Sized : 1
Iterable[int]): : 1
__len__(self) : 2
__iter__(self) : 2
Iterator[int]: : 3
"Bucket" : 1
"Sized" : 4
"Iterable[int]" : 1
*structural : 1
duck-typing): : 1
Bucket: : 1
collect(items: : 1
Iterable[int]) : 1
collect(Bucket()) : 1
enjoy : 2
"[]".The : 1
newer.The : 1
585**—*Type : 1
Collections* : 1
typing.Any : 1
unconstrained : 1
typing.LiteralString : 1
composing : 2
"LiteralString"-typed : 1
caller(arbitrary_string: : 1
literal_string: : 1
run_query(literal_string) : 1
literal_string) : 1
typing.Never : 1
never_call_me(arg: : 1
Never) : 1
int_or_str(arg: : 2
never_call_me(arg) : 2
arg: : 6
int(): : 2
print("It's : 4
int") : 2
str(): : 2
"Never" : 3
NoReturn : 1
NoReturn: : 1
RuntimeError('no : 1
way') : 1
typing.Self : 1
return_self(self) : 2
fashion: : 1
TypeVar("Self" : 1
bound="Foo") : 1
return_self(self: : 1
Self) : 1
"Foo": : 1
"SubclassOfFoo.return_self" : 1
"SubclassOfFoo" : 1
Annotating : 1
typing.TypeAlias : 1
Factors: : 1
typing.Tuple : 1
"Tuple[X : 1
Y]" : 3
"Tuple[()]" : 1
"Tuple[T1 : 1
T2]" : 1
T1 : 3
T2 : 5
"Tuple[int : 2
"Tuple[Any : 1
"builtins.tuple" : 1
typing.Union : 1
"Union[X : 2
"Union[int : 1
Details: : 2
Union[Union[int : 1
float] : 3
vanish : 1
Union[int] : 1
"Union[X][Y]" : 1
typing.Optional : 1
"Optional[X]" : 1
None]") : 1
foo(arg: : 3
Optional[int] : 1
typing.Callable : 1
"Callable[[int] : 1
ellipsis; : 1
(literal : 1
ellipsis) : 1
"ReturnType" : 3
Any]" : 2
typing.Concatenate : 1
"Concatenate[Arg1Type : 1
ParamSpecVariable]" : 1
"with_lock" : 2
"threading.Lock" : 6
Concatenate : 3
TypeVar('R') : 1
my_lock : 1
Lock() : 6
with_lock(f: : 1
Callable[Concatenate[Lock : 1
P] : 1
R]) : 1
Callable[P : 3
R]: : 1
'''A : 2
type-safe : 3
lock.''' : 1
inner(*args: : 2
P.args : 2
**kwargs: : 2
P.kwargs) : 2
R: : 1
f(my_lock : 1
@with_lock : 1
sum_threadsafe(lock: : 1
list[float]) : 2
'''Add : 2
manner.''' : 1
sum(numbers) : 1
sum_threadsafe([1.1 : 1
3.3]) : 2
"Concatenate") : 2
typing.Type(Generic[CT_co]) : 1
"Type[C]" : 3
'Type[int]' : 2
type(a) : 2
covariant: : 1
BasicUser(User): : 1
ProUser(User): : 1
TeamUser(User): : 1
BasicUser : 1
ProUser : 1
TeamUser : 1
make_new_user(user_class: : 1
Type[User]) : 1
user_class() : 1
covariant : 5
"Type" : 2
new_non_team_user(user_class: : 1
Type[BasicUser : 1
ProUser]): : 1
"Type[Any]" : 1
"builtins.type" : 1
typing.Literal : 1
literals) : 2
validate_simple(data: : 1
Literal[True]: : 1
MODE : 5
Literal['r' : 1
'rb' : 3
'wb'] : 1
open_helper(file: : 1
MODE) : 1
open_helper('/some/path' : 1
open_helper('/other/path' : 1
'typo') : 1
"Literal[...]" : 2
impose : 3
3.9.1: : 1
typing.ClassVar : 1
ClassVar[dict[str : 1
int]] : 2
damage: : 1
enterprise_d : 1
Starship(3000) : 1
enterprise_d.stats : 1
Starship.stats : 1
typing.Final : 1
re-assigned : 1
MAX_SIZE: : 1
Final : 1
MAX_SIZE : 1
Connection: : 1
TIMEOUT: : 1
Final[int] : 1
FastConnector(Connection): : 1
TIMEOUT : 1
typing.Required : 1
typing.NotRequired : 1
non-required : 5
typing.Annotated : 1
("Flexible : 1
variadic) : 1
typehint : 2
"Annotated[T : 3
x]" : 2
"no_type_check" : 1
"x") : 1
Annotated[int : 4
ValueRange(-10 : 1
Annotated[T1 : 1
ValueRange(-20 : 1
"include_extras=True" : 1
"get_type_hints()" : 2
("Annotated" : 1
arguments): : 2
ValueRange(3 : 8
ctype("char")] : 3
"Annotated[int]" : 1
valid) : 2
Annotated[ : 3
ctype("char") : 2
annotation: : 1
Annotated[Annotated[int : 1
Duplicated : 1
Annotated[list[tuple[T : 1
MaxLen(10)] : 2
Vec[int] : 1
Annotated[list[tuple[int : 1
typing.TypeGuard : 1
narrowing* : 1
guard": : 1
is_str(val: : 1
isinstance(val : 1
``val`` : 4
``str`` : 1
``float`` : 1
"TypeGuard[...]" : 1
"-> : 1
TypeGuard" : 1
is_str_list(val: : 1
list[object]) : 1
TypeGuard[list[str]]: : 1
'''Determines : 1
strings''' : 1
all(isinstance(x : 1
func1(val: : 1
list[object]): : 1
is_str_list(val): : 1
``list[str]`` : 1
".join(val)) : 1
``list[object]`` : 1
strings!") : 1
"is_str_list" : 1
TypeA) : 1
TypeGuard[TypeB]: : 1
"foo(arg)" : 1
narrows : 1
"TypeA" : 2
"TypeB" : 2
narrower : 5
"list[object]" : 1
"list[str]" : 1
typing.Generic : 1
Mapping(Generic[KT : 1
VT]): : 1
KT) : 1
VT: : 1
Etc : 1
TypeVar('X') : 1
TypeVar('Y') : 2
lookup_name(mapping: : 1
Mapping[X : 1
Y] : 1
Y) : 1
Y: : 3
mapping[key] : 3
typing.TypeVar : 1
bound=str) : 1
TypeVar('A' : 1
repeat(x: : 1
Sequence[T]: : 1
x.""" : 3
[x]*n : 1
print_capitalized(x: : 1
print(x.capitalize()) : 1
concatenate(x: : 1
A) : 1
"""Add : 2
together.""" : 1
*bound* : 3
*constrained* : 2
Bound : 2
print_capitalized('a : 1
reveal_type(x) : 2
revealed : 4
StringSubclass(str): : 1
print_capitalized(StringSubclass('another : 1
string')) : 1
reveal_type(y) : 1
StringSubclass : 2
print_capitalized(45) : 1
(ABCs : 1
protocols) : 1
TypeVar('U' : 1
bound=str|bytes) : 1
str|bytes : 1
TypeVar('V' : 1
bound=SupportsAbs) : 1
given: : 4
concatenate('one' : 2
reveal_type(a) : 1
concatenate(StringSubclass('one') : 1
StringSubclass('two')) : 1
reveal_type(b) : 1
b'two') : 1
T)" : 1
contravariant : 2
"covariant=True" : 2
"contravariant=True" : 2
typing.TypeVarTuple : 1
Ts : 7
TypeVarTuple('Ts') : 3
move_first_element_to_last(tup: : 1
tuple[T : 2
*Ts]) : 1
tuple[*Ts : 2
T]: : 2
(*tup[1:] : 1
tup[0]) : 1
tuple[int] : 1
move_first_element_to_last(tup=(1,)) : 1
(str,) : 1
move_first_element_to_last(tup=(1 : 2
'spam')) : 1
(str : 3
3.0)) : 1
runtime) : 2
tuple[()] : 1
*Ts] : 2
move_first_element_to_last(tup=()) : 1
"tuple[T : 4
*Ts]" : 2
"Ts" : 1
"(T1 : 1
*(T1 : 1
"Unpack[Ts]".) : 1
tuple[Ts] : 1
tuple[*Ts] : 3
TypeVarTuple('Shape') : 1
Array(Generic[*Shape]): : 1
tuple[*Shape]) : 1
__abs__(self) : 1
"Array[*Shape]": : 1
get_shape(self) : 1
tuple[*Shape]: : 1
happily : 1
DType : 1
TypeVar('DType') : 1
Array(Generic[DType : 1
*Shape]): : 2
Array2(Generic[*Shape : 1
DType]): : 1
float_array_1d: : 1
Array[float : 1
Height] : 1
Array() : 2
Totally : 1
int_array_2d: : 1
Array[int : 1
Width] : 1
Yup : 1
Array(Generic[*Shape : 1
"*args": : 1
call_soon( : 1
Callable[[*Ts] : 1
*args: : 1
*Ts : 1
callback(*args) : 1
non-unpacked : 1
"*args: : 2
*Ts" : 1
*individual* : 1
"call_soon" : 1
(positional) : 1
typing.Unpack : 1
unpacked: : 1
tup: : 4
tuple[Unpack[Ts]] : 2
TypeVarTuple : 2
`typing_extensions` : 1
typing.ParamSpec(name : 1
bound=None : 1
covariant=False : 1
contravariant=False) : 1
"add_logging" : 2
add_logging(f: : 1
T]) : 1
function.''' : 1
logging.info(f'{f.__name__} : 1
called') : 1
@add_logging : 1
add_two(x: : 1
together.''' : 1
inner" : 1
"bound" : 1
typing.ParamSpecArgs : 1
typing.ParamSpecKwargs : 1
ParamSpec("P") : 1
get_origin(P.args) : 1
get_origin(P.kwargs) : 1
typing.AnyStr : 1
"AnyStr" : 2
"constrained : 1
"AnyStr : 1
TypeVar('AnyStr' : 1
concat(a: : 1
AnyStr : 1
AnyStr) : 1
AnyStr: : 1
concat(u"foo" : 2
u"bar") : 1
'unicode' : 1
concat(b"foo" : 1
b"bar") : 2
typing.Protocol(Generic) : 1
Proto(Protocol): : 1
meth(self) : 3
duck-typing) : 1
func(x: : 1
Proto) : 1
x.meth() : 1
func(C()) : 1
simple-minded : 2
GenProto(Protocol[T]): : 1
@typing.runtime_checkable : 1
non-protocol : 2
ponies" : 1
@runtime_checkable : 2
Closable(Protocol): : 1
isinstance(open('/some/file') : 1
Closable) : 1
Named(Protocol): : 1
isinstance(threading.Thread(name='Bob') : 1
Named) : 1
"ssl.SSLObject.__init__" : 1
(instantiate) : 1
runtime-checkable : 1
performance-sensitive : 1
Typed : 1
Employee(NamedTuple): : 3
Employee : 2
collections.namedtuple('Employee' : 1
'id']) : 1
employee : 1
Employee('Guido') : 1
employee.id : 1
"""Represents : 1
employee.""" : 1
__repr__(self) : 2
f'<Employee : 1
{self.name} : 1
id={self.id}>' : 1
Group(NamedTuple : 1
list[T] : 2
Backward-compatible : 1
NamedTuple('Employee' : 1
[('name' : 1
int)]) : 1
typing.NewType(name : 1
tp) : 1
typechecker : 1
first_user : 1
UserId(1) : 1
typing.TypedDict(dict) : 1
Point2D(TypedDict): : 4
Point2D : 8
'label': : 5
'good'} : 1
{'z': : 2
'bad'} : 1
Point2D(x=1 : 1
y=2 : 2
label='first') : 2
dict(x=1 : 1
TypedDict('Point2D' : 6
str}) : 1
x=int : 1
y=int : 1
label=str) : 1
x-y: : 1
{'in': : 1
'x-y': : 1
int}) : 1
"NotRequired": : 1
NotRequired[str] : 1
NotRequired[str]}) : 1
"Point2D" : 2
"label" : 1
Point2D(TypedDict : 4
int} : 1
total=False) : 2
"Required": : 1
Required[int] : 4
Point3D(Point2D): : 3
"Point3D" : 1
Point3D(TypedDict): : 1
non-"TypedDict" : 1
X(TypedDict): : 1
Y(TypedDict): : 1
Z(object): : 1
non-TypedDict : 1
XY(X : 1
Y): : 1
XZ(X : 1
Z): : 1
XT(X : 1
Group(TypedDict : 1
practices) : 1
"__total__" : 1
__total__ : 1
"Point2D.__total__" : 1
Point2D.__total__ : 2
Point3D.__total__ : 1
__required_keys__ : 1
__optional_keys__ : 1
"Point2D.__required_keys__" : 1
"Point2D.__optional_keys__" : 1
"total": : 1
Point3D.__required_keys__ : 1
frozenset({'z'}) : 1
Point3D.__optional_keys__ : 1
frozenset({'x' : 1
'y'}) : 1
"TypedDict"s : 1
typing.Dict(dict : 1
MutableMapping[KT : 4
VT]) : 5
count_words(text: : 1
int]: : 1
"builtins.dict" : 1
typing.List(list : 1
MutableSequence[T]) : 2
vec2(x: : 1
List[T]: : 2
keep_positives(vector: : 1
[item : 1
"builtins.list" : 1
typing.Set(set : 1
MutableSet[T]) : 1
"AbstractSet" : 1
typing.FrozenSet(frozenset : 1
AbstractSet[T_co]) : 1
"builtins.frozenset" : 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ : 1
typing.DefaultDict(collections.defaultdict : 1
typing.OrderedDict(collections.OrderedDict : 1
typing.ChainMap(collections.ChainMap : 1
typing.Counter(collections.Counter : 1
Dict[T : 1
int]) : 3
typing.Deque(deque : 1
typing.IO : 1
typing.TextIO : 1
typing.BinaryIO : 1
"IO[AnyStr]" : 1
"TextIO(IO[str])" : 1
"BinaryIO(IO[bytes])" : 1
typing.Pattern : 1
typing.Match : 1
"Pattern[str]" : 1
"Pattern[bytes]" : 1
"Match[str]" : 1
"Match[bytes]" : 1
typing.Text : 1
add_unicode_checkmark(text: : 1
Text) : 1
Text: : 1
\u2713' : 1
typing.AbstractSet(Collection[T_co]) : 1
"collections.abc.Set" : 4
typing.ByteString(Sequence[int]) : 1
"collections.abc.ByteString" : 3
typing.Collection(Sized : 1
Iterable[T_co] : 1
Container[T_co]) : 1
typing.Container(Generic[T_co]) : 1
"collections.abc.Container" : 3
typing.ItemsView(MappingView : 1
AbstractSet[tuple[KT_co : 1
VT_co]]) : 1
"collections.abc.ItemsView" : 3
typing.KeysView(MappingView : 1
AbstractSet[KT_co]) : 1
"collections.abc.KeysView" : 3
typing.Mapping(Collection[KT] : 1
Generic[KT : 1
VT_co]) : 1
get_position_in_index(word_list: : 1
word: : 1
word_list[word] : 1
typing.MappingView(Sized) : 1
"collections.abc.MappingView" : 3
typing.MutableMapping(Mapping[KT : 1
typing.MutableSequence(Sequence[T]) : 1
"collections.abc.MutableSequence" : 5
typing.MutableSet(AbstractSet[T]) : 1
"collections.abc.MutableSet" : 3
typing.Sequence(Reversible[T_co] : 1
Collection[T_co]) : 1
typing.ValuesView(MappingView : 1
Collection[_VT_co]) : 1
"collections.abc.ValuesView" : 3
typing.Iterable(Generic[T_co]) : 1
"collections.abc.Iterable" : 4
typing.Iterator(Iterable[T_co]) : 1
"collections.abc.Iterator" : 3
typing.Generator(Iterator[T_co] : 1
Generic[T_co : 3
T_contra : 2
V_co]) : 2
"Generator[YieldType : 1
SendType : 1
echo_round() : 2
Generator[int : 2
str]: : 2
round(sent) : 2
'Done' : 1
"SendType" : 4
contravariantly : 2
covariantly : 1
invariantly : 1
infinite_stream(start: : 4
None]: : 2
"Iterable[YieldType]" : 1
"Iterator[YieldType]": : 1
"collections.abc.Generator" : 3
typing.Hashable : 1
"collections.abc.Hashable" : 1
typing.Reversible(Iterable[T_co]) : 1
"collections.abc.Reversible" : 3
typing.Sized : 1
"collections.abc.Sized" : 1
typing.Coroutine(Awaitable[V_co] : 1
"collections.abc.Coroutine" : 3
Coroutine[list[str] : 1
c.send('hi') : 1
Inferred : 2
list[str] : 3
typing.AsyncGenerator(AsyncIterator[T_co] : 1
T_contra]) : 1
"AsyncGenerator[YieldType : 1
SendType]" : 1
AsyncGenerator[int : 2
0.0: : 1
increment(start) : 2
"AsyncIterable[YieldType]" : 1
"AsyncIterator[YieldType]": : 1
AsyncIterator[int]: : 1
"collections.abc.AsyncGenerator" : 2
typing.AsyncIterable(Generic[T_co]) : 1
"collections.abc.AsyncIterable" : 3
typing.AsyncIterator(AsyncIterable[T_co]) : 1
"collections.abc.AsyncIterator" : 3
typing.Awaitable(Generic[T_co]) : 1
"collections.abc.Awaitable" : 3
typing.ContextManager(Generic[T_co]) : 1
typing.AsyncContextManager(Generic[T_co]) : 1
"contextlib.AbstractAsyncContextManager" : 3
typing.SupportsAbs : 1
"__abs__" : 1
typing.SupportsBytes : 1
"__bytes__" : 1
typing.SupportsComplex : 1
typing.SupportsFloat : 1
typing.SupportsIndex : 1
typing.SupportsInt : 1
typing.SupportsRound : 1
typing.cast(typ : 1
Cast : 6
typing.assert_type(val : 1
*typ* : 1
"assert_type()" : 1
greet(name: : 1
assert_type(name : 2
`name` : 1
`str` : 1
checker's : 1
intentions: : 1
complex_function(arg: : 1
type-narrowing : 1
`int` : 1
assert_type(arg : 1
typing.assert_never(arg : 1
unreachable: : 1
assert_never(unreachable) : 1
"assert_never()" : 1
"unreachable" : 1
"assert_never" : 1
Unreachable : 1
Exhaustiveness : 1
exhaustiveness : 1
typing.reveal_type(obj : 1
Reveal : 1
Revealed : 2
"builtins.int" : 2
reveal_type(1) : 2
"reveal_type()" : 1
communicates : 2
"Runtime : 1
@typing.dataclass_transform : 1
"dataclasses.dataclass()"-like : 1
TypeVar("T") : 1
@dataclass_transform() : 3
type[T]) : 1
type[T]: : 1
ModelBase: : 1
CustomerModel(ModelBase): : 2
ModelMeta(type): : 1
ModelBase(metaclass=ModelMeta): : 1
"CustomerModel" : 1
"@dataclasses.dataclass" : 2
"eq" : 9
"order" : 4
"match_args" : 2
"eq_default" : 1
"order_default" : 1
"kw_only_default" : 2
"field_specifiers" : 1
specifiers: : 1
"factory" : 1
"__dataclass_transform__" : 1
@typing.overload : 1
"@overload" : 2
"@overload"-decorated : 4
non-"@overload"-decorated : 2
function/method) : 1
process(response: : 3
process(response): : 1
<actual : 1
implementation> : 1
Overloaded : 1
"get_overloads()" : 3
typing.get_overloads(func) : 1
"process" : 1
"get_overloads(process)" : 1
typing.clear_overloads() : 1
@typing.final : 1
@final : 2
done(self) : 2
Leaf: : 1
Other(Leaf): : 1
False)" : 2
@typing.no_type_check : 1
function(s) : 1
@typing.no_type_check_decorator : 1
"no_type_check()" : 2
@type_check_only : 1
Response: : 2
get_header(self : 1
fetch_response() : 1
typing.get_type_hints(obj : 1
globalns=None : 2
localns=None : 1
include_extras=False) : 2
"obj.__annotations__" : 1
"C.__mro__" : 1
Student(NamedTuple): : 1
Annotated[str : 2
marker'] : 2
get_type_hints(Student) : 1
get_type_hints(Student : 2
include_extras=True) : 1
"Optional[t]" : 1
typing.get_args(tp) : 1
typing.get_origin(tp) : 1
"X[Y : 1
Z : 5
"(Y : 2
"[Y : 1
get_origin(Dict[str : 1
get_args(Dict[int : 1
get_origin(Union[int : 1
get_args(Union[int : 1
typing.is_typeddict(tp) : 1
Film(TypedDict): : 1
is_typeddict(Film) : 1
is_typeddict(list : 1
typing.ForwardRef : 1
"List["SomeClass"]" : 1
"List[ForwardRef("SomeClass")]" : 1
"list["SomeClass"]" : 1
"list[ForwardRef("SomeClass")]" : 1
"list[SomeClass]" : 1
typing.TYPE_CHECKING : 1
TYPE_CHECKING: : 1
expensive_mod : 1
fun(arg: : 1
'expensive_mod.SomeType') : 1
local_var: : 1
expensive_mod.AnotherType : 1
other_fun() : 1
"forward : 1
"expensive_mod" : 1
+------------------------------------+-----------------+---------------------+------------------+ : 4
Projected : 1
PEP/issue : 1
|====================================|=================|=====================|==================| : 1
bpo-38291 : 1
Undecided : 2
gh-92332 : 1
Lib/weakref.py : 1
*referent* : 2
alive: : 1
*generators* : 1
thread.lock : 1
Dict(red=1 : 1
green=2 : 1
blue=3) : 1
weakref.ref(object[ : 1
callback]) : 3
alive; : 1
callback; : 2
propagated; : 1
*callback*) : 2
__callback__ : 1
weakref.proxy(object[ : 1
referent; : 1
"ref()" : 2
weakref.getweakrefcount(object) : 1
weakref.getweakrefs(object) : 1
weakref.WeakKeyDictionary([dict]) : 1
T(str): : 2
k1 : 5
k2 : 4
T() : 4
weakref.WeakKeyDictionary() : 2
d[k1] : 3
{k1: : 3
d[k2] : 2
{k2: : 2
"live" : 2
WeakKeyDictionary.keyrefs() : 1
weakref.WeakValueDictionary([dict]) : 1
WeakValueDictionary.valuerefs() : 1
weakref.WeakSet([elements]) : 1
weakref.WeakMethod(method[ : 1
ephemeral : 4
dies: : 1
print("method : 1
called!") : 1
weakref.ref(c.method) : 1
r() : 5
weakref.WeakMethod(c.method) : 1
C.method : 1
0x7fc859830220>> : 1
r()() : 1
weakref.finalize(obj : 4
*alive* : 1
*dead* : 1
"func(*arg : 1
__call__() : 1
"func(*args : 3
kwargs)" : 3
peek() : 1
weakref.ReferenceType : 1
weakref.ProxyType : 1
weakref.CallableProxyType : 1
weakref.ProxyTypes : 1
"ref.__callback__" : 1
weakref.ref(o) : 1
print(r()) : 1
"ref() : 1
print("Object : 2
deallocated; : 1
frobnicate.") : 1
live!") : 1
o.do_something_useful() : 1
"liveness" : 1
applications; : 1
accessed: : 1
ExtendedRef(weakref.ref): : 1
ob : 5
callback=None : 3
**annotations): : 1
super().__init__(ob : 1
self.__counter : 2
annotations.items(): : 1
__call__(self): : 1
super().__call__() : 1
(ob : 1
self.__counter) : 1
_id2obj_dict : 1
remember(obj): : 1
oid : 2
id(obj) : 1
_id2obj_dict[oid] : 2
id2obj(oid): : 1
kenny : 2
weakref.finalize(kenny : 1
Kenny!") : 1
<finalize : 2
...; : 2
'Object' : 2
Kenny : 1
callback(x : 1
z): : 2
print("CALLBACK") : 1
z=3) : 2
f.alive : 3
CALLBACK : 2
f.detach() : 1
(<...Object : 1
newobj : 2
exiting") : 1
TempDir: : 2
remove(self): : 2
shutil.rmtree(self.name) : 1
removed(self): : 2
self.remove() : 1
self._finalizer : 1
weakref.finalize(self : 1
self.name) : 3
self._finalizer() : 1
self._finalizer.alive : 1
unloaded: : 1
unloading_module(): : 1
weakref.finalize(sys.modules[__name__] : 1
unloading_module) : 1
"with: : 1
^^^^^^^^^^^^ : 1
print('.. : 2
World!') : 1
**concurrent** : 1
**async/await** : 1
web-servers : 1
**structured** : 1
**high-level** : 1
execution; : 1
IPC; : 1
queues; : 1
*library : 1
developers* : 1
"networking" : 1
"subprocesses" : 1
"OS : 1
signals" : 1
transports; : 1
callback-based : 7
REPL: : 1
^^^^^^^^^^^^^^^ : 1
Guides : 1
Tutorials : 1
Lib/asyncio/ : 1
"linux/include/errno.h" : 1
all-inclusive : 1
errno.errorcode : 1
"errno.errorcode[errno.EPERM]" : 1
"'EPERM'" : 1
"errno.errorcode.keys()" : 1
Symbols : 1
errno.EPERM : 1
errno.ENOENT : 1
errno.ESRCH : 1
errno.EINTR : 1
Interrupted : 2
errno.EIO : 1
errno.ENXIO : 1
errno.E2BIG : 1
Arg : 3
errno.ENOEXEC : 1
Exec : 1
errno.EBADF : 1
errno.ECHILD : 1
errno.EAGAIN : 1
errno.ENOMEM : 1
errno.EACCES : 1
errno.EFAULT : 1
errno.ENOTBLK : 1
errno.EBUSY : 1
errno.EEXIST : 1
errno.EXDEV : 1
Cross-device : 1
errno.ENODEV : 1
errno.ENOTDIR : 1
errno.EISDIR : 1
errno.EINVAL : 1
errno.ENFILE : 1
errno.EMFILE : 1
errno.ENOTTY : 1
typewriter : 1
errno.ETXTBSY : 1
errno.EFBIG : 1
errno.ENOSPC : 1
errno.ESPIPE : 1
Illegal : 3
errno.EROFS : 1
errno.EMLINK : 1
errno.EPIPE : 1
errno.EDOM : 1
errno.ERANGE : 1
errno.EDEADLK : 1
errno.ENAMETOOLONG : 1
errno.ENOLCK : 1
errno.ENOSYS : 1
errno.ENOTEMPTY : 1
errno.ELOOP : 1
errno.EWOULDBLOCK : 1
errno.ENOMSG : 1
errno.EIDRM : 1
Identifier : 2
errno.ECHRNG : 1
errno.EL2NSYNC : 1
errno.EL3HLT : 1
halted : 2
errno.EL3RST : 1
errno.ELNRNG : 1
errno.EUNATCH : 1
errno.ENOCSI : 1
CSI : 1
errno.EL2HLT : 1
errno.EBADE : 1
errno.EBADR : 1
errno.EXFULL : 1
Exchange : 1
errno.ENOANO : 1
anode : 1
errno.EBADRQC : 1
errno.EBADSLT : 1
errno.EDEADLOCK : 1
errno.EBFONT : 1
errno.ENOSTR : 1
errno.ENODATA : 1
errno.ETIME : 1
errno.ENOSR : 1
errno.ENONET : 1
Machine : 1
errno.ENOPKG : 1
errno.EREMOTE : 1
errno.ENOLINK : 1
severed : 1
errno.EADV : 1
Advertise : 1
errno.ESRMNT : 1
Srmount : 1
errno.ECOMM : 1
errno.EPROTO : 1
errno.EMULTIHOP : 1
Multihop : 1
errno.EDOTDOT : 1
RFS : 1
errno.EBADMSG : 1
errno.EOVERFLOW : 1
errno.ENOTUNIQ : 1
errno.EBADFD : 1
errno.EREMCHG : 1
errno.ELIBACC : 1
errno.ELIBBAD : 1
errno.ELIBSCN : 1
a.out : 1
errno.ELIBMAX : 1
errno.ELIBEXEC : 1
Cannot : 5
errno.EILSEQ : 1
errno.ERESTART : 1
errno.ESTRPIPE : 1
errno.EUSERS : 1
errno.ENOTSOCK : 1
non-socket : 1
errno.EDESTADDRREQ : 1
errno.EMSGSIZE : 1
errno.EPROTOTYPE : 1
errno.ENOPROTOOPT : 1
errno.EPROTONOSUPPORT : 1
errno.ESOCKTNOSUPPORT : 1
errno.EOPNOTSUPP : 1
errno.EPFNOSUPPORT : 1
errno.EAFNOSUPPORT : 1
errno.EADDRINUSE : 1
errno.EADDRNOTAVAIL : 1
errno.ENETDOWN : 1
errno.ENETUNREACH : 1
errno.ENETRESET : 1
errno.ECONNABORTED : 1
errno.ECONNRESET : 1
errno.ENOBUFS : 1
errno.EISCONN : 1
errno.ENOTCONN : 1
errno.ESHUTDOWN : 1
errno.ETOOMANYREFS : 1
splice : 1
errno.ETIMEDOUT : 1
errno.ECONNREFUSED : 1
refused : 10
errno.EHOSTDOWN : 1
errno.EHOSTUNREACH : 1
errno.EALREADY : 1
errno.EINPROGRESS : 1
errno.ESTALE : 1
errno.EUCLEAN : 1
errno.ENOTNAM : 1
XENIX : 2
errno.ENAVAIL : 1
errno.EISNAM : 1
errno.EREMOTEIO : 1
errno.EDQUOT : 1
Quota : 1
errno.EQFULL : 1
errno.ENOTCAPABLE : 1
Capabilities : 1
Lib/email/parser.py : 1
cloth : 1
payload(s) : 1
"get_body()" : 1
"FeedParser" : 5
incrementally : 12
embodied : 1
"email.feedparser" : 1
conducive : 1
"BytesFeedParser"'s : 1
simple; : 1
standards-compliant : 2
"BytesFeedParser": : 1
email.parser.BytesFeedParser(_factory=None : 1
policy=policy.compat32) : 10
*_factory* : 5
no- : 1
callable; : 1
**The : 2
specified**; : 2
"email.policy.default" : 2
feed(data) : 3
stitch : 1
endings: : 1
mixed) : 1
email.parser.FeedParser(_factory=None : 1
header-only : 1
email.parser.BytesParser(_class=None : 1
*_class* : 8
parse(fp : 2
headersonly=False) : 4
6532**) : 1
MIME-encoded : 1
"8bit") : 1
*headersonly* : 5
parsebytes(bytes : 1
email.parser.BytesHeaderParser(_class=None : 1
email.parser.Parser(_class=None : 1
"BytesParser.parse()" : 1
parsestr(text : 1
email.parser.HeaderParser(_class=None : 1
email.message_from_bytes(s : 1
_class=None : 4
"BytesParser().parsebytes(s)" : 1
email.message_from_binary_file(fp : 2
"BytesParser().parse(fp)" : 1
email.message_from_string(s : 1
"Parser().parsestr(s)" : 1
email.message_from_file(fp : 1
"Parser().parse(fp)" : 1
email.message_from_bytes(myBytes) : 1
non-*multipart* : 1
sub-message : 2
*message/** : 1
/delivery-status* : 1
non-standards-compliant : 1
*multipart*-edness : 1
"MultipartInvariantViolationDefect" : 2
"getpass()" : 1
msvcrt.locking(fd : 1
"LK_*" : 1
Adjacent : 1
merged; : 1
"msvcrt.locking" : 1
"nbytes" : 2
msvcrt.LK_LOCK : 1
msvcrt.LK_RLCK : 1
msvcrt.LK_NBLCK : 1
msvcrt.LK_NBRLCK : 1
msvcrt.LK_UNLCK : 1
Unlocks : 1
msvcrt.setmode(fd : 1
line-end : 1
"os.O_TEXT"; : 1
"os.O_BINARY" : 1
msvcrt.open_osfhandle(handle : 1
*handle* : 1
"os.O_APPEND" : 1
"os.O_RDONLY" : 1
"os.O_TEXT" : 1
"msvcrt.open_osfhandle" : 1
msvcrt.get_osfhandle(fd) : 1
"msvcrt.get_osfhandle" : 1
msvcrt.kbhit() : 1
msvcrt.getch() : 1
"'\000'" : 1
"'\xe0'"; : 1
keycode : 2
msvcrt.getwch() : 1
Wide : 6
msvcrt.getche() : 1
msvcrt.getwche() : 1
"getche()" : 2
msvcrt.putch(char) : 1
*char* : 2
msvcrt.putwch(unicode_char) : 1
"putch()" : 1
msvcrt.ungetch(char) : 1
"pushed : 1
back" : 1
buffer; : 1
msvcrt.ungetwch(unicode_char) : 1
"ungetch()" : 1
msvcrt.heapmin() : 1
Lib/signal.py : 1
"SIGPIPE" : 2
"SIGCHLD" : 9
point(for : 1
instruction) : 1
uninterrupted : 1
air" : 1
inter- : 1
(SIG*) : 1
("SIG_DFL" : 1
"SIG_IGN") : 1
sigmask : 1
("SIG_BLOCK" : 1
"SIG_UNBLOCK" : 2
"SIG_SETMASK") : 1
"enums" : 2
("Signals" : 1
"Handlers" : 2
"Sigmasks" : 1
"getsignal()" : 2
"pthread_sigmask()" : 6
"sigpending()" : 4
"sigwait()" : 6
"Signals" : 1
enums: : 3
signal.Signals : 1
SIG* : 2
CTRL_* : 1
signal.Handlers : 1
signal.Sigmasks : 1
"SIG_BLOCK" : 1
"SIG_SETMASK" : 1
*sigprocmask(2)* : 2
*pthread_sigmask(3)* : 2
signal.SIG_DFL : 1
"SIGQUIT" : 1
signal.SIG_IGN : 1
signal.SIGABRT : 1
*abort(3)* : 1
*alarm(2)* : 2
signal.SIGBREAK : 1
(CTRL : 2
BREAK) : 1
signal.SIGBUS : 1
Bus : 1
(bad : 1
signal.SIGCHLD : 1
signal.SIGCLD : 1
signal.SIGCONT : 1
signal.SIGFPE : 1
signal.SIGHUP : 1
Hangup : 1
signal.SIGILL : 1
signal.SIGINT : 1
signal.SIGKILL : 1
signal.SIGPIPE : 1
pipe: : 2
signal.SIGSEGV : 1
fault: : 1
signal.SIGSTKFLT : 1
coprocessor : 1
*signal(7)* : 1
signal.SIGTERM : 1
signal.SIGUSR1 : 1
signal.SIGUSR2 : 1
signal.SIGWINCH : 1
symbolically : 1
hangup : 1
"signal.SIGHUP"; : 1
"<signal.h>" : 1
'"signal()"' : 1
*signal(2)* : 3
*signal(7)*) : 1
signal.CTRL_C_EVENT : 1
signal.CTRL_BREAK_EVENT : 1
"Ctrl+Break" : 1
signal.NSIG : 1
"valid_signals()" : 2
signal.ITIMER_REAL : 1
delivers : 2
"SIGALRM" : 3
expiration : 3
signal.ITIMER_VIRTUAL : 1
SIGVTALRM : 1
signal.ITIMER_PROF : 1
Coupled : 1
ITIMER_VIRTUAL : 1
SIGPROF : 1
signal.SIG_BLOCK : 1
signal.SIG_UNBLOCK : 1
unblocked : 2
signal.SIG_SETMASK : 1
signal.ItimerError : 1
signal.alarm(time) : 1
signal.getsignal(signalnum) : 1
*signalnum* : 8
"signal.SIG_IGN" : 3
signal.strsignal(signalnum) : 1
"Interrupt" : 1
signal.valid_signals() : 1
"range(1 : 2
NSIG)" : 1
signal.pause() : 1
received; : 3
"sigtimedwait()" : 3
signal.raise_signal(signum) : 1
signal.pidfd_send_signal(pidfd : 1
siginfo=None : 1
*pidfd* : 1
*siginfo* : 1
*pidfd_send_signal(2)* : 1
signal.pthread_kill(thread_id : 1
signalnum) : 1
*thread_id* : 5
"signal.pthread_kill" : 1
"thread_id" : 2
"signalnum" : 2
*pthread_kill(3)* : 1
signal.pthread_sigmask(how : 1
mask) : 3
"SIG_BLOCK": : 1
"SIG_UNBLOCK": : 1
unblock : 2
"SIG_SETMASK": : 1
{"signal.SIGINT" : 1
"signal.SIGTERM"}) : 1
"signal.pthread_sigmask(signal.SIG_BLOCK : 1
"SIGSTOP" : 1
"pause()" : 5
signal.setitimer(which : 1
interval=0.0) : 1
"signal.ITIMER_REAL" : 2
"signal.ITIMER_VIRTUAL" : 2
"signal.ITIMER_PROF") : 1
*seconds* : 4
"alarm()") : 1
"SIGVTALRM" : 1
"signal.ITIMER_PROF" : 1
"SIGPROF" : 1
(delay : 1
interval) : 1
"ItimerError" : 1
signal.getitimer(which) : 1
signal.set_wakeup_fd(fd : 1
warn_on_full_buffer=True) : 1
enabled) : 3
fd's : 2
"warn_on_full_buffer=True" : 1
wakeups : 1
non-empty; : 1
"warn_on_full_buffer=False" : 1
"warn_on_full_buffer" : 1
signal.siginterrupt(signalnum : 1
flag) : 5
*siginterrupt(3)* : 1
signal.signal(signalnum : 1
"SIGBREAK" : 1
signal.sigpending() : 1
Examine : 2
blocked) : 1
*sigpending(2)* : 1
signal.sigwait(sigset) : 1
(removes : 1
signals) : 1
*sigwait(3)* : 1
signal.sigwaitinfo(sigset) : 1
"siginfo_t" : 2
"si_signo" : 2
"si_errno" : 1
"si_pid" : 2
"si_uid" : 2
"si_status" : 2
"si_band" : 1
*sigwaitinfo(2)* : 1
signal.sigtimedwait(sigset : 1
*sigtimedwait(2)* : 1
"alarm()" : 1
5-second : 2
signal.Signals(signum).name : 1
print(f'Signal : 1
{signame} : 1
({signum})') : 1
OSError("Couldn't : 1
device!") : 1
signal.signal(signal.SIGALRM : 1
signal.alarm(5) : 1
os.open('/dev/ttyS0' : 1
os.O_RDWR) : 1
signal.alarm(0) : 1
Piping : 1
*head(1)* : 1
"BrokenPipeError: : 1
32] : 1
pipe" : 1
range(10000): : 1
print("y") : 1
sys.stdout.flush() : 3
BrokenPipeError: : 1
devnull : 2
os.open(os.devnull : 1
os.O_WRONLY) : 1
os.dup2(devnull : 1
sys.stdout.fileno()) : 1
EPIPE : 1
"SIGPIPE"'s : 1
disposition : 6
SpamContext: : 1
self.lock : 1
self.lock.acquire() : 1
exc_val : 2
exc_tb): : 2
self.lock.release() : 1
"KeyboardInterrupt": : 2
EVENT_READ : 1
interrupt_read : 1
interrupt_write : 1
print('Signal : 1
signal' : 1
interrupt_write.send(b'\0') : 1
signal.signal(signal.SIGINT : 1
serve_forever(httpd): : 1
sel : 2
DefaultSelector() : 1
sel.register(interrupt_read : 1
EVENT_READ) : 2
sel.register(httpd : 1
sel.select(): : 1
key.fileobj : 2
interrupt_read: : 1
interrupt_read.recv(1) : 1
8000") : 1
HTTPServer(('' : 1
SimpleHTTPRequestHandler) : 1
serve_forever(httpd) : 1
print("Shutdown...") : 1
************************************************************** : 2
Lib/types.py : 1
type-related : 1
types.new_class(name : 1
bases=() : 3
kwds=None : 1
exec_body=None) : 1
*exec_body* : 1
ns: : 1
types.prepare_class(name : 1
kwds=None) : 1
Calculates : 1
3-tuple: : 1
"metaclass : 1
kwds" : 1
"'metaclass'" : 1
"namespace" : 4
insertion-order- : 1
types.resolve_bases(bases) : 1
"listiterator" : 1
types.NoneType : 1
types.FunctionType : 1
types.LambdaType : 1
"function.__new__" : 1
types.GeneratorType : 1
*generator*-iterator : 2
types.AsyncGeneratorType : 1
generator*-iterator : 1
types.CodeType(**kwargs) : 1
"argcount" : 2
"kwonlyargcount" : 2
"nlocals" : 2
"stacksize" : 2
replace(**kwargs) : 1
types.CellType : 1
types.MethodType : 1
types.BuiltinFunctionType : 1
types.BuiltinMethodType : 1
(Here : 2
"built-in" : 1
"written : 1
C".) : 1
types.WrapperDescriptorType : 1
"object.__lt__()" : 1
types.MethodWrapperType : 1
"object().__str__" : 1
types.NotImplementedType : 1
types.MethodDescriptorType : 1
*unbound* : 2
"dict.__dict__['fromkeys']" : 1
types.ModuleType(name : 1
*modules* : 1
"importlib.machinery.ModuleSpec.loader" : 1
"importlib.machinery.ModuleSpec.name" : 1
"importlib.machinery.ModuleSpec.parent" : 1
types.EllipsisType : 1
types.GenericAlias(t_origin : 1
t_args) : 1
"t_origin" : 1
non-parameterized : 2
"t_args" : 1
parameterize : 2
"t_origin": : 1
GenericAlias(list : 1
(int,)) : 1
GenericAlias(dict : 1
int)) : 1
3.9.2: : 1
types.UnionType : 1
types.TracebackType(tb_next : 1
tb_frame : 2
tb_lasti : 2
tb_lineno) : 1
"sys.exception().__traceback__" : 1
types.FrameType : 1
"tb.tb_frame" : 1
"tb" : 1
types.GetSetDescriptorType : 1
"FrameType.f_locals" : 1
"array.array.typecode" : 1
types.MemberDescriptorType : 1
"datetime.timedelta.days" : 1
"GetSetDescriptorType" : 1
types.MappingProxyType(mapping) : 1
proxy[key] : 1
iter(proxy) : 1
"iter(proxy.keys())" : 1
len(proxy) : 2
get(key[ : 2
("(key : 2
reversed(proxy) : 1
SimpleNamespace: : 1
self.__dict__.update(kwargs) : 1
(f"{k}={v!r}" : 1
self.__dict__.items()) : 1
"{}({})".format(type(self).__name__ : 1
".join(items)) : 1
isinstance(self : 1
SimpleNamespace) : 1
SimpleNamespace): : 1
self.__dict__ : 2
other.__dict__ : 1
NS: : 1
types.DynamicClassAttribute(fget=None : 1
Route : 1
types.coroutine(gen_func) : 1
*gen_func* : 2
https://www.zlib.net : 1
1.1.3; : 1
zlib's : 1
permutations; : 1
http://www.zlib.net/manual.html : 2
zlib.error : 1
zlib.adler32(data[ : 1
value]) : 5
Adler-32 : 2
(An : 2
CRC32 : 1
quickly.) : 1
checksum; : 2
zlib.compress(data : 1
level=- : 1
wbits=MAX_WBITS) : 1
Compresses : 1
(Z_BEST_SPEED) : 2
(Z_BEST_COMPRESSION) : 2
(Z_NO_COMPRESSION) : 2
(Z_DEFAULT_COMPRESSION) : 2
Z_DEFAULT_COMPRESSION : 2
"window : 4
size") : 4
(MAX_WBITS): : 1
+9 : 1
+15: : 2
base-two : 2
zlib-specific : 1
−9 : 1
−15: : 2
+25 : 1
+31 : 2
15): : 3
zlib.compressobj(level=-1 : 1
method=DEFLATED : 1
wbits=MAX_WBITS : 2
memLevel=DEF_MEM_LEVEL : 1
strategy=Z_DEFAULT_STRATEGY[ : 1
zdict]) : 2
"DEFLATED" : 1
compress() : 1
*memLevel* : 1
*strategy* : 1
"Z_DEFAULT_STRATEGY" : 1
"Z_FILTERED" : 1
"Z_HUFFMAN_ONLY" : 1
"Z_RLE" : 1
1.2.0.1) : 1
"Z_FIXED" : 1
1.2.2.2) : 1
*zdict* : 5
zlib.crc32(data[ : 1
CRC : 7
(Cyclic : 1
Redundancy : 3
Check) : 1
zlib.decompress(data : 1
bufsize=DEF_BUF_SIZE) : 1
Decompresses : 1
"compressobj()" : 1
+8 : 1
1.2.3.5 : 1
−8 : 1
+24 : 1
+40 : 1
+47 : 1
too- : 1
zlib.decompressobj(wbits=MAX_WBITS[ : 1
"decompressobj()" : 1
decompressor's : 1
Compress.compress(data) : 1
Compress.flush([mode]) : 1
"Z_NO_FLUSH" : 1
"Z_PARTIAL_FLUSH" : 1
"Z_SYNC_FLUSH" : 1
"Z_FULL_FLUSH" : 1
"Z_BLOCK" : 1
1.2.3.4) : 1
"Z_FINISH" : 5
Compress.copy() : 1
Decompress.unused_data : 1
Decompress.unconsumed_tail : 1
Decompress.eof : 1
Decompress.decompress(data : 1
max_length=0) : 1
processed; : 1
unconsumed : 1
"unconsumed_tail" : 2
Decompress.flush([length]) : 1
Decompress.copy() : 1
midway : 1
zlib.ZLIB_VERSION : 1
"ZLIB_RUNTIME_VERSION" : 1
zlib.ZLIB_RUNTIME_VERSION : 1
http://www.zlib.net : 1
Lib/urllib/robotparser.py : 1
http://www.robotstxt.org/orig.html : 1
urllib.robotparser.RobotFileParser(url='') : 1
set_url(url) : 1
feeds : 1
parse(lines) : 1
can_fetch(useragent : 1
url) : 3
*useragent* : 4
mtime() : 1
modified() : 1
crawl_delay(useragent) : 1
request_rate(useragent) : 1
"RequestRate(requests : 1
seconds)" : 1
site_maps() : 1
"Sitemap" : 1
rp : 1
urllib.robotparser.RobotFileParser() : 1
rp.set_url("http://www.musi-cal.com/robots.txt") : 1
rp.read() : 1
rrate : 1
rp.request_rate("*") : 1
rrate.requests : 1
rrate.seconds : 1
rp.crawl_delay("*") : 1
rp.can_fetch("*" : 2
"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco") : 1
"http://www.musi-cal.com/") : 1
"AbstractEventLoopPolicy" : 2
asyncio.get_event_loop_policy() : 1
asyncio.set_event_loop_policy(policy) : 1
asyncio.AbstractEventLoopPolicy : 1
set_event_loop(loop) : 1
new_event_loop() : 1
get_child_watcher() : 1
"AbstractChildWatcher" : 3
set_child_watcher(watcher) : 1
*watcher* : 3
policies: : 1
asyncio.DefaultEventLoopPolicy : 1
"create_subprocess_exec()" : 5
"ThreadedChildWatcher" : 2
(configured : 1
"MultiLoopChildWatcher" : 2
"SafeChildWatcher" : 2
"FastChildWatcher" : 1
asyncio.get_child_watcher() : 1
asyncio.set_child_watcher(watcher) : 1
"set_child_watcher()" : 1
asyncio.AbstractChildWatcher : 1
add_child_handler(pid : 1
"callback(pid : 1
remove_child_handler(pid) : 1
attach_loop(loop) : 1
Spawning : 1
*inactive* : 2
cleaned-up : 1
asyncio.ThreadedChildWatcher : 1
(*O(1)* : 2
terminates) : 2
asyncio.MultiLoopChildWatcher : 1
disrupting : 2
(*O(n)* : 1
asyncio.SafeChildWatcher : 1
("RuntimeError" : 3
*O(N)* : 1
asyncio.FastChildWatcher : 1
reaps : 1
"os.waitpid(-1)" : 1
asyncio.PidfdChildWatcher : 1
(pidfds) : 1
"PidfdChildWatcher" : 1
"Goldilocks" : 1
pidfds : 1
(5.3+) : 1
kernels : 1
"DefaultEventLoopPolicy" : 1
MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy): : 1
get_event_loop(self): : 1
"""Get : 2
EventLoop : 1
super().get_event_loop() : 1
asyncio.set_event_loop_policy(MyEventLoopPolicy()) : 1
Lib/tkinter/simpledialog.py : 1
modal : 4
tkinter.simpledialog.askfloat(title : 1
tkinter.simpledialog.askinteger(title : 1
tkinter.simpledialog.askstring(title : 1
tkinter.simpledialog.Dialog(parent : 1
title=None) : 4
body(master) : 1
dialog's : 1
buttonbox() : 1
Lib/tkinter/filedialog.py : 1
file/directory : 2
look-and-feel : 3
*title* : 4
*initialdir* : 1
*initialfile* : 1
*filetypes* : 1
(label : 1
*defaultextension* : 1
(save : 1
dialogs) : 1
*multiple* : 2
**Static : 1
functions** : 1
tkinter.filedialog.askopenfile(mode='r' : 1
**options) : 21
tkinter.filedialog.askopenfiles(mode='r' : 1
"Open" : 2
object(s) : 1
tkinter.filedialog.asksaveasfile(mode='w' : 1
"SaveAs" : 2
write- : 2
tkinter.filedialog.askopenfilename(**options) : 1
tkinter.filedialog.askopenfilenames(**options) : 1
tkinter.filedialog.asksaveasfilename(**options) : 1
tkinter.filedialog.askdirectory(**options) : 1
*mustexist* : 1
tkinter.filedialog.Open(master=None : 1
tkinter.filedialog.SaveAs(master=None : 1
**Convenience : 1
classes** : 1
tkinter.filedialog.Directory(master=None : 1
prompting : 5
*FileDialog* : 1
tkinter.filedialog.FileDialog(master : 1
cancel_command(event=None) : 1
dirs_double_event(event) : 1
dirs_select_event(event) : 1
files_double_event(event) : 1
files_select_event(event) : 1
single-click : 1
filter_command(event=None) : 1
get_filter() : 1
get_selection() : 1
go(dir_or_file=os.curdir : 1
pattern='*' : 1
default='' : 1
Render : 2
ok_event(event) : 1
quit(how=None) : 1
set_filter(dir : 1
pat) : 1
set_selection(file) : 1
tkinter.filedialog.LoadFileDialog(master : 1
FileDialog : 2
ok_command() : 2
tkinter.filedialog.SaveFileDialog(master : 1
Lib/tkinter/commondialog.py : 1
"Dialog" : 4
tkinter.commondialog.Dialog(master=None : 1
show(color=None : 1
Lib/copy.py : 1
(explained : 1
copy.copy(x) : 1
copy.deepcopy(x[ : 1
memo]) : 1
copy.Error : 1
instances): : 1
*references* : 2
*deep : 1
*copies* : 1
(compound : 1
"memo" : 2
pass; : 1
(shallow : 1
deeply) : 1
"copied_list : 1
original_list[:]" : 1
"__deepcopy__()" : 2
Discussion : 2
Lib/socketserver.py : 1
socketserver.TCPServer(server_address : 1
RequestHandlerClass : 5
bind_and_activate=True) : 4
socketserver.UDPServer(server_address : 1
discrete : 8
transit : 1
socketserver.UnixStreamServer(server_address : 1
socketserver.UnixDatagramServer(server_address : 1
infrequently : 1
*synchronously*; : 1
request; : 3
"BaseRequestHandler" : 3
"handle()" : 9
"server_close()" : 2
*daemon_threads* : 1
autonomously; : 1
+------------+ : 2
BaseServer : 1
+-----------+ : 4
+------------------+ : 2
|------->| : 2
UnixStreamServer : 1
+--------------------+ : 2
UDPServer : 1
UnixDatagramServer : 1
"UnixDatagramServer" : 1
"UDPServer" : 2
socketserver.ForkingMixIn : 1
"ThreadingUDPServer" : 1
ThreadingUDPServer(ThreadingMixIn : 1
UDPServer): : 1
"ThreadingMixIn.daemon_threads" : 1
socketserver.ForkingTCPServer : 1
socketserver.ForkingUDPServer : 1
socketserver.ThreadingTCPServer : 1
socketserver.ThreadingUDPServer : 1
pre-defined : 3
"DatagramRequestHandler" : 1
integrity : 9
"deaf" : 1
synchronously : 2
service) : 2
request) : 8
socketserver.BaseServer(server_address : 1
"server_address" : 1
"RequestHandlerClass" : 4
handle_request() : 1
"get_request()" : 1
"verify_request()" : 1
"process_request()" : 1
user-provided : 2
serve_forever(poll_interval=0.5) : 1
Poll : 1
*poll_interval* : 1
"service_actions" : 1
service_actions() : 1
shutdown() : 2
address_family : 1
family; : 1
"('127.0.0.1' : 1
80)" : 1
request_queue_size : 1
"request_queue_size" : 1
denied" : 1
socket_type : 1
server; : 3
"TCPServer"; : 1
finish_request(request : 1
client_address) : 4
get_request() : 1
handle_error(request : 1
handle_timeout() : 1
process_request(request : 1
"finish_request()" : 1
server_activate() : 1
server_bind() : 1
verify_request(request : 1
socketserver.BaseRequestHandler : 1
"self.request"; : 1
"self.client_address"; : 1
"self.server" : 1
per-server : 1
"self.request" : 3
finish() : 1
socketserver.StreamRequestHandler : 1
socketserver.DatagramRequestHandler : 1
"finish()" : 1
"self.rfile" : 2
"self.wfile" : 2
"rfile" : 1
"StreamRequestHandler.wfile" : 1
side: : 6
MyTCPHandler(socketserver.BaseRequestHandler): : 1
self.request : 2
self.request.recv(1024).strip() : 1
wrote:".format(self.client_address[0])) : 3
print(self.data) : 2
upper-cased : 2
self.request.sendall(self.data.upper()) : 1
socketserver.TCPServer((HOST : 1
MyTCPHandler) : 1
server.serve_forever() : 13
(file- : 1
interface): : 1
MyTCPHandler(socketserver.StreamRequestHandler): : 1
self.rfile : 1
handler; : 3
self.rfile.readline().strip() : 1
self.wfile : 1
self.wfile.write(self.data.upper()) : 1
".join(sys.argv[1:]) : 2
(SOCK_STREAM : 1
sock: : 5
sock.connect((HOST : 1
sock.sendall(bytes(data : 1
"utf-8")) : 1
str(sock.recv(1024) : 3
"utf-8") : 4
print("Sent: : 2
{}".format(data)) : 2
print("Received: : 3
{}".format(received)) : 2
Server: : 1
TCPServer.py : 1
b'hello : 4
TCP' : 1
b'python : 1
nice' : 1
Client: : 1
TCPClient.py : 2
Sent: : 2
Received: : 5
WORLD : 2
NICE : 1
MyUDPHandler(socketserver.BaseRequestHandler): : 1
self.request[0].strip() : 1
self.request[1] : 1
print(data) : 1
socket.sendto(data.upper() : 1
self.client_address) : 1
socketserver.UDPServer((HOST : 1
MyUDPHandler) : 1
socket.SOCK_DGRAM) : 1
recipient : 8
sock.sendto(bytes(data : 1
(HOST : 1
ThreadedTCPRequestHandler(socketserver.BaseRequestHandler): : 1
str(self.request.recv(1024) : 1
'ascii') : 4
cur_thread : 1
bytes("{}: : 1
{}".format(cur_thread.name : 1
self.request.sendall(response) : 1
ThreadedTCPServer(socketserver.ThreadingMixIn : 1
socketserver.TCPServer): : 1
client(ip : 4
sock.connect((ip : 1
sock.sendall(bytes(message : 1
'ascii')) : 1
{}".format(response)) : 1
ThreadedTCPServer((HOST : 1
ThreadedTCPRequestHandler) : 1
server.server_address : 1
server_thread : 1
threading.Thread(target=server.serve_forever) : 1
server_thread.daemon : 1
server_thread.start() : 1
print("Server : 1
thread:" : 1
server_thread.name) : 1
2") : 2
server.shutdown() : 1
ThreadedTCPServer.py : 1
Thread-2: : 1
Thread-3: : 1
Thread-4: : 1
Lib/crypt.py : 1
alternatives) : 5
*crypt(3)* : 3
one-way : 3
algorithm; : 1
crack : 1
platforms): : 1
crypt.METHOD_SHA512 : 1
Crypt : 5
86 : 4
crypt.METHOD_SHA256 : 1
crypt.METHOD_BLOWFISH : 1
crypt.METHOD_MD5 : 1
weakest : 2
"crypt.METHOD_*" : 3
crypt.crypt(word : 1
salt=None) : 1
*word* : 5
*salt* : 12
"methods" : 2
plain-text : 2
"$digit$" : 2
perturb : 1
"[./a-zA-Z0-9]" : 1
crypted : 1
crypt.mksalt(method=None : 1
rounds=None) : 1
*rounds* : 2
"METHOD_SHA256" : 2
"METHOD_SHA512" : 2
"METHOD_BLOWFISH" : 2
"999_999_999" : 1
"5000" : 2
(2^4) : 1
"2_147_483_648" : 1
(2^31) : 1
"4096" : 1
(2^12) : 1
constant-time : 1
purpose): : 1
compare_digest : 3
compare_hash : 2
login(): : 1
input('Python : 1
login: : 1
cryptedpasswd : 3
pwd.getpwnam(username)[1] : 1
cryptedpasswd: : 1
'*': : 1
ValueError('no : 1
passwords') : 1
cleartext : 2
getpass.getpass() : 2
compare_hash(crypt.crypt(cleartext : 1
cryptedpasswd) : 2
original: : 1
crypt.crypt(plaintext) : 1
compare_hash(hashed : 1
crypt.crypt(plaintext : 1
hashed)): : 1
ValueError("hashed : 1
original") : 1
Lib/bisect.py : 1
right!) : 1
bisect.bisect_left(a : 1
lo=0 : 6
hi=len(a) : 6
*lo* : 1
*hi* : 1
considered; : 2
partitions : 2
"all(val : 4
a[lo : 2
i])" : 2
a[i : 2
hi])" : 2
bisect.bisect_right(a : 1
bisect.bisect(a : 1
"bisect_left()" : 2
bisect.insort_left(a : 1
"O(log : 2
dominated : 3
O(n) : 4
bisect.insort_right(a : 1
bisect.insort(a : 1
"insort_left()" : 1
"bisect_right()" : 1
*bisect()* : 1
*insort()* : 2
mind: : 1
Bisection : 1
"O(n)" : 1
"functools.cache()" : 1
*bisect* : 1
SortedCollection : 1
full-featured : 2
"bisect()" : 4
index(a : 1
'Locate : 1
bisect_left(a : 3
len(a) : 2
a[i] : 4
find_lt(a : 1
'Find : 4
i: : 3
a[i-1] : 2
find_le(a : 1
bisect_right(a : 2
find_gt(a : 1
len(a): : 2
find_ge(a : 1
exam : 3
score : 7
breakpoints: : 1
90 : 10
grade(score : 1
breakpoints=[60 : 1
90] : 1
grades='FDCBA'): : 1
bisect(breakpoints : 1
score) : 1
grades[i] : 1
[grade(score) : 1
[33 : 1
100]] : 1
['F' : 1
'A'] : 1
"insort()" : 1
insort : 1
namedtuple('Movie' : 1
'released' : 1
'director')) : 1
movies : 2
Movie('Jaws' : 1
'Spielberg') : 1
Movie('Titanic' : 1
'Cameron') : 2
Movie('The : 1
Birds' : 3
1963 : 1
'Hitchcock') : 1
Movie('Aliens' : 1
1986 : 3
movie : 8
1960 : 2
by_year : 1
attrgetter('released') : 1
movies.sort(key=by_year) : 1
movies[bisect(movies : 1
key=by_year)] : 1
Movie(name='The : 1
released=1963 : 2
director='Hitchcock') : 2
romance : 2
Movie('Love : 1
Story' : 2
'Hiller') : 1
insort(movies : 1
key=by_year) : 1
pprint(movies) : 1
[Movie(name='The : 1
Movie(name='Love : 1
released=1970 : 1
director='Hiller') : 1
Movie(name='Jaws' : 1
released=1975 : 1
director='Spielberg') : 1
Movie(name='Aliens' : 1
released=1986 : 1
director='Cameron') : 1
Movie(name='Titanic' : 1
released=1997 : 1
director='Cameron')] : 1
('yellow' : 5
('black' : 2
0)] : 2
data.sort(key=lambda : 1
r[1]) : 1
operator.itemgetter(1) : 1
[r[1] : 1
data] : 2
Precompute : 1
data[bisect_left(keys : 4
Lib/site.py : 1
initialization.** : 1
"sys.exec_prefix"; : 1
heads : 3
"lib/site-packages" : 1
"lib/python*X.Y*/site-packages" : 1
head-tail : 1
(sys.base_prefix : 1
"include-system-site-packages" : 1
(case-insensitive) : 1
system-level : 1
site-packages; : 1
"*name*.pth" : 1
above; : 1
Non-existing : 1
(followed : 1
deliberate : 1
discourage : 1
subsubdirectories : 1
"foo.pth" : 2
"bar.pth" : 3
bletch : 1
/usr/local/lib/pythonX.Y/site-packages/bar : 1
/usr/local/lib/pythonX.Y/site-packages/foo : 1
"bletch" : 1
"foo.pth"; : 1
"'sitecustomize'" : 1
"ENABLE_USER_SITE" : 3
"'usercustomize'" : 1
skipped; : 1
"~/.python_history" : 1
Activation : 1
site.PREFIXES : 1
site.ENABLE_USER_SITE : 1
"PYTHONNOUSERSITE") : 1
(mismatch : 1
site.USER_SITE : 1
"~/.local/lib/python*X.Y*/site-packages" : 1
"~/Library/Python/*X.Y*/lib/python/site- : 1
"*%APPDATA%*\Python\Python*XY*\site-packages" : 1
site.USER_BASE : 1
"~/.local" : 1
"~/Library/Python/*X.Y*" : 1
"*%APPDATA%*\Python" : 1
site.addsitedir(sitedir : 1
known_paths=None) : 1
"USER_SITE" : 2
/home/user/.local/lib/python3.3/site-packages : 1
Lib/cgitb.py : 1
text.) : 2
excerpts : 1
cgitb.enable(display=1 : 1
logdir=None : 1
context=5 : 1
format='html') : 1
*logdir* : 2
""html"" : 5
cgitb.text(info : 1
context=5) : 2
cgitb.html(info : 1
cgitb.handler(info=None) : 1
Lib/webbrowser.py : 1
web-based : 3
"%s"; : 1
**webbrowser** : 1
("tab") : 5
"https://www.python.org" : 1
webbrowser.Error : 1
webbrowser.open(url : 1
new=0 : 2
autoraise=True) : 2
"webbrowser.open" : 1
webbrowser.open_new(url) : 2
webbrowser.open_new_tab(url) : 2
webbrowser.get(using=None) : 1
*using* : 2
webbrowser.register(name : 1
instance=None : 1
preferred=False) : 1
*constructor* : 2
*preferred* : 2
instantiations : 1
+--------------------------+-------------------------------------------+---------+ : 24
|==========================|===========================================|=========| : 1
"'mozilla'" : 1
"Mozilla('mozilla')" : 2
"'firefox'" : 1
"'netscape'" : 1
"Mozilla('netscape')" : 1
"'galeon'" : 1
"Galeon('galeon')" : 1
"'epiphany'" : 1
"Galeon('epiphany')" : 1
"'skipstone'" : 1
"BackgroundBrowser('skipstone')" : 1
"'kfmclient'" : 1
"Konqueror()" : 3
"'konqueror'" : 1
"'kfm'" : 1
"'mosaic'" : 1
"BackgroundBrowser('mosaic')" : 1
"'opera'" : 1
"Opera()" : 1
"'grail'" : 1
"Grail()" : 1
"'links'" : 1
"GenericBrowser('links')" : 1
"'elinks'" : 1
"Elinks('elinks')" : 1
"'lynx'" : 1
"GenericBrowser('lynx')" : 1
"'w3m'" : 1
"GenericBrowser('w3m')" : 1
"'windows-default'" : 1
"WindowsDefault" : 1
"'macosx'" : 1
"MacOSXOSAScript('default')" : 1
"'safari'" : 1
"MacOSXOSAScript('safari')" : 1
"'google-chrome'" : 1
"Chrome('google-chrome')" : 1
"'chrome'" : 1
"Chrome('chrome')" : 1
"'chromium'" : 1
"Chromium('chromium')" : 1
"'chromium-browser'" : 1
"Chromium('chromium-browser')" : 1
"Konqueror" : 1
KDE : 4
nice; : 1
"KDEDIR" : 1
"kfm" : 1
**konqueror** : 1
Chrome/Chromium : 1
"MacOSX" : 1
"MacOSXOSAScript" : 1
'https://docs.python.org/' : 1
controllers : 1
webbrowser.name : 1
System-dependent : 1
controller.open(url : 1
controller.open_new(url) : 1
controller.open_new_tab(url) : 1
Executables : 1
Lib/statistics.py : 1
("Real"-valued) : 1
competitor : 1
statisticians : 1
Minitab : 1
SAS : 1
Matlab : 1
graphing : 1
calculators : 1
"map(float : 1
input_data)" : 1
"median()" : 2
"median_low()" : 3
"median_high()" : 3
"median_grouped()" : 3
"mode()" : 5
"multimode()" : 2
"quantiles()" : 2
isnan : 1
filterfalse : 1
[20.7 : 3
float('NaN'),19.2 : 1
18.3 : 4
14.4] : 2
sorted(data) : 2
nan : 5
14.4 : 1
nan] : 1
median(data) : 1
16.35 : 1
sum(map(isnan : 1
data)) : 2
list(filterfalse(isnan : 1
sorted(clean) : 1
[14.4 : 1
20.7] : 1
median(clean) : 1
18.75 : 1
+-------------------------+-----------------------------------------------------------------+ : 12
("average") : 1
"fmean()" : 2
weighting : 5
"geometric_mean()" : 1
Geometric : 1
Harmonic : 1
Median : 2
(middle : 2
50th : 2
percentile : 4
+-------------------------+-----------------------------------------------+ : 5
"pstdev()" : 1
Population : 2
"pvariance()" : 4
+---------------------------+-------------------------------------------------------+ : 4
covariance : 2
Slope : 1
average" : 1
averages : 1
"StatisticsError" : 19
mean([1 : 1
mean([-1.0 : 1
5.75]) : 2
2.625 : 1
mean([F(3 : 1
F(1 : 4
21) : 4
F(5 : 3
Fraction(13 : 2
mean([D("0.5") : 1
D("0.75") : 1
D("0.625") : 1
D("0.375")]) : 1
Decimal('0.5625') : 1
outliers : 2
tendency : 2
"median()".The : 1
unbiased : 3
"mean(sample)" : 1
converges : 1
"mean(data)" : 1
μ : 3
statistics.fmean(data : 1
weights=None) : 2
fmean([3.5 : 1
5.25]) : 1
4.25 : 1
professor : 1
quizzes : 1
homework : 1
midterm : 1
30%: : 1
[85 : 1
92 : 2
91] : 1
[0.20 : 1
0.30 : 1
fmean(grades : 1
weights) : 1
87.6 : 1
statistics.geometric_mean(data) : 1
sum) : 1
round(geometric_mean([54 : 1
36]) : 1
36.0 : 1
statistics.harmonic_mean(data : 1
harmonic : 4
reciprocal : 1
reciprocals : 1
"3/(1/a : 1
1/b : 1
1/c)" : 1
averaging : 2
ratios : 1
rates : 3
car : 2
travels : 2
km : 4
km/hr : 4
harmonic_mean([40 : 2
60]) : 1
48.0 : 1
speeds-up : 1
journey : 1
weights=[5 : 1
30]) : 2
56.0 : 1
weighted : 1
"mean : 1
two" : 1
median([1 : 2
(supports : 1
addition) : 1
statistics.median_low(data) : 1
median_low([1 : 2
statistics.median_high(data) : 1
median_high([1 : 2
statistics.median_grouped(data : 1
interval=1) : 2
median_grouped([52 : 1
54]) : 1
midpoint : 5
0.5--1.5 : 1
1.5--2.5 : 1
2.5--3.5 : 1
3.5--4.5 : 1
median_grouped([1 : 3
interpolation: : 2
interval=2) : 1
"Statistics : 2
Behavioral : 1
Sciences" : 1
Frederick : 1
Gravetter : 1
Wallnau : 1
(8th : 1
SSMEDIAN : 1
Gnome : 1
Gnumeric : 1
statistics.mode(data) : 1
"min(multimode(data))" : 1
"max(multimode(data))" : 1
schools: : 1
mode([1 : 1
(non-numeric) : 1
mode(["red" : 1
"blue" : 4
"red" : 6
"green" : 1
"red"]) : 1
statistics.multimode(data) : 1
multimode('aabbbbccddddeeffffgg') : 1
'f'] : 1
multimode('') : 1
statistics.pstdev(data : 1
mu=None) : 2
variance) : 2
pstdev([1.5 : 1
2.75 : 3
4.75]) : 2
0.986893273527251 : 1
statistics.pvariance(data : 1
real-valued : 3
Variance : 2
(spread : 2
dispersion) : 2
*mu* : 12
[0.0 : 1
3.25] : 1
pvariance(data) : 1
recalculation: : 2
mean(data) : 2
pvariance(data : 1
mu) : 1
pvariance([D("27.5") : 1
D("30.25") : 4
D("34.5") : 2
D("41.75")]) : 2
Decimal('24.815') : 1
pvariance([F(1 : 1
72) : 1
σ² : 1
s² : 2
freedom.If : 1
statistics.stdev(data : 1
xbar=None) : 2
stdev([1.5 : 1
1.0810874155219827 : 1
statistics.variance(data : 1
*xbar* : 4
variance(data) : 1
variance(data : 1
m) : 1
variance([D("27.5") : 1
Decimal('31.01875') : 1
variance([F(1 : 1
Fraction(67 : 1
108) : 1
Bessel's : 1
correction : 2
N-1 : 1
distributed) : 1
variance.If : 1
statistics.quantiles(data : 1
percentiles : 2
"112" : 1
cut-point : 1
"104" : 1
quantiles : 2
"exclusive" : 1
percentiles: : 2
70% : 2
"inclusive" : 1
0th : 1
100th : 1
"(i : 4
0% : 1
Decile : 1
empirically : 1
[105 : 1
129 : 2
87 : 3
110 : 4
105 : 1
91 : 1
88 : 1
[round(q : 2
quantiles(data : 1
n=10)] : 1
[81.0 : 1
86.2 : 1
89.0 : 1
99.4 : 1
102.5 : 1
103.6 : 1
106.0 : 1
109.8 : 1
111.0] : 1
statistics.covariance(x : 1
covariance(x : 2
-7.5 : 2
covariance(z : 1
statistics.correlation(x : 1
strength : 1
correlation(x : 2
statistics.linear_regression(x : 1
proportional=False) : 1
slope : 4
noise* : 2
"slope" : 1
"intercept" : 1
"noise" : 1
films : 2
predict : 2
[1971 : 1
1979 : 2
1982 : 3
1983] : 1
films_total : 1
linear_regression(year : 1
films_total) : 1
round(slope : 1
intercept) : 1
*intercept* : 1
statistics.StatisticsError : 1
statistics-related : 1
Theorem : 1
statistics.NormalDist(mu=0.0 : 1
sigma=1.0) : 3
*NormalDist* : 1
*sigma* : 9
from_samples(data) : 1
dispersion : 1
samples(n : 1
seed=None) : 1
pdf(x) : 2
density : 2
(pdf) : 1
likelihood : 4
Mathematically : 3
"P(x : 1
x+dx) : 1
dx" : 1
*dx* : 1
"density") : 1
cdf(x) : 1
(cdf) : 1
"P(X : 1
inv_cdf(p) : 1
quantile : 1
percent-point : 1
P(X : 1
overlap(other) : 1
quantiles(n=4) : 1
zscore(x) : 1
Score : 1
stdev" : 1
scaling : 1
temperature_february : 2
NormalDist(5 : 1
Celsius : 1
NormalDist(mu=41.0 : 1
sigma=4.5) : 1
birth_weights : 2
NormalDist.from_samples([2.5 : 1
3.5]) : 1
drug_effects : 2
NormalDist(0.4 : 1
0.15) : 1
round(combined.mean : 1
round(combined.stdev : 1
SAT : 2
exams : 1
1060 : 3
195 : 1
1200 : 1
sat : 1
NormalDist(1060 : 1
195) : 1
sat.cdf(1200 : 1
sat.cdf(1100 : 1
round(fraction : 1
scores: : 1
list(map(round : 2
sat.quantiles())) : 1
[928 : 1
1192] : 1
sat.quantiles(n=10))) : 1
[810 : 1
896 : 1
958 : 1
1011 : 2
1109 : 1
1162 : 1
1224 : 1
1310] : 1
analytically : 1
Monte : 1
Carlo : 1
simulation: : 1
model(x : 1
(3*x : 1
7*x*y : 1
5*y) : 1
(11 : 4
100_000 : 1
NormalDist(10 : 1
2.5).samples(n : 1
seed=3652260728) : 1
NormalDist(15 : 1
1.75).samples(n : 1
seed=4582495471) : 1
NormalDist(50 : 1
1.25).samples(n : 1
seed=6582483453) : 1
quantiles(map(model : 1
Z)) : 1
[1.4591308524824727 : 1
1.8035946855390597 : 1
2.175091447274739] : 1
Binomial : 1
conference : 2
750 : 2
attendees : 2
rooms : 1
Ruby : 2
65% : 1
0.65 : 1
Preference : 2
Room : 1
Approximation : 2
round(NormalDist(mu=n*p : 1
sigma=sqrt(n*p*q)).cdf(k : 1
0.8402 : 2
comb : 1
fsum : 1
round(fsum(comb(n : 1
p**r : 1
q**(n-r) : 1
range(k+1)) : 1
seed(8675309) : 1
trial(): : 3
choices(('Python' : 1
'Ruby') : 1
(p : 1
q) : 3
k=n).count('Python') : 1
mean(trial() : 1
range(10_000)) : 3
0.8398 : 1
Bayesian : 1
Classifier : 1
person's : 1
gender : 2
training : 1
"NormalDist": : 1
height_male : 1
NormalDist.from_samples([6 : 2
5.92 : 1
5.58 : 1
5.92]) : 1
height_female : 1
NormalDist.from_samples([5 : 1
5.42 : 1
weight_male : 1
NormalDist.from_samples([180 : 1
170 : 1
165]) : 1
weight_female : 1
NormalDist.from_samples([100 : 1
150]) : 1
foot_size_male : 1
NormalDist.from_samples([12 : 1
10]) : 1
foot_size_female : 1
9]) : 1
unknown: : 1
ht : 1
wt : 1
male : 1
posterior : 2
gender: : 1
prior_male : 1
prior_female : 1
posterior_male : 2
(prior_male : 1
height_male.pdf(ht) : 1
weight_male.pdf(wt) : 1
foot_size_male.pdf(fs)) : 1
posterior_female : 2
(prior_female : 1
height_female.pdf(ht) : 1
weight_female.pdf(wt) : 1
foot_size_female.pdf(fs)) : 1
prediction : 1
posteriori : 1
MAP: : 1
'male' : 1
'female' : 2
*************************************************** : 5
Lib/traceback.py : 1
"wrapper" : 1
traceback.print_tb(tb : 1
limit=None : 14
"sys.stderr"; : 1
traceback.print_exception(exc : 2
/[ : 4
tb] : 2
chain=True) : 7
"Traceback : 3
last):" : 3
*type(value)* : 1
*chain* : 2
traceback.print_exc(limit=None : 1
"print_exception(sys.exception() : 1
chain)" : 2
traceback.print_last(limit=None : 1
"print_exception(sys.last_type : 1
"sys.last_type") : 1
traceback.print_stack(f=None : 1
point) : 2
traceback.extract_tb(tb : 1
limit=None) : 5
processed" : 1
"pre-processed" : 1
stripped; : 2
traceback.extract_stack(f=None : 1
"extract_tb()" : 2
traceback.format_list(extracted_list) : 1
"extract_stack()" : 1
traceback.format_exception_only(exc : 1
traceback.format_exception(exc : 1
traceback.format_exc(limit=None : 1
"print_exc(limit)" : 1
traceback.format_tb(tb : 1
"format_list(extract_tb(tb : 1
limit))" : 2
traceback.format_stack(f=None : 1
"format_list(extract_stack(f : 1
traceback.clear_frames(tb) : 1
Clears : 1
traceback.walk_stack(f) : 1
"f.f_back" : 1
"StackSummary.extract()" : 2
traceback.walk_tb(tb) : 1
traceback.TracebackException(exc_type : 1
lookup_lines=True : 3
capture_locals=False : 1
compact=False) : 1
*lookup_lines* : 3
*capture_locals* : 3
__context__ : 1
__suppress_context__ : 1
__notes__ : 2
from_exception(exc : 1
capture_locals=False) : 2
print(* : 1
format(* : 1
format_exception_only() : 1
traceback.StackSummary : 1
extract(frame_gen : 1
"walk_tb()") : 1
*frame_gen* : 1
from_list(a_list) : 1
format_frame_summary(frame_summary) : 1
"StackSummary.format()" : 1
traceback.FrameSummary(filename : 1
lookup_line=True : 1
line=None) : 3
*lookup_line* : 1
run_user_code(envdir): : 1
input(">>> : 1
exec(source : 1
envdir) : 1
print("Exception : 1
code:") : 1
print("-"*60) : 2
traceback.print_exc(file=sys.stdout) : 1
envdir : 1
run_user_code(envdir) : 1
lumberjack(): : 1
bright_side_of_life() : 3
bright_side_of_life(): : 1
tuple()[0] : 1
lumberjack() : 4
print("*** : 8
print_tb:") : 1
traceback.print_tb(exc.__traceback__ : 1
limit=1 : 1
file=sys.stdout) : 3
print_exception:") : 1
limit=2 : 1
print_exc:") : 1
traceback.print_exc(limit=2 : 1
format_exc : 2
line:") : 1
formatted_lines : 1
traceback.format_exc().splitlines() : 1
print(formatted_lines[0]) : 1
print(formatted_lines[-1]) : 1
format_exception:") : 1
print(repr(traceback.format_exception(exc))) : 1
extract_tb:") : 1
print(repr(traceback.extract_tb(exc.__traceback__))) : 1
format_tb:") : 1
print(repr(traceback.format_tb(exc.__traceback__))) : 1
tb_lineno:" : 1
exc.__traceback__.tb_lineno) : 1
print_tb: : 1
"<doctest...>" : 5
print_exception: : 1
lumberjack : 3
print_exc: : 1
format_exception: : 1
['Traceback : 1
last):\n' : 1
"<doctest : 6
default[0]>" : 6
<module>\n : 4
lumberjack()\n' : 2
lumberjack\n : 2
bright_side_of_life()\n' : 2
bright_side_of_life\n : 2
tuple()[0]\n : 2
~~~~~~~^^^\n' : 1
'IndexError: : 1
range\n'] : 2
extract_tb: : 1
[<FrameSummary : 1
<doctest...> : 3
<module>> : 1
<FrameSummary : 2
lumberjack> : 1
bright_side_of_life>] : 1
format_tb: : 1
~~~~~~~^^^\n'] : 1
tb_lineno: : 1
stack: : 14
another_function(): : 1
lumberstack() : 2
lumberstack(): : 1
traceback.print_stack() : 2
print(repr(traceback.extract_stack())) : 1
print(repr(traceback.format_stack())) : 1
another_function() : 2
"<doctest>" : 6
another_function : 1
lumberstack : 1
[('<doctest>' : 1
'<module>' : 2
'another_function()') : 1
('<doctest>' : 2
'another_function' : 1
'lumberstack()') : 1
'lumberstack' : 1
'print(repr(traceback.extract_stack()))')] : 1
another_function()\n' : 1
another_function\n : 1
lumberstack()\n' : 1
lumberstack\n : 1
print(repr(traceback.format_stack()))\n'] : 1
traceback.format_list([('spam.py' : 1
'spam.eggs()') : 1
('eggs.py' : 1
"bacon"')]) : 1
spam.eggs()\n' : 1
"eggs.py" : 1
eggs\n : 1
"bacon"\n'] : 1
an_error : 1
IndexError('tuple : 1
range') : 1
traceback.format_exception_only(type(an_error) : 1
an_error) : 1
['IndexError: : 1
Lib/http/client.py : 1
http.client.HTTPConnection(host : 1
port=None[ : 1
timeout] : 5
blocksize=8192) : 2
"host:port" : 2
(80) : 1
attempts) : 1
port: : 1
h2 : 2
http.client.HTTPConnection('www.python.org:80') : 1
h3 : 1
http.client.HTTPConnection('www.python.org' : 2
h4 : 1
timeout=10) : 1
http.client.HTTPSConnection(host : 1
key_file=None : 1
cert_file=None[ : 1
context=None : 4
check_hostname=None : 1
"443" : 1
"ssl.HAS_SNI" : 2
3.4.3: : 2
unverified : 1
"ssl._create_unverified_context()" : 1
"ssl.SSLContext.post_handshake_auth" : 1
*cert_file* : 3
"set_alpn_protocol()" : 2
*key_file* : 2
you.The : 1
http.client.HTTPResponse(sock : 1
debuglevel=0 : 1
method=None : 1
url=None) : 1
http.client.parse_headers(fp) : 1
"HTTPResponse.msg" : 1
"http.server.BaseHTTPRequestHandler.headers") : 1
start-line : 1
"Name: : 1
http.client.HTTPException : 1
http.client.NotConnected : 1
"HTTPException" : 9
http.client.UnknownProtocol : 1
http.client.UnknownTransferEncoding : 1
http.client.UnimplementedFileMode : 1
http.client.IncompleteRead : 1
http.client.ImproperConnectionState : 1
http.client.CannotSendRequest : 1
"ImproperConnectionState" : 3
http.client.CannotSendHeader : 1
http.client.ResponseNotReady : 1
http.client.BadStatusLine : 1
http.client.LineTooLong : 1
"BadStatusLine" : 1
"BadStatusLine""('')" : 1
http.client.HTTP_PORT : 1
"80") : 1
http.client.HTTPS_PORT : 1
"443") : 1
http.client.responses : 1
"http.client.responses[http.client.NOT_FOUND]" : 1
Found'" : 1
HTTPConnection.request(method : 1
body=None : 1
headers={} : 2
encode_chunked=False) : 2
Transfer-Encoding : 3
("PUT" : 1
"PATCH") : 1
chunk-encoded : 5
*encode_chunked* : 5
Transfer- : 1
HTTPConnection.set_debuglevel(level) : 1
"debuglevel" : 2
HTTPConnection.set_tunnel(host : 1
headers=None) : 4
Tunnelling : 1
tunneled : 1
tunnel : 1
http.client.HTTPSConnection("localhost" : 1
conn.set_tunnel("www.python.org") : 1
conn.request("HEAD","/index.html") : 1
HTTPConnection.connect() : 1
"http.client.connect" : 1
HTTPConnection.close() : 1
HTTPConnection.blocksize : 1
HTTPConnection.putrequest(method : 1
skip_host=False : 1
skip_accept_encoding=False) : 1
("HTTP/1.1") : 1
"Accept- : 1
Encoding:" : 1
*skip_host* : 1
*skip_accept_encoding* : 1
HTTPConnection.putheader(header : 1
argument[ : 1
HTTPConnection.endheaders(message_body=None : 1
*message_body* : 8
7230** : 2
chunk-encoder : 1
HTTPConnection.send(data) : 1
"getresponse()" : 1
"http.client.send" : 1
HTTPResponse.read([amt]) : 1
*amt* : 1
HTTPResponse.readinto(b) : 1
HTTPResponse.getheader(name : 1
HTTPResponse.getheaders() : 1
(header : 1
HTTPResponse.fileno() : 1
HTTPResponse.msg : 1
HTTPResponse.version : 1
HTTPResponse.url : 1
HTTPResponse.headers : 1
HTTPResponse.status : 1
HTTPResponse.reason : 1
Reason : 1
HTTPResponse.debuglevel : 1
HTTPResponse.closed : 1
HTTPResponse.geturl() : 1
HTTPResponse.info() : 1
HTTPResponse.getcode() : 1
http.client.HTTPSConnection("www.python.org") : 2
conn.request("GET" : 3
r1 : 3
print(r1.status : 1
r1.reason) : 1
data1 : 1
r1.read() : 1
r1.read(200): : 1
print(repr(chunk)) : 1
b'<!doctype : 1
html>\n<!--[if".. : 1
http.client.HTTPSConnection("docs.python.org") : 1
"/parrot.spam") : 1
r2 : 2
print(r2.status : 1
r2.reason) : 1
data2 : 1
r2.read() : 1
conn.request("HEAD" : 1
print(res.status : 1
res.reason) : 1
res.read() : 1
print(len(data)) : 1
urllib.parse.urlencode({'@number': : 1
12524 : 1
'@type': : 1
'issue' : 1
'@action': : 1
'show'}) : 1
{"Content-type": : 1
"application/x-www-form-urlencoded" : 1
"Accept": : 1
"text/plain"} : 1
http.client.HTTPConnection("bugs.python.org") : 1
conn.request("POST" : 1
print(response.status : 2
response.reason) : 2
302 : 4
b'Redirecting : 1
<a : 4
href="https://bugs.python.org/issue12524">https://bugs.python.org/issue12524</a>' : 1
BODY : 2
http://localhost:8080/file : 1
"***filecontents***" : 1
http.client.HTTPConnection("localhost" : 1
conn.request("PUT" : 1
"/file" : 2
BODY) : 1
Lib/curses/ascii.py : 1
+----------------+------------------------------------------------+ : 37
|================|================================================| : 1
"SOH" : 1
heading : 33
"STX" : 1
"ETX" : 1
"EOT" : 1
"ENQ" : 1
Enquiry : 1
"ACK" : 2
Acknowledgement : 1
"BEL" : 1
"BS" : 1
"TAB" : 1
"HT" : 1
"TAB": : 1
"Horizontal : 1
"LF" : 1
"LF": : 1
"VT" : 1
"FF" : 1
"CR" : 1
Shift-out : 1
"SI" : 1
Shift-in : 1
"DLE" : 1
Data-link : 1
"DC1" : 1
XON : 1
"DC2" : 1
block-mode : 2
"DC3" : 1
XOFF : 1
"DC4" : 1
"NAK" : 1
acknowledgement : 1
"SYN" : 1
Synchronous : 1
"ETB" : 1
"CAN" : 1
"EM" : 1
"SUB" : 1
"ESC" : 1
"FS" : 1
"GS" : 1
"RS" : 1
"US" : 1
"SP" : 2
"DEL" : 1
mnemonics : 2
teleprinter : 1
predate : 1
patterned : 1
curses.ascii.isalnum(c) : 1
"isalpha(c) : 1
isdigit(c)" : 1
curses.ascii.isalpha(c) : 1
"isupper(c) : 1
islower(c)" : 1
curses.ascii.isascii(c) : 1
curses.ascii.isblank(c) : 1
curses.ascii.iscntrl(c) : 1
0x00 : 1
0x1f : 2
0x7f) : 1
curses.ascii.isdigit(c) : 1
"'9'" : 1
string.digits" : 1
curses.ascii.isgraph(c) : 1
curses.ascii.islower(c) : 1
curses.ascii.isprint(c) : 1
curses.ascii.ispunct(c) : 1
curses.ascii.isspace(c) : 1
white-space : 1
curses.ascii.isupper(c) : 1
curses.ascii.isxdigit(c) : 1
string.hexdigits" : 1
curses.ascii.isctrl(c) : 1
(ordinal : 2
curses.ascii.ismeta(c) : 1
single-character : 4
curses.ascii.ascii(c) : 1
curses.ascii.ctrl(c) : 1
bitwise-anded : 1
0x1f) : 1
curses.ascii.alt(c) : 1
bitwise-ored : 1
0x80) : 1
curses.ascii.unctrl(c) : 1
(0x00--0x1f) : 1
("'^'") : 1
(0x7f) : 1
"'^?'" : 1
(0x80) : 1
curses.ascii.controlnames : 1
33-element : 1
thirty-two : 1
(NUL) : 1
(US) : 1
Lib/pkgutil.py : 1
pkgutil.ModuleInfo(module_finder : 1
ispkg) : 1
pkgutil.extend_path(path : 1
comprise : 1
Intended : 1
"__init__.py": : 1
extend_path : 1
extend_path(__path__ : 1
__name__) : 2
"*.pkg" : 3
"*.pth" : 1
feature.) : 1
Items : 5
pkgutil.ImpImporter(dirname=None) : 1
"classic" : 4
"ImpImporter" : 1
pkgutil.ImpLoader(fullname : 1
*Loader* : 1
pkgutil.find_loader(fullname) : 1
pkgutil.get_importer(path_item) : 1
*path_item* : 1
pkgutil.get_loader(module_or_name) : 1
*module_or_name* : 1
pkgutil.iter_importers(fullname='') : 1
fullname : 3
"sys.path_hooks") : 1
pkgutil.iter_modules(path=None : 1
prefix='') : 1
Yields : 2
pkgutil.walk_packages(path=None : 1
prefix='' : 1
onerror=None) : 1
modules!) : 1
imported) : 2
"ImportError"s : 1
walk_packages() : 1
walk_packages(ctypes.__path__ : 1
ctypes.__name__ : 1
pkgutil.get_data(package : 1
("foo.bar") : 1
os.path.dirname(sys.modules[package].__file__) : 1
open(os.path.join(d : 1
'rb').read() : 1
pkgutil.resolve_name(name) : 1
bpo-12915) : 1
Pyramid : 1
pseudo-regexes: : 1
"W(.W)*" : 1
"W(.W)*:(W(.W)*)?" : 1
colon: : 2
Apport : 1
signal-safe : 1
heap) : 1
tracebacks: : 1
reversed: : 1
faulthandler.dump_traceback(file=sys.stderr : 1
all_threads=True) : 2
*all_threads* : 4
"traceback.print_tb()" : 1
faulthandler.enable(file=sys.stderr : 1
faulthandler.disable() : 1
faulthandler.is_enabled() : 1
faulthandler.dump_traceback_later(timeout : 1
repeat=False : 1
file=sys.stderr : 2
"_exit()" : 5
status=1 : 1
buffers.) : 1
sub-second : 2
"cancel_dump_traceback_later()" : 1
watchdog : 1
faulthandler.cancel_dump_traceback_later() : 1
faulthandler.register(signum : 1
all_threads=True : 1
chain=False) : 1
unregistered : 2
"unregister()": : 1
faulthandler.unregister(signum) : 1
ctypes; : 1
ctypes.string_at(0)" : 1
0x00007fb899f39700 : 1
Lib/linecache.py : 1
"tokenize.open()" : 1
"tokenize.detect_encoding()" : 1
linecache.getline(filename : 1
module_globals=None) : 1
*module_globals* : 3
"get_source" : 1
"get_source()" : 1
returned) : 3
linecache.clearcache() : 1
linecache.checkcache(filename=None) : 1
linecache.lazycache(filename : 1
module_globals) : 1
linecache.getline(linecache.__file__ : 1
sys\n' : 1
Lib/shlex.py : 1
syntaxes : 5
minilanguages : 1
shlex.split(s : 1
comments=False : 1
posix=True) : 2
*comments* : 1
"commenters" : 1
*posix* : 3
shlex.join(split_command) : 1
*split_command* : 1
print(join(['echo' : 1
'-n' : 1
'Multiple : 2
words'])) : 1
words' : 1
shell-escaped : 2
"quote()") : 1
shlex.quote(s) : 1
**only : 1
shells**.The : 1
vulnerability.Consider : 1
unsafe: : 1
'somefile; : 4
rm : 6
~' : 2
'ls : 3
{}'.format(filename) : 1
print(command) : 2
boom : 1
somefile; : 1
plug : 1
hole: : 1
{}'.format(quote(filename)) : 1
remote_command : 3
'ssh : 1
{}'.format(quote(command)) : 1
print(remote_command) : 1
'"'"'somefile; : 1
~'"'"'' : 1
"split()": : 1
split(remote_command) : 1
['ssh' : 1
'home' : 1
~'"] : 1
split(remote_command[-1]) : 1
['ls' : 1
~'] : 1
shlex.shlex(instream=None : 1
infile=None : 2
posix=False : 1
punctuation_chars=False) : 1
file-/stream-like : 1
*instream* : 1
"();<>|&" : 2
(considered : 1
"wordchars" : 5
".ini" : 1
shlex.get_token() : 1
"push_token()" : 1
"eof" : 2
shlex.push_token(str) : 1
shlex.read_token() : 1
pushback : 1
ordinarily : 1
completeness.) : 1
shlex.sourcehook(filename) : 1
"file.h"") : 1
initialization!) : 1
'close' : 3
sourced : 1
stacking : 4
"push_source()" : 1
"pop_source()" : 1
shlex.push_source(newstream : 1
newfile=None) : 1
"sourcehook()" : 1
shlex.pop_source() : 1
last-pushed : 1
lexer : 1
shlex.error_leader(infile=None : 1
label; : 1
"'"%s" : 1
%d: : 1
parseable : 2
shlex.commenters : 1
beginners : 1
beginner : 1
shlex.wordchars : 1
"punctuation_chars" : 8
"~-./*?=" : 2
"whitespace_split" : 4
shlex.whitespace : 1
carriage-return : 1
shlex.escape : 1
shlex.quotes : 1
shell.) : 1
shlex.escapedquotes : 1
"quotes" : 1
shlex.whitespace_split : 1
shlex.infile : 1
shlex.instream : 1
shlex.source : 1
lexical-level : 1
shlex.debug : 1
shlex.lineno : 1
(count : 2
shlex.token : 1
shlex.eof : 1
Token : 53
shlex.punctuation_chars : 1
Runs : 2
'>>>' : 1
Quote : 1
("Do"Not"Separate" : 1
"Do"Not"Separate"); : 1
recognized; : 1
Enclosing : 4
quotes; : 2
(""Do"Separate" : 1
""Do"" : 1
"Separate"); : 1
whitespaces; : 1
("''"); : 1
Quotes : 1
(""Do"Not"Separate"" : 1
"DoNotSeparate"); : 1
Non-quoted : 1
"'\'") : 1
follows; : 1
"escapedquotes" : 2
""'"") : 1
"'"'") : 1
Quoted : 1
"bash" : 1
"dash" : 1
"sh" : 1
multiplicity : 1
b; : 1
e; : 1
>'abc'; : 1
(def : 1
\"ghi\")" : 1
shlex.shlex(text : 2
s.whitespace_split : 2
list(s) : 4
'b;' : 1
'e;' : 1
'>abc;' : 1
'(def' : 1
'ghi)'] : 1
posix=True : 1
punctuation_chars=True) : 2
'ghi' : 3
punctuation_chars : 1
constitute : 2
shlex.shlex("a : 1
punctuation_chars="|") : 1
wildcards) : 1
"--color=auto") : 1
Hence: : 1
shlex.shlex('~/a : 1
b-c : 1
--color=auto : 1
*.py?' : 1
['~/a' : 1
'b-c' : 1
'--color=auto' : 1
'*.py?'] : 1
negate : 3
"posix=True" : 1
"posix=False" : 1
"shlex".) : 1
Lib/token.py : 1
(terminal : 1
token.tok_name : 1
token.ISTERMINAL(x) : 1
token.ISNONTERMINAL(x) : 1
non-terminal : 1
token.ISEOF(x) : 1
token.ENDMARKER : 1
token.NAME : 1
token.NUMBER : 1
token.STRING : 1
token.NEWLINE : 1
token.INDENT : 1
token.DEDENT : 1
token.LPAR : 1
""("" : 1
token.RPAR : 1
"")"" : 1
token.LSQB : 1
""["" : 1
token.RSQB : 1
""]"" : 1
token.COLON : 1
token.COMMA : 1
token.SEMI : 1
"";"" : 1
token.PLUS : 1
""+"" : 1
token.MINUS : 1
token.STAR : 1
token.SLASH : 1
token.VBAR : 1
""|"" : 1
token.AMPER : 1
""&"" : 1
token.LESS : 1
token.GREATER : 1
token.EQUAL : 1
""="" : 1
token.DOT : 1
token.PERCENT : 1
""%"" : 1
token.LBRACE : 1
""{"" : 1
token.RBRACE : 1
""}"" : 1
token.EQEQUAL : 1
token.NOTEQUAL : 1
token.LESSEQUAL : 1
token.GREATEREQUAL : 1
token.TILDE : 1
""~"" : 1
token.CIRCUMFLEX : 1
""^"" : 1
token.LEFTSHIFT : 1
""<<"" : 1
token.RIGHTSHIFT : 1
"">>"" : 1
token.DOUBLESTAR : 1
token.PLUSEQUAL : 1
""+="" : 1
token.MINEQUAL : 1
""-="" : 1
token.STAREQUAL : 1
""*="" : 1
token.SLASHEQUAL : 1
""/="" : 1
token.PERCENTEQUAL : 1
""%="" : 1
token.AMPEREQUAL : 1
""&="" : 1
token.VBAREQUAL : 1
""|="" : 1
token.CIRCUMFLEXEQUAL : 1
""^="" : 1
token.LEFTSHIFTEQUAL : 1
""<<="" : 1
token.RIGHTSHIFTEQUAL : 1
"">>="" : 1
token.DOUBLESTAREQUAL : 1
""**="" : 1
token.DOUBLESLASH : 1
""//"" : 1
token.DOUBLESLASHEQUAL : 1
""//="" : 1
token.AT : 1
""@"" : 1
token.ATEQUAL : 1
""@="" : 1
token.RARROW : 1
""->"" : 1
token.ELLIPSIS : 1
""..."" : 2
token.COLONEQUAL : 1
"":="" : 1
token.OP : 1
token.AWAIT : 1
token.ASYNC : 1
token.TYPE_IGNORE : 1
token.TYPE_COMMENT : 2
token.SOFT_KEYWORD : 1
token.ERRORTOKEN : 1
token.N_TOKENS : 1
token.NT_OFFSET : 1
token.COMMENT : 1
token.NL : 1
non-terminating : 1
token.ENCODING : 1
"AWAIT" : 3
"ASYNC" : 3
"TYPE_COMMENT" : 1
"TYPE_IGNORE" : 1
"COLONEQUAL" : 1
************************************************************ : 1
Lib/xml/dom/pulldom.py : 1
"pull : 1
parser" : 1
DOM-accessible : 1
xml.dom.pulldom : 1
make_parser : 1
xml.sax.handler : 1
feature_external_ges : 1
make_parser() : 1
parser.setFeature(feature_external_ges : 1
parse(filename : 1
parser=parser) : 1
pulldom : 3
pulldom.parse('sales_items.xml') : 1
doc: : 2
pulldom.START_ELEMENT : 2
node.tagName : 2
'item': : 1
int(node.getAttribute('price')) : 1
50: : 3
doc.expandNode(node) : 2
print(node.toxml()) : 3
"event" : 1
"START_ELEMENT" : 2
"END_ELEMENT" : 2
"START_DOCUMENT" : 2
"END_DOCUMENT" : 1
"CHARACTERS" : 2
"PROCESSING_INSTRUCTION" : 1
"IGNORABLE_WHITESPACE" : 1
"xml.dom.minidom.Document" : 2
"xml.dom.minidom.Element" : 2
"xml.dom.minidom.Text" : 2
"flat" : 1
"tree" : 1
context-related : 1
"DOMEventStream.expandNode()" : 1
DOM-related : 1
xml.dom.pulldom.PullDom(documentFactory=None) : 1
"xml.sax.handler.ContentHandler" : 2
xml.dom.pulldom.SAX2DOM(documentFactory=None) : 1
xml.dom.pulldom.parse(stream_or_string : 1
"DOMEventStream" : 2
*stream_or_string* : 1
xml.dom.pulldom.parseString(string : 1
xml.dom.pulldom.default_bufsize : 1
xml.dom.pulldom.DOMEventStream(stream : 1
getEvent() : 1
"expandNode()" : 1
expandNode(node) : 1
Expands : 2
'<html><title>Foo</title> : 1
<p>Some : 1
<div>and : 2
more</div></p> : 1
</html>' : 1
pulldom.parseString(xml) : 1
'<p/>' : 1
'<p>Some : 1
more</div></p>' : 1
Lib/uu.py : 1
writing; : 1
uu.encode(in_file : 1
out_file : 1
backtick=False) : 2
Uuencode : 1
*in_file* : 3
*out_file* : 4
uuencoded : 3
uu.decode(in_file : 1
out_file=None : 1
quiet=False) : 4
"uu.Error" : 1
uuencoder : 1
*quiet* : 16
uu.Error : 1
578**) : 1
+--------------------------------+---------------------------------------------------------+-----------------+ : 177
|================================|=========================================================|=================| : 1
array.__new__ : 1
"typecode" : 2
"initializer" : 2
builtins.breakpoint : 1
builtins.id : 1
builtins.input : 1
"prompt" : 6
builtins.input/result : 1
code.__new__ : 1
cpython.PyInterpreterState_Cl : 1
ear : 1
cpython.PyInterpreterState_New : 1
cpython._PySys_ClearAuditHooks : 1
cpython.run_command : 1
cpython.run_file : 1
cpython.run_interactivehook : 1
cpython.run_module : 1
cpython.run_startup : 1
cpython.run_stdin : 1
ctypes.addressof : 1
ctypes.call_function : 1
"func_pointer" : 1
ctypes.cdata : 1
ctypes.cdata/buffer : 1
[1][2] : 24
ctypes.create_string_buffer : 1
ctypes.create_unicode_buffer : 1
ctypes.dlopen : 1
ctypes.dlsym : 1
ctypes.dlsym/handle : 1
ctypes.get_errno : 1
ctypes.get_last_error : 1
ctypes.seh_exception : 1
ctypes.set_errno : 1
ctypes.set_last_error : 1
ctypes.string_at : 1
ctypes.wstring_at : 1
ensurepip.bootstrap : 1
"code_object" : 1
fcntl.fcntl : 1
fcntl.flock : 1
fcntl.ioctl : 1
fcntl.lockf : 1
ftplib.connect : 1
ftplib.sendcmd : 1
function.__new__ : 1
gc.get_objects : 1
gc.get_referents : 1
gc.get_referrers : 1
glob.glob : 1
"pathname" : 7
"recursive" : 6
glob.glob/2 : 1
http.client.connect : 1
http.client.send : 1
imaplib.open : 1
imaplib.send : 1
marshal.dumps : 1
marshal.load : 1
marshal.loads : 1
mmap.__new__ : 1
"access" : 11
msvcrt.get_osfhandle : 1
msvcrt.locking : 1
msvcrt.open_osfhandle : 1
nntplib.connect : 1
nntplib.putline : 1
object.__delattr__ : 1
object.__getattr__ : 1
object.__setattr__ : 1
[1][2][3] : 8
os.add_dll_directory : 1
os.chdir : 2
os.chflags : 1
os.chmod : 1
os.chown : 1
os.exec : 1
os.forkpty : 1
os.fwalk : 1
"top" : 7
"topdown" : 4
"follow_symlinks" : 2
os.getxattr : 1
"attribute" : 7
os.kill : 1
"sig" : 4
os.killpg : 1
"pgid" : 2
os.link : 1
"src_dir_fd" : 6
"dst_dir_fd" : 6
os.listdir : 1
os.listxattr : 1
os.lockf : 1
os.mkdir : 1
os.posix_spawn : 1
os.putenv : 1
os.remove : 1
os.removexattr : 1
os.rename : 1
os.rmdir : 1
os.scandir : 1
os.setxattr : 1
os.spawn : 1
os.startfile/2 : 1
"show_cmd" : 2
os.unsetenv : 1
os.utime : 1
"ns" : 4
pathlib.Path.glob : 1
pathlib.Path.rglob : 1
pdb.Pdb : 1
pickle.find_class : 1
poplib.connect : 1
poplib.putline : 1
resource.prlimit : 1
setopencodehook : 1
shutil.chown : 1
shutil.copyfile : 1
shutil.copymode : 1
shutil.copystat : 1
shutil.make_archive : 1
shutil.move : 1
signal.pthread_kill : 1
smtplib.connect : 1
smtplib.send : 1
socket.__new__ : 1
socket.bind : 1
socket.connect : 1
socket.getaddrinfo : 1
socket.gethostbyaddr : 1
socket.gethostbyname : 1
socket.gethostname : 1
socket.getnameinfo : 1
socket.getservbyname : 1
socket.getservbyport : 1
socket.sendmsg : 1
socket.sendto : 1
socket.sethostname : 1
sqlite3.connect : 1
"database" : 3
sqlite3.connect/handle : 1
"connection_handle" : 2
sqlite3.enable_load_extension : 1
"connection" : 5
sqlite3.load_extension : 1
sys._current_exceptions : 1
sys._current_frames : 1
sys._getframe : 1
sys.addaudithook : 1
sys.excepthook : 1
sys.set_asyncgen_hooks_finali : 1
zer : 1
sys.set_asyncgen_hooks_firsti : 1
ter : 1
syslog.closelog : 1
syslog.openlog : 1
"logoption" : 2
"facility" : 2
syslog.setlogmask : 1
"maskpri" : 2
syslog.syslog : 1
"priority" : 2
telnetlib.Telnet.open : 1
telnetlib.Telnet.write : 1
tempfile.mkdtemp : 1
"fullpath" : 7
tempfile.mkstemp : 1
urllib.Request : 1
"fullurl" : 2
webbrowser.open : 1
winreg.ConnectRegistry : 1
"computer_name" : 2
winreg.CreateKey : 1
"sub_key" : 16
winreg.DeleteKey : 1
winreg.DeleteValue : 1
winreg.DisableReflectionKey : 1
winreg.EnableReflectionKey : 1
winreg.EnumKey : 1
winreg.EnumValue : 1
winreg.ExpandEnvironmentStrin : 1
gs : 1
winreg.LoadKey : 1
"file_name" : 5
winreg.OpenKey : 1
winreg.OpenKey/result : 1
winreg.PyHKEY.Detach : 1
winreg.QueryInfoKey : 1
winreg.QueryReflectionKey : 1
winreg.QueryValue : 1
"value_name" : 3
winreg.SaveKey : 1
winreg.SetValue : 1
+----------------------------+---------------------------------------------+ : 9
|============================|=============================================| : 1
_winapi.CreateFile : 1
"desired_access" : 2
"share_mode" : 1
"creation_disposition" : 1
"flags_and_attributes" : 1
_winapi.CreateJunction : 1
"src_path" : 1
"dst_path" : 1
_winapi.CreateNamedPipe : 1
"open_mode" : 1
"pipe_mode" : 1
_winapi.CreatePipe : 1
_winapi.CreateProcess : 1
"application_name" : 1
"command_line" : 1
"current_directory" : 1
_winapi.OpenProcess : 1
"process_id" : 1
_winapi.TerminateProcess : 1
"exit_code" : 1
ctypes.PyObj_FromPtr : 1
Lib/fileinput.py : 1
fileinput.input(encoding="utf-8"): : 1
"sys.stdin.seek(0)") : 1
closed; : 2
"FileInput()" : 1
"hook_compressed()" : 1
fileinput.input(files=None : 1
inplace=False : 2
backup='' : 2
openhook=None : 2
fileinput.input(files=('spam.txt' : 1
'eggs.txt') : 1
"fileinput.input()"; : 1
fileinput.filename() : 1
fileinput.fileno() : 1
fileinput.lineno() : 1
fileinput.filelineno() : 1
fileinput.isfirstline() : 1
fileinput.isstdin() : 1
fileinput.nextfile() : 1
any); : 2
fileinput.close() : 1
fileinput.FileInput(files=None : 1
"filename()" : 1
"lineno()" : 1
"filelineno()" : 1
"isfirstline()" : 1
"isstdin()" : 1
"nextfile()" : 1
*inplace* : 1
FileInput(files=('spam.txt' : 1
'eggs.txt')) : 1
process(input) : 1
**Optional : 1
filtering:** : 1
silently) : 1
*backup* : 1
"backup='.<some : 1
extension>'") : 1
around; : 1
"'.bak'" : 1
fileinput.hook_compressed(filename : 1
Transparently : 1
"'.gz'" : 2
"'.bz2'") : 1
"'.bz2'" : 1
decompression) : 2
"fi : 2
fileinput.FileInput(openhook=fileinput.hook_compressed : 1
encoding="utf-8")" : 1
fileinput.hook_encoded(encoding : 1
fileinput.FileInput(openhook=fileinput.hook_encoded("utf-8" : 1
"surrogateescape"))" : 1
Lib/ensurepip : 1
453**: : 1
upgrade" : 2
active) : 2
"--root : 1
<dir>": : 1
"--user": : 1
"ensurepip") : 1
"--altinstall": : 1
"--default-pip": : 1
ensurepip.version() : 1
ensurepip.bootstrap(root=None : 1
upgrade=False : 2
user=False : 1
altinstall=False : 1
default_pip=False : 1
verbosity=0) : 1
Bootstraps : 1
*root* : 4
*upgrade* : 1
*altinstall* : 2
*default_pip* : 2
"ensurepip.bootstrap" : 1
"pip") : 1
Intel/DVI : 4
ADPCM : 10
audioop.error : 1
audioop.add(fragment1 : 1
fragment2 : 1
Samples : 3
audioop.adpcm2lin(adpcmfragment : 1
"lin2adpcm()" : 2
"(sample : 1
newstate)" : 3
audioop.alaw2lin(fragment : 1
audioop.avg(fragment : 1
audioop.avgpp(fragment : 1
peak-peak : 2
audioop.bias(fragment : 1
bias) : 1
audioop.byteswap(fragment : 1
"Byteswap" : 2
audioop.cross(fragment : 1
crossings : 1
audioop.findfactor(fragment : 1
*F* : 1
"rms(add(fragment : 1
mul(reference : 1
-F)))" : 1
*fragment* : 5
"len(fragment)" : 2
audioop.findfit(fragment : 1
fragment) : 7
(conceptually) : 1
"findfactor()" : 2
factor)" : 1
(integer) : 1
*factor* : 2
(floating-point) : 1
audioop.findmax(fragment : 1
bytes!) : 1
energy : 1
"rms(fragment[i*2:(i+length)*2])" : 1
audioop.getsample(fragment : 1
audioop.lin2adpcm(fragment : 1
(varying) : 1
IMA : 1
"(adpcmfrag : 1
*newstate* : 2
*adpcmfrag* : 1
4-bit : 1
audioop.lin2alaw(fragment : 1
audioop.lin2lin(fragment : 1
newwidth) : 1
2- : 1
3- : 1
.WAV : 1
new_frames : 2
audioop.lin2lin(frames : 1
old_width : 1
audioop.bias(new_frames : 1
128) : 1
audioop.lin2ulaw(fragment : 1
audioop.max(fragment : 1
*absolute : 1
audioop.maxpp(fragment : 1
audioop.minmax(fragment : 1
audioop.mul(fragment : 1
factor) : 1
audioop.ratecv(fragment : 1
nchannels : 2
inrate : 1
outrate : 1
state[ : 1
weightA[ : 1
weightB]]) : 1
"(newfragment : 1
"ratecv()" : 1
*weightA* : 1
*weightB* : 1
audioop.reverse(fragment : 1
audioop.rms(fragment : 1
root-mean-square : 1
"sqrt(sum(S_i^2)/n)" : 1
audioop.tomono(fragment : 1
lfactor : 3
rfactor) : 3
*lfactor* : 2
*rfactor* : 2
audioop.tostereo(fragment : 1
audioop.ulaw2lin(fragment : 1
mul_stereo(sample : 1
rfactor): : 1
lsample : 3
audioop.tomono(sample : 2
rsample : 4
audioop.mul(lsample : 1
lfactor) : 1
audioop.mul(rsample : 1
audioop.tostereo(lsample : 1
audioop.tostereo(rsample : 1
audioop.add(lsample : 1
loss) : 1
"lin2adpcm()") : 1
coder) : 1
"struct.Struct" : 1
coders : 2
misinterpreted : 1
"find*()" : 1
energetic : 1
echocancel(outputdata : 1
inputdata): : 1
audioop.findmax(outputdata : 1
tenth : 2
out_test : 1
outputdata[pos*2:] : 1
in_test : 1
inputdata[pos*2:] : 1
ipos : 1
audioop.findfit(in_test : 1
out_test) : 2
cancellation): : 1
audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)] : 1
prefill : 2
'\0'*(pos+ipos)*2 : 1
postfill : 2
'\0'*(len(inputdata)-len(prefill)-len(outputdata)) : 1
outputdata : 2
audioop.mul(outputdata : 1
-factor) : 1
audioop.add(inputdata : 1
library" : 1
operators.) : 1
trace; : 1
hardware; : 1
out:" : 1
bored : 1
back) : 1
"random") : 1
"Availability: : 2
Unix" : 2
*Availability: : 1
2.27* : 1
(Emscripten) : 1
sandboxed : 1
inter-process : 1
(IPC) : 1
permission-related : 1
Emscripten-SDK : 1
WASI-SDK : 1
NodeJS : 1
wasmtime) : 1
standards; : 1
PyScript : 2
browsers' : 1
JavaScript's : 1
"XMLHttpRequest" : 1
"Fetch" : 1
Process-related : 1
("fork()" : 1
"execve()") : 2
("waitpid()") : 1
("kill()") : 1
WebSockets; : 1
Lib/wave.py : 1
"WAVE_FORMAT_PCM" : 1
"WAVE_FORMAT_EXTENSIBLE" : 1
subformat : 1
PCM : 3
wave.open(file : 1
"Wave_read" : 1
"Wave_write" : 1
"Wave_read.close()" : 1
"Wave_write.close()" : 1
wave.Error : 1
Wave_read.close() : 1
Wave_read.getnchannels() : 1
("1" : 2
Wave_read.getsampwidth() : 1
Wave_read.getframerate() : 1
Wave_read.getnframes() : 1
Wave_read.getcomptype() : 1
("'NONE'" : 1
Wave_read.getcompname() : 1
Wave_read.getparams() : 1
Wave_read.readframes(n) : 1
Wave_read.rewind() : 1
Wave_read.getmarkers() : 1
Wave_read.getmark(id) : 1
Wave_read.setpos(pos) : 1
Wave_read.tell() : 1
Wave_write.close() : 1
Wave_write.setnchannels(n) : 1
Wave_write.setsampwidth(n) : 1
Wave_write.setframerate(n) : 1
Wave_write.setnframes(n) : 1
seekable) : 1
Wave_write.setcomptype(type : 1
Wave_write.setparams(tuple) : 1
Wave_write.tell() : 1
"Wave_read.tell()" : 1
"Wave_read.setpos()" : 1
Wave_write.writeframesraw(data) : 1
Wave_write.writeframes(data) : 1
"wave.Error" : 1
*termios(3)* : 1
*termios* : 1
termios.tcgetattr(fd) : 3
"[iflag : 1
oflag : 1
cflag : 1
lflag : 1
ispeed : 1
ospeed : 1
cc]" : 1
*cc* : 2
(each : 2
"VMIN" : 1
"VTIME" : 1
termios.tcsetattr(fd : 3
"tcgetattr()" : 2
"TCSANOW" : 1
"TCSADRAIN" : 1
"TCSAFLUSH" : 1
termios.tcsendbreak(fd : 1
duration) : 2
*duration* : 3
0.25--0.5 : 1
termios.tcdrain(fd) : 1
termios.tcflush(fd : 1
*queue* : 4
queue: : 3
"TCIFLUSH" : 1
"TCOFLUSH" : 1
"TCIOFLUSH" : 1
termios.tcflow(fd : 1
action) : 1
"TCOOFF" : 1
"TCOON" : 1
"TCIOFF" : 1
"TCION" : 1
termios.tcgetwinsize(fd) : 1
"(ws_row : 2
ws_col)" : 2
"termios.TIOCGWINSZ" : 1
"termios.TIOCGSIZE" : 1
termios.tcsetwinsize(fd : 1
winsize) : 1
*winsize* : 1
"tcgetwinsize()" : 1
("termios.TIOCGWINSZ" : 1
"termios.TIOCSWINSZ"); : 1
("termios.TIOCGSIZE" : 1
"termios.TIOCSSIZE") : 1
getpass(prompt="Password: : 1
"): : 1
sys.stdin.fileno() : 1
new[3] : 2
~termios.ECHO : 1
lflags : 1
termios.TCSADRAIN : 2
new) : 2
passwd : 5
old) : 1
Lib/ipaddress.py : 1
subnet : 3
reference—for : 1
interfaces: : 1
ipaddress.ip_address(address) : 1
"IPv4Address" : 11
"IPv6Address" : 5
ipaddress.ip_address('192.168.0.1') : 1
IPv4Address('192.168.0.1') : 4
ipaddress.ip_address('2001:db8::') : 1
IPv6Address('2001:db8::') : 1
ipaddress.ip_network(address : 1
strict=True) : 15
ipaddress.ip_network('192.168.0.0/28') : 1
IPv4Network('192.168.0.0/28') : 1
ipaddress.ip_interface(address) : 1
"IPv4Interface" : 3
"IPv6Interface" : 2
ipaddress.IPv4Address(address) : 1
"AddressValueError" : 4
decimal-dot : 1
"192.168.0.1") : 1
(byte) : 1
tolerated : 3
ipaddress.IPv4Address('192.168.0.1') : 1
ipaddress.IPv4Address(3232235521) : 1
ipaddress.IPv4Address(b'\xC0\xA8\x00\x01') : 1
3.9.5: : 1
3.8.12: : 1
max_prefixlen : 4
exploded : 5
"str(addr)" : 2
Exposing : 1
reverse_pointer : 2
ipaddress.ip_address("127.0.0.1").reverse_pointer : 1
ipaddress.ip_address("2001:db8::1").reverse_pointer : 1
'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa' : 1
is_multicast : 4
3171** : 1
2373** : 3
is_private : 4
iana-ipv4-special-registry : 2
iana-ipv6-special- : 2
is_global : 3
is_unspecified : 4
5735** : 1
is_reserved : 4
is_loopback : 4
3330** : 1
is_link_local : 4
link-local : 1
3927** : 1
IPv4Address.__format__(fmt) : 1
"str.format" : 2
format(ipaddress.IPv4Address('192.168.0.1')) : 1
'192.168.0.1' : 4
'{:#b}'.format(ipaddress.IPv4Address('192.168.0.1')) : 1
'0b11000000101010000000000000000001' : 1
f'{ipaddress.IPv6Address("2001:db8::1000"):s}' : 1
'2001:db8::1000' : 1
format(ipaddress.IPv6Address('2001:db8::1000') : 1
'_X') : 1
'2001_0DB8_0000_0000_0000_0000_0000_1000' : 1
'{:#_n}'.format(ipaddress.IPv6Address('2001:db8::1000')) : 1
'0x2001_0db8_0000_0000_0000_0000_0000_1000' : 1
ipaddress.IPv6Address(address) : 1
*exploded* : 1
(longhand) : 1
(shorthand : 1
""0000:0000:0000:0000:0000:0abc:0007:0def"" : 1
""::abc:7:def"" : 1
4007** : 2
"fe80::1234%1" : 1
"fe80::1234" : 1
ipaddress.IPv6Address('2001:db8::1000') : 1
IPv6Address('2001:db8::1000') : 1
ipaddress.IPv6Address('ff02::5678%1') : 1
IPv6Address('ff02::5678%1') : 1
is_site_local : 2
site-local : 2
3879** : 1
4193** : 1
ipv4_mapped : 1
"::FFFF/96") : 1
scope_id : 1
sixtofour : 1
6to4 : 1
"2002::/16") : 1
3056** : 1
teredo : 1
Teredo : 1
"2001::/32") : 1
4380** : 1
"(server : 1
client)" : 1
IPv6Address.__format__(fmt) : 1
str(ipaddress.IPv4Address('192.168.0.1')) : 1
int(ipaddress.IPv4Address('192.168.0.1')) : 1
3232235521 : 2
str(ipaddress.IPv6Address('::1')) : 1
'::1' : 1
int(ipaddress.IPv6Address('::1')) : 1
IPv4Address('127.0.0.2') : 5
IPv4Address('127.0.0.1') : 3
IPv6Address('fe80::1234') : 1
IPv6Address('fe80::1234%1') : 2
IPv6Address('fe80::1234%2') : 1
IPv4Address('127.0.0.5') : 1
IPv4Address('126.255.255.255') : 1
IPv4Address('255.255.255.255') : 1
(>= : 2
2**32) : 1
*network : 1
address* : 2
(binary : 1
AND) : 1
"255.255.255.0" : 2
"192.168.1.0" : 2
"192.168.1.255" : 1
"/<nbits>" : 1
high-order : 2
*net : 4
mask* : 6
"/24" : 2
"ffff:ff00::" : 1
*host : 2
"0.0.0.255" : 1
ipaddress.IPv4Network(address : 1
all- : 1
"/32" : 2
"192.168.1.0/24" : 1
"192.168.1.0/255.255.255.0" : 1
"192.168.1.0/0.0.0.255" : 1
single-address : 3
two-tuple : 4
4-bytes : 1
"24") : 2
"255.255.255.0") : 1
"NetmaskValueError" : 2
network/address : 1
network_address : 2
broadcast_address : 2
Packets : 1
with_prefixlen : 4
"with_prefixlen" : 1
"str(network)" : 1
"exploded" : 1
with_netmask : 4
with_hostmask : 4
num_addresses : 2
prefixlen : 2
hosts() : 2
list(ip_network('192.0.2.0/29').hosts()) : 1
[IPv4Address('192.0.2.1') : 1
IPv4Address('192.0.2.2') : 2
IPv4Address('192.0.2.3') : 2
IPv4Address('192.0.2.4') : 2
IPv4Address('192.0.2.5') : 3
IPv4Address('192.0.2.6')] : 1
list(ip_network('192.0.2.0/31').hosts()) : 1
[IPv4Address('192.0.2.0') : 1
IPv4Address('192.0.2.1')] : 1
list(ip_network('192.0.2.1/32').hosts()) : 1
[IPv4Address('192.0.2.1')] : 1
overlaps(other) : 2
wholly : 3
address_exclude(network) : 2
n1 : 1
ip_network('192.0.2.0/28') : 1
n2 : 1
ip_network('192.0.2.1/32') : 1
list(n1.address_exclude(n2)) : 1
[IPv4Network('192.0.2.8/29') : 1
IPv4Network('192.0.2.4/30') : 1
IPv4Network('192.0.2.2/31') : 1
IPv4Network('192.0.2.0/32')] : 1
subnets(prefixlen_diff=1 : 2
new_prefix=None) : 4
subnets : 1
*prefixlen_diff* : 4
*new_prefix* : 4
subnets; : 1
list(ip_network('192.0.2.0/24').subnets()) : 1
[IPv4Network('192.0.2.0/25') : 3
IPv4Network('192.0.2.128/25')] : 2
list(ip_network('192.0.2.0/24').subnets(prefixlen_diff=2)) : 1
[IPv4Network('192.0.2.0/26') : 2
IPv4Network('192.0.2.64/26') : 2
IPv4Network('192.0.2.128/26') : 2
IPv4Network('192.0.2.192/26')] : 2
list(ip_network('192.0.2.0/24').subnets(new_prefix=26)) : 1
list(ip_network('192.0.2.0/24').subnets(new_prefix=23)) : 1
ValueError('new : 1
longer') : 1
list(ip_network('192.0.2.0/24').subnets(new_prefix=25)) : 1
supernet(prefixlen_diff=1 : 2
supernet : 2
supernet; : 1
ip_network('192.0.2.0/24').supernet() : 1
IPv4Network('192.0.2.0/23') : 1
ip_network('192.0.2.0/24').supernet(prefixlen_diff=2) : 1
IPv4Network('192.0.0.0/22') : 1
ip_network('192.0.2.0/24').supernet(new_prefix=20) : 1
IPv4Network('192.0.0.0/20') : 1
subnet_of(other) : 2
ip_network('192.168.1.0/24') : 2
ip_network('192.168.1.128/30') : 2
b.subnet_of(a) : 1
supernet_of(other) : 2
a.supernet_of(b) : 1
compare_networks(other) : 2
ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.2/32')) : 1
ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.0/32')) : 1
ip_network('192.0.2.1/32').compare_networks(ip_network('192.0.2.1/32')) : 1
ipaddress.IPv6Network(address : 1
"/128" : 2
"2001:db00::0/24" : 1
"2001:db00::0/ffff:ff00::" : 1
128-bits : 1
16-bytes : 1
Subnet-Router : 2
anycast : 2
IPv4Network('192.0.2.0/28'): : 1
IPv4Address('192.0.2.0') : 3
IPv4Address('192.0.2.6') : 2
IPv4Address('192.0.2.7') : 1
IPv4Address('192.0.2.8') : 1
IPv4Address('192.0.2.9') : 1
IPv4Address('192.0.2.10') : 1
IPv4Address('192.0.2.11') : 1
IPv4Address('192.0.2.12') : 1
IPv4Address('192.0.2.13') : 1
IPv4Address('192.0.2.14') : 1
IPv4Address('192.0.2.15') : 2
IPv4Network('192.0.2.0/28')[0] : 1
IPv4Network('192.0.2.0/28')[15] : 1
IPv4Network('192.0.2.0/28') : 2
IPv4Address('192.0.3.6') : 1
ipaddress.IPv4Interface(address) : 1
("IPv4Address") : 1
IPv4Interface('192.0.2.5/24') : 5
interface.ip : 1
("IPv4Network") : 1
interface.network : 1
interface.with_prefixlen : 1
'192.0.2.5/24' : 1
interface.with_netmask : 1
'192.0.2.5/255.255.255.0' : 1
interface.with_hostmask : 1
'192.0.2.5/0.0.0.255' : 1
ipaddress.IPv6Interface(address) : 1
ipaddress.v4_int_to_packed(address) : 1
(big-endian) : 2
ipaddress.v4_int_to_packed(3221225985) : 1
b'\xc0\x00\x02\x01' : 1
ipaddress.v6_int_to_packed(address) : 1
ipaddress.summarize_address_range(first : 1
[ipaddr : 2
ipaddr : 2
ipaddress.summarize_address_range( : 1
ipaddress.IPv4Address('192.0.2.0') : 1
ipaddress.IPv4Address('192.0.2.130'))] : 1
IPv4Network('192.0.2.128/31') : 1
IPv4Network('192.0.2.130/32')] : 1
ipaddress.collapse_addresses(addresses) : 1
*addresses* : 3
ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25') : 1
ipaddress.IPv4Network('192.0.2.128/25')])] : 1
[IPv4Network('192.0.2.0/24')] : 1
ipaddress.get_mixed_type_key(obj) : 1
sortable : 2
ipaddress.AddressValueError(ValueError) : 1
ipaddress.NetmaskValueError(ValueError) : 1
Lib/dbm/__init__.py : 1
slow-but-simple : 1
dbm.error : 1
"dbm.error" : 2
dbm.whichdb(filename) : 1
guessed; : 1
"'dbm.ndbm'" : 1
"'dbm.gnu'" : 1
dbm.open(file : 1
flag='r' : 1
mode=0o666) : 1
"whichdb()" : 1
+-----------+---------------------------------------------+ : 20
|===========|=============================================| : 4
prevailing : 3
umask) : 3
dictionaries; : 1
dbm.open('cache' : 1
db[b'hello'] : 1
b'there' : 1
db['www.python.org'] : 1
Website' : 2
db['www.cnn.com'] : 2
'Cable : 1
News : 4
Network' : 2
db[b'www.python.org'] : 1
b'Python : 2
b'Cable : 1
Often-used : 1
print(db.get('python.org' : 1
b'not : 1
present')) : 1
TypeError) : 1
db['www.yahoo.com'] : 1
Lib/dbm/gnu.py : 1
"dbm.gnu.gdbm" : 1
(dictionaries) : 2
dbm.gnu.error : 1
"dbm.gnu"-specific : 1
dbm.gnu.open(filename[ : 1
flag[ : 3
mode]]) : 3
+-----------+----------------------------------------------+ : 4
|===========|==============================================| : 1
Synchronized : 2
"open_flags" : 1
gdbm.firstkey() : 1
"nextkey()" : 1
"gdbm"'s : 1
gdbm.nextkey(key) : 1
"db" : 1
db.firstkey() : 1
print(k) : 1
db.nextkey(k) : 1
gdbm.reorganize() : 1
reorganize : 1
reorganization; : 1
gdbm.sync() : 1
unwritten : 1
gdbm.close() : 1
Lib/dbm/ndbm.py : 1
"(n)dbm" : 1
Dbm : 1
GDBM : 1
dbm.ndbm.error : 1
"dbm.ndbm"-specific : 1
dbm.ndbm.library : 1
"ndbm" : 4
dbm.ndbm.open(filename[ : 1
".dir" : 2
".pag" : 1
ndbm.close() : 1
Lib/dbm/dumb.py : 1
dbm.dumb.error : 1
"dbm.dumb"-specific : 1
dbm.dumb.open(filename[ : 1
dumbdbm : 2
".dat" : 1
dumbdbm.sync() : 1
"Shelve.sync()" : 1
dumbdbm.close() : 1
Lib/os.py : 1
"os.stat(path)" : 1
threat : 1
os.execv : 1
os.spawn*p* : 1
"nice()") : 1
"getuid()" : 1
"getpid()" : 1
os.error : 1
registered: : 1
"'java'" : 1
============================================================= : 1
"sys.getfilesystemencoding()") : 1
U+DCxx : 1
*unless* : 2
"PYTHONCOERCECLOCALE") : 1
"sys.flags.utf8_mode" : 1
os.ctermid() : 1
"environ['HOME']" : 1
"getenv("HOME")" : 2
"environb" : 4
"environ['monty'] : 1
'python'" : 1
"'MONTY'" : 1
os.environb : 1
"environ": : 1
"supports_bytes_environ" : 2
os.chdir(path) : 2
os.fchdir(fd) : 2
handler*; : 2
os.fsdecode(filename) : 1
os.fspath(path) : 1
os.getenv(key : 1
"getenv()" : 3
os.getenvb(key : 1
"getenvb()" : 4
os.get_exec_path(env=None) : 1
os.getegid() : 1
id" : 1
os.geteuid() : 1
os.getgid() : 1
os.getgrouplist(user : 1
included; : 1
"getgroups()" : 4
"10.5" : 2
system-defined : 1
"setgroups()" : 2
os.getlogin() : 1
"getpass.getuser()" : 1
"LOGNAME" : 2
"USERNAME" : 3
"pwd.getpwuid(os.getuid())[0]" : 1
os.getpgid(pid) : 1
os.getpid() : 2
os.getppid() : 1
os.getpriority(which : 1
"PRIO_PROCESS" : 4
"PRIO_PGRP" : 4
"PRIO_USER" : 2
"PRIO_USER") : 2
os.PRIO_PROCESS : 1
os.PRIO_PGRP : 1
os.PRIO_USER : 1
os.getresuid() : 1
(ruid : 1
euid : 3
suid) : 1
os.getresgid() : 1
(rgid : 1
egid : 3
sgid) : 1
os.getuid() : 1
os.initgroups(username : 1
initgroups() : 1
os.putenv(key : 1
"popen()" : 7
"execv()" : 6
"putenv()"; : 1
"os.putenv" : 1
os.setegid(egid : 1
os.seteuid(euid : 1
os.setgid(gid : 1
os.setgroups(groups : 1
*groups* : 5
superuser : 1
os.setpgrp() : 1
"setpgrp()" : 1
"setpgrp(0 : 1
os.setpgid(pid : 1
pgrp : 1
"setpgid()" : 1
*pgrp* : 1
os.setpriority(which : 1
-20 : 1
favorable : 1
os.setregid(rgid : 1
os.setresgid(rgid : 1
sgid : 1
os.setresuid(ruid : 1
suid : 1
os.setreuid(ruid : 1
os.getsid(pid : 1
os.setsid() : 1
os.setuid(uid : 1
os.strerror(code : 1
os.supports_bytes_environ : 1
os.umask(mask : 1
os.uname() : 1
"sysname" : 3
"nodename" : 4
(implementation-defined) : 1
"machine" : 3
five-tuple : 1
component; : 1
"socket.gethostbyaddr(socket.gethostname())" : 1
os.unsetenv(key : 1
"unsetenv()"; : 1
"os.unsetenv" : 1
descriptors.) : 1
os.fdopen(fd : 1
"fdopen()" : 5
deceptive; : 1
os.close(fd) : 3
"pipe()" : 3
os.closerange(fd_low : 1
fd_high : 1
*fd_low* : 1
(exclusive) : 2
than): : 1
range(fd_low : 1
fd_high): : 1
os.copy_file_range(src : 1
offset_src=None : 2
offset_dst=None) : 2
*offset_src* : 4
*offset_dst* : 4
"errno.EXDEV" : 2
os.device_encoding(fd) : 1
os.dup(fd : 1
duplicating : 1
(0: : 1
os.dup2(fd : 1
fd2 : 1
inheritable=True) : 1
*fd2* : 3
*inheritable* : 2
os.fchmod(fd : 1
"os.chmod(fd : 1
os.fchown(fd : 1
gid) : 2
*uid* : 3
*gid* : 3
"os.chown(fd : 1
"os.chown" : 3
os.fdatasync(fd) : 1
filedescriptor : 2
os.fpathconf(fd : 1
retrieve; : 3
(POSIX.1 : 2
"pathconf_names" : 4
"os.pathconf(fd : 1
os.fstat(fd) : 1
"os.stat(fd)" : 1
os.fstatvfs(fd : 1
"os.statvfs(fd)" : 1
os.fsync(fd) : 1
"_commit()" : 1
"f.flush()" : 1
"os.fsync(f.fileno())" : 1
os.ftruncate(fd : 1
"os.truncate(fd : 1
"os.truncate" : 2
os.get_blocking(fd : 1
"socket.socket.setblocking()" : 2
os.isatty(fd : 1
tty(-like) : 1
os.lockf(fd : 1
"F_LOCK" : 1
"F_TLOCK" : 1
"F_ULOCK" : 1
"F_TEST" : 1
"os.lockf" : 1
os.F_LOCK : 1
os.F_TLOCK : 1
os.F_ULOCK : 1
os.F_TEST : 1
os.login_tty(fd : 1
leader; : 1
os.lseek(fd : 1
*how*: : 1
os.SEEK_SET : 1
os.SEEK_CUR : 1
os.SEEK_END : 1
os.open(path : 2
"O_RDONLY" : 1
"O_WRONLY") : 1
*open(2)* : 1
os.O_RDONLY : 1
os.O_WRONLY : 1
os.O_RDWR : 1
os.O_APPEND : 1
os.O_CREAT : 1
os.O_EXCL : 1
os.O_TRUNC : 1
os.O_DSYNC : 1
os.O_RSYNC : 1
os.O_SYNC : 1
os.O_NDELAY : 1
os.O_NONBLOCK : 1
os.O_NOCTTY : 1
os.O_CLOEXEC : 1
os.O_BINARY : 1
os.O_NOINHERIT : 1
os.O_SHORT_LIVED : 1
os.O_TEMPORARY : 1
os.O_RANDOM : 1
os.O_SEQUENTIAL : 1
os.O_TEXT : 1
os.O_EVTONLY : 1
os.O_FSYNC : 1
os.O_SYMLINK : 1
os.O_NOFOLLOW_ANY : 1
os.O_ASYNC : 1
os.O_DIRECT : 1
os.O_DIRECTORY : 1
os.O_NOFOLLOW : 1
os.O_NOATIME : 1
os.O_PATH : 1
os.O_SHLOCK : 1
os.O_EXLOCK : 1
os.openpty() : 1
pseudo-terminal : 5
"(master : 2
slave)" : 2
(slightly) : 1
os.pipe() : 1
w)" : 2
os.pipe2(flags : 1
ORing : 3
os.posix_fallocate(fd : 1
os.posix_fadvise(fd : 1
*advice* : 2
"POSIX_FADV_NORMAL" : 1
"POSIX_FADV_SEQUENTIAL" : 1
"POSIX_FADV_RANDOM" : 1
"POSIX_FADV_NOREUSE" : 1
"POSIX_FADV_WILLNEED" : 1
"POSIX_FADV_DONTNEED" : 1
os.POSIX_FADV_NORMAL : 1
os.POSIX_FADV_SEQUENTIAL : 1
os.POSIX_FADV_RANDOM : 1
os.POSIX_FADV_NOREUSE : 1
os.POSIX_FADV_WILLNEED : 1
os.POSIX_FADV_DONTNEED : 1
os.pread(fd : 1
os.preadv(fd : 1
"RWF_HIPRI" : 1
"RWF_NOWAIT" : 1
"'SC_IOV_MAX'") : 4
os.RWF_NOWAIT : 1
"errno.EAGAIN" : 1
4.14 : 2
os.RWF_HIPRI : 1
block-based : 1
"O_DIRECT" : 1
os.pwrite(fd : 1
os.pwritev(fd : 1
Entire : 2
"RWF_DSYNC" : 1
"RWF_SYNC" : 1
"RWF_APPEND" : 1
"os.pwrite()" : 1
os.RWF_DSYNC : 1
per-write : 3
"O_DSYNC" : 1
os.RWF_SYNC : 1
"O_SYNC" : 1
os.RWF_APPEND : 1
"O_APPEND" : 1
4.16 : 1
os.read(fd : 2
os.sendfile(out_fd : 2
in_fd : 2
headers=() : 2
trailers=() : 1
Cross-platform : 1
"socket.socket.sendfile()" : 1
os.set_blocking(fd : 1
os.SF_NODISKIO : 1
os.SF_MNOWAIT : 1
os.SF_SYNC : 1
os.SF_NOCACHE : 1
os.splice(src : 1
spliced : 1
2.6.17 : 1
os.SPLICE_F_MOVE : 1
os.SPLICE_F_NONBLOCK : 1
os.SPLICE_F_MORE : 1
os.readv(fd : 1
os.tcgetpgrp(fd : 1
"os.open()") : 3
os.tcsetpgrp(fd : 1
pg : 1
*pg* : 1
os.ttyname(fd : 1
os.write(fd : 1
os.writev(fd : 1
os.get_terminal_size(fd=STDOUT_FILENO : 1
"(columns : 2
lines)" : 2
"terminal_size" : 1
"STDOUT_FILENO" : 1
"os.get_terminal_size" : 1
os.terminal_size : 1
"inheritable" : 5
"spawn*" : 7
os.get_inheritable(fd : 1
boolean) : 2
os.set_inheritable(fd : 1
os.get_handle_inheritable(handle : 1
os.set_handle_inheritable(handle : 1
**specifying : 1
descriptor:** : 1
"fchdir" : 1
"chdir").) : 1
**paths : 1
descriptors:** : 1
"at" : 2
"faccessat" : 1
"access") : 1
symlinks:** : 1
"l..." : 1
os.access(path : 1
dir_fd=None : 7
effective_ids=False : 1
suid/sgid : 1
"F_OK" : 1
"R_OK" : 1
"W_OK" : 1
"X_OK" : 1
*access(2)* : 1
*effective_ids* : 6
"os.supports_effective_ids" : 1
os.access("myfile" : 1
os.R_OK): : 1
open("myfile") : 2
fp.read() : 5
"some : 2
permission-bit : 1
os.F_OK : 1
os.R_OK : 1
os.W_OK : 1
executability : 1
os.chflags(path : 1
(bitwise : 5
"stat.UF_NODUMP" : 1
"stat.UF_IMMUTABLE" : 1
"stat.UF_APPEND" : 1
"stat.UF_OPAQUE" : 1
"stat.UF_NOUNLINK" : 1
"stat.UF_COMPRESSED" : 1
"stat.UF_HIDDEN" : 1
"stat.SF_ARCHIVED" : 1
"stat.SF_IMMUTABLE" : 1
"stat.SF_APPEND" : 1
"stat.SF_NOUNLINK" : 1
"stat.SF_SNAPSHOT" : 1
"os.chflags" : 2
"stat.S_ISUID" : 1
"stat.S_ISGID" : 1
"stat.S_ENFMT" : 1
"stat.S_ISVTX" : 1
"stat.S_IREAD" : 2
"stat.S_IWRITE" : 2
"stat.S_IEXEC" : 1
"stat.S_IRWXU" : 1
"stat.S_IRUSR" : 1
"stat.S_IWUSR" : 1
"stat.S_IXUSR" : 1
"stat.S_IRWXG" : 1
"stat.S_IRGRP" : 1
"stat.S_IWGRP" : 1
"stat.S_IXGRP" : 1
"stat.S_IRWXO" : 1
"stat.S_IROTH" : 1
"stat.S_IWOTH" : 1
"stat.S_IXOTH" : 1
ignored.The : 1
os.chown(path : 1
os.chroot(path) : 1
"os.chdir(fd)" : 1
os.getcwdb() : 1
os.lchflags(path : 1
"os.chflags(path : 1
os.lchmod(path : 1
"os.chmod(path : 1
os.lchown(path : 1
"os.chown(path : 1
os.link(src : 1
src_dir_fd=None : 3
dst_dir_fd=None : 1
*src_dir_fd* : 5
*dst_dir_fd* : 5
"os.link" : 1
os.listdir(path='.') : 1
"bytes"; : 2
os.lstat(path : 1
"os.stat(path : 1
dir_fd=dir_fd : 1
(Vista) : 3
surrogates) : 2
os.mkdir(path : 1
*mode*) : 3
directories; : 1
"tempfile.mkdtemp()" : 3
"os.mkdir" : 2
os.makedirs(name : 1
mkdir() : 1
"pardir" : 1
bpo-21082 : 1
os.mkfifo(path : 1
mode=0o666 : 1
FIFOs : 4
"os.unlink()") : 2
rendezvous : 2
processes: : 3
os.mknod(path : 1
mode=0o600 : 1
device=0 : 1
"stat.S_IFREG" : 1
"stat.S_IFCHR" : 2
"stat.S_IFBLK" : 2
"stat.S_IFIFO" : 1
"stat") : 3
*device* : 3
"os.makedev()") : 1
os.major(device : 1
"st_dev" : 5
"st_rdev" : 2
os.minor(device : 1
os.makedev(major : 1
Compose : 1
os.pathconf(path : 1
os.pathconf_names : 1
"fpathconf()" : 1
os.readlink(path : 1
pathname; : 1
"os.path.join(os.path.dirname(path) : 1
result)" : 1
os.remove(path : 1
"os.remove" : 3
os.removedirs(name) : 1
"removedirs()" : 2
"os.removedirs('foo/bar/baz')" : 1
"'foo/bar/baz'" : 1
"'foo/bar'" : 1
"'foo'" : 2
os.rename(src : 1
dst_dir_fd=None) : 2
requirement) : 2
"os.rename" : 3
os.renames(old : 1
*old* : 3
os.replace(src : 1
os.rmdir(path : 1
"os.rmdir" : 1
os.scandir(path='.') : 1
links; : 1
scandir.close() : 1
os.scandir(path) : 1
opendir() : 1
readdir() : 1
FindFirstFileW : 1
FindNextFileW : 1
destructor.The : 1
structures; : 1
"os.stat(entry.path)" : 1
entry's : 3
"os.path.join(scandir_path : 1
entry.name)" : 1
*scandir_path* : 1
inode() : 1
"os.stat(entry.path : 1
follow_symlinks=False).st_ino" : 1
up- : 2
to-date : 1
is_dir(* : 1
symlinks); : 2
"stat.S_ISDIR()" : 1
non-symlinks : 1
"dirent.d_type : 2
DT_UNKNOWN" : 2
is_file(* : 1
Caching : 1
is_symlink() : 1
broken); : 1
stat(* : 1
junction) : 1
"st_ino" : 3
"st_nlink" : 2
os.stat(path : 1
name-surrogate : 1
non-link : 1
statinfo : 2
os.stat('somefile.txt') : 1
os.stat_result(st_mode=33188 : 1
st_ino=7876932 : 1
st_dev=234881026 : 1
st_nlink=1 : 1
st_uid=501 : 1
st_gid=501 : 1
st_size=264 : 1
st_atime=1297230295 : 1
st_mtime=1297230027 : 1
st_ctime=1297230027) : 1
statinfo.st_size : 1
264 : 1
*stat* : 1
"os.fstat()" : 5
Attributes: : 4
st_mode : 1
(permissions) : 1
st_ino : 1
Typically: : 1
st_dev : 1
st_nlink : 1
st_uid : 1
st_gid : 1
st_size : 1
Timestamps: : 1
st_atime : 1
st_mtime : 1
st_ctime : 1
dependent: : 2
st_atime_ns : 1
st_mtime_ns : 1
st_ctime_ns : 1
"st_atime" : 4
"st_ctime" : 3
FAT : 1
FAT32 : 1
2-second : 1
1-day : 1
details.Similarly : 1
"st_atime_ns" : 3
"st_mtime_ns" : 3
"st_ctime_ns" : 3
512-byte : 1
"st_size"/512 : 1
st_blksize : 1
"Preferred" : 1
blocksize : 2
read-modify- : 1
st_rdev : 1
st_flags : 1
FreeBSD) : 1
st_gen : 1
st_birthtime : 1
st_rsize : 1
st_creator : 1
Creator : 1
st_type : 1
st_file_attributes : 1
"FILE_ATTRIBUTE_*" : 1
st_reparse_tag : 1
"FILE_ATTRIBUTE_REPARSE_POINT" : 1
"IO_REPARSE_TAG_*" : 1
portable) : 1
"st_mode" : 2
"st_uid" : 1
"st_gid" : 1
"st_size" : 1
"st_reparse_tag" : 2
"S_IFIFO" : 1
"S_IFBLK" : 1
os.statvfs(path) : 1
"f_bsize" : 1
"f_frsize" : 1
"f_blocks" : 1
"f_bfree" : 1
"f_bavail" : 1
"f_files" : 1
"f_ffree" : 1
"f_favail" : 1
"f_flag" : 2
"f_namemax" : 1
"f_fsid" : 2
bit-flags: : 1
"ST_RDONLY" : 2
"ST_NOSUID" : 2
setuid/setgid : 1
GNU/glibc : 1
"ST_NODEV" : 2
(disallow : 2
"ST_NOEXEC" : 2
"ST_SYNCHRONOUS" : 2
(writes : 2
synced : 2
once) : 3
"ST_MANDLOCK" : 2
(allow : 1
FS) : 1
"ST_WRITE" : 2
file/directory/symlink) : 1
"ST_APPEND" : 2
(append-only : 1
"ST_IMMUTABLE" : 2
(immutable : 1
"ST_NOATIME" : 2
(do : 2
"ST_NODIRATIME" : 2
"ST_RELATIME" : 2
(update : 1
atime : 1
mtime/ctime) : 1
os.supports_dir_fd : 2
consistency's : 3
(Specifying : 3
"supports_dir_fd" : 1
os.supports_effective_ids : 2
"os.access()"; : 1
"effective_ids=True" : 1
os.supports_fd : 2
"supports_fd" : 1
os.supports_follow_symlinks : 2
"supports_follow_symlinks" : 1
os.symlink(src : 1
target_is_directory=False : 1
morph : 1
unprivileged : 2
available/enabled : 1
*SeCreateSymbolicLinkPrivilege* : 1
administrator."OSError" : 1
"os.symlink" : 1
unelevated : 1
os.sync() : 1
os.truncate(path : 1
os.unlink(path : 1
"remove()"; : 1
"unlink" : 1
os.utime(path : 1
times=None : 2
*[ : 1
ns] : 1
*times* : 5
*ns* : 6
"(atime_ns : 1
mtime_ns)" : 2
"(atime : 1
mtime)" : 1
"ns=(atime_ns : 1
*st_atime_ns* : 1
*st_mtime_ns* : 1
"os.utime" : 1
os.walk(top : 2
topdown=True : 2
followlinks=False) : 1
top-down : 1
"(dirpath : 2
dirnames : 2
filenames)" : 1
*dirpath* : 8
*dirnames* : 5
"'..'") : 1
*filenames* : 9
*top*) : 1
"os.path.join(dirpath : 1
*topdown* : 5
triples : 8
(directories : 2
top-down) : 1
bottom-up) : 1
assignment) : 1
*dirnames*; : 1
renames : 5
*followlinks* : 2
resumptions : 1
getsize : 1
os.walk('python/Lib/email'): : 1
print(root : 2
"consumes" : 2
print(sum(getsize(join(root : 1
print("bytes : 2
len(files) : 2
"non-directory : 2
files") : 2
'CVS' : 2
dirs: : 4
dirs.remove('CVS') : 2
(simple : 1
"shutil.rmtree()") : 1
CAUTION: : 2
topdown=False): : 2
os.remove(os.path.join(root : 1
os.rmdir(os.path.join(root : 1
"os.walk" : 1
os.fwalk(top='.' : 1
follow_symlinks=False : 1
dirfd)" : 1
*dirfd* : 1
"dup()") : 1
rootfd : 2
os.fwalk('python/Lib/email'): : 1
print(sum([os.stat(name : 1
dir_fd=rootfd).st_size : 1
files]) : 1
essential: : 1
os.fwalk(top : 1
os.unlink(name : 1
dir_fd=rootfd) : 2
os.rmdir(name : 1
"os.fwalk" : 1
os.memfd_create(name[ : 1
flags=os.MFD_CLOEXEC]) : 1
"os.MFD_*" : 1
"/proc/self/fd/" : 1
"memfd:" : 1
os.MFD_CLOEXEC : 1
os.MFD_ALLOW_SEALING : 1
os.MFD_HUGETLB : 1
os.MFD_HUGE_SHIFT : 1
os.MFD_HUGE_MASK : 1
os.MFD_HUGE_64KB : 1
os.MFD_HUGE_512KB : 1
os.MFD_HUGE_1MB : 1
os.MFD_HUGE_2MB : 1
os.MFD_HUGE_8MB : 1
os.MFD_HUGE_16MB : 1
os.MFD_HUGE_32MB : 1
os.MFD_HUGE_256MB : 1
os.MFD_HUGE_512MB : 1
os.MFD_HUGE_1GB : 1
os.MFD_HUGE_2GB : 1
os.MFD_HUGE_16GB : 1
"MFD_HUGE*" : 1
os.eventfd(initval[ : 1
flags=os.EFD_CLOEXEC]) : 1
*eventfd(2)* : 1
*initval* : 1
2^64-2 : 2
"EFD_CLOEXEC" : 1
"EFD_NONBLOCK" : 2
"EFD_SEMAPHORE" : 3
"eventfd_read()" : 3
"eventfd_write()" : 1
os.eventfd(1 : 1
os.EFD_SEMAPHORE : 2
os.EFC_CLOEXEC) : 1
os.eventfd_read(fd) : 2
do_work() : 1
os.eventfd_write(fd : 2
"eventfd()" : 7
os.EFD_CLOEXEC : 1
close-on-exec : 1
os.EFD_NONBLOCK : 1
semaphore-like : 1
os.getxattr(path : 1
"os.getxattr" : 1
os.listxattr(path=None : 1
"os.listxattr" : 1
os.removexattr(path : 1
"os.removexattr" : 1
os.setxattr(path : 1
NULs : 1
"XATTR_REPLACE" : 2
"XATTR_CREATE" : 2
"ENODATA" : 1
"EEXISTS" : 1
2.6.39 : 2
"os.setxattr" : 1
os.XATTR_SIZE_MAX : 1
os.XATTR_CREATE : 1
os.XATTR_REPLACE : 1
"exec*" : 3
"os.execv('/bin/echo' : 1
'bar'])" : 1
os.abort() : 1
dump; : 1
os.add_dll_directory(path) : 1
"sys.path") : 1
**close()** : 1
"os.add_dll_directory" : 1
"AddDllDirectory" : 1
effect.In : 1
os.execl(path : 1
arg0 : 4
os.execle(path : 1
os.execlp(file : 1
os.execlpe(file : 1
os.execv(path : 1
os.execve(path : 1
os.execvp(file : 1
os.execvpe(file : 1
"sys.stdout.flush()" : 1
"os.fsync()" : 1
written; : 3
"execl*()" : 1
("execlp()" : 1
"execlpe()" : 2
"execvp()" : 2
"execvpe()") : 1
"exec*e" : 1
paragraph) : 4
"execl()" : 3
"execle()" : 2
"execvpe()" : 1
environment); : 2
"execlp()" : 1
"os.exec" : 1
os._exit(n) : 1
"sys.exit(n)" : 1
os.EX_OK : 1
"EXIT_SUCCESS" : 1
os.EX_USAGE : 1
os.EX_DATAERR : 1
os.EX_NOINPUT : 1
os.EX_NOUSER : 1
os.EX_NOHOST : 1
os.EX_UNAVAILABLE : 1
os.EX_SOFTWARE : 1
os.EX_OSERR : 1
os.EX_OSFILE : 1
os.EX_CANTCREAT : 1
os.EX_IOERR : 1
os.EX_TEMPFAIL : 1
retryable : 1
os.EX_PROTOCOL : 1
os.EX_NOPERM : 1
problems) : 1
os.EX_CONFIG : 1
os.EX_NOTFOUND : 1
"an : 2
Fork : 3
"os.fork" : 1
os.forkpty() : 1
fd)" : 3
"os.forkpty" : 1
"forkpty()" : 1
os.kill(pid : 1
"signal.CTRL_C_EVENT" : 1
"signal.CTRL_BREAK_EVENT" : 1
TerminateProcess : 1
"signal.pthread_kill()" : 1
"os.kill" : 1
os.killpg(pgid : 1
*pgid* : 1
"os.killpg" : 1
os.nice(increment : 1
*increment* : 1
"niceness" : 1
niceness : 1
os.pidfd_open(pid : 1
*pidfd_open(2)* : 1
os.plock(op : 1
"<sys/lock.h>") : 1
left-shifted : 1
signal.SIGKILL" : 1
killed.) : 1
"waitstatus_to_exitcode()" : 7
(exit : 2
"subprocess.Popen"; : 1
contents."popen()" : 1
os.posix_spawn(path : 1
file_actions=None : 2
setpgroup=None : 2
resetids=False : 2
setsid=False : 2
setsigmask=() : 2
setsigdef=() : 2
scheduler=None) : 2
"posix_spawnp()" : 2
*file_actions* : 1
os.POSIX_SPAWN_OPEN : 1
("os.POSIX_SPAWN_OPEN" : 1
"os.dup2(os.open(path : 1
os.POSIX_SPAWN_CLOSE : 1
("os.POSIX_SPAWN_CLOSE" : 1
*fd*) : 1
"os.close(fd)" : 1
os.POSIX_SPAWN_DUP2 : 1
("os.POSIX_SPAWN_DUP2" : 1
*new_fd*) : 1
"os.dup2(fd : 1
new_fd)" : 1
"posix_spawn_file_actions_addopen()" : 1
"posix_spawn_file_actions_addclose()" : 1
"posix_spawn_file_actions_adddup2()" : 1
*setpgroup* : 2
"POSIX_SPAWN_SETPGROUP" : 1
*resetids* : 1
GID : 4
set- : 1
user-ID : 1
set-group-ID : 2
"POSIX_SPAWN_RESETIDS" : 1
"POSIX_SPAWN_SETSID" : 1
"POSIX_SPAWN_SETSID_NP" : 1
*setsigmask* : 1
"POSIX_SPAWN_SETSIGMASK" : 1
*sigdef* : 1
"POSIX_SPAWN_SETSIGDEF" : 1
*scheduler* : 1
"sched_param" : 4
"POSIX_SPAWN_SETSCHEDPARAM" : 1
"POSIX_SPAWN_SETSCHEDULER" : 1
os.posix_spawnp(path : 1
"execvp(3)") : 1
os.register_at_fork(* : 1
before=None : 1
after_in_parent=None : 1
after_in_child=None) : 1
*after_in_parent* : 1
*after_in_child* : 1
os.spawnl(mode : 1
os.spawnle(mode : 1
os.spawnlp(mode : 1
os.spawnlpe(mode : 1
os.spawnv(mode : 1
os.spawnve(mode : 1
os.spawnvp(mode : 1
os.spawnvpe(mode : 1
"P_NOWAIT" : 3
"P_WAIT" : 1
"-signal" : 3
"spawnl*()" : 1
("spawnlp()" : 1
"spawnlpe()" : 3
"spawnvp()" : 3
"spawnvpe()") : 1
"spawn*e" : 1
"spawnl()" : 2
"spawnle()" : 3
"spawnv()" : 2
"spawnve()" : 3
"spawnvpe()" : 3
"spawnlp()" : 3
"127" : 1
'cp' : 3
'index.html' : 2
'/dev/null') : 1
['cp' : 1
os.spawnvpe(os.P_WAIT : 1
os.environ) : 1
advise : 1
os.P_NOWAIT : 1
os.P_NOWAITO : 1
"spawn*()" : 2
os.P_WAIT : 1
os.P_DETACH : 1
os.P_OVERLAY : 1
"P_DETACH" : 1
"P_OVERLAY" : 1
os.startfile(path[ : 1
operation][ : 1
arguments][ : 1
cwd][ : 1
show_cmd]) : 1
"'open'" : 1
**start** : 1
verb" : 1
"'print'" : 1
"'edit'" : 1
"'explore'" : 1
"'find'" : 1
*show_cmd* : 2
"ShellExecute()" : 2
"startfile()" : 1
("'/'") : 1
"os.path.normpath()" : 1
"os.startfile" : 1
"os.startfile/2" : 2
os.system(command) : 1
subshell : 2
"COMSPEC": : 1
**cmd.exe** : 1
os.times() : 1
"system" : 5
"children_user" : 2
"children_system" : 2
"elapsed" : 2
five- : 1
*times(2)* : 1
times(3) : 1
GetProcessTimes : 1
known; : 1
os.wait() : 1
indication: : 1
"wait*()" : 2
os.waitid(idtype : 1
*idtype* : 2
"P_PID" : 2
"P_PGID" : 2
"P_ALL" : 2
"P_PIDFD" : 4
"WEXITED" : 1
"WSTOPPED" : 1
"WCONTINUED" : 3
"WNOHANG" : 3
"WNOWAIT" : 1
(process : 1
(real : 1
"SIGCHLD") : 1
"si_code") : 1
"CLD_EXITED" : 1
os.waitpid(pid : 1
(encoded : 1
"-pid" : 1
*pid*) : 1
"WUNTRACED" : 3
(shifting : 1
easier) : 1
os.wait3(options) : 1
os.wait4(pid : 1
os.P_PID : 1
os.P_PGID : 1
os.P_ALL : 1
os.P_PIDFD : 1
child; : 1
"pidfd_open()") : 1
os.WCONTINUED : 1
os.WEXITED : 1
"wait*" : 3
os.WSTOPPED : 1
os.WUNTRACED : 1
os.WNOHANG : 1
os.WNOWAIT : 1
os.CLD_EXITED : 1
os.CLD_KILLED : 1
os.CLD_DUMPED : 1
os.CLD_TRAPPED : 1
os.CLD_STOPPED : 1
os.CLD_CONTINUED : 1
os.waitstatus_to_exitcode(status) : 1
"WIFEXITED(status)" : 1
"WEXITSTATUS(status)"): : 1
"WIFSIGNALED(status)" : 1
"-signum" : 1
"-WTERMSIG(status)"): : 1
"WIFSTOPPED(status)" : 2
"WIFEXITED()" : 2
"WEXITSTATUS()" : 1
"WIFSIGNALED()" : 3
"WTERMSIG()" : 1
"WIFSTOPPED()" : 3
"WSTOPSIG()" : 1
os.WCOREDUMP(status : 1
os.WIFCONTINUED(status) : 1
"SIGCONT" : 1
stop) : 3
os.WIFSTOPPED(status) : 1
*ptrace(2)*) : 1
os.WIFSIGNALED(status) : 1
os.WIFEXITED(status) : 1
"main()"; : 1
os.WEXITSTATUS(status) : 1
os.WSTOPSIG(status) : 1
os.WTERMSIG(status) : 1
manpages : 1
os.SCHED_OTHER : 1
os.SCHED_BATCH : 1
CPU-intensive : 3
interactivity : 1
os.SCHED_IDLE : 1
os.SCHED_SPORADIC : 1
sporadic : 1
os.SCHED_FIFO : 1
os.SCHED_RR : 1
round-robin : 3
os.SCHED_RESET_ON_FORK : 1
OR'ed : 1
os.sched_param(sched_priority) : 1
sched_priority : 1
os.sched_get_priority_min(policy) : 1
os.sched_get_priority_max(policy) : 1
os.sched_setscheduler(pid : 1
os.sched_getscheduler(pid : 1
os.sched_setparam(pid : 1
os.sched_getparam(pid : 1
os.sched_rr_get_interval(pid : 1
quantum : 1
os.sched_yield() : 1
Voluntarily : 1
relinquish : 1
os.sched_setaffinity(pid : 1
os.sched_getaffinity(pid : 1
os.confstr(name : 1
string-valued : 1
"confstr_names" : 2
os.confstr_names : 1
"confstr()" : 2
undetermined : 1
"len(os.sched_getaffinity(0))" : 2
os.getloadavg() : 1
averaged : 1
unobtainable : 1
os.sysconf(name : 1
integer-valued : 1
"sysconf_names" : 1
os.sysconf_names : 1
"sysconf()" : 1
"'SC_MINSIGSTKSZ'" : 1
Higher-level : 1
os.curdir : 1
os.pardir : 1
os.sep : 1
"'\\'" : 1
"os.path.split()" : 1
os.altsep : 1
os.extsep : 1
os.pathsep : 1
os.defpath : 1
"exec*p*" : 1
"spawn*p*" : 1
"'PATH'" : 1
os.linesep : 1
terminate) : 1
*os.linesep* : 1
os.devnull : 1
"'nul'" : 1
os.RTLD_LAZY : 1
os.RTLD_NOW : 1
os.RTLD_GLOBAL : 1
os.RTLD_LOCAL : 1
os.RTLD_NODELETE : 1
os.RTLD_NOLOAD : 1
os.RTLD_DEEPBIND : 1
"setdlopenflags()" : 1
"getdlopenflags()" : 1
os.getrandom(size : 1
Unnecessarily : 1
"/dev/random" : 3
"os.GRND_RANDOM" : 1
os.urandom(size : 1
(128 : 1
kernel) : 1
easy-to-use : 1
"random.SystemRandom" : 2
os.GRND_NONBLOCK : 1
os.GRND_RANDOM : 1
Lib/copyreg.py : 1
pickling/copying : 1
copyreg.constructor(object) : 1
Declares : 2
copyreg.pickle(type : 1
constructor_ob=None) : 1
"reduction" : 1
*constructor_ob* : 1
pickle_c(c): : 1
print("pickling : 1
instance...") : 1
(c.a,) : 1
copyreg.pickle(C : 1
pickle_c) : 1
C(1) : 1
copy.copy(c) : 1
pickle.dumps(c) : 1
(Open : 1
Sound : 5
System) : 1
driver; : 1
"<sys/soundcard.h>" : 1
ossaudiodev.OSSAudioError : 1
"OSSAudioError".) : 1
"ossaudiodev.error".) : 1
ossaudiodev.open(mode) : 1
ossaudiodev.open(device : 1
devices) : 2
audio-specific : 1
"AUDIODEV" : 1
"/dev/dsp" : 1
(record) : 1
(playback) : 1
cards : 6
recorder : 4
player : 1
half-duplex: : 1
artifact : 2
ossaudiodev.openmixer([device]) : 1
mixer : 19
"MIXERDEV" : 1
"/dev/mixer" : 1
"setfmt()" : 4
"channels()" : 3
"setparameters()" : 2
oss_audio_device.close() : 1
oss_audio_device.fileno() : 1
oss_audio_device.read(size) : 1
oss_audio_device.write(data) : 1
semantics) : 1
written---see : 1
"writeall()" : 2
oss_audio_device.writeall(data) : 1
device: : 1
"SNDCTL_DSP_SETFMT" : 1
"SNDCTL_DSP_SYNC" : 1
oss_audio_device.nonblock() : 1
oss_audio_device.getfmts() : 1
soundcard : 1
+---------------------------+-----------------------------------------------+ : 10
|===========================|===============================================| : 1
"AFMT_MU_LAW" : 1
".au" : 1
"/dev/audio") : 1
"AFMT_A_LAW" : 1
"AFMT_IMA_ADPCM" : 1
4:1 : 1
Association : 1
"AFMT_U8" : 1
Unsigned : 3
"AFMT_S16_LE" : 2
Signed : 14
processors) : 1
"AFMT_S16_BE" : 1
68k : 1
Sparc) : 1
"AFMT_S8" : 1
"AFMT_U16_LE" : 1
"AFMT_U16_BE" : 1
"AFMT_U8"; : 1
oss_audio_device.setfmt(format) : 1
*format*---see : 1
"getfmts()" : 1
format---do : 1
"audio : 1
format" : 1
"AFMT_QUERY" : 1
oss_audio_device.channels(nchannels) : 1
*nchannels* : 3
monophonic : 3
stereophonic : 1
oss_audio_device.speed(samplerate) : 1
*samplerate* : 2
+---------+---------------------------------------------+ : 6
Rate : 1
|=========|=============================================| : 1
11025 : 1
speech : 1
22050 : 1
44100 : 1
bits/sample : 1
channels) : 1
96000 : 1
DVD : 1
bits/sample) : 1
oss_audio_device.sync() : 1
played : 4
closed.) : 1
re-opening : 2
oss_audio_device.reset() : 1
Immediately : 3
oss_audio_device.post() : 1
intelligently : 4
spot : 1
ioctls : 1
oss_audio_device.setparameters(format : 1
samplerate[ : 1
strict=False]) : 1
parameters---sample : 1
rate---in : 1
"OSSAudioError" : 3
*samplerate*) : 1
"speed()") : 1
(fmt : 1
rate) : 2
dsp.setparameters(fmt : 1
dsp.setfmt(fmt) : 1
dsp.channels(channels) : 1
dsp.rate(rate) : 1
oss_audio_device.bufsize() : 1
oss_audio_device.obufcount() : 1
oss_audio_device.obuffree() : 1
oss_audio_device.closed : 1
oss_audio_device.name : 1
oss_audio_device.mode : 1
""rw"" : 1
""w"" : 5
oss_mixer_device.close() : 1
oss_mixer_device.fileno() : 1
mixing: : 1
oss_mixer_device.controls() : 1
("Control" : 1
mixable : 1
"SOUND_MIXER_PCM" : 2
"SOUND_MIXER_SYNTH") : 1
controls---the : 1
"SOUND_MIXER_*" : 1
mixer=ossaudiodev.openmixer() : 1
mixer.controls() : 1
ossaudiodev.SOUND_MIXER_PCM): : 1
"SOUND_MIXER_VOLUME" : 2
(master : 1
suffice---but : 1
Gravis : 1
Ultrasound : 1
oss_mixer_device.stereocontrols() : 1
stereo; : 1
"controls()" : 3
which) : 2
oss_mixer_device.reccontrols() : 1
oss_mixer_device.get(control) : 1
"(left_volume,right_volume)" : 1
Volumes : 1
(silent) : 2
oss_mixer_device.set(control : 1
(left : 5
right)) : 1
"(left,right)" : 1
soundcard's : 1
mixers : 1
oss_mixer_device.get_recsrc() : 1
control(s) : 1
oss_mixer_device.set_recsrc(bitmask) : 1
sources) : 2
microphone : 1
mixer.setrecsrc : 1
ossaudiodev.SOUND_MIXER_MIC) : 1
Lib/contextlib.py : 1
"object.__enter__()" : 2
"object.__exit__()" : 2
"object.__aenter__()" : 2
"object.__aexit__()" : 2
management: : 1
managed_resource(*args : 1
acquire_resource(*args : 1
release_resource(resource) : 1
managed_resource(timeout=3600) : 1
resource: : 1
"one-shot" : 1
decorators) : 1
@contextlib.asynccontextmanager : 1
asynccontextmanager : 3
@asynccontextmanager : 3
get_connection(): : 1
acquire_db_connection() : 1
release_db_connection(conn) : 1
get_all_users(): : 1
get_connection() : 1
conn.query('SELECT : 1
timeit(): : 1
print(f'it : 1
{time.monotonic() : 1
now}s : 1
run') : 1
@timeit() : 1
"one- : 1
shot" : 1
contextlib.closing(thing) : 1
closing(thing): : 1
thing.close() : 1
closing(urlopen('https://www.python.org')) : 1
"page" : 1
"page.close()" : 1
contextlib.aclosing(thing) : 1
aclosing(thing): : 1
thing.aclose() : 1
"aclosing()" : 1
aclosing : 1
aclosing(my_generator()) : 1
contextlib.nullcontext(enter_result=None) : 1
*enter_result* : 1
stand-in : 2
myfunction(arg : 1
ignore_exceptions=False): : 1
ignore_exceptions: : 1
cm : 12
contextlib.suppress(Exception) : 1
contextlib.nullcontext() : 1
*enter_result*: : 1
process_file(file_or_path): : 1
isinstance(file_or_path : 1
open(file_or_path) : 1
nullcontext(file_or_path) : 1
send_http(session=None): : 1
aiohttp : 1
aiohttp.ClientSession() : 1
nullcontext(session) : 1
contextlib.suppress(*exceptions) : 1
suppress(FileNotFoundError): : 2
os.remove('somefile.tmp') : 2
os.remove('someotherfile.tmp') : 2
contextlib.redirect_stdout(new_target) : 1
redirect_stdout(io.StringIO()) : 1
help(pow) : 3
open('help.txt' : 1
redirect_stdout(f): : 1
*sys.stderr*: : 1
redirect_stdout(sys.stderr): : 1
contextlib.redirect_stderr(new_target) : 1
"redirect_stdout()" : 3
contextlib.chdir(path) : 1
Non : 1
non-linear : 2
relinquished : 1
contextlib.ContextDecorator : 1
"ContextDecorator": : 1
ContextDecorator : 3
mycontext(ContextDecorator): : 1
print('Starting') : 2
*exc): : 3
print('Finishing') : 2
@mycontext() : 2
function(): : 3
middle') : 4
Finishing : 4
mycontext(): : 2
cm(): : 1
@cm() : 1
"cm" : 1
mycontext(ContextBaseClass : 1
ContextDecorator): : 1
contextlib.AsyncContextDecorator : 1
"AsyncContextDecorator": : 1
mycontext(AsyncContextDecorator): : 1
run(function()) : 2
contextlib.ExitStack : 1
[stack.enter_context(open(fname)) : 2
filenames] : 2
unwinding : 1
enter_context(cm) : 1
Enters : 1
*cm* : 2
push(exit) : 1
callback(callback : 1
pop_all() : 1
Transfers : 1
nothing" : 1
Hold : 1
close_files : 1
stack.pop_all().close : 1
close_files() : 1
enter_async_context(cm) : 1
"enter_context()" : 1
push_async_exit(exit) : 1
"push()" : 1
push_async_callback(callback : 1
"callback()" : 1
"asynccontextmanager()": : 1
AsyncExitStack() : 1
stack.enter_async_context(get_connection()) : 1
range(5)] : 1
stack.enter_context(resource) : 1
need_special_resource(): : 1
acquire_special_resource() : 1
stack.callback(release_special_resource : 1
special) : 1
stack.enter_context(cm) : 1
"try"/"except"/"finally" : 1
"ExitStack.push()" : 1
AbstractContextManager : 1
ResourceManager(AbstractContextManager): : 1
acquire_resource : 2
release_resource : 2
check_resource_ok=None): : 1
self.acquire_resource : 1
self.release_resource : 1
check_resource_ok : 2
check_resource_ok(resource): : 1
self.check_resource_ok : 1
_cleanup_on_error(self): : 1
stack.push(self) : 1
stack.pop_all() : 3
self.acquire_resource() : 1
self._cleanup_on_error(): : 1
self.check_resource_ok(resource): : 1
{!r}" : 1
RuntimeError(msg.format(resource)) : 1
*exc_details): : 1
self.release_resource() : 1
cleanup_needed : 2
perform_operation() : 4
cleanup_needed: : 1
cleanup_resources() : 1
stack.callback(cleanup_resources) : 1
Callback(ExitStack): : 1
self.callback(callback : 1
cancel(self): : 1
self.pop_all() : 1
Callback(cleanup_resources) : 1
cb: : 1
cb.cancel() : 1
"ExitStack.callback()" : 1
advance: : 1
@stack.callback : 1
cleanup_resources(): : 1
track_entry_and_exit(ContextDecorator): : 1
decorators: : 3
singleuse(): : 1
print("Before") : 1
print("After") : 1
singleuse() : 1
"reentrant" : 1
*inside* : 1
"suppress()" : 1
redirect_stdout : 1
write_to_stream : 1
redirect_stdout(stream) : 1
write_to_stream: : 2
print("This : 5
stdout") : 3
stream") : 1
print(stream.getvalue()) : 1
Distinct : 2
"reusable" : 1
"reusable : 1
reentrant" : 1
reusable) : 1
correctly) : 3
stack.callback(print : 4
"Callback: : 6
context") : 12
print("Leaving : 6
Callback: : 6
outer_stack: : 1
outer_stack.callback(print : 1
inner_stack: : 1
inner_stack.callback(print : 1
Lib/getopt.py : 1
'"--"') : 1
getopt.getopt(args : 3
shortopts : 2
longopts=[]) : 2
*shortopts* : 2
("':'"; : 1
non-options : 1
non-GNU : 1
*longopts* : 2
'frob']" : 1
"--fo" : 1
"--f" : 1
"GetoptError" : 1
pairs; : 1
option-and-value : 1
"'-x'") : 1
"'-- : 1
long-option'") : 1
getopt.gnu_getopt(args : 1
intermixed : 1
"POSIXLY_CORRECT" : 1
getopt.GetoptError : 2
"opt" : 3
relates : 1
getopt.error : 1
"GetoptError"; : 1
'-a : 1
-cfoo : 1
a2'.split() : 1
['-a' : 1
'-b' : 1
'-cfoo' : 1
'a1' : 2
'a2'] : 4
optlist : 4
'abc:d:') : 1
[('-a' : 1
('-b' : 1
('-c' : 1
('-d' : 1
'bar')] : 1
['a1' : 2
'--condition=foo : 1
--testing : 1
--output-file : 1
abc.def : 1
a2' : 1
s.split() : 1
['--condition=foo' : 1
'--testing' : 1
'--output-file' : 1
'abc.def' : 1
'-x' : 1
'condition=' : 1
'output-file=' : 1
'testing']) : 1
[('--condition' : 1
('--testing' : 1
('--output-file' : 1
'abc.def') : 1
('-x' : 1
opts : 2
getopt.getopt(sys.argv[1:] : 1
"ho:v" : 1
["help" : 1
"output="]) : 1
print(err) : 1
"option : 2
recognized" : 1
usage() : 2
sys.exit(2) : 1
opts: : 1
"-v": : 1
("-h" : 1
"--help"): : 1
("-o" : 1
"--output"): : 1
"unhandled : 1
'--output') : 1
dest='verbose' : 2
args.output : 1
args.verbose : 1
Lib/tokenize.py : 1
"pretty- : 1
printers" : 1
colorizers : 1
"OP" : 2
"exact_type" : 4
*generator*: : 1
tokenize.tokenize(readline) : 1
"tokenize()" : 7
"io.IOBase.readline()" : 2
"(srow : 1
scol)" : 1
"(erow : 1
ecol)" : 1
*physical* : 1
tokenize.generate_tokens(readline) : 1
"generate_tokens()" : 1
tokenize.untokenize(iterable) : 1
reconstructed : 1
lossless : 1
round-trips : 1
(column : 1
positions) : 1
tokenizes : 1
tokenize.detect_encoding(readline) : 1
"detect_encoding()" : 3
"'utf-8-sig'" : 1
tokenize.open(filename) : 1
tokenize.TokenError : 1
"""Beginning : 1
"ERRORTOKEN" : 1
[filename.py] : 1
--exact : 1
"filename.py" : 1
rewriter : 1
untokenize : 1
OP : 8
decistmt(s): : 1
"""Substitute : 1
'print(+21.3e-5*-.1234/81.7)' : 1
decistmt(s) : 1
(+Decimal : 1
('21.3e-5')*-Decimal : 1
('.1234')/Decimal : 1
('81.7'))" : 1
"e-007" : 1
(Windows) : 1
"e-07" : 1
13th : 1
exec(s) : 1
#doctest: : 1
-3.21716034272e-0...7 : 1
exec(decistmt(s)) : 1
-3.217160342717258261933904529E-7 : 1
tokenize(BytesIO(s.encode('utf-8')).readline) : 1
toknum : 2
tokval : 1
g: : 1
tokval: : 1
result.extend([ : 1
(NAME : 1
'Decimal') : 1
(OP : 2
'(') : 1
(STRING : 1
repr(tokval)) : 1
')') : 1
result.append((toknum : 1
tokval)) : 1
untokenize(result).decode('utf-8') : 1
say_hello(): : 1
World!") : 1
say_hello() : 1
0,0-0,0: : 2
ENCODING : 2
1,0-1,3: : 2
1,4-1,13: : 2
'say_hello' : 4
1,13-1,14: : 2
1,14-1,15: : 2
1,15-1,16: : 2
1,16-1,17: : 2
2,0-2,4: : 2
2,4-2,9: : 2
2,9-2,10: : 2
2,10-2,25: : 2
'"Hello : 2
World!"' : 2
2,25-2,26: : 2
2,26-2,27: : 2
3,0-3,1: : 2
NL : 2
4,0-4,0: : 2
4,0-4,9: : 2
4,9-4,10: : 2
4,10-4,11: : 2
4,11-4,12: : 2
5,0-5,0: : 2
"-e" : 8
RPAR : 3
COLON : 1
"generate_tokens()": : 1
tokenize.open('hello.py') : 1
tokenize.generate_tokens(f.readline) : 1
tokens: : 2
print(token) : 3
"tokenize()": : 1
open('hello.py' : 1
tokenize.tokenize(f.readline) : 1
Lib/dataclasses.py : 1
InventoryItem: : 2
"""Class : 1
inventory.""" : 1
unit_price: : 2
quantity_on_hand: : 3
total_cost(self) : 1
self.unit_price : 2
self.quantity_on_hand : 2
unit_price : 1
quantity_on_hand : 1
"InventoryItem" : 1
@dataclasses.dataclass(* : 1
init=True : 3
repr=True : 4
eq=True : 3
order=False : 3
frozen=False : 3
match_args=True : 3
kw_only=False : 3
slots=False : 3
weakref_slot=False) : 3
"field"s : 2
"field" : 1
on; : 2
@dataclass(init=True : 1
"init": : 2
"repr": : 2
"InventoryItem(name='widget' : 1
unit_price=3.0 : 1
quantity_on_hand=10)" : 1
"eq": : 1
"order": : 1
"unsafe_hash": : 1
Mutability : 1
"unsafe_hash=True" : 1
"unsafe_hash=True"; : 1
mutable) : 1
id-based : 1
"frozen": : 1
"match_args": : 1
"kw_only": : 2
"KW_ONLY" : 5
"slots": : 1
"fields()" : 5
"weakref_slot": : 1
weakref-able : 1
dataclasses.field(* : 1
default=MISSING : 1
default_factory=MISSING : 1
compare=True : 1
metadata=None : 1
kw_only=MISSING) : 1
"field()" : 6
field(default_factory=list) : 3
c.mylist : 1
"MISSING" : 2
"default_factory": : 1
"hash": : 1
"compare": : 2
"hash=False" : 1
"compare=True" : 1
("__eq__()" : 1
"metadata": : 1
"MappingProxyType()" : 1
third-parties : 1
field(repr=False) : 1
field(repr=False : 1
"C.z" : 1
"C.t" : 1
"C.y" : 1
dataclasses.Field : 1
"type": : 1
"compare" : 1
"metadata" : 1
dataclasses.fields(class_or_instance) : 1
pseudo-fields : 2
"InitVar" : 3
dataclasses.asdict(obj : 1
dict_factory=dict) : 1
"dict_factory") : 1
"name: : 1
dataclasses: : 3
list[Point] : 1
Point(10 : 2
asdict(p) : 1
C([Point(0 : 1
4)]) : 1
asdict(c) : 1
{'mylist': : 1
[{'x': : 1
0} : 4
4}]} : 1
dict((field.name : 1
field.name)) : 1
fields(obj)) : 1
dataclasses.astuple(obj : 1
tuple_factory=tuple) : 1
"tuple_factory") : 1
astuple(p) : 1
astuple(c) : 1
([(0 : 1
4)],) : 1
tuple(getattr(obj : 1
field.name) : 1
dataclasses.fields(obj)) : 1
dataclasses.make_dataclass(cls_name : 1
namespace=None : 1
"cls_name" : 1
Field)" : 1
"weakref_slot" : 1
make_dataclass('C' : 1
[('x' : 2
('z' : 1
field(default=5))] : 1
namespace={'add_one': : 1
add_one(self): : 1
dataclasses.replace(obj : 1
**changes) : 1
"changes" : 3
"init=False" : 4
forewarned : 1
judiciously : 1
wise : 2
named) : 1
type)": : 1
is_dataclass_instance(obj): : 1
is_dataclass(obj) : 1
dataclasses.MISSING : 1
dataclasses.KW_ONLY : 1
pseudo-field : 3
Keyword- : 1
y=1.5 : 1
z=2.0) : 1
dataclasses.FrozenInstanceError : 1
"frozen=True" : 2
"self.__post_init__()" : 1
field(init=False) : 1
__post_init__(self): : 2
self.c : 1
Rectangle: : 1
height: : 1
Square(Rectangle): : 1
super().__init__(self.side : 1
self.side) : 1
dataclass-generated : 1
init-only : 3
j: : 1
InitVar[DatabaseType : 1
__post_init__(self : 1
database): : 1
self.j : 2
database.lookup('j') : 1
C(10 : 1
database=my_database) : 1
"FrozenInstanceError" : 1
"frozen=True": : 1
"object.__setattr__()" : 1
15.0 : 5
C(Base): : 1
(non- : 1
keyword-only) : 1
"Base.y" : 1
"Base.w" : 1
"D.t" : 1
"Base.x" : 1
"D.z" : 1
w: : 4
D(Base): : 1
field(kw_only=True : 1
re-ordered : 2
"init=False") : 1
element): : 3
self.x.append(element) : 1
o1 : 1
o1.add(1) : 1
o2.add(2) : 1
o1.x : 2
o2.x : 1
*if* : 1
x=x): : 1
D().x : 4
Unhashability : 1
behaviors: : 1
"descriptor.__get__(obj=None : 1
type=cls)" : 1
IntConversionDescriptor: : 1
self._default : 2
self._default) : 1
int(value)) : 1
IntConversionDescriptor : 1
IntConversionDescriptor(default=100) : 1
InventoryItem() : 1
print(i.quantity_on_hand) : 2
i.quantity_on_hand : 1
(Attribute : 3
"<grp.h>"): : 1
+---------+-------------+-----------------------------------+ : 5
|=========|=============|===================================| : 1
gr_name : 1
gr_passwd : 1
(encrypted) : 1
password; : 1
gr_gid : 1
gr_mem : 1
"gr_name" : 1
YP/NIS : 1
"getgrnam()" : 1
"getgrgid()".) : 1
grp.getgrgid(id) : 1
grp.getgrnam(name) : 1
Lib/ssl.py : 1
Layer") : 1
Also" : 1
socket-like : 1
decrypts : 1
"cipher()" : 2
"SSLContext.wrap_socket()" : 10
newer.Use : 1
(SNI) : 1
'www.python.org' : 2
socket.create_connection((hostname : 1
443)) : 3
context.wrap_socket(sock : 3
server_hostname=hostname) : 2
ssock: : 3
print(ssock.version()) : 2
IPv4: : 2
ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT) : 3
context.load_verify_locations('path/to/cabundle.pem') : 1
ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) : 1
context.load_cert_chain('/path/to/certchain.pem' : 1
'/path/to/private.key') : 1
sock.bind(('127.0.0.1' : 1
8443)) : 1
sock.listen(5) : 1
server_side=True) : 2
ssock.accept() : 1
ssl.create_default_context(purpose=Purpose.SERVER_AUTH : 1
cafile=None : 2
capath=None : 3
cadata=None) : 2
*purpose* : 3
*cafile* : 8
*capath* : 10
"SSLContext.load_verify_locations()" : 4
"SERVER_AUTH" : 1
"verify_mode" : 7
"CERT_REQUIRED" : 14
"SSLContext.load_default_certs()" : 4
"keylog_filename" : 1
"SSLKEYLOGFILE" : 2
security.If : 1
"Protocol : 1
mismatch" : 1
SSL3.0 : 2
ssl.create_default_context(Purpose.CLIENT_AUTH) : 1
ctx.options : 1
~ssl.OP_NO_SSLv3 : 1
ChaCha20/Poly1305 : 1
string.3DES : 1
ssl.SSLError : 1
superimposed : 1
designating : 4
"SSL" : 2
"PEM" : 2
"X509" : 1
"CERTIFICATE_VERIFY_FAILED" : 1
ssl.SSLZeroReturnError : 1
ssl.SSLWantReadError : 1
ssl.SSLWantWriteError : 1
ssl.SSLSyscallError : 1
ssl.SSLCertVerificationError : 1
verify_code : 1
verify_message : 1
ssl.CertificateError : 1
ssl.RAND_bytes(num) : 1
PRNG : 4
seeded : 2
RAND : 2
"RAND_status()" : 1
"RAND_add()" : 2
Cryptographically : 1
pseudorandom : 3
(CSPRNG) : 1
ssl.RAND_pseudo_bytes(num) : 1
is_cryptographic): : 1
is_cryptographic : 1
non-cryptographic : 2
"ssl.RAND_pseudo_bytes()" : 1
"ssl.RAND_bytes()" : 1
ssl.RAND_status() : 1
'enough' : 1
"ssl.RAND_egd()" : 1
"ssl.RAND_add()" : 1
ssl.RAND_add(bytes : 1
entropy) : 1
Mix : 1
*entropy* : 1
"0.0") : 1
1750** : 1
ssl.match_hostname(cert : 3
hostname) : 1
*cert* : 1
"SSLSocket.getpeercert()") : 1
2818** : 1
6125** : 2
SSL-based : 2
FTPS : 1
IMAPS : 1
POPS : 1
"CertificateError" : 1
{'subject': : 1
((('commonName' : 1
'example.com'),),)} : 1
"example.com") : 3
"example.org") : 1
"/home/py3k/Lib/ssl.py" : 1
match_hostname : 1
ssl.CertificateError: : 1
'example.org' : 1
'example.com' : 2
3.3.3: : 1
"*.*.com" : 1
"*a*.example.org") : 1
(IDN) : 2
A-labels : 1
"www*.xn--pthon-kva.org" : 1
"x*.python.org" : 1
"xn--tda.python.org" : 1
subjectAltName : 1
OpenSSL.Allow : 1
"www*.example.com" : 1
ssl.cert_time_to_seconds(cert_time) : 1
"cert_time" : 1
"notBefore" : 4
"notAfter" : 3
""%b : 1
%Z"" : 1
ssl.cert_time_to_seconds("Jan : 1
09:34:43 : 2
GMT") : 1
1515144883 : 1
print(datetime.utcfromtimestamp(timestamp)) : 1
2018-01-05 : 1
5280**) : 1
'GMT' : 1
ssl.get_server_certificate(addr : 1
ssl_version=PROTOCOL_TLS_CLIENT : 1
ca_certs=None[ : 1
SSL-protected : 1
(*hostname* : 1
*port-number*) : 1
PEM-encoded : 2
"ssl_version" : 2
"ca_certs" : 3
IPv6-compatible : 1
*ssl_version* : 2
ssl.DER_cert_to_PEM_cert(DER_cert_bytes) : 1
DER-encoded : 4
blob : 28
PEM- : 2
ssl.PEM_cert_to_DER_cert(PEM_cert_string) : 1
ssl.get_default_verify_paths() : 1
cafile : 4
capath : 5
"DefaultVerifyPaths": : 1
"openssl_cafile_env" : 1
"openssl_cafile" : 1
"openssl_capath_env" : 1
"openssl_capath" : 1
ssl.enum_certificates(store_name) : 1
*store_name* : 2
"ROOT" : 3
"MY" : 2
(cert_bytes : 2
encoding_type : 4
trust) : 2
cert_bytes : 2
"x509_asn" : 2
ASN.1 : 4
"pkcs_7_asn" : 2
PKCS#7 : 2
Trust : 1
OIDS : 1
trustworthy : 1
ssl.enum_certificates("CA") : 1
[(b'data...' : 1
'x509_asn' : 2
{'1.3.6.1.5.5.7.3.1' : 1
'1.3.6.1.5.5.7.3.2'}) : 1
(b'data...' : 1
True)] : 1
ssl.enum_crls(store_name) : 1
ssl.wrap_socket(sock : 1
cert_reqs=CERT_NONE : 1
ssl_version=PROTOCOL_TLS : 1
ca_certs=None : 1
do_handshake_on_connect=True : 2
suppress_ragged_eofs=True : 2
ciphers=None) : 1
"SSLContext.options" : 3
*cert_reqs* : 1
*ca_certs* : 1
"SSLContext.load_cert_chain()" : 3
"SSLContext.set_ciphers()" : 4
*do_handshake_on_connect* : 2
*suppress_ragged_eofs* : 2
ssl.CERT_NONE : 1
"SSLContext.verify_mode" : 5
"cert_reqs" : 3
ssl.CERT_OPTIONAL : 1
"CERT_OPTIONAL" : 5
connection; : 1
authenticity : 4
ssl.VerifyMode : 1
CERT_* : 1
ssl.VERIFY_DEFAULT : 1
"SSLContext.verify_flags" : 9
(CRLs) : 3
ssl.VERIFY_CRL_CHECK_LEAF : 1
cert's : 3
issuer : 6
CA) : 1
"SSLContext.load_verify_locations" : 1
ssl.VERIFY_CRL_CHECK_CHAIN : 1
ssl.VERIFY_X509_STRICT : 1
ssl.VERIFY_ALLOW_PROXY_CERTS : 1
ssl.VERIFY_X509_TRUSTED_FIRST : 1
ssl.VERIFY_X509_PARTIAL_CHAIN : 1
CAs : 1
trust-anchors : 1
self-signed : 3
ssl.VerifyFlags : 1
VERIFY_* : 1
ssl.PROTOCOL_TLS : 1
Selects : 21
"TLS" : 1
ssl.PROTOCOL_TLS_CLIENT : 1
Auto-negotiate : 2
ssl.PROTOCOL_TLS_SERVER : 1
ssl.PROTOCOL_SSLv2 : 1
"no- : 2
ssl2" : 1
ssl.PROTOCOL_SSLv3 : 1
ssl3" : 1
ssl.PROTOCOL_TLSv1 : 1
ssl.PROTOCOL_TLSv1_1 : 1
1.0.1+ : 4
ssl.PROTOCOL_TLSv1_2 : 1
ssl.OP_ALL : 1
"SSL_OP_ALL" : 1
ssl.OP_NO_SSLv2 : 1
peers : 10
ssl.OP_NO_SSLv3 : 1
ssl.OP_NO_TLSv1 : 1
ssl.OP_NO_TLSv1_1 : 1
ssl.OP_NO_TLSv1_2 : 1
ssl.OP_NO_TLSv1_3 : 1
ssl.OP_NO_RENEGOTIATION : 1
HelloRequest : 1
ClientHello : 1
ssl.OP_CIPHER_SERVER_PREFERENCE : 1
ssl.OP_SINGLE_DH_USE : 1
ssl.OP_SINGLE_ECDH_USE : 1
ssl.OP_ENABLE_MIDDLEBOX_COMPAT : 1
Spec : 1
(CCS) : 1
ssl.OP_NO_COMPRESSION : 1
ssl.Options : 1
OP_* : 1
ssl.OP_NO_TICKET : 1
ticket : 1
ssl.OP_IGNORE_UNEXPECTED_EOF : 1
ssl.HAS_ALPN : 1
ssl.HAS_NEVER_CHECK_COMMON_NAME : 1
ssl.HAS_ECDH : 1
ssl.HAS_SNI : 1
6066**) : 1
ssl.HAS_NPN : 1
*Next : 1
"SSLContext.set_npn_protocols()" : 2
ssl.HAS_SSLv2 : 1
ssl.HAS_SSLv3 : 1
ssl.HAS_TLSv1 : 1
ssl.HAS_TLSv1_1 : 1
ssl.HAS_TLSv1_2 : 1
ssl.HAS_TLSv1_3 : 1
ssl.CHANNEL_BINDING_TYPES : 1
"SSLSocket.get_channel_binding()" : 1
ssl.OPENSSL_VERSION : 2
'OpenSSL : 1
ssl.OPENSSL_VERSION_INFO : 2
ssl.OPENSSL_VERSION_NUMBER : 2
268443839 : 1
hex(ssl.OPENSSL_VERSION_NUMBER) : 1
'0x100020bf' : 1
ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE : 1
ssl.ALERT_DESCRIPTION_INTERNAL_ERROR : 1
ALERT_DESCRIPTION_* : 2
5246** : 1
"SSLContext.set_servername_callback()" : 2
ssl.AlertDescription : 1
Purpose.SERVER_AUTH : 1
Purpose.CLIENT_AUTH : 1
ssl.SSLErrorNumber : 1
SSL_ERROR_* : 1
ssl.TLSVersion : 1
TLSVersion.MINIMUM_SUPPORTED : 1
TLSVersion.MAXIMUM_SUPPORTED : 1
TLSVersion.SSLv3 : 1
TLSVersion.TLSv1 : 1
TLSVersion.TLSv1_1 : 1
TLSVersion.TLSv1_2 : 1
TLSVersion.TLSv1_3 : 1
"TLSVersion" : 2
"TLSVersion.TLSv1_2" : 2
"TLSVersion.TLSv1_3" : 1
ssl.SSLSocket(socket.socket) : 1
Objects: : 3
"getpeername()" : 1
"getsockname()" : 1
"gettimeout()" : 1
TLS) : 1
diverge : 1
SSLSocket.read(len=1024 : 1
buffer=None) : 1
"SSLWantReadError" : 7
"SSLWantWriteError" : 6
re-negotiation : 2
SSLSocket.write(buf) : 1
unencrypted : 2
application-level : 1
decrypt/encrypt : 1
wire-level : 1
"SSLSocket.unwrap()" : 1
called.Normally : 1
SSLSocket.do_handshake() : 1
SSLSocket.getpeercert(binary_form=False) : 1
"binary_form" : 3
amongst : 2
"issuer" : 3
certificate) : 1
*Subject : 1
Name* : 1
3280**) : 1
"subjectAltName" : 1
(RDNs) : 1
certificate's : 2
RDN : 1
name-value : 4
{'issuer': : 1
((('countryName' : 2
'IL'),) : 1
(('organizationName' : 4
'StartCom : 2
Ltd.'),) : 1
(('organizationalUnitName' : 2
'Secure : 1
Signing'),) : 1
(('commonName' : 4
Intermediate : 1
CA'),)) : 2
'notAfter': : 2
'Nov : 2
08:15:19 : 1
GMT' : 5
'notBefore': : 2
03:09:52 : 1
'serialNumber': : 2
'95F0' : 1
'subject': : 2
((('description' : 1
'571208-SLe257oHY9fVQ07Z'),) : 1
(('countryName' : 2
'US'),) : 4
(('stateOrProvinceName' : 2
'California'),) : 1
(('localityName' : 2
'San : 1
Francisco'),) : 1
'Electronic : 1
Frontier : 1
Inc.'),) : 1
'*.eff.org'),) : 1
(('emailAddress' : 1
'hostmaster@eff.org'),)) : 1
'subjectAltName': : 2
(('DNS' : 2
'*.eff.org') : 1
('DNS' : 15
'eff.org')) : 1
role: : 1
"CERT_NONE" : 7
"CERT_REQUIRED") : 1
X509v3 : 1
"caIssuers" : 1
SSLSocket.cipher() : 1
three-value : 3
SSLSocket.shared_ciphers() : 1
"shared_ciphers()" : 2
SSLSocket.compression() : 1
SSL-level : 1
SSLSocket.get_channel_binding(cb_type='tls-unique') : 1
*cb_type* : 1
"CHANNEL_BINDING_TYPES" : 1
'tls-unique' : 1
5929** : 1
SSLSocket.selected_alpn_protocol() : 1
SSLSocket.selected_npn_protocol() : 1
SSLSocket.unwrap() : 1
SSLSocket.verify_client_post_handshake() : 1
(PHA) : 1
PHA : 3
"SSLContext.post_handshake_auth" : 1
CertificateRequest : 1
precondition : 1
SSLSocket.version() : 1
""SSLv2"" : 1
""SSLv3"" : 1
""TLSv1"" : 1
""TLSv1.1"" : 1
""TLSv1.2"" : 1
SSLSocket.pending() : 1
decrypted : 1
SSLSocket.context : 1
"SSLContext.wrap_socket()") : 1
SSLSocket.server_side : 1
SSLSocket.server_hostname : 1
"server_hostname" : 2
SSLSocket.session : 1
"do_handshake()" : 3
SSLSocket.session_reused : 1
longer-lived : 1
certificate(s) : 1
key(s) : 1
ssl.SSLContext(protocol=None) : 1
"PROTOCOL_*" : 1
"PROTOCOL_TLS"; : 1
(down : 1
side) : 1
top): : 1
+--------------------------+--------------+--------------+---------------+-----------+-------------+-------------+ : 8
*client* : 1
**server** : 1
**SSLv2** : 1
**SSLv3** : 1
**TLS** : 1
**TLSv1** : 1
**TLSv1.1** : 1
**TLSv1.2** : 1
*SSLv2* : 1
*SSLv3* : 1
*TLS* : 1
(*SSLv23*) : 1
*TLSv1* : 1
*TLSv1.1* : 1
*TLSv1.2* : 1
PROTOCOL : 1
"OP_SINGLE_DH_USE" : 2
"OP_SINGLE_ECDH_USE" : 2
"PROTOCOL_SSLv2") : 2
"PROTOCOL_SSLv3") : 1
"HIGH" : 1
224 : 1
SSLContext.cert_store_stats() : 1
cert: : 1
context.cert_store_stats() : 1
{'crl': : 1
'x509_ca': : 1
'x509': : 1
SSLContext.load_cert_chain(certfile : 1
password=None) : 1
decrypting : 2
decrypt : 3
SSLContext.load_default_certs(purpose=Purpose.SERVER_AUTH) : 1
"certification : 4
"Purpose.SERVER_AUTH" : 1
(client : 1
"Purpose.CLIENT_AUTH" : 1
SSLContext.load_verify_locations(cafile=None : 1
peers' : 2
certification : 5
DER- : 1
SSLContext.get_ca_certs(binary_form=False) : 1
ssl.SSLContext(ssl.PROTOCOL_SSLv23) : 1
ctx.set_ciphers('ECDHE+AESGCM:!ECDSA') : 1
ctx.get_ciphers() : 1
[{'aead': : 1
'alg_bits': : 2
'auth': : 2
'auth-rsa' : 2
'ECDHE-RSA-AES256-GCM-SHA384 : 1
Kx=ECDH : 2
Au=RSA : 2
'Enc=AESGCM(256) : 1
Mac=AEAD' : 2
'digest': : 2
50380848 : 1
'kea': : 2
'kx-ecdhe' : 2
'ECDHE-RSA-AES256-GCM-SHA384' : 1
'protocol': : 2
'TLSv1.2' : 2
'strength_bits': : 2
'symmetric': : 2
'aes-256-gcm'} : 1
{'aead': : 1
'ECDHE-RSA-AES128-GCM-SHA256 : 1
'Enc=AESGCM(128) : 1
50380847 : 1
'ECDHE-RSA-AES128-GCM-SHA256' : 1
'aes-128-gcm'}] : 1
SSLContext.set_default_verify_paths() : 1
succeeds: : 1
SSLContext.set_ciphers(ciphers) : 1
ciphers) : 1
"SSLSocket.cipher()" : 2
cipher.TLS : 1
"set_ciphers()" : 1
SSLContext.set_alpn_protocols(protocols) : 1
"['http/1.1' : 2
'spdy/2']" : 2
agreed- : 1
SSLContext.set_npn_protocols(protocols) : 1
"SSLSocket.selected_npn_protocol()" : 1
agreed-upon : 1
"HAS_NPN" : 1
SSLContext.sni_callback : 1
6066** : 1
*sni_callback* : 4
intending : 1
"ssl.SSLSocket"'s : 1
"SSLSocket.context" : 2
"SSLSocket.compression()" : 1
progressed : 1
"ALERT_DESCRIPTION_*" : 1
"ALERT_DESCRIPTION_INTERNAL_ERROR" : 2
"ALERT_DESCRIPTION_HANDSHAKE_FAILURE" : 1
OPENSSL_NO_TLSEXT : 1
SSLContext.set_servername_callback(server_name_callback) : 1
"sni_callback" : 1
*server_name_callback* : 3
IDN-encoded : 1
SSLContext.load_dh_params(dhfile) : 1
(DH) : 1
*dhfile* : 1
SSLContext.set_ecdh_curve(curve_name) : 1
(ECDH) : 1
arguably : 1
*curve_name* : 1
"HAS_ECDH" : 1
Perfect : 1
Secrecy : 1
Bernat : 1
SSLContext.wrap_socket(sock : 1
session=None) : 2
"SSLContext.sslsocket_class" : 2
"SSLSocket") : 1
"server_side" : 2
lazy; : 1
"do_handshake_on_connect" : 1
"suppress_ragged_eofs" : 1
"SSLSocket.recv()" : 3
*session* : 4
"session" : 3
SSLContext.sslsocket_class : 1
SSLContext.wrap_bio(incoming : 1
*incoming* : 2
*outgoing* : 2
"SSLContext.sslobject_class" : 2
"SSLObject") : 1
SSLContext.sslobject_class : 1
SSLContext.session_stats() : 1
context.session_stats() : 1
stats['hits'] : 1
stats['misses'] : 1
ssl.SSLContext(ssl.PROTOCOL_TLSv1_2) : 1
context.verify_mode : 1
context.check_hostname : 1
context.load_default_certs() : 1
ssl_sock : 1
context.wrap_socket(s : 1
server_hostname='www.verisign.com') : 1
ssl_sock.connect(('www.verisign.com' : 1
SSLContext.keylog_filename : 1
NSS : 1
Wireshark : 1
append-only : 1
"TLSVersion.MAXIMUM_SUPPORTED" : 1
"maximum_version" : 2
"minimum_version" : 1
SSLContext.minimum_version : 1
"TLSVersion.MINIMUM_SUPPORTED" : 1
SSLContext.options : 1
"OP_ALL" : 1
"Options" : 1
ssl.create_default_context().options : 1
<Options.OP_ALL|OP_NO_SSLv3|OP_NO_SSLv2|OP_NO_COMPRESSION: : 1
2197947391> : 1
"OP_NO_SSL*" : 1
"OP_NO_TLS*" : 1
Post-handshake : 1
"SSLSocket.verify_client_post_handshake()" : 1
SSLContext.protocol : 1
3.8.9 : 1
3.9.3 : 1
SSLContext.security_level : 1
SSLContext.verify_flags : 1
"VerifyFlags" : 1
ssl.create_default_context().verify_flags : 1
<VerifyFlags.VERIFY_X509_TRUSTED_FIRST: : 1
32768> : 1
"VerifyMode" : 1
ssl.create_default_context().verify_mode : 1
<VerifyMode.CERT_REQUIRED: : 1
public-key : 1
private-key : 1
*principal* : 1
organization) : 1
key*; : 1
key* : 1
principals : 1
*subject* : 1
*issuer* : 1
issuer's : 4
1422**) : 1
-----BEGIN : 6
CERTIFICATE----- : 10
(certificate : 3
-----END : 6
*certificate : 1
chain* : 1
till : 7
*self-signed* : 1
*root : 1
certificate* : 1
authority's : 1
certificate: : 3
server).. : 1
CA).. : 1
CA's : 1
issuer).. : 1
connection's : 1
"CA : 1
certs" : 1
certificate; : 3
chain: : 4
PRIVATE : 2
KEY----- : 2
SSL-encrypted : 1
buying : 1
-new : 1
-x509 : 1
-days : 1
365 : 4
-nodes : 1
-out : 1
cert.pem : 2
-keyout : 1
.......++++++ : 1
.............................++++++ : 1
'cert.pem' : 1
Distinguished : 1
Country : 1
[AU]:US : 1
Province : 1
[Some-State]:MyState : 1
Locality : 1
city) : 1
[]:Some : 1
company) : 1
[Internet : 1
Widgits : 1
Pty : 1
Ltd]:My : 1
Organizational : 1
[]:My : 1
YOUR : 1
[]:myserver.mygroup.myorganization.com : 1
[]:ops@myserver.mygroup.myorganization.com : 1
trusted) : 1
verification: : 1
right): : 1
context.load_verify_locations("/etc/ssl/certs/ca-bundle.crt") : 1
"/etc/ssl/certs/ca-bundle.crt"; : 1
hostname: : 1
context.wrap_socket(socket.socket(socket.AF_INET) : 1
server_hostname="www.python.org") : 1
conn.connect(("www.python.org" : 1
conn.getpeercert() : 1
"www.python.org"): : 1
pprint.pprint(cert) : 1
{'OCSP': : 1
('http://ocsp.digicert.com',) : 1
'caIssuers': : 1
('http://cacerts.digicert.com/DigiCertSHA2ExtendedValidationServerCA.crt',) : 1
'crlDistributionPoints': : 1
('http://crl3.digicert.com/sha2-ev-server-g1.crl' : 1
'http://crl4.digicert.com/sha2-ev-server-g1.crl') : 1
'issuer': : 1
'DigiCert : 2
Inc'),) : 1
'www.digicert.com'),) : 1
SHA2 : 1
'Sep : 2
12:00:00 : 1
'01BB6F00122B177F36CAB49CEA8B6B26' : 1
((('businessCategory' : 1
'Private : 1
Organization'),) : 1
(('1.3.6.1.4.1.311.60.2.1.3' : 1
(('1.3.6.1.4.1.311.60.2.1.2' : 1
'Delaware'),) : 1
(('serialNumber' : 1
'3359300'),) : 1
(('streetAddress' : 1
'16 : 1
Rd'),) : 1
(('postalCode' : 1
'03894-4801'),) : 1
'NH'),) : 1
'Wolfeboro'),) : 1
Foundation'),) : 1
'www.python.org'),)) : 1
'pypi.org') : 1
'docs.python.org') : 1
'testpypi.org') : 1
'bugs.python.org') : 1
'wiki.python.org') : 1
'hg.python.org') : 1
'mail.python.org') : 1
'packaging.python.org') : 1
'pythonhosted.org') : 1
'www.pythonhosted.org') : 1
'test.pythonhosted.org') : 1
'us.pycon.org') : 1
'id.python.org')) : 1
conn.sendall(b"HEAD : 1
HTTP/1.0\r\nHost: : 2
linuxfr.org\r\n\r\n") : 1
pprint.pprint(conn.recv(1024).split(b"\r\n")) : 1
[b'HTTP/1.1 : 1
b'Date: : 1
18:27:20 : 1
b'Server: : 1
nginx' : 1
b'Content-Type: : 1
text/html; : 1
charset=utf-8' : 1
b'X-Frame-Options: : 1
SAMEORIGIN' : 1
b'Content-Length: : 1
45679' : 1
b'Accept-Ranges: : 1
b'Via: : 1
varnish' : 1
b'Age: : 1
2188' : 1
b'X-Served-By: : 1
cache-lcy1134-LCY' : 1
b'X-Cache: : 1
HIT' : 1
b'X-Cache-Hits: : 1
b'Vary: : 1
Cookie' : 1
b'Strict-Transport-Security: : 1
max-age=63072000; : 1
includeSubDomains' : 1
b''] : 2
connect: : 1
ssl.create_default_context(ssl.Purpose.CLIENT_AUTH) : 1
context.load_cert_chain(certfile="mycertfile" : 1
keyfile="mykeyfile") : 1
bindsocket : 1
bindsocket.bind(('myaddr.example.com' : 1
10023)) : 1
bindsocket.listen(5) : 1
connection: : 2
newsocket : 1
bindsocket.accept() : 1
connstream : 1
context.wrap_socket(newsocket : 1
deal_with_client(connstream) : 1
connstream.shutdown(socket.SHUT_RDWR) : 1
connstream.close() : 1
"connstream" : 1
you): : 1
deal_with_client(connstream): : 1
connstream.recv(1024) : 2
do_something(connstream : 1
do_something : 1
*reading* : 1
drain : 1
non-blocking: : 1
readiness: : 1
sock.do_handshake() : 1
ssl.SSLWantReadError: : 1
select.select([sock] : 1
ssl.SSLWantWriteError: : 1
select.select([] : 1
[sock] : 1
functionality: : 2
"select/poll : 1
(readiness : 1
based) : 1
ssl.SSLObject : 1
reduced-scope : 1
"BIO" : 1
BIOs : 1
"session_reused" : 1
"selected_alpn_protocol()" : 1
"selected_npn_protocol()" : 1
"pending()" : 1
IO; : 1
"SSLObject": : 1
IO) : 1
eof : 3
read(n=- : 2
write(buf) : 1
ssl.SSLSession : 1
Session : 2
ticket_lifetime_hint : 1
has_ticket : 1
**client : 1
use** : 2
smtplib.SMTP("mail.python.org" : 1
port=587) : 1
smtp.starttls(context=context) : 1
(220 : 1
b'2.0.0 : 1
TLS') : 1
sufficient; : 1
hostname; : 1
"SSLContext.check_hostname" : 2
matchings : 1
client_context : 1
client_context.minimum_version : 1
ssl.TLSVersion.TLSv1_3 : 2
client_context.maximum_version : 1
negotiating : 1
"SSLContext.get_ciphers()" : 2
"openssl : 1
ciphers" : 1
multi-processed : 1
"RAND_bytes()" : 1
disjunct : 1
AES-GCM : 1
"SSLSocket.session" : 1
rekeying : 1
Encryption: : 1
Intro : 1
1422: : 1
Privacy : 1
Electronic : 2
Mail: : 1
II: : 1
Certificate-Based : 1
Management** : 1
4086: : 1
Randomness : 1
Security** : 1
E. : 1
Schiller : 1
5280: : 1
(CRL) : 1
Profile** : 1
5246: : 1
1.2** : 1
Dierks : 1
6066: : 1
Extensions** : 1
Eastlake : 1
TLS: : 1
7525: : 1
Recommendations : 1
(DTLS)** : 1
Mozilla's : 1
Lib/tabnanny.py : 1
"check()" : 3
releases; : 1
tabnanny.check(file_or_dir) : 1
*file_or_dir* : 3
tabnanny.verbose : 1
tabnanny.filename_only : 1
tabnanny.NannyNag : 1
"process_tokens()" : 1
tabnanny.process_tokens(tokens) : 1
Tk/Tcl : 1
virtues : 1
famous : 1
vastly : 1
************************************************************************** : 1
Lib/argparse.py : 1
whole: : 1
prog='ProgramName' : 1
description='What : 1
does' : 1
epilog='Text : 1
"ArgumentParser.add_argument()" : 5
on/off : 3
parser.add_argument('filename') : 1
parser.add_argument('-c' : 3
'--count') : 1
'--verbose' : 1
"ArgumentParser.parse_args()" : 1
"argparse.Namespace" : 1
print(args.filename : 1
args.count : 1
args.verbose) : 1
+------------------------+-------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------+ : 11
|========================|=============================================================|============================================================================================================================| : 1
"'store'" : 2
"'store_const'" : 4
"'store_true'" : 2
"'append'" : 2
"'append_const'" : 3
"'count'" : 2
"'help'" : 2
"'version'" : 2
"argparse.REMAINDER" : 2
"argparse.FileType('w')" : 1
max: : 1
argparse.ArgumentParser(description='Process : 2
integers.') : 2
parser.add_argument('integers' : 2
metavar='N' : 2
help='an : 3
accumulator') : 2
parser.add_argument('--sum' : 2
dest='accumulate' : 3
action='store_const' : 4
const=sum : 3
default=max : 3
help='sum : 3
max)') : 3
print(args.accumulate(args.integers)) : 1
[--sum] : 2
[N : 2
--sum : 2
"integers" : 4
"accumulate" : 2
"--sum" : 1
"Namespace" : 8
parser.parse_args(['--sum' : 1
'7' : 4
'-1' : 2
'42']) : 1
Namespace(accumulate=<built-in : 3
sum> : 2
integers=[7 : 1
42]) : 2
argparse.ArgumentParser(prog=None : 1
usage=None : 1
description=None : 1
epilog=None : 1
parents=[] : 1
formatter_class=argparse.HelpFormatter : 1
prefix_chars='-' : 1
fromfile_prefix_chars=None : 1
argument_default=None : 1
conflict_handler='error' : 1
add_help=True : 1
allow_abbrev=True : 1
exit_on_error=True) : 1
"os.path.basename(sys.argv[0])") : 1
parser) : 3
optionals : 2
unnecessary) : 1
"-h/--help" : 3
*allow_abbrev* : 2
"-v : 1
-v" : 1
*exit_on_error* : 1
"myprogram.py" : 3
parser.add_argument('--foo' : 32
help='foo : 10
from): : 1
myprogram.py : 5
[--foo : 17
FOO] : 14
--foo : 30
FOO : 12
subdir/myprogram.py : 1
"prog=" : 2
"ArgumentParser": : 4
argparse.ArgumentParser(prog='myprogram') : 2
parser.print_help() : 20
myprogram : 3
"%(prog)s" : 4
%(prog)s : 2
program') : 1
argparse.ArgumentParser(prog='PROG') : 15
nargs='?' : 9
parser.add_argument('bar' : 12
help='bar : 5
PROG : 27
[FOO]] : 1
[bar : 3
[FOO] : 2
"usage=" : 1
argparse.ArgumentParser(prog='PROG' : 8
usage='%(prog)s : 1
[options]') : 1
"description=" : 1
argparse.ArgumentParser(description='A : 1
bars') : 1
argparse.py : 2
line-wrapped : 2
"epilog=" : 2
description='A : 1
bars' : 1
epilog="And : 1
"parents=" : 3
parent_parser : 1
argparse.ArgumentParser(add_help=False) : 1
parent_parser.add_argument('--parent' : 1
foo_parser : 1
argparse.ArgumentParser(parents=[parent_parser]) : 2
foo_parser.add_argument('foo') : 1
foo_parser.parse_args(['--parent' : 1
'XXX']) : 1
Namespace(foo='XXX' : 1
parent=2) : 1
bar_parser : 1
bar_parser.add_argument('--bar') : 1
bar_parser.parse_args(['--bar' : 1
'YYY']) : 1
Namespace(bar='YYY' : 1
parent=None) : 1
"add_help=False" : 1
argparse.RawDescriptionHelpFormatter : 1
argparse.RawTextHelpFormatter : 1
argparse.MetavarTypeHelpFormatter : 1
"RawDescriptionHelpFormatter" : 2
"RawTextHelpFormatter" : 2
line-wrap : 1
prog='PROG' : 4
description='''this : 1
okay''' : 1
epilog=''' : 1
lines''') : 1
"formatter_class=" : 1
line-wrapped: : 1
formatter_class=argparse.RawDescriptionHelpFormatter : 1
description=textwrap.dedent('''\ : 1
''')) : 1
"ArgumentDefaultsHelpFormatter" : 1
formatter_class=argparse.ArgumentDefaultsHelpFormatter) : 1
default=42 : 2
help='FOO!') : 1
nargs='*' : 2
default=[1 : 1
help='BAR!') : 1
BAR : 2
"MetavarTypeHelpFormatter" : 1
does): : 1
formatter_class=argparse.MetavarTypeHelpFormatter) : 1
type=float) : 3
"-f/--foo" : 3
Parsers : 3
"+f" : 2
"prefix_chars=" : 3
prefix_chars='-+') : 1
parser.add_argument('+f') : 1
parser.add_argument('++bar') : 1
parser.parse_args('+f : 1
++bar : 1
Y'.split()) : 3
Namespace(bar='Y' : 1
f='X') : 1
"fromfile_prefix_chars=" : 2
open('args.txt' : 1
fp.write('-f\nbar') : 1
argparse.ArgumentParser(fromfile_prefix_chars='@') : 1
parser.add_argument('-f') : 1
parser.parse_args(['-f' : 1
'@args.txt']) : 1
Namespace(f='bar') : 1
"convert_arg_line_to_args()") : 1
"['-f' : 2
'@args.txt']" : 1
'-f' : 1
"set_defaults()" : 5
parser-wide : 1
"argument_default=" : 1
"argument_default=SUPPRESS": : 1
argparse.ArgumentParser(argument_default=argparse.SUPPRESS) : 1
parser.add_argument('--foo') : 7
nargs='?') : 4
parser.parse_args(['--foo' : 10
'BAR']) : 3
Namespace(bar='BAR' : 3
foo='1') : 1
parser.parse_args([]) : 10
"allow_abbrev" : 1
allow_abbrev=False) : 1
parser.add_argument('--foobar' : 1
parser.add_argument('--foonley' : 1
action='store_false') : 5
parser.parse_args(['--foon']) : 1
[--foobar] : 1
[--foonley] : 1
PROG: : 11
--foon : 1
parser.add_argument('-f' : 5
'--foo' : 5
help='old : 2
help='new : 2
--foo: : 2
string(s): : 1
"'resolve'" : 1
"conflict_handler=" : 1
conflict_handler='resolve') : 1
[-f : 2
"add_help=" : 1
add_help=False) : 3
"prefix_chars" : 1
prefix_chars='+/') : 1
[+h] : 1
+h : 1
++help : 1
argparse.ArgumentParser(exit_on_error=False) : 1
parser.add_argument('--integers' : 1
_StoreAction(option_strings=['--integers'] : 1
dest='integers' : 1
nargs=None : 3
const=None : 2
default=None : 7
type=<class : 1
choices=None : 2
help=None : 2
metavar=None) : 2
parser.parse_args('--integers : 1
a'.split()) : 1
argparse.ArgumentError: : 1
print('Catching : 1
argumentError') : 1
argumentError : 1
ArgumentParser.add_argument(name : 1
flags...[ : 1
action][ : 2
nargs][ : 1
const][ : 1
default][ : 2
type][ : 1
choices][ : 1
required][ : 2
help][ : 2
metavar][ : 1
dest]) : 1
"-f : 2
--foo" : 1
(optionals : 1
'--foo') : 3
parser.add_argument('bar') : 5
positional: : 1
parser.parse_args(['BAR']) : 1
foo=None) : 3
parser.parse_args(['BAR' : 1
'FOO']) : 3
foo='FOO') : 1
parser.parse_args('--foo : 5
1'.split()) : 1
Namespace(foo='1') : 2
const=42) : 1
parser.parse_args(['--foo']) : 2
Namespace(foo=42) : 3
"'store_false'" : 1
parser.add_argument('--bar' : 2
parser.add_argument('--baz' : 1
--bar'.split()) : 1
Namespace(foo=True : 1
bar=False : 1
baz=True) : 1
action='append') : 1
2'.split()) : 6
Namespace(foo=['1' : 1
'2']) : 2
parser.add_argument('--str' : 1
dest='types' : 2
action='append_const' : 2
const=str) : 1
parser.add_argument('--int' : 1
const=int) : 1
parser.parse_args('--str : 1
--int'.split()) : 1
Namespace(types=[<class : 1
'int'>]) : 1
parser.add_argument('--verbose' : 2
'-v' : 1
action='count' : 1
parser.parse_args(['-vvv']) : 1
Namespace(verbose=3) : 1
"version=" : 1
invoked: : 1
parser.add_argument('--version' : 1
action='version' : 2
version='%(prog)s : 1
2.0') : 1
parser.parse_args(['--version']) : 1
"'extend'" : 1
parser.add_argument("--foo" : 1
action="extend" : 1
nargs="+" : 1
type=str) : 1
parser.parse_args(["--foo" : 1
"f1" : 1
"f2" : 1
"f3" : 1
"f4"]) : 1
Namespace(foo=['f1' : 1
'f2' : 1
'f3' : 1
'f4']) : 1
"BooleanOptionalAction" : 1
"--no-foo": : 1
action=argparse.BooleanOptionalAction) : 1
parser.parse_args(['--no-foo']) : 1
Namespace(foo=False) : 1
"Action" : 2
"format_usage" : 2
action: : 2
FooAction(argparse.Action): : 1
option_strings : 1
ValueError("nargs : 1
allowed") : 1
super().__init__(option_strings : 1
option_string=None): : 1
(namespace : 1
option_string)) : 1
setattr(namespace : 1
self.dest : 1
action=FooAction) : 2
parser.parse_args('1 : 1
Namespace(bar=None : 1
Namespace(bar='1' : 2
foo='2') : 1
nargs=2) : 2
nargs=1) : 1
parser.parse_args('c : 1
b'.split()) : 1
Namespace(bar=['c'] : 1
foo=['a' : 1
"nargs=1" : 1
const='c' : 1
default='d') : 2
parser.parse_args(['XX' : 2
'YY']) : 1
Namespace(bar='XX' : 2
foo='YY') : 1
'--foo']) : 1
foo='c') : 1
Namespace(bar='d' : 1
foo='d') : 1
"nargs='?'" : 2
parser.add_argument('infile' : 2
type=argparse.FileType('r') : 1
default=sys.stdin) : 1
parser.add_argument('outfile' : 1
type=argparse.FileType('w') : 1
default=sys.stdout) : 1
parser.parse_args(['input.txt' : 1
'output.txt']) : 1
Namespace(infile=<_io.TextIOWrapper : 3
name='input.txt' : 1
outfile=<_io.TextIOWrapper : 2
name='output.txt' : 1
encoding='UTF-8'>) : 3
name='<stdin>' : 2
name='<stdout>' : 1
"nargs='*'" : 2
nargs='*') : 3
parser.add_argument('baz' : 1
parser.parse_args('a : 1
--bar : 4
Namespace(bar=['1' : 1
'2'] : 1
baz=['a' : 1
foo=['x' : 1
parser.add_argument('foo' : 5
parser.parse_args(['a' : 3
Namespace(foo=['a' : 1
[foo : 1
"action='store_const'" : 2
"action='append_const'" : 2
--foo") : 1
"const=None" : 1
default=42) : 5
Namespace(foo='2') : 1
parser.parse_args([] : 1
namespace=argparse.Namespace(foo=101)) : 1
Namespace(foo=101) : 1
parser.add_argument('--length' : 1
default='10' : 1
parser.add_argument('--width' : 1
default=10.5 : 1
Namespace(length=10 : 1
width=10.5) : 1
parser.parse_args(['a']) : 1
Namespace(foo='a') : 1
"default=argparse.SUPPRESS" : 1
default=argparse.SUPPRESS) : 1
'1']) : 1
"ArgumentTypeError" : 1
parser.add_argument('count' : 1
parser.add_argument('distance' : 1
parser.add_argument('street' : 1
type=ascii) : 1
parser.add_argument('code_point' : 1
type=ord) : 1
parser.add_argument('source_file' : 1
type=open) : 1
parser.add_argument('dest_file' : 1
type=argparse.FileType('w' : 2
encoding='latin-1')) : 1
parser.add_argument('datapath' : 1
type=pathlib.Path) : 1
hyphenated(string): : 1
'-'.join([word[:4] : 1
string.casefold().split()]) : 1
parser.add_argument('short_title' : 1
type=hyphenated) : 1
parser.parse_args(['"The : 1
Tale : 1
Cities"']) : 1
Namespace(short_title='"the-tale-of-two-citi') : 1
"FileNotFound" : 1
*FileType* : 1
argparse.ArgumentParser(prog='game.py') : 1
parser.add_argument('move' : 1
choices=['rock' : 1
'paper' : 2
'scissors']) : 1
parser.parse_args(['rock']) : 1
Namespace(move='rock') : 1
parser.parse_args(['fire']) : 1
game.py : 1
{rock,paper,scissors} : 1
game.py: : 1
move: : 1
'fire' : 1
'rock' : 1
'scissors') : 1
argparse.ArgumentParser(prog='doors.py') : 1
parser.add_argument('door' : 1
choices=range(1 : 1
print(parser.parse_args(['3'])) : 1
Namespace(door=3) : 1
parser.parse_args(['4']) : 1
doors.py : 1
{1,2,3} : 1
doors.py: : 1
door: : 1
choices) : 1
bar" : 1
"required=" : 1
"add_argument()": : 2
Namespace(foo='BAR') : 1
argparse.ArgumentParser(prog='frobble') : 3
frobbling') : 1
help='one : 1
frobbled') : 1
parser.parse_args(['-h']) : 2
frobble : 4
[--foo] : 2
frobbled : 1
frobbling : 1
"%(default)s" : 2
"%(type)s" : 1
etc.: : 1
help='the : 1
%(default)s)') : 1
[bar] : 4
"argparse.SUPPRESS": : 1
help=argparse.SUPPRESS) : 1
"dest='bar'" : 1
parser.parse_args('X : 2
Namespace(bar='X' : 2
foo='Y') : 2
"metavar": : 1
metavar='YYY') : 1
metavar='XXX') : 1
YYY] : 1
XXX : 2
YYY : 1
*displayed* : 1
parser.add_argument('-x' : 3
nargs=2 : 1
metavar=('bar' : 1
'baz')) : 1
[-x : 1
X] : 1
baz] : 1
parser.parse_args(['XXX']) : 1
Namespace(bar='XXX') : 2
"--" : 7
'--foo-bar' : 1
'-y') : 1
parser.parse_args('-f : 1
Namespace(foo_bar='1' : 2
x='2') : 2
-y : 1
dest='bar') : 1
XXX'.split()) : 1
argparse.Action(option_strings : 1
type=None : 2
required=False : 1
"option_strings" : 1
"Action.__init__" : 1
"option_string" : 2
ArgumentParser.parse_args(args=None : 1
namespace=None) : 4
parser.add_argument('-x') : 2
parser.parse_args(['-x' : 3
'X']) : 2
Namespace(foo=None : 4
x='X') : 2
Namespace(foo='FOO' : 2
x=None) : 2
(options : 10
parser.parse_args(['--foo=FOO']) : 1
long) : 1
concatenated: : 1
parser.parse_args(['-xX']) : 1
parser.add_argument('-y' : 1
parser.add_argument('-z') : 1
parser.parse_args(['-xyzZ']) : 1
Namespace(x=True : 1
y=True : 1
z='Z') : 1
'spam']) : 3
parser.parse_args(['--bar']) : 2
parser.parse_args(['spam' : 1
'badger']) : 1
badger : 1
'-1']) : 2
x='-1') : 2
'-5']) : 1
Namespace(foo='-5' : 1
parser.add_argument('-1' : 1
dest='one') : 1
parser.parse_args(['-1' : 2
one='X') : 1
parser.parse_args(['-2']) : 1
ONE] : 2
[foo] : 2
-1s : 1
pseudo-argument : 2
parser.parse_args(['--' : 1
'-f']) : 1
Namespace(foo='-f' : 1
one=None) : 1
option): : 3
parser.add_argument('-bacon') : 1
parser.add_argument('-badger') : 1
parser.parse_args('-bac : 1
MMM'.split()) : 1
Namespace(bacon='MMM' : 1
badger=None) : 1
parser.parse_args('-bad : 1
WOOD'.split()) : 1
Namespace(bacon=None : 1
badger='WOOD') : 1
parser.parse_args('-ba : 1
BA'.split()) : 1
[-bacon : 1
BACON] : 1
[-badger : 1
BADGER] : 1
-ba : 1
-badger : 1
-bacon : 2
parser.add_argument( : 2
'integers' : 1
metavar='int' : 1
choices=range(10) : 1
0..9') : 1
'--sum' : 1
parser.parse_args(['1' : 2
'4']) : 1
max> : 1
integers=[1 : 2
'--sum']) : 1
argparse.Namespace : 1
"vars()": : 1
'BAR'} : 1
"namespace=" : 1
parser.parse_args(args=['--foo' : 1
'BAR'] : 1
namespace=c) : 1
c.foo : 2
'BAR' : 2
ArgumentParser.add_subparsers([title][ : 1
description][ : 1
prog][ : 1
parser_class][ : 1
option_strings][ : 1
dest][ : 1
metavar]) : 1
"svn" : 3
update" : 1
"add_subparsers()" : 6
"add_parser()" : 2
"subcommands" : 1
parser_class : 1
ArgumentParser) : 1
stored; : 1
3.7) : 2
{cmd1 : 1
cmd2 : 1
..} : 1
parser.add_subparsers(help='sub-command : 1
parser_a : 1
subparsers.add_parser('a' : 1
help='a : 1
parser_a.add_argument('bar' : 1
parser_b : 1
subparsers.add_parser('b' : 1
help='b : 1
parser_b.add_argument('--baz' : 1
choices='XYZ' : 1
help='baz : 1
'12']) : 1
Namespace(bar=12 : 1
foo=False) : 2
'--baz' : 1
'Z']) : 1
Namespace(baz='Z' : 1
foo=True) : 3
subparsers) : 1
"help=" : 1
parser.parse_args(['--help']) : 1
{a,b} : 2
'--help']) : 2
parser.parse_args(['b' : 1
[--baz : 1
{X,Y,Z}] : 1
--baz : 1
{X,Y,Z} : 1
"title" : 4
subparser's : 1
parser.add_subparsers(title='subcommands' : 1
description='valid : 1
subcommands' : 1
help='additional : 1
subparsers.add_parser('foo') : 2
subparsers.add_parser('bar') : 2
{foo,bar} : 2
"add_parser" : 1
"aliases" : 1
"co" : 1
"checkout": : 1
subparsers.add_parser('checkout' : 1
aliases=['co']) : 1
checkout.add_argument('foo') : 1
parser.parse_args(['co' : 1
'bar']) : 1
Namespace(foo='bar') : 1
foo(args): : 1
print(args.x : 1
args.y) : 1
bar(args): : 1
print('((%s))' : 1
args.z) : 1
parser.add_subparsers(required=True) : 1
parser_foo : 1
parser_foo.add_argument('-x' : 1
default=1) : 1
parser_foo.add_argument('y' : 1
parser_foo.set_defaults(func=foo) : 1
parser_bar : 1
parser_bar.add_argument('z') : 1
parser_bar.set_defaults(func=bar) : 1
parser.parse_args('foo : 1
args.func(args) : 2
parser.parse_args('bar : 1
XYZYX'.split()) : 1
((XYZYX)) : 1
Associating : 1
parser.add_subparsers(dest='subparser_name') : 1
subparser1 : 1
subparsers.add_parser('1') : 1
subparser1.add_argument('-x') : 1
subparser2 : 1
subparsers.add_parser('2') : 1
subparser2.add_argument('y') : 1
parser.parse_args(['2' : 1
'frobble']) : 1
Namespace(subparser_name='2' : 1
y='frobble') : 1
argparse.FileType(mode='r' : 1
parser.add_argument('--raw' : 1
type=argparse.FileType('wb' : 1
parser.add_argument('out' : 1
encoding='UTF-8')) : 1
parser.parse_args(['--raw' : 1
'raw.dat' : 1
'file.txt']) : 1
Namespace(out=<_io.TextIOWrapper : 1
name='file.txt' : 1
mode='w' : 3
raw=<_io.FileIO : 1
name='raw.dat' : 1
mode='wb'>) : 1
type=argparse.FileType('r')) : 1
parser.parse_args(['-']) : 1
*encodings* : 1
ArgumentParser.add_argument_group(title=None : 1
parser.add_argument_group('group') : 1
group.add_argument('--foo' : 3
group.add_argument('bar' : 1
parser.add_argument_group('group1' : 1
'group1 : 1
description') : 2
group1.add_argument('foo' : 1
parser.add_argument_group('group2' : 1
'group2 : 1
group2.add_argument('--bar' : 1
[--bar : 1
BAR] : 1
group1: : 1
group2: : 1
ArgumentParser.add_mutually_exclusive_group(required=False) : 1
group.add_argument('--bar' : 2
Namespace(bar=True : 1
Namespace(bar=False : 1
'--bar']) : 1
--bar] : 1
--bar: : 1
parser.add_mutually_exclusive_group(required=True) : 1
(--foo : 1
--bar) : 1
ArgumentParser.set_defaults(**kwargs) : 1
parser.set_defaults(bar=42 : 1
baz='badger') : 1
parser.parse_args(['736']) : 1
Namespace(bar=42 : 1
baz='badger' : 1
foo=736) : 1
parser-level : 2
argument-level : 1
default='bar') : 1
parser.set_defaults(foo='spam') : 1
Namespace(foo='spam') : 1
Parser-level : 1
ArgumentParser.get_default(dest) : 1
"set_defaults()": : 2
default='badger') : 1
parser.get_default('foo') : 1
'badger' : 1
ArgumentParser.print_usage(file=None) : 1
ArgumentParser.print_help(file=None) : 1
ArgumentParser.format_usage() : 1
ArgumentParser.format_help() : 1
ArgumentParser.parse_known_args(args=None : 1
"parse_known_args()" : 3
parser.parse_known_args(['--foo' : 1
'--badger' : 1
(Namespace(bar='BAR' : 1
['--badger' : 1
ArgumentParser.convert_arg_line_to_args(arg_line) : 1
*fromfile_prefix_chars* : 1
"convert_arg_line_to_args()" : 1
*arg_line* : 1
space- : 1
MyArgumentParser(argparse.ArgumentParser): : 1
convert_arg_line_to_args(self : 1
arg_line): : 1
arg_line.split() : 1
ArgumentParser.exit(status=0 : 1
ErrorCatchingArgumentParser(argparse.ArgumentParser): : 1
exit(self : 1
status=0 : 1
message=None): : 1
Exception(f'Exiting : 1
{message}') : 1
exit(status) : 1
ArgumentParser.error(message) : 1
ArgumentParser.parse_intermixed_args(args=None : 1
ArgumentParser.parse_known_intermixed_args(args=None : 1
intermix : 1
"parse_intermixed_args()" : 3
"parse_known_intermixed_args()" : 2
positionals : 2
"parse_intermixed_args()": : 1
"['2' : 1
'3']" : 1
parser.add_argument('cmd') : 1
parser.add_argument('rest' : 1
parser.parse_known_args('doit : 1
3'.split()) : 2
(Namespace(cmd='doit' : 1
rest=[1]) : 1
['2' : 1
'3']) : 1
parser.parse_intermixed_args('doit : 1
Namespace(cmd='doit' : 1
rest=[1 : 1
"nargs=" : 1
copy-pasted : 1
seemed : 1
one-or-more : 1
"argparse": : 1
"optparse.OptionParser.add_option()" : 1
"(options : 1
parser.parse_args()" : 2
"args : 1
"optparse.OptionParser.disable_interspersed_args()" : 1
"callback_*" : 1
"optparse.Values" : 2
"optparse.OptionError" : 2
"optparse.OptionValueError" : 1
"%default" : 3
"%prog" : 8
"parser.add_argument('--version' : 1
version='<the : 1
version>')" : 1
Lib/profile.py : 1
Lib/pstats.py : 1
*deterministic : 1
profiling* : 3
*profile* : 1
users; : 1
"lsprof" : 1
Rosen : 1
Ted : 1
Czotter : 1
imitated : 1
manual." : 1
cProfile.run('re.compile("foo|bar")') : 1
system.) : 3
214 : 2
(207 : 1
0.002 : 3
ncalls : 2
tottime : 2
percall : 4
filename:lineno(function) : 2
0.000 : 24
{built-in : 1
builtins.exec} : 1
0.001 : 7
<string>:1(<module>) : 1
__init__.py:250(compile) : 1
__init__.py:289(_compile) : 1
_compiler.py:759(compile) : 1
_parser.py:937(parse) : 1
_compiler.py:598(_code) : 1
_parser.py:435(_parse_sub) : 1
207 : 1
*primitive* : 1
induced : 1
"Ordered : 1
headings : 3
sub-functions) : 1
"tottime" : 1
"ncalls" : 1
*even* : 2
"cumtime" : 1
"3/1") : 1
cProfile.run('re.compile("foo|bar")' : 1
'restats') : 1
"pstats.Stats" : 1
output_file] : 1
[-s : 2
sort_order] : 1
(-m : 1
myscript.py) : 1
"sort_stats()" : 3
SortKey : 5
pstats.Stats('restats') : 1
p.strip_dirs().sort_stats(-1).print_stats() : 1
"strip_dirs()" : 2
module/line/name : 1
"print_stats()" : 2
p.sort_stats(SortKey.NAME) : 1
p.print_stats() : 1
p.sort_stats(SortKey.CUMULATIVE).print_stats(10) : 1
p.sort_stats(SortKey.TIME).print_stats(10) : 1
p.sort_stats(SortKey.FILENAME).print_stats('__init__') : 1
p.sort_stats(SortKey.TIME : 1
SortKey.CUMULATIVE).print_stats(.5 : 1
'init') : 2
culled : 1
(re: : 3
".5") : 1
sub-sub-list : 1
("p" : 1
criteria) : 1
p.print_callers(.5 : 1
p.print_callees() : 1
p.add('restats') : 1
Invoked : 1
"cmd") : 1
profile.run(command : 1
filename=None : 7
sort=- : 2
executes: : 2
exec(command : 2
__main__.__dict__ : 1
__main__.__dict__) : 1
gathers : 2
profile.runctx(command : 1
profile.Profile(timer=None : 1
timeunit=0.0 : 1
subcalls=True : 1
builtins=True) : 1
"cProfile.run()" : 2
*timer* : 3
*timeunit* : 1
".001" : 1
"Profile" : 5
pr : 6
pr.enable() : 1
pr.disable() : 1
sortby : 1
SortKey.CUMULATIVE : 2
ps : 2
pstats.Stats(pr : 1
stream=s).sort_stats(sortby) : 1
ps.print_stats() : 1
print(s.getvalue()) : 1
Types): : 1
pr: : 1
pr.print_stats() : 1
create_stats() : 1
print_stats(sort=- : 1
dump_stats(filename) : 2
run(cmd) : 2
command/function : 2
pstats.Stats(*filenames : 1
stream=sys.stdout) : 1
"statistics : 1
filenames) : 1
*no* : 3
coalesced : 1
"profile.Profile" : 4
strip_dirs() : 1
printout : 1
(close : 1
add(*filenames) : 1
"profile.run()" : 2
sort_stats(*keys) : 1
(example: : 1
"'time'" : 3
"SortKey.TIME" : 1
"SortKey.NAME") : 1
"sort_stats(SortKey.NAME : 2
SortKey.FILE)" : 1
(identical : 1
SortKey: : 1
+--------------------+-----------------------+------------------------+ : 15
|====================|=======================|========================| : 1
"'calls'" : 2
SortKey.CALLS : 1
"'cumulative'" : 2
"'cumtime'" : 1
N/A : 7
"'file'" : 1
SortKey.FILENAME : 2
"'ncalls'" : 1
"'pcalls'" : 1
SortKey.PCALLS : 1
SortKey.LINE : 1
SortKey.NAME : 1
"'nfl'" : 1
SortKey.NFL : 1
name/file/line : 1
"'stdname'" : 2
SortKey.STDNAME : 1
SortKey.TIME : 1
"'tottime'" : 1
(alphabetical) : 1
"SortKey.NFL" : 2
"SortKey.STDNAME" : 1
"sort_stats(SortKey.NFL)" : 1
SortKey.LINE)" : 1
(numeric) : 2
reverse_order() : 1
print_stats(*restrictions) : 1
(subject : 2
"strip_dirs()") : 1
print_stats(.1 : 1
'foo:') : 1
".*foo:" : 2
print_stats('foo:' : 1
.1) : 1
print_callers(*restrictions) : 1
non-parenthesized : 1
print_callees(*restrictions) : 1
reversal : 1
by) : 1
"print_callers()" : 1
get_stats_profile() : 1
FunctionProfile : 3
etc.. : 1
get_stats_profile : 1
*Deterministic : 1
return* : 1
(during : 1
executing) : 1
*statistical : 1
deduces : 1
instrumented) : 1
(surprising : 1
counts) : 3
inline-expansion : 1
(high : 2
"hot : 1
loops" : 1
Cumulative : 1
"clock" : 1
ticking : 1
(typically) : 1
induces : 1
"takes : 1
while" : 1
profiler's : 1
*gets* : 1
lag : 1
clock's : 3
away) : 2
tick) : 1
lower- : 3
calibrating : 1
probabilistically : 1
average) : 1
calibrated : 3
sense) : 1
gods : 1
alarmed : 1
calibration : 2
socking : 1
Limitations) : 2
profile.Profile() : 2
print(pr.calibrate(10000)) : 1
1.8Ghz : 1
i5 : 1
magical : 1
4.04e-6 : 1
100000 : 3
1000000 : 3
profile.Profile.bias : 1
your_computed_bias : 2
pr.bias : 1
profile.Profile(bias=your_computed_bias) : 1
"less : 1
often" : 1
profile.Profile(your_time_func) : 1
"your_time_func" : 3
"your_time_func"'s : 1
"os.times()" : 1
calibrate : 1
Calibration) : 1
("os.times()" : 1
*pretty* : 1
cleanest : 1
hardwire : 1
"your_integer_time_func" : 1
cProfile.Profile(your_integer_time_func : 1
0.001) : 1
Lib/random.py : 1
permutation : 4
lognormal : 1
angles : 4
Mises : 1
"random()" : 6
half-open : 1
"0.0 : 2
53-bit : 1
2**19937-1 : 1
devising: : 1
"seed()" : 2
"setstate()" : 4
"SystemRandom" : 1
"Mersenne : 1
Twister: : 1
623-dimensionally : 1
equidistributed : 1
generator" : 1
ACM : 1
Modeling : 1
Simulation : 3
Vol : 1
pp.3--30 : 1
Complementary-Multiply-with-Carry : 1
comparatively : 1
random.seed(a=None : 1
version=2) : 1
availability) : 1
reproducing : 3
*NoneType* : 1
random.getstate() : 1
random.setstate(state) : 1
random.randbytes(n) : 1
"secrets.token_bytes()" : 1
random.randrange(stop) : 1
random.randrange(start : 1
stop[ : 3
step]) : 3
"range(start : 2
"choice(range(start : 1
step))" : 1
"int(random()*n)" : 1
uneven : 2
"randrange(10.0)" : 1
"randrange(10)" : 1
"randrange(10.5)" : 1
"randrange('10')" : 1
random.randint(a : 1
b+1)" : 1
random.getrandbits(k) : 1
MersenneTwister : 1
random.choice(seq) : 1
random.choices(population : 1
weights=None : 1
cum_weights=None : 1
k=1) : 1
*cum_weights* : 4
"itertools.accumulate()") : 1
"[10 : 2
5]" : 1
50]" : 1
interoperates : 1
decimals) : 1
Weights : 1
biases : 1
random.shuffle(x) : 1
Shuffle : 2
shuffle : 2
shuffled : 1
"sample(x : 1
k=len(x))" : 1
"len(x)" : 1
2080 : 1
random.sample(population : 1
counts=None) : 1
sub-slices : 1
raffle : 1
winners : 2
sample) : 1
partitioned : 1
grand : 1
prize : 1
subslices) : 1
"sample(['red' : 2
counts=[4 : 1
k=5)" : 2
population: : 1
"sample(range(10000000) : 1
k=60)" : 1
equation : 2
practice; : 1
random.uniform(a : 1
end-point : 5
(b-a) : 1
random()" : 1
random.triangular(low : 1
"low : 1
high" : 1
random.betavariate(alpha : 1
Beta : 1
"alpha : 2
"beta : 2
random.expovariate(lambd) : 1
Exponential : 1
*lambd* : 3
random.gammavariate(alpha : 1
(*Not* : 1
function!) : 1
(alpha : 1
math.exp(-x : 1
math.gamma(alpha) : 1
random.gauss(mu=0.0 : 1
"normalvariate()" : 2
random.lognormvariate(mu : 1
sigma) : 1
random.normalvariate(mu=0.0 : 1
random.vonmisesvariate(mu : 1
kappa) : 1
2**pi* : 2
*kappa* : 2
concentration : 2
random.paretovariate(alpha) : 1
Pareto : 1
*alpha* : 2
random.weibullvariate(alpha : 1
Weibull : 1
*beta* : 1
random.Random([seed]) : 1
random.SystemRandom([seed]) : 1
seeder : 2
0.37444887175646646 : 1
uniform(2.5 : 1
10.0) : 1
3.1800146073117523 : 1
expovariate(1 : 1
Interval : 1
arrivals : 1
5.148957571865031 : 1
randrange(10) : 1
randrange(0 : 1
choice(['win' : 1
'lose' : 1
'draw']) : 1
'draw' : 1
deck : 3
'ace : 1
four'.split() : 1
shuffle(deck) : 1
['four' : 2
'ace' : 1
sample([10 : 1
50] : 1
k=4) : 1
[40 : 1
Simulations: : 1
Six : 1
roulette : 1
spins : 2
(weighted : 1
choices(['red' : 1
'green'] : 1
[18 : 1
k=6) : 1
['red' : 2
'black'] : 1
proportion : 1
ten-value: : 1
jack : 2
sample(['tens' : 1
'low : 1
cards'] : 1
counts=[16 : 1
36] : 1
k=20) : 1
dealt.count('tens') : 1
0.15 : 1
Estimate : 1
coin : 1
settles : 1
choices('HT' : 1
cum_weights=(0.60 : 1
1.00) : 1
k=7).count('H') : 1
sum(trial() : 2
10_000 : 3
0.4169 : 1
Probability : 2
2_500 : 1
sorted(choices(range(10_000) : 1
k=5))[2] : 1
7_500 : 1
0.7958 : 1
resampling : 2
confidence : 2
https://www.thoughtco.com/example-of-bootstrapping-3126155 : 1
fmean : 2
[41 : 1
95] : 1
sorted(mean(choices(data : 1
k=len(data))) : 1
range(100)) : 1
{mean(data):.1f} : 1
f'interval : 1
{means[5]:.1f} : 1
{means[94]:.1f}') : 1
p-value : 2
drug : 4
placebo: : 1
Easy" : 1
Shasha : 1
Manda : 1
[54 : 2
65] : 1
placebo : 2
58 : 2
44 : 3
46] : 1
observed_diff : 1
mean(drug) : 1
mean(placebo) : 1
shuffle(combined) : 1
new_diff : 1
mean(combined[:len(drug)]) : 1
mean(combined[len(drug):]) : 1
(new_diff : 1
observed_diff) : 1
print(f'{n} : 1
reshufflings : 1
difference') : 1
print(f'at : 1
{observed_diff:.1f}.') : 1
one-sided : 1
{count : 1
n:.4f} : 1
null') : 1
print(f'hypothesis : 1
placebo.') : 1
deliveries : 1
multiserver : 1
heapreplace : 1
expovariate : 1
gauss : 1
average_arrival_interval : 1
average_service_time : 1
stdev_service_time : 1
num_servers : 2
arrival_time : 3
[0.0] : 1
heapify(servers) : 1
range(1_000_000): : 1
expovariate(1.0 : 1
average_arrival_interval) : 1
next_server_available : 2
servers[0] : 1
max(0.0 : 2
arrival_time) : 1
waits.append(wait) : 1
service_duration : 2
gauss(average_service_time : 1
stdev_service_time)) : 1
service_completed : 1
heapreplace(servers : 1
service_completed) : 1
print(f'Mean : 1
{mean(waits):.1f} : 1
{max(waits):.1f}') : 1
print('Quartiles:' : 1
quantiles(waits)]) : 1
Hackers : 1
Vanderplas : 1
shuffling : 1
cross-validation : 1
Economics : 1
marketplace : 1
Norvig : 2
(gauss : 1
betavariate : 1
randrange) : 1
simulations : 1
random_product(*args : 1
repeat=1): : 2
"Random : 3
itertools.product(*args : 1
[tuple(pool) : 2
args] : 3
tuple(map(random.choice : 1
pools)) : 1
random_permutation(iterable : 1
r=None): : 3
itertools.permutations(iterable : 2
tuple(iterable) : 11
len(pool) : 10
tuple(random.sample(pool : 1
random_combination(iterable : 1
r): : 8
itertools.combinations(iterable : 2
sorted(random.sample(range(n) : 1
tuple(pool[i] : 11
indices) : 10
random_combination_with_replacement(iterable : 1
"Choose : 1
iterable." : 2
set(itertools.combinations_with_replacement(iterable : 1
sorted(random.choices(range(n) : 1
k=r)) : 1
2⁻⁵³ : 2
*0.0 : 2
≤ : 5
1.0* : 2
"0.05954861408025609" : 1
*2⁵² : 1
2⁵³* : 1
*-53* : 1
FullRandom(Random): : 1
random(self): : 1
0x10_0000_0000_0000 : 1
self.getrandbits(52) : 1
-53 : 1
self.getrandbits(32) : 1
x.bit_length() : 1
ldexp(mantissa : 1
exponent) : 1
fr : 1
FullRandom() : 1
fr.random() : 1
0.05954861408025609 : 1
fr.expovariate(0.25) : 1
8.87925541791544 : 1
2⁻¹⁰⁷⁴ : 2
"math.ulp(0.0)".) : 1
Pseudo-random : 1
Floating-Point : 1
Downey : 1
Lib/email/headerregistry.py : 1
"HeaderRegistry" : 5
"BaseHeader" : 8
"UnstructuredHeader" : 2
email.headerregistry.BaseHeader(name : 1
*name*; : 1
"HeaderDefect" : 1
max_count : 1
fold(* : 1
"linesep" : 4
"cte_type" : 9
cooperates : 1
"parse" : 1
"kwds" : 3
pre-initialized : 1
"decoded" : 5
content-transfer- : 1
un-encoded : 1
"BaseHeader"'s : 1
init(self : 1
self._myattr : 1
kw.pop('myattr') : 1
super().init(*args : 1
"kw" : 1
"args") : 1
email.headerregistry.UnstructuredHeader : 1
"unstructured" : 1
unstructured : 4
Defects : 1
email.headerregistry.DateHeader : 1
"DateHeader" : 2
wild" : 1
timezone) : 1
"+0000") : 1
email.utils.format_datetime(self.datetime) : 1
msg['Date'] : 2
datetime(2011 : 1
"utils" : 1
utils.localtime() : 1
email.headerregistry.AddressHeader : 1
"AddressHeader" : 2
"Group" : 6
"Groups" : 1
"display_name" : 4
"Address" : 9
"flattened" : 1
email.headerregistry.SingleAddressHeader : 1
"policy") : 1
"Unique" : 2
"UniqueUnstructuredHeader") : 1
"max_count" : 2
email.headerregistry.MIMEVersionHeader : 1
proofing : 1
email.headerregistry.ParameterizedMIMEHeader : 1
'Content-' : 1
email.headerregistry.ContentTypeHeader : 1
"ParameterizedMIMEHeader" : 2
content_type : 1
"maintype/subtype" : 2
maintype : 4
email.headerregistry.ContentDispositionHeader : 1
content_disposition : 1
"inline" : 5
"attachment" : 5
email.headerregistry.ContentTransferEncoding : 1
cte : 1
"quoted- : 2
printable" : 2
email.headerregistry.HeaderRegistry(base_class=BaseHeader : 1
default_class=UnstructuredHeader : 1
use_default_map=True) : 1
*base_class* : 4
*default_class* : 2
*use_default_map* : 1
UniqueUnstructuredHeader : 1
UniqueDateHeader : 2
resent-date: : 1
DateHeader : 1
orig-date: : 1
sender: : 1
UniqueSingleAddressHeader : 1
resent-sender: : 1
SingleAddressHeader : 1
UniqueAddressHeader : 5
resent-to: : 1
AddressHeader : 4
resent-cc: : 1
bcc: : 1
resent-bcc: : 1
resent-from: : 1
reply-to: : 1
mime-version: : 1
MIMEVersionHeader : 1
content-type: : 1
ContentTypeHeader : 1
content-disposition: : 1
ContentDispositionHeader : 1
content-transfer-encoding: : 1
ContentTransferEncodingHeader : 1
message-id: : 1
MessageIDHeader : 1
map_to_type(self : 1
__call__(name : 1
registry) : 1
composes : 2
email.headerregistry.Address(display_name='' : 1
username='' : 1
domain='' : 1
addr_spec=None) : 1
[display_name] : 1
<username@domain> : 1
username@domain : 1
*addr_spec* : 3
*username* : 2
display_name : 2
"username" : 4
addr_spec : 1
"username@domain" : 1
5321**) : 1
email.headerregistry.Group(display_name=None : 1
addresses=None) : 1
display_name: : 1
[address-list]; : 1
*display_name* : 1
Lib/tkinter/dnd.py : 1
DND : 2
drag-and-drop : 6
ButtonPress : 1
Events) : 1
"dnd_start()" : 1
'source' : 1
'event' : 2
Top-down : 1
Target : 1
*dnd_accept* : 2
*<old_target>.dnd_leave(source : 1
event)* : 4
*<new_target>.dnd_enter(source : 1
*<target>.dnd_commit(source : 1
*<source>.dnd_end(target : 1
drag- : 1
and-drop : 1
tkinter.dnd.DndHandler(source : 1
*DndHandler* : 1
Motion : 1
ButtonRelease : 1
cancel(event=None) : 1
finish(event : 1
commit=0) : 1
on_motion(event) : 1
on_release(event) : 1
tkinter.dnd.dnd_start(source : 1
Lib/asyncio/exceptions.py : 1
*Future* : 2
asyncio.SendfileNotAvailableError : 1
"sendfile" : 1
asyncio.LimitOverrunError : 1
Reached : 1
Lib/xml/dom/__init__.py : 1
"DOM," : 1
(W3C) : 1
random-access : 1
"levels" : 1
"DOMImplementation" : 7
reader/parser/Document : 1
builder : 6
implementation-independent : 1
Load/Store : 1
ECMAScript : 2
IDL) : 1
xml.dom.registerDOMImplementation(name : 1
factory) : 1
customization) : 2
xml.dom.getDOMImplementation(name=None : 1
features=()) : 1
"PYTHON_DOM" : 1
"(feature : 1
version)" : 3
"hasFeature()" : 1
xml.dom.EMPTY_NAMESPACE : 1
"namespaceURI" : 2
*namespaceURI* : 6
namespaces- : 1
xml.dom.XML_NAMESPACE : 1
xml.dom.XMLNS_NAMESPACE : 1
1.1.8) : 1
xml.dom.XHTML_NAMESPACE : 1
1.0: : 1
3.1.1) : 1
"nodeType" : 2
definitive : 1
+----------------------------------+-------------------------------------+-----------------------------------+ : 11
|==================================|=====================================|===================================| : 1
"DocumentType" : 7
Nodes : 2
"ProcessingInstruction" : 1
DOMImplementation.hasFeature(feature : 1
DOMImplementation.createDocument(namespaceUri : 1
qualifiedName : 1
doctype) : 1
DOM) : 1
*namespaceUri* : 1
*qualifiedName* : 2
*doctype* : 1
"createDocumentType()" : 1
DOMImplementation.createDocumentType(qualifiedName : 1
systemId) : 3
Node.nodeType : 1
"ELEMENT_NODE" : 1
"ATTRIBUTE_NODE" : 1
"TEXT_NODE" : 1
"CDATA_SECTION_NODE" : 1
"ENTITY_NODE" : 1
"PROCESSING_INSTRUCTION_NODE" : 1
"COMMENT_NODE" : 1
"DOCUMENT_NODE" : 1
"DOCUMENT_TYPE_NODE" : 1
"NOTATION_NODE" : 1
Node.parentNode : 1
Node.attributes : 1
"NamedNodeMap" : 4
Node.previousSibling : 1
start-tag : 1
Node.nextSibling : 1
"previousSibling" : 1
Node.childNodes : 1
Node.firstChild : 1
Node.lastChild : 1
Node.localName : 1
"tagName" : 4
Node.prefix : 1
Node.namespaceURI : 1
Node.nodeName : 1
Node.nodeValue : 1
"nodeName" : 1
Node.hasAttributes() : 1
Node.hasChildNodes() : 1
Node.isSameNode(other) : 1
"working : 1
draft" : 1
uncontroversial : 1
Node.appendChild(newChild) : 1
*newChild* : 3
Node.insertBefore(newChild : 1
refChild) : 1
*refChild* : 2
node; : 3
children's : 3
Node.removeChild(oldChild) : 1
*oldChild* : 4
Node.replaceChild(newChild : 1
oldChild) : 1
Node.normalize() : 1
Node.cloneNode(deep) : 1
Clone : 1
*deep* : 1
recommendation: : 1
"getElementsByTagName()" : 2
"getElementsByTagNameNS()" : 1
NodeList.item(i) : 1
*i*'th : 1
NodeList.length : 1
"__getitem__()"; : 1
"doctype" : 2
"DOCTYPE" : 2
DocumentType.publicId : 1
DocumentType.systemId : 1
DocumentType.internalSubset : 1
DocumentType.name : 1
DocumentType.entities : 1
(others : 2
recommendation) : 3
DocumentType.notations : 1
Document.documentElement : 1
Document.createElement(tagName) : 1
"insertBefore()" : 2
"appendChild()" : 2
Document.createElementNS(namespaceURI : 1
tagName) : 1
*tagName* : 2
Document.createTextNode(data) : 1
Document.createComment(data) : 1
Document.createProcessingInstruction(target : 1
Document.createAttribute(name) : 1
"setAttributeNode()" : 2
Document.createAttributeNS(namespaceURI : 1
qualifiedName) : 1
Document.getElementsByTagName(tagName) : 1
Document.getElementsByTagNameNS(namespaceURI : 1
localName) : 6
localname : 2
Element.tagName : 1
namespace-using : 2
Element.getElementsByTagName(tagName) : 1
Element.getElementsByTagNameNS(namespaceURI : 1
Element.hasAttribute(name) : 1
Element.hasAttributeNS(namespaceURI : 1
*localName* : 3
Element.getAttribute(name) : 1
Element.getAttributeNode(attrname) : 1
*attrname* : 1
Element.getAttributeNS(namespaceURI : 1
Element.getAttributeNodeNS(namespaceURI : 1
Element.removeAttribute(name) : 1
"NotFoundErr" : 3
Element.removeAttributeNode(oldAttr) : 1
*oldAttr* : 2
Element.removeAttributeNS(namespaceURI : 1
localName : 1
qname : 6
Element.setAttribute(name : 1
Element.setAttributeNode(newAttr) : 1
*newAttr* : 2
"InuseAttributeErr" : 3
Element.setAttributeNodeNS(newAttr) : 1
Element.setAttributeNS(namespaceURI : 1
*qname* : 4
Attr.name : 1
Attr.localName : 1
Attr.prefix : 1
Attr.value : 1
"nodeValue" : 1
NamedNodeMap.length : 1
NamedNodeMap.item(index) : 1
"getAttribute*()" : 1
Comment.data : 1
"<!-""-" : 1
"-""->" : 1
DOM's : 1
"CDATASection" : 3
Text.data : 1
ProcessingInstruction.target : 1
ProcessingInstruction.data : 1
xml.dom.DOMException : 1
xml.dom.DomstringSizeErr : 1
xml.dom.HierarchyRequestErr : 1
xml.dom.IndexSizeErr : 1
xml.dom.InuseAttributeErr : 1
xml.dom.InvalidAccessErr : 1
xml.dom.InvalidCharacterErr : 1
xml.dom.InvalidModificationErr : 1
xml.dom.InvalidStateErr : 1
xml.dom.NamespaceErr : 1
xml.dom.NotFoundErr : 1
"NamedNodeMap.removeNamedItem()" : 1
xml.dom.NotSupportedErr : 1
xml.dom.NoDataAllowedErr : 1
xml.dom.NoModificationAllowedErr : 1
xml.dom.SyntaxErr : 1
xml.dom.WrongDocumentErr : 1
+----------------------------------------+-----------------------------------+ : 16
|========================================|===================================| : 1
"DOMSTRING_SIZE_ERR" : 1
"DomstringSizeErr" : 1
"HIERARCHY_REQUEST_ERR" : 1
"HierarchyRequestErr" : 1
"INDEX_SIZE_ERR" : 1
"IndexSizeErr" : 1
"INUSE_ATTRIBUTE_ERR" : 1
"INVALID_ACCESS_ERR" : 1
"InvalidAccessErr" : 1
"INVALID_CHARACTER_ERR" : 1
"InvalidCharacterErr" : 1
"INVALID_MODIFICATION_ERR" : 1
"InvalidModificationErr" : 1
"INVALID_STATE_ERR" : 1
"InvalidStateErr" : 1
"NAMESPACE_ERR" : 1
"NamespaceErr" : 1
"NOT_FOUND_ERR" : 1
"NOT_SUPPORTED_ERR" : 1
"NotSupportedErr" : 1
"NO_DATA_ALLOWED_ERR" : 1
"NoDataAllowedErr" : 1
"NO_MODIFICATION_ALLOWED_ERR" : 1
"NoModificationAllowedErr" : 1
"SYNTAX_ERR" : 1
"SyntaxErr" : 1
"WRONG_DOCUMENT_ERR" : 1
"WrongDocumentErr" : 1
someValue; : 1
anotherValue; : 1
"someValue" : 1
("_get_someValue()") : 1
"anotherValue" : 1
("_get_anotherValue()" : 1
"_set_anotherValue()") : 1
"object.someValue" : 1
CORBA : 3
******************************************************************** : 1
Lib/sysconfig.py : 1
sysconfig.get_config_vars(*args) : 1
sysconfig.get_config_var(name) : 1
sysconfig.get_config_var('Py_ENABLE_SHARED') : 1
sysconfig.get_config_var('LIBDIR') : 1
'/usr/local/lib' : 1
sysconfig.get_config_vars('AR' : 1
'CXX') : 1
['ar' : 1
'g++'] : 1
schemes: : 2
*posix_prefix*: : 1
*posix_home*: : 1
*home* : 1
*posix_user*: : 1
*posix_venv*: : 1
environments" : 3
*nt*: : 1
*nt_user*: : 1
*nt_venv*: : 1
*venv*: : 1
ether : 1
*osx_framework_user*: : 1
*stdlib*: : 1
*platstdlib*: : 1
*platlib*: : 1
*purelib*: : 1
non-platform-specific : 2
*include*: : 1
*platinclude*: : 1
*scripts*: : 1
*data*: : 2
sysconfig.get_scheme_names() : 1
sysconfig.get_default_scheme() : 1
"_get_default_scheme()" : 1
sysconfig.get_preferred_scheme(key) : 1
""prefix"" : 1
""home"" : 1
""user"" : 1
"get_scheme_names()" : 2
*scheme* : 9
sysconfig._get_preferred_schemes() : 1
redistributors : 1
"_INSTALL_SCHEMES" : 1
"get_default_scheme()" : 1
"get_preferred_scheme()" : 1
sysconfig.get_path_names() : 1
sysconfig.get_path(name[ : 1
scheme[ : 1
vars[ : 2
expand]]]) : 2
"get_path_names()" : 1
*stdlib* : 1
"{base}/Lib" : 1
*vars* : 10
*expand* : 2
sysconfig.get_paths([scheme[ : 1
sysconfig.get_python_version() : 1
"MAJOR.MINOR" : 1
sysconfig.get_platform() : 1
linux-i586 : 1
linux-alpha : 1
solaris-2.6-sun4u : 1
win-amd64 : 1
(64bit : 1
Intel64 : 1
EM64T) : 1
macosx-10.6-ppc : 1
macosx-10.4-ppc64 : 1
macosx-10.3-i386 : 1
macosx-10.4-fat : 1
sysconfig.is_python_build() : 1
sysconfig.parse_config_h(fp[ : 1
vars]) : 1
"config.h"-style : 1
"config.h"-like : 1
sysconfig.get_config_h_filename() : 1
sysconfig.get_makefile_filename() : 1
*-m* : 1
"macosx-10.4-i386" : 1
"posix_prefix" : 1
"/Users/tarek/Dev/svn.python.org/py3k/Include" : 1
"/usr/local/lib/python3.2/site-packages" : 2
"/usr/local/lib/python3.2" : 2
AC_APPLE_UNIVERSAL_BUILD : 1
AIX_GENUINE_CPLUSPLUS : 1
AR : 1
"ar" : 1
ARFLAGS : 1
Lib/xml/sax/__init__.py : 1
(SAX) : 1
"setFeature()" : 1
"feature_external_ges" : 2
xml.sax.make_parser(parser_list=[]) : 1
"create_parser()" : 2
xml.sax.parse(filename_or_stream : 1
error_handler=handler.ErrorHandler()) : 2
*filename_or_stream* : 1
"ErrorHandler" : 5
"SAXParseException" : 2
xml.sax.parseString(string : 1
"Reader" : 1
relevant; : 1
"Locator" : 3
xml.sax.SAXException(msg : 1
exception=None) : 3
Encapsulate : 1
xml.sax.SAXParseException(msg : 1
locator) : 1
"SAXException" : 5
xml.sax.SAXNotRecognizedException(msg : 1
xml.sax.SAXNotSupportedException(msg : 1
SAX: : 1
focal : 1
application-provided : 1
parser-provided : 1
SAXException.getMessage() : 1
SAXException.getException() : 1
Lib/imghdr.py : 1
imghdr.what(file : 1
h=None) : 1
*h* : 2
"what()": : 2
+--------------+-------------------------------------+ : 14
|==============|=====================================| : 1
"'rgb'" : 1
SGI : 1
ImgLib : 1
"'gif'" : 1
GIF : 2
87a : 1
89a : 1
"'pbm'" : 1
Bitmap : 2
"'pgm'" : 1
Graymap : 1
"'ppm'" : 1
Pixmap : 1
"'tiff'" : 1
TIFF : 2
"'rast'" : 1
Raster : 1
"'xbm'" : 1
"'jpeg'" : 1
"'bmp'" : 1
"'png'" : 1
Graphics : 2
"'webp'" : 1
"'exr'" : 1
*exr* : 1
*webp* : 1
imghdr.tests : 1
byte-stream : 4
imghdr.what('bass.gif') : 1
'gif' : 1
versions/environments : 1
nuanced : 1
module*s : 1
'landmark' : 1
"python*majorversion**minorversion*.zip" : 1
("python311.zip") : 1
"lib/python*majorversion*.*minorversion*/os.py" : 1
("lib/python3.11/os.py") : 1
"lib/python*majorversion*.*minorversion*/lib-dynload" : 1
("lib/python3.11 : 1
/lib-dynload") : 1
Packages) : 1
("python._pth" : 1
"python311._pth") : 1
Lib/optparse.py : 1
further; : 1
GNU/POSIX : 1
parser.add_option("-f" : 8
"--file" : 12
dest="filename" : 3
help="write : 2
metavar="FILE") : 1
parser.add_option("-q" : 8
action="store_false" : 9
dest="verbose" : 8
default=True : 2
help="don't : 1
"usual : 1
thing" : 1
<yourscript> : 11
--file=outfile : 1
"options.filename" : 3
""outfile"" : 1
"options.verbose" : 3
--file : 3
-foutfile : 1
-qfoutfile : 1
--file=FILE : 1
*yourscript* : 1
"sys.argv[0]") : 1
acquaint : 1
("sys.argv[0]" : 1
"argument" : 1
"sys.argv[1:]"" : 1
("-") : 1
-F" : 1
"-xF" : 1
hyphen-separated : 1
--dry-run" : 1
"-pf" : 1
"-file" : 1
"+rgb" : 1
"/f" : 1
deliberate: : 1
MS-DOS) : 1
-ffoo : 2
--file=foo : 2
"-a" : 3
"-ab" : 1
command-line; : 1
"required : 2
self-contradictory : 1
--report : 2
report.txt : 1
"--report" : 3
"report.txt" : 1
(Pick : 1
toolsets : 1
"dd"---all : 1
mutant : 1
oddballs : 1
rightly : 1
criticized : 1
interfaces.) : 1
options" : 1
optional* : 1
humble : 1
"cp" : 4
cp : 2
DEST : 1
DEST-DIR : 1
copied: : 1
clobbering : 1
distracts : 1
positively : 2
user---most : 1
GUI: : 1
demands : 1
supply---use : 1
"Preferences" : 1
options---the : 1
course; : 1
overwhelm : 1
"optparse"-based : 3
parser.add_option(opt_str : 1
attr=value : 4
"OptionParser.add_option()" : 5
*encountering : 1
option* : 1
*option : 1
"sys.argv[1:]".) : 1
options--- : 1
"options.file" : 1
(destination) : 2
variable---for : 1
"store" : 7
action="store" : 4
type="string" : 3
dest="filename") : 4
["-f" : 1
"foo.txt"] : 1
parser.parse_args(args) : 2
"foo.txt" : 2
""foo.txt"" : 1
parser.add_option("-n" : 5
type="int" : 2
dest="num") : 1
jam : 1
"-n42" : 1
"-n : 2
(two : 1
parser.parse_args(["-n42"]) : 1
print(options.num) : 1
shorter: : 1
--foo-bar" : 1
options---set : 1
seen---are : 1
"store_false" : 1
"-q": : 1
parser.add_option("-v" : 9
dest="verbose") : 10
values---see : 1
below.) : 2
"True"; : 5
""store_const"" : 6
"Option.const" : 3
""append"" : 10
""count"" : 5
""callback"" : 6
"destination") : 1
verbose/quiet : 1
default=True) : 3
default=False) : 1
"True": : 4
"parse_args()": : 1
parser.set_defaults(verbose=True) : 1
parser.add_option(...) : 1
"usage: : 3
%prog : 4
arg2" : 2
OptionParser(usage=usage) : 1
help="make : 1
[default]") : 1
help="be : 2
vewwy : 4
wabbits)") : 1
"--filename" : 3
metavar="FILE" : 1
FILE") : 1
parser.add_option("-m" : 1
"--mode" : 1
default="intermediate" : 1
help="interaction : 1
novice : 4
"or : 1
[default: : 4
%default]") : 1
"parser.print_help()" : 1
[default] : 3
wabbits) : 3
--filename=FILE : 4
--mode=MODE : 4
intermediate] : 3
"os.path.basename(sys.argv[0])" : 3
bland : 1
""Usage: : 1
[options]"" : 1
wrapping---"optparse" : 1
"MODE" : 1
meta-variable: : 1
"-m"/"--mode" : 1
meta-variable : 2
want---for : 1
"metavar="FILE"" : 1
clue : 1
semi-formal : 1
string---"optparse" : 1
"OptionGroup": : 1
optparse.OptionGroup(parser : 1
"OptionGroup" : 4
"OptionContainer" : 1
"OptionParser") : 1
"add_option()" : 6
"add_option_group()" : 1
OptionGroup(parser : 3
"Dangerous : 2
Options" : 2
"Caution: : 2
bite.") : 2
group.add_option("-g" : 2
help="Group : 2
option.") : 2
parser.add_option_group(group) : 3
Dangerous : 2
Options") : 1
group.add_option("-d" : 1
"--debug" : 1
help="Print : 3
information") : 1
group.add_option("-s" : 1
"--sql" : 1
executed") : 1
group.add_option("-e" : 1
done") : 1
--debug : 1
--sql : 1
OptionParser.get_option_group(opt_str) : 1
*opt_str* : 5
"'-o'" : 1
"'--option'") : 1
OptionParser: : 2
OptionParser(usage="%prog : 1
[-f] : 1
[-q]" : 1
version="%prog : 1
1.0") : 1
"usage" : 7
"%prog") : 1
"/usr/bin/foo": : 1
/usr/bin/foo : 3
OptionParser.print_version(file=None) : 1
("self.version") : 1
stdout) : 2
"print_usage()" : 2
"self.version" : 2
OptionParser.get_version() : 1
"print_version()" : 2
Programmer : 1
4x" : 1
"OptionParser.error()" : 2
options.a : 1
options.b: : 1
parser.error("options : 1
exclusive") : 1
"4x" : 1
-n: : 1
'4x' : 1
"optparse"-generated : 1
OptionParser(usage) : 1
help="read : 1
FILENAME") : 1
len(args) : 1
parser.error("incorrect : 1
options.verbose: : 1
print("reading : 1
%s..." : 1
options.filename) : 1
optparse.OptionParser(...) : 1
""%prog : 1
[options]"") : 1
"prog" : 2
"optparse.SUPPRESS_USAGE" : 2
"option_list" : 2
"[]") : 1
"standard_option_list" : 1
Deprecated; : 1
"option_class" : 1
optparse.Option) : 1
"conflict_handler" : 2
""error"") : 1
reformats : 1
"IndentedHelpFormatter") : 1
optparse.HelpFormatter : 1
IndentedHelpFormatter : 1
TitledHelpFormatter : 1
"add_help_option" : 1
"--help") : 2
"make_option()") : 1
"make_option()" : 2
pre-constructed : 1
option_list : 2
make_option("-f" : 1
make_option("-q" : 1
OptionParser(option_list=option_list) : 2
("make_option()" : 1
directly.) : 1
synonymous : 1
"Option" : 3
OptionParser.add_option(option) : 1
OptionParser.add_option(*opt_str : 1
parser.add_option("--foo" : 4
"OptionError" : 2
""store"" : 9
""store_false"" : 2
""append_const"" : 2
""help"" : 2
actions.) : 1
"optparse.Values") : 1
Values() : 1
options.filename : 2
Option.action : 1
""store"") : 1
Option.type : 1
""string"") : 1
""string"" : 7
""int""); : 1
Option.dest : 1
Option.default : 1
"OptionParser.set_defaults()" : 1
Option.nargs : 1
Option.const : 1
Option.choices : 1
""choice"" : 4
Option.callback : 1
Option.callback_args : 1
Option.callback_kwargs : 1
Option.help : 1
"optparse.SUPPRESS_HELP" : 2
Option.metavar : 1
Stand-in : 1
[relevant: : 5
"choices"] : 2
"choices" : 2
"foo_bar") : 1
"f") : 2
parser.add_option("-f") : 1
parser.add_option("-p" : 1
type="float" : 1
nargs=3 : 2
dest="point") : 1
foo.txt : 1
-3.5 : 2
-fbar.txt : 1
options.f : 2
options.point : 1
"bar.txt" : 1
[required: : 3
"const"; : 2
relevant: : 3
"dest"] : 5
action="store_const" : 7
const=0 : 1
const=1 : 1
parser.add_option("--noisy" : 1
const=2 : 1
"--noisy" : 3
options.verbose : 1
parser.add_option("--clobber" : 1
dest="clobber") : 2
parser.add_option("--no-clobber" : 1
parser.add_option("-t" : 1
"--tracks" : 1
action="append" : 2
type="int") : 1
"-t3" : 1
options.tracks : 1
options.tracks.append(int("3")) : 1
"--tracks=4" : 1
options.tracks.append(int("4")) : 1
"append" : 6
parser.add_option("--files" : 1
default=['~/.mypkg/defaults']) : 1
parser.parse_args(['--files' : 1
'overrides.mypkg']) : 1
opts.files : 1
['~/.mypkg/defaults' : 1
'overrides.mypkg'] : 1
"dest"; : 1
dest="verbosity") : 1
options.verbosity : 3
"callback"; : 1
"callback_args" : 4
"callback_kwargs"] : 1
func(option : 2
opt_str : 8
OptionParser's : 2
OptionParsers : 1
SUPPRESS_HELP : 1
add_help_option : 1
OptionParser(add_help_option=False) : 1
parser.add_option("-h" : 1
action="help") : 1
help="Be : 1
verbose") : 1
parser.add_option("--file" : 1
help="Input : 1
from") : 1
parser.add_option("--secret" : 1
help=SUPPRESS_HELP) : 1
""foo.py""): : 1
--file=FILENAME : 1
"sys.exit(0)" : 1
""version"" : 1
""int"" : 1
""float"" : 2
""complex"" : 3
""int"") : 1
"optparse.check_choice()" : 1
"OptionValueError" : 4
parser.parse_args(args=None : 1
values=None) : 1
"sys.argv[1:]") : 1
"Values") : 1
optparse.Values : 1
(roughly : 1
destination) : 1
poke : 1
out: : 1
OptionParser.disable_interspersed_args() : 1
"disable_interspersed_args()" : 1
OptionParser.enable_interspersed_args() : 1
interspersing : 1
OptionParser.get_option(opt_str) : 1
OptionParser.has_option(opt_str) : 1
"--verbose") : 1
OptionParser.remove_option(opt_str) : 1
"--dry-run" : 3
options.) : 1
conflict- : 1
conflict-handling : 1
OptionParser(... : 1
conflict_handler=handler) : 1
parser.set_conflict_handler(handler) : 1
""error"" : 2
"OptionConflictError" : 1
""resolve"" : 2
OptionParser(conflict_handler="resolve") : 1
help="do : 1
harm") : 1
noisy") : 1
--dry-run : 2
--noisy : 2
whittle : 1
Carrying : 1
parser.add_option("--dry-run" : 1
help="new : 1
"-n"/"--dry-run" : 1
text: : 3
OptionParser.set_usage(usage) : 1
OptionParser.print_usage(file=None) : 1
("self.usage") : 1
"self.usage" : 2
OptionParser.get_usage() : 1
OptionParser.set_defaults(dest=value : 1
wins: : 1
parser.add_option("--advanced" : 2
dest="mode" : 4
const="advanced" : 1
default="novice") : 1
parser.add_option("--novice" : 2
const="novice" : 1
default="advanced") : 1
parser.set_defaults(mode="advanced") : 1
const="advanced") : 1
const="novice") : 1
overkill : 1
Quite : 1
parser.add_option("-c" : 4
action="callback" : 8
callback=my_callback) : 1
"my_callback()" : 1
arguments--- : 1
tricky; : 1
"callback_kwargs" : 3
my_callback(option : 1
parser): : 8
"option" : 2
"opt_str" : 4
string---e.g : 1
"--foobar" : 1
""--foobar"".) : 1
expected) : 2
"parser.largs" : 2
Feel : 2
"parse_args()".) : 1
"parser.rargs" : 2
"parser.values" : 1
optparse.OptionValues) : 1
record_foo_seen(option : 1
parser.values.saw_foo : 1
callback=record_foo_seen) : 1
check_order(option : 2
parser.values.b: : 2
OptionValueError("can't : 2
-b") : 1
parser.values.a : 1
parser.add_option("-a" : 2
callback=check_order) : 1
parser.add_option("-b" : 2
dest="b") : 2
seen) : 1
-b" : 1
opt_str) : 2
setattr(parser.values : 4
option.dest : 4
callback=check_order : 2
dest='a') : 1
dest='c') : 1
there---you're : 1
already-defined : 1
moon : 2
check_moon(option : 1
is_moon_full(): : 1
OptionValueError("%s : 1
full" : 2
callback=check_moon : 1
dest="foo") : 2
"is_moon_full()" : 1
reader.) : 1
store_value(option : 1
callback=store_value : 1
whatever; : 1
hairy : 1
intricacies : 1
halt : 3
(append : 1
"parser.largs") : 1
stab : 1
vararg_callback(option : 1
floatable(str): : 1
parser.rargs: : 1
arg[:2] : 1
len(arg) : 2
-3.0 : 1
arg[:1] : 1
floatable(arg): : 1
value.append(arg) : 1
parser.rargs[:len(value)] : 1
"--callback" : 1
dest="vararg_attr" : 1
callback=vararg_callback) : 1
"TYPE_CHECKER" : 3
Option.TYPES : 2
Option.TYPE_CHECKER : 1
check_mytype(option : 1
"-f") : 1
"check_mytype()" : 1
"mytype" : 1
OptionValues : 2
"OptionParser.parse_args()" : 1
"OptionParser"'s : 1
""error:"" : 1
silly : 2
Python-style : 1
sillier : 1
mind.) : 1
OptionValueError : 1
type-checker : 1
subclass): : 1
check_complex(option : 1
complex(value) : 1
OptionValueError( : 1
(opt : 1
value)) : 1
MyOption : 2
(Option): : 1
("complex",) : 1
TYPE_CHECKER : 1
copy(Option.TYPE_CHECKER) : 1
TYPE_CHECKER["complex"] : 1
check_complex : 1
"Option.TYPE_CHECKER" : 1
manners : 1
sense.) : 1
Option: : 2
OptionParser(option_class=MyOption) : 1
type="complex") : 1
OptionParser; : 1
[MyOption("-c" : 1
type="complex" : 1
dest="c")] : 1
actions: : 1
sets: : 2
categorize : 2
strings): : 1
Option.ACTIONS : 2
ACTIONS : 2
Option.STORE_ACTIONS : 2
Option.TYPED_ACTIONS : 2
Option.ALWAYS_TYPED_ACTIONS : 2
"ALWAYS_TYPED_ACTIONS" : 2
Option's : 1
"take_action()" : 1
""extend"" : 7
comma-delimited : 1
"--names" : 1
--names=foo,bar : 1
--names : 2
ding,dong : 1
["foo" : 3
"blah" : 1
"ding" : 1
"dong"] : 1
MyOption(Option): : 1
("extend",) : 4
STORE_ACTIONS : 1
TYPED_ACTIONS : 1
ALWAYS_TYPED_ACTIONS : 1
take_action(self : 1
"extend": : 1
value.split(",") : 1
values.ensure_value(dest : 1
[]).extend(lvalue) : 1
Option.take_action( : 1
"STORE_ACTIONS" : 1
"TYPED_ACTIONS" : 1
"MyOption.take_action()" : 1
"Option.take_action()" : 1
optparse_parser.Values : 1
"ensure_value()" : 4
valve; : 1
values.ensure_value(attr : 1
ensure_value() : 1
'value : 1
**2to3** : 1
Lib/tempfile.py : 1
"TemporaryFile" : 1
"mkstemp()" : 11
"mkdtemp()" : 5
user-callable : 2
odd; : 1
tempfile.TemporaryFile(mode='w+b' : 1
suffix=None : 3
dir=None : 5
Examples) : 2
"'w+b'" : 2
"os.O_TMPFILE" : 2
(Linux-specific : 1
Posix : 1
TemporaryFile : 1
"tempfile.mkstemp" : 3
tempfile.NamedTemporaryFile(mode='w+b' : 1
delete=True : 1
"TemporaryFile()" : 4
unlinked) : 1
*delete* : 3
(only) : 3
tempfile.SpooledTemporaryFile(max_size=0 : 1
mode='w+b' : 1
spooled : 1
*max_size* : 1
"rollover()" : 2
"_file" : 1
tempfile.TemporaryDirectory(suffix=None : 1
ignore_cleanup_errors=False) : 1
removable : 1
"best-effort" : 1
shutdown) : 1
"tempfile.mkdtemp" : 2
tempfile.mkstemp(suffix=None : 1
text=False) : 1
"os.O_EXCL" : 1
suffix; : 5
prefix; : 3
"gettempprefix()" : 3
"gettempprefixb()" : 1
*TMPDIR* : 1
*TEMP* : 1
*TMP* : 1
"suffix=b''" : 1
tempfile.mkdtemp(suffix=None : 1
dir=None) : 2
"TMPDIR" : 1
"TMP" : 1
"C:\TEMP" : 1
"C:\TMP" : 1
"\TEMP" : 1
"\TMP" : 1
"/tmp" : 1
"/var/tmp" : 1
"/usr/tmp" : 1
"tempdir" : 4
tempfile.gettempdirb() : 1
"gettempdir()" : 3
tempfile.gettempprefix() : 1
tempfile.gettempprefixb() : 1
unsuspecting : 1
tempfile.tempdir : 1
nasty : 1
fp.write(b'Hello : 2
fp.seek(0) : 2
world!' : 4
"mktemp()" : 3
tempfile.mktemp(suffix='' : 1
prefix='tmp' : 1
2.3: : 1
"suffix=None" : 1
"prefix=None" : 1
beaten : 1
"NamedTemporaryFile()" : 1
NamedTemporaryFile(delete=False) : 1
f.name : 2
'/tmp/tmptjujjt' : 1
f.write(b"Hello : 2
World!\n") : 1
os.unlink(f.name) : 1
os.path.exists(f.name) : 1
Lib/collections/__init__.py : 1
+-----------------------+----------------------------------------------------------------------+ : 10
collections.ChainMap(*maps) : 1
*maps* : 3
Lookups : 1
subcontexts : 2
first-searched : 1
last-searched : 1
new_child(m=None : 1
mappings; : 1
"d.new_child()" : 1
"ChainMap({} : 1
*d.maps)" : 1
scopes* : 2
"d.parents" : 1
"ChainMap(*d.maps[1:])" : 1
"ChainMap()" : 1
first: : 1
baseline : 5
{'music': : 1
'bach' : 1
'art': : 1
'rembrandt'} : 1
{'art': : 1
'van : 1
gogh' : 1
'opera': : 1
'carmen'} : 1
list(ChainMap(adjustments : 1
baseline)) : 1
['music' : 2
'art' : 2
'opera'] : 2
baseline.copy() : 1
combined.update(adjustments) : 1
list(combined) : 1
MultiContext : 1
CodeTools : 1
Django's : 1
pushing : 3
"new_child()" : 1
"parents" : 1
mutations : 1
Chainmap : 1
simulating : 1
pylookup : 1
ChainMap(locals() : 1
vars(builtins)) : 1
{'color': : 1
'user': : 3
'guest'} : 1
'--user') : 1
'--color') : 1
command_line_args : 1
{k: : 1
vars(namespace).items() : 1
ChainMap(command_line_args : 1
print(combined['color']) : 1
print(combined['user']) : 1
contexts: : 2
ChainMap() : 1
c.new_child() : 2
e.maps[0] : 1
e.maps[-1] : 1
e.parents : 1
d['x'] : 3
len(d) : 2
dict(d) : 1
deletions) : 1
DeepChainMap(ChainMap): : 1
'Variant : 1
ChainMap : 1
scopes' : 1
self.maps: : 2
self.maps[0][key] : 1
DeepChainMap({'zebra': : 2
'black'} : 1
{'elephant': : 1
'blue'} : 1
{'lion': : 2
'yellow'}) : 1
d['lion'] : 1
d['snake'] : 1
d['elephant'] : 1
'snake': : 1
'red'} : 1
'orange'}) : 1
Tally : 1
cnt : 2
'blue']: : 1
cnt[word] : 1
Hamlet : 1
re.findall(r'\w+' : 1
open('hamlet.txt').read().lower()) : 1
Counter(words).most_common(10) : 1
[('the' : 1
1143) : 1
('and' : 1
966) : 1
('to' : 1
762) : 1
('of' : 1
669) : 1
631) : 1
('you' : 1
554) : 1
546) : 1
('my' : 1
514) : 1
('hamlet' : 1
471) : 1
('in' : 1
451)] : 1
collections.Counter([iterable-or-mapping]) : 1
bags : 1
counter): : 1
Counter('gallahad') : 1
Counter({'red': : 1
'blue': : 1
Counter(cats=4 : 1
dogs=8) : 1
Counter(['eggs' : 1
'ham']) : 1
c['bacon'] : 1
c['sausage'] : 2
*Counter* : 1
elements() : 1
Counter(a=4 : 2
c=0 : 2
d=-2) : 2
sorted(c.elements()) : 1
most_common([n]) : 1
Counter('abracadabra').most_common(3) : 1
subtract([iterable-or-mapping]) : 1
counter) : 2
Counter(a=1 : 3
c=3 : 1
d=4) : 1
c.subtract(d) : 1
Counter({'a': : 6
-6}) : 1
total() : 1
Counter(a=10 : 1
b=5 : 1
c=0) : 1
c.total() : 2
fromkeys(iterable) : 1
update([iterable-or-mapping]) : 1
added-in : 1
Counters : 2
relationships: : 2
"Counter(a=1) : 1
b=0)" : 2
"Counter(a=3)" : 1
"Counter(a=3 : 1
c.clear() : 1
list(c) : 1
set(c) : 1
dict(c) : 1
c.items() : 1
(elem : 2
cnt) : 2
Counter(dict(list_of_pairs)) : 1
c.most_common()[:-n-1:-1] : 1
+c : 2
(counters : 1
Counter(a=3 : 1
b=1) : 1
c[x] : 3
d[x] : 3
(keeping : 1
intersection: : 1
min(c[x] : 1
d[x]) : 2
max(c[x] : 1
equality: : 1
inclusion: : 1
Counter(a=2 : 1
b=-4) : 1
Counter({'b': : 1
multiset : 3
"c[key] : 1
Bag : 1
Multisets : 1
*Knuth : 1
Art : 2
Exercise : 1
19* : 1
"itertools.combinations_with_replacement()": : 1
map(Counter : 1
combinations_with_replacement('ABC' : 2
AA : 2
AC : 8
BB : 4
BC : 13
collections.deque([iterable[ : 1
maxlen]]) : 1
"append()") : 1
Deques : 2
"deck" : 1
"double-ended : 1
queue") : 1
incur : 3
"pop(0)" : 1
"insert(0 : 1
Bounded : 3
append(x) : 2
appendleft(x) : 1
count(x) : 2
extend(iterable) : 2
extendleft(iterable) : 1
reversing : 3
index(x[ : 2
stop]]) : 2
*stop*) : 1
insert(i : 2
pop() : 2
popleft() : 1
remove(value) : 1
rotate(n=1) : 1
Rotate : 3
"d.appendleft(d.pop())" : 1
"d.append(d.popleft())" : 1
maxlen : 1
"len(d)" : 1
"reversed(d)" : 1
"copy.copy(d)" : 1
"copy.deepcopy(d)" : 1
"d[0]" : 1
print(elem.upper()) : 1
H : 3
d[0] : 1
d[-1] : 1
list(reversed(d)) : 2
['i' : 1
d.extend('jkl') : 1
deque(['g' : 2
'k' : 3
d.rotate(1) : 1
deque(['l' : 2
'k']) : 1
d.rotate(-1) : 1
deque(reversed(d)) : 1
'g']) : 2
d.clear() : 1
"<pyshell#6>" : 1
-toplevel- : 3
d.extendleft('abc') : 1
extendleft() : 1
deque(['c' : 1
'a']) : 1
tail(filename : 1
n=10): : 1
file' : 1
deque(f : 1
moving_average(iterable : 1
n=3): : 1
moving_average([40 : 1
44]) : 1
42.0 : 1
43.0 : 1
https://en.wikipedia.org/wiki/Moving_average : 1
iter(iterable) : 8
deque(itertools.islice(it : 1
n-1)) : 1
d.appendleft(0) : 1
sum(d) : 1
d.append(elem) : 1
"popleft()"; : 1
cycled : 1
roundrobin(*iterables): : 2
"roundrobin('ABC' : 2
'EF') : 2
deque(map(iter : 1
iterables)) : 1
next(iterators[0]) : 1
iterators.rotate(-1) : 1
StopIteration: : 10
iterators.popleft() : 1
d[n]" : 1
popped: : 1
delete_nth(d : 1
d.rotate(-n) : 1
d.rotate(n) : 1
"popleft()" : 2
Forth : 1
"drop" : 1
"swap" : 1
"over" : 1
"pick" : 1
"rot" : 1
"roll" : 1
collections.defaultdict(default_factory=None : 1
__missing__(key) : 1
[('yellow' : 1
d[k].append(v) : 1
sorted(d.items()) : 4
[1]) : 4
3])] : 2
"dict.setdefault()": : 1
d.setdefault(k : 1
[]).append(v) : 1
bag : 1
languages): : 1
'mississippi' : 1
defaultdict(int) : 1
d[k] : 1
[('i' : 1
('m' : 1
('p' : 1
zero): : 1
constant_factory(value): : 1
defaultdict(constant_factory('<missing>')) : 1
d.update(name='John' : 1
action='ran') : 1
'%(name)s : 1
%(action)s : 1
%(object)s' : 1
<missing>' : 1
defaultdict(set) : 1
d[k].add(v) : 1
3})] : 1
collections.namedtuple(typename : 1
field_names : 1
rename=False : 1
defaults=None : 2
*typename* : 4
field_names) : 1
*field_names* : 2
"['x' : 2
'y']" : 1
y'" : 2
*pass* : 1
*raise* : 1
"['abc' : 2
'abc']" : 1
'_3']" : 1
'z']" : 1
Point(11 : 1
y=22) : 7
p[0] : 1
p[1] : 1
22) : 3
name=value : 1
Point(x=11 : 5
EmployeeRecord : 1
namedtuple('EmployeeRecord' : 1
department : 4
paygrade') : 1
emp : 2
map(EmployeeRecord._make : 2
csv.reader(open("employees.csv" : 1
"rb"))): : 1
print(emp.name : 2
emp.title) : 2
sqlite3.connect('/companydata') : 1
cursor.execute('SELECT : 1
paygrade : 1
employees') : 1
cursor.fetchall()): : 1
somenamedtuple._make(iterable) : 1
22] : 1
Point._make(t) : 1
somenamedtuple._asdict() : 1
p._asdict() : 1
22} : 2
somenamedtuple._replace(**kwargs) : 1
p._replace(x=33) : 1
Point(x=33 : 1
partnum : 1
inventory.items(): : 1
inventory[partnum] : 1
record._replace(price=newprices[partnum] : 1
timestamp=time.now()) : 1
somenamedtuple._fields : 1
p._fields : 1
('x' : 1
'y') : 1
namedtuple('Color' : 1
'red : 1
blue') : 1
Pixel : 1
namedtuple('Pixel' : 1
Point._fields : 2
Color._fields) : 1
Pixel(11 : 1
Pixel(x=11 : 1
y=22 : 1
red=128 : 1
green=255 : 1
blue=0) : 1
somenamedtuple._field_defaults : 1
namedtuple('Account' : 1
['type' : 1
'balance'] : 1
defaults=[0]) : 1
Account._field_defaults : 1
{'balance': : 1
Account('premium') : 1
Account(type='premium' : 1
balance=0) : 1
getattr(p : 1
double-star-operator : 1
Lists): : 1
Point(**d) : 1
Point(namedtuple('Point' : 1
'y'])): : 1
hypot(self): : 1
(self.x : 2
'Point: : 1
x=%6.3f : 1
y=%6.3f : 1
hypot=%6.3f' : 1
self.hypot) : 1
Point(3 : 1
Point(14 : 1
5/7): : 1
x= : 1
3.000 : 1
y= : 2
4.000 : 1
hypot= : 1
5.000 : 1
x=14.000 : 1
0.714 : 1
hypot=14.018 : 1
Point3D : 1
namedtuple('Point3D' : 1
('z',)) : 1
namedtuple('Book' : 1
['id' : 1
'authors']) : 1
Book.__doc__ : 1
Hardcover : 1
collection' : 1
Book.id.__doc__ : 1
'13-digit : 1
ISBN' : 1
Book.title.__doc__ : 1
'Title : 1
printing' : 1
Book.authors.__doc__ : 1
'List : 1
name' : 1
Component(NamedTuple): : 1
part_number: : 1
weight: : 1
Optional[str] : 1
"types.SimpleNamespace()" : 1
remain: : 1
"p : 5
all(k1 : 1
zip(p : 2
q))" : 1
OrderedDict's : 4
"od.popitem(last=True)" : 1
"d.popitem()" : 1
"od.popitem(last=False)" : 1
"(k : 1
next(iter(d)) : 1
d.pop(k))" : 1
"od.move_to_end(k : 2
last=True)" : 1
"d[k] : 1
d.pop(k)" : 1
last=False)" : 1
collections.OrderedDict([items]) : 1
popitem(last=True) : 1
move_to_end(key : 1
last=True) : 1
OrderedDict.fromkeys('abcde') : 1
d.move_to_end('b') : 1
''.join(d) : 2
'acdeb' : 1
d.move_to_end('b' : 1
last=False) : 1
'bacde' : 1
order-sensitive : 1
"list(od1.items())==list(od2.items())" : 1
order-insensitive : 1
*views* : 2
LastUpdatedOrderedDict(OrderedDict): : 1
'Store : 1
added' : 1
super().__setitem__(key : 1
self.move_to_end(key) : 1
"functools.lru_cache()": : 1
TimeBoundedLRU: : 1
"LRU : 1
entries." : 1
maxsize=128 : 2
maxage=30): : 1
self.cache : 2
OrderedDict() : 3
(timestamp : 1
result)} : 1
self.func : 2
self.maxage : 1
maxage : 1
self.cache: : 2
self.cache.move_to_end(args) : 2
self.cache[args] : 4
time() : 3
self.maxage: : 1
self.func(*args) : 2
len(self.cache) : 2
self.cache.popitem(0) : 2
MultiHitLRUCache: : 1
one-time : 2
maxrequests=4096 : 1
cache_after=1): : 1
self.requests : 1
uncached_key : 1
request_count : 1
cached_key : 1
function_result : 1
self.maxrequests : 1
maxrequests : 1
self.cache_after : 1
cache_after : 1
self.requests[args] : 2
self.requests.get(args : 1
self.cache_after: : 1
self.requests.move_to_end(args) : 1
len(self.requests) : 1
self.maxrequests: : 1
self.requests.popitem(0) : 1
self.requests.pop(args : 1
supplanted : 3
collections.UserDict([initialdata]) : 1
*initialdata* : 2
contents; : 1
"list"; : 1
collections.UserList([list]) : 1
**Subclassing : 1
requirements:** : 1
overridden; : 2
collections.UserString(seq) : 1
"casefold" : 1
"format_map" : 1
"isprintable" : 1
"maketrans" : 1
ZIP- : 1
tar-format : 1
(SGML) : 1
Hypertext : 1
(HTML) : 1
Lib/urllib/ : 1
URLs: : 1
Lib/email/generator.py : 1
(serialized) : 1
"smtplib.SMTP.sendmail()" : 1
non-transforming : 1
regenerating : 1
in.) : 1
"8 : 2
SMIME-signed : 1
"multipart/signed" : 1
email.generator.BytesGenerator(outfp : 1
mangle_from_=None : 3
maxheaderlen=None : 4
*outfp* : 8
*mangle_from_* : 9
"mangle_from_" : 2
WHY : 2
CONTENT-LENGTH : 2
FORMAT : 4
BAD) : 2
refold : 3
rewrap : 2
*manheaderlen* : 2
"email.policy" : 2
flatten(msg : 2
unixfrom=False : 2
linesep=None) : 2
(*Content-Transfer-Encoding: : 2
8bit*) : 2
RFC-invalid : 2
"mailbox") : 2
clone(fp) : 2
write(s) : 2
"BytesGenerator"'s : 1
"bytes(aMessage)" : 1
"__bytes__()") : 2
Transfer_Encoding* : 1
email.generator.Generator(outfp : 1
"Generator"'s : 1
"str(aMessage)" : 1
"__str__()") : 1
non-*text* : 7
email.generator.DecodedGenerator(outfp : 1
Act : 1
"Generator.flatten()" : 1
"fmt : 1
part_info" : 1
"part_info" : 1
"maintype" : 4
"subtype" : 1
Sub-MIME : 1
*fmt*: : 1
"[Non-text : 1
(%(type)s) : 1
%(filename)s]" : 1
*_mangle_from_* : 1
"unixfrom" : 1
"refold_source" : 3
Lib/email/policy.py : 1
'body') : 1
disparate : 1
pre-Python3.3 : 1
**will : 1
changing** : 1
**always : 1
cloned : 2
"sendmail" : 2
message_from_binary_file : 1
PIPE : 2
open('mymsg.txt' : 1
message_from_binary_file(f : 1
policy=policy.default) : 1
Popen(['sendmail' : 1
msg['To'].addresses[0]] : 1
BytesGenerator(p.stdin : 1
policy=msg.policy.clone(linesep='\r\n')) : 1
p.stdin.close() : 1
p.wait() : 2
"sendmail's" : 1
open('converted.txt' : 1
f.write(msg.as_bytes(policy=msg.policy.clone(linesep=os.linesep))) : 1
summed : 1
compat_SMTP : 2
policy.compat32.clone(linesep='\r\n') : 1
compat_strict : 2
policy.compat32.clone(raise_on_defect=True) : 1
compat_strict_SMTP : 1
commutative; : 1
illustrate: : 1
policy100 : 3
policy.compat32.clone(max_line_length=100) : 1
policy80 : 3
policy.compat32.clone(max_line_length=80) : 1
apolicy : 2
apolicy.max_line_length : 2
email.policy.Policy(**kw) : 1
+----------+-----------------------------------------------------------------+ : 13
"7 : 2
(ASCII-only) : 1
"fold_binary()" : 1
"cte_type=8bit" : 1
"register_defect()" : 2
mangle_from_ : 2
*"From : 1
message_factory : 1
clone(**kw) : 1
handle_defect(obj : 1
defect) : 2
*defect* : 6
"Defect" : 2
"raise_on_defect" : 2
register_defect(obj : 1
"handle_defect" : 1
header_max_count(name) : 2
"Message.__setitem__" : 1
parsed.) : 1
header_source_parse(sourcelines) : 3
'":"' : 3
separator) : 1
unfolded : 2
intact) : 1
*sourcelines* : 1
surrogateescaped : 7
header_store_parse(name : 3
header_fetch_parse(name : 3
"Message"; : 1
fold(name : 3
"folded" : 1
fold_binary(name : 3
"fold()" : 2
email.policy.EmailPolicy(**kw) : 1
"encoded : 1
words" : 1
6531**) : 4
"headerregistry") : 1
stypes : 1
content_manager : 1
get_content : 1
set_content : 1
"raw_data_manager" : 3
"Policy": : 2
unknown-character : 1
'source : 1
value' : 2
sort) : 1
Folding : 1
rejoined : 1
"refold_header" : 1
"HTTP" : 1
email.policy.default : 1
RFC-correct : 1
email.policy.SMTP : 1
Suitable : 3
email.policy.SMTPUTF8 : 1
email.policy.HTTP : 1
(unlimited) : 1
email.policy.strict : 1
somepolicy : 1
policy.strict : 1
"EmailPolicies" : 1
"headerregistry" : 3
email.policy.Compat32(**kw) : 1
"unknown- : 1
8bit" : 1
invalid) : 2
email.policy.compat32 : 1
feature* : 1
Lib/chunk.py : 1
EA : 1
85 : 3
(AIFF/AIFF-C) : 1
(RMFF) : 1
WAVE : 2
+-----------+----------+---------------------------------+ : 5
Offset : 2
|===========|==========|=================================| : 1
Chunk : 1
IFF-type : 1
"Chunk" : 2
chunk.Chunk(file : 1
align=True : 1
bigendian=True : 1
inclheader=False) : 1
*align* : 4
*bigendian* : 1
*inclheader* : 1
getname() : 1
(ID) : 1
getsize() : 1
seek(pos : 1
chunk's : 1
positioning); : 2
(seek : 6
skip() : 1
"EA : 1
85" : 1
Jerry : 1
Arts : 1
1985 : 1
Lib/pydoc.py : 1
documentable : 1
"inspect.getcomments()") : 1
**pydoc** : 7
**man** : 2
occasion : 3
'__main__':" : 2
paginate : 1
"PAGER" : 1
pagination : 1
**python : 12
1234** : 1
"http://localhost:1234/" : 1
<hostname>** : 1
-b** : 1
*Get* : 1
*Search* : 1
index* : 1
*Topics* : 1
*Keywords* : 1
**pydoc : 1
spam** : 1
"https://docs.python.org/X.Y/library/" : 1
"PYTHONDOCS" : 1
"-g" : 1
Lib/json/__init__.py : 1
7159** : 3
4627**) : 1
ECMA-404 : 2
hierarchies: : 1
json.dumps(['foo' : 1
('baz' : 1
2)}]) : 1
'["foo" : 1
{"bar": : 1
["baz" : 1
2]}]' : 1
print(json.dumps("\"foo\bar")) : 1
"\"foo\bar" : 1
print(json.dumps('\u1234')) : 1
"\u1234" : 1
print(json.dumps('\\')) : 1
print(json.dumps({"c": : 1
"b": : 2
sort_keys=True)) : 1
{"a": : 1
"c": : 1
json.dump(['streaming : 1
API'] : 2
io) : 1
io.getvalue() : 1
'["streaming : 1
API"]' : 1
json.dumps([1 : 1
{'4': : 1
'6': : 2
7}] : 1
separators=(',' : 1
':')) : 1
'[1,2,3,{"4":5,"6":7}]' : 1
printing: : 1
print(json.dumps({'4': : 1
"4": : 1
"6": : 1
json.loads('["foo" : 1
{"bar":["baz" : 1
2]}]') : 1
['baz' : 1
2]}] : 1
json.loads('"\\"foo\\bar"') : 1
'"foo\x08ar' : 1
StringIO('["streaming : 1
API"]') : 1
json.load(io) : 1
['streaming : 1
as_complex(dct): : 1
'__complex__' : 1
dct: : 1
complex(dct['real'] : 1
dct['imag']) : 1
dct : 1
json.loads('{"__complex__": : 1
"real": : 1
"imag": : 1
2}' : 1
object_hook=as_complex) : 1
(1+2j) : 1
json.loads('1.1' : 1
parse_float=decimal.Decimal) : 1
Decimal('1.1') : 1
"JSONEncoder": : 1
ComplexEncoder(json.JSONEncoder): : 1
[obj.real : 1
obj.imag] : 1
json.JSONEncoder.default(self : 2
json.dumps(2 : 1
1j : 1
cls=ComplexEncoder) : 1
'[2.0 : 2
1.0]' : 2
ComplexEncoder().encode(2 : 1
1j) : 1
list(ComplexEncoder().iterencode(2 : 1
1j)) : 1
['[2.0' : 1
1.0' : 1
']'] : 1
pretty-print: : 1
'{"json":"obj"}' : 1
"json": : 2
'{1.2:3.4}' : 2
Expecting : 2
*separators* : 3
serializer : 6
json.dump(obj : 1
skipkeys=False : 3
ensure_ascii=True : 3
check_circular=True : 3
allow_nan=True : 3
cls=None : 4
indent=None : 3
separators=None : 3
sort_keys=False : 3
Serialize : 3
".write()"-supporting : 1
"fp.write()" : 1
*ensure_ascii* : 5
*check_circular* : 2
worse) : 1
*allow_nan* : 4
("nan" : 1
"-inf") : 1
("NaN" : 1
"Infinity" : 12
"-Infinity") : 1
"(item_separator : 2
key_separator)" : 2
"(' : 2
')" : 7
"(',' : 6
':')" : 3
"default()" : 4
kwarg; : 2
json.dumps(obj : 1
"loads(dumps(x)) : 1
json.load(fp : 1
object_hook=None : 3
parse_float=None : 3
parse_int=None : 3
parse_constant=None : 3
object_pairs_hook=None : 2
Deserialize : 3
".read()"-supporting : 1
document) : 4
*object_hook* : 5
JSON-RPC : 2
hinting) : 2
*parse_int* : 3
"int(num_str)" : 2
"float") : 3
*parse_constant* : 4
"'-Infinity'" : 2
"'Infinity'" : 2
"'NaN'" : 2
'null' : 1
'true' : 1
'false' : 1
json.loads(s : 1
json.JSONDecoder(* : 1
strict=True : 3
object_pairs_hook=None) : 1
+-----------------+---------------------+ : 9
|=================|=====================| : 1
(real) : 2
"-Infinity" : 7
deserializations : 1
0--31 : 1
"'\t'" : 1
(tab) : 1
decode(s) : 1
raw_decode(s) : 1
json.JSONEncoder(* : 1
+------------------------------------------+-----------------+ : 8
|==========================================|=================| : 1
int- : 2
float-derived : 2
serializable : 3
"RecursionError") : 1
serializations : 1
day- : 1
to-day : 1
default(o) : 1
iter(o) : 1
list(iterable) : 3
encode(o) : 1
json.JSONEncoder().encode({"foo": : 1
["bar" : 2
"baz"]}) : 1
'{"foo": : 1
"baz"]}' : 1
iterencode(o) : 1
json.JSONEncoder().iterencode(bigobject): : 1
mysocket.write(chunk) : 1
json.JSONDecodeError(msg : 1
colno : 2
deserializer : 5
RFC- : 1
*ensure_ascii=True* : 1
strings" : 1
deserializers : 1
forbid : 4
json.dumps(float('-inf')) : 1
'-Infinity' : 1
json.dumps(float('nan')) : 1
'NaN' : 2
json.loads('-Infinity') : 1
-inf : 2
json.loads('NaN') : 1
weird_json : 1
'{"x": : 1
json.loads(weird_json) : 1
4627** : 1
voluntarily : 1
"exotic" : 1
Lib/json/tool.py : 1
"outfile" : 1
respectively: : 1
'{"json": : 1
"obj"}' : 1
pretty-printed: : 1
mp_films.json : 1
"title": : 2
"And : 1
Completely : 3
Different" : 1
1971 : 2
Holy : 4
Grail" : 1
--sort-keys : 1
--no-ensure-ascii : 1
--tab : 1
--no-indent : 1
--compact : 1
Mutually : 1
errata : 2
U+2028 : 1
(LINE : 1
SEPARATOR) : 2
U+2029 : 1
(PARAGRAPH : 1
Edition : 2
5.1) : 1
Lib/asyncio/subprocess.py : 1
Lib/asyncio/base_subprocess.py : 1
run(cmd): : 1
asyncio.create_subprocess_shell( : 1
stdout=asyncio.subprocess.PIPE : 1
stderr=asyncio.subprocess.PIPE) : 1
print(f'[{cmd!r} : 1
{proc.returncode}]') : 1
stdout: : 1
print(f'[stdout]\n{stdout.decode()}') : 1
print(f'[stderr]\n{stderr.decode()}') : 1
asyncio.run(run('ls : 1
/zzz')) : 1
['ls : 1
/zzz' : 1
[stderr] : 1
ls: : 1
/zzz: : 1
simultaneously: : 1
asyncio.gather( : 4
run('ls : 1
/zzz') : 1
run('sleep : 1
"hello"')) : 1
asyncio.create_subprocess_exec(program : 1
"Process.stdout" : 3
"Process.stderr" : 3
asyncio.create_subprocess_shell(cmd : 1
*low-level* : 1
subprocesses: : 1
"loop.connect_read_pipe()" : 6
"loop.connect_write_pipe()" : 6
asyncio.subprocess.PIPE : 1
*PIPE* : 2
"Process.stdin" : 1
asyncio.subprocess.STDOUT : 1
asyncio.subprocess.DEVNULL : 1
"create_subprocess_shell()" : 4
*Process* : 2
watching : 5
asyncio.subprocess.Process : 1
"Process.wait()" : 1
communicate(input=None) : 1
reached; : 1
send_signal(signal) : 1
"signal.SIGTERM" : 1
("StreamWriter") : 1
"stdin=None" : 1
("StreamReader") : 2
"stdout=None" : 1
"stderr=None" : 1
"process.stdin.write()" : 1
process.stdout.read()" : 1
process.stderr.read()" : 1
(PID) : 1
*child : 1
watchers* : 1
limitation.Spawning : 1
limitations; : 1
get_date(): : 2
datetime; : 2
print(datetime.datetime.now())' : 2
subprocess; : 1
asyncio.create_subprocess_exec( : 1
stdout=asyncio.subprocess.PIPE) : 1
proc.stdout.readline() : 1
data.decode('ascii').rstrip() : 2
proc.wait() : 1
asyncio.run(get_date()) : 2
print(f"Current : 2
{date}") : 2
Lib/keyword.py : 1
keyword.iskeyword(s) : 1
keyword.kwlist : 1
keyword.issoftkeyword(s) : 1
keyword.softkwlist : 1
math-related : 1
Lib/quopri.py : 1
1521**: : 1
"MIME : 2
Bodies" : 1
nonprintable : 1
quopri.decode(input : 1
header=False) : 6
"Q"-encoded : 1
1522**: : 1
Two: : 1
Text" : 1
quopri.encode(input : 1
quotetabs : 1
*quotetabs* : 3
1522** : 2
quopri.decodestring(s : 1
quopri.encodestring(s : 1
quotetabs=False : 2
Lib/http/cookiejar.py : 1
*cookies* : 1
2965** : 20
2109** : 15
'policy' : 1
"max-age" : 4
cookie-attributes : 6
*Set-Cookie* : 9
*Set-Cookie2* : 3
"expires") : 1
*cookie-attribute* : 1
http.cookiejar.LoadError : 1
"LoadError" : 2
LoadError : 1
http.cookiejar.CookieJar(policy=None) : 1
"CookiePolicy" : 11
http.cookiejar.FileCookieJar(filename=None : 1
delayload=None : 3
**NOT** : 1
"revert()" : 3
http.cookiejar.CookiePolicy : 1
http.cookiejar.DefaultCookiePolicy(blocked_domains=None : 1
allowed_domains=None : 1
netscape=True : 1
rfc2965=False : 1
rfc2109_as_netscape=None : 1
hide_cookie2=False : 1
strict_domain=False : 1
strict_rfc2965_unverifiable=True : 1
strict_ns_unverifiable=False : 1
strict_ns_domain=DefaultCookiePolicy.DomainLiberal : 1
strict_ns_set_initial_dollar=False : 1
strict_ns_set_path=False : 1
secure_protocols=('https' : 1
'wss')) : 1
*blocked_domains* : 2
*allowed_domains* : 1
*https* : 1
(secure : 1
websocket) : 1
cookie-attribute : 8
"rfc2109_as_netscape" : 1
2109 : 5
'downgraded' : 2
http.cookiejar.Cookie : 1
"make_cookies()" : 1
https://curl.se/rfc/cookie_spec.html : 1
dominant : 1
'Netscape : 1
protocol' : 1
"http.cookiejar") : 1
"cookie_spec.html" : 1
Obsoleted : 1
http://kristol.org/cookie/errata.html : 1
Unfinished : 1
2964** : 1
CookieJar.add_cookie_header(request) : 1
*Cookie* : 1
"rfc2965" : 1
"hide_cookie2" : 1
"CookieJar"'s : 1
*Cookie2* : 2
"get_full_url()" : 2
"has_header()" : 1
"get_header()" : 1
"header_items()" : 1
"add_unredirected_header()" : 1
"unverifiable" : 2
"origin_req_host" : 4
"get_origin_req_host()" : 2
CookieJar.extract_cookies(response : 1
*Set- : 1
Cookie2* : 1
"CookiePolicy.set_ok()" : 1
approval) : 1
CookieJar.set_policy(policy) : 1
CookieJar.make_cookies(response : 1
"extract_cookies()" : 1
CookieJar.set_cookie_if_ok(cookie : 1
CookieJar.set_cookie(cookie) : 1
CookieJar.clear([domain[ : 1
path[ : 1
name]]]) : 1
CookieJar.clear_session_cookies() : 1
Discards : 1
"discard" : 3
cookie- : 1
cookie-attribute) : 2
*ignore_discard* : 1
FileCookieJar.save(filename=None : 1
ignore_discard=False : 3
ignore_expires=False) : 3
"self.filename" : 2
(whose : 1
*ignore_discard*: : 1
*ignore_expires*: : 1
wiping : 1
Saved : 1
FileCookieJar.load(filename=None : 1
FileCookieJar.revert(filename=None : 1
FileCookieJar.filename : 1
FileCookieJar.delayload : 1
changing) : 1
http.cookiejar.MozillaCookieJar(filename=None : 1
"cookies.txt" : 1
browsers) : 1
round-trip) : 1
http.cookiejar.LWPCookieJar(filename=None : 1
libwww-perl : 1
"Set-Cookie3" : 1
CookiePolicy.set_ok(cookie : 1
*cookie* : 3
"CookieJar.extract_cookies()" : 1
CookiePolicy.return_ok(cookie : 1
"CookieJar.add_cookie_header()" : 1
CookiePolicy.domain_return_ok(domain : 1
"domain_return_ok()" : 4
"path_return_ok()" : 5
"return_ok()" : 5
"".example.com"" : 2
""www.example.com"" : 4
CookiePolicy.path_return_ok(path : 1
CookiePolicy.netscape : 1
CookiePolicy.rfc2965 : 1
CookiePolicy.hide_cookie2 : 1
cookies) : 2
'null : 1
policy' : 1
useful) : 1
http.cookiejar : 4
MyCookiePolicy(http.cookiejar.DefaultCookiePolicy): : 1
set_ok(self : 1
http.cookiejar.DefaultCookiePolicy.set_ok(self : 1
i_dont_want_to_store_this_cookie(cookie): : 1
strictness : 5
tighten : 1
benign : 1
blocklist : 4
allowlist : 6
"blocked_domains()" : 1
"set_blocked_domains()" : 1
*allowed_domains*) : 1
""www.coyote.example.com"" : 1
blocked_domains : 1
""192.168.1.2"" : 1
"".168.1.2"" : 1
192.168.1.2 : 1
193.168.1.2 : 1
DefaultCookiePolicy.blocked_domains() : 1
DefaultCookiePolicy.set_blocked_domains(blocked_domains) : 1
DefaultCookiePolicy.is_blocked(domain) : 1
DefaultCookiePolicy.allowed_domains() : 1
DefaultCookiePolicy.set_allowed_domains(allowed_domains) : 1
DefaultCookiePolicy.is_not_allowed(domain) : 1
DefaultCookiePolicy.rfc2109_as_netscape : 1
downgrade : 1
downgraded : 2
switches: : 3
DefaultCookiePolicy.strict_domain : 1
two-component : 1
country-code : 1
".co.uk" : 1
".gov.uk" : 1
".co.nz".etc : 1
DefaultCookiePolicy.strict_rfc2965_unverifiable : 1
Follow : 2
unverifiable : 6
verifiability : 1
DefaultCookiePolicy.strict_ns_unverifiable : 1
DefaultCookiePolicy.strict_ns_domain : 1
domain-matching : 1
DefaultCookiePolicy.strict_ns_set_initial_dollar : 1
Set-Cookie: : 11
DefaultCookiePolicy.strict_ns_set_path : 1
path-match : 1
"strict_ns_domain" : 1
"DomainStrictNoDots|DomainStrictNonDomain" : 2
DefaultCookiePolicy.DomainStrictNoDots : 1
'host : 1
prefix' : 1
"www.foo.bar.com" : 1
".bar.com" : 1
"www.foo" : 1
DefaultCookiePolicy.DomainStrictNonDomain : 1
"spam.example.com" : 1
"example.com" : 1
DefaultCookiePolicy.DomainRFC2965Match : 1
domain-match : 1
DefaultCookiePolicy.DomainLiberal : 1
DefaultCookiePolicy.DomainStrict : 1
one-to-one : 1
(Netscape) : 1
Cookie.version : 1
'downgrade' : 2
Cookie.name : 1
Cookie.value : 1
Cookie.port : 1
'80' : 1
'80,8080') : 1
Cookie.path : 1
"'/acme/rocket_launchers'") : 1
Cookie.secure : 1
Cookie.expires : 1
"is_expired()" : 1
Cookie.discard : 1
Cookie.comment : 1
Cookie.comment_url : 1
Cookie.rfc2109 : 1
Cookie.port_specified : 1
Cookie.domain_specified : 1
Cookie.domain_initial_dot : 1
Cookie.has_nonstandard_attr(name) : 1
Cookie.get_nonstandard_attr(name : 1
Cookie.set_nonstandard_attr(name : 1
Cookie.is_expired(now=None) : 1
*now* : 1
epoch) : 1
"http.cookiejar": : 1
cj : 3
http.cookiejar.CookieJar() : 1
urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj)) : 3
opener.open("http://example.com/") : 3
(assumes : 1
Unix/Netscape : 1
file): : 2
http.cookiejar.MozillaCookieJar() : 1
cj.load(os.path.join(os.path.expanduser("~") : 1
".netscape" : 1
"cookies.txt")) : 1
DefaultCookiePolicy( : 1
rfc2965=True : 1
strict_ns_domain=Policy.DomainStrict : 1
blocked_domains=["ads.net" : 1
".ads.net"]) : 1
CookieJar(policy) : 1
Lib/email/encoders.py : 1
*cte* : 9
*image/** : 1
"encoders" : 1
email.encoders.encode_quopri(msg) : 1
email.encoders.encode_base64(msg) : 1
email.encoders.encode_7or8bit(msg) : 1
email.encoders.encode_noop(msg) : 1
nothing; : 1
"encode_quopri()" : 1
Lib/html/entities.py : 1
"name2codepoint" : 1
"codepoint2name" : 1
"entitydefs" : 1
html.entities.html5 : 1
'>'" : 1
"'gt;'") : 1
semicolon: : 1
html.entities.entitydefs : 1
html.entities.name2codepoint : 1
html.entities.codepoint2name : 1
https://html.spec.whatwg.org/multipage/named-characters.html : 1
#named-character-references : 1
******* : 3
Lib/asyncio/runners.py : 1
wide-spread : 1
asyncio.run(coro : 1
debug=None) : 1
*finalizing : 1
print('hello') : 5
asyncio.Runner(* : 1
debug=None : 1
loop_factory=None) : 1
*loop_factory* : 3
"asyncio.new_event_loop()" : 2
Basically : 1
asyncio.Runner() : 1
runner.run(main()) : 1
run(coro : 1
structures.Embedded : 1
"get_loop()" : 1
"Ctrl-C" : 6
"asyncio.Runner.run()" : 2
"try/except" : 1
"try/finally" : 2
SML : 2
recast : 1
standardizes : 1
"iterator : 1
algebra" : 1
tabulation : 1
tool: : 1
"tabulate(f)" : 1
"f(0) : 1
count())" : 2
high-speed : 1
dot-product: : 1
"sum(starmap(operator.mul : 1
zip(vec1 : 2
vec2 : 2
strict=True)))" : 1
**Infinite : 1
iterators:** : 2
+--------------------+-------------------+---------------------------------------------------+-------------------------------------------+ : 4
|====================|===================|===================================================|===========================================| : 1
[step] : 1
start+step : 1
start+2*step : 1
"count(10) : 1
"cycle()" : 1
p0 : 5
plast : 3
"cycle('ABCD') : 1
"repeat()" : 3
[,n] : 1
"repeat(10 : 1
10" : 1
**Iterators : 1
sequence:** : 1
+------------------------------+------------------------------+---------------------------------------------------+---------------------------------------------------------------+ : 14
|==============================|==============================|===================================================|===============================================================| : 1
[,func] : 1
p0+p1 : 1
p0+p1+p2 : 1
"accumulate([1,2,3,4,5]) : 1
15" : 1
q0 : 2
q1 : 2
"chain('ABC' : 1
'DEF') : 2
F" : 3
"chain.from_iterable()" : 1
"chain.from_iterable(['ABC' : 1
'DEF']) : 2
(d[0] : 1
s[0]) : 1
(d[1] : 1
s[1]) : 1
"compress('ABCDEF' : 1
"dropwhile()" : 1
pred : 6
seq[n] : 1
seq[n+1] : 1
"dropwhile(lambda : 1
x<5 : 4
[1,4,6,4,1]) : 4
"filterfalse()" : 1
pred(elem) : 1
"filterfalse(lambda : 1
x%2 : 2
iterable[ : 8
key] : 1
sub-iterators : 1
key(v) : 1
[start,] : 1
step] : 1
seq[start:stop:step] : 1
"islice('ABCDEFG' : 1
G" : 1
"pairwise()" : 2
(p[0] : 2
p[1]) : 1
(p[1] : 2
p[2]) : 1
"pairwise('ABCDEFG') : 1
DE : 2
EF : 2
FG" : 1
"starmap()" : 3
func(*seq[0]) : 1
func(*seq[1]) : 1
"starmap(pow : 1
[(2,5) : 2
(3,2) : 2
(10,3)]) : 2
1000" : 1
"takewhile()" : 1
seq[0] : 1
seq[1] : 1
"takewhile(lambda : 1
it1 : 1
it2 : 1
itn : 1
"zip_longest()" : 2
q[0]) : 1
q[1]) : 1
"zip_longest('ABCD' : 1
'xy' : 2
fillvalue='-') : 2
Ax : 3
C- : 3
D-" : 1
**Combinatoric : 1
+------------------------------------------------+----------------------+---------------------------------------------------------------+ : 5
|================================================|======================|===============================================================| : 1
"product()" : 4
[repeat=1] : 1
cartesian : 1
"permutations()" : 3
p[ : 1
r] : 1
r-length : 3
"combinations_with_replacement()" : 2
+------------------------------------------------+---------------------------------------------------------------+ : 5
|================================================|===============================================================| : 1
"product('ABCD' : 1
repeat=2)" : 1
"AA : 2
AD : 6
BA : 3
BD : 6
CB : 3
DA : 3
DD" : 2
"permutations('ABCD' : 1
"AB : 2
DC" : 1
"combinations('ABCD' : 1
CD" : 1
"combinations_with_replacement('ABCD' : 1
itertools.accumulate(iterable[ : 1
initial=None]) : 1
addable : 1
"Fraction".) : 1
accumulate(iterable : 1
func=operator.add : 1
initial=None): : 1
totals' : 1
accumulate([1,2,3,4,5]) : 1
accumulate([1,2,3,4,5] : 2
initial=100) : 1
115 : 1
func(total : 1
element) : 3
"operator.mul()" : 1
Amortization : 1
accumulating : 1
payments: : 1
list(accumulate(data : 2
operator.mul)) : 1
1296 : 1
max)) : 1
Amortize : 1
loan : 1
payments : 1
cashflows : 1
-90 : 3
-90] : 1
list(accumulate(cashflows : 1
bal : 1
pmt: : 1
bal*1.05 : 1
pmt)) : 1
960.0 : 1
918.0 : 1
873.9000000000001 : 1
827.5950000000001] : 1
itertools.chain(*iterables) : 1
chain(*iterables): : 1
chain('ABC' : 1
chain.from_iterable(iterable) : 1
from_iterable(iterables): : 1
chain.from_iterable(['ABC' : 1
lexicographic : 4
combinations(iterable : 2
combinations('ABCD' : 1
combinations(range(4) : 1
012 : 6
013 : 1
023 : 1
list(range(r)) : 1
reversed(range(r)): : 3
indices[i] : 5
range(i+1 : 1
indices[j] : 1
indices[j-1] : 1
pool): : 3
permutations(range(n) : 1
sorted(indices) : 2
list(indices): : 2
(n-r)!" : 2
itertools.combinations_with_replacement(iterable : 1
combinations_with_replacement(iterable : 2
indices[i:] : 2
[indices[i] : 1
(r : 1
product(range(n) : 2
repeat=r): : 2
"(n+r-1) : 1
(n-1)!" : 1
itertools.compress(data : 1
selectors) : 2
Stops : 4
compress(data : 1
selectors): : 1
compress('ABCDEF' : 1
zip(data : 1
itertools.count(start=0 : 1
step=1) : 3
count(start=0 : 1
step=1): : 1
count(10) : 1
count(2.5 : 1
itertools.cycle(iterable) : 1
Repeats : 1
cycle(iterable): : 1
cycle('ABCD') : 1
saved.append(element) : 1
saved: : 2
itertools.dropwhile(predicate : 1
dropwhile(predicate : 1
dropwhile(lambda : 1
predicate(x): : 3
itertools.filterfalse(predicate : 1
filterfalse(predicate : 1
filterfalse(lambda : 1
itertools.groupby(iterable : 1
SQL's : 1
GROUP : 1
aggregates : 4
uniquekeys : 1
key=keyfunc) : 1
groupby(data : 1
keyfunc): : 1
groups.append(list(g)) : 1
uniquekeys.append(k) : 1
groupby: : 1
groupby('AAAABBBCCDAABBB')] : 1
[list(g) : 1
groupby('AAAABBBCCD')] : 1
AAAA : 1
BBB : 1
key=None): : 3
self.keyfunc : 1
self.it : 1
self.tgtkey : 2
self.currkey : 6
self.currvalue : 4
self.id : 2
self.tgtkey: : 1
next(self.it) : 2
self.keyfunc(self.currvalue) : 2
(self.currkey : 1
self._grouper(self.tgtkey : 1
self.id)) : 1
_grouper(self : 1
tgtkey : 1
id): : 1
tgtkey: : 1
Afterward : 2
consecutively : 1
islice(iterable : 2
islice('ABCDEFG' : 4
slice(*args) : 1
s.step : 1
iter(range(start : 1
step)) : 1
nexti : 2
zip(range(start) : 1
enumerate(iterable): : 1
nexti: : 1
zip(range(i : 1
itertools.pairwise(iterable) : 1
pairwise(iterable): : 1
pairwise('ABCDEFG') : 1
FG : 1
tee(iterable) : 3
next(b : 1
zip(a : 1
r=None) : 1
full-length : 1
permutations(iterable : 2
permutations('ABCD' : 1
permutations(range(3)) : 1
021 : 1
201 : 2
210 : 1
list(range(n)) : 1
list(range(n : 1
n-r : 1
indices[:r]) : 2
cycles[i] : 4
indices[i+1:] : 1
indices[i:i+1] : 1
indices[-j] : 2
len(set(indices)) : 1
itertools.product(*iterables : 1
repeat=1) : 1
for-loops : 2
"product(A : 3
"((x,y) : 1
odometer : 1
input's : 1
repeat=4)" : 1
product(*args : 1
product('ABCD' : 1
'xy') : 1
Ay : 1
Bx : 1
Cx : 1
Cy : 1
Dx : 1
Dy : 1
product(range(2) : 1
repeat=3) : 1
000 : 1
001 : 2
010 : 1
011 : 1
[[]] : 2
pools: : 1
[x+[y] : 1
pool] : 1
prod : 1
tuple(prod) : 1
itertools.repeat(object[ : 1
times]) : 1
repeat(object : 1
times=None): : 1
repeat(10 : 1
range(times): : 1
list(map(pow : 1
repeat(2))) : 1
itertools.starmap(function : 1
"pre-zipped") : 1
"function(a,b)" : 1
"function(*c)" : 1
starmap(function : 1
starmap(pow : 1
function(*args) : 1
itertools.takewhile(predicate : 1
takewhile(predicate : 1
takewhile(lambda : 1
itertools.tee(iterable : 1
n=2) : 1
*tee* : 1
tee(iterable : 1
n=2): : 1
[collections.deque() : 1
range(n)] : 1
gen(mydeque): : 1
mydeque: : 1
newval : 1
deques: : 1
d.append(newval) : 1
mydeque.popleft() : 1
tuple(gen(d) : 1
deques) : 1
else; : 1
informed : 1
"tee" : 1
itertool : 1
itertools.zip_longest(*iterables : 1
fillvalue=None) : 1
zip_longest(*args : 2
fillvalue=None): : 2
zip_longest('ABCD' : 1
D- : 1
[iter(it) : 1
num_active : 4
len(iterators) : 1
num_active: : 3
enumerate(iterators): : 1
iterators[i] : 1
repeat(fillvalue) : 1
fillvalue : 1
values.append(value) : 1
tuple(values) : 1
"takewhile()") : 1
educational : 1
"chain.from_iterable" : 1
incubator : 1
"iter_index()" : 1
Substantially : 1
more-itertools : 2
Superior : 1
preferring : 1
"vectorized" : 1
take(n : 1
list(islice(iterable : 1
n)) : 3
prepend(value : 1
iterator): : 1
"Prepend : 1
prepend(1 : 1
chain([value] : 1
tabulate(function : 1
start=0): : 3
function(0) : 1
function(1) : 1
map(function : 2
count(start)) : 1
tail(n : 1
tail(3 : 1
'ABCDEFG') : 1
iter(collections.deque(iterable : 1
maxlen=n)) : 1
consume(iterator : 1
n=None): : 1
"Advance : 1
n-steps : 1
entirely." : 1
collections.deque(iterator : 1
maxlen=0) : 1
next(islice(iterator : 1
nth(iterable : 1
default=None): : 1
next(islice(iterable : 1
all_equal(iterable): : 1
groupby(iterable) : 1
quantify(iterable : 1
pred=bool): : 1
"Count : 1
sum(map(pred : 1
iterable)) : 1
ncycles(iterable : 1
times" : 1
chain.from_iterable(repeat(tuple(iterable) : 1
batched(iterable : 1
"Batch : 1
shorter." : 1
batched('ABCDEFG' : 1
DEF : 5
ValueError('n : 1
one') : 1
tuple(islice(it : 1
n)): : 1
grouper(iterable : 1
incomplete='fill' : 1
"Collect : 1
blocks" : 1
grouper('ABCDEFG' : 3
fillvalue='x') : 1
Gxx : 1
incomplete='strict') : 1
incomplete='ignore') : 1
[iter(iterable)] : 1
'fill': : 1
fillvalue=fillvalue) : 1
'strict': : 1
zip(*args : 1
'ignore': : 1
zip(*args) : 1
ValueError('Expected : 1
ignore') : 1
sumprod(vec1 : 1
vec2): : 1
products." : 1
sum(starmap(operator.mul : 1
strict=True))) : 1
sum_of_squares(it): : 1
sum_of_squares([10 : 1
1400 : 1
sumprod(*tee(it)) : 1
transpose(it): : 1
"Swap : 1
input." : 1
transpose([(1 : 1
33)]) : 1
33) : 1
zip(*it : 1
matmul(m1 : 1
m2): : 1
"Multiply : 1
matrices." : 1
matmul([(7 : 1
[[2 : 1
9]]) : 1
(49 : 1
(41 : 1
len(m2[0]) : 1
batched(starmap(sumprod : 1
product(m1 : 1
transpose(m2))) : 1
convolve(signal : 1
kernel): : 1
See: : 1
https://betterexplained.com/articles/intuitive-convolution/ : 1
convolve(data : 3
[0.25 : 1
0.25]) : 1
Moving : 1
(blur) : 1
-1]) : 1
(1st : 1
derivative) : 2
(2nd : 3
tuple(kernel)[::-1] : 1
len(kernel) : 1
collections.deque([0] : 1
maxlen=n) : 2
chain(signal : 1
repeat(0 : 1
n-1)): : 1
window.append(x) : 2
sumprod(kernel : 1
window) : 2
polynomial_from_roots(roots): : 1
"""Compute : 5
polynomial's : 1
x³ : 2
-4x² : 2
-17x : 2
polynomial_from_roots([5 : 1
-17 : 2
roots: : 1
convolve(expansion : 1
-r)) : 1
list(expansion) : 1
polynomial_eval(coefficients : 1
"""Evaluate : 1
polynomial : 3
Horner's : 1
polynomial_eval([1 : 1
x=2.5) : 1
8.125 : 1
len(coefficients) : 1
map(pow : 1
repeat(x) : 1
reversed(range(n))) : 1
sumprod(coefficients : 1
powers) : 1
iter_index(iterable : 1
iter_index('AABCADEAF' : 1
seq_index : 1
iterable.index : 1
Slow : 2
operator.indexOf(it : 1
seq_index(value : 1
i+1)) : 1
sieve(n): : 1
"Primes : 1
sieve(30) : 1
bytearray((0 : 1
data[:3] : 2
math.isqrt(n) : 2
compress(range(limit) : 1
data[p*p : 1
p+p] : 1
bytes(len(range(p*p : 1
p+p))) : 1
data[2] : 1
iter_index(data : 1
iter([]) : 1
factor(n): : 1
"Prime : 1
n." : 1
factor(99) : 1
sieve(math.isqrt(n) : 1
divmod(n : 1
prime) : 1
remainder: : 2
flatten(list_of_lists): : 1
"Flatten : 1
nesting" : 1
chain.from_iterable(list_of_lists) : 1
repeatfunc(func : 1
"""Repeat : 1
repeatfunc(random.random) : 1
starmap(func : 3
repeat(args)) : 1
repeat(args : 1
times)) : 1
triplewise(iterable): : 1
triplewise('ABCDEFG') : 1
BCD : 2
CDE : 1
EFG : 1
_) : 1
pairwise(pairwise(iterable)): : 1
sliding_window(iterable : 1
sliding_window('ABCDEFG' : 1
ABCD : 2
BCDE : 1
CDEF : 1
DEFG : 1
collections.deque(islice(it : 1
len(window) : 1
tuple(window) : 2
credited : 1
Sakkis : 1
len(iterables) : 1
nexts : 2
cycle(iter(it).__next__ : 1
nexts: : 1
next() : 1
cycle(islice(nexts : 1
num_active)) : 1
partition(pred : 1
entries" : 1
partition(is_odd : 1
t1 : 8
t2 : 13
filterfalse(pred : 1
t1) : 2
filter(pred : 2
t2) : 1
before_and_after(predicate : 1
it): : 1
takewhile() : 2
iter('ABCdEfGhI') : 1
all_upper : 1
before_and_after(str.isupper : 1
''.join(all_upper) : 1
''.join(remainder) : 1
'dEfGhI' : 1
iter(it) : 1
true_iterator(): : 1
predicate(elem): : 1
transition.append(elem) : 1
remainder_iterator(): : 1
true_iterator() : 1
remainder_iterator() : 1
subslices(seq): : 1
subslices : 1
sequence" : 1
subslices('ABCD') : 1
starmap(slice : 1
combinations(range(len(seq) : 1
map(operator.getitem : 1
repeat(seq) : 1
powerset(iterable): : 1
"powerset([1,2,3]) : 1
(2,) : 1
(1,3) : 1
(1,2,3)" : 1
chain.from_iterable(combinations(s : 1
range(len(s)+1)) : 1
unique_everseen(iterable : 1
"List : 2
seen." : 2
unique_everseen('AAAABBBCCDAABBB') : 1
unique_everseen('ABBcCAD' : 1
str.lower) : 2
filterfalse(seen.__contains__ : 1
seen.add(element) : 1
deduplication : 1
non-lazy : 2
dict.fromkeys(iterable) : 1
key(element) : 1
seen.add(k) : 1
dict(zip(map(key : 1
t2)).values() : 1
unique_justseen(iterable : 1
unique_justseen('AAAABBBCCDAABBB') : 1
unique_justseen('ABBcCAD' : 1
map(next : 1
groupby(iterable : 1
key))) : 1
iter_except(func : 1
first=None): : 1
call-until-exception : 1
builtins.iter(func : 1
sentinel) : 2
iter_except(functools.partial(heappop : 1
IndexError) : 2
iter_except(d.popitem : 1
KeyError) : 2
iter_except(d.popleft : 1
iter_except(q.get_nowait : 1
Queue.Empty) : 1
iter_except(s.pop : 1
first() : 1
db.first() : 1
first_true(iterable : 1
default=False : 11
pred=None): : 1
"""Returns : 1
*pred* : 1
pred(item) : 1
first_true([a,b,c] : 1
first_true([a,b] : 1
f(a) : 1
f(b) : 1
next(filter(pred : 1
nth_combination(iterable : 1
"Equivalent : 1
list(combinations(iterable : 1
r))[index]" : 1
math.comb(n : 2
c*r//n : 1
n-1 : 3
r-1 : 1
c*(n-r)//n : 1
result.append(pool[-1-n]) : 1
tuple(result) : 1
URI) : 2
Lib/queue.py : 1
multi-producer : 1
multi-consumer : 2
(operating : 1
stack) : 1
queue.Queue(maxsize=0) : 1
upperbound : 3
Insertion : 3
queue.LifoQueue(maxsize=0) : 1
queue.PriorityQueue(maxsize=0) : 1
"min(entries)") : 1
@dataclass(order=True) : 2
PrioritizedItem: : 2
Any=field(compare=False) : 2
queue.Empty : 1
"get_nowait()") : 1
queue.Full : 1
"put_nowait()") : 1
("Queue" : 1
"PriorityQueue") : 1
Queue.qsize() : 1
Queue.empty() : 1
Queue.full() : 1
Queue.put(item : 1
block=True : 2
"Full" : 2
(*block* : 4
Queue.put_nowait(item) : 1
"put(item : 2
block=False)" : 2
Queue.get(block=True : 1
"Empty" : 4
uninterruptible : 1
Queue.get_nowait() : 1
"get(False)" : 3
Queue.task_done() : 1
Queue.join() : 1
print(f'Working : 1
{item}') : 2
print(f'Finished : 1
q.task_done() : 1
Turn-on : 1
daemon=True).start() : 1
thirty : 1
range(30): : 1
q.put(item) : 1
q.join() : 1
print('All : 1
completed') : 1
SimpleQueue.qsize() : 1
SimpleQueue.put(item : 1
"Queue.put()" : 1
SimpleQueue.put_nowait(item) : 1
"Queue.put_nowait()" : 1
SimpleQueue.get(block=True : 1
SimpleQueue.get_nowait() : 1
multi-processing : 1
threading) : 1
Lib/xml/ : 1
defusedxml : 3
SAX-compliant : 1
"xml.etree.ElementTree": : 1
"xml.dom": : 1
"xml.dom.pulldom": : 1
"xml.sax": : 1
"xml.parsers.expat": : 1
+---------------------------+--------------------+--------------------+--------------------+--------------------+--------------------+ : 6
etree : 1
|===========================|====================|====================|====================|====================|====================| : 1
billion : 2
laughs : 2
**Vulnerable** : 11
blowup : 3
bomb : 2
"billion : 1
laughs" : 1
"quadratic : 1
blowup" : 1
"pyexpat.EXPAT_VERSION" : 1
unexpanded : 1
Billion : 2
Laughs : 2
attack; : 1
abuses : 1
countermeasures : 1
bomb) : 2
LZMA-compressed : 3
magnitudes : 1
Lib/enum.py : 1
non-alias) : 1
*call* : 1
Enum('Color' : 1
'BLUE']) : 1
Nomenclature : 1
"Color" : 1
*enumeration* : 1
*enum*) : 1
"Color.GREEN" : 1
*enumeration : 1
members* : 1
*members*) : 1
"RED" : 1
"Color.BLUE" : 1
(Notes) : 3
"CONTINUOUS" : 1
"NAMED_FLAGS" : 1
"UNIQUE" : 1
"show_flag_values()" : 1
"global_enum" : 1
"show_flag_values" : 1
enum.EnumType : 1
*EnumType* : 3
*enum* : 3
__call__(cls : 1
names=None : 1
module=None : 3
qualname=None : 1
boundary=None) : 1
members): : 1
names/values : 1
"auto") : 1
("Flag" : 1
__contains__(cls : 1
"cls": : 1
some_var : 2
non-Enum-member : 1
__dir__(cls) : 1
"['__class__' : 2
'__module__']" : 1
*cls*: : 2
dir(Color) : 1
['BLUE' : 1
'__init_subclass__' : 1
'__qualname__'] : 1
__getattr__(cls : 1
__getitem__(cls : 1
Color['BLUE'] : 1
__iter__(cls) : 1
__len__(cls) : 1
len(Color) : 1
__reversed__(cls) : 1
list(reversed(Color)) : 1
[<Color.BLUE: : 1
1>] : 2
*Enum* : 9
Color.BLUE.name : 1
Color.RED.value : 1
valuesMember : 1
__dir__(self) : 1
'value']" : 1
*self.__class__*: : 1
today(cls): : 1
print('today : 1
cls(date.today().isoweekday()).name) : 1
dir(Weekday.SATURDAY) : 1
'today' : 1
last_values) : 1
'RED') : 1
Enum; : 1
last_values: : 1
*staticmethod* : 1
PowersOfThree(Enum): : 1
FIRST : 1
SECOND : 4
PowersOfThree.SECOND.value : 1
*classmethod* : 2
_missing_(cls : 2
Build(StrEnum): : 1
value.lower() : 1
Build.DEBUG.value : 1
'debug' : 1
Build('deBUG') : 1
<Build.DEBUG: : 1
'debug'> : 1
*repr()* : 3
OtherStyle(Enum): : 3
ALTERNATE : 3
SOMETHING_ELSE : 3
cls_name : 1
self.__class__.__name__ : 1
f'{cls_name}.{self.name}' : 1
OtherStyle.ALTERNATE : 3
str(OtherStyle.ALTERNATE) : 3
f"{OtherStyle.ALTERNATE}" : 3
(OtherStyle.ALTERNATE : 1
'OtherStyle.ALTERNATE' : 2
'OtherStyle.ALTERNATE') : 1
__str__(self) : 1
*str()* : 1
f'{self.name}' : 2
(<OtherStyle.ALTERNATE: : 2
'ALTERNATE' : 1
'ALTERNATE') : 2
__format__(self) : 1
*format()* : 1
spec): : 1
enum.IntEnum : 1
*IntEnum* : 3
Numbers(IntEnum): : 1
Numbers.THREE : 3
<Numbers.THREE: : 1
Numbers.ONE : 1
Numbers.TWO : 1
"int.__str__()" : 3
*replacement : 3
constants* : 3
"int.__format__()" : 2
enum.StrEnum : 1
*StrEnum* : 3
"type(unknown) : 1
"isinstance(unknown : 1
str)") : 1
"str(StrEnum.member)" : 1
"str.__str__()" : 2
"str.__format__()" : 1
enum.Flag : 1
*Flag* : 8
(*AND*) : 1
(*OR*) : 1
(*XOR*) : 1
(*INVERT*); : 1
*True* : 2
non-alias : 1
list(Color.RED) : 1
len(Color.GREEN) : 1
len(white) : 1
*False* : 1
otherwise: : 2
bool(Color.GREEN) : 1
bool(white) : 1
bool(black) : 1
__or__(self : 2
or'ed : 1
__and__(self : 1
and'ed : 1
<Color.RED|BLUE: : 1
__xor__(self : 1
xor'ed : 1
__invert__(self): : 1
*type(self)* : 1
~white : 1
~purple : 1
_numeric_repr_() : 1
repr; : 1
now:: : 1
enum.IntFlag : 1
*IntFlag* : 5
*IntFlag*: : 3
*FlagBoundary* : 2
reason.Inversion : 1
enum.ReprEnum : 1
"Enum"-default : 1
enum.EnumCheck : 1
*EnumCheck* : 1
constraints; : 2
UNIQUE : 2
@verify(UNIQUE) : 1
CRIMSON : 2
'Color'>: : 1
CONTINUOUS : 3
lowest- : 1
highest-valued : 1
@verify(CONTINUOUS) : 1
'Color': : 2
NAMED_FLAGS : 3
groups/masks : 1
"auto()": : 1
@verify(NAMED_FLAGS) : 1
NEON : 2
0x18 : 1
[use : 1
enum.show_flag_values(value) : 2
details] : 1
enum.FlagBoundary : 1
StrictFlag(Flag : 1
boundary=STRICT): : 1
StrictFlag(2**2 : 1
2**4) : 4
<flag : 1
'StrictFlag'> : 1
0b0 : 2
10100 : 1
00111 : 1
"Flag": : 1
ConformFlag(Flag : 1
boundary=CONFORM): : 1
ConformFlag(2**2 : 1
<ConformFlag.BLUE: : 1
EjectFlag(Flag : 1
boundary=EJECT): : 1
EjectFlag(2**2 : 1
"IntFlag": : 1
KeepFlag(Flag : 1
boundary=KEEP): : 1
KeepFlag(2**2 : 1
<KeepFlag.BLUE|16: : 1
20> : 1
enum.auto : 1
*auto* : 3
*Enum*'s : 1
*auto()* : 1
"FIRST : 1
auto()" : 1
(auto() : 1
"1"); : 1
"SECOND : 1
-2" : 2
(auto : 1
"SECOND" : 1
"THREE : 1
[auto() : 1
-3]" : 1
("<auto : 1
instance> : 1
-3" : 1
"THREE" : 1
@enum.property : 1
*property* : 3
@enum.unique : 1
enumeration's : 1
finds; : 1
@enum.verify : 1
@enum.member : 1
@enum.nonmember : 1
@enum.global_enum : 1
limitations: : 3
need/want : 1
MyIntEnum(int : 1
MyIntEnum(IntEnum): : 1
Enum.__str__ : 1
Lib/bz2.py : 1
"BZ2Compressor" : 3
"BZ2Decompressor" : 3
bz2.open(filename : 1
"BZ2File(filename : 1
compresslevel=compresslevel)" : 1
bz2.BZ2File(filename : 1
compresslevel=9) : 2
compression: : 4
peek([n]) : 1
*filename*) : 3
"read1()" : 1
opened.The : 1
bz2.BZ2Compressor(compresslevel=9) : 1
compress(data) : 2
bz2.BZ2Decompressor : 1
decompress(data : 2
max_length=- : 2
"needs_input" : 4
"unused_data" : 2
end-of-stream : 2
unused_data : 2
needs_input : 2
bz2.compress(data : 1
bz2.decompress(data) : 1
b"""\ : 2
Donec : 2
rhoncus : 2
quis : 2
sapien : 2
amet : 8
molestie : 2
Fusce : 2
scelerisque : 2
vel : 4
augue : 2
nec : 2
ullamcorper : 4
Nam : 4
rutrum : 4
pretium : 2
placerat : 2
Aliquam : 4
tristique : 2
lorem : 2
cursus : 2
ante : 2
interdum : 2
laoreet : 2
ultrices : 2
purus : 2
pulvinar : 2
gravida : 2
euismod : 2
magna : 2
varius : 2
justo : 2
tincidunt : 2
feugiat : 2
pharetra : 2
lacus : 2
risus : 2
vehicula : 2
Maecenas : 2
aliquam : 2
felis : 2
Pellentesque : 2
semper : 2
nunc : 2
nibh : 2
ac : 2
elementum : 2
dolor : 2
luctus : 2
Curabitur : 2
lacinia : 2
ornare : 2
consectetur : 2
vestibulum.""" : 2
bz2.compress(data) : 1
1.513595166163142 : 1
bz2.decompress(c) : 1
gen_data(chunks=10 : 1
chunksize=1000): : 1
chunksize : 2
bytes.""" : 1
range(chunks): : 1
b"z" : 1
comp : 1
bz2.BZ2Compressor() : 1
gen_data(): : 1
comp.compress(chunk) : 1
"nonrandom" : 1
"b"z"" : 1
chunks) : 1
bz2.open("myfile.bz2" : 2
Lib/tty.py : 1
tty.setraw(fd : 1
when=termios.TCSAFLUSH) : 2
"termios.TCSAFLUSH" : 2
"termios.tcsetattr()" : 2
tty.setcbreak(fd : 1
root) : 3
Shadow : 1
"<shadow.h>"): : 1
+---------+-----------------+-----------------------------------+ : 10
|=========|=================|===================================| : 1
"sp_namp" : 1
Login : 3
"sp_pwdp" : 1
Encrypted : 1
"sp_lstchg" : 1
"sp_min" : 1
"sp_max" : 1
"sp_warn" : 1
"sp_inact" : 1
"sp_expire" : 1
1970-01-01 : 1
"sp_flag" : 1
sp_namp : 1
sp_pwdp : 1
spwd.getspnam(name) : 1
spwd.getspall() : 1
Receiving : 1
math.ceil(x) : 1
"x.__ceil__" : 1
Evaluates : 2
(k : 2
k)!)" : 1
k-th : 1
x)ⁿ" : 1
math.copysign(x : 1
"copysign(1.0 : 1
*-1.0* : 1
math.fabs(x) : 1
math.factorial(n) : 1
Accepting : 1
math.floor(x) : 1
"x.__floor__" : 1
math.fmod(x : 1
"fmod(x : 2
(mathematically; : 1
precision) : 3
n*y" : 2
"abs(y)" : 1
"fmod(-1e-100 : 1
1e100)" : 1
"1e100-1e-100" : 1
"fmod()" : 1
math.frexp(x) : 1
"(m : 1
e)" : 1
2**e" : 1
"(0.0 : 1
"0.5 : 1
abs(m) : 1
"pick : 1
apart" : 1
math.fsum(iterable) : 1
sums: : 1
sum([.1 : 1
.1]) : 2
0.9999999999999999 : 1
fsum([.1 : 1
algorithm's : 2
half-even : 1
double-round : 1
math.gcd(*integers) : 1
greatest : 4
math.isfinite(x) : 1
finite.) : 1
math.isinf(x) : 1
math.isnan(x) : 1
*a*² : 2
isqrt(n : 1
math.lcm(*integers) : 1
"lcm()" : 1
math.ldexp(x : 1
(2**i)" : 1
"frexp()" : 2
math.modf(x) : 1
math.nextafter(x : 1
"math.nextafter(x : 4
math.inf)" : 2
down: : 1
math.copysign(math.inf : 1
x))" : 1
k=None) : 1
k)!" : 1
"n!" : 1
math.prod(iterable : 1
start=1) : 1
math.remainder(x : 1
remainder(x : 2
satisfies : 2
"abs(r) : 1
754: : 1
"remainder(x : 2
"remainder(math.inf : 1
non-NaN : 1
representable: : 1
math.trunc(x) : 1
"x.__trunc__" : 1
math.ulp(x) : 1
*x*: : 1
"ulp(-x)" : 1
"sys.float_info.min") : 1
ulp(x)" : 2
(*x* : 1
ULP : 1
"Unit : 1
Place" : 1
"sys.float_info.epsilon" : 1
"modf()" : 2
equivalents: : 2
'output : 1
parameter' : 1
"abs(x) : 1
math.cbrt(x) : 1
math.exp(x) : 1
2.718281.. : 1
"math.e : 1
"pow(math.e : 1
math.exp2(x) : 1
*2* : 1
math.expm1(x) : 1
"exp(x) : 1
precision; : 1
exp : 5
exp(1e-5) : 1
1.0000050000069649e-05 : 1
expm1(1e-5) : 1
1.0000050000166668e-05 : 1
math.log(x[ : 1
"log(x)/log(base)" : 1
math.log1p(x) : 1
math.log2(x) : 1
"log(x : 2
"int.bit_length()" : 1
math.log10(x) : 1
math.pow(x : 1
Exceptional : 1
"pow(1.0 : 1
"pow(0.0 : 1
-inf)" : 2
"pow(-0.0 : 1
math.sqrt(x) : 1
math.acos(x) : 1
"pi" : 4
math.asin(x) : 1
"-pi/2" : 2
"pi/2" : 2
math.atan(x) : 1
math.atan2(y : 1
"atan(y : 1
"-pi" : 1
plane : 2
"atan2()" : 1
quadrant : 1
"atan(1)" : 1
"atan2(1 : 1
"pi/4" : 1
"atan2(-1 : 1
"-3*pi/4" : 1
math.cos(x) : 1
math.dist(p : 1
*q* : 3
sqrt(sum((px : 1
qx) : 1
px : 1
qx : 1
q))) : 1
math.hypot(*coordinates) : 1
"sqrt(sum(x**2 : 1
coordinates))" : 1
hypotenuse : 1
triangle : 1
Pythagorean : 1
theorem : 1
"sqrt(x*x : 1
y*y)" : 1
ulp : 2
1/2 : 1
math.sin(x) : 1
math.tan(x) : 1
math.degrees(x) : 1
math.radians(x) : 1
hyperbolas : 1
circles : 1
math.acosh(x) : 1
math.asinh(x) : 1
math.atanh(x) : 1
math.cosh(x) : 1
math.sinh(x) : 1
math.tanh(x) : 1
math.erf(x) : 1
phi(x): : 1
'Cumulative : 1
distribution' : 1
erf(x : 1
sqrt(2.0))) : 1
math.erfc(x) : 1
erf(x)" : 1
math.gamma(x) : 1
math.lgamma(x) : 1
math.pi : 1
3.141592... : 1
math.e : 1
2.718281... : 1
math.tau : 1
6.283185... : 1
Tau : 3
circle : 16
2*π* : 1
circle's : 1
circumference : 1
Vi : 1
Hart's : 1
Pi : 2
(still) : 1
celebrating : 1
pie : 1
"-math.inf".) : 1
float('nan') : 2
math.isnan(math.nan) : 1
math.isnan(float('nan')) : 1
"sqrt(-1.0)" : 1
"log(0.0)" : 1
divide-by-zero) : 1
"exp(1000.0)") : 1
NaN; : 3
F) : 1
"pow(float('nan') : 1
"hypot(float('nan') : 1
Lib/http/cookies.py : 1
abstracting : 2
string-only : 1
2068** : 1
3.0x : 1
"string.digits" : 1
"!#$%&'*+-.^_`|~:" : 2
"key") : 1
"CookieError" : 2
http.cookies.CookieError : 1
invalidity: : 1
http.cookies.BaseCookie([input]) : 1
http.cookies.SimpleCookie([input]) : 1
"BaseCookie" : 3
"value_decode()" : 2
"value_encode()" : 2
SimpleCookie : 2
*clients* : 1
BaseCookie.value_decode(val) : 1
"(real_value : 2
coded_value)" : 2
"real_value" : 1
BaseCookie.value_encode(val) : 1
*value_decode* : 1
BaseCookie.output(attrs=None : 1
header='Set-Cookie:' : 1
sep='\r\n') : 1
"Morsel"'s : 1
"output()" : 4
(CRLF) : 1
BaseCookie.js_output(attrs=None) : 1
BaseCookie.load(rawdata) : 1
*rawdata* : 1
"HTTP_COOKIE" : 1
"Morsel"s : 1
rawdata.items(): : 1
cookie[k] : 1
Morsels : 1
"comment" : 4
"secure" : 1
"samesite" : 3
cross-site : 2
CSRF : 1
"Strict" : 1
"Lax" : 1
Morsel.value : 1
Morsel.coded_value : 1
Morsel.key : 1
Morsel.set(key : 1
coded_value) : 1
*coded_value* : 1
Morsel.isReservedKey(K) : 1
*K* : 2
Morsel.output(attrs=None : 1
header='Set-Cookie:') : 1
""Set-Cookie:"" : 1
Morsel.js_output(attrs=None) : 1
Morsel.OutputString(attrs=None) : 1
Morsel.update(values) : 1
Morsel.copy(value) : 1
Morsel.setdefault(key : 1
value=None) : 3
cookies.SimpleCookie() : 7
C["fig"] : 1
"newton" : 1
C["sugar"] : 1
"wafer" : 1
print(C) : 5
fig=newton : 2
sugar=wafer : 2
print(C.output()) : 1
C["rocky"] : 1
"road" : 1
C["rocky"]["path"] : 1
"/cookie" : 1
print(C.output(header="Cookie:")) : 1
Cookie: : 2
rocky=road; : 1
Path=/cookie : 1
print(C.output(attrs=[] : 1
header="Cookie:")) : 1
rocky=road : 1
C.load("chips=ahoy; : 1
vienna=finger") : 1
chips=ahoy : 1
vienna=finger : 1
C.load('keebler="E=everybody; : 1
L=\\"Loves\\"; : 1
fudge=\\012;";') : 1
keebler="E=everybody; : 1
L=\"Loves\"; : 1
fudge=\012;" : 1
C["oreo"] : 1
"doublestuff" : 1
C["oreo"]["path"] : 1
oreo=doublestuff; : 1
Path=/ : 1
C["twix"] : 1
"none : 1
you" : 1
C["twix"].value : 1
'none : 1
you' : 2
C["number"] : 2
str(7) : 1
C["string"] : 1
"seven" : 1
C["number"].value : 1
C["string"].value : 1
'seven' : 1
number=7 : 1
string=seven : 1
Lib/stringprep.py : 1
identifications : 3
"equality" : 1
"printable" : 1
3454** : 2
"preparing" : 1
"nameprep" : 1
"mkstringprep.py" : 1
RFC: : 1
"characteristic : 1
stringprep.in_table_a1(code) : 1
tableA.1 : 1
(Unassigned : 1
stringprep.in_table_b1(code) : 1
tableB.1 : 1
(Commonly : 1
nothing) : 2
stringprep.map_table_b2(code) : 1
tableB.2 : 1
(Mapping : 2
NFKC) : 1
stringprep.map_table_b3(code) : 1
tableB.3 : 1
stringprep.in_table_c11(code) : 1
tableC.1.1 : 1
stringprep.in_table_c12(code) : 1
tableC.1.2 : 1
(Non-ASCII : 2
stringprep.in_table_c11_c12(code) : 1
tableC.1 : 1
(Space : 1
C.1.1 : 1
C.1.2) : 1
stringprep.in_table_c21(code) : 1
tableC.2.1 : 1
stringprep.in_table_c22(code) : 1
tableC.2.2 : 1
stringprep.in_table_c21_c22(code) : 1
tableC.2 : 1
(Control : 1
C.2.1 : 1
C.2.2) : 1
stringprep.in_table_c3(code) : 1
tableC.3 : 1
(Private : 1
stringprep.in_table_c4(code) : 1
tableC.4 : 1
(Non-character : 1
stringprep.in_table_c5(code) : 1
tableC.5 : 1
(Surrogate : 1
codes) : 1
stringprep.in_table_c6(code) : 1
tableC.6 : 1
(Inappropriate : 2
stringprep.in_table_c7(code) : 1
tableC.7 : 1
representation) : 1
stringprep.in_table_c8(code) : 1
tableC.8 : 1
stringprep.in_table_c9(code) : 1
tableC.9 : 1
(Tagging : 1
stringprep.in_table_d1(code) : 1
tableD.1 : 1
(Characters : 2
"AL") : 1
stringprep.in_table_d2(code) : 1
tableD.2 : 1
"L") : 3
Lib/string.py : 1
string.ascii_letters : 3
string.ascii_lowercase : 2
"'abcdefghijklmnopqrstuvwxyz'" : 1
string.ascii_uppercase : 1
"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" : 1
string.digits : 4
"'0123456789'" : 1
string.hexdigits : 1
"'0123456789abcdefABCDEF'" : 1
string.octdigits : 1
"'01234567'" : 1
string.punctuation : 1
locale: : 1
"!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~" : 1
string.printable : 1
"punctuation" : 1
"whitespace" : 1
string.whitespace : 1
format(format_string : 1
"vformat()" : 5
vformat(format_string : 1
repacking : 1
parse(format_string) : 1
format_string : 1
(*literal_text* : 1
*field_name* : 6
*conversion*) : 1
consecutively) : 1
*literal_text* : 1
*conversion* : 3
get_field(field_name : 1
used_key) : 1
"0[name]" : 1
"label.title" : 1
*used_key* : 1
"get_value()" : 3
get_value(key : 1
'0.name' : 1
check_unused_args(used_args : 1
vformat : 1
"check_unused_args()" : 1
format_field(value : 1
"format_field()" : 1
convert_field(value : 1
"get_field()") : 1
(repr) : 1
(ascii) : 1
"replacement : 1
fields" : 1
doubling: : 1
[field_name] : 1
field_name : 1
arg_name : 2
attribute_name : 2
element_index : 2
"]")* : 1
digit+] : 1
digit+ : 3
index_string : 2
"]"> : 1
<described : 1
section> : 1
*arg_name* : 3
arg_names : 1
some) : 1
quote-delimited : 1
"'10'" : 1
"':-]'") : 1
"'.name'" : 1
"'[index]'" : 1
"'{} : 1
{}'.format(a : 1
"'{0} : 1
{1}'.format(a : 1
{0}" : 1
"Bring : 2
{1}" : 1
"My : 1
{name}" : 1
"Weight : 1
tons : 1
{0.weight}" : 1
'weight' : 1
"Units : 1
destroyed: : 1
{players[0]}" : 1
'players' : 1
"Harold's : 1
{0!s}" : 1
{name!r}" : 1
"More : 1
{!a}" : 1
ascii() : 1
"formatting : 1
mini-language" : 1
"Format : 1
specifications" : 1
formattable : 1
*standard : 1
specifier* : 1
[[fill]align][sign]["z"]["#"]["0"][width][grouping_option]["." : 1
precision][type] : 1
grouping_option : 1
"G" : 1
*fill* : 3
(""{"" : 1
""}"") : 1
+-----------+------------------------------------------------------------+ : 31
|===========|============================================================| : 5
Forces : 4
left-aligned : 1
'+000000120' : 1
*sign* : 1
682**) : 1
"alternate : 3
"'0X'" : 4
decimal- : 2
378**) : 1
515**) : 1
("'0'") : 1
sign-aware : 1
zero-padding : 1
*alignment* : 1
Preceding : 1
Fixed-point : 2
"INF" : 1
"p-1" : 2
"exp" : 1
"m : 3
"Decimals" : 1
"p-1-exp" : 1
"1e-6" : 1
nans : 1
"-0" : 4
("'f'") : 1
"context.capitals" : 1
"%"-formatting : 2
"'%03.2f'" : 1
"'{:03.2f}'" : 1
position: : 4
'{0} : 1
{2}'.format('a' : 1
'{} : 1
{}'.format('a' : 1
3.1+ : 1
'{2} : 2
{0}'.format('a' : 1
'c : 2
a' : 2
{0}'.format(*'abc') : 1
'{0}{1}{0}'.format('abra' : 1
'cad') : 1
'Coordinates: : 4
{latitude} : 2
{longitude}'.format(latitude='37.24N' : 1
longitude='-115.81W') : 1
37.24N : 2
-115.81W' : 2
coord : 2
{'latitude': : 1
'37.24N' : 1
'longitude': : 1
'-115.81W'} : 1
{longitude}'.format(**coord) : 1
3-5j : 1
('The : 1
{0.real} : 1
{0.imag}.').format(c) : 1
(3-5j) : 1
-5.0.' : 1
'Point({self.x} : 1
{self.y})'.format(self=self) : 1
str(Point(4 : 1
'Point(4 : 1
2)' : 1
'X: : 2
{0[0]}; : 1
{0[1]}'.format(coord) : 1
5' : 1
"%r": : 1
"repr() : 2
{!r}; : 1
doesn't: : 2
{!s}".format('test1' : 1
'test2') : 1
'test1'; : 1
test2" : 1
Aligning : 1
'{:<30}'.format('left : 1
aligned') : 2
'left : 1
'{:>30}'.format('right : 1
aligned' : 1
'{:^30}'.format('centered') : 1
'{:*^30}'.format('centered') : 1
'***********centered***********' : 1
"%+f" : 1
"%-f" : 1
"% : 1
sign: : 2
'{:+f}; : 1
{:+f}'.format(3.14 : 1
-3.14) : 3
'+3.140000; : 1
-3.140000' : 3
'{: : 1
f}; : 1
{: : 1
f}'.format(3.14 : 1
3.140000; : 1
'{:-f}; : 1
{:-f}'.format(3.14 : 1
'{:f}; : 1
{:f}' : 1
'3.140000; : 1
"%o" : 2
bases: : 1
"int: : 2
{0:d}; : 2
hex: : 4
{0:x}; : 1
oct: : 4
{0:o}; : 1
bin: : 4
{0:b}".format(42) : 1
'int: : 2
42; : 2
2a; : 1
52; : 1
101010' : 1
0x : 1
0o : 1
0b : 1
{0:#x}; : 1
{0:#o}; : 1
{0:#b}".format(42) : 1
0x2a; : 1
0o52; : 1
0b101010' : 1
'{:,}'.format(1234567890) : 1
'1,234,567,890' : 1
Expressing : 1
percentage: : 1
'Correct : 2
answers: : 2
{:.2%}'.format(points/total) : 1
86.36%' : 1
58) : 1
'{:%Y-%m-%d : 1
%H:%M:%S}'.format(d) : 1
'2010-07-04 : 1
12:15:58' : 1
zip('<^>' : 1
['left' : 1
'center' : 1
'right']): : 1
'{0:{fill}{align}16}'.format(text : 1
fill=align : 1
align=align) : 1
'left<<<<<<<<<<<<' : 1
'^^^^^center^^^^^' : 1
'>>>>>>>>>>>right' : 1
[192 : 1
168 : 1
'{:02X}{:02X}{:02X}{:02X}'.format(*octets) : 1
'C0A80001' : 1
int(_ : 1
range(5,12): : 1
'dXob': : 1
print('{0:{width}{base}}'.format(num : 1
base=base : 1
width=width) : 1
(i18n) : 1
i18n : 1
flufl.i18n : 1
"$"-based : 1
escape; : 1
"$identifier" : 2
""identifier"" : 2
non-identifier : 1
"${identifier}" : 1
""${noun}ification"" : 1
string.Template(template) : 1
substitute(mapping={} : 1
safe_substitute(mapping={} : 1
appearances : 1
is_valid() : 1
*template* : 2
Template: : 1
Template('$who : 3
$what') : 1
s.substitute(who='tim' : 1
what='kung : 1
pao') : 1
'tim : 2
kung : 1
pao' : 1
dict(who='tim') : 1
Template('Give : 1
$who : 1
$100').substitute(d) : 1
col : 1
$what').substitute(d) : 1
'what' : 1
$what').safe_substitute(d) : 1
subclass's : 2
*idpattern* : 3
"(?a:[_a-z][_a-z0-9]*)" : 1
*braceidpattern* : 3
braces) : 1
unbraced : 2
*idpattern*s : 1
*escaped* : 1
*named* : 2
*braced* : 1
*invalid* : 2
delimiter) : 1
string.capwords(s : 1
sep=None) : 1
"str.split()" : 1
"str.capitalize()" : 1
Lib/smtplib.py : 1
ESMTP : 17
821** : 2
(Simple : 2
Protocol) : 6
1869** : 2
(SMTP : 1
smtplib.SMTP(host='' : 1
port=0 : 3
local_hostname=None[ : 1
source_address=None) : 3
*local_hostname* : 2
FQDN : 1
HELO/EHLO : 1
"SMTPConnectError" : 1
source_address : 4
initialization/connect : 1
"SMTP.quit()" : 1
SMTP("domain.org") : 1
smtp: : 1
smtp.noop() : 1
b'Ok') : 1
"smtplib.SMTP.send" : 1
SMTPUTF8 : 2
smtplib.SMTP_SSL(host='' : 1
local_hostname=None : 2
certfile=None[ : 1
SMTP-over-SSL : 1
(465) : 1
smtplib.LMTP(host='' : 1
port=LMTP_PORT : 1
source_address=None[ : 1
host:port : 1
local_hostname : 1
smtplib.SMTPException : 1
SMTPException : 1
smtplib.SMTPServerDisconnected : 1
disconnects : 1
smtplib.SMTPResponseException : 1
"smtp_code" : 1
"smtp_error" : 1
smtplib.SMTPSenderRefused : 1
Sender : 1
"SMTPResponseException" : 1
'sender' : 1
smtplib.SMTPRecipientsRefused : 1
"recipients" : 2
smtplib.SMTPDataError : 1
smtplib.SMTPConnectError : 1
smtplib.SMTPHeloError : 1
"HELO" : 12
smtplib.SMTPNotSupportedError : 1
smtplib.SMTPAuthenticationError : 1
username/password : 2
SMTP.set_debuglevel(level) : 1
timestamped : 2
SMTP.docmd(cmd : 1
args='') : 1
(multiline : 1
line.) : 1
"SMTPServerDisconnected" : 1
SMTP.connect(host='localhost' : 1
port=0) : 1
(25) : 1
"smtplib.connect" : 1
SMTP.helo(name='') : 1
"helo_resp" : 1
SMTP.ehlo(name='') : 1
"has_extn()" : 2
"ehlo_resp" : 1
"does_esmtp" : 1
"esmtp_features" : 2
SMTP.ehlo_or_helo_if_needed() : 1
"ehlo()" : 2
"helo()" : 1
"SMTPHeloError" : 4
SMTP.has_extn(name) : 1
SMTP.verify(address) : 1
"VRFY" : 2
250 : 1
400 : 4
foil : 1
spammers : 1
SMTP.login(user : 1
initial_response_ok=True) : 2
"SMTPAuthenticationError" : 1
"SMTPNotSupportedError" : 6
"AUTH" : 5
"auth()" : 2
*initial_response_ok* : 6
"initial : 2
response" : 2
4954** : 2
challenge/response : 1
SMTP.auth(mechanism : 1
authobject : 1
"auth" : 4
authobject(challenge=None) : 1
"authobject()" : 4
challenge) : 1
"challenge=None" : 1
response; : 2
*challenge* : 1
"authobjects" : 1
"PLAIN" : 1
mechanisms; : 1
"SMTP.auth_cram_md5" : 1
"SMTP.auth_plain" : 1
"SMTP.auth_login" : 1
"password" : 3
"login()" : 2
SMTP.starttls(keyfile=None : 1
(Transport : 1
Security) : 1
certfile : 1
Indicator* : 1
"HAS_SNI") : 1
SMTP.sendmail(from_addr : 1
to_addrs : 1
mail_options=() : 2
rcpt_options=()) : 2
from-address : 1
to-address : 1
"8bitmime") : 1
"MAIL : 3
FROM" : 1
"DSN" : 1
"RCPT" : 3
*rcpt_options* : 1
recipients : 5
"mail()" : 1
"rcpt()" : 1
"data()" : 1
advertises) : 1
"SMTPRecipientsRefused" : 1
accepted) : 1
"SMTPSenderRefused" : 1
"SMTPDataError" : 1
refusal : 1
recipient) : 1
SMTP.send_message(msg : 1
from_addr=None : 1
to_addrs=None : 1
"send_message" : 3
5322**: : 1
*Sender* : 1
*Cc* : 3
*Bcc* : 2
*Resent-** : 3
*Resent-* : 1
*Resent-Bcc* : 1
"SMTPNotSupported" : 1
("SMTPUTF8") : 1
SMTP.quit() : 1
SMTP/ESMTP : 1
"HELP" : 2
"RSET" : 1
('To' : 1
'From' : 2
addresses) : 1
'To' : 1
prompt(prompt): : 1
input(prompt).strip() : 1
prompt("From: : 1
prompt("To: : 1
").split() : 1
^D : 1
(Unix) : 1
^Z : 1
(Windows):") : 1
("From: : 1
(fromaddr : 1
".join(toaddrs))) : 1
EOFError: : 2
print("Message : 1
len(msg)) : 1
server.set_debuglevel(1) : 1
"send_message()"; : 1
Lib/smtpd.py : 1
(email) : 1
do- : 1
mail-sending : 1
SIZE : 2
smtpd.SMTPServer(localaddr : 1
remoteaddr : 1
data_size_limit=33554432 : 2
map=None : 2
enable_SMTPUTF8=False : 2
decode_data=False) : 2
*localaddr* : 3
*remoteaddr* : 5
relayer : 1
"asyncore"'s : 1
*data_size_limit* : 3
*enable_SMTPUTF8* : 8
"kwargs['mail_options']" : 2
process_message(peer : 1
mailfrom : 2
rcpttos : 2
"_remoteaddr" : 1
*peer* : 1
*mailfrom* : 1
*rcpttos* : 1
"decode_data=True" : 1
*mail_options*: : 1
"['BODY=8BITMIME' : 1
'SMTPUTF8']") : 1
*rcpt_options*: : 1
"RCPT : 3
TO" : 1
"250 : 1
Ok" : 1
channel_class : 1
smtpd.DebuggingServer(localaddr : 1
remoteaddr) : 2
smtpd.PureProxy(localaddr : 1
smtpd.SMTPChannel(server : 1
"SMTPServer.channel_class" : 1
smtp_server : 1
received_lines : 1
(decoded : 1
""\r\n"" : 1
smtp_state : 1
"COMMAND" : 1
seen_greeting : 1
FROM:" : 2
TO:" : 2
received_data : 1
""\r\n.\r\n"" : 2
fqdn : 1
"conn.getpeername()" : 1
"conn" : 2
"smtp_<command>" : 1
appropriately): : 1
+----------+---------------------------------------------------------------------+ : 12
|==========|=====================================================================| : 1
HELO : 1
"seen_greeting" : 2
EHLO : 1
NOOP : 1
Closes : 10
MAIL : 1
"mailfrom" : 2
RCPT : 1
"rcpttos" : 2
"received_data" : 2
HELP : 1
VRFY : 1
EXPN : 1
Lib/xmlrpc/client.py : 1
HTTP(S) : 1
conformable : 4
xmlrpc.client.ServerProxy(uri : 1
transport=None : 1
allow_none=False : 3
use_datetime=False : 2
use_builtin_types=False : 1
"ServerProxy" : 5
Indicator) : 1
"SafeTransport" : 1
https: : 1
"Transport" : 2
XML; : 2
servers; : 2
http://ontosys.com/xml-rpc/extensions.php : 1
"[('Header- : 1
Name' : 1
'value')]") : 1
*use_datetime* : 3
added.Both : 1
Authentication: : 2
"http://user:pass@host:port/path" : 1
"user:pass" : 1
'Authorization' : 2
connection.The : 1
(service : 2
discovery) : 1
server-associated : 1
metadata.Types : 1
+------------------------+---------------------------------------------------------+ : 11
|========================|=========================================================| : 1
"i1" : 2
"i2" : 2
-2147483648 : 1
"i4" : 1
"i8" : 2
"<int>" : 1
"biginteger" : 2
"<double>" : 1
"dateTime.iso8601" : 1
"DateTime" : 2
"Binary" : 5
"nil" : 1
"bigdecimal" : 2
"Fault" : 7
"ProtocolError" : 5
HTTP/HTTPS : 2
types.When : 1
return); : 1
well-formed : 3
below."Server" : 1
"ex:nil") : 1
numerics: : 1
https://ws.apache.org/xmlrpc/types.html : 1
signatures) : 1
ServerProxy.system.listMethods() : 1
(non-system) : 1
ServerProxy.system.methodSignature(name) : 1
overloading) : 1
array" : 2
non-array : 1
ServerProxy.system.methodHelp(name) : 1
is_even(n): : 1
SimpleXMLRPCServer(("localhost" : 6
8000)) : 6
server.register_function(is_even : 1
"is_even") : 1
xmlrpc.client.ServerProxy("http://localhost:8000/") : 5
proxy: : 3
print("3 : 1
even: : 2
str(proxy.is_even(3))) : 1
print("100 : 1
str(proxy.is_even(100))) : 1
xmlrpc.client.DateTime : 1
time/date : 1
marshalling/unmarshalling : 2
decode(string) : 1
encode(out) : 2
today(): : 1
datetime.datetime.today() : 1
xmlrpc.client.DateTime(today) : 1
server.register_function(today : 1
"today") : 1
proxy.today() : 1
datetime.datetime.strptime(today.value : 1
"%Y%m%dT%H:%M:%S") : 1
print("Today: : 1
converted.strftime("%d.%m.%Y : 1
%H:%M")) : 1
xmlrpc.client.Binary : 1
NULs) : 1
decode(bytes) : 1
2045 : 1
6.8** : 1
facto : 2
XMLRPC: : 1
python_logo(): : 1
open("python_logo.jpg" : 1
xmlrpc.client.Binary(handle.read()) : 1
server.register_function(python_logo : 1
'python_logo') : 1
open("fetched_python_logo.jpg" : 1
handle.write(proxy.python_logo().data) : 1
xmlrpc.client.Fault : 2
faultCode : 1
faultString : 1
add(x : 3
x+y+0j : 1
server.register_function(add : 2
'add') : 5
proxy.add(2 : 1
occurred") : 2
print("Fault : 2
err.faultCode) : 1
err.faultString) : 1
xmlrpc.client.ProtocolError : 2
errcode : 1
errmsg : 1
URI: : 1
xmlrpc.client.ServerProxy("http://google.com/") : 1
proxy.some_method() : 1
print("URL: : 1
err.url) : 1
print("HTTP/HTTPS : 1
err.headers) : 1
print("Error : 2
err.errcode) : 1
err.errmsg) : 1
"MultiCall" : 2
xmlrpc.client.MultiCall(server) : 1
boxcar : 1
"system.multicall" : 2
*generator*; : 1
subtract(x : 2
multiply(x : 2
server.register_multicall_functions() : 2
server.register_function(subtract : 1
'subtract') : 1
server.register_function(multiply : 1
'multiply') : 1
server.register_function(divide : 1
'divide') : 1
multicall : 4
xmlrpc.client.MultiCall(proxy) : 1
multicall.add(7 : 1
multicall.subtract(7 : 1
multicall.multiply(7 : 1
multicall.divide(7 : 1
multicall() : 1
print("7+3=%d : 1
7-3=%d : 1
7*3=%d : 1
7//3=%d" : 1
tuple(result)) : 1
xmlrpc.client.dumps(params : 1
methodname=None : 1
methodresponse=None : 1
allow_none=False) : 1
*methodresponse* : 2
XML-RPC; : 1
xmlrpc.client.loads(data : 1
use_builtin_types=False) : 3
"(params : 1
methodname)" : 1
*methodname* : 2
ServerProxy("http://localhost:8000") : 2
ServerProxy("http://betty.userland.com") : 1
print(proxy) : 1
print(proxy.examples.getStateName(41)) : 1
print("ERROR" : 3
how: : 1
ProxiedTransport(xmlrpc.client.Transport): : 1
set_proxy(self : 1
headers=None): : 1
self.proxy : 1
self.proxy_headers : 1
make_connection(self : 1
host): : 1
http.client.HTTPConnection(*self.proxy) : 1
connection.set_tunnel(host : 1
headers=self.proxy_headers) : 1
self._connection : 1
ProxiedTransport() : 1
transport.set_proxy('proxy-server' : 1
xmlrpc.client.ServerProxy('http://betty.userland.com' : 1
transport=transport) : 1
print(server.examples.getStateName(41)) : 1
xmlrpc.com : 1
Lib/zipfile.py : 1
multi-disk : 1
decryption : 4
Decryption : 1
zipfile.BadZipFile : 1
zipfile.BadZipfile : 1
"BadZipFile" : 1
zipfile.LargeZipFile : 1
"importlib.resources.abc.Traversable" : 2
zipfile.PyZipFile : 1
zipfile.ZipInfo(filename='NoName' : 1
date_time=(1980 : 1
"getinfo()" : 3
"infolist()" : 2
zipfile.is_zipfile(filename) : 1
zipfile.ZIP_STORED : 1
zipfile.ZIP_DEFLATED : 1
zipfile.ZIP_BZIP2 : 1
BZIP2 : 1
zipfile.ZIP_LZMA : 1
Info-ZIP : 2
zipfile.ZipFile(file : 1
compression=ZIP_STORED : 2
allowZip64=True : 2
compresslevel=None : 1
strict_timestamps=True : 1
metadata_encoding=None) : 1
"python.exe") : 1
*compression* : 3
"ZIP_STORED" : 5
"ZIP_DEFLATED" : 4
"ZIP_BZIP2" : 4
"ZIP_LZMA"; : 1
"ZIP_LZMA" : 3
("zlib" : 1
"lzma") : 1
*strict_timestamps* : 4
*myzip* : 1
ZipFile('spam.zip' : 1
myzip: : 2
myzip.write('eggs.txt') : 1
instance-wide : 2
per-member : 1
basis.This : 1
.ZIP : 1
"bzip2" : 1
zipfile's : 1
ZipFile.getinfo(name) : 1
ZipFile.infolist() : 1
ZipFile.namelist() : 1
ZipFile.open(name : 1
pwd=None : 1
force_zip64=False) : 1
*pwd* : 5
ZipFile('spam.zip') : 1
myzip.open('eggs.txt') : 1
myfile: : 1
print(myfile.read()) : 1
("ZipExtFile") : 1
"mode='w'" : 2
"force_zip64=True" : 1
"file_size" : 1
appreciate : 1
"mode='U'" : 1
ZipFile.extract(member : 1
pwd=None) : 3
drive/UNC : 3
sharepoint : 2
(back)slashes : 1
"///foo/bar" : 1
"foo/bar" : 1
"C:\foo\bar" : 1
"foo\bar" : 1
"../../foo../../ba..r" : 1
"foo../ba..r" : 1
"*") : 1
ZipFile.extractall(path=None : 1
members=None : 2
"namelist()" : 1
ZipFile.printdir() : 1
ZipFile.setpassword(pwd) : 1
ZipFile.read(name : 1
"setpassword()" : 1
ZipFile.testzip() : 1
CRC's : 1
"testzip()" : 1
ZipFile.write(filename : 1
arcname=None : 4
compress_type=None : 2
compresslevel=None) : 2
*arcname* : 6
CP437 : 1
"arcname" : 2
ZipFile.writestr(zinfo_or_arcname : 1
*zinfo_or_arcname* : 3
ZipFile.mkdir(zinfo_or_directory : 1
mode=511) : 1
*zinfo_or_directory* : 2
ZipFile.filename : 1
ZipFile.debug : 1
ZipFile.comment : 1
zipfile.Path(root : 1
at='') : 1
'dir/file.txt' : 1
'dir/' : 1
"joinpath" : 2
Path.name : 1
**) : 2
Invoke : 5
3.11.2: : 2
Enumerate : 2
Path.suffix : 1
"Path.suffix" : 1
Path.stem : 1
"Path.stem" : 1
Path.suffixes : 1
path’s : 1
"Path.suffixes" : 1
Path.read_text(* : 1
Path.joinpath(*other) : 1
Path(...).joinpath('child').joinpath('grandchild') : 1
Path(...).joinpath('child' : 1
'grandchild') : 1
Path(...) : 1
'child' : 1
'grandchild' : 1
"zipp.Path" : 1
zipfile.PyZipFile(file : 1
optimize=- : 6
writepy(pathname : 1
basename='' : 1
filterfunc=None) : 1
"test_" : 6
zf : 1
PyZipFile('myprog.zip') : 1
notests(s): : 1
os.path.basename(s) : 1
(fn : 1
fn.startswith('test_'))) : 1
zf.writepy('myprog' : 1
filterfunc=notests) : 1
string.pyc : 1
test/__init__.pyc : 1
test/testall.pyc : 1
test.testall : 1
test/bogus/__init__.pyc : 1
test/bogus/myfile.pyc : 1
Submodule : 1
test.bogus.myfile : 1
ZipInfo.from_file(filename : 1
strict_timestamps=True) : 1
ZipInfo.is_dir() : 1
ZipInfo.filename : 1
ZipInfo.date_time : 1
+---------+----------------------------+ : 7
|=========|============================| : 1
1980) : 1
Month : 5
(one-based) : 2
Day : 8
Hours : 2
(zero-based) : 3
Minutes : 2
Seconds : 2
1980 : 1
ZipInfo.compress_type : 1
ZipInfo.comment : 1
ZipInfo.extra : 1
Expansion : 1
ZipInfo.create_system : 1
ZipInfo.create_version : 1
ZipInfo.extract_version : 1
ZipInfo.reserved : 1
ZipInfo.flag_bits : 1
ZipInfo.volume : 1
ZipInfo.internal_attr : 1
ZipInfo.external_attr : 1
ZipInfo.header_offset : 1
ZipInfo.CRC : 1
ZipInfo.compress_size : 1
ZipInfo.file_size : 1
included: : 2
monty.zip : 4
spam.txt : 2
acceptable: : 2
life-of-brian_1979/ : 2
target-dir/ : 1
<zipfile> : 8
<source1> : 4
<sourceN> : 4
--create : 2
<output_dir> : 2
--extract : 2
--test : 2
--metadata-encoding : 1
<encoding> : 1
Exceeding : 1
platforms' : 1
"loop.add_writer()" : 4
Lib/asyncio/proactor_events.py : 1
Lib/asyncio/windows_events.py : 1
Lib/asyncio/windows_utils.py : 1
"loop.create_unix_connection()" : 7
"loop.remove_signal_handler()" : 2
"SelectSelector" : 3
15.6 : 1
(availability : 1
HPET) : 1
"policy.set_child_watcher()" : 1
"selectors.KqueueSelector" : 1
"PollSelector" : 1
platform-specifics : 1
platform-neutral : 1
frameworks) : 1
Lib/pyclbr.py : 1
pyclbr.readmodule(module : 1
read; : 2
pyclbr.readmodule_ex(module : 1
"'__path__'" : 1
Function.file : 1
Function.module : 1
Function.name : 1
Function.lineno : 1
Function.parent : 1
Function.children : 1
Function.is_async : 1
Class.file : 1
Class.module : 1
Class.name : 1
Class.lineno : 1
Class.parent : 1
Class.children : 1
Class.super : 1
"readmodule_ex()" : 1
Class.methods : 1
"a2b_*" : 2
binascii.a2b_uu(string) : 1
binascii.b2a_uu(data : 1
binascii.a2b_base64(string : 1
strict_mode=False) : 1
*strict_mode* : 2
base64: : 1
Conforms : 1
binascii.b2a_base64(data : 1
newline=True) : 1
binascii.a2b_qp(data : 1
binascii.b2a_qp(data : 1
istext=True : 1
*istext* : 1
binascii.crc_hqx(data : 1
CRC-CCITT : 1
*x*^16 : 1
*x*^12 : 1
*x*^5 : 1
0x1021 : 1
binascii.crc32(data[ : 1
print(binascii.crc32(b"hello : 1
world")) : 1
pieces: : 1
binascii.crc32(b"hello") : 1
binascii.crc32(b" : 1
crc) : 1
print('crc32 : 1
{:#010x}'.format(crc)) : 1
binascii.b2a_hex(data[ : 1
sep[ : 2
bytes_per_sep=1]]) : 2
binascii.hexlify(data[ : 1
*bytes_per_sep* : 7
binascii.b2a_hex(b'\xb9\x01\xef') : 1
b'b901ef' : 1
binascii.hexlify(b'\xb9\x01\xef' : 1
b'b9-01-ef' : 1
binascii.b2a_hex(b'\xb9\x01\xef' : 2
b'b9_01ef' : 1
b' : 7
b'b901 : 1
ef' : 1
binascii.a2b_hex(hexstr) : 1
binascii.unhexlify(hexstr) : 1
*hexstr* : 2
"b2a_hex()" : 1
(accepting : 2
liberal : 1
binascii.Incomplete : 1
base64-style : 1
UU : 1
Lib/turtle.py : 1
Logo : 2
Wally : 1
Feurzeig : 1
Seymour : 1
Papert : 1
Cynthia : 1
1967 : 3
robotic : 1
x-y : 1
"turtle.forward(15)" : 1
(on-screen!) : 1
"turtle.right(25)" : 1
clockwise : 3
^^^^^^^^^^^ : 1
intricate : 2
color('red' : 1
'yellow') : 1
begin_fill() : 1
forward(200) : 1
left(170) : 1
abs(pos()) : 1
end_fill() : 1
pictures : 2
reimplementation : 1
merits : 1
(nearly) : 2
procedure-oriented : 3
two+two : 1
"TurtleScreen" : 5
playground : 2
turtles : 11
"ScrolledCanvas" : 2
"Screen()" : 1
"RawTurtle" : 1
(alias: : 2
"RawPen") : 1
ScrolledCanvas : 3
RawTurtle : 3
"Turtle" : 4
"Pen") : 1
"the" : 1
"Screen" : 6
(unnamed) : 1
"forward()" : 2
"fd()" : 1
"backward()" : 1
"bk()" : 1
"back()" : 1
"right()" : 1
"rt()" : 1
"left()" : 1
"goto()" : 1
"setposition()" : 1
"setx()" : 1
"sety()" : 1
"setheading()" : 1
"seth()" : 1
"circle()" : 2
"dot()" : 1
"stamp()" : 3
"clearstamp()" : 1
"clearstamps()" : 1
"position()" : 1
"pos()" : 1
"towards()" : 1
"xcor()" : 1
"ycor()" : 1
"heading()" : 1
"distance()" : 1
"degrees()" : 3
"radians()" : 3
"pendown()" : 1
"pd()" : 1
"down()" : 1
"penup()" : 1
"pu()" : 1
"up()" : 1
"pensize()" : 1
"width()" : 1
"pen()" : 2
"isdown()" : 1
"color()" : 2
"pencolor()" : 4
"fillcolor()" : 3
"filling()" : 1
"begin_fill()" : 3
"end_fill()" : 3
"showturtle()" : 1
"st()" : 1
"hideturtle()" : 1
"ht()" : 1
"isvisible()" : 1
"shape()" : 1
"resizemode()" : 1
"shapesize()" : 3
"turtlesize()" : 1
"shearfactor()" : 2
"settiltangle()" : 2
"tiltangle()" : 2
"tilt()" : 1
"shapetransform()" : 2
"get_shapepoly()" : 2
"onclick()" : 3
"onrelease()" : 1
"ondrag()" : 2
"begin_poly()" : 1
"end_poly()" : 1
"get_poly()" : 1
"getturtle()" : 1
"getpen()" : 1
"getscreen()" : 1
"setundobuffer()" : 1
"undobufferentries()" : 1
"bgcolor()" : 2
"bgpic()" : 1
"clearscreen()" : 1
"resetscreen()" : 1
"screensize()" : 1
"setworldcoordinates()" : 1
"onkey()" : 2
"onkeyrelease()" : 2
"onkeypress()" : 2
"onscreenclick()" : 1
"ontimer()" : 1
"colormode()" : 2
"getcanvas()" : 1
"getshapes()" : 1
"register_shape()" : 3
"addshape()" : 1
"turtles()" : 1
"window_height()" : 1
"window_width()" : 1
"textinput()" : 1
"numinput()" : 1
"bye()" : 2
"exitonclick()" : 2
"title()" : 1
turtle.forward(distance) : 1
turtle.fd(distance) : 1
**distance** : 2
*distance* : 2
headed : 2
turtle.position() : 21
(0.00,0.00) : 7
turtle.forward(25) : 1
(25.00,0.00) : 1
turtle.forward(-75) : 1
(-50.00,0.00) : 1
turtle.back(distance) : 1
turtle.bk(distance) : 1
turtle.backward(distance) : 1
turtle.backward(30) : 1
(-30.00,0.00) : 1
turtle.right(angle) : 1
turtle.rt(angle) : 1
**angle** : 5
*angle* : 4
(Units : 2
Angle : 2
orientation : 12
turtle.heading() : 20
22.0 : 2
turtle.right(45) : 1
337.0 : 1
turtle.left(angle) : 1
turtle.lt(angle) : 1
turtle.left(45) : 1
67.0 : 2
turtle.goto(x : 1
y=None) : 5
turtle.setpos(x : 1
turtle.setposition(x : 1
**x** : 4
pair/vector : 3
**y** : 4
"Vec2D" : 3
"pos()") : 1
pen : 10
tp : 3
turtle.pos() : 7
turtle.setpos(60,30) : 1
(60.00,30.00) : 1
turtle.setpos((20,80)) : 1
(20.00,80.00) : 1
turtle.setpos(tp) : 1
turtle.setx(x) : 1
(0.00,240.00) : 2
turtle.setx(10) : 1
(10.00,240.00) : 1
turtle.sety(y) : 1
(0.00,40.00) : 1
turtle.sety(-10) : 1
(0.00,-10.00) : 2
turtle.setheading(to_angle) : 1
turtle.seth(to_angle) : 1
**to_angle** : 1
*to_angle* : 1
degrees: : 4
+---------------------+----------------------+ : 5
|=====================|======================| : 1
north : 3
south : 3
270 : 3
turtle.setheading(90) : 1
90.0 : 5
turtle.home() : 11
start-orientation : 1
"mode()") : 2
turtle.circle(radius : 1
extent=None : 1
steps=None) : 1
**radius** : 1
**extent** : 1
**steps** : 1
*radius* : 3
turtle; : 1
*extent* : 4
inscribed : 1
polygon : 18
*steps* : 1
polygons : 3
turtle.circle(50) : 1
(-0.00,0.00) : 1
turtle.circle(120 : 1
180) : 1
semicircle : 1
180.0 : 1
turtle.dot(size=None : 1
*color) : 1
**size** : 2
**color** : 1
colorstring : 2
diameter : 1
*color* : 1
pensize+4 : 1
2*pensize : 1
turtle.dot() : 1
turtle.fd(50); : 2
turtle.dot(20 : 1
"blue"); : 1
turtle.fd(50) : 8
(100.00,-0.00) : 1
turtle.stamp() : 3
Stamp : 1
stamp_id : 1
"clearstamp(stamp_id)" : 1
turtle.color("blue") : 2
turtle.clearstamp(stampid) : 1
**stampid** : 1
*stampid* : 1
(150.00,-0.00) : 1
astamp : 1
(200.00,-0.00) : 2
turtle.clearstamp(astamp) : 1
turtle.clearstamps(n=None) : 1
**n** : 2
first/last : 1
turtle.stamp(); : 1
turtle.fd(30) : 2
turtle.clearstamps(2) : 1
turtle.clearstamps(-2) : 1
turtle.clearstamps() : 1
turtle.undo() : 2
(repeatedly) : 2
action(s) : 1
undobuffer : 5
turtle.lt(80) : 1
turtle.speed(speed=None) : 1
**speed** : 1
0..10 : 3
speedstring : 1
Speedstrings : 1
speedvalues : 1
"fastest": : 1
"fast": : 1
"normal": : 1
"slow": : 1
"slowest": : 1
Attention: : 1
*speed* : 1
forward/back : 1
turtle.speed() : 3
turtle.speed('normal') : 1
turtle.speed(9) : 1
vector) : 1
(440.00,-0.00) : 1
turtle.towards(x : 1
"standard"/"world" : 1
"logo" : 5
turtle.goto(10 : 1
turtle.towards(0,0) : 1
225.0 : 1
turtle.xcor() : 1
turtle.left(50) : 1
turtle.forward(100) : 2
(64.28,76.60) : 1
print(round(turtle.xcor() : 1
64.27876 : 1
turtle.ycor() : 1
turtle.left(60) : 2
print(turtle.pos()) : 1
(50.00,86.60) : 1
print(round(turtle.ycor() : 1
86.60254 : 1
turtle.left(67) : 1
turtle.distance(x : 1
turtle.distance(30,40) : 1
50.0 : 2
turtle.distance((30,40)) : 1
joe : 2
Turtle() : 3
joe.forward(77) : 1
turtle.distance(joe) : 1
77.0 : 1
turtle.degrees(fullcircle=360.0) : 1
**fullcircle** : 1
"degrees" : 1
360 : 1
turtle.left(90) : 2
grad : 1
gon : 1
gradian : 1
1/100-th : 1
angle.) : 1
turtle.degrees(400.0) : 1
turtle.degrees(360) : 1
turtle.radians() : 2
"degrees(2*math.pi)" : 1
1.5707963267948966 : 1
turtle.pendown() : 2
turtle.pd() : 1
turtle.down() : 1
turtle.penup() : 4
turtle.pu() : 1
turtle.up() : 1
turtle.pensize(width=None) : 1
turtle.width(width=None) : 1
**width** : 2
thickness : 2
resizemode : 6
turtleshape : 10
pensize : 2
turtle.pensize() : 1
turtle.pensize(10) : 1
turtle.pen(pen=None : 1
**pendict) : 1
**pen** : 1
**pendict** : 1
keyword-arguments : 2
pen's : 2
"pen-dictionary" : 1
"shown": : 1
True/False : 3
"pendown": : 1
"pencolor": : 1
color-string : 2
color-tuple : 3
"fillcolor": : 1
"pensize": : 1
"speed": : 1
"resizemode": : 1
"noresize" : 3
"stretchfactor": : 1
"outline": : 1
"tilt": : 1
pen-state : 1
turtle.pen(fillcolor="black" : 1
pencolor="red" : 1
pensize=10) : 1
sorted(turtle.pen().items()) : 1
[('fillcolor' : 3
('outline' : 3
('pencolor' : 3
'red') : 2
('pendown' : 1
('pensize' : 1
('resizemode' : 1
'noresize') : 1
('shearfactor' : 1
0.0) : 2
('shown' : 1
('speed' : 1
('stretchfactor' : 1
1.0)) : 1
('tilt' : 1
0.0)] : 1
penstate=turtle.pen() : 1
turtle.color("yellow" : 1
sorted(turtle.pen().items())[:3] : 2
'yellow')] : 1
turtle.pen(penstate : 1
fillcolor="green") : 1
'green') : 2
'red')] : 1
turtle.isdown() : 3
turtle.pencolor(*args) : 1
pencolor : 10
color/pencolor/fillcolor : 2
"pencolor(colorstring)" : 1
*colorstring* : 2
""red"" : 2
""yellow"" : 2
""#33cc8c"" : 2
"pencolor((r : 1
b))" : 2
0..colormode : 7
colormode : 4
"colormode()") : 2
"pencolor(r : 1
colormode() : 1
turtle.pencolor() : 6
turtle.pencolor("brown") : 1
'brown' : 1
(0.2 : 3
0.55) : 1
turtle.pencolor(tup) : 1
0.5490196078431373) : 1
colormode(255) : 1
(51.0 : 1
204.0 : 1
140.0) : 1
turtle.pencolor('#32c18f') : 1
(50.0 : 3
193.0 : 3
143.0) : 3
turtle.fillcolor(*args) : 1
fillcolor : 11
"fillcolor(colorstring)" : 1
"fillcolor((r : 1
"fillcolor(r : 1
turtle.fillcolor("violet") : 1
turtle.fillcolor() : 3
'violet' : 1
turtle.fillcolor((50 : 1
193 : 1
143)) : 1
turtle.fillcolor('#ffffff') : 1
(255.0 : 1
255.0 : 1
255.0) : 1
turtle.color(*args) : 1
"color(colorstring)" : 1
"color((r,g,b))" : 1
"color(r,g,b)" : 1
"color(colorstring1 : 1
colorstring2)" : 1
"color((r1,g1,b1) : 1
(r2,g2,b2))" : 1
"pencolor(colorstring1)" : 1
"fillcolor(colorstring2)" : 1
turtle.color("red" : 1
"green") : 1
turtle.color() : 1
color("#285078" : 1
"#a0c8f0") : 1
color() : 1
((40.0 : 1
80.0 : 1
120.0) : 1
(160.0 : 1
200.0 : 1
240.0)) : 1
turtle.filling() : 1
fillstate : 1
turtle.begin_fill() : 3
turtle.filling(): : 1
turtle.pensize(5) : 1
turtle.pensize(3) : 1
turtle.end_fill() : 2
self-intersecting : 1
turtle.color("black" : 1
"red") : 2
turtle.circle(80) : 1
turtle.reset() : 6
re-center : 1
turtle.goto(0,-22) : 1
turtle.left(100) : 1
(0.00,-22.00) : 1
turtle.clear() : 2
turtle.write(arg : 1
move=False : 1
align='left' : 1
font=('Arial' : 1
'normal')) : 1
**arg** : 1
**move** : 1
**align** : 1
right" : 2
**font** : 1
(fontname : 1
fontsize : 1
fonttype) : 1
("left" : 1
"right") : 1
*move* : 2
bottom-right : 1
turtle.write("Home : 1
align="center") : 1
turtle.write((0,0) : 1
turtle.hideturtle() : 3
turtle.ht() : 1
observably : 1
turtle.showturtle() : 3
turtle.st() : 1
turtle.isvisible() : 3
turtle.shape(name=None) : 1
shapename : 1
TurtleScreen's : 2
shapes: : 1
"arrow" : 1
"circle" : 1
"square" : 1
"triangle" : 1
turtle.shape() : 2
'classic' : 1
turtle.shape("turtle") : 1
'turtle' : 1
turtle.resizemode(rmode=None) : 1
**rmode** : 1
*rmode* : 1
resizemodes : 1
"user": : 1
stretchfactor : 4
outlinewidth : 1
(outline) : 1
"noresize": : 1
adaption : 2
"resizemode("user")" : 1
turtle.resizemode() : 2
'noresize' : 1
turtle.resizemode("auto") : 1
'auto' : 1
turtle.shapesize(stretch_wid=None : 1
stretch_len=None : 2
outline=None) : 3
turtle.turtlesize(stretch_wid=None : 1
**stretch_wid** : 1
**stretch_len** : 1
**outline** : 2
x/y-stretchfactors : 1
stretched : 1
stretchfactors: : 1
*stretch_wid* : 1
perpendicular : 1
*stretch_len* : 1
*outline* : 1
shape's : 1
turtle.shapesize() : 3
turtle.resizemode("user") : 1
turtle.shapesize(5 : 1
turtle.shapesize(outline=8) : 1
turtle.shearfactor(shear=None) : 1
**shear** : 1
shearfactor : 4
Shear : 1
shear : 4
(direction : 4
movement) : 5
sheared : 1
turtle.shape("circle") : 4
turtle.shapesize(5,2) : 4
turtle.shearfactor(0.5) : 1
turtle.shearfactor() : 1
turtle.tilt(angle) : 1
tilt-angle : 5
turtle.tilt(30) : 2
turtle.settiltangle(angle) : 1
*Do : 1
turtle.settiltangle(45) : 1
turtle.settiltangle(-45) : 1
turtle.tiltangle(angle=None) : 1
turtle.tilt(45) : 1
turtle.tiltangle() : 1
turtle.shapetransform(t11=None : 1
t12=None : 1
t21=None : 1
t22=None) : 1
**t11** : 1
**t12** : 2
**t21** : 1
t11 : 2
t12 : 2
t21 : 2
t22 : 2
determinant : 1
tiltangle : 1
turtle.shape("square") : 2
turtle.shapesize(4,2) : 1
turtle.shearfactor(-0.5) : 1
turtle.shapetransform() : 1
(4.0 : 1
-0.0 : 1
2.0) : 2
turtle.get_shapepoly() : 2
turtle.shapetransform(4 : 1
((50 : 1
-20) : 1
(-50 : 1
(-30 : 1
-20)) : 1
turtle.onclick(fun : 2
btn=1 : 5
add=None) : 5
**fun** : 7
**btn** : 4
mouse-button : 4
**add** : 4
*fun* : 12
mouse-click : 3
turn(x : 1
left(180) : 1
onclick(turn) : 1
onclick(None) : 1
event-binding : 1
turtle.onrelease(fun : 1
mouse-button-release : 1
MyTurtle(Turtle): : 1
glow(self,x,y): : 1
self.fillcolor("red") : 1
unglow(self,x,y): : 1
self.fillcolor("") : 1
MyTurtle() : 1
turtle.onclick(turtle.glow) : 1
turtle.onrelease(turtle.unglow) : 1
turtle.ondrag(fun : 1
mouse-move : 1
Remark: : 4
mouse-move-events : 1
turtle.ondrag(turtle.goto) : 1
handdrawings : 1
down) : 1
turtle.begin_poly() : 2
turtle.end_poly() : 2
turtle.get_poly() : 2
turtle.fd(100) : 1
turtle.left(20) : 1
register_shape("myFavouriteShape" : 1
p) : 1
turtle.clone() : 1
mick : 1
mick.clone() : 1
turtle.getturtle() : 1
turtle.getpen() : 1
"anonymous : 1
turtle": : 1
pet : 2
getturtle() : 1
pet.fd(50) : 1
<turtle.Turtle : 1
turtle.getscreen() : 2
<turtle._Screen : 1
ts.bgcolor("pink") : 1
turtle.setundobuffer(size) : 1
method/function : 1
turtle.setundobuffer(42) : 1
turtle.undobufferentries() : 1
undobufferentries(): : 1
undo() : 1
"Shape" : 3
"compound" : 3
"addcomponent()" : 2
Shape("compound") : 2
poly1 : 1
((0,0),(10,-5),(0,10),(-10,-5)) : 2
s.addcomponent(poly1 : 1
"blue") : 2
poly2 : 1
((0,0),(10,-5),(-10,-5)) : 1
s.addcomponent(poly2 : 1
Screen's : 1
shapelist : 2
register_shape("myshape" : 1
shape("myshape") : 1
"screen" : 2
turtle.bgcolor(*args) : 1
**args** : 2
screen.bgcolor("orange") : 2
screen.bgcolor() : 4
screen.bgcolor("#800080") : 1
(128.0 : 1
128.0) : 1
turtle.bgpic(picname=None) : 1
**picname** : 1
gif-file : 2
""nopic"" : 2
backgroundimage : 2
*picname* : 3
screen.bgpic() : 2
'nopic' : 1
screen.bgpic("landscape.gif") : 1
"landscape.gif" : 1
"clearscreen" : 1
turtle.clearscreen() : 1
"resetscreen" : 1
turtle.resetscreen() : 1
turtle.screensize(canvwidth=None : 1
canvheight=None : 1
bg=None) : 1
**canvwidth** : 1
**canvheight** : 1
**bg** : 1
(canvaswidth : 1
canvasheight) : 1
screen.screensize() : 2
300) : 1
screen.screensize(2000,1500) : 1
(2000 : 1
1500) : 1
;-) : 1
turtle.setworldcoordinates(llx : 1
lly : 1
urx : 1
ury) : 1
**llx** : 1
**lly** : 1
y-coordinate : 2
**urx** : 1
**ury** : 1
"world" : 5
"screen.reset()" : 1
**ATTENTION**: : 1
distorted : 2
screen.reset() : 1
screen.setworldcoordinates(-50,-7.5,50,7.5) : 1
range(72): : 1
left(10) : 1
left(45); : 1
fd(2) : 1
octagon : 1
turtle.delay(delay=None) : 1
**delay** : 2
updates.) : 1
screen.delay() : 2
screen.delay(5) : 1
turtle.tracer(n=None : 1
delay=None) : 1
(Can : 1
graphics.) : 1
"delay()") : 1
screen.tracer(8 : 1
range(200): : 1
fd(dist) : 1
rt(90) : 1
turtle.update() : 1
turtle.listen(xdummy=None : 1
ydummy=None) : 1
key-events) : 1
onclick : 1
turtle.onkey(fun : 1
turtle.onkeyrelease(fun : 1
**key** : 2
key-symbol : 2
"space") : 2
key-release : 1
key- : 2
"listen()".) : 2
fd(50) : 3
lt(60) : 2
screen.onkey(f : 2
"Up") : 2
screen.listen() : 2
turtle.onkeypress(fun : 1
key-press : 1
key-press-event : 1
key-events : 1
turtle.onscreenclick(fun : 1
"turtle": : 1
screen.onclick(turtle.goto) : 1
screen.onclick(None) : 1
"onscreenclick" : 1
"onclick" : 2
turtle.ontimer(fun : 1
t=0) : 1
**t** : 1
screen.ontimer(f : 1
250) : 1
### : 1
march : 2
turtle.mainloop() : 1
turtle.done() : 1
(No : 2
screen.mainloop() : 1
turtle.textinput(title : 1
prompt) : 1
**title** : 2
**prompt** : 2
screen.textinput("NIM" : 1
"Name : 1
player:") : 1
turtle.numinput(title : 1
minval=None : 1
maxval=None) : 1
**default** : 1
**minval** : 1
**maxval** : 1
minval: : 1
maxval: : 1
minval : 1
maxval : 1
screen.numinput("Poker" : 1
"Your : 1
stakes:" : 1
minval=10 : 1
maxval=10000) : 1
turtle.mode(mode=None) : 1
("standard" : 1
"world : 1
coordinates" : 1
**Attention**: : 1
"x/y" : 1
unit-ratio : 1
+--------------+---------------------------+---------------------+ : 3
|==============|===========================|=====================| : 1
(east) : 1
(north) : 1
mode("logo") : 1
mode() : 1
'logo' : 1
turtle.colormode(cmode=None) : 1
**cmode** : 1
0..*cmode* : 1
screen.colormode(1) : 1
turtle.pencolor(240 : 1
TurtleGraphicsError: : 1
(240 : 1
screen.colormode() : 2
screen.colormode(255) : 1
turtle.pencolor(240,160,80) : 1
turtle.getcanvas() : 1
insiders : 1
cv : 2
screen.getcanvas() : 1
<turtle.ScrolledCanvas : 1
turtle.getshapes() : 1
screen.getshapes() : 1
['arrow' : 1
'blank' : 1
'circle' : 1
'turtle'] : 1
turtle.register_shape(name : 1
shape=None) : 2
turtle.addshape(name : 1
screen.register_shape("turtle.gif") : 1
screen.register_shape("triangle" : 1
((5,-3) : 1
(0,5) : 1
(-5,-3))) : 1
(compound) : 1
thusly : 1
"shape(shapename)" : 1
turtle.turtles() : 1
screen.turtles(): : 1
turtle.color("red") : 1
turtle.window_height() : 1
screen.window_height() : 1
480 : 1
turtle.window_width() : 1
screen.window_width() : 1
640 : 4
turtle.bye() : 1
turtlegraphics : 1
turtle.exitonclick() : 1
"using_IDLE" : 1
turtle.setup(width=_CFG['width'] : 1
height=_CFG['height'] : 1
startx=_CFG['leftright'] : 1
starty=_CFG['topbottom']) : 1
**height** : 1
75% : 2
**startx** : 1
**starty** : 1
screen.setup : 1
(width=200 : 1
height=200 : 1
startx=0 : 1
starty=0) : 1
200x200 : 1
screen.setup(width=.75 : 1
height=0.5 : 1
startx=None : 1
starty=None) : 1
centers : 1
turtle.title(titlestring) : 1
**titlestring** : 1
titlebar : 1
*titlestring* : 1
screen.title("Welcome : 1
zoo!") : 1
turtle.RawTurtle(canvas) : 1
turtle.RawPen(canvas) : 1
**canvas** : 1
"methods : 1
Turtle/RawTurtle" : 1
turtle.Turtle : 2
turtle.TurtleScreen(cv) : 1
**cv** : 1
turtle.Screen : 2
turtle.ScrolledCanvas(master) : 1
**master** : 1
Tkinter-canvas : 1
turtle.Shape(type_ : 1
**type_** : 1
"polygon" : 2
modeling : 1
"(type_ : 1
+-------------+------------------------------------------------------------+ : 4
*type_* : 1
|=============|============================================================| : 1
polygon-tuple : 1
internally!) : 1
addcomponent(poly : 1
**poly** : 1
**fill** : 1
*poly* : 1
poly's : 1
poly : 1
s.addcomponent(poly : 1
register_shape() : 1
turtle.Vec2D(x : 1
two-dimensional : 1
k" : 1
"abs(a)" : 1
"a.rotate(angle)" : 1
online-help : 1
facilities: : 1
tooltips : 1
function-/method : 1
help(Screen.bgcolor) : 1
bgcolor : 2
turtle: : 5
bgcolor(self : 1
backgroundcolor : 2
given): : 2
"orange" : 2
screen.bgcolor(0.5,0,0.5) : 1
"#800080" : 2
help(Turtle.penup) : 1
penup : 4
penup(self) : 1
Aliases: : 2
pu : 2
help(bgcolor) : 1
bgcolor(*args) : 1
Example:: : 1
bgcolor("orange") : 1
bgcolor() : 2
bgcolor(0.5,0,0.5) : 1
help(penup) : 1
penup() : 2
turtle.write_docstringdict(filename='turtle_docstringdict') : 1
**filename** : 1
docstring-dictionary : 1
"*filename*.py" : 1
students) : 1
"turtle_docstringdict_german.py" : 1
Italian : 1
(Requests : 1
glingl@aon.at.) : 1
"turtle.cfg": : 1
leftright : 1
topbottom : 1
canvwidth : 1
canvheight : 1
undobuffersize : 1
noresize : 1
exampleturtle : 1
examplescreen : 1
using_IDLE : 1
"Screen.setup" : 1
"Screen.screensize" : 1
e.g: : 1
"help(shape)" : 1
transparent) : 1
"fillcolor : 1
"resizemode : 1
auto" : 1
"language : 1
italian" : 1
docstringdict : 1
"turtle_docstringdict_italian.py" : 1
*exampleturtle* : 1
*examplescreen* : 1
method-docstrings : 1
function-docstrings : 1
*using_IDLE*: : 1
("no : 1
subprocess") : 1
"Lib/turtledemo" : 2
(preferably : 1
demo-viewer) : 1
turtledemo.bytedesign : 1
sourcecode : 1
+------------------+--------------------------------+-------------------------+ : 20
|==================|================================|=========================| : 1
bytedesign : 1
chaos : 1
Verhulst : 1
dynamics : 1
hands : 1
ontimer : 1
colormixer : 1
forest : 1
breadth-first : 2
fractalcurves : 1
Hilbert : 1
Koch : 1
lindenmayer : 1
ethnomathematics : 1
(indian : 1
L-System : 1
kolams) : 1
minimal_hanoi : 1
Towers : 1
Hanoi : 2
Rectangular : 1
discs : 1
(shape : 1
shapesize) : 1
nim : 2
nimsticks : 1
sticks : 1
(mouse : 1
keyboard) : 1
minimalistic : 1
peace : 1
penrose : 1
aperiodic : 1
tiling : 1
kites : 1
darts : 1
planet_and_moon : 1
rosette : 1
wikipedia : 1
round_dance : 1
dancing : 1
pairwise : 1
shapesize : 1
tilt : 2
get_shapepoly : 1
sorting_animate : 1
(graphical) : 1
two_canvases : 1
canvases : 1
yinyang : 1
"Turtle.tracer" : 1
"Turtle.window_width" : 1
"Turtle.window_height" : 1
duplications : 1
"TurtleScreen"/"Screen" : 1
"Turtle.fill()" : 1
slightly: : 1
"Turtle.filling" : 1
"Screen.mainloop" : 1
"Screen.textinput" : 1
"Screen.numinput" : 1
"tdemo_nim.py" : 1
"tdemo_round_dance.py" : 1
*Context : 1
Variables* : 1
"copy_context()" : 2
"threading.local()" : 2
bleeding : 1
contextvars.ContextVar(name[ : 1
var: : 1
ContextVar[int] : 1
ContextVar('var' : 1
"ContextVar.get()" : 1
get([default]) : 1
will: : 1
set(value) : 3
"Token" : 1
"ContextVar.reset()" : 2
reset(token) : 1
"ContextVar.set()" : 3
ContextVar('var') : 2
var.set('new : 1
value') : 1
'var'; : 1
var.get() : 5
var.reset(token) : 1
LookupError : 3
contextvars.Token : 1
*Token* : 1
old_value : 1
"Token.MISSING" : 1
MISSING : 1
"Token.old_value" : 1
contextvars.copy_context() : 1
ctx: : 3
copy_context() : 2
print(list(ctx.items())) : 1
"ContextVars" : 1
"Context()" : 1
run(callable : 1
var.set('spam') : 1
'var' : 5
'copy_context()' : 1
'ctx.run(main)' : 1
ctx[var] : 3
var.set('ham') : 1
'ham': : 1
'ham' : 3
'ctx' : 3
ctx.run(main) : 1
'main()' : 1
'spam': : 3
context[var] : 1
get(var[ : 1
iter(context) : 1
client: : 2
client_addr_var : 1
contextvars.ContextVar('client_addr') : 1
render_goodbye(): : 1
client_addr : 1
client_addr_var.get() : 1
f'Good : 1
bye : 3
{client_addr}\n'.encode() : 1
handle_request(reader : 1
writer.transport.get_extra_info('socket').getpeername() : 1
client_addr_var.set(addr) : 1
'client_addr_var.get()' : 1
line.strip(): : 1
writer.write(line) : 1
writer.write(render_goodbye()) : 1
handle_request : 1
8081) : 1
telnet: : 1
telnet : 5
8081 : 1
Lib/asyncio/coroutines.py : 1
*Coroutines* : 1
"world": : 1
print('world') : 1
0x1053bb7c8> : 1
mechanisms: : 1
Awaiting : 2
*another* : 2
say_after(delay : 1
what): : 1
print(what) : 1
print(f"started : 4
{time.strftime('%X')}") : 10
say_after(1 : 3
'hello') : 1
say_after(2 : 3
print(f"finished : 4
17:13:52 : 1
17:13:55 : 1
"say_after" : 1
*concurrently*: : 2
asyncio.create_task( : 2
'hello')) : 2
task2 : 4
'world')) : 2
(should : 1
seconds.) : 1
17:14:32 : 1
17:14:34 : 1
asyncio.TaskGroup() : 2
tg: : 2
tg.create_task( : 2
**awaitable** : 1
**Tasks** : 1
**Futures** : 1
coroutines: : 1
nested(): : 2
"nested()" : 2
*won't : 1
all* : 1
nested() : 2
print(await : 2
nested()) : 1
"coroutine" : 1
concepts: : 3
object*: : 1
*Tasks* : 1
*concurrently* : 2
*Task* : 1
soon: : 1
asyncio.create_task(nested()) : 1
"task" : 1
**eventual : 1
result** : 1
**there : 1
need** : 1
function_that_returns_a_future_object() : 2
some_python_coroutine() : 1
Lib/asyncio/tasks.py : 1
asyncio.create_task(coro : 1
"asyncio.TaskGroup.create_task()" : 1
mid-execution : 3
"fire-and-forget" : 1
background_tasks : 1
asyncio.create_task(some_coro(param=i)) : 1
background_tasks.add(task) : 1
completion: : 2
task.add_done_callback(background_tasks.discard) : 1
"uncancel" : 1
asyncio.TaskGroup : 1
create_task(coro : 1
tg.create_task(some_coro(...)) : 1
tg.create_task(another_coro(...)) : 1
print("Both : 1
now.") : 1
"tg" : 1
"tg.create_task()" : 1
coroutine) : 1
appropriate; : 1
specially: : 1
non-cancellation : 1
asyncio.sleep(delay : 1
result=None) : 1
display_date(): : 1
asyncio.run(display_date()) : 1
asyncio.gather(*aws : 1
return_exceptions=False) : 1
*aws* : 9
*return_exceptions* : 4
**won't : 1
cancelled** : 1
aggregated : 1
*cancelled* : 14
Tasks/Futures : 1
factorial(name : 1
print(f"Task : 2
{name}: : 2
factorial({number}) : 2
i={i}...") : 1
{f}") : 1
factorial("A" : 1
factorial("B" : 1
factorial("C" : 1
print(L) : 1
factorial(2) : 2
i=2.. : 3
factorial(3) : 3
factorial(4) : 4
i=3.. : 2
i=4.. : 1
24] : 1
"gather.cancel()" : 1
(raised : 1
awaitables) : 1
*gather* : 1
Future-like : 7
asyncio.shield(aw) : 1
"cancelled" : 1
*aw* : 7
asyncio.create_task(something()) : 2
shield(task) : 2
something() : 1
"something()" : 3
recommended) : 2
CancelledError: : 1
asyncio.timeout(delay) : 1
float/int : 1
applied; : 1
rescheduled : 2
"Timeout.reschedule()" : 1
asyncio.timeout(10): : 2
long_running_task() : 4
"long_running_task" : 1
*outside* : 1
"asyncio.TimeoutError": : 1
TimeoutError: : 7
regardless.") : 2
asyncio.Timeout(when) : 1
overdue : 1
"when" : 2
clock: : 1
"when : 1
loop.time()" : 1
reschedule(when: : 1
Reschedule : 1
expired() : 1
(expired) : 1
``None`` : 1
asyncio.timeout(None) : 1
new_deadline : 1
get_running_loop().time() : 1
cm.reschedule(new_deadline) : 1
cm.expired(): : 1
print("Looks : 1
asyncio.timeout_at(when) : 1
get_running_loop() : 1
asyncio.timeout_at(deadline): : 1
asyncio.wait_for(aw : 1
"cancellation" : 1
eternity(): : 1
print('yay!') : 1
asyncio.wait_for(eternity() : 1
timeout=1.0) : 2
print('timeout!') : 1
"wait_for" : 2
asyncio.wait(aws : 1
Tasks/Futures: : 1
"(done : 1
pending)" : 1
asyncio.wait(aws) : 1
asyncio.as_completed(aws : 1
as_completed(aws): : 1
earliest_result : 1
asyncio.to_thread(func : 1
**kwargs : 1
print(f"start : 1
blocking_io : 3
time.sleep(1) : 1
print(f"blocking_io : 1
asyncio.to_thread(blocking_io) : 1
asyncio.sleep(1)) : 1
19:50:53 : 2
19:50:54 : 2
"blocking_io()" : 1
asyncio.run_coroutine_threadsafe(coro : 2
Thread-safe : 1
"concurrent.futures.Future" : 6
result=3) : 1
future.result(timeout) : 2
task...') : 1
future.cancel() : 1
{exc!r}') : 1
{result!r}') : 1
asyncio.current_task(loop=None) : 1
asyncio.all_tasks(loop=None) : 1
asyncio.iscoroutine(obj) : 1
asyncio.Task(coro : 1
loop=None : 2
"Future-like" : 1
*done* : 20
scheduling: : 1
result() : 2
re-raised.) : 1
Task's : 1
exception() : 2
add_done_callback(callback : 2
remove_done_callback(callback) : 2
"Future.remove_done_callback()" : 1
get_stack(* : 1
newest : 2
print_stack(* : 1
"get_stack()" : 2
get_coro() : 1
set_name(value) : 1
cancel(msg=None) : 2
CancelledError" : 1
"Task.uncancel()" : 1
cancel_me(): : 4
print('cancel_me(): : 3
sleep') : 3
asyncio.CancelledError: : 2
"cancel_me" : 1
asyncio.create_task(cancel_me()) : 1
print("main(): : 1
cancel_me : 2
now") : 1
uncancel() : 1
uncancelled : 1
isolating : 1
make_request_with_timeout(): : 1
asyncio.timeout(1): : 1
make_request() : 1
make_another_request() : 1
log("There : 1
timeout") : 1
unrelated_code() : 1
"make_request()" : 1
"make_another_request()" : 1
"unrelated_code()" : 1
suppresing : 1
cancelling() : 1
(CPU : 1
bound) : 1
multitasking : 2
preemptive : 1
multitasking) : 1
multimedia : 1
DBM-related : 1
Lib/logging/__init__.py : 1
grips : 2
(**see : 1
right**) : 1
*NEVER* : 1
organise : 1
logging.Logger : 1
(ancestor) : 2
loggers' : 1
Spelling : 1
"logging.getLogger('A.B.C').error(...)" : 1
[subject : 1
settings] : 1
setLevel(level) : 2
logger) : 1
'delegation : 1
parent' : 1
NOTSET : 4
ancestor's : 1
root's : 1
"getEffectiveLevel()" : 4
return/expect : 1
isEnabledFor(level) : 1
"logging.disable(level)" : 1
getEffectiveLevel() : 1
"logging.DEBUG" : 3
getChild(suffix) : 1
"logging.getLogger('abc').getChild('def.ghi')" : 1
"logging.getLogger('abc.def.ghi')" : 1
debug(msg : 1
argument.) : 2
inspected: : 2
*stack_info* : 8
*exc_info*: : 2
function/method : 1
%(clientip)-15s : 2
logging.basicConfig(format=FORMAT) : 2
{'clientip': : 2
'fbloggs'} : 2
logging.getLogger('tcpserver') : 1
logger.warning('Protocol : 1
'connection : 2
reset' : 2
extra=d) : 2
2006-02-08 : 2
22:20:02,165 : 2
fbloggs : 2
'clientip' : 2
"Formatter"s : 2
"Handler"s : 2
"Logger.propagate" : 1
"lastResort" : 2
info(msg : 1
warning(msg : 1
"warn" : 5
error(msg : 1
critical(msg : 1
log(level : 1
exception(msg : 1
addFilter(filter) : 2
removeFilter(filter) : 2
filter(record) : 3
addHandler(hdlr) : 1
*hdlr* : 2
removeHandler(hdlr) : 1
findCaller(stack_info=False : 1
stacklevel=1) : 1
helper/wrapper : 2
handle(record) : 4
Logger-level : 1
makeRecord(name : 1
lno : 2
func=None : 3
extra=None : 1
sinfo=None) : 2
hasHandlers() : 1
'propagate' : 1
"Handler.__init__()" : 1
__init__(level=NOTSET) : 1
"createLock()") : 1
createLock() : 2
acquire() : 4
Acquires : 1
"createLock()" : 1
setFormatter(fmt) : 1
Tidy : 1
acquisition/release : 1
handleError(record) : 1
format(record) : 2
emit(record) : 13
handler-level : 5
acquired) : 1
"'%(message)s'" : 3
pre-formatted : 1
"LogRecord"'s : 1
logging.Formatter(fmt=None : 1
style='%' : 1
validate=True : 2
defaults=None) : 1
"formatTime()" : 2
'$' : 1
"{message}") : 1
"Logger.debug" : 1
{- : 1
"logging.Formatter('%(ip)s : 1
defaults={"ip": : 1
None})" : 1
Incorrect : 1
"logging.Formatter('%(asctime)s : 1
style='{')" : 1
record's : 5
preparatory : 1
"'(asctime)'" : 1
"formatException()" : 1
*exc_text* : 2
customizes : 1
recalculates : 1
"formatStack()" : 1
formatTime(record : 1
datefmt=None) : 1
'%Y-%m-%d : 3
%H:%M:%S,uuu' : 1
uuu : 1
"2003-01-23 : 1
00:29:50,411" : 1
hard- : 1
"2010-09-06 : 1
22:38:15,292" : 1
("'%Y-%m-%d : 1
%H:%M:%S'") : 1
"'%s,%03d'" : 1
"default_time_format" : 1
"default_msec_format" : 2
formatException(exc_info) : 1
formatStack(stack_info) : 1
"traceback.print_stack()" : 2
logging.BufferingFormatter(linefmt=None) : 1
formatHeader(records) : 1
*records* : 5
formatFooter(records) : 1
format(records) : 1
records; : 1
"Filters" : 1
"Loggers" : 1
'A.B' : 2
'A.B.C' : 1
'A.B.C.D' : 1
'A.B.D' : 1
'A.BB' : 1
'B.A.B' : 1
logging.Filter(name='') : 1
"Filter": : 1
"filter" : 3
wire) : 1
logging.LogRecord(name : 1
(*str*) : 14
**level** : 1
(*int*) : 11
*two* : 1
LogRecord: : 1
"levelno" : 1
"levelname" : 3
**pathname** : 1
**lineno** : 1
(*Any*) : 1
(*tuple** : 1
**dict**[**str** : 1
**Any**]*) : 1
**exc_info** : 1
(*tuple**[**type**[**BaseException**]** : 1
**BaseException** : 1
**types.TracebackType**] : 1
**| : 1
**None*) : 4
**func** : 2
(*str** : 3
**sinfo** : 1
getMessage() : 1
factory's : 1
{}-formatting : 2
("str.format()") : 1
"{attrname}" : 1
("string.Template") : 1
"${attrname}" : 1
"attrname" : 1
"{msecs:03d}" : 1
"004" : 1
+------------------+---------------------------+-------------------------------------------------+ : 22
|==================|===========================|=================================================| : 1
"%(asctime)s" : 1
'2003-07-08 : 1
16:49:45,896' : 1
"%(created)f" : 1
(à : 1
"sys.exc_info") : 1
"%(filename)s" : 1
funcName : 1
"%(funcName)s" : 1
levelname : 1
"%(levelname)s" : 2
("'DEBUG'" : 1
"'INFO'" : 1
"'WARNING'" : 1
"'ERROR'" : 1
levelno : 1
"%(levelno)s" : 1
("DEBUG" : 1
"CRITICAL") : 1
"%(lineno)d" : 1
"Formatter.format()" : 1
"%(module)s" : 1
"filename") : 1
msecs : 1
"%(msecs)d" : 1
Millisecond : 1
"%(pathname)s" : 1
"%(process)d" : 1
processName : 1
"%(processName)s" : 1
relativeCreated : 1
"%(relativeCreated)d" : 1
stack_info : 1
"%(thread)d" : 1
"%(threadName)s" : 1
*processName* : 1
logging.LoggerAdapter(logger : 1
extra) : 1
process(msg : 1
(*msg* : 1
*kwargs*) : 1
"Logger": : 1
"hasHandlers()" : 2
"_log()" : 1
achieves : 3
locks; : 1
re-entrant : 1
logging.getLogger(name=None) : 1
dot-separated : 1
*'a'* : 1
*'a.b'* : 1
*'a.b.c.d'* : 1
Choice : 1
logging.getLoggerClass() : 1
MyLogger(logging.getLoggerClass()): : 1
logging.debug(msg : 1
logging.warning('Protocol : 1
"critical()") : 1
logging.info(msg : 1
logging.warning(msg : 1
logging.error(msg : 1
logging.critical(msg : 1
logging.exception(msg : 1
logging.log(level : 1
logging.disable(level=CRITICAL) : 1
throttle : 1
"logging.disable(logging.NOTSET)" : 1
bpo-28524 : 1
logging.addLevelName(level : 1
levelName) : 1
*levelName* : 1
logging.getLevelNamesMapping() : 1
logging.getLevelName(level) : 1
"addLevelName()" : 1
'Level : 1
logic) : 1
logging.makeLogRecord(attrdict) : 1
*attrdict* : 1
reconstituting : 1
logging.basicConfig(**kwargs) : 1
circumstances) : 1
'backslashreplace' : 1
'errors' : 1
logging.shutdown() : 1
Informs : 1
orderly : 1
"atexit") : 1
logging.setLoggerClass(klass) : 1
Tells : 1
*klass* : 1
"Logger.__init__()" : 1
logging.setLogRecordFactory(factory) : 1
**factory** : 2
"factory(name : 1
sinfo=None : 1
fn: : 2
lno: : 1
args: : 1
exc_info: : 1
sinfo: : 1
kwargs: : 1
logging.lastResort : 1
"handler : 1
XYZ" : 1
"captureWarnings()" : 1
logging.captureWarnings(capture) : 1
*capture* : 2
"'py.warnings'" : 1
"captureWarnings(True)" : 1
2.1.x : 1
2.2.x : 1
Password : 3
"passwd" : 1
"<pwd.h>"): : 1
+---------+-----------------+-------------------------------+ : 8
|=========|=================|===============================| : 1
"pw_name" : 1
"pw_passwd" : 2
"pw_gid" : 1
"pw_gecos" : 1
"pw_dir" : 1
"pw_shell" : 1
"crypt") : 1
unices : 2
*shadow : 1
password* : 1
*pw_passwd* : 2
"/etc/shadow" : 1
pwd.getpwuid(uid) : 1
pwd.getpwnam(name) : 1
pwd.getpwall() : 1
+-------------+----------------------+---------------------+-------------------------+---------+ : 14
|=============|======================|=====================|=========================|=========| : 1
(strictly : 1
"array.itemsize" : 1
array.typecodes : 1
array.array(typecode[ : 1
initializer]) : 2
*typecode* : 2
"fromlist()" : 1
"fromunicode()" : 1
"array.__new__" : 1
buffer_info() : 1
"array.buffer_info()[1] : 1
array.itemsize" : 1
unsafe) : 1
length-changing : 1
byteswap() : 1
frombytes(s) : 1
fromfile(f : 1
fromlist(list) : 1
a.append(x)" : 1
fromunicode(s) : 1
Extends : 1
array; : 2
"array.frombytes(unicodestring.encode(enc))" : 1
pop([i]) : 1
remove(x) : 1
tobytes() : 1
method.) : 3
tofile(f) : 1
tolist() : 2
tounicode() : 1
"array.tobytes().decode(enc)" : 1
"array(typecode : 1
initializer)" : 1
array('l') : 1
\u2641') : 1
array('l' : 1
array('d' : 1
3.14]) : 1
Packing : 2
(XDR) : 1
'built-in' : 1
open(path): : 1
builtins.open(path : 1
UpperCaser(f) : 1
UpperCaser: : 1
'''Wrapper : 1
uppercase.''' : 1
self._f : 1
read(self : 1
count=-1): : 1
self._f.read(count).upper() : 1
Lib/heapq.py : 1
Heaps : 3
"heap[0]" : 3
aspects: : 1
"min : 1
heap" : 2
textbooks; : 1
"max : 1
suitability : 1
sorting) : 1
surprises: : 1
"heap.sort()" : 1
"heapify()" : 1
heapq.heappushpop(heap : 1
heapq.heapify(x) : 1
heapq.heapreplace(heap : 1
fixed-size : 3
pop/push : 1
"heappushpop()" : 1
push/pop : 1
heapq.merge(*iterables : 1
"sorted(itertools.chain(*iterables))" : 1
largest) : 1
(compare : 2
"sorted(itertools.chain(*iterables) : 1
reverse=True)" : 1
heapq.nlargest(n : 1
"key=str.lower") : 4
key=key : 1
reverse=True)[:n]" : 1
heapq.nsmallest(n : 1
key=key)[:n]" : 1
"n==1" : 1
heapsort : 1
heapsort(iterable): : 1
heappush(h : 5
[heappop(h) : 1
range(len(h))] : 1
heapsort([1 : 1
priorities) : 1
tracked: : 1
'write : 3
code')) : 1
(7 : 1
'release : 1
product')) : 1
spec')) : 1
'create : 1
tests')) : 1
heappop(h) : 1
spec') : 1
challenges: : 1
stability: : 1
(priority : 1
task) : 5
tie-breaker : 1
non-comparable : 1
revolve : 1
pq : 1
entry_finder : 1
REMOVED : 3
'<removed-task>' : 1
add_task(task : 1
priority=0): : 1
'Add : 1
task' : 1
entry_finder: : 1
remove_task(task) : 1
next(counter) : 1
[priority : 1
task] : 1
entry_finder[task] : 2
heappush(pq : 1
remove_task(task): : 1
found.' : 1
entry_finder.pop(task) : 1
entry[-1] : 1
pop_task(): : 1
'Remove : 1
empty.' : 1
pq: : 1
heappop(pq) : 1
REMOVED: : 1
KeyError('pop : 1
queue') : 1
"a[k] : 2
a[2*k+1]" : 1
a[2*k+2]" : 1
"a[0]" : 1
tournament : 4
"a[k]": : 1
topping : 1
"2*k+1" : 1
"2*k+2" : 1
sports : 1
tops : 2
opponents : 1
s/he : 1
tournaments : 1
"wins" : 2
topped : 1
loser : 1
percolate : 2
re-established : 1
O(n : 1
"better" : 1
0'th : 2
"win" : 1
schedulers : 3
MIDI : 1
sequencer : 1
speedy : 1
terrible : 1
"runs" : 1
pre-sorted : 1
cleverly : 2
Tournaments : 1
fuzzily : 1
melting : 1
Clever : 1
'heap' : 1
nowadays : 1
tape : 5
(far : 1
advance) : 1
"progressing" : 1
merge) : 1
tapes : 1
rewinding : 1
Believe : 1
spectacular : 1
Great : 1
Lib/sndhdr.py : 1
("filetype" : 1
"framerate" : 1
"nchannels" : 1
"nframes" : 1
"sampwidth") : 1
"'aifc'" : 2
"'aiff'" : 2
"'au'" : 2
"'hcom'" : 2
"'sndr'" : 1
"'sndt'" : 2
"'voc'" : 2
"'wav'" : 2
"'8svx'" : 2
"'sb'" : 2
"'ub'" : 2
"'ul'" : 2
*sampling_rate* : 1
*channels* : 2
*frames* : 1
*bits_per_sample* : 1
A-LAW : 1
sndhdr.what(filename) : 1
sndhdr.whathdr(filename) : 1
"whathdr()": : 1
Compressed : 1
Au : 1
HCOM : 1
Sndtool : 1
Creative : 2
Waveform : 1
8-Bit : 1
Sampled : 1
Voice : 1
UB : 1
uLAW : 1
sndhdr.tests : 1
imghdr.what('bass.wav') : 1
'wav' : 2
imghdr.whathdr('bass.wav') : 1
Lib/compileall.py : 1
byte-code : 24
compileall**) : 1
"-l : 1
<directories : 1
sys.path>" : 1
("-qq") : 1
destdir : 1
strip_prefix : 1
prepend_prefix : 1
("-s") : 1
("-p") : 1
<directory> : 2
0** : 1
-l** : 2
-j : 1
--invalidation-mode : 1
[timestamp|checked-hash|unchecked-hash] : 1
"timestamp" : 4
"checked- : 1
hash" : 2
"unchecked-hash" : 1
"checked-hash" : 1
"compileall : 1
"-qq" : 1
"--hardlink- : 1
dupes" : 1
compileall** : 1
compileall.compile_dir(dir : 1
maxlevels=sys.getrecursionlimit() : 1
ddir=None : 2
force=False : 3
rx=None : 2
quiet=0 : 3
legacy=False : 3
workers=1 : 1
invalidation_mode=None : 2
stripdir=None : 2
prependdir=None : 2
limit_sl_dest=None : 2
hardlink_dupes=False) : 2
re-compiled : 1
*rx* : 3
re.Pattern : 3
*legacy* : 7
*workers* : 6
"py_compile.PycInvalidationMode" : 2
3.7.2: : 5
compileall.compile_file(fullname : 1
compileall.compile_path(skip_curdir=True : 1
maxlevels=0 : 1
invalidation_mode=None) : 1
*skip_curdir* : 1
"maxlevels" : 1
"Lib/" : 1
compileall.compile_dir('Lib/' : 2
force=True) : 3
.svn : 1
rx=re.compile(r'[/\\][.]svn') : 1
compileall.compile_dir(pathlib.Path('Lib/') : 1
Lib/warnings.py : 1
(normally) : 1
"PyErr_WarnEx()"; : 1
control: : 1
determination : 2
user-settable : 1
"filterwarnings()" : 4
"resetwarnings()" : 1
"logging.captureWarnings()" : 1
categorization : 1
+------------------------------------+-------------------------------------------------+ : 12
|====================================|=================================================| : 1
specifications; : 1
(*action* : 1
*lineno*) : 1
+-----------------+------------------------------------------------+ : 7
Disposition : 1
|=================|================================================| : 1
""ignore"" : 1
""always"" : 1
""module"" : 1
""once"" : 1
(case-insensitively) : 1
"Warning") : 1
case-sensitively : 1
(case-sensitively) : 1
"category(message)" : 1
"sys.warnoptions"; : 1
(invalid : 1
colons: : 1
action:message:category:module:line : 1
"PYTHONWARNINGS") : 1
Commonly : 1
error::ResourceWarning : 1
default::DeprecationWarning : 1
ignore,default:::mymodule : 1
error:::mymodule : 1
precedence): : 2
default::DeprecationWarning:__main__ : 1
ignore::DeprecationWarning : 1
ignore::PendingDeprecationWarning : 1
ignore::ImportWarning : 1
ignore::ResourceWarning : 1
sys.warnoptions: : 2
warnings.simplefilter("ignore") : 2
warnings.simplefilter("default") : 1
os.environ["PYTHONWARNINGS"] : 1
"user_ns" : 1
interactively): : 1
warnings.filterwarnings("default" : 1
module=user_ns.get("__name__")) : 1
"catch_warnings" : 5
fxn(): : 2
warnings.warn("deprecated" : 2
fxn() : 2
known-deprecated : 1
warnings.catch_warnings(record=True) : 1
len(w) : 1
issubclass(w[-1].category : 1
"deprecated" : 1
str(w[-1].message) : 1
"once"/"default" : 1
confirms : 1
"ignored : 1
default") : 1
"PYTHONWARNINGS=default" : 1
warnings.warn(message : 2
category=None : 1
stacklevel=1 : 1
source=None) : 3
"message.__class__" : 1
"str(message)" : 1
deprecation(message): : 1
stacklevel=2) : 1
"deprecation()"'s : 1
"deprecation()" : 1
warnings.warn_explicit(message : 1
registry=None : 1
module_globals=None : 1
non-filesystem : 1
warnings.showwarning(message : 1
"formatwarning(message : 1
"warnings.showwarning" : 1
warnings.formatwarning(message : 1
message='' : 1
category=Warning : 3
module='' : 1
append=False) : 3
*append* : 2
warnings.simplefilter(action : 1
"simplefilter()" : 2
warnings.catch_warnings(* : 1
record=False : 1
*record* : 2
Lib/xml/sax/handler.py : 1
resolvers : 1
xml.sax.handler.ContentHandler : 1
xml.sax.handler.DTDHandler : 1
(unparsed : 1
xml.sax.handler.EntityResolver : 1
xml.sax.handler.ErrorHandler : 1
xml.sax.handler.LexicalHandler : 2
xml.sax.handler.feature_namespaces : 1
""http://xml.org/sax/features/namespaces"" : 1
(implies : 2
namespace-prefixes; : 1
(parsing) : 7
read-only; : 7
parsing) : 7
xml.sax.handler.feature_namespace_prefixes : 1
""http://xml.org/sax/features/namespace-prefixes"" : 1
xml.sax.handler.feature_string_interning : 1
""http://xml.org/sax/features/string-interning"" : 1
xml.sax.handler.feature_validation : 1
""http://xml.org/sax/features/validation"" : 1
external-general-entities : 1
external-parameter-entities) : 1
xml.sax.handler.feature_external_ges : 1
""http://xml.org/sax/features/external-general-entities"" : 1
(text) : 1
xml.sax.handler.feature_external_pes : 1
""http://xml.org/sax/features/external-parameter-entities"" : 1
xml.sax.handler.all_features : 1
xml.sax.handler.property_lexical_handler : 1
""http://xml.org/sax/properties/lexical-handler"" : 1
xml.sax.handler.property_declaration_handler : 1
""http://xml.org/sax/properties/declaration-handler"" : 1
xml.sax.sax2lib.DeclHandler : 1
DTD-related : 1
xml.sax.handler.property_dom_node : 1
""http://xml.org/sax/properties/dom-node"" : 1
org.w3c.dom.Node : 1
xml.sax.handler.property_xml_string : 1
""http://xml.org/sax/properties/xml-string"" : 1
xml.sax.handler.all_properties : 1
ContentHandler.setDocumentLocator(locator) : 1
locator : 6
locator: : 1
DocumentHandler : 2
document-related : 1
business : 1
ContentHandler.startDocument() : 1
"setDocumentLocator()") : 1
ContentHandler.endDocument() : 1
ContentHandler.startPrefixMapping(prefix : 1
prefix-URI : 2
processing: : 1
"feature_namespaces" : 1
"startPrefixMapping()" : 4
"endPrefixMapping()" : 4
each-other: : 1
ContentHandler.endPrefixMapping(prefix) : 1
ContentHandler.startElement(name : 1
non-namespace : 2
ContentHandler.endElement(name) : 1
ContentHandler.startElementNS(name : 1
"(uri : 1
localname)" : 3
AttributesNS : 2
"feature_namespace_prefixes" : 1
ContentHandler.endElementNS(name : 1
qname) : 1
"startElementNS()" : 2
ContentHandler.characters(content) : 1
*content* : 2
Java-like : 1
ContentHandler.ignorableWhitespace(whitespace) : 1
Validating : 1
2.10): : 1
non-validating : 1
ContentHandler.processingInstruction(target : 1
2.8) : 1
4.3.1) : 1
ContentHandler.skippedEntity(name) : 1
Non-validating : 1
"feature_external_pes" : 1
"DTDHandler" : 4
DTDHandler.notationDecl(name : 1
DTDHandler.unparsedEntityDecl(name : 1
ndata) : 1
EntityResolver.resolveEntity(publicId : 1
(possibly) : 1
recoverable : 3
ErrorHandler.error(exception) : 1
ErrorHandler.fatalError(exception) : 1
ErrorHandler.warning(exception) : 1
setProperty : 1
"'http://xml.org/sax/properties/lexical- : 1
handler'" : 1
LexicalHandler.comment(content) : 1
LexicalHandler.startDTD(name : 1
public_id : 1
system_id) : 1
LexicalHandler.endDTD() : 1
LexicalHandler.startCDATA() : 1
LexicalHandler.endCDATA() : 1
(UCD) : 1
#44 : 1
Database" : 1
unicodedata.lookup(name) : 1
unicodedata.name(chr[ : 1
*chr* : 10
unicodedata.decimal(chr[ : 1
unicodedata.digit(chr[ : 1
unicodedata.numeric(chr[ : 1
unicodedata.category(chr) : 1
unicodedata.bidirectional(chr) : 1
unicodedata.combining(chr) : 1
unicodedata.east_asian_width(chr) : 1
asian : 1
unicodedata.mirrored(chr) : 1
mirrored : 1
"mirrored" : 1
unicodedata.decomposition(chr) : 1
unicodedata.normalize(form : 1
unistr) : 2
*form* : 4
*unistr* : 2
equivalence : 4
(NFD) : 1
decomposed : 3
(NFC) : 1
pre-combined : 1
U+2160 : 1
(ROMAN : 1
ONE) : 1
U+0049 : 1
I) : 1
gb2312) : 1
KD : 1
(NFKD) : 1
KC : 1
(NFKC) : 1
unicodedata.is_normalized(form : 1
unicodedata.unidata_version : 1
unicodedata.ucd_3_2_0 : 1
IDNA) : 1
unicodedata.lookup('LEFT : 1
BRACKET') : 1
unicodedata.name('/') : 1
'SOLIDUS' : 1
unicodedata.decimal('9') : 1
unicodedata.decimal('a') : 1
unicodedata.category('A') : 1
'L'etter : 1
'u'ppercase : 1
unicodedata.bidirectional('\u0660') : 1
'A'rabic : 1
'N'umber : 1
https://www.unicode.org/Public/14.0.0/ucd/NameAliases.txt : 1
https://www.unicode.org/Public/14.0.0/ucd/NamedSequences.txt : 1
**************************************************************** : 2
Lib/platform.py : 1
platform.architecture(executable=sys.executable : 1
bits='' : 1
linkage='') : 1
Queries : 2
"(bits : 1
linkage)" : 1
presets : 3
"sizeof(pointer)" : 1
"sizeof(long)" : 1
1.5.2) : 1
Reasonable : 1
architectures.To : 1
"64-bitness" : 1
is_64bits : 1
platform.machine() : 1
"'AMD64'" : 1
platform.node() : 1
(may : 8
qualified!) : 1
platform.platform(aliased=0 : 1
terse=0) : 1
*human : 1
readable* : 1
*aliased* : 1
"system_alias()" : 1
*terse* : 1
"mac_ver()" : 1
platform.processor() : 1
"'amdk6'" : 1
"machine()" : 1
platform.python_build() : 1
"(buildno : 1
builddate)" : 1
platform.python_compiler() : 1
platform.python_branch() : 1
SCM : 2
platform.python_implementation() : 1
'CPython' : 1
'IronPython' : 1
'PyPy' : 1
platform.python_revision() : 1
platform.python_version() : 1
"'major.minor.patchlevel'" : 1
patchlevel : 2
platform.python_version_tuple() : 1
patchlevel)" : 1
"'0'") : 1
platform.release() : 1
"'2.2.0'" : 1
"'NT'" : 1
system/OS : 1
"'Linux'" : 1
"'Darwin'" : 1
"'Java'" : 1
"'Windows'" : 1
platform.system_alias(system : 1
"(system : 1
marketing : 1
platform.version() : 1
"'#3 : 1
degas'" : 1
platform.uname() : 1
Fairly : 1
uname : 1
("processor") : 1
platform.java_ver(release='' : 1
vendor='' : 1
vminfo=('' : 1
osinfo=('' : 1
'')) : 1
"(release : 3
vminfo : 1
osinfo)" : 1
*vminfo* : 1
"(vm_name : 1
vm_release : 1
vm_vendor)" : 1
*osinfo* : 1
"(os_name : 1
os_version : 1
os_arch)" : 1
"''") : 3
platform.win32_ver(release='' : 1
version='' : 2
csd='' : 1
ptype='') : 1
csd : 1
ptype)" : 1
CSD : 1
pack) : 1
(multi/single : 1
"'Uniprocessor : 1
Free'" : 2
"'Multiprocessor : 1
*'Free'* : 1
*'Checked'* : 1
"'Enterprise'" : 1
"'IoTUAP'" : 1
"'ServerStandard'" : 1
"'nanoserver'" : 1
"win32_edition()" : 1
platform.mac_ver(release='' : 1
versioninfo=('' : 1
machine='') : 1
versioninfo : 1
machine)" : 1
*versioninfo* : 1
"(version : 1
dev_stage : 1
non_release_version)" : 1
platform.libc_ver(executable=sys.executable : 1
lib='' : 1
chunksize=16384) : 1
"(lib : 1
intimate : 2
**gcc** : 1
platform.freedesktop_os_release() : 2
Android-based : 1
"/etc/os-release" : 1
"/usr/lib/os-release" : 1
"ID" : 2
"PRETTY_NAME" : 1
Vendors : 1
"VARIANT" : 1
"ID_LIKE" : 2
"VERSION_ID" : 1
"VARIANT_ID" : 1
get_like_distro(): : 1
[info["ID"]] : 1
info: : 1
ids.extend(info["ID_LIKE"].split()) : 1
+----------------------------------------------------+----------------------------------------------------+ : 162
**preferred** : 1
Lifecycle : 1
Future/Task/awaitable : 1
"loop.close()" : 1
"loop.is_running()" : 1
*at* : 1
Thread/Process : 1
(UDP) : 3
"loop.sendfile()" : 2
"loop.sock_recvfrom()" : 1
"loop.sock_recvfrom_into()" : 1
"loop.sock_sendto()" : 1
"loop.sock_connect()" : 1
"loop.remove_reader()" : 1
"loop.remove_writer()" : 1
"loop.call_exception_handler()" : 1
"loop.set_exception_handler()" : 1
"loop.default_exception_handler()" : 1
loop.call_later() : 1
echo-client : 1
add_reader() : 1
loop.add_signal_handler() : 1
"transport.close()" : 2
"transport.is_closing()" : 1
"transport.get_extra_info()" : 1
"transport.set_protocol()" : 1
"transport.get_protocol()" : 1
(TCP : 4
etc: : 2
"transport.is_reading()" : 1
"transport.pause_reading()" : 1
"transport.resume_reading()" : 1
"transport.write()" : 1
"transport.writelines()" : 1
"transport.can_write_eof()" : 1
"transport.write_eof()" : 2
"transport.abort()" : 2
"transport.get_write_buffer_size()" : 1
"transport.set_write_buffer_limits()" : 1
"loop.create_datagram_endpoint()": : 1
"transport.sendto()" : 1
"loop.subprocess_shell()": : 1
"transport.get_pid()" : 1
"transport.get_pipe_transport()" : 1
(*stdin* : 1
*stderr*) : 1
"transport.get_returncode()" : 1
"transport.kill()" : 1
"transport.send_signal()" : 1
"transport.terminate()" : 1
**callback : 1
methods**: : 1
"connection_lost()" : 1
"pause_writing()" : 4
"resume_writing()" : 4
drains : 2
Pipes) : 1
"data_received()" : 2
"eof_received()" : 3
"get_buffer()" : 4
"buffer_updated()" : 2
"datagram_received()" : 1
"error_received()" : 1
"pipe_connection_lost()" : 1
"asyncio.get_event_loop_policy()" : 1
"asyncio.set_event_loop_policy()" : 1
Lib/tkinter/scrolledtext.py : 1
scroll : 5
thing." : 1
"ScrolledText" : 2
"Grid" : 1
"Pack" : 1
tkinter.scrolledtext.ScrolledText(master=None : 1
surrounds : 1
vbar : 1
+---------------------------+-------------------------+-------------------------+---------------------------+ : 2
|===========================|=========================|=========================|===========================| : 1
**A** : 1
**E** : 1
**L** : 1
**R** : 1
**M** : 1
**B** : 1
**F** : 1
**S** : 1
**G** : 1
**N** : 1
**O** : 1
**C** : 1
"object()" : 1
**T** : 1
**H** : 1
**P** : 1
**V** : 1
**Z** : 1
**D** : 1
**I** : 1
**_** : 1
abs(x) : 3
aiter(async_iterable) : 1
"x.__aiter__()" : 1
2-argument : 1
all(iterable) : 1
all(iterable): : 1
anext(async_iterator) : 1
anext(async_iterator : 1
*async_iterator* : 1
any(iterable) : 1
any(iterable): : 1
ascii(object) : 1
bin(x) : 1
bin(3) : 1
'0b11' : 1
bin(-10) : 1
'-0b1010' : 1
format(14 : 2
'#b') : 1
('0b1110' : 2
'1110') : 2
f'{14:#b}' : 1
f'{14:b}' : 1
bool(x=False) : 1
breakpoint(*args : 1
**kws) : 1
"kws" : 1
"builtins.breakpoint" : 1
bytearray(source=b'') : 1
bytearray(source : 2
*errors*) : 1
256" : 3
bytes(source=b'') : 1
bytes(source : 2
non-mutating : 1
callable(object) : 1
(calling : 1
instance); : 1
chr(i) : 1
"chr(97)" : 1
"chr(8364)" : 1
"'€'" : 1
1,114,111 : 1
(0x10FFFF : 1
"C.f()") : 2
"C().f()") : 2
compile(source : 1
dont_inherit=False : 1
("'<string>'" : 1
"'exec'" : 4
"'eval'" : 3
"'single'" : 4
*dont_inherit* : 3
(future : 1
"PyCF_" : 1
complex(real=0 : 1
imag=0) : 1
complex(string) : 1
*imag**1j : 1
"0j" : 2
"complex(x)" : 1
"x.__complex__()" : 1
"complex('1+2j')" : 1
"complex('1 : 1
2j')" : 1
Falls : 3
delattr(object : 1
"delattr(x : 1
'foobar')" : 2
x.foobar" : 1
"setattr()") : 2
dict(**kwarg) : 1
dict(mapping : 2
**kwarg) : 2
dict(iterable : 2
dir(object) : 1
'struct'] : 1
dir(struct) : 1
['Struct' : 1
'__builtins__' : 1
'__cached__' : 1
'__initializing__' : 1
'_clearcache' : 1
'calcsize' : 1
'error' : 1
'pack' : 1
'pack_into' : 1
'unpack' : 1
'unpack_from'] : 1
Shape: : 1
__dir__(self): : 1
['area' : 2
'perimeter' : 1
'location'] : 1
Shape() : 1
'perimeter'] : 1
rigorously : 1
(non-complex) : 1
"(q : 1
"math.floor(a : 1
"q : 3
abs(a : 1
abs(b)" : 1
enumerate(iterable : 2
start=0) : 2
seasons : 1
['Spring' : 1
'Summer' : 1
'Fall' : 1
'Winter'] : 1
list(enumerate(seasons)) : 1
'Spring') : 2
'Summer') : 2
'Fall') : 2
'Winter')] : 2
list(enumerate(seasons : 1
start=1)) : 1
eval(expression : 1
(technically : 2
*eval()* : 1
(non-locals) : 1
eval('x+1') : 1
"eval()"'s : 1
Hints: : 1
exec(object : 1
closure=None) : 1
Manual) : 1
closure--a : 1
filter(function : 1
"filter(function : 1
"(item : 2
function(item))" : 1
"itertools.filterfalse()" : 3
float(x=0.0) : 1
"'-'"; : 1
(not-a-number) : 1
"floatvalue" : 1
["."] : 1
[exponent] : 1
floatvalue : 1
[sign] : 6
nan) : 1
"digit" : 2
(character : 1
"Nd") : 1
"Inf" : 1
"INFINITY" : 1
"iNfINity" : 1
"float(x)" : 2
"x.__float__()" : 1
float('+1.23') : 1
1.23 : 1
float(' : 1
-12345\n') : 1
-12345.0 : 1
float('1e-003') : 1
float('+1E6') : 1
1000000.0 : 1
float('-Infinity') : 1
format(value : 1
format_spec='') : 1
"str(value)" : 1
"format(value : 1
"type(value).__format__(value : 1
"object().__format__(format_spec)" : 1
frozenset(iterable=set()) : 1
getattr(object : 2
"getattr(x : 1
"x.foobar" : 1
mangle : 2
hasattr(object : 1
"getattr(object : 1
hash(object) : 1
help(request) : 1
hex(x) : 1
hex(255) : 1
'0xff' : 1
hex(-42) : 1
'-0x2a' : 1
'%#x' : 1
'%x' : 1
'%X' : 1
('0xff' : 3
'ff' : 3
'FF') : 3
format(255 : 3
'#x') : 1
'X') : 1
f'{255:#x}' : 1
f'{255:x}' : 1
f'{255:X}' : 1
id(object) : 1
"builtins.id" : 1
(stripping : 1
input('--> : 1
Circus : 1
"builtins.input" : 1
"builtins.input/result" : 1
int(x=0) : 1
"int(x)" : 2
"x.__int__()" : 1
"x.__index__()" : 1
"x.__trunc__()" : 1
base-n : 1
0--9 : 1
10--35 : 1
"Z") : 1
2--36 : 1
Base-2 : 1
-8 : 3
-16 : 1
"0b"/"0B" : 1
"0o"/"0O" : 1
"0x"/"0X" : 1
zeros: : 2
"int('010' : 2
"int('010')" : 1
"base.__index__" : 2
"base.__int__" : 1
isinstance(object : 1
classinfo) : 2
*classinfo* : 8
*virtual*) : 2
issubclass(class : 1
iter(object) : 1
iter(object : 1
block-reader : 1
reached: : 1
open('mydata.db' : 1
iter(partial(f.read : 1
64) : 1
b''): : 1
process_block(block) : 1
"range(2 : 1
100)" : 1
*iterables) : 1
max(iterable : 2
max(arg1 : 1
sort-stability : 2
key=keyfunc : 1
reverse=True)[0]" : 1
"heapq.nlargest(1 : 1
key=keyfunc)" : 2
memoryview(object) : 2
"memory : 1
view" : 1
min(iterable : 2
min(arg1 : 1
key=keyfunc)[0]" : 1
"heapq.nsmallest(1 : 1
next(iterator) : 1
next(iterator : 1
featureless : 1
oct(x) : 1
oct(8) : 1
'0o10' : 1
oct(-56) : 1
'-0o70' : 1
'%#o' : 1
'%o' : 1
('0o12' : 3
'12') : 3
format(10 : 2
'o') : 1
f'{10:#o}' : 1
f'{10:o}' : 1
open(file : 2
(truncating : 2
unspecified.) : 1
+-----------+-----------------------------------------------------------------+ : 8
|===========|=================================================================| : 1
"'t'" : 2
(reading : 2
(open : 1
"'rt'") : 1
"'w+'" : 1
"'r+b'" : 1
"mode='r+'") : 1
"write_through" : 1
"io.TextIOWrapper.reconfigure()" : 1
device's : 1
"block : 1
"io.DEFAULT_BUFFER_SIZE" : 1
"Interactive" : 1
(whatever : 1
handled—this : 1
Handlers) : 1
"&#nnn;" : 1
dir_fd : 2
os.open('somedir' : 1
os.O_RDONLY) : 2
opener(path : 1
flags): : 1
dir_fd=dir_fd) : 1
open('spamspam.txt' : 1
opener=opener) : 1
somedir/spamspam.txt' : 1
file=f) : 1
os.close(dir_fd) : 1
("'w'" : 1
varies: : 1
"io.BufferedReader"; : 1
"io.BufferedWriter" : 1
"io.BufferedRandom" : 1
("'x'") : 1
"ord('a')" : 1
"97" : 1
"ord('€')" : 1
(Euro : 1
"8364" : 1
pow(base : 1
mod=None) : 1
*exp*; : 1
*mod* : 8
"pow(base : 2
mod") : 1
exp)" : 1
"base**exp" : 1
"pow(10 : 2
-2)" : 1
"pow(-9 : 1
0.5)" : 1
"3j" : 1
"pow(inv_base : 1
-exp : 1
mod)" : 1
*inv_base* : 1
"38" : 1
"97": : 1
mod=97) : 1
97 : 2
"pow" : 1
permitting : 1
print(*objects : 1
flush=False) : 1
"write(string)" : 1
"file.write(...)" : 1
*fget* : 1
*fset* : 1
*fdel* : 1
"c.x" : 1
"c.x : 1
c.x" : 1
*fget*'s : 1
Parrot: : 1
self._voltage : 2
voltage(self): : 1
voltage.""" : 1
"@property" : 1
"voltage()" : 1
*voltage* : 1
"Get : 1
voltage." : 1
"""I'm : 1
property.""" : 1
"fget" : 1
"fset" : 1
"fdel" : 1
range(stop) : 2
range(start : 2
repr(object) : 1
"eval()"; : 2
reversed(seq) : 1
round(number : 1
ndigits=None) : 1
*ndigits*; : 1
"round(0.5)" : 1
"round(-0.5)" : 1
"round(1.5)" : 1
"2") : 1
"round" : 1
"number.__round__" : 1
"round(2.675 : 1
"2.67" : 1
"2.68" : 1
set(iterable) : 1
setattr(object : 1
"setattr(x : 1
'foobar' : 2
123)" : 1
"x.foobar : 1
slice(stop) : 1
slice(start : 1
"a[start:stop:step]" : 1
"a[start:stop : 1
i]" : 1
salary : 2
grade) : 2
...): : 1
"f()") : 1
regular_function(): : 1
staticmethod(regular_function) : 1
str(object='') : 2
str(object=b'' : 2
sum(iterable : 1
Sums : 1
*iterable*'s : 3
"''.join(sequence)" : 1
"itertools.chain()" : 1
super(type : 1
object_or_type=None) : 1
*object_or_type* : 3
"__mro__" : 4
"D : 1
"C : 1
"issubclass(type2 : 1
classmethods) : 1
*super* : 3
maintainable : 1
"diamond : 1
diagrams" : 1
method(self : 1
super().method(arg) : 1
super(C : 1
self).method(arg) : 1
"super().__getitem__(name)" : 1
"super()[name]" : 1
type(object) : 1
type('X' : 1
dict(a=1)) : 1
"__init_subclass__()") : 1
*metaclass*) : 1
vars(object) : 1
zip(*iterables : 1
zip([1 : 1
['sugar' : 1
'spice' : 1
'everything : 2
nice']): : 1
'sugar') : 1
'spice') : 1
nice') : 1
formally: : 1
transposing : 1
lazy: : 1
lengths; : 1
cutting : 1
list(zip(range(3) : 1
['fee' : 2
'fi' : 2
'fo' : 2
'fum'])) : 1
'fee') : 2
'fi') : 2
'fo')] : 1
"zip()": : 2
list(zip(('a' : 1
strict=True)) : 1
others: : 1
zip(range(3) : 1
'fum'] : 1
strict=True): : 1
'fo') : 1
zip() : 1
manifesting : 1
hard-to-find : 1
Shorter : 1
1-tuples : 1
tricks: : 1
clustering : 1
n-length : 2
"zip(*[iter(s)]*n : 1
strict=True)" : 1
list(zip(x : 1
zip(*zip(x : 1
list(x2) : 1
list(y2) : 1
"builtins.__import__") : 1
**strongly** : 1
302**) : 1
attain : 1
__import__('spam' : 1
spam.ham" : 1
__import__('spam.ham' : 2
spam.ham : 1
sausage : 1
saus" : 1
_temp : 1
['eggs' : 2
'sausage'] : 1
_temp.eggs : 1
saus : 1
_temp.sausage : 1
"spam.ham" : 1
Mac-style : 1
Lib/ftplib.py : 1
959** : 1
FTP('ftp.us.debian.org') : 1
anonymous@ : 1
successful.' : 1
ftp.cwd('debian') : 1
"debian" : 1
'250 : 1
changed.' : 1
ftp.retrlines('LIST') : 1
-rw-rw-r-- : 1
1176 : 8
1063 : 1
10:18 : 1
drwxr-sr-x : 2
'226 : 2
OK.' : 1
open('README' : 1
ftp.retrbinary('RETR : 1
README' : 1
fp.write) : 1
complete.' : 1
ftp.quit() : 1
'221 : 1
Goodbye.' : 1
ftplib.FTP(host='' : 1
user='' : 2
passwd='' : 3
acct='' : 2
"connect(host)" : 1
"login(user : 1
acct)" : 1
*passwd* : 5
*acct* : 3
ftplib.FTP_TLS(host='' : 1
4217** : 1
securing : 1
authenticating : 1
Securing : 1
"prot_p()" : 1
ftps : 1
FTP_TLS('ftp.pureftpd.org') : 1
ftps.login() : 1
ftps.prot_p() : 1
"private"' : 1
ftps.nlst() : 1
['6jack' : 1
'OpenBSD' : 1
'antilink' : 1
'blogbench' : 1
'bsdcam' : 1
'clockspeed' : 1
'djbdns-jedi' : 1
'docs' : 1
'eaccelerator-jedi' : 1
'favicon.ico' : 1
'francotone' : 1
'fugu' : 1
'libpuzzle' : 1
'metalog' : 1
'minidentd' : 1
'misc' : 1
'mysql-udf-global-user-variables' : 1
'php-jenkins-hash' : 1
'php-skein-hash' : 1
'php-webdav' : 1
'phpaudit' : 1
'phpbench' : 1
'pincaster' : 1
'ping' : 1
'posto' : 1
'pub' : 1
'public' : 1
'public_keys' : 1
'pure-ftpd' : 1
'qscan' : 1
'qtc' : 1
'sharedance' : 1
'skycache' : 1
'sound' : 1
'tmp' : 1
'ucarp'] : 1
ftplib.error_reply : 1
ftplib.error_temp : 1
(response : 2
400--499) : 1
ftplib.error_perm : 1
500--599) : 1
ftplib.error_proto : 1
1--5 : 2
ftplib.all_errors : 1
"lines" : 1
FTP.set_debuglevel(level) : 1
FTP.connect(host='' : 1
"21" : 1
"ftplib.connect" : 1
FTP.getwelcome() : 1
disclaimers : 2
user.) : 2
FTP.login(user='anonymous' : 1
acct='') : 1
"'anonymous'" : 2
"'anonymous@'" : 1
established; : 1
"accounting : 1
information"; : 1
FTP.abort() : 1
FTP.sendcmd(cmd) : 1
"ftplib.sendcmd" : 2
FTP.voidcmd(cmd) : 1
200--299) : 1
"error_reply" : 3
FTP.retrbinary(cmd : 1
blocksize=8192 : 2
rest=None) : 4
"RETR" : 2
"'RETR : 1
filename'" : 1
"transfercmd()" : 6
FTP.retrlines(cmd : 1
callback=None) : 3
"retrbinary()") : 1
"NLST" : 4
"'LIST'") : 1
FTP.set_pasv(val) : 1
"passive" : 1
Passive : 1
FTP.storbinary(cmd : 1
"STOR" : 2
""STOR : 1
filename"" : 1
FTP.storlines(cmd : 1
"storbinary()") : 1
FTP.transfercmd(cmd : 1
Initiate : 1
"EPRT" : 1
"PORT" : 1
"EPSV" : 1
"PASV" : 1
"REST" : 2
FTP.ntransfercmd(cmd : 1
FTP.mlsd(path='' : 1
facts=[]) : 1
"MLSD" : 1
3659**) : 1
*facts* : 2
"["type" : 1
"perm"]") : 1
facts : 3
FTP.nlst(argument[ : 1
"mlsd()" : 2
FTP.dir(argument[ : 1
"retrlines()"; : 1
FTP.rename(fromname : 1
toname) : 1
*fromname* : 1
*toname* : 1
FTP.delete(filename) : 1
"error_perm" : 1
FTP.cwd(pathname) : 1
FTP.mkd(pathname) : 1
FTP.pwd() : 1
FTP.rmd(dirname) : 1
FTP.size(filename) : 1
"SIZE" : 1
FTP.quit() : 1
"polite" : 1
FTP.close() : 1
unilaterally : 1
FTP_TLS.ssl_version : 1
"ssl.PROTOCOL_SSLv23") : 1
FTP_TLS.auth() : 1
FTP_TLS.ccc() : 1
FTP_TLS.prot_p() : 1
FTP_TLS.prot_c() : 1
Lib/timeit.py : 1
traps : 14
Peters' : 1
"Algorithms" : 1
Cookbook* : 1
'"-".join(str(n) : 1
range(100))' : 2
30.2 : 1
usec : 9
'"-".join([str(n) : 1
range(100)])' : 2
'"-".join(map(str : 1
range(100)))' : 2
23.2 : 1
timeit.timeit('"-".join(str(n) : 1
number=10000) : 4
0.3018611848820001 : 1
timeit.timeit('"-".join([str(n) : 1
0.2727368790656328 : 1
timeit.timeit('"-".join(map(str : 1
0.23702679807320237 : 1
Interface: : 1
timeit.timeit(lambda: : 1
"-".join(map(str : 1
range(100))) : 1
0.19665591977536678 : 1
timeit.timeit(stmt='pass' : 1
setup='pass' : 3
timer=<default : 2
timer> : 2
number=1000000 : 2
globals=None) : 3
*setup* : 7
timeit.repeat(stmt='pass' : 1
repeat=5 : 1
timeit.default_timer() : 1
timeit.Timer(stmt='pass' : 1
timer=<timer : 1
function> : 1
"'pass'"; : 1
*stmt* : 2
timeit's : 1
"autorange()" : 1
timeit(number=1000000) : 1
timeit.Timer('for : 1
oct(i)' : 1
'gc.enable()').timeit() : 1
autorange(callback=None) : 1
"callback(number : 1
time_taken)" : 1
repeat(repeat=5 : 1
number=1000000) : 1
snippet; : 1
print_exc(file=None) : 1
Timer(...) : 1
t.timeit(...) : 1
t.repeat(...) : 1
t.print_exc() : 1
[-n : 1
N] : 2
[-u : 1
U] : 1
S] : 1
[statement : 1
--number=N : 1
'statement' : 1
--repeat=N : 1
--setup=S : 1
"pass") : 1
--process : 1
wallclock : 1
--unit=U : 1
"nsec" : 1
"default_timer()" : 1
beginning: : 1
'text : 2
string"; : 5
"g"' : 2
'char : 1
5000000 : 1
0.0877 : 1
'text.find(char)' : 1
0.342 : 1
('best : 1
5') : 1
timeit.timeit('char : 1
setup='text : 3
"g"') : 3
0.41440500499993504 : 1
timeit.timeit('text.find(char)' : 1
1.7246671520006203 : 1
timeit.Timer('char : 1
t.timeit() : 1
0.3955516149999312 : 1
t.repeat() : 1
[0.40183617287970225 : 1
0.37027556854118704 : 1
0.38344867356679524 : 1
0.3712595970846668 : 1
0.37866875250654886] : 1
"try"/"except" : 1
'try:' : 2
str.__bool__' : 1
'except : 2
AttributeError:' : 2
pass' : 4
20000 : 1
15.7 : 1
hasattr(str : 2
"__bool__"): : 2
50000 : 1
4.26 : 1
int.__bool__' : 1
200000 : 1
1.43 : 1
hasattr(int : 2
2.23 : 1
str.__bool__ : 1
timeit.timeit(stmt=s : 4
0.9138244460009446 : 1
'__bool__'): : 2
0.5829014980008651 : 1
int.__bool__ : 1
0.04215312199994514 : 1
0.08588060699912603 : 1
"""Stupid : 1
function""" : 1
range(100)] : 1
print(timeit.timeit("test()" : 1
setup="from : 1
test")) : 1
x**4 : 1
h(x): : 1
x**8 : 1
print(timeit.timeit('[func(42) : 1
(f,g,h)]' : 1
globals=globals())) : 1
Lib/email/contentmanager.py : 1
email.contentmanager.ContentManager : 1
"get_content" : 2
"set_content" : 3
get_content(msg : 1
"mimetype" : 1
("maintype/subtype") : 1
set_content(msg : 1
"multipart" : 10
"TypeError"; : 1
"clear_content()" : 1
("typ : 1
type(obj)") : 1
("typ") : 1
("typ.__module__ : 1
typ.__qualname__") : 1
("typ.__qualname__") : 1
("typ.__name__") : 1
("typ.__mro__") : 1
add_get_handler(key : 1
add_set_handler(typekey : 1
*typekey* : 2
email.contentmanager.raw_data_manager : 1
email.contentmanager.get_content(msg : 1
errors='replace') : 3
parts) : 5
"message/rfc822" : 3
non-multipart : 1
email.contentmanager.set_content(msg : 3
<'str'> : 1
subtype="plain" : 1
charset='utf-8' : 1
cte=None : 2
disposition=None : 3
cid=None : 3
params=None : 3
<'bytes'> : 1
cte="base64" : 1
<'EmailMessage'> : 1
*msg*: : 1
"message/partial" : 1
"external-body" : 1
*disposition* : 3
*cid* : 2
*Content-ID* : 3
"headername: : 1
headervalue" : 1
(distinguished : 1
"obj[index] : 1
97" : 2
"obj[i1:i2] : 1
b'...'" : 1
memory-mapping : 1
"ACCESS_READ" : 6
"ACCESS_WRITE" : 2
"ACCESS_COPY" : 3
write-through : 2
"ACCESS_DEFAULT" : 2
*prot* : 5
fileno : 1
mmap.mmap(fileno : 2
tagname=None : 1
access=ACCESS_DEFAULT[ : 2
**(Windows : 1
version)** : 2
*tagname* : 7
"ALLOCATIONGRANULARITY" : 3
"mmap.__new__" : 2
flags=MAP_SHARED : 1
prot=PROT_WRITE|PROT_READ : 1
**(Unix : 1
"MAP_PRIVATE" : 1
"MAP_SHARED" : 2
protection; : 1
"PROT_READ" : 1
"PROT_WRITE" : 1
"PROT_READ : 1
PROT_WRITE" : 1
"PAGESIZE" : 3
open("hello.txt" : 2
Python!\n") : 1
"r+b") : 1
memory-map : 1
mm : 3
mmap.mmap(f.fileno() : 1
print(mm.readline()) : 3
Python!\n" : 1
print(mm[:5]) : 1
b"Hello" : 1
mm[6:] : 1
world!\n" : 2
mm.seek(0) : 2
mm.close() : 2
mmap.mmap(-1 : 2
mm: : 1
mm.write(b"Hello : 2
find(sub[ : 1
*sub* : 23
[*start* : 4
*end*] : 4
flush([offset[ : 1
size]]) : 2
Flushes : 3
disk; : 1
madvise(option[ : 1
length]]) : 1
spanned : 1
move(dest : 1
read([n]) : 1
read_byte() : 1
resize(newsize) : 1
**On : 1
Windows**: : 1
pagefile) : 1
rfind(sub[ : 1
seek(pos[ : 1
whence]) : 1
size() : 1
write(bytes) : 1
(never : 1
"len(bytes)" : 1
write_byte(byte) : 1
*byte* : 1
pointer; : 1
mmap.MADV_NORMAL : 1
mmap.MADV_RANDOM : 1
mmap.MADV_SEQUENTIAL : 1
mmap.MADV_WILLNEED : 1
mmap.MADV_DONTNEED : 1
mmap.MADV_REMOVE : 1
mmap.MADV_DONTFORK : 1
mmap.MADV_DOFORK : 1
mmap.MADV_HWPOISON : 1
mmap.MADV_MERGEABLE : 1
mmap.MADV_UNMERGEABLE : 1
mmap.MADV_SOFT_OFFLINE : 1
mmap.MADV_HUGEPAGE : 1
mmap.MADV_NOHUGEPAGE : 1
mmap.MADV_DONTDUMP : 1
mmap.MADV_DODUMP : 1
mmap.MADV_FREE : 1
mmap.MADV_NOSYNC : 1
mmap.MADV_AUTOSYNC : 1
mmap.MADV_NOCORE : 1
mmap.MADV_CORE : 1
mmap.MADV_PROTECT : 1
mmap.MADV_FREE_REUSABLE : 1
mmap.MADV_FREE_REUSE : 1
"mmap.madvise()" : 1
mmap.MAP_SHARED : 1
mmap.MAP_PRIVATE : 1
mmap.MAP_DENYWRITE : 1
mmap.MAP_EXECUTABLE : 1
mmap.MAP_ANON : 1
mmap.MAP_ANONYMOUS : 1
mmap.MAP_POPULATE : 1
mmap.MAP_STACK : 1
"mmap.mmap()" : 1
MAP_POPULATE : 1
MAP_STACK : 1
Lib/html/__init__.py : 1
html.escape(s : 1
quote=True) : 1
HTML-safe : 1
*quote* : 1
translated; : 1
"<a : 1
href="...">" : 1
html.unescape(s) : 1
"&#x3e;") : 1
"list : 1
HTML/XHTML : 1
lenient : 1
Lib/logging/config.py : 1
incomplete) : 1
Inability : 1
"DictConfigurator" : 4
"configure()" : 4
"dictConfigClass" : 4
dictConfig(config): : 1
dictConfigClass(config).configure() : 1
"DictConfigurator.__init__()" : 1
uncustomized : 1
logging.config.fileConfig(fname : 1
disable_existing_loggers=True : 1
"configparser"-format : 1
pre-canned : 1
**fname** : 1
"RawConfigParser" : 4
"RawConfigParser"-derived : 1
"Configparser" : 1
"fname" : 2
"read_file()"; : 1
**defaults** : 1
**disable_existing_loggers** : 1
facilitates: : 1
"fileConfig" : 1
logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT : 1
verify=None) : 1
"DEFAULT_LOGGING_CONFIG_PORT" : 1
"stopListening()" : 1
encrypting : 1
"struct.pack('>L' : 1
multi-user : 1
victim : 1
victim's : 2
(importing : 1
*extreme : 1
caution* : 1
'startup' : 1
'configuring : 1
dict' : 1
"'()'" : 6
*formatters* : 1
"datefmt" : 1
"validate" : 1
>=3.8) : 1
formatter's : 1
customised : 1
condensed : 2
"logging.Filter" : 1
(mandatory) : 1
filters: : 3
[allow_foo] : 1
logging.handlers.RotatingFileHandler : 1
logconfig.log : 1
maxBytes: : 1
backupCount: : 1
"console" : 1
"logging.handlers.RotatingFileHandler" : 1
"filename='logconfig.log' : 1
maxBytes=1024 : 1
backupCount=3" : 1
*loggers* : 1
*incremental* : 2
*disable_existing_loggers* : 1
augmenting : 1
environment; : 1
"incremental" : 1
brief: : 2
'brief' : 1
precise: : 1
'precise' : 1
h1: : 1
#This : 2
'h1' : 1
h2: : 1
'h2' : 1
foo.bar.baz: : 1
[h1 : 1
h2] : 1
dictionary.) : 1
"precise" : 2
"h1" : 4
"h2" : 2
(Loggers : 1
classes.) : 2
'factory' : 1
'%(message)s' : 2
datefmt: : 1
%H:%M:%S' : 2
custom: : 2
my.package.customFormatterFactory : 1
spam: : 1
99.9 : 3
Shown : 1
sub-dictionaries: : 1
'datefmt' : 1
sub-dictionary : 2
'()' : 2
'my.package.customFormatterFactory' : 2
'answer' : 2
**remaining** : 1
my.package.customFormatterFactory(bar='baz' : 1
spam=99.9 : 1
answer=42) : 1
"answer" : 1
"cfg://foo" : 2
"ext://bar" : 2
"'bar'" : 3
"'bozz'" : 1
"cfg://handlers.foo" : 4
"handlers['foo']" : 1
configured) : 1
_after_ : 1
YAML) : 1
"'sys.stderr'" : 1
"'ext://sys.stderr'" : 1
"^(?P<prefix>[a-z]+)://(?P<suffix>.*)$" : 1
prefix-dependent : 1
"'DEBUG'" : 1
"my.package.MyHandler" : 1
specify: : 1
my.package.MyHandler : 1
alternate: : 1
cfg://handlers.file : 1
"'cfg://handlers.file'" : 1
logging.handlers.SMTPHandler : 1
mailhost: : 1
fromaddr: : 1
my_app@domain.tld : 1
toaddrs: : 1
support_team@domain.tld : 1
dev_team@domain.tld : 1
Houston : 1
"'cfg://handlers'" : 1
"'cfg://handlers.email" : 1
"'cfg://handlers.email.toaddrs[1]" : 1
"'dev_team@domain.tld'" : 1
"'cfg://handlers.email.toaddrs[0]'" : 1
"'support_team@domain.tld'" : 1
"'cfg://handlers.email.subject'" : 1
"'cfg://handlers.email[subject]'" : 1
"cfg://handlers.myhandler.mykey.123" : 1
"config_dict['handlers']['myhandler']['mykey']['123']" : 2
"cfg://handlers.myhandler.mykey[123]" : 1
"config_dict['handlers']['myhandler']['mykey'][123]" : 1
"importer" : 1
"BaseConfigurator" : 1
BaseConfigurator : 1
BaseConfigurator.importer : 1
staticmethod(import_module) : 1
configurator : 1
"[loggers]" : 2
"[handlers]" : 4
"[formatters]" : 3
"log01" : 1
"[logger_log01]" : 1
"hand01" : 1
"[handler_hand01]" : 1
"form01" : 1
"[formatter_form01]" : 1
"[logger_root]" : 1
transitioning : 1
keys=root,log02,log03,log04,log05,log06,log07 : 1
keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09 : 1
keys=form01,form02,form03,form04,form05,form06,form07,form08,form09 : 1
level=NOTSET : 4
handlers=hand01 : 2
"DEBUG : 1
CRITICAL" : 1
[logger_parser] : 1
propagate=1 : 1
qualname=compiler.parser : 1
"qualname" : 1
Sections : 2
[handler_hand01] : 1
formatter=form01 : 1
'log : 1
everything' : 1
("logging._defaultFormatter") : 1
[handler_hand02] : 1
class=FileHandler : 1
formatter=form02 : 1
args=('python.log' : 1
[handler_hand03] : 1
class=handlers.SocketHandler : 1
level=INFO : 1
formatter=form03 : 1
args=('localhost' : 3
handlers.DEFAULT_TCP_LOGGING_PORT) : 1
[handler_hand04] : 1
class=handlers.DatagramHandler : 1
level=WARN : 2
formatter=form04 : 1
handlers.DEFAULT_UDP_LOGGING_PORT) : 1
[handler_hand05] : 1
class=handlers.SysLogHandler : 1
level=ERROR : 1
formatter=form05 : 1
args=(('localhost' : 1
handlers.SYSLOG_UDP_PORT) : 1
handlers.SysLogHandler.LOG_USER) : 1
[handler_hand06] : 1
class=handlers.NTEventLogHandler : 1
level=CRITICAL : 1
formatter=form06 : 1
args=('Python : 1
Application' : 2
'Application') : 1
[handler_hand07] : 1
class=handlers.SMTPHandler : 1
formatter=form07 : 1
'from@abc' : 1
['user1@abc' : 1
'user2@xyz'] : 1
'Logger : 1
Subject') : 1
kwargs={'timeout': : 1
10.0} : 1
[handler_hand08] : 1
class=handlers.MemoryHandler : 1
formatter=form08 : 1
target= : 1
args=(10 : 1
ERROR) : 1
[handler_hand09] : 1
class=handlers.HTTPHandler : 1
formatter=form09 : 1
args=('localhost:9022' : 1
'/log' : 1
'GET') : 1
kwargs={'secure': : 1
typified : 1
[formatter_form01] : 1
format=F1 : 1
datefmt= : 1
style=% : 1
class=logging.Formatter : 1
mutual : 2
machine; : 1
Lib/sqlite3/ : 1
in-depth : 3
https://www.w3schools.com/sql/ : 1
"tutorial.db" : 1
con : 24
sqlite3.connect("tutorial.db") : 2
"con" : 3
"con.cursor()" : 2
"Cursor": : 1
cur : 16
con.cursor() : 6
"movie" : 2
"CREATE : 1
TABLE" : 1
"cur.execute(...)": : 2
cur.execute("CREATE : 1
TABLE : 18
movie(title : 1
score)") : 1
"sqlite_master" : 2
"cur.execute(...)" : 2
"res" : 2
"res.fetchone()" : 2
row: : 1
cur.execute("SELECT : 14
sqlite_master") : 1
res.fetchone() : 5
('movie',) : 1
sqlite_master : 1
name='spam'") : 1
"INSERT" : 6
cur.execute(""" : 2
INSERT : 6
INTO : 20
VALUES : 1
('Monty : 1
Grail' : 2
8.2) : 1
('And : 1
Different' : 1
7.5) : 2
"con.commit()" : 1
transaction: : 1
con.commit() : 3
"SELECT" : 5
now-familiar : 1
"res.fetchall()" : 1
rows: : 3
movie") : 1
res.fetchall() : 1
[(8.2,) : 1
(7.5,)] : 1
"tuple"s : 1
row's : 1
"score" : 1
"cur.executemany(...)": : 1
("Monty : 3
Live : 2
Hollywood : 2
Bowl" : 1
7.9) : 1
Life" : 1
1983 : 1
Brian" : 1
cur.executemany("INSERT : 5
VALUES(? : 3
? : 1
?)" : 5
query: : 2
ORDER : 5
year"): : 1
(1971 : 1
'And : 1
Different') : 1
(1975 : 1
'Monty : 5
Grail') : 1
(1979 : 1
Brian") : 1
(1982 : 1
Bowl') : 1
(1983 : 1
Life") : 1
"(year : 1
title)" : 1
"con.close()" : 1
con.close() : 10
new_con : 1
new_cur : 1
new_con.cursor() : 1
new_cur.execute("SELECT : 1
DESC") : 1
scoring : 2
{title!r} : 1
{year}') : 1
sqlite3.connect(database : 1
timeout=5.0 : 1
detect_types=0 : 1
isolation_level='DEFERRED' : 1
check_same_thread=True : 1
factory=sqlite3.Connection : 1
cached_statements=128 : 1
uri=False) : 1
**database** : 1
(*path-like : 1
"":memory:"" : 1
**timeout** : 1
(*float*) : 2
**detect_types** : 1
"register_converter()" : 2
or) : 4
"PARSE_DECLTYPES" : 3
"PARSE_COLNAMES" : 3
"max(data)") : 1
*detect_types* : 8
("0") : 1
**isolation_level** : 1
"isolation_level" : 6
""DEFERRED"" : 3
""EXCLUSIVE"" : 2
""IMMEDIATE""; : 1
**check_same_thread** : 1
(*bool*) : 4
"threadsafety" : 1
(*Connection*) : 2
**cached_statements** : 1
**uri** : 1
Identifier) : 1
""file:"" : 1
sqlite3.complete_statement(statement) : 1
sqlite3.complete_statement("SELECT : 2
bar;") : 1
foo") : 1
sqlite3.enable_callback_tracebacks(flag : 1
experience: : 1
sqlite3.enable_callback_tracebacks(True) : 1
sqlite3.connect(":memory:") : 17
evil_trace(stmt): : 1
5/0 : 1
con.set_trace_callback(evil_trace) : 1
debug(unraisable): : 1
print(f"{unraisable.exc_value!r} : 1
{unraisable.object.__name__}") : 1
print(f"Error : 1
{unraisable.err_msg}") : 1
con.execute("SELECT : 7
ZeroDivisionError('division : 1
evil_trace : 1
sqlite3.register_adapter(type : 1
*adapter* : 1
sqlite3.register_converter(typename : 1
*typename*; : 1
sqlite3.PARSE_COLNAMES : 1
[point]" : 2
"point" : 2
sqlite3.PARSE_DECLTYPES : 1
CREATE : 4
test( : 1
"integer" : 2
number(10) : 1
sqlite3.SQLITE_OK : 1
sqlite3.SQLITE_DENY : 1
sqlite3.SQLITE_IGNORE : 1
*authorizer_callback* : 3
"Connection.set_authorizer()" : 1
whether: : 1
("SQLITE_OK") : 1
("SQLITE_DENY") : 1
("SQLITE_IGNORE") : 1
sqlite3.apilevel : 1
Hard-coded : 1
""2.0"" : 1
sqlite3.paramstyle : 1
Hard- : 1
""qmark"" : 1
"named" : 1
sqlite3.sqlite_version : 1
sqlite3.sqlite_version_info : 1
sqlite3.threadsafety : 1
**Single-thread**: : 1
mutexes : 1
**Multi-thread**: : 1
**Serialized**: : 1
threadsafety : 2
+--------------------+-------------------+------------------------+---------------------------------+ : 4
SQLITE_THREADSAFE : 1
|====================|===================|========================|=================================| : 1
single-thread : 1
multi-thread : 1
*threadsafety* : 1
hard-coding : 1
sqlite3.version : 1
sqlite3.version_info : 1
sqlite3.Connection : 1
cursor(factory=Cursor) : 1
blobopen(table : 1
readonly=False : 1
name='main') : 3
"Blob" : 4
(Binary : 2
OBject) : 2
**table** : 1
**column** : 1
**row** : 1
**readonly** : 1
""main"" : 4
Raises: : 8
**OperationalError** : 2
"WITHOUT : 2
ROWID" : 2
"zeroblob" : 1
commit() : 1
rollback() : 1
Roll : 2
implicitly; : 1
"commit()" : 2
execute(sql : 2
parameters=() : 2
*sql* : 10
executemany(sql : 2
"executemany()" : 5
executescript(sql_script : 2
"executescript()" : 5
*sql_script* : 4
create_function(name : 1
narg : 1
deterministic=False) : 1
**narg** : 1
(*callback* : 2
**deterministic** : 1
**NotSupportedError** : 2
md5sum(t): : 1
hashlib.md5(t).hexdigest() : 1
con.create_function("md5" : 1
md5sum) : 1
md5(?)" : 1
(b"foo",)): : 1
('acbd18db4cc2f85cedef654fccc4a4d8',) : 1
create_aggregate(name : 1
n_arg : 1
aggregate_class) : 1
**n_arg** : 1
**aggregate_class** : 2
(*class* : 2
"step()": : 2
"finalize()": : 2
"step()" : 2
*n_arg* : 1
MySum: : 1
step(self : 2
finalize(self): : 2
con.create_aggregate("mysum" : 1
MySum) : 1
con.execute("CREATE : 11
test(i)") : 1
cur.execute("INSERT : 4
test(i) : 2
VALUES(1)") : 1
VALUES(2)") : 1
mysum(i) : 1
test") : 3
print(cur.fetchone()[0]) : 3
create_window_function(name : 1
num_params : 1
aggregate_class : 1
**num_params** : 1
"value()": : 1
"inverse()": : 1
"value()" : 1
*num_params* : 1
3.25.0 : 1
https://www.sqlite.org/windowfunctions.html#udfwinfunc : 1
WindowSumInt: : 1
window.""" : 2
aggregate.""" : 1
inverse(self : 1
"""Remove : 1
test(x : 1
y)") : 1
("c" : 1
("d" : 1
con.create_window_function("sumint" : 1
WindowSumInt) : 1
sumint(y) : 1
ROWS : 1
BETWEEN : 1
PRECEDING : 1
FOLLOWING : 1
sum_y : 1
print(cur.fetchall()) : 2
create_collation(name : 1
"integer": : 1
collation: : 1
collate_reverse(string1 : 1
string2): : 1
string2: : 2
con.create_collation("reverse" : 1
collate_reverse) : 1
test(x)") : 1
test(x) : 1
VALUES(?)" : 6
[("a",) : 1
("b",)]) : 1
COLLATE : 1
reverse") : 1
cur: : 1
interrupt() : 1
Aborted : 1
set_authorizer(authorizer_callback) : 1
"SQLITE_OK" : 1
"SQLITE_DENY" : 1
"SQLITE_IGNORE" : 1
4th : 1
("main" : 1
"temp" : 2
5th : 1
inner-most : 1
set_progress_handler(progress_handler : 1
*progress_handler* : 2
set_trace_callback(trace_callback) : 1
*trace_callback* : 2
"enable_callback_tracebacks()" : 1
enable_load_extension(enabled : 1
*enabled* : 2
enable-loadable-sqlite-extensions" : 1
"sqlite3.enable_load_extension" : 2
con.enable_load_extension(True) : 1
fulltext : 1
con.execute("select : 1
load_extension('./fts3.so')") : 1
con.load_extension("./fts3.so") : 1
con.enable_load_extension(False) : 1
VIRTUAL : 1
fts3(name : 1
ingredients)") : 1
con.executescript(""" : 1
ingredients) : 4
VALUES('broccoli : 2
stew' : 2
'broccoli : 2
peppers : 1
tomatoes'); : 1
VALUES('pumpkin : 2
'pumpkin : 2
onions : 2
garlic : 1
celery'); : 1
pie' : 2
flour'); : 1
flour : 1
butter'); : 1
rowid : 1
ingredients : 1
MATCH : 1
'pie'"): : 1
load_extension(path : 1
"sqlite3.load_extension" : 2
iterdump() : 1
".dump" : 1
**sqlite3** : 1
example.db : 1
dump.sql : 1
sqlite3.connect('example.db') : 3
open('dump.sql' : 1
con.iterdump(): : 1
f.write('%s\n' : 1
backup(target : 1
pages=- : 1
progress=None : 1
name='main' : 1
sleep=0.250) : 1
**target** : 1
**pages** : 1
**progress** : 1
*remaining* : 1
""temp"" : 1
"ATTACH : 1
DATABASE" : 1
**sleep** : 1
progress(status : 1
total): : 1
print(f'Copied : 1
{total-remaining} : 1
{total} : 1
pages...') : 1
sqlite3.connect('backup.db') : 1
dst: : 1
src.backup(dst : 1
pages=1 : 1
progress=progress) : 1
dst.close() : 1
src.close() : 1
copy: : 1
sqlite3.connect(':memory:') : 1
src.backup(dst) : 1
getlimit(category : 1
**category** : 2
**ProgrammingError** : 4
1000000000): : 1
con.getlimit(sqlite3.SQLITE_LIMIT_SQL_LENGTH) : 1
1000000000 : 1
setlimit(category : 1
**limit** : 1
con.setlimit(sqlite3.SQLITE_LIMIT_ATTACHED : 1
con.getlimit(sqlite3.SQLITE_LIMIT_ATTACHED) : 1
serialize(* : 1
deserialize(data : 1
"serialized" : 1
**data** : 1
(*bytes*) : 1
**DatabaseError** : 1
**OverflowError** : 1
"len(data)" : 1
in_transaction : 1
autocommit : 3
changes) : 1
isolation_level : 1
""IMMEDIATE"" : 1
*isolation_level* : 1
row_factory : 2
"row_factory" : 8
text_factory : 2
"TEXT" : 4
*text_factory* : 1
AUSTRIA : 2
"Österreich" : 1
?" : 7
(AUSTRIA,)) : 2
cur.fetchone() : 6
row[0] : 7
con.text_factory : 2
type(row[0]) : 1
AUSTRIA.encode("utf-8") : 1
x.decode("utf-8") : 1
("bar",)) : 1
"barfoo" : 1
total_changes : 1
Cursors : 1
"Connection.cursor()" : 1
*iterators* : 1
data"): : 1
sqlite3.Cursor : 3
**sql** : 2
**parameters** : 2
("dict" : 1
*sequence*) : 1
"UPDATE" : 3
(Data : 2
Manipulation : 1
(*iterable*) : 1
statment : 1
("row1",) : 1
("row2",) : 1
rows) : 1
"COMMIT" : 1
cur.executescript(""" : 1
BEGIN; : 1
person(firstname : 1
age); : 1
book(title : 1
published); : 1
publisher(name : 1
COMMIT; : 1
fetchone() : 1
fetchmany(size=cursor.arraysize) : 1
"arraysize" : 2
arraysize : 2
"fetchmany()" : 2
fetchall() : 1
(remaining) : 1
forward; : 1
setinputsizes(sizes : 1
setoutputsize(size : 1
column=None : 2
Read/write : 1
*con*: : 1
cur.connection : 1
7-tuple : 1
lastrowid : 1
"lastrowid" : 2
rowcount : 1
Expression) : 1
"sqlite3.Row"; : 1
"Connection.row_factory" : 3
"Cursor.description" : 1
sqlite3.Blob : 1
"len(blob)" : 1
test(blob_col : 1
blob)") : 1
con.execute("INSERT : 3
test(blob_col) : 1
VALUES(zeroblob(13))") : 1
con.blobopen("test" : 2
"blob_col" : 2
blob: : 2
blob.write(b"hello : 1
blob.write(b"world.") : 1
blob[0] : 1
ord("H") : 1
blob[-1] : 1
ord("!") : 1
blob.read() : 1
print(greeting) : 1
"b'Hello : 1
world!'" : 1
read(length=- : 1
File) : 1
write(data : 1
origin=os.SEEK_SET : 1
positioning) : 1
blob’s : 1
sqlite3.PrepareProtocol : 1
249**) : 1
sqlite3.Warning : 1
sqlite3.Error : 1
sqlite_errorcode : 1
sqlite_errorname : 1
sqlite3.InterfaceError : 1
sqlite3.DatabaseError : 1
"DatabaseError" : 7
sqlite3.DataError : 1
sqlite3.OperationalError : 1
sqlite3.IntegrityError : 1
sqlite3.InternalError : 1
"InternalError" : 1
sqlite3.ProgrammingError : 1
sqlite3.NotSupportedError : 1
"create_function()" : 1
"NotSupportedError" : 1
"INTEGER" : 3
"REAL" : 3
"BLOB" : 3
+---------------------------------+---------------+ : 6
|=================================|===============| : 1
+---------------+------------------------------------------------+ : 6
|===============|================================================| : 1
"text_factory" : 1
dates/ISO : 1
date/timestamps : 1
fiddling : 1
sqlite3.connect(":memory:" : 3
detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES) : 1
cur.execute("create : 1
test(d : 2
timestamp)") : 1
datetime.date.today() : 1
cur.execute("insert : 1
ts) : 1
(? : 1
(today : 1
now)) : 1
cur.execute("select : 1
print(today : 1
"=>" : 3
type(row[0])) : 2
print(now : 1
row[1] : 2
type(row[1])) : 2
cur.execute('select : 1
current_date : 1
"d : 2
[date]" : 1
current_timestamp : 1
"ts : 1
[timestamp]"') : 1
print("current_date" : 1
print("current_timestamp" : 1
offset-aware : 1
"OR : 1
TRUE" : 1
TRUE; : 2
"SELECT : 1
print(sql) : 1
--' : 1
cur.execute(sql) : 1
placeholders: : 2
(qmark : 1
style) : 3
qmark : 2
lang(name : 3
first_appeared)") : 2
executemany(): : 1
{"name": : 4
1972} : 1
"Fortran" : 1
1957} : 1
1991} : 1
"Go" : 1
2009} : 1
lang : 2
VALUES(:name : 1
:year)" : 1
(1972,) : 1
first_appeared : 2
params) : 1
*adapt* : 1
*adapter : 1
callable* : 1
"__conform__(self : 1
"PrepareProtocol" : 1
__conform__(self : 1
protocol): : 2
sqlite3.PrepareProtocol: : 1
f"{self.x};{self.y}" : 1
(Point(4.0 : 1
-3.2),)) : 1
SQLite-compatible : 1
"register_adapter()" : 1
adapt_point(point): : 2
f"{point.x};{point.y}" : 2
sqlite3.register_adapter(Point : 2
adapt_point) : 2
(Point(1.0 : 1
2.5),)) : 1
*from* : 4
*converters* : 4
Converter : 1
convert_point(s): : 2
map(float : 1
s.split(b";")) : 1
Implicit: : 1
Explicit: : 1
Both: : 1
"sqlite3.PARSE_DECLTYPES : 1
sqlite3.PARSE_COLNAMES" : 1
f"Point({self.x} : 1
{self.y})" : 1
list(map(float : 1
s.split(b";"))) : 1
sqlite3.register_converter("point" : 1
convert_point) : 1
Point(4.0 : 1
-3.2) : 1
detect_types=sqlite3.PARSE_DECLTYPES) : 1
test(p : 1
point)") : 1
test(p) : 2
(p,)) : 2
print("with : 2
types:" : 1
cur.fetchone()[0]) : 2
cur.close() : 1
detect_types=sqlite3.PARSE_COLNAMES) : 1
test(p)") : 1
cur.execute('SELECT : 1
test') : 1
names:" : 1
adapt_date_iso(val): : 1
"""Adapt : 3
date.""" : 2
val.isoformat() : 2
adapt_datetime_iso(val): : 1
timezone-naive : 1
adapt_datetime_epoch(val): : 1
timestamp.""" : 1
int(val.timestamp()) : 1
sqlite3.register_adapter(datetime.date : 1
adapt_date_iso) : 1
sqlite3.register_adapter(datetime.datetime : 2
adapt_datetime_iso) : 1
adapt_datetime_epoch) : 1
convert_date(val): : 1
"""Convert : 4
object.""" : 3
datetime.date.fromisoformat(val.decode()) : 1
convert_datetime(val): : 1
datetime.datetime.fromisoformat(val.decode()) : 1
convert_timestamp(val): : 1
datetime.datetime.fromtimestamp(int(val)) : 1
sqlite3.register_converter("date" : 1
convert_date) : 1
sqlite3.register_converter("datetime" : 1
convert_datetime) : 1
sqlite3.register_converter("timestamp" : 1
convert_timestamp) : 1
concisely : 1
superfluous) : 1
("C++" : 1
1985) : 1
("Objective-C" : 1
1984) : 1
con.executemany("INSERT : 1
first_appeared) : 1
lang"): : 1
deleted" : 1
con.execute("DELETE : 1
lang").rowcount : 1
"rows") : 1
rolls : 1
lang(id : 1
INTEGER : 2
PRIMARY : 2
KEY : 2
VARCHAR : 1
UNIQUE)") : 1
con: : 2
lang(name) : 2
("Python",)) : 2
con.rollback() : 1
sqlite3.IntegrityError: : 1
print("couldn't : 1
twice") : 1
rollbacks : 1
sqlite3.connect("file:tutorial.db?mode=ro" : 1
uri=True) : 4
readonly(data)") : 1
OperationalError: : 2
sqlite3.connect("file:nosuchdb.db?mode=rw" : 1
"file:mem1?mode=memory&cache=shared" : 1
con1 : 1
sqlite3.connect(db : 2
con2 : 1
con1: : 1
con1.execute("CREATE : 1
shared(data)") : 1
con1.execute("INSERT : 1
VALUES(28)") : 1
con2.execute("SELECT : 1
shared") : 1
(28,) : 1
con.row_factory : 3
'Earth' : 3
6378 : 2
radius") : 1
row.keys() : 1
'radius'] : 1
row["name"] : 1
row["RADIUS"] : 1
dict_factory(cursor : 1
row): : 2
[column[0] : 2
{key: : 1
zip(fields : 1
row)} : 1
"tuple": : 1
dict_factory : 1
b"): : 1
namedtuple_factory(cursor : 1
namedtuple("Row" : 1
cls._make(row) : 1
"namedtuple_factory()" : 1
namedtuple_factory : 1
Row(a=1 : 1
row.b : 1
"rollback()" : 1
"BEGIN" : 1
"in_transaction" : 1
Lib/pty.py : 1
concept: : 1
pty.fork() : 1
"os.openpty()" : 1
pty.spawn(argv[ : 1
master_read[ : 1
stdin_read]]) : 1
baffle : 1
insist : 2
STDIN : 2
STDOUT : 1
*master_read* : 3
*stdin_read* : 3
pseudoterminal’s : 1
*script(1)* : 1
"typescript" : 1
parser.add_argument('-a' : 1
dest='append' : 1
parser.add_argument('-p' : 1
dest='use_python' : 1
parser.add_argument('filename' : 1
default='typescript') : 1
options.use_python : 1
os.environ.get('SHELL' : 1
'sh') : 1
options.append : 1
read(fd): : 1
1024) : 3
script.write(data) : 1
print('Script : 2
script.write(('Script : 2
%s\n' : 2
time.asctime()).encode()) : 2
pty.spawn(shell : 1
Panels : 2
curses.panel.bottom_panel() : 1
curses.panel.new_panel(win) : 1
curses.panel.top_panel() : 1
curses.panel.update_panels() : 1
"curses.doupdate()" : 1
"new_panel()" : 1
Panel.above() : 1
Panel.below() : 1
Panel.bottom() : 1
Panel.hidden() : 1
visible) : 1
Panel.hide() : 1
Panel.move(y : 1
Panel.replace(win) : 1
Panel.set_userptr(obj) : 1
panel's : 1
Panel.show() : 1
hidden) : 1
Panel.top() : 1
Panel.userptr() : 1
Panel.window() : 1
Lib/lzma.py : 1
**xz** : 1
"LZMAFile" : 10
lzma.LZMAError : 1
compressor/decompressor : 1
lzma.open(filename : 1
format=None : 2
check=- : 4
preset=None : 4
filters=None : 1
""wb"" : 2
""xb"" : 4
""a"" : 3
""ab"" : 2
""rt"" : 1
""wt"" : 1
""xt"" : 2
""at"" : 1
"LZMADecompressor" : 4
"LZMACompressor" : 4
"LZMAFile(filename : 1
lzma.LZMAFile(filename=None : 1
filters=None) : 5
already-open : 2
peek(size=- : 1
lzma.LZMACompressor(format=FORMAT_XZ : 1
"FORMAT_XZ": : 1
"FORMAT_ALONE": : 1
"FORMAT_RAW": : 1
"FORMAT_AUTO" : 2
"LZMADecompressor") : 1
"CHECK_NONE": : 1
"FORMAT_ALONE" : 2
"FORMAT_RAW" : 3
"CHECK_CRC32": : 1
"CHECK_CRC64": : 1
"FORMAT_XZ" : 3
"CHECK_SHA256": : 1
256-bit : 1
"LZMAError" : 2
OR-ed : 1
"PRESET_EXTREME" : 1
"PRESET_DEFAULT" : 1
(preset : 1
decompress) : 1
800 : 1
compressor's : 1
lzma.LZMADecompressor(format=FORMAT_AUTO : 1
memlimit=None : 2
*memlimit* : 2
"CHECK_UNKNOWN" : 1
lzma.compress(data : 1
format=FORMAT_XZ : 1
lzma.decompress(data : 1
format=FORMAT_AUTO : 1
lzma.is_check_supported(check) : 1
"CHECK_NONE" : 1
"CHECK_CRC32" : 1
"CHECK_CRC64" : 1
"CHECK_SHA256" : 1
**liblzma** : 1
""id"" : 1
filter-dependent : 1
"FILTER_LZMA1" : 1
"FORMAT_ALONE") : 1
"FILTER_LZMA2" : 1
"FORMAT_RAW") : 1
filter: : 1
"FILTER_DELTA" : 1
Branch-Call-Jump : 1
(BCJ) : 1
"FILTER_X86" : 1
"FILTER_IA64" : 1
"FILTER_ARM" : 1
"FILTER_ARMTHUMB" : 1
"FILTER_POWERPC" : 1
"FILTER_SPARC" : 1
BCJ : 2
filter): : 1
"preset": : 2
"dict_size": : 1
"lc": : 1
"lp": : 1
"lc : 1
lp" : 1
"pb": : 1
"MODE_FAST" : 1
"MODE_NORMAL" : 1
"nice_len": : 1
length" : 1
"mf": : 1
"MF_HC3" : 1
"MF_HC4" : 1
"MF_BT2" : 1
"MF_BT3" : 1
"MF_BT4" : 1
"depth": : 1
redundancy : 1
"start_offset" : 1
lzma.open("file.xz") : 1
b"Insert : 2
Here" : 2
lzma.open("file.xz" : 2
data_in : 1
data_out : 1
lzma.compress(data_in) : 1
lzc : 1
lzma.LZMACompressor() : 1
out1 : 1
lzc.compress(b"Some : 1
data\n") : 3
out2 : 2
lzc.compress(b"Another : 1
out3 : 2
lzc.compress(b"Even : 1
out4 : 1
lzc.flush() : 1
b"".join([out1 : 1
out4]) : 1
open("file.xz" : 1
f.write(b"This : 1
compressed\n") : 3
lzma.open(f : 1
lzf: : 1
lzf.write(b"This : 1
f.write(b"Not : 1
my_filters : 1
{"id": : 2
lzma.FILTER_DELTA : 1
"dist": : 1
lzma.FILTER_LZMA2 : 1
lzma.PRESET_EXTREME} : 1
filters=my_filters) : 1
f.write(b"blah : 1
blah") : 1
considerations: : 1
"base64": : 1
"cgi": : 1
"hashlib": : 1
"logging": : 1
Connection.recv() : 1
"pickle": : 1
"shelve": : 1
"ssl": : 1
"subprocess": : 1
"tempfile": : 1
"xml": : 1
reading/writing : 1
".inputrc" : 1
"libedit" : 3
time.The : 1
"readline.__doc__" : 1
libedit.If : 1
*editline*/"libedit" : 1
".editrc" : 1
"~/.editrc" : 1
*vi* : 1
python:bind : 2
^I : 1
rl_complete : 1
readline.parse_and_bind(string) : 1
"rl_parse_and_bind()" : 1
readline.read_init_file([filename]) : 1
"rl_read_init_file()" : 1
readline.get_line_buffer() : 1
("rl_line_buffer" : 1
readline.insert_text(string) : 1
"rl_insert_text()" : 1
readline.redisplay() : 1
"rl_redisplay()" : 1
readline.read_history_file([filename]) : 1
"~/.history" : 3
"read_history()" : 1
readline.write_history_file([filename]) : 1
readline.append_history_file(nelements[ : 1
filename]) : 1
*nelements* : 1
"append_history()" : 1
readline.get_history_length() : 1
readline.set_history_length(length) : 1
"write_history_file()" : 1
"history_truncate_file()" : 1
readline.clear_history() : 1
"clear_history()" : 1
readline.get_current_history_length() : 3
"get_history_length()" : 1
readline.get_history_item(index) : 1
one-based : 1
"history_get()" : 1
readline.remove_history_item(pos) : 1
"remove_history()" : 1
readline.replace_history_item(pos : 1
"replace_history_entry()" : 1
readline.add_history(line) : 1
"add_history()" : 2
readline.set_auto_history(enabled) : 1
Auto : 1
readline.set_startup_hook([function]) : 1
"rl_startup_hook" : 1
readline.set_pre_input_hook([function]) : 1
"rl_pre_input_hook" : 1
readline.set_completer([function]) : 1
"function(text : 1
*entry_func* : 1
"rl_completion_matches()" : 1
"rl_attempted_completion_function" : 2
readline.get_completer() : 1
readline.get_completion_type() : 1
"rl_completion_type" : 1
readline.get_begidx() : 1
readline.get_endidx() : 1
readline.set_completer_delims(string) : 1
readline.get_completer_delims() : 1
"rl_completer_word_break_characters" : 1
readline.set_completion_display_matches_hook([function]) : 1
"rl_completion_display_matches_hook" : 1
"function(substitution : 1
[matches] : 1
longest_match_length)" : 1
histfile : 2
os.path.join(os.path.expanduser("~") : 2
".python_history") : 2
readline.read_history_file(histfile) : 3
(infinite) : 1
unruly : 1
readline.set_history_length(1000) : 3
atexit.register(readline.write_history_file : 1
histfile) : 4
h_len : 3
open(histfile : 1
'wb').close() : 1
save(prev_h_len : 1
histfile): : 3
new_h_len : 1
readline.append_history_file(new_h_len : 1
prev_h_len : 1
atexit.register(save : 1
"code.InteractiveConsole" : 1
save/restore : 1
HistoryConsole(code.InteractiveConsole): : 1
filename="<console>" : 1
histfile=os.path.expanduser("~/.console-history")): : 1
code.InteractiveConsole.__init__(self : 1
self.init_history(histfile) : 1
init_history(self : 1
hasattr(readline : 1
"read_history_file"): : 1
atexit.register(self.save_history : 1
save_history(self : 1
readline.write_history_file(histfile) : 1
Lib/urllib/request.py : 1
data=None[ : 2
cadefault=False : 1
"Connection:close" : 1
"ssl.SSLContext.load_verify_locations()" : 1
*cadefault* : 3
"urllib.response.addinfourl" : 3
"URLopener" : 6
"FancyURLopener" : 7
happens) : 1
"*_proxy" : 1
"urllib.urlopen" : 2
discontinued; : 1
"urllib2.urlopen" : 1
"urllib.Request" : 1
opener; : 1
urllib.request.build_opener([handler : 1
*handler*s : 3
detected) : 1
"HTTPSHandler" : 1
"handler_order" : 1
urllib.request.pathname2url(path) : 1
urllib.request.url2pathname(path) : 1
"unquote()" : 2
urllib.request.getproxies() : 1
"<scheme>_proxy" : 2
disagree) : 1
(uppercase : 1
"_PROXY") : 1
"Proxy:" : 1
"_proxy" : 1
data=None : 1
origin_req_host=None : 1
unverifiable=False : 1
method=None) : 1
"Transfer-Encoding" : 1
"Transfer-Encoding: : 1
chunked" : 1
*application/x-www-form-urlencoded* : 3
"spoof" : 1
""Mozilla/5.0 : 1
(X11; : 1
U; : 1
i686) : 1
Gecko/20071127 : 1
Firefox/2.0.0.11"" : 1
"urllib"'s : 1
""Python-urllib/2.6"" : 1
camel : 1
"Content-Type: : 1
application/x-www-form- : 1
urlencoded" : 1
cookies: : 1
*origin_req_host* : 1
request-host : 2
"http.cookiejar.request_host(self)" : 1
*unverifiable* : 1
"'HEAD'") : 1
100-continue : 1
"Request.method" : 4
"Content- : 1
Length" : 1
urllib.request.OpenerDirector : 1
"BaseHandler"s : 1
urllib.request.BaseHandler : 1
urllib.request.HTTPDefaultErrorHandler : 1
urllib.request.HTTPRedirectHandler : 1
urllib.request.HTTPCookieProcessor(cookiejar=None) : 1
urllib.request.ProxyHandler(proxies=None) : 1
*proxies* : 3
"<protocol>_proxy" : 1
"no_proxy" : 1
proxy; : 1
":port" : 1
"cern.ch,ncsa.uiuc.edu,some.host:8080" : 1
urllib.request.HTTPPasswordMgr : 1
"(realm : 2
(user : 2
urllib.request.HTTPPasswordMgrWithDefaultRealm : 1
urllib.request.HTTPPasswordMgrWithPriorAuth : 1
"uri : 1
is_authenticated" : 1
BasicAuth : 1
urllib.request.AbstractBasicAuthHandler(password_mgr=None) : 1
*password_mgr* : 6
"HTTPPasswordMgr"; : 6
*passwd_mgr* : 1
"is_authenticated" : 9
"update_authenticated" : 2
Objects) : 1
re-sent : 1
super-URIs : 1
urllib.request.HTTPBasicAuthHandler(password_mgr=None) : 1
urllib.request.ProxyBasicAuthHandler(password_mgr=None) : 1
urllib.request.AbstractDigestAuthHandler(password_mgr=None) : 1
urllib.request.HTTPDigestAuthHandler(password_mgr=None) : 1
Digest : 4
40x : 1
urllib.request.ProxyDigestAuthHandler(password_mgr=None) : 1
urllib.request.HTTPSHandler(debuglevel=0 : 1
check_hostname=None) : 1
urllib.request.FileHandler : 1
urllib.request.DataHandler : 1
urllib.request.FTPHandler : 1
urllib.request.CacheFTPHandler : 1
urllib.request.UnknownHandler : 1
urllib.request.HTTPErrorProcessor : 1
Request.full_url : 2
Request.type : 1
Request.host : 1
Request.origin_req_host : 1
Request.selector : 1
Request.data : 1
"Request.data" : 2
Request.unverifiable : 1
Request.method : 1
"get_method()") : 1
Request.get_method() : 1
get_method : 1
Request.add_header(key : 1
(header-specific) : 1
Request.add_unredirected_header(key : 1
Request.has_header(header) : 1
(checks : 1
unredirected) : 1
Request.remove_header(header) : 1
unredirected : 1
Request.get_full_url() : 1
"Request.full_url" : 1
Request.set_proxy(host : 1
Request.get_header(header_name : 1
Request.header_items() : 1
(header_name : 1
header_value) : 1
add_data : 1
has_data : 1
get_type : 1
get_host : 1
get_selector : 1
get_origin_req_host : 1
is_unverifiable : 1
OpenerDirector.add_handler(handler) : 1
"http_response()" : 2
"http_error_404()" : 1
"<protocol>_open()" : 4
"BaseHandler.<protocol>_open()" : 1
"http_error_<type>()" : 3
"BaseHandler.http_error_<nnn>()" : 1
"<protocol>_error()" : 1
(non-"http") : 1
"<protocol>_request()" : 3
pre-process : 3
"BaseHandler.<protocol>_request()" : 1
"<protocol>_response()" : 3
post-process : 3
"BaseHandler.<protocol>_response()" : 1
OpenerDirector.open(url : 1
"OpenerDirector") : 1
OpenerDirector.error(proto : 1
stages: : 1
"default_open()" : 3
"unknown_open()" : 1
BaseHandler.add_parent(director) : 1
BaseHandler.close() : 1
"*Processor"; : 1
"*Handler" : 1
BaseHandler.parent : 1
BaseHandler.default_open(req) : 1
BaseHandler.<protocol>_open(req) : 1
BaseHandler.unknown_open(req) : 1
BaseHandler.http_error_default(req : 1
hdrs) : 11
*req* : 6
*hdrs* : 1
BaseHandler.http_error_<nnn>(req : 1
*nnn* : 2
"http_error_default()" : 2
BaseHandler.<protocol>_request(req) : 1
BaseHandler.<protocol>_response(req : 1
codes.An : 1
HTTPRedirectHandler.redirect_request(req : 1
newurl) : 1
"http_error_30*()" : 2
*newurl* : 1
301 : 3
HTTPRedirectHandler.http_error_301(req : 1
"Location:" : 1
"URI:" : 1
'moved : 1
permanently' : 1
HTTPRedirectHandler.http_error_302(req : 1
"http_error_301()" : 4
'found' : 1
HTTPRedirectHandler.http_error_303(req : 1
'see : 1
other' : 1
HTTPRedirectHandler.http_error_307(req : 1
'temporary : 1
redirect' : 2
HTTPRedirectHandler.http_error_308(req : 1
'permanent : 1
HTTPCookieProcessor.cookiejar : 1
"http.cookiejar.CookieJar" : 1
ProxyHandler.<protocol>_open(request) : 1
"request.set_proxy()" : 1
HTTPPasswordMgr.add_password(realm : 1
passwd) : 1
*realm* : 5
"(user : 2
passwd)" : 1
super-URI : 1
HTTPPasswordMgr.find_user_password(realm : 1
authuri) : 3
user/password : 4
HTTPPasswordMgrWithPriorAuth.add_password(realm : 1
is_authenticated=False) : 2
"HTTPPasswordMgr.add_password()" : 1
*is_authenticated* : 2
HTTPPasswordMgrWithPriorAuth.find_user_password(realm : 1
HTTPPasswordMgrWithPriorAuth.update_authenticated(self : 1
HTTPPasswordMgrWithPriorAuth.is_authenticated(self : 1
AbstractBasicAuthHandler.http_error_auth_reqed(authreq : 1
re-trying : 1
*authreq* : 2
(failed) : 2
""python.org"") : 1
""http://python.org/"") : 1
userinfo : 1
""python.org"" : 1
""python.org:80"" : 1
""joe:password@python.org"" : 1
HTTPBasicAuthHandler.http_error_401(req : 1
ProxyBasicAuthHandler.http_error_407(req : 1
AbstractDigestAuthHandler.http_error_auth_reqed(authreq : 1
HTTPDigestAuthHandler.http_error_401(req : 1
ProxyDigestAuthHandler.http_error_407(req : 1
HTTPHandler.http_open(req) : 1
"req.has_data()" : 2
HTTPSHandler.https_open(req) : 1
FileHandler.file_open(req) : 1
DataHandler.data_open(req) : 1
2397** : 1
FTPHandler.ftp_open(req) : 1
"CacheFTPHandler" : 1
CacheFTPHandler.setTimeout(t) : 1
CacheFTPHandler.setMaxConns(m) : 1
UnknownHandler.unknown_open() : 1
HTTPErrorProcessor.http_response(request : 1
non-200 : 1
"OpenerDirector.error()" : 1
HTTPErrorProcessor.https_response(request : 1
urllib.request.urlopen('http://www.python.org/') : 3
print(f.read(300)) : 1
xmlns="http://www.w3.org/1999/xhtml" : 1
xml:lang="en" : 1
lang="en">\n\n<head>\n : 1
<meta : 1
http-equiv="content-type" : 1
content="text/html; : 1
charset=utf-8" : 1
/>\n : 1
<title>Python : 1
https://www.w3.org/International/O-charset : 1
(X)HTML : 1
*utf-8* : 1
print(f.read(100).decode('utf-8')) : 2
<!DOCTYPE : 2
"http://www.w3.org/TR/xhtml1/DTD/xhtm : 2
data-stream : 1
urllib.request.Request(url='https://localhost/cgi-bin/test.cgi' : 1
data=b'This : 1
CGI') : 1
print(f.read().decode('utf-8')) : 3
Data: : 2
CGI" : 1
sys.stdin.read() : 1
print('Content-type: : 1
text/plain\n\nGot : 1
"%s"' : 1
"Request": : 1
b'some : 2
data' : 1
urllib.request.Request(url='http://localhost:8080' : 1
data=DATA : 1
method='PUT') : 1
print(f.status) : 1
print(f.reason) : 1
Authentication.. : 1
auth_handler : 1
urllib.request.HTTPBasicAuthHandler() : 1
auth_handler.add_password(realm='PDQ : 1
uri='https://mahler:8092/site-updates.py' : 1
user='klem' : 1
passwd='kadidd!ehopper') : 1
urllib.request.build_opener(auth_handler) : 1
urllib.request.urlopen('http://www.example.com/login.html') : 1
"build_opener()" : 1
"<scheme>" : 1
proxy's : 2
"ProxyBasicAuthHandler" : 1
proxy_handler : 1
urllib.request.ProxyHandler({'http': : 1
'http://www.example.com:3128/'}) : 1
proxy_auth_handler : 1
urllib.request.ProxyBasicAuthHandler() : 1
proxy_auth_handler.add_password('realm' : 1
'username' : 1
'password') : 1
urllib.request.build_opener(proxy_handler : 1
proxy_auth_handler) : 1
opener.open('http://www.example.com/login.html') : 1
urllib.request.Request('http://www.example.com/') : 1
req.add_header('Referer' : 1
'http://www.python.org/') : 1
User-Agent : 1
req.add_header('User-Agent' : 1
'urllib-example/0.1 : 1
(Contact: : 1
.)') : 1
*User-Agent* : 3
urllib.request.build_opener() : 1
opener.addheaders : 1
[('User-agent' : 1
'Mozilla/5.0')] : 1
opener.open('http://www.example.com/') : 1
(*Content-Length* : 1
*Host*) : 1
"OpenerDirector.open()") : 1
urllib.parse.urlencode({'spam': : 2
'bacon': : 3
0}) : 2
"http://www.musi-cal.com/cgi-bin/query?%s" : 1
urllib.request.urlopen(url) : 1
urlencode : 1
urllib.request.urlopen("http://requestb.in/xrbl82xr" : 1
{'http': : 1
'http://proxy.example.com:8080/'} : 1
urllib.request.FancyURLopener(proxies) : 1
opener.open("http://www.python.org") : 1
f.read().decode('utf-8') : 2
urllib.request.FancyURLopener({}) : 1
opener.open("http://www.python.org/") : 1
"urllib2") : 1
urllib.request.urlretrieve(url : 1
reporthook=None : 2
data=None) : 6
"(filename : 1
headers)" : 1
local_filename : 1
urllib.request.urlretrieve('http://python.org/') : 1
open(local_filename) : 1
html.close() : 1
"http:" : 3
"GET") : 2
format; : 3
"ContentTooShortError" : 1
urlretrieve : 3
urllib.request.urlcleanup() : 1
Cleans : 1
urllib.request.URLopener(proxies=None : 1
**x509) : 1
"ftp:" : 1
"file:" : 1
"urllib/VVV" : 1
*VVV* : 1
*x509* : 1
open(fullurl : 1
*fullurl* : 2
"open_unknown()" : 1
open_unknown(fullurl : 1
Overridable : 1
retrieve(url : 1
URLs) : 2
*reporthook* : 2
(-1 : 2
unknown) : 2
urllib.request.FancyURLopener(...) : 1
303 : 1
307 : 1
*Location* : 1
*maxtries* : 1
"prompt_user_passwd()" : 1
prompt_user_passwd(host : 1
realm) : 1
(versions : 1
Expiration : 1
re-interpreted : 1
image) : 1
550 : 2
inaccessible; : 1
*_urlopener* : 1
urllib.response.addinfourl : 1
Lib/fractions.py : 1
fractions.Fraction(numerator=0 : 1
denominator=1) : 1
fractions.Fraction(other_fraction) : 1
fractions.Fraction(float) : 1
fractions.Fraction(decimal) : 1
fractions.Fraction(string) : 1
"numerator/denominator" : 1
*other_fraction* : 1
"Fraction(1.1)" : 2
11/10 : 1
"Fraction(11 : 1
"limit_denominator()" : 1
['/' : 1
denominator] : 1
(underscores : 1
-10) : 1
Fraction(-8 : 1
Fraction(123) : 1
Fraction(123 : 1
Fraction() : 1
Fraction(0 : 1
Fraction('3/7') : 1
Fraction(3 : 1
Fraction(' : 1
-3/7 : 1
Fraction(-3 : 1
Fraction('1.414213 : 1
\t\n') : 1
Fraction(1414213 : 1
1000000) : 3
Fraction('-.125') : 1
Fraction(-1 : 1
Fraction('7e-6') : 1
Fraction(7 : 1
Fraction(2.25) : 1
Fraction(9 : 1
Fraction(Decimal('1.1')) : 1
Fraction(11 : 2
Numerator : 1
Denominator : 1
from_float(flt) : 1
"Fraction.from_float(0.3)" : 1
"Fraction(3 : 1
from_decimal(dec) : 1
limit_denominator(max_denominator=1000000) : 1
max_denominator : 1
Fraction('3.1415926535897932').limit_denominator(1000) : 1
Fraction(355 : 1
113) : 1
cos : 1
Fraction(cos(pi/3)) : 1
Fraction(4503599627370497 : 1
9007199254740992) : 1
Fraction(cos(pi/3)).limit_denominator() : 1
Fraction(1.1).limit_denominator() : 1
__floor__() : 1
"<= : 1
self" : 2
floor(Fraction(355 : 1
113)) : 1
__ceil__() : 1
__round__() : 1
__round__(ndigits) : 1
"Fraction(1 : 1
10**ndigits)" : 1
(logically : 1
"ndigits" : 1
nis.match(key : 1
mapname : 1
domain=default_domain) : 2
*mapname* : 3
("nis.error") : 1
joys) : 1
nis.cat(mapname : 1
"match(key : 1
mapname)==value" : 1
nis.maps(domain=default_domain) : 1
nis.get_default_domain() : 1
nis.error : 1
inter-processes : 1
Lib/difflib.py : 1
difflib.SequenceMatcher : 1
1980's : 1
Ratcliff : 3
Obershelp : 2
"gestalt : 1
matching." : 1
"junk" : 3
(Handling : 1
algorithm.) : 1
**Timing:** : 1
Ratcliff-Obershelp : 1
cubic : 1
expected-case : 1
**Automatic : 1
heuristic:** : 1
"popular" : 1
"autojunk" : 1
*autojunk* : 3
difflib.Differ : 1
(near-matching) : 1
+------------+---------------------------------------------+ : 5
|============|=============================================| : 1
"'- : 1
"'+ : 1
'"?"' : 1
intraline : 1
difflib.HtmlDiff : 1
table) : 1
inter-line : 3
intra-line : 3
__init__(tabsize=8 : 1
wrapcolumn=None : 1
linejunk=None : 2
charjunk=IS_CHARACTER_JUNK) : 2
*tabsize* : 3
*wrapcolumn* : 1
*linejunk* : 4
*charjunk* : 4
differences) : 1
public: : 1
make_file(fromlines : 1
tolines : 5
fromdesc='' : 2
todesc='' : 2
context=False : 2
numlines=5 : 1
charset='utf-8') : 2
*fromlines* : 2
*tolines* : 2
*fromdesc* : 2
*todesc* : 2
*numlines* : 4
"'ISO-8859-1'" : 1
make_table(fromlines : 1
numlines=5) : 1
"make_file()" : 1
"Tools/scripts/diff.py" : 2
difflib.context_diff(a : 1
fromfile='' : 2
tofile='' : 2
fromfiledate='' : 2
tofiledate='' : 2
n=3 : 4
lineterm='\n') : 2
strings); : 3
"***" : 1
"---") : 1
"io.IOBase.readlines()" : 2
"io.IOBase.writelines()" : 2
*lineterm* : 2
*fromfile* : 2
*tofile* : 2
*fromfiledate* : 2
*tofiledate* : 2
['bacon\n' : 2
'eggs\n' : 2
'ham\n' : 2
'guido\n'] : 4
['python\n' : 2
'eggy\n' : 2
'hamster\n' : 2
sys.stdout.writelines(context_diff(s1 : 1
fromfile='before.py' : 2
tofile='after.py')) : 2
before.py : 2
after.py : 2
1,4 : 2
bacon : 1
guido : 3
eggy : 1
hamster : 1
difflib.get_close_matches(word : 1
cutoff=0.6) : 1
"good : 1
enough" : 1
*possibilities* : 1
*cutoff* : 1
"0.6") : 1
Possibilities : 1
*n*) : 3
similarity : 4
get_close_matches('appel' : 1
['ape' : 1
'peach' : 1
'puppy']) : 1
'ape'] : 1
get_close_matches('wheel' : 1
keyword.kwlist) : 3
['while'] : 1
get_close_matches('pineapple' : 1
get_close_matches('accept' : 1
['except'] : 1
difflib.ndiff(a : 1
"Differ"-style : 1
"None"): : 3
*linejunk*: : 2
"IS_LINE_JUNK()" : 1
("'#'") : 1
*charjunk*: : 2
"IS_CHARACTER_JUNK()" : 1
tab; : 1
this!) : 1
ndiff('one\ntwo\nthree\n'.splitlines(keepends=True) : 2
'ore\ntree\nemu\n'.splitlines(keepends=True)) : 2
print(''.join(diff) : 1
ore : 2
emu : 2
difflib.restore(sequence : 1
"Differ.compare()" : 1
(parameter : 1
*which*) : 1
list(diff) : 1
print(''.join(restore(diff : 2
difflib.unified_diff(a : 1
"---" : 1
"+++" : 1
"@@") : 1
sys.stdout.writelines(unified_diff(s1 : 1
+++ : 1
-1,4 : 1
+1,4 : 1
-eggs : 1
-ham : 1
+python : 1
+eggy : 1
+hamster : 1
difflib.diff_bytes(dfunc : 1
fromfile=b'' : 1
tofile=b'' : 1
fromfiledate=b'' : 1
tofiledate=b'' : 1
lineterm=b'\n') : 1
*dfunc*; : 1
*dfunc* : 3
"unified_diff()" : 1
"context_diff()" : 1
"dfunc(a : 1
fromfile : 4
tofile : 4
fromfiledate : 1
tofiledate : 1
lineterm)" : 1
unknown/inconsistent : 1
difflib.IS_LINE_JUNK(line) : 1
difflib.IS_CHARACTER_JUNK(ch) : 1
Gestalt : 1
Metzener : 1
Dr : 2
Dobb's : 1
Journal : 1
1988 : 3
difflib.SequenceMatcher(isjunk=None : 1
a='' : 1
b='' : 1
autojunk=True) : 1
*isjunk* : 6
False"; : 1
pass: : 1
\t" : 1
synch : 3
*bjunk* : 2
*bpopular* : 2
non-junk : 1
disabled); : 1
*b2j* : 1
"set_seqs()" : 1
"set_seq2()" : 2
set_seqs(a : 1
"set_seq1()" : 1
set_seq1(a) : 1
set_seq2(b) : 1
find_longest_match(alo=0 : 1
ahi=None : 1
blo=0 : 1
bhi=None) : 1
"a[alo:ahi]" : 1
"b[blo:bhi]" : 1
"find_longest_match()" : 2
"a[i:i+k]" : 1
"b[j:j+k]" : 1
"alo : 1
i+k : 1
ahi" : 1
"blo : 1
j+k : 1
bhi" : 1
"(i' : 2
j' : 2
k')" : 1
k'" : 1
i'" : 3
"j : 1
j'" : 1
SequenceMatcher(None : 6
abcd" : 2
"abcd : 2
abcd") : 2
s.find_longest_match(0 : 2
Match(a=0 : 1
b=4 : 2
size=5) : 1
abcd'" : 2
"'abcd'" : 2
SequenceMatcher(lambda : 2
x==" : 1
Match(a=1 : 1
b=0 : 2
"(alo : 1
blo : 1
"Match(a : 1
get_matching_blocks() : 1
"a[i:i+n] : 1
b[j:j+n]" : 1
"(len(a) : 2
n')" : 1
"i+n : 1
"j+n : 1
j'"; : 1
"abxcd" : 1
"abcd") : 1
s.get_matching_blocks() : 1
[Match(a=0 : 1
size=2) : 2
Match(a=3 : 1
Match(a=5 : 1
size=0)] : 1
get_opcodes() : 1
"(tag : 1
j1 : 4
j2)" : 1
"i1 : 2
*j1* : 1
*j2* : 1
"a[i1:i2]" : 2
"b[j1:j2]" : 2
"'delete'" : 1
"j1 : 1
j2" : 1
"'insert'" : 1
"a[i1:i1]" : 1
i2" : 1
"'equal'" : 1
"a[i1:i2] : 1
b[j1:j2]" : 1
equal) : 3
"qabxcd" : 1
"abycdf" : 1
j2 : 2
s.get_opcodes(): : 2
print('{:7} : 1
a[{}:{}] : 1
b[{}:{}] : 1
{!r:>8} : 1
{!r}'.format( : 1
a[i1:i2] : 1
b[j1:j2])) : 1
a[0:1] : 1
b[0:0] : 1
'q' : 1
b[0:2] : 1
a[3:4] : 1
b[2:3] : 1
a[4:6] : 1
b[3:5] : 1
'cd' : 2
a[6:6] : 1
b[5:6] : 1
get_grouped_opcodes(n=3) : 1
"get_opcodes()" : 3
clusters : 3
ratio() : 1
sequences' : 1
2.0*M : 1
"get_matching_blocks()" : 3
"quick_ratio()" : 2
"real_quick_ratio()" : 2
"ratio()" : 5
'tide' : 1
'diet').ratio() : 1
'diet' : 1
'tide').ratio() : 1
quick_ratio() : 1
real_quick_ratio() : 1
"ratio()": : 1
"abcd" : 1
"bcde") : 1
s.ratio() : 1
s.quick_ratio() : 1
s.real_quick_ratio() : 1
"junk": : 1
"private : 2
currentThread;" : 1
volatile : 2
currentThread;") : 1
matches: : 3
print(round(s.ratio() : 1
0.866 : 1
s.get_matching_blocks(): : 1
print("a[%d] : 1
b[%d] : 1
elements" : 1
a[8] : 1
b[17] : 1
a[29] : 1
b[38] : 1
"get_opcodes()": : 1
print("%6s : 1
a[%d:%d] : 1
b[%d:%d]" : 1
opcode) : 1
a[0:8] : 1
b[0:8] : 1
a[8:8] : 1
b[8:17] : 1
a[8:29] : 1
b[17:38] : 1
"get_close_matches()" : 1
"Differ"-generated : 1
**minimal** : 1
difflib.Differ(linejunk=None : 1
charjunk=None) : 1
junk-filtering : 1
(deltas : 1
compare(a : 1
newline-terminated : 1
objects): : 1
text1 : 1
'''.splitlines(keepends=True) : 2
len(text1) : 1
text1[0][-1] : 1
text2 : 1
Flat : 3
Differ() : 1
"junk." : 1
"Differ()" : 1
two: : 4
list(d.compare(text1 : 1
text2)) : 1
pprint(result) : 1
ugly.\n' : 1
'- : 3
implicit.\n' : 1
complex.\n' : 3
'+ : 4
++\n' : 1
complicated.\n' : 1
^\n' : 2
++++ : 2
nested.\n'] : 1
sys.stdout.writelines(result) : 1
++ : 1
"diff"-like : 1
difflib.py : 1
ndiff: : 1
interline : 1
unified: : 1
file_mtime(path): : 1
datetime.fromtimestamp(os.stat(path).st_mtime : 1
timezone.utc) : 2
t.astimezone().isoformat() : 1
help='Produce : 4
(default)') : 1
diff') : 2
parser.add_argument('-m' : 1
'(can : 1
conjunction)') : 1
parser.add_argument('-n' : 1
ndiff : 1
default=3 : 1
help='Set : 1
3)') : 1
parser.add_argument('fromfile') : 1
parser.add_argument('tofile') : 1
options.lines : 1
options.fromfile : 1
options.tofile : 1
fromdate : 3
file_mtime(fromfile) : 1
todate : 3
file_mtime(tofile) : 1
open(fromfile) : 1
ff: : 1
fromlines : 1
ff.readlines() : 1
open(tofile) : 1
tf.readlines() : 1
options.u: : 1
difflib.unified_diff(fromlines : 1
n=n) : 2
options.n: : 1
difflib.ndiff(fromlines : 1
tolines) : 1
options.m: : 1
difflib.HtmlDiff().make_file(fromlines,tolines,fromfile,tofile,context=options.c,numlines=n) : 1
difflib.context_diff(fromlines : 1
sys.stdout.writelines(diff) : 1
Lib/venv/ : 1
"venv": : 1
/path/to/new/virtual/environment : 1
(creating : 1
".venv") : 1
"bin" : 2
"Scripts" : 2
copy/symlink : 1
binary/binaries : 1
(initially : 1
"lib/pythonX.Y : 1
"Lib\site- : 1
packages") : 1
c:\>c:\Python35\python : 1
c:\path\to\myenv : 2
c:\>python : 1
[--system-site-packages] : 1
[--symlinks : 1
--copies] : 1
[--clear] : 1
[--upgrade] : 1
[--without-pip] : 1
[--prompt : 1
PROMPT] : 1
[--upgrade-deps] : 1
ENV_DIR : 2
[ENV_DIR : 1
--system-site-packages : 1
--copies : 1
--clear : 2
--without-pip : 1
Skips : 1
PROMPT : 1
--upgrade-deps : 1
sourcing : 1
"--clear" : 1
command:PS : 1
C:> : 1
Set-ExecutionPolicy : 1
-ExecutionPolicy : 1
RemoteSigned : 1
-Scope : 1
CurrentUserSee : 1
"include-system-site- : 1
"--system-site- : 1
"sys.prefix : 1
sys.base_prefix" : 1
"activated" : 1
("bin" : 1
POSIX; : 1
("*<venv>*" : 1
environment): : 1
+---------------+--------------+----------------------------------------------------+ : 3
|===============|==============|====================================================| : 1
bash/zsh : 1
"$ : 4
*<venv>*/bin/activate" : 1
+--------------+----------------------------------------------------+ : 4
*<venv>*/bin/activate.fish" : 1
csh/tcsh : 1
*<venv>*/bin/activate.csh" : 1
*<venv>*/bin/Activate.ps1" : 1
cmd.exe : 1
"C:\> : 1
*<venv>*\Scripts\activate.bat" : 1
"PS : 1
*<venv>*\Scripts\Activate.ps1" : 1
*need* : 1
"#!/*<path-to-venv>*/bin/python" : 1
"pip : 1
requirements.txt" : 1
"deactivate" : 1
venv.EnvBuilder(system_site_packages=False : 1
with_pip=False : 2
prompt=None : 2
upgrade_deps=False) : 2
instantiation: : 1
"system_site_packages" : 1
"with_pip" : 3
"--default-pip" : 1
"upgrade_deps" : 3
env-builder : 1
"create": : 1
create(env_dir) : 1
"create" : 2
create(self : 1
env_dir): : 1
virtualized : 1
env_dir : 2
os.path.abspath(env_dir) : 1
self.ensure_directories(env_dir) : 1
self.create_configuration(context) : 1
self.setup_python(context) : 1
self.setup_scripts(context) : 1
self.post_setup(context) : 1
"ensure_directories()" : 1
"create_configuration()" : 1
"setup_python()" : 3
"setup_scripts()" : 3
"post_setup()" : 2
ensure_directories(env_dir) : 1
"clear=True" : 1
"env_dir" : 1
"__VENV_DIR__" : 2
"install_scripts()") : 5
"env_name" : 1
"inc_path" : 1
"lib_path" : 2
"bin_path" : 1
"bin_name" : 1
"__VENV_BIN_NAME__" : 2
"env_exe" : 1
"__VENV_PYTHON__" : 2
"env_exec_cmd" : 1
create_configuration(context) : 1
setup_python(context) : 1
"python3.x" : 1
setup_scripts(context) : 1
upgrade_dependencies(context) : 1
Upgrades : 1
"setuptools") : 1
shelling : 1
post_setup(context) : 1
pre-install : 1
post-creation : 1
"python[w].exe" : 1
3.7.3: : 1
install_scripts(context : 1
"common" : 2
(final : 1
"Scripts") : 1
upgraded) : 1
venv.create(env_dir : 1
system_site_packages=False : 1
*env_dir* : 1
ExtendedEnvBuilder(venv.EnvBuilder): : 1
easy_install : 1
:param : 6
nodist: : 1
nopip: : 1
progress: : 1
virtualize() : 1
self.nodist : 1
kwargs.pop('nodist' : 1
self.nopip : 2
kwargs.pop('nopip' : 1
self.progress : 3
kwargs.pop('progress' : 1
self.verbose : 1
kwargs.pop('verbose' : 1
post_setup(self : 1
context): : 4
os.environ['VIRTUAL_ENV'] : 1
context.env_dir : 1
self.nodist: : 2
self.install_setuptools(context) : 1
self.install_pip(context) : 1
reader(self : 1
subprocess' : 1
stream.readline() : 1
progress(s : 1
self.verbose: : 2
sys.stderr.write('.') : 1
sys.stderr.write(s.decode('utf-8')) : 1
sys.stderr.flush() : 2
stream.close() : 2
install_script(self : 1
url): : 1
urlparse(url) : 1
os.path.split(path)[-1] : 1
binpath : 1
context.bin_path : 1
distpath : 1
os.path.join(binpath : 1
fn) : 1
urlretrieve(url : 1
distpath) : 1
progress('Installing : 1
...%s' : 2
term) : 1
'main') : 2
sys.stderr.write('Installing : 1
term)) : 1
[context.env_exe : 1
fn] : 1
cwd=binpath) : 1
Thread(target=self.reader : 2
args=(p.stdout : 1
'stdout')) : 1
t1.start() : 2
args=(p.stderr : 1
'stderr')) : 1
t2.start() : 2
t1.join() : 1
t2.join() : 1
progress('done.' : 1
sys.stderr.write('done.\n') : 1
os.unlink(distpath) : 1
install_setuptools(self : 1
'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py' : 1
self.install_script(context : 2
'setuptools' : 1
o: : 1
o.startswith('setuptools-') : 1
o.endswith('.tar.gz') : 1
os.listdir(context.bin_path)) : 1
os.path.join(context.bin_path : 1
os.unlink(f) : 1
install_pip(self : 1
'https://bootstrap.pypa.io/get-pip.py' : 1
'pip' : 1
hasattr(sys : 2
'base_prefix'): : 1
ValueError('This : 1
later') : 1
argparse.ArgumentParser(prog=__name__ : 1
description='Creates : 1
'environments : 1
'more : 1
'directories.') : 1
parser.add_argument('dirs' : 1
metavar='ENV_DIR' : 1
help='A : 2
'virtual : 2
environment.') : 1
parser.add_argument('--no-setuptools' : 1
dest='nodist' : 1
help="Don't : 2
environment.") : 1
parser.add_argument('--no-pip' : 1
dest='nopip' : 1
"environment.") : 1
parser.add_argument('--system-site-packages' : 1
dest='system_site' : 1
help='Give : 1
'system : 1
dir.') : 1
'nt': : 1
use_symlinks : 2
parser.add_argument('--symlinks' : 1
default=use_symlinks : 1
dest='symlinks' : 1
help='Try : 1
'when : 1
platform.') : 1
parser.add_argument('--clear' : 1
dest='clear' : 1
help='Delete : 1
'directory : 1
'exists : 1
'environment : 2
creation.') : 1
parser.add_argument('--upgrade' : 1
dest='upgrade' : 1
help='Upgrade : 1
'use : 1
'has : 1
'in-place.') : 1
help='Display : 1
'install : 1
pip.') : 1
options.upgrade : 1
options.clear: : 1
ValueError('you : 1
ExtendedEnvBuilder(system_site_packages=options.system_site : 1
clear=options.clear : 1
symlinks=options.symlinks : 1
upgrade=options.upgrade : 1
nodist=options.nodist : 1
nopip=options.nopip : 1
verbose=options.verbose) : 1
options.dirs: : 1
builder.create(d) : 1
print('Error: : 1
sys.exit(rc) : 1
Lib/stat.py : 1
stat.S_ISDIR(mode) : 1
stat.S_ISCHR(mode) : 1
stat.S_ISBLK(mode) : 1
stat.S_ISREG(mode) : 1
stat.S_ISFIFO(mode) : 1
stat.S_ISLNK(mode) : 1
stat.S_ISSOCK(mode) : 1
stat.S_ISDOOR(mode) : 1
door : 1
stat.S_ISPORT(mode) : 1
stat.S_ISWHT(mode) : 1
whiteout : 1
stat.S_IMODE(mode) : 1
"os.chmod()"---that : 1
sticky : 3
set-group-id : 1
set-user-id : 1
stat.S_IFMT(mode) : 1
"S_IS*()" : 1
"os.path.is*()" : 1
walktree(top : 1
callback): : 1
'''recursively : 1
file''' : 1
os.listdir(top): : 1
os.path.join(top : 1
os.lstat(pathname).st_mode : 1
S_ISDIR(mode): : 1
walktree(pathname : 1
S_ISREG(mode): : 1
callback(pathname) : 1
print('Skipping : 1
visitfile(file): : 1
print('visiting' : 1
walktree(sys.argv[1] : 1
visitfile) : 1
stat.filemode(mode) : 1
10-tuple : 2
stat.ST_MODE : 1
Inode : 2
stat.ST_INO : 1
stat.ST_DEV : 1
stat.ST_NLINK : 1
stat.ST_UID : 1
stat.ST_GID : 1
stat.ST_SIZE : 1
stat.ST_ATIME : 1
stat.ST_MTIME : 1
stat.ST_CTIME : 1
"ctime" : 1
particular) : 1
"os.lstat()"; : 1
stat.S_IFSOCK : 1
stat.S_IFLNK : 1
stat.S_IFREG : 1
stat.S_IFBLK : 1
stat.S_IFDIR : 1
stat.S_IFCHR : 1
stat.S_IFIFO : 1
stat.S_IFDOOR : 1
Door : 1
stat.S_IFPORT : 1
stat.S_IFWHT : 1
Whiteout : 1
"os.chmod()": : 1
stat.S_ISUID : 1
stat.S_ISGID : 1
Set-group-ID : 1
"S_ISGID" : 1
("S_IXGRP") : 2
file/record : 2
"S_ENFMT") : 1
stat.S_ISVTX : 1
Sticky : 1
stat.S_IRWXU : 1
Mask : 3
stat.S_IRUSR : 1
stat.S_IWUSR : 1
stat.S_IXUSR : 1
stat.S_IRWXG : 1
stat.S_IRGRP : 1
stat.S_IWGRP : 1
stat.S_IXGRP : 1
stat.S_IRWXO : 1
group) : 2
stat.S_IROTH : 1
stat.S_IWOTH : 1
stat.S_IXOTH : 1
stat.S_ENFMT : 1
"S_ISGID": : 1
stat.S_IREAD : 1
V7 : 4
"S_IRUSR" : 1
stat.S_IWRITE : 1
"S_IWUSR" : 1
stat.S_IEXEC : 1
"S_IXUSR" : 1
"os.chflags()": : 1
stat.UF_NODUMP : 1
stat.UF_IMMUTABLE : 1
stat.UF_APPEND : 1
stat.UF_OPAQUE : 1
stat.UF_NOUNLINK : 1
stat.UF_COMPRESSED : 1
10.6+) : 1
stat.UF_HIDDEN : 1
10.5+) : 1
stat.SF_ARCHIVED : 1
stat.SF_IMMUTABLE : 1
stat.SF_APPEND : 1
stat.SF_NOUNLINK : 1
stat.SF_SNAPSHOT : 1
*BSD : 2
*chflags(2)* : 1
stat.FILE_ATTRIBUTE_ARCHIVE : 1
stat.FILE_ATTRIBUTE_COMPRESSED : 1
stat.FILE_ATTRIBUTE_DEVICE : 1
stat.FILE_ATTRIBUTE_DIRECTORY : 1
stat.FILE_ATTRIBUTE_ENCRYPTED : 1
stat.FILE_ATTRIBUTE_HIDDEN : 1
stat.FILE_ATTRIBUTE_INTEGRITY_STREAM : 1
stat.FILE_ATTRIBUTE_NORMAL : 1
stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED : 1
stat.FILE_ATTRIBUTE_NO_SCRUB_DATA : 1
stat.FILE_ATTRIBUTE_OFFLINE : 1
stat.FILE_ATTRIBUTE_READONLY : 1
stat.FILE_ATTRIBUTE_REPARSE_POINT : 1
stat.FILE_ATTRIBUTE_SPARSE_FILE : 1
stat.FILE_ATTRIBUTE_SYSTEM : 1
stat.FILE_ATTRIBUTE_TEMPORARY : 1
stat.FILE_ATTRIBUTE_VIRTUAL : 1
stat.IO_REPARSE_TAG_SYMLINK : 1
stat.IO_REPARSE_TAG_MOUNT_POINT : 1
stat.IO_REPARSE_TAG_APPEXECLINK : 1
Lib/email/errors.py : 1
email.errors.MessageError : 1
email.errors.MessageParseError : 1
"MessageError" : 2
email.errors.HeaderParseError : 1
"MessageParseError" : 1
email.errors.BoundaryError : 1
email.errors.MultipartConversionError : 1
"add_payload()" : 1
"Message.add_payload()" : 1
"MIMEImage") : 1
*multipart/alternative* : 1
"email.errors.MessageDefect" : 1
"NoBoundaryInMultipartDefect" : 1
"StartBoundaryNotFoundDefect" : 1
"CloseBoundaryNotFoundDefect" : 1
"FirstHeaderLineIsContinuationDefect" : 1
"MisplacedEnvelopeHeaderDefect" : 1
"Unix : 1
From" : 1
"MissingHeaderBodySeparatorDefect" : 1
"MalformedHeaderDefect" : 1
"InvalidBase64PaddingDefect" : 1
Enough : 1
"InvalidBase64LengthDefect" : 1
non-padding : 1
"InvalidDateDefect" : 1
Lib/mimetypes.py : 1
"init()" : 4
mimetypes.guess_type(url : 1
Guess : 4
"'type/subtype'" : 2
*content- : 1
**gzip**) : 1
*Content-Encoding* : 1
sensitive; : 1
sensitively : 1
mimetypes.guess_all_extensions(type : 1
mimetypes.guess_extension(type : 1
mimetypes.init(files=None) : 1
"knownfiles"; : 1
"knownfiles" : 1
mimetypes.read_mime_types(filename) : 1
mimetypes.add_type(type : 1
mimetypes.inited : 1
mimetypes.knownfiles : 2
"mime.types" : 2
mimetypes.suffix_map : 1
recognition : 2
".tgz" : 2
mimetypes.encodings_map : 1
mimetypes.common_types : 1
mimetypes.init() : 1
['/etc/mime.types' : 1
'/etc/httpd/mime.types' : 1
mimetypes.suffix_map['.tgz'] : 1
'.tar.gz' : 1
mimetypes.encodings_map['.gz'] : 1
'gzip' : 1
mimetypes.types_map['.tgz'] : 1
'application/x-tar-gz' : 1
MIME-type : 1
database; : 1
mimetypes.MimeTypes(filenames=() : 1
MIME-types : 1
"mime.types"-style : 1
top" : 1
suffix_map : 1
"suffix_map" : 1
"encodings_map" : 1
types_map : 1
non-standards : 1
"common_types" : 2
"types_map" : 2
types_map_inv : 1
guess_extension(type : 1
"guess_extension()" : 1
guess_type(url : 1
guess_all_extensions(type : 1
"guess_all_extensions()" : 1
read(filename : 1
readfp(fp : 2
read_windows_registry(strict=True) : 1
time-related : 1
*epoch* : 1
"time.gmtime(0)" : 1
(UTC) : 2
*seconds : 1
epoch* : 1
Leap : 3
cut-off : 1
standards: : 1
69--99 : 1
1969-- : 1
0--68 : 1
2000--2068 : 1
Coordinated : 2
Greenwich : 2
Mean : 2
GMT) : 1
acronym : 1
DST : 41
(determined : 1
law) : 1
flexibility) : 1
Wisdom : 1
"ticks" : 1
"gettimeofday()" : 2
tm" : 1
representations: : 1
+---------------------------+---------------------------+---------------------------+ : 5
|===========================|===========================|===========================| : 1
"calendar.timegm()" : 2
time.asctime([t]) : 1
23:21:05 : 2
1993'" : 4
"'Wed : 2
04:26:40 : 2
time.pthread_getcpuclockid(thread_id) : 1
*clk_id* : 7
*pthread_getcpuclockid(3)* : 1
time.clock_getres(clk_id) : 1
(precision) : 1
time.clock_gettime(clk_id) : 1
time.clock_gettime_ns(clk_id) : 1
time.clock_settime(clk_id : 1
"CLOCK_REALTIME" : 2
time.clock_settime_ns(clk_id : 1
time.ctime([secs]) : 1
*secs* : 6
"ctime(secs)" : 1
"asctime(localtime(secs))" : 1
"ctime()" : 4
time.get_clock_info(name) : 1
"'monotonic'": : 1
"'perf_counter'": : 1
"'process_time'": : 1
"'thread_time'": : 1
"'time'": : 1
*adjustable*: : 1
NTP : 3
*implementation*: : 1
*monotonic*: : 1
*resolution*: : 1
time.gmtime([secs]) : 1
time.localtime([secs]) : 1
time.mktime(t) : 1
time.monotonic_ns() : 1
time.perf_counter_ns() : 1
time.process_time_ns() : 1
"process_time()" : 1
time.sleep(secs) : 1
"Sleep(0)" : 1
(resolution: : 3
nanosecond); : 2
microsecond) : 1
sleeps : 1
time.strftime(format[ : 1
t]) : 1
+-------------+--------------------------------------------------+---------+ : 24
Directive : 3
|=============|==================================================|=========| : 1
Locale's : 12
weekday : 22
"%B" : 2
[01,31] : 1
"%H" : 3
Hour : 4
(24-hour : 2
clock) : 4
[00,23] : 1
"%I" : 5
(12-hour : 2
[01,12] : 2
"%j" : 4
[001,366] : 1
"%m" : 3
"%M" : 3
Minute : 2
[00,59] : 1
PM : 3
[00,61] : 1
Week : 6
(Sunday : 2
week) : 5
[00,53] : 2
"%w" : 2
Weekday : 5
[0(Sunday),6] : 1
"%W" : 6
(Monday : 2
"%X" : 3
[00,99] : 1
"%Y" : 3
UTC/GMT : 1
+HHMM : 1
-HHMM : 1
[-23:59 : 1
+23:59] : 1
"61"; : 1
"60" : 1
gmtime : 1
strftime("%a : 1
gmtime()) : 1
'Thu : 1
14:17:15 : 1
+0000' : 1
*strftime(3)* : 2
time.strptime(string[ : 1
format]) : 1
"strftime()"; : 1
""%a : 1
%Y"" : 1
"(1900 : 1
time.strptime("30 : 1
"%d : 1
%y") : 1
time.struct_time(tm_year=2000 : 1
tm_mon=11 : 1
tm_mday=30 : 1
tm_hour=0 : 1
tm_min=0 : 1
tm_sec=0 : 1
tm_wday=3 : 1
tm_yday=335 : 1
tm_isdst=-1) : 1
"tzname" : 2
"daylight" : 4
non-daylight : 1
timezones) : 1
time.struct_time : 1
+---------+---------------------+-----------------------------------+ : 12
|=========|=====================|===================================| : 1
1993) : 1
"tm_mon" : 1
"tm_mday" : 1
31] : 1
"tm_hour" : 1
23] : 1
"tm_min" : 1
59] : 1
"tm_sec" : 1
61]; : 1
**(2)** : 1
"tm_wday" : 1
"tm_yday" : 1
366] : 1
"tm_isdst" : 9
non-decreasing : 1
time.time_ns() : 1
"thread_time_ns()" : 1
"CLOCK_THREAD_CPUTIME_ID" : 1
"TZ" : 6
(non-DST : 1
West : 1
UTC) : 4
"altzone" : 1
(DST : 4
applies) : 1
"tzset()" : 2
on.The : 1
clarity): : 1
std : 1
[dst : 1
[offset : 1
[,start[/time] : 1
end[/time]]]] : 1
"std" : 1
time.tzname : 4
"± : 1
hh[:mm[:ss]]" : 1
Prime : 1
Meridian; : 1
summer : 3
"start[/time] : 1
end[/time]" : 1
"J*n*" : 1
365) : 2
"*n*" : 1
"M*m*.*n*.*d*" : 1
*d*'th : 2
*m*" : 1
('-' : 1
'+') : 1
os.environ['TZ'] : 4
'EST+05EDT,M4.1.0,M10.5.0' : 1
time.strftime('%X : 2
%Z') : 2
'02:07:36 : 1
05/08/03 : 2
EDT' : 1
'AEST-10AEDT-11,M10.5.0,M3.5.0' : 1
'16:08:12 : 1
AEST' : 1
Darwin) : 1
(*tzfile(5)*) : 1
datafile : 1
'zoneinfo' : 1
"/usr/share/zoneinfo" : 1
"'US/Eastern'" : 1
"'Australia/Melbourne'" : 1
"'Egypt'" : 1
"'Europe/Amsterdam'" : 1
'US/Eastern' : 1
('EST' : 1
'EDT') : 1
'Egypt' : 1
('EET' : 1
'EEST') : 1
time.CLOCK_BOOTTIME : 1
suspend-aware : 1
discontinuities : 1
"settimeofday()" : 1
time.CLOCK_HIGHRES : 1
"CLOCK_HIGHRES" : 2
nonadjustable : 1
time.CLOCK_MONOTONIC : 1
time.CLOCK_MONOTONIC_RAW : 1
hardware-based : 1
2.6.28 : 1
time.CLOCK_PROCESS_CPUTIME_ID : 1
time.CLOCK_PROF : 1
time.CLOCK_TAI : 1
PTP : 1
time.CLOCK_THREAD_CPUTIME_ID : 1
Thread-specific : 1
time.CLOCK_UPTIME : 1
time.CLOCK_UPTIME_RAW : 1
asleep : 1
time.CLOCK_REALTIME : 1
time.altzone : 1
UK) : 2
time.daylight : 1
Nonzero : 1
time.timezone : 1
(non-DST) : 1
(negative : 1
non-DST : 1
("altzone" : 1
"tzname") : 1
"timegm()" : 2
hour/minute : 1
("%y" : 1
"%Y") : 1
1123** : 1
thinly : 1
disguised : 3
**Do : 1
directly.** : 1
*portable* : 1
*large : 1
"off_t" : 2
CFLAGS="`getconf : 1
LFS_CFLAGS`" : 1
OPT="-g : 2
-O2 : 2
$CFLAGS" : 2
large-file-capable : 1
CFLAGS='-D_LARGEFILE64_SOURCE : 1
-D_FILE_OFFSET_BITS=64' : 1
"environ[b'HOME']" : 1
("environ['HOME']" : 1
"system()"; : 1
Lib/_collections_abc.py : 1
C(Sequence): : 1
count(self : 2
issubclass(C : 1
Sequence) : 4
isinstance(C() : 1
subclasses" : 3
index(self : 1
Sequence.register(D) : 1
issubclass(D : 1
isinstance(D() : 1
in-operator : 1
*iteration* : 1
__next__(next): : 1
issubclass(E : 1
Iterable) : 2
isinstance(E() : 1
*ABCs*: : 1
+--------------------------------+------------------------+-------------------------+------------------------------------------------------+ : 26
|================================|========================|=========================|======================================================| : 1
"Iterator" : 2
"extend" : 1
"pop" : 3
"__iadd__" : 1
"ByteString" : 1
"isdisjoint" : 1
"MutableSet" : 3
"__ior__" : 1
"__iand__" : 1
"__ixor__" : 1
"__isub__" : 1
"popitem" : 1
"update" : 1
"setdefault" : 1
"MappingView" : 4
"ItemsView" : 1
"KeysView" : 1
"ValuesView" : 1
"asend" : 1
"athrow" : 1
"object.__subclasshook__()" : 1
Iterable)" : 2
collections.abc.Container : 1
collections.abc.Hashable : 1
collections.abc.Sized : 1
collections.abc.Callable : 1
collections.abc.Iterable : 1
collections.abc.Iterator : 1
collections.abc.Reversible : 1
collections.abc.MutableSequence : 1
collections.abc.ByteString : 1
performance; : 1
collections.abc.Set : 1
collections.abc.Mapping : 1
collections.abc.MutableMapping : 1
collections.abc.MappingView : 1
collections.abc.ItemsView : 1
collections.abc.KeysView : 1
*Coroutine* : 1
(generators : 2
"types.coroutine()") : 2
"isinstance(gencoro : 2
Awaitable)" : 1
"inspect.isawaitable()" : 2
Coroutine)" : 1
collections.abc.AsyncIterable : 1
collections.abc.AsyncIterator : 1
isinstance(myvar : 1
collections.abc.Sized): : 1
len(myvar) : 1
"isdisjoint()": : 1
ListBasedSet(collections.abc.Set): : 1
favoring : 1
self.elements : 2
lst : 1
lst: : 1
lst.append(value) : 1
iter(self.elements) : 1
len(self.elements) : 1
ListBasedSet('abcdef') : 1
ListBasedSet('defghi') : 1
__and__() : 1
mixin: : 1
"ClassName(iterable)" : 1
factored-out : 1
"_from_iterable()" : 2
"cls(iterable)" : 1
fixed) : 1
"_hash()" : 1
hashability : 1
"Set()" : 1
"Hashable()" : 1
Set._hash" : 1
OrderedSet : 1
*fixers* : 1
fixers : 9
greet(name): : 2
{0}!".format(name) : 1
name?" : 1
raw_input() : 1
greet(name) : 2
given.) : 1
{0}!".format(name)) : 1
print("What's : 1
name?") : 1
"imports" : 2
fixers: : 1
has_key : 2
"apply" : 1
fixer: : 1
*explicit* : 1
"idioms" : 1
print_function" : 1
"--output-dir" : 1
"--write-unchanged-files" : 1
"--add-suffix" : 2
backups : 2
--add-suffix=3 : 1
"example.py3" : 1
--output-dir=python3-version/mycode : 1
python2-version/mycode : 1
"2to3 : 1
-l" : 1
"apply(function : 1
"function(*args : 1
+----------------------------------+--------------------------------------------+ : 13
|==================================|============================================| : 1
"failUnlessEqual(a : 1
"assertEquals(a : 1
"failIfEqual(a : 1
"assertNotEquals(a : 1
"failUnless(a)" : 1
"assertTrue(a)" : 2
"assert_(a)" : 1
"failIf(a)" : 1
"assertFalse(a)" : 1
"failUnlessRaises(exc : 1
cal)" : 2
"failUnlessAlmostEqual(a : 1
"assertAlmostEquals(a : 1
"failIfAlmostEqual(a : 1
"assertNotAlmostEquals(a : 1
basestring : 1
"dict.viewitems()" : 1
"dict.viewkeys()" : 1
"dict.viewvalues()" : 1
T" : 3
execfile : 1
exitfunc : 1
funcattrs : 1
"my_function.func_closure" : 1
"my_function.__closure__" : 1
new_feature" : 1
getcwdu : 1
"type(x) : 2
SomeClass)" : 1
"while : 2
list(some_iterable) : 1
sorted(some_iterable) : 1
Detects : 1
imports2 : 1
"input(prompt)" : 1
"eval(input(prompt))" : 1
int))" : 2
float))" : 1
itertools_imports : 1
"itertools.ifilter()" : 2
"itertools.imap()" : 2
"itertools.ifilterfalse()" : 2
("__metaclass__ : 1
Meta" : 1
("class : 1
X(metaclass=Meta)") : 1
methodattrs : 1
"meth.im_func" : 1
"meth.__func__" : 1
ne : 1
numliterals : 1
made: : 1
+------------------------------------+-----------------------------------------------+ : 8
|====================================|===============================================| : 1
"operator.isCallable(obj)" : 1
"callable(obj)" : 1
"operator.sequenceIncludes(obj)" : 1
"operator.contains(obj)" : 1
"operator.isSequenceType(obj)" : 1
collections.abc.Sequence)" : 1
"operator.isMappingType(obj)" : 1
collections.abc.Mapping)" : 1
"operator.isNumberType(obj)" : 1
numbers.Number)" : 1
"operator.repeat(obj : 1
"operator.mul(obj : 1
"operator.irepeat(obj : 1
"operator.imul(obj : 1
2)]" : 1
V" : 1
E(V)" : 1
E(V).with_traceback(T)" : 1
raw_input : 1
backtick : 1
set_literal : 1
standarderror : 1
sys_exc : 1
tuple_params : 1
ws_comma : 1
xrange : 1
xreadlines : 1
file.xreadlines()" : 1
zip" : 1
Lib/lib2to3/ : 1
Lib/xml/etree/ElementTree.py : 1
("ET" : 1
"ET" : 1
Interactions : 2
sub-elements : 2
<country : 8
name="Liechtenstein"> : 3
<rank>1</rank> : 1
<year>2008</year> : 3
<gdppc>141100</gdppc> : 3
<neighbor : 13
name="Austria" : 3
direction="E"/> : 5
name="Switzerland" : 3
direction="W"/> : 5
</country> : 8
name="Singapore"> : 3
<rank>4</rank> : 1
<year>2011</year> : 5
<gdppc>59900</gdppc> : 3
name="Malaysia" : 3
direction="N"/> : 3
name="Panama"> : 2
<rank>68</rank> : 1
<gdppc>13600</gdppc> : 2
name="Costa : 2
Rica" : 2
name="Colombia" : 2
</data> : 3
ET.parse('country_data.xml') : 1
tree.getroot() : 2
ET.fromstring(country_data_as_string) : 1
root.tag : 1
root.attrib : 1
iterate: : 1
print(child.tag : 1
child.attrib) : 1
'Liechtenstein'} : 1
'Singapore'} : 1
'Panama'} : 1
index: : 2
root[0][1].text : 1
'2008' : 1
"TreeBuilder" : 6
enjoying : 1
"XMLPullParser.feed()" : 1
"XMLPullParser.read_events()" : 1
ET.XMLPullParser(['start' : 1
'end']) : 1
parser.feed('<mytag>sometext') : 1
list(parser.read_events()) : 1
[('start' : 1
<Element : 4
'mytag' : 1
0x7fa66db2be58>)] : 1
parser.feed(' : 1
text</mytag>') : 1
parser.read_events(): : 1
print(event) : 1
print(elem.tag : 1
'text=' : 1
elem.text) : 1
"iterparse()" : 3
"Element.iter()": : 1
neighbor : 1
root.iter('neighbor'): : 1
print(neighbor.attrib) : 1
'Austria' : 1
'direction': : 5
'E'} : 2
'Switzerland' : 1
'W'} : 2
'Malaysia' : 1
'N'} : 1
'Costa : 1
Rica' : 1
'Colombia' : 1
"Element.findall()" : 2
"Element.find()" : 2
"Element.get()" : 1
root.findall('country'): : 2
rank : 7
country.find('rank').text : 1
country.get('name') : 1
rank) : 1
Liechtenstein : 1
Singapore : 1
Panama : 1
"Element.text") : 1
("Element.set()" : 1
"Element.append()") : 1
country's : 1
"updated" : 1
root.iter('rank'): : 1
new_rank : 1
int(rank.text) : 1
rank.text : 1
str(new_rank) : 1
rank.set('updated' : 1
'yes') : 1
<rank : 5
updated="yes">2</rank> : 2
updated="yes">5</rank> : 2
updated="yes">69</rank> : 1
"Element.remove()" : 1
countries : 1
root.findall() : 1
int(country.find('rank').text) : 1
root.remove(country) : 1
"root.findall()" : 1
"SubElement()" : 2
ET.Element('a') : 1
ET.SubElement(a : 2
ET.SubElement(c : 1
ET.dump(a) : 1
<a><b : 1
/><c><d : 1
/></c></a> : 1
"prefix:sometag" : 1
"{uri}sometag" : 1
*URI* : 1
non-prefixed : 1
"fictional" : 1
<actors : 1
xmlns:fictional="http://characters.example.com" : 1
xmlns="http://people.example.com"> : 1
<actor> : 2
<name>John : 1
Cleese</name> : 1
<fictional:character>Lancelot</fictional:character> : 1
<fictional:character>Archie : 1
Leach</fictional:character> : 1
</actor> : 2
<name>Eric : 1
Idle</name> : 1
<fictional:character>Sir : 1
Robin</fictional:character> : 1
<fictional:character>Gunther</fictional:character> : 1
<fictional:character>Commander : 1
Clement</fictional:character> : 1
</actors> : 1
xpath : 1
"findall()": : 1
fromstring(xml_text) : 1
root.findall('{http://people.example.com}actor'): : 1
actor.find('{http://people.example.com}name') : 1
print(name.text) : 2
actor.findall('{http://characters.example.com}character'): : 1
|-->' : 2
char.text) : 2
namespaced : 1
{'real_person': : 1
'http://people.example.com' : 1
'role': : 1
'http://characters.example.com'} : 1
root.findall('real_person:actor' : 1
ns): : 2
actor.find('real_person:name' : 1
ns) : 1
actor.findall('role:character' : 1
|--> : 5
Lancelot : 1
Archie : 1
Leach : 1
Gunther : 1
Commander : 1
"countrydata" : 1
ET.fromstring(countrydata) : 1
root.findall(".") : 1
'neighbor' : 2
grand-children : 1
'country' : 1
root.findall("./country/neighbor") : 1
name='Singapore' : 2
'year' : 2
root.findall(".//year/..[@name='Singapore']") : 1
root.findall(".//*[@name='Singapore']/year") : 1
root.findall(".//neighbor[2]") : 1
dublin-core : 1
root.findall(".//{http://purl.org/dc/elements/1.1/}title") : 1
+-------------------------+--------------------------------------------------------+ : 15
|=========================|========================================================| : 1
"spam/egg" : 1
"egg" : 3
"{*}spam" : 1
"{}*" : 1
star- : 1
"*/egg" : 1
".//egg" : 1
"[@attrib]" : 1
"[@attrib='value']" : 1
"[@attrib!='value']" : 1
"[tag]" : 1
"[.!='text']" : 1
"[tag='text']" : 1
"[tag!='text']" : 1
"[position]" : 1
"last()-1") : 1
(expressions : 1
xml.etree.ElementTree.canonicalize(xml_data=None : 1
from_file=None : 1
Canonicalization : 1
normalise : 1
byte-by-byte : 1
serializers : 1
(*xml_data*) : 1
(*from_file*) : 1
file(-like) : 1
xml_data : 1
"<root>...</root>" : 1
print(canonicalize(xml_data)) : 1
open("c14n_output.xml" : 2
out_file: : 2
canonicalize(xml_data : 1
out=out_file) : 2
canonicalize(from_file="inputfile.xml" : 1
*with_comments*: : 1
*strip_text*: : 1
*rewrite_prefixes*: : 1
"n{number}" : 1
*qname_aware_tags*: : 1
*qname_aware_attrs*: : 1
*exclude_attrs*: : 1
*exclude_tags*: : 1
xml.etree.ElementTree.Comment(text=None) : 1
xml.etree.ElementTree.dump(elem) : 1
*elem* : 9
xml.etree.ElementTree.fromstring(text : 1
xml.etree.ElementTree.fromstringlist(sequence : 1
xml.etree.ElementTree.indent(tree : 1
space=' : 1
*tree* : 1
*space* : 1
xml.etree.ElementTree.iselement(element) : 1
xml.etree.ElementTree.iterparse(source : 1
events=None : 1
*events* : 7
""start"" : 2
""end"" : 4
""comment"" : 2
""pi"" : 2
""start-ns"" : 2
""end- : 1
ns"" : 1
"(event : 2
elem)" : 2
children; : 2
present.If : 2
xml.etree.ElementTree.parse(source : 1
xml.etree.ElementTree.ProcessingInstruction(target : 1
text=None) : 1
xml.etree.ElementTree.register_namespace(prefix : 1
xml.etree.ElementTree.SubElement(parent : 1
attrib={} : 2
**extra) : 2
Subelement : 1
subelement : 4
*attrib* : 3
xml.etree.ElementTree.tostring(element : 1
encoding='us-ascii' : 3
method='xml' : 3
xml_declaration=None : 3
default_namespace=None : 3
short_empty_elements=True) : 3
US-ASCII) : 3
""xml"" : 6
""text"" : 3
""xml"") : 3
*default_namespace* : 5
xml.etree.ElementTree.tostringlist(element : 1
"b"".join(tostringlist(element)) : 1
tostring(element)" : 1
xml.etree.ElementTree.XML(text : 1
"XML : 1
literals" : 1
xml.etree.ElementTree.XMLID(text : 1
id:s : 1
"xml.etree.ElementInclude" : 1
"{http://www.w3.org/2001/XInclude}include" : 3
**parse** : 3
**href** : 2
<document : 4
xmlns:xi="http://www.w3.org/2001/XInclude"> : 4
<xi:include : 2
href="source.xml" : 1
parse="xml" : 1
</document> : 4
XPointer : 1
ElementInclude : 2
ElementTree.parse("document.xml") : 1
ElementInclude.include(root) : 1
**source.xml** : 1
<para>This : 1
paragraph.</para> : 1
href : 1
"text": : 1
href="year.txt" : 1
parse="text" : 1
xml.etree.ElementInclude.default_loader(href : 1
*href* : 1
*parse* : 1
xml.etree.ElementInclude.include(elem : 1
base_url=None : 1
max_depth=6) : 1
"default_loader()" : 2
*base_url* : 2
*max_depth* : 2
inclusions : 1
xml.etree.ElementTree.Element(tag : 1
words) : 1
*tail* : 9
<a><b>1<c>2<d/>3</c></b>4</a> : 1
""1"" : 1
""4"" : 1
""2"" : 1
""3"" : 1
""".join(element.itertext())" : 1
attrib : 2
set(key : 1
(subelements) : 1
append(subelement) : 1
*subelement* : 5
extend(subelements) : 1
*subelements* : 1
find(match : 2
namespaces=None) : 8
*namespaces* : 4
findall(match : 2
findtext(match : 2
insert(index : 1
subelement) : 1
iter(tag=None) : 2
(depth : 1
iterfind(match : 2
itertext() : 1
makeelement(tag : 1
attrib) : 1
remove(subelement) : 1
find* : 1
subelements: : 1
root.find('foo') : 1
print("element : 2
subelements") : 1
found") : 1
artificially : 1
conveying : 1
"canonicalize()" : 2
perceptual : 1
reorder_attributes(root): : 1
root.iter(): : 1
el.attrib : 1
len(attrib) : 1
attribs : 1
sorted(attrib.items()) : 1
attrib.clear() : 1
attrib.update(attribs) : 1
xml.etree.ElementTree.ElementTree(element=None : 1
_setroot(element) : 1
"Element.findtext()" : 1
getroot() : 1
"Element.iterfind()" : 1
parse(source : 1
write(file : 1
US- : 1
"xmlns") : 1
""unicode"" : 1
object*; : 1
manipulated: : 1
<head> : 1
<title>Example : 1
page</title> : 1
</head> : 1
<body> : 2
<p>Moved : 1
href="http://example.org/">example.org</a> : 1
href="http://example.com/">example.com</a>.</p> : 1
</body> : 2
</html> : 2
paragraph: : 1
ElementTree() : 1
tree.parse("index.xhtml") : 1
0xb77e6fac> : 1
tree.find("body/p") : 1
0xb77ec26c> : 1
list(p.iter("a")) : 1
[<Element : 1
0xb77ec2ac> : 1
0xb77ec1cc>] : 1
Iterates : 1
i.attrib["target"] : 1
"blank" : 1
tree.write("output.xhtml") : 1
xml.etree.ElementTree.QName(text_or_uri : 1
tag=None) : 1
*text_or_uri* : 1
{uri}local : 1
"QName" : 1
xml.etree.ElementTree.TreeBuilder(element_factory=None : 1
comment_factory=None : 1
pi_factory=None : 1
insert_comments=False : 1
insert_pis=False) : 1
XML-like : 1
*element_factory* : 1
*comment_factory* : 1
*pi_factory* : 1
"Comment()" : 1
"ProcessingInstruction()" : 1
*insert_comments* : 1
*insert_pis* : 1
comments/pis : 1
data(data) : 1
end(tag) : 1
start(tag : 1
comment(text) : 1
"insert_comments" : 1
pi(target : 1
"insert_pis" : 1
doctype(name : 1
pubid : 1
*pubid* : 1
*system* : 1
start_ns(prefix : 1
end_ns(prefix) : 1
xml.etree.ElementTree.C14NWriterTarget(write : 1
with_comments=False : 1
strip_text=False : 1
rewrite_prefixes=False : 1
qname_aware_tags=None : 1
qname_aware_attrs=None : 1
exclude_attrs=None : 1
exclude_tags=None) : 1
xml.etree.ElementTree.XMLParser(* : 1
event-based : 1
Finishes : 1
construction; : 1
Feeds : 1
"XMLParser.feed()" : 1
*target*'s : 2
"start(tag : 1
attrs_dict)" : 1
"end(tag)" : 1
"data(data)" : 1
"XMLParser.close()" : 2
MaxDepth: : 1
maxDepth : 1
start(self : 1
attrib): : 1
self.depth : 4
self.maxDepth: : 1
self.maxDepth : 2
end(self : 1
data(self : 1
MaxDepth() : 1
XMLParser(target=target) : 1
exampleXml : 1
<a> : 1
<b> : 2
</b> : 2
<c> : 1
<d> : 1
</d> : 1
</c> : 1
</a>""" : 1
parser.feed(exampleXml) : 1
parser.close() : 1
xml.etree.ElementTree.XMLPullParser(events=None) : 1
input- : 1
""end-ns"" : 1
"read_events()" : 3
read_events() : 1
""end"") : 1
"end": : 1
"pi": : 1
"start-ns": : 1
"(prefix : 1
uri)" : 1
"end-ns": : 1
xml.etree.ElementTree.ParseError : 1
*column* : 6
tailoring : 1
*************************************************************** : 2
Lib/decimal.py : 1
datatype: : 1
guiding : 1
school." : 1
"2.2" : 1
"3.3000000000000003" : 1
exactness : 1
"0.1 : 1
0.3" : 1
"5.5511151231257827e-017" : 1
"1.30 : 2
1.20" : 2
"2.50" : 1
"schoolbook" : 1
"1.3 : 1
1.2" : 1
"1.56" : 1
"1.5600" : 1
alterable : 1
places) : 1
Decimal('0.142857') : 1
Decimal('0.1428571428571428571428571429') : 1
"without : 1
prejudice : 1
unrounded : 2
arithmetic) : 1
arithmetic." : 1
"+0" : 2
enablers : 1
"ROUND_FLOOR" : 1
"ROUND_HALF_DOWN" : 1
"ROUND_HALF_UP" : 2
"ROUND_UP" : 1
"ROUND_05UP" : 1
"Clamped" : 1
"DivisionByZero" : 6
"Inexact" : 8
"Rounded" : 5
"Subnormal" : 3
"Overflow" : 3
"Underflow" : 1
"getcontext()" : 7
traps: : 1
getcontext() : 3
Context(prec=28 : 1
rounding=ROUND_HALF_EVEN : 3
Emin=-999999 : 3
Emax=999999 : 3
capitals=1 : 3
clamp=0 : 3
flags=[] : 2
traps=[Overflow : 1
DivisionByZero : 1
InvalidOperation]) : 1
"-0": : 1
Decimal(10) : 3
Decimal('10') : 2
Decimal('3.14') : 3
Decimal(3.14) : 2
Decimal('3.140000000000000124344978758017532527446746826171875') : 1
Decimal((0 : 1
Decimal(str(2.0 : 1
0.5)) : 1
Decimal('1.4142135623730951') : 1
Decimal(2) : 2
Decimal('0.5') : 1
Decimal('1.414213562373095048801688724') : 2
Decimal('NaN') : 4
Decimal('-Infinity') : 3
c.traps[FloatOperation] : 1
decimal.FloatOperation: : 2
[<class : 6
'decimal.FloatOperation'>] : 2
Decimal('3.5') : 2
Decimal('3.0') : 2
Decimal('3.1415926535') : 4
Decimal('2.7182818285') : 2
Decimal('5.85987') : 1
getcontext().rounding : 1
ROUND_UP : 1
Decimal('5.85988') : 1
"InvalidOperation": : 1
Decimal("1e9999999999999999999") : 1
'decimal.InvalidOperation'>] : 1
flying : 1
circus: : 1
list(map(Decimal : 1
'1.34 : 1
1.87 : 1
3.45 : 1
2.35 : 1
0.03 : 1
9.25'.split())) : 1
max(data) : 1
Decimal('9.25') : 1
min(data) : 1
Decimal('0.03') : 3
[Decimal('0.03') : 1
Decimal('1.34') : 1
Decimal('1.87') : 1
Decimal('2.35') : 1
Decimal('3.45') : 1
Decimal('9.25')] : 1
sum(data) : 1
Decimal('19.29') : 1
str(a) : 1
'1.34' : 1
1.34 : 1
round(a : 1
Decimal('1.3') : 1
int(a) : 1
Decimal('6.70') : 1
Decimal('2.5058') : 1
Decimal('0.77') : 1
Decimal: : 1
Decimal(2).sqrt() : 1
Decimal('2.718281828459045235360287471') : 2
Decimal('10').ln() : 1
Decimal('2.302585092994045684017991455') : 1
Decimal('10').log10() : 1
Decimal('1') : 2
Decimal('7.325').quantize(Decimal('.01') : 1
rounding=ROUND_DOWN) : 2
Decimal('7.32') : 1
Decimal('7.325').quantize(Decimal('1.') : 1
rounding=ROUND_UP) : 1
Decimal('8') : 1
Context() : 1
"setcontext()" : 4
"ExtendedContext" : 1
myothercontext : 1
Context(prec=60 : 1
rounding=ROUND_HALF_DOWN) : 1
setcontext(myothercontext) : 1
Decimal('0.142857142857142857142857142857142857142857142857142857142857') : 1
ExtendedContext : 1
Context(prec=9 : 2
traps=[]) : 2
setcontext(ExtendedContext) : 3
Decimal('0.142857143') : 1
Decimal(42) : 3
Decimal(0) : 7
Decimal('Infinity') : 4
setcontext(BasicContext) : 1
"<pyshell#143>" : 1
DivisionByZero: : 2
"clear_flags()" : 1
getcontext().clear_flags() : 1
Decimal(355) : 1
Decimal(113) : 1
Decimal('3.14159292') : 1
flags=[Inexact : 1
Rounded] : 1
(digits : 1
getcontext().traps[DivisionByZero] : 1
"<pyshell#112>" : 1
decimal.Decimal(value='0' : 1
"Decimal('0')" : 3
'5' : 1
'6' : 1
'9' : 3
[digit].. : 1
decimal-part : 2
[digits] : 3
['.'] : 1
exponent-part : 1
'Infinity' : 1
'Inf' : 1
'sNaN' : 1
numeric-value : 2
[exponent-part] : 1
numeric-string : 1
Devanāgarī : 1
fullwidth : 1
"'\uff10'" : 1
"'\uff19'" : 1
("0" : 3
"Decimal((0 : 1
-3))" : 1
"Decimal('1.414')" : 1
"Decimal(float('1.1'))" : 1
"Decimal('1.100000000000000088817841970012523233890533447265625')" : 1
"Decimal('3.00000')" : 1
*dividend* : 1
divisor: : 1
(-7) : 1
Decimal(-7) : 2
Decimal(4) : 2
Decimal('-3') : 1
y": : 1
Decimal('-1') : 3
"remainder" : 1
"divide- : 1
Mixed-type : 1
adjusted() : 1
coefficient's : 1
"Decimal('321e+5').adjusted()" : 1
infinities : 3
as_tuple() : 1
"DecimalTuple(sign : 1
exponent)" : 1
canonical() : 1
compare(other : 1
"compare()" : 4
NaN: : 1
Decimal('0') : 1
compare_signal(other : 1
compare_total(other : 1
Decimal('12.0').compare_total(Decimal('12')) : 1
"Decimal('-1')" : 1
"Decimal('1')" : 1
quiet: : 6
InvalidOperation : 5
compare_total_mag(other : 1
"compare_total()" : 1
"x.compare_total_mag(y)" : 1
"x.copy_abs().compare_total(y.copy_abs())" : 1
copy_abs() : 1
copy_negate() : 1
copy_sign(other : 1
Decimal('2.3').copy_sign(Decimal('-1.5')) : 1
Decimal('-2.3') : 1
exp(context=None) : 1
(natural) : 1
"e**x" : 1
Decimal(321).exp() : 1
Decimal('2.561702493119680037517373933E+139') : 1
from_float(f) : 1
"Decimal('0.1')" : 1
"0x1.999999999999ap-4" : 1
Decimal.from_float(float('nan')) : 1
Decimal.from_float(float('inf')) : 1
Decimal.from_float(float('-inf')) : 1
fma(other : 1
Fused : 1
multiply-add : 1
self*other+third : 1
self*other : 1
Decimal(2).fma(3 : 1
Decimal('11') : 1
is_canonical() : 1
is_finite() : 1
is_infinite() : 1
is_nan() : 1
(quiet : 1
signaling) : 1
is_normal(context=None) : 1
*normal* : 1
is_qnan() : 1
is_signed() : 1
is_snan() : 1
is_subnormal(context=None) : 1
is_zero() : 1
ln(context=None) : 1
log10(context=None) : 1
logb(context=None) : 1
"Decimal('-Infinity')" : 1
"Decimal('Infinity')" : 2
logical_and(other : 1
"logical_and()" : 2
operands* : 4
operands) : 3
digit-wise : 4
logical_invert(context=None) : 1
"logical_invert()" : 2
logical_or(other : 1
"logical_or()" : 2
logical_xor(other : 1
"logical_xor()" : 2
max(other : 1
"max(self : 1
quiet) : 2
max_mag(other : 1
min(other : 1
"min(self : 1
min_mag(other : 1
next_minus(context=None) : 1
next_plus(context=None) : 1
next_toward(other : 1
normalize(context=None) : 1
"Decimal('0e0')" : 1
"Decimal('32.100')" : 1
"Decimal('0.321000e+2')" : 1
"Decimal('32.1')" : 1
number_class(context=None) : 1
""-Infinity"" : 1
""-Normal"" : 1
""-Subnormal"" : 1
""-Zero"" : 1
""+Zero"" : 1
""+Subnormal"" : 1
""+Normal"" : 1
""+Infinity"" : 1
""NaN"" : 1
""sNaN"" : 1
quantize(exp : 1
rounding=None : 2
Decimal('1.41421356').quantize(Decimal('1.000')) : 1
Decimal('1.414') : 1
quantize : 4
quantized : 1
Underflow : 1
"Etiny()" : 1
radix() : 2
"Decimal(10)" : 1
(base) : 1
remainder_near(other : 1
Decimal(18).remainder_near(Decimal(10)) : 1
Decimal('-2') : 1
Decimal(25).remainder_near(Decimal(10)) : 1
Decimal('5') : 1
Decimal(35).remainder_near(Decimal(10)) : 1
Decimal('-5') : 1
rotate(other : 1
-precision : 2
same_quantum(other : 1
scaleb(other : 1
"10**other" : 1
shift(other : 1
sqrt(context=None) : 1
to_eng_string(context=None) : 1
Engineering : 2
"Decimal('123E+1')" : 1
"Decimal('1.23E+3')" : 1
to_integral(rounding=None : 1
"to_integral_value()" : 1
"to_integral" : 1
to_integral_exact(rounding=None : 1
Round : 12
to_integral_value(rounding=None : 1
*rounding*; : 1
operand* : 1
decimal.getcontext() : 1
decimal.setcontext(c) : 1
decimal.localcontext(ctx=None : 1
\*\*kwargs) : 1
localcontext() : 1
ctx.prec : 1
calculate_something() : 2
+s : 6
localcontext(prec=42) : 1
pre-made : 1
decimal.BasicContext : 1
Precision : 4
decimal.ExtendedContext : 1
computations) : 1
decimal.DefaultContext : 1
"Context.prec"="28" : 1
"Context.rounding"="ROUND_HALF_EVEN" : 1
decimal.Context(prec=None : 1
Emin=None : 1
Emax=None : 1
capitals=None : 1
clamp=None : 1
flags=None : 2
traps=None) : 1
"DefaultContext" : 1
*prec* : 1
["1" : 1
"MAX_PREC"] : 1
*rounding* : 1
*traps* : 1
*Emin* : 2
*Emax* : 2
["MIN_EMIN" : 1
"0"] : 1
["0" : 1
"MAX_EMAX"] : 1
*capitals* : 1
"E"; : 1
"Decimal('6.02e+23')" : 1
*clamp* : 4
"Emin : 2
prec : 4
Emax : 1
holds: : 1
Context(prec=6 : 1
Emax=999 : 1
clamp=1).create_decimal('1.23e999') : 1
Decimal('1.23000E+999') : 1
"adjusted()" : 1
"C.exp(x)" : 1
"x.exp(context=C)" : 1
clear_flags() : 1
clear_traps() : 1
copy_decimal(num) : 1
create_decimal(num) : 1
Decimal('3.4445') : 2
Decimal('1.0023') : 2
Decimal('4.45') : 1
Decimal('4.44') : 1
to-number : 1
create_decimal_from_float(f) : 1
"Decimal.from_float()" : 1
Context(prec=5 : 3
context.create_decimal_from_float(math.pi) : 2
Decimal('3.1415') : 1
traps=[Inexact]) : 1
decimal.Inexact: : 2
Etiny() : 1
"Etiny" : 1
Etop() : 1
"Emax : 1
recounted : 1
canonical(x) : 1
compare(x : 1
compare_signal(x : 1
compare_total(x : 1
compare_total_mag(x : 1
copy_abs(x) : 1
copy_negate(x) : 1
copy_sign(x : 1
divide_int(x : 1
Divides : 1
exp(x) : 1
"e : 1
fma(x : 1
is_canonical(x) : 1
canonical; : 1
is_finite(x) : 1
finite; : 1
is_infinite(x) : 1
is_nan(x) : 1
qNaN : 1
sNaN; : 1
is_normal(x) : 1
is_qnan(x) : 1
is_signed(x) : 1
is_snan(x) : 1
is_subnormal(x) : 1
subnormal; : 1
is_zero(x) : 1
ln(x) : 1
log10(x) : 1
logb(x) : 1
MSD : 1
logical_and(x : 1
logical_invert(x) : 1
logical_or(x : 1
logical_xor(x : 1
*xor* : 1
max(x : 1
max_mag(x : 1
min_mag(x : 1
minus(x) : 1
Minus : 1
next_minus(x) : 1
next_plus(x) : 1
next_toward(x : 1
normalize(x) : 1
number_class(x) : 1
plus(x) : 1
Plus : 2
power(x : 1
modulo=None) : 1
"modulo" : 3
"x**y" : 1
'precision' : 2
"Decimal(0) : 1
Decimal(0)" : 1
"Decimal('NaN')" : 1
"power()" : 1
modulo" : 2
hold: : 3
"Context.power(x : 1
modulo)" : 1
quantize(x : 1
(rounded) : 1
remainder_near(x : 1
rotate(x : 1
same_quantum(x : 1
scaleb(x : 1
shift(x : 1
sqrt(x) : 1
Square : 1
to_eng_string(x) : 1
to_integral_exact(x) : 1
Rounds : 1
to_sci_string(x) : 1
+-----------------------+-----------------------+---------------------------------+ : 5
|=======================|=======================|=================================| : 1
decimal.MAX_PREC : 1
decimal.MAX_EMAX : 1
decimal.MIN_EMIN : 1
decimal.MIN_ETINY : 1
"-849999999" : 1
"-1999999999999999997" : 1
decimal.HAVE_THREADS : 1
decimal.HAVE_CONTEXTVAR : 1
decimal.ROUND_CEILING : 1
decimal.ROUND_DOWN : 1
decimal.ROUND_FLOOR : 1
decimal.ROUND_HALF_DOWN : 1
decimal.ROUND_HALF_EVEN : 1
decimal.ROUND_HALF_UP : 1
decimal.ROUND_UP : 1
decimal.ROUND_05UP : 1
exact) : 1
decimal.Clamped : 1
clamping : 1
decimal.DecimalException : 1
decimal.DivisionByZero : 1
non-infinite : 1
decimal.Inexact : 1
decimal.InvalidOperation : 1
Infinity : 7
sqrt(-x) : 1
decimal.Overflow : 1
"Context.Emax" : 1
inward : 1
outward : 1
decimal.Rounded : 1
Signaled : 1
digits; : 3
"5.00" : 1
decimal.Subnormal : 1
Occurs : 2
small) : 1
decimal.Underflow : 1
decimal.FloatOperation : 1
"create_decimal_from_float()" : 1
trapped) : 1
signals: : 1
exceptions.ArithmeticError(exceptions.Exception) : 1
DecimalException : 1
Clamped : 1
DivisionByZero(DecimalException : 1
exceptions.ZeroDivisionError) : 1
Inexact : 1
Overflow(Inexact : 1
Rounded) : 1
Underflow(Inexact : 1
Rounded : 2
Subnormal) : 1
Subnormal : 1
FloatOperation(DecimalException : 1
exceptions.TypeError) : 1
(making : 1
exactly); : 1
amplified : 1
offsetting : 1
Knuth : 1
distributive : 1
addition: : 1
Seminumerical : 1
Algorithms : 2
getcontext : 1
Decimal(11111113) : 2
Decimal(-11111111) : 2
Decimal('7.51111111') : 2
(u : 2
Decimal('9.5111111') : 1
(v : 2
Decimal(20000) : 2
Decimal(-6) : 2
Decimal('6.0000003') : 2
(u*v) : 2
(u*w) : 2
Decimal('0.01') : 2
(v+w) : 2
Decimal('0.0060000') : 3
significance: : 1
Decimal('9.51111111') : 2
"sNaN" : 2
Infinities : 1
(affine) : 1
"0/0" : 1
flagging : 1
"Decimal('NaN')==Decimal('NaN')") : 1
comparisons; : 2
854 : 1
5.7) : 1
standards-compliance : 1
"compare_signal()" : 1
Decimal('0E-1000026') : 1
"getcontext().prec=10") : 1
*DefaultContext* : 2
applicationwide : 1
DefaultContext.prec : 1
DefaultContext.rounding : 1
ROUND_DOWN : 1
DefaultContext.traps : 1
ExtendedContext.traps.copy() : 1
DefaultContext.traps[InvalidOperation] : 1
setcontext(DefaultContext) : 1
t3.start() : 1
moneyfmt(value : 1
places=2 : 1
curr='' : 1
sep=',' : 1
dp='.' : 1
pos='' : 1
neg='-' : 1
trailneg=''): : 1
curr: : 1
blank) : 2
sep: : 1
(comma : 2
dp: : 1
period) : 2
pos: : 1
neg: : 1
trailneg:optional : 1
indicator: : 1
Decimal('-1234567.8901') : 1
moneyfmt(d : 3
curr='$') : 1
'-$1,234,567.89' : 1
places=0 : 1
sep='.' : 1
dp='' : 1
neg='' : 1
trailneg='-') : 1
'1.234.568-' : 1
curr='$' : 1
neg='(' : 1
trailneg=')') : 1
'($1,234,567.89)' : 1
moneyfmt(Decimal(123456789) : 1
'123 : 1
789.00' : 1
moneyfmt(Decimal('-0.02') : 1
neg='<' : 1
trailneg='>') : 1
'<0.02>' : 1
-places : 1
'0.01' : 1
value.quantize(q).as_tuple() : 1
list(map(str : 1
digits)) : 1
result.append : 1
digits.pop : 1
build(trailneg) : 1
range(places): : 1
build(next() : 1
build(dp) : 1
build('0') : 1
build(next()) : 1
build(sep) : 1
build(curr) : 1
build(neg : 1
''.join(reversed(result)) : 1
pi(): : 1
print(pi()) : 1
3.141592653589793238462643383 : 1
Decimal(3) : 1
"three=3.0" : 1
lasts : 8
na : 2
da : 2
lasts: : 4
n+na : 1
na+8 : 1
d+da : 1
da+32 : 1
(t : 1
exp(x): : 1
print(exp(Decimal(1))) : 1
2.718281828459045235360287471 : 1
print(exp(Decimal(2))) : 1
7.389056098930650227230427461 : 1
print(exp(2.0)) : 1
7.38905609893 : 1
print(exp(2+0j)) : 1
(7.38905609893+0j) : 1
cos(x): : 1
Taylor : 2
pi) : 2
print(cos(Decimal('0.5'))) : 1
0.8775825618903727161162815826 : 1
print(cos(0.5)) : 1
0.87758256189 : 1
print(cos(0.5+0j)) : 1
(0.87758256189+0j) : 1
(i-1) : 3
sin(x): : 1
print(sin(Decimal('0.5'))) : 1
0.4794255386042030002732879352 : 1
print(sin(0.5)) : 1
0.479425538604 : 1
print(sin(0.5+0j)) : 1
(0.479425538604+0j) : 1
"decimal.Decimal('1234.5')" : 1
letter: : 1
decimal.Decimal : 1
D('1.23') : 1
D('3.45') : 1
Decimal('4.68') : 1
validation: : 1
TWOPLACES : 1
Decimal('3.214').quantize(TWOPLACES) : 1
Decimal('3.21') : 2
Decimal('3.21').quantize(TWOPLACES : 1
context=Context(traps=[Inexact])) : 2
Decimal('3.214').quantize(TWOPLACES : 1
Inexact: : 1
followed-up : 1
step: : 2
Decimal('102.72') : 1
Decimal('3.17') : 1
Decimal('105.89') : 1
Decimal('99.55') : 1
Decimal('4314.24') : 1
b).quantize(TWOPLACES) : 1
Decimal('325.62') : 2
a).quantize(TWOPLACES) : 1
mul(x : 2
fp=TWOPLACES): : 2
y).quantize(fp) : 2
div(x : 1
mul(a : 3
div(b : 1
"200.000" : 1
"2E2" : 1
".02E+4" : 1
representative: : 1
map(Decimal : 1
200.000 : 1
2E2 : 1
.02E+4'.split()) : 1
[v.normalize() : 1
values] : 1
[Decimal('2E+2') : 1
Decimal('2E+2') : 2
Decimal('2E+2')] : 1
non-exponential : 1
"5.0E+3" : 1
original's : 1
two-place : 1
remove_exponent(d): : 1
d.quantize(Decimal(1)) : 1
d.to_integral() : 1
d.normalize() : 1
remove_exponent(Decimal('5E+3')) : 1
Decimal('5000') : 1
intuition : 1
suggest: : 1
Decimal(math.pi) : 1
Decimal('3.141592653589793115997963468544185161590576171875') : 1
Widely : 1
ill-conditioned : 1
"what : 1
Decimal('3.104') : 2
Decimal('2.104') : 2
Decimal('5.21') : 1
Decimal('0.000') : 1
Decimal('5.20') : 1
+Decimal('1.23456789') : 1
Decimal('1.23') : 1
"Context.create_decimal()" : 1
rounding=ROUND_DOWN).create_decimal('1.2345678') : 1
Decimal('1.2345') : 1
PyPy3 : 1
C/CFFI : 1
medium- : 1
Theoretic : 1
[2]: : 1
setcontext(Context(prec=MAX_PREC : 1
Emax=MAX_EMAX : 2
Emin=MIN_EMIN)) : 1
Decimal('904625697166532776746648320380374280103671755200316906558262375061821325312') : 1
insufficient: : 1
8GB : 1
500MB : 2
each: : 1
(4-byte : 1
build): : 1
maxdigits : 1
((500 : 1
1024**2) : 1
Context(prec=maxdigits : 1
Emin=MIN_EMIN) : 1
c.traps[Inexact] : 1
setcontext(c) : 1
nines: : 1
Decimal(0).logical_invert() : 1
sys.getsizeof(x) : 1
524288112 : 1
'decimal.Inexact'>] : 1
overallocation) : 1
practically : 1
"Decimal(0)" : 1
"Fraction(0 : 1
collections: : 1
"range(0)" : 1
(Important : 1
operands.) : 1
+---------------+-----------------------------------+---------+ : 4
|===============|===================================|=========| : 1
non-Boolean : 1
arbitrarily; : 1
+--------------+---------------------------+ : 9
|==============|===========================| : 1
sense; : 1
Non-identical : 1
customized; : 1
*integers* : 1
*floating : 1
numbers* : 2
*complex : 1
user-definable : 1
Unadorned : 1
"'j'" : 1
"'J'" : 1
arithmetic: : 2
"narrower" : 1
+-----------------------+-----------------------------------+-----------+----------------------+ : 17
|=======================|===================================|===========|======================| : 1
"abs(x)" : 2
(3)(6) : 1
(4)(6) : 1
"complex(re : 1
im)" : 1
*re* : 1
"c.conjugate()" : 1
resultant : 2
result's : 1
infinity: : 1
"(-1)//2" : 1
"1//(-2)" : 1
"(-1)//(-2)" : 1
"pow(0 : 1
"Nd" : 3
property) : 3
https://www.unicode.org/Public/14.0.0/ucd/extracted/DerivedNum : 1
ericType.txt : 1
+----------------------+-----------------------------------------------+ : 5
|======================|===============================================| : 1
"math.trunc(x)" : 1
"math.floor(x)" : 1
"math.ceil(x)" : 1
two's : 4
+--------------+----------------------------------+------------+ : 7
|==============|==================================|============| : 1
*exclusive : 1
or* : 1
(1)(3) : 1
"pow(2 : 2
bit-width : 1
max(x.bit_length() : 1
y.bit_length())" : 1
int.bit_length() : 1
-37 : 1
'-0b100101' : 2
"x.bit_length()" : 2
"2**(k-1) : 1
2**k" : 1
int(log(abs(x) : 1
2))" : 1
bit_length(self): : 1
bin(self) : 1
bin(-37) : 1
s.lstrip('-0b') : 1
len('100101') : 1
int.bit_count() : 1
'0b10011' : 1
n.bit_count() : 1
(-n).bit_count() : 1
bit_count(self): : 1
bin(self).count("1") : 1
int.to_bytes(length=1 : 1
byteorder='big' : 7
signed=False) : 3
(1024).to_bytes(2 : 1
byteorder='big') : 4
b'\x04\x00' : 1
(1024).to_bytes(10 : 1
b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00' : 1
(-1024).to_bytes(10 : 1
signed=True) : 2
b'\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00' : 1
x.to_bytes((x.bit_length() : 1
byteorder='little') : 2
b'\xe8\x03' : 1
""little"" : 2
*signed* : 4
(65).to_bytes() : 1
b'A' : 1
to_bytes(n : 1
length=1 : 1
signed=False): : 2
byteorder : 4
'little': : 2
range(length) : 1
'big': : 2
reversed(range(length)) : 1
ValueError("byteorder : 2
'big'") : 2
bytes((n : 1
i*8) : 1
0xff : 1
int.from_bytes(bytes : 1
int.from_bytes(b'\x00\x10' : 2
int.from_bytes(b'\xfc\x00' : 2
-1024 : 1
64512 : 1
int.from_bytes([255 : 1
16711680 : 1
from_bytes(bytes : 1
little_ordered : 3
list(bytes) : 1
list(reversed(bytes)) : 1
i*8 : 1
enumerate(little_ordered)) : 1
(little_ordered[-1] : 1
0x80): : 1
8*len(little_ordered) : 1
int.as_integer_ratio() : 1
(whole : 1
float.as_integer_ratio() : 1
float.is_integer() : 1
(-2.0).is_integer() : 1
(3.2).is_integer() : 1
*decimal* : 1
float.hex() : 1
float.fromhex(s) : 1
['0x'] : 1
['.' : 1
fraction] : 1
['p' : 1
exponent] : 1
"fraction" : 1
6.4.4.2 : 1
"Double.toHexString" : 1
"0x3.a7p10" : 1
10./16 : 1
7./16**2) : 1
2.0**10" : 1
"3740.0": : 1
float.fromhex('0x3.a7p10') : 1
3740.0 : 1
"3740.0" : 1
float.hex(3740.0) : 1
'0x1.d380000000000p+11' : 1
"fractions.Fraction") : 1
2**31 : 1
2**61 : 1
"hash(x)" : 3
invmod(n : 1
P" : 1
"invmod(n : 1
P)" : 1
apply; : 1
"sys.hash_info.inf" : 2
"-hash(-x)" : 1
"-sys.hash_info.inf" : 1
"hash(z.real) : 1
sys.hash_info.imag : 2
hash(z.imag)" : 1
"2**sys.hash_info.width" : 1
"range(-2**(sys.hash_info.width : 1
2**(sys.hash_info.width : 2
1))" : 1
"complex": : 1
hash_fraction(m : 1
hash(fractions.Fraction(m : 1
sys.hash_info.modulus : 1
(Unnecessary : 1
coprime.) : 1
hash_value : 11
sys.hash_info.inf : 2
Fermat's : 1
Theorem: : 1
pow(n : 3
P-1 : 1
P-2 : 1
(abs(m) : 1
-hash_value : 1
hash_float(x): : 1
math.isnan(x): : 1
object.__hash__(x) : 1
math.isinf(x): : 1
-sys.hash_info.inf : 1
hash_fraction(*x.as_integer_ratio()) : 1
hash_complex(z): : 1
z.""" : 1
hash_float(z.real) : 1
hash_float(z.imag) : 1
2**sys.hash_info.width : 1
(hash_value : 2
(M : 1
M) : 1
container.__iter__() : 1
depth- : 1
traversal.) : 1
protocol*: : 1
iterator.__iter__() : 1
iterator.__next__() : 1
tailored : 1
(concatenation) : 1
(repetition) : 1
+----------------------------+----------------------------------+------------+ : 13
|============================|==================================|============| : 1
(2)(7) : 1
"s[i]" : 2
"s[i:j]" : 1
(3)(4) : 1
"s[i:j:k]" : 3
(3)(5) : 1
"len(s)" : 12
"min(s)" : 1
"max(s)" : 1
"s.index(x[ : 1
i[ : 1
j]])" : 1
*j*) : 2
"s.count(x)" : 1
reference.) : 1
testing: : 1
"gg" : 1
*s*) : 2
haunts : 1
[[] : 2
[]] : 1
lists[0].append(3) : 2
[[3] : 2
[3]] : 1
"[[]]" : 1
one-element : 1
"[[]] : 1
lists[1].append(5) : 1
lists[2].append(7) : 1
[7]] : 1
list? : 1
*s*: : 1
"len(s) : 3
(j-i)/k" : 1
"i+k" : 1
"i+2*k" : 1
"i+3*k" : 1
Concatenating : 1
"bytes.join()" : 1
investigate : 1
"s[i:j].index(x)" : 1
255") : 1
+--------------------------------+----------------------------------+-----------------------+ : 15
|================================|==================================|=======================| : 1
"s[i] : 1
"s[i:j] : 2
s[i:j]" : 1
"s[i:j:k] : 1
s[i:j:k]" : 1
"s.append(x)" : 1
"s[len(s):len(s)] : 2
[x]") : 2
"s.clear()" : 1
s[:]") : 1
"s.copy()" : 1
"s[:]") : 1
"s.extend(t)" : 1
t") : 1
"s.insert(i : 1
"s[i:i] : 1
"s.pop()" : 1
"s.pop(i)" : 1
"s.remove(x)" : 1
"s.reverse()" : 1
economy : 2
"set") : 1
list([iterable]) : 1
"[a]" : 1
c]" : 1
iterable]" : 1
"list(iterable)" : 1
"iterable[:]" : 1
"list( : 1
sort(* : 1
(keyword-only : 1
tuple([iterable]) : 1
"a," : 1
"(a,)" : 1
Separating : 1
built-in: : 1
"tuple(iterable)" : 1
"tuple( : 1
"f((a : 1
c))" : 1
"r[i] : 4
step*i" : 2
stop" : 2
"r[0]" : 1
list(range(10)) : 1
list(range(1 : 2
11)) : 1
-10 : 1
-9] : 2
list(range(0)) : 1
supplied) : 2
(small) : 1
subranges : 1
range): : 1
r.index(10) : 1
r[:5] : 1
r[-1] : 1
"range(0) : 1
"range(0 : 1
2)".) : 1
linspace : 1
Textual : 2
*strings* : 1
"'allows : 1
quotes'" : 2
""allows : 1
quotes"" : 2
Triple : 3
quoted: : 2
"'''Three : 1
quotes'''" : 2
""""Three : 1
quotes"""" : 2
"("spam : 1
"eggs") : 1
eggs"" : 1
("raw") : 1
"character" : 1
s[0:1]" : 1
"type(object).__str__(object)" : 1
"repr(object)" : 1
"str(bytes : 1
errors)" : 3
"bytes.decode(encoding : 1
str(b'Zoot!') : 1
"b'Zoot!'" : 1
Formatting) : 2
(printf-style : 1
str.capitalize() : 1
digraphs : 1
str.casefold() : 1
Casefolded : 1
Casefolding : 1
""ss"" : 2
"'ß'"; : 1
casefolding : 1
str.center(width[ : 1
fillchar]) : 3
*fillchar* : 3
str.count(sub[ : 1
str.encode(encoding='utf-8' : 1
"'utf-8'"; : 2
str.endswith(suffix[ : 1
str.expandtabs(tabsize=8) : 1
("\t") : 1
copied.) : 2
("\r") : 1
'01\t012\t0123\t01234'.expandtabs() : 1
'01 : 2
0123 : 4
01234' : 4
'01\t012\t0123\t01234'.expandtabs(4) : 1
str.find(sub[ : 1
"s[start:end]" : 4
str.format(*args : 1
{0}".format(1+2) : 1
str.format_map(mapping) : 1
"str.format(**mapping)" : 1
Default(dict): : 1
'{name} : 1
born : 2
{country}'.format_map(Default(name='Guido')) : 1
'Guido : 1
country' : 1
str.index(sub[ : 1
str.isalnum() : 1
"c.isalpha()" : 1
"c.isdecimal()" : 1
"c.isdigit()" : 1
"c.isnumeric()" : 1
str.isalpha() : 1
Alphabetic : 3
"Lm" : 1
"Lt" : 3
"Lu" : 3
"Ll" : 2
"Lo" : 1
"Alphabetic" : 1
str.isascii() : 1
U+0000-U+007F : 1
str.isdecimal() : 1
ARABIC-INDIC : 1
DIGIT : 1
ZERO : 7
str.isdigit() : 1
superscript : 1
Kharosthi : 1
Numeric_Type=Digit : 2
Numeric_Type=Decimal : 2
str.isidentifier() : 1
"keyword.iskeyword()" : 1
iskeyword : 1
'hello'.isidentifier() : 1
iskeyword('hello') : 1
(True : 3
'def'.isidentifier() : 1
iskeyword('def') : 1
str.islower() : 1
cased : 7
str.isnumeric() : 1
U+2155 : 1
VULGAR : 1
FRACTION : 1
FIFTH : 1
Numeric_Type=Numeric : 1
str.isprintable() : 1
str.isspace() : 1
*whitespace* : 1
"unicodedata") : 1
"Zs" : 1
("Separator : 1
space") : 1
"WS" : 1
str.istitle() : 1
titlecased : 3
uncased : 3
str.isupper() : 1
'BANANA'.isupper() : 1
'banana'.isupper() : 1
'baNana'.isupper() : 1
'.isupper() : 1
str.join(iterable) : 1
str.ljust(width[ : 1
justified : 4
str.lower() : 1
str.lstrip([chars]) : 1
stripped: : 6
spacious : 6
'.lstrip() : 2
'spacious : 1
'www.example.com'.lstrip('cmowz.') : 1
"str.removeprefix()" : 1
'Arthur: : 2
three!'.lstrip('Arthur: : 1
'ee!' : 1
three!'.removeprefix('Arthur: : 1
'three!' : 1
str.maketrans(x[ : 1
y[ : 1
z]]) : 1
"str.translate()" : 1
(integers) : 1
lengths) : 1
str.partition(sep) : 1
str.removeprefix(prefix : 1
"string[len(prefix):]" : 1
'TestHook'.removeprefix('Test') : 1
'Hook' : 1
'BaseTestCase'.removeprefix('Test') : 1
'BaseTestCase' : 1
str.removesuffix(suffix : 1
"string[:-len(suffix)]" : 1
'MiscTests'.removesuffix('Tests') : 1
'Misc' : 1
'TmpDirMixin'.removesuffix('Tests') : 1
'TmpDirMixin' : 1
str.replace(old : 1
new[ : 3
count]) : 3
str.rfind(sub[ : 1
str.rindex(sub[ : 1
str.rjust(width[ : 1
str.rpartition(sep) : 1
str.rsplit(sep=None : 1
maxsplit=- : 6
*rightmost* : 2
str.rstrip([chars]) : 1
'.rstrip() : 2
spacious' : 2
'mississippi'.rstrip('ipz') : 1
'mississ' : 1
"str.removesuffix()" : 1
Python'.rstrip(' : 1
Python'.removesuffix(' : 1
'Monty' : 1
str.split(sep=None : 1
"maxsplit+1" : 2
made) : 2
"'1,,2'.split(',')" : 1
"['1' : 2
'2']") : 1
"'1<>2<>3'.split('<>')" : 1
'3']") : 1
"['']" : 1
'1,2,3'.split(',') : 1
['1' : 6
'3'] : 3
'1,2,3'.split(',' : 1
maxsplit=1) : 2
'2,3'] : 1
'1,2,,3,'.split(',') : 1
3'.split() : 2
3'.split(maxsplit=1) : 2
'2 : 1
3'] : 2
'.split() : 2
str.splitlines(keepends=False) : 1
+-------------------------+-------------------------------+ : 12
|=========================|===============================| : 1
"\x0b" : 1
Tabulation : 1
"\x0c" : 1
"\x1c" : 1
"\x1d" : 1
"\x1e" : 1
"\x85" : 1
(C1 : 1
Code) : 1
"\u2028" : 1
"\u2029" : 1
'ab : 2
c\n\nde : 4
fg\rkl\r\n'.splitlines() : 2
['ab : 2
'de : 2
fg' : 2
'kl'] : 1
fg\rkl\r\n'.splitlines(keepends=True) : 2
c\n' : 2
fg\r' : 2
'kl\r\n'] : 1
"".splitlines() : 1
"One : 1
line\n".splitlines() : 2
['One : 1
line'] : 1
"split('\n')" : 1
''.split('\n') : 1
[''] : 1
'Two : 1
lines\n'.split('\n') : 1
['Two : 1
lines' : 2
str.startswith(prefix[ : 1
str.strip([chars]) : 1
'spacious' : 1
'www.example.com'.strip('cmowz.') : 1
'example' : 2
comment_string : 1
'#...... : 1
#32 : 1
.......' : 1
comment_string.strip('.# : 1
'Section : 2
#32' : 1
str.swapcase() : 1
"s.swapcase().swapcase() : 1
str.title() : 1
world'.title() : 2
language-independent : 2
contractions : 2
possessives : 2
"they're : 1
bill's : 4
UK".title() : 2
"They'Re : 1
Bill'S : 2
Friends : 2
Uk" : 2
"string.capwords()" : 1
titlecase(s): : 2
re.sub(r"[A-Za-z]+('[A-Za-z]+)?" : 1
mo: : 2
mo.group(0).capitalize() : 1
titlecase("they're : 1
friends.") : 2
"They're : 1
Bill's : 2
Friends." : 2
str.translate(table) : 1
"str.maketrans()" : 1
character-to-character : 1
str.upper() : 1
"s.upper().isupper()" : 1
(Letter : 5
uppercase) : 3
titlecase) : 2
uppercasing : 1
str.zfill(width) : 1
("'+'"/"'-'") : 1
"42".zfill(5) : 1
'00042' : 1
"-42".zfill(5) : 1
'-0042' : 1
*formatting* : 2
*interpolation* : 8
"(somename)") : 2
(asterisk) : 2
(dot) : 4
print('%(language)s : 1
%(number)03d : 2
types.' : 3
{'language': : 1
"number": : 1
002 : 3
+-----------+-----------------------------------------------------------------------+ : 12
|===========|=======================================================================| : 2
(overrides : 4
("'+'" : 2
"space" : 2
("h" : 2
+--------------+-------------------------------------------------------+---------+ : 37
|==============|=======================================================|=========| : 2
Obsolete : 2
(lowercase) : 4
(uppercase) : 4
(accepts : 2
(converts : 4
"repr()") : 1
"str()") : 1
"ascii()") : 1
("'0o'") : 2
1e50 : 1
"%g" : 2
IEEE754 : 1
bytes([source[ : 1
encoding[ : 2
errors]]]) : 2
"b'still : 1
"b"still : 1
"b'''3 : 1
"b"""3 : 1
(attempts : 1
emphasise : 1
text-oriented : 1
(blindly : 1
corruption) : 1
zero-filled : 3
length: : 2
"bytes(10)" : 1
"bytes(range(20))" : 1
"bytes(obj)" : 1
fromhex(string) : 2
bytes.fromhex('2Ef0 : 1
F1f2 : 2
b'.\xf0\xf1\xf2' : 1
hex([sep[ : 3
bytes_per_sep]]) : 3
b'\xf0\xf1\xf2'.hex() : 1
'f0f1f2' : 2
b'\xf0\xf1\xf2' : 1
value.hex('-') : 1
'f0-f1-f2' : 1
value.hex('_' : 1
'f0_f1f2' : 1
b'UUDDLRLRAB'.hex(' : 1
-4) : 1
'55554444 : 1
4c524c52 : 1
4142' : 1
(akin : 2
"b[0]" : 2
"b[0:1]" : 2
("b'...'") : 1
"bytes([46 : 1
46])" : 2
"list(b)" : 2
bytearray([source[ : 1
"bytearray(10)" : 1
"bytearray(range(20))" : 1
"bytearray(b'Hi!')" : 1
bytearray.fromhex('2Ef0 : 1
bytearray(b'.\xf0\xf1\xf2') : 1
bytearray(b'\xf0\xf1\xf2').hex() : 1
("bytearray(b'...')") : 1
"bytearray([46 : 1
a.replace("a" : 1
b"abc" : 1
a.replace(b"a" : 1
b"f") : 1
bytes.count(sub[ : 1
bytearray.count(sub[ : 1
bytes.removeprefix(prefix : 1
bytearray.removeprefix(prefix : 1
"bytes[len(prefix):]" : 1
b'TestHook'.removeprefix(b'Test') : 1
b'Hook' : 1
b'BaseTestCase'.removeprefix(b'Test') : 1
b'BaseTestCase' : 1
bytes.removesuffix(suffix : 1
bytearray.removesuffix(suffix : 1
"bytes[:-len(suffix)]" : 1
b'MiscTests'.removesuffix(b'Tests') : 1
b'Misc' : 1
b'TmpDirMixin'.removesuffix(b'Tests') : 1
b'TmpDirMixin' : 1
bytes.decode(encoding='utf-8' : 1
bytearray.decode(encoding='utf-8' : 1
bytes.endswith(suffix[ : 1
bytearray.endswith(suffix[ : 1
bytes.find(sub[ : 1
bytearray.find(sub[ : 1
b'Py' : 1
b'Python' : 1
bytes.index(sub[ : 1
bytearray.index(sub[ : 1
bytes.join(iterable) : 1
bytearray.join(iterable) : 1
bytes.maketrans(from : 1
bytearray.maketrans(from : 1
"bytes.translate()" : 1
*to*; : 1
bytes.partition(sep) : 1
bytearray.partition(sep) : 1
bytes.replace(old : 1
bytearray.replace(old : 1
bytes.rfind(sub[ : 1
bytearray.rfind(sub[ : 1
bytes.rindex(sub[ : 1
bytearray.rindex(sub[ : 1
bytes.rpartition(sep) : 1
bytearray.rpartition(sep) : 1
bytes.startswith(prefix[ : 1
bytearray.startswith(prefix[ : 1
prefix(es) : 1
bytes.translate(table : 1
delete=b'') : 2
bytearray.translate(table : 1
*table* : 3
b'read : 1
text'.translate(None : 1
b'aeiou') : 1
b'rd : 1
ths : 1
shrt : 1
txt' : 1
bytes.center(width[ : 1
fillbyte]) : 6
bytearray.center(width[ : 1
*fillbyte* : 3
bytes.ljust(width[ : 1
bytearray.ljust(width[ : 1
bytes.lstrip([chars]) : 1
bytearray.lstrip([chars]) : 1
b'spacious : 1
b'www.example.com'.lstrip(b'cmowz.') : 1
b'example.com' : 1
"removeprefix()" : 1
b'Arthur: : 2
three!'.lstrip(b'Arthur: : 1
b'ee!' : 1
three!'.removeprefix(b'Arthur: : 1
b'three!' : 1
bytes.rjust(width[ : 1
bytearray.rjust(width[ : 1
bytes.rsplit(sep=None : 1
bytearray.rsplit(sep=None : 1
bytes.rstrip([chars]) : 1
bytearray.rstrip([chars]) : 1
b'mississippi'.rstrip(b'ipz') : 1
b'mississ' : 1
"removesuffix()" : 1
b'Monty : 2
Python'.rstrip(b' : 1
Python'.removesuffix(b' : 1
b'Monty' : 1
bytes.split(sep=None : 1
bytearray.split(sep=None : 1
"b'1,,2'.split(b',')" : 1
"[b'1' : 2
b'2']") : 1
"b'1<>2<>3'.split(b'<>')" : 1
b'3']") : 1
"[b'']" : 1
"[bytearray(b'')]" : 1
b'1,2,3'.split(b',') : 1
[b'1' : 6
b'3'] : 3
b'1,2,3'.split(b',' : 1
b'2,3'] : 1
b'1,2,,3,'.split(b',') : 1
b'3' : 1
b'1 : 2
b'2 : 1
bytes.strip([chars]) : 1
bytearray.strip([chars]) : 1
b'spacious' : 1
b'www.example.com'.strip(b'cmowz.') : 1
b'example' : 1
bytes.capitalize() : 1
bytearray.capitalize() : 1
bytes.expandtabs(tabsize=8) : 1
bytearray.expandtabs(tabsize=8) : 1
("b'\t'") : 1
("b'\r'") : 1
b'01\t012\t0123\t01234'.expandtabs() : 1
b'01 : 2
b'01\t012\t0123\t01234'.expandtabs(4) : 1
bytes.isalnum() : 1
bytearray.isalnum() : 1
"b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'" : 2
"b'0123456789'" : 2
b'ABCabc1'.isalnum() : 1
b'ABC : 1
abc1'.isalnum() : 1
bytes.isalpha() : 1
bytearray.isalpha() : 1
b'ABCabc'.isalpha() : 1
b'ABCabc1'.isalpha() : 1
bytes.isascii() : 1
bytearray.isascii() : 1
0-0x7F : 1
bytes.isdigit() : 1
bytearray.isdigit() : 1
b'1234'.isdigit() : 1
b'1.23'.isdigit() : 1
bytes.islower() : 1
bytearray.islower() : 1
world'.islower() : 2
"b'abcdefghijklmnopqrstuvwxyz'" : 6
Uppercase : 6
"b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" : 6
bytes.isspace() : 1
bytearray.isspace() : 1
"b' : 1
\t\n\r\x0b\f'" : 1
(space : 1
feed) : 1
bytes.istitle() : 1
bytearray.istitle() : 1
"bytes.title()" : 1
"titlecase" : 1
World'.istitle() : 1
world'.istitle() : 1
bytes.isupper() : 1
bytearray.isupper() : 1
b'HELLO : 2
WORLD'.isupper() : 1
world'.isupper() : 1
bytes.lower() : 1
bytearray.lower() : 1
World'.lower() : 1
bytes.splitlines(keepends=False) : 1
bytearray.splitlines(keepends=False) : 1
b'ab : 2
[b'ab : 2
b'de : 2
b'kl'] : 1
b'\n' : 1
b'kl\r\n'] : 1
b"".split(b'\n') : 1
b"Two : 1
lines\n".split(b'\n') : 1
([b''] : 1
[b'Two : 1
b'']) : 1
b"".splitlines() : 1
b"One : 1
([] : 1
[b'One : 1
line']) : 1
bytes.swapcase() : 1
bytearray.swapcase() : 1
World'.swapcase() : 1
b'hELLO : 1
wORLD' : 1
"str.swapcase()" : 1
"bin.swapcase().swapcase() : 1
bin" : 1
bytes.title() : 1
bytearray.title() : 1
Uncased : 1
b"they're : 1
b"They'Re : 1
re.sub(rb"[A-Za-z]+('[A-Za-z]+)?" : 1
mo.group(0)[0:1].upper() : 1
mo.group(0)[1:].lower() : 1
titlecase(b"they're : 1
b"They're : 1
bytes.upper() : 1
bytearray.upper() : 1
World'.upper() : 1
bytes.zfill(width) : 1
bytearray.zfill(width) : 1
"b'0'" : 1
("b'+'"/ : 1
"b'-'") : 1
"len(seq)" : 1
b"42".zfill(5) : 1
b'00042' : 1
b"-42".zfill(5) : 1
b'-0042' : 1
("bytes"/"bytearray") : 1
print(b'%(language)s : 1
{b'language': : 1
b"Python" : 1
b"number": : 1
Python2/3 : 2
'backslashreplace')") : 1
"b'%s'" : 1
"b'%r'" : 1
"len(view)" : 1
"tolist" : 1
"view.ndim : 2
subview: : 1
memoryview(b'abcefg') : 2
v[1] : 1
v[-1] : 1
v[1:4] : 2
0x7f3ddc9f4350> : 1
bytes(v[1:4]) : 1
b'bce' : 1
one-integer : 1
*ndim* : 2
non-byte : 1
array.array('l' : 2
[-11111111 : 2
22222222 : 1
-33333333 : 1
44444444]) : 1
memoryview(a) : 5
-11111111 : 1
m[-1] : 1
44444444 : 1
m[::2].tolist() : 1
-33333333] : 1
bytearray(b'abcefg') : 1
memoryview(data) : 1
v.readonly : 1
v[0] : 1
ord(b'z') : 1
bytearray(b'zbcefg') : 1
bytearray(b'z123fg') : 1
v[2:3] : 1
b'spam' : 2
rvalue : 1
v[2:6] : 1
bytearray(b'z1spam') : 1
"hash(m) : 1
hash(m.tobytes())": : 1
hash(v) : 1
hash(b'abcefg') : 1
hash(v[2:4]) : 1
hash(b'ce') : 1
hash(v[::-2]) : 1
hash(b'abcefg'[::-2]) : 1
__eq__(exporter) : 1
operands' : 1
"v.tolist() : 1
w.tolist()": : 1
array.array('I' : 1
array.array('d' : 2
5.0]) : 1
array.array('b' : 2
x.tolist() : 1
a.tolist() : 1
y.tolist() : 4
b.tolist() : 1
y[::-2] : 1
z.tolist() : 1
c.tolist() : 1
identical): : 1
BEPoint(BigEndianStructure): : 1
c_long) : 1
c_long)] : 1
BEPoint(100 : 1
memoryview(point) : 2
"v : 2
w" : 2
disregarding : 1
tobytes(order='C') : 1
memoryview(b"abc") : 2
m.tobytes() : 1
b'abc' : 2
bytes(m) : 1
{'C' : 1
'A'} : 1
*order=None* : 1
*order='C'* : 1
m.hex() : 1
'616263' : 1
memoryview(b'abc').tolist() : 1
[1.1 : 2
m.tolist() : 1
3.3] : 1
toreadonly() : 1
memoryview(bytearray(b'abc')) : 1
m.toreadonly() : 1
mm.tolist() : 2
[89 : 1
mm[0] : 1
[43 : 1
resizing); : 1
times): : 1
memoryview(b'abc') : 2
m.release() : 1
cast(format[ : 1
shape]) : 1
"[byte_length//new_itemsize]" : 1
1D : 2
1D/long : 1
1D/unsigned : 3
[1,2,3]) : 2
x.format : 1
x.itemsize : 1
x.nbytes : 1
x.cast('B') : 1
y.format : 2
y.itemsize : 2
len(y) : 5
y.nbytes : 5
1D/char: : 1
bytearray(b'zyz') : 1
b'a' : 2
x.cast('c') : 1
y[0] : 1
bytearray(b'ayz') : 1
1D/bytes : 1
3D/ints : 1
1D/signed : 1
struct.pack("i"*12 : 1
*list(range(12))) : 1
memoryview(buf) : 3
x.cast('i' : 1
shape=[2,2,3]) : 1
[[[0 : 1
5]] : 2
[[6 : 1
11]]] : 1
y.cast('b') : 1
z.format : 1
z.itemsize : 1
len(z) : 1
z.nbytes : 1
2D/unsigned : 1
struct.pack("L"*6 : 1
*list(range(6))) : 1
x.cast('L' : 1
shape=[2,3]) : 1
[[0 : 1
bytearray(b'xyz') : 1
m.obj : 2
nbytes : 1
"nbytes : 1
product(shape) : 1
len(m.tobytes())" : 1
"len(m)": : 1
array.array('i' : 3
[1,2,3,4,5]) : 1
m.nbytes : 1
m[::2] : 1
len(y.tobytes()) : 1
struct.pack("d"*12 : 1
*[1.5*x : 1
range(12)]) : 1
x.cast('d' : 1
shape=[3,4]) : 1
[[0.0 : 1
4.5] : 1
[6.0 : 1
9.0 : 2
10.5] : 1
[12.0 : 1
13.5 : 1
16.5]] : 1
"tolist()") : 1
"memoryview(b'abc')[0] : 1
b'abc'[0] : 1
memoryview(array.array('H' : 1
[32000 : 1
32001 : 1
32002])) : 1
m.itemsize : 2
32000 : 1
struct.calcsize('H') : 1
c_contiguous : 1
f_contiguous : 1
"len(set)" : 1
sequence-like : 1
"{'jack' : 2
'sjoerd'}" : 3
set([iterable]) : 1
frozenset([iterable]) : 1
"{c : 1
"set('foobar')" : 1
"set(['a' : 1
'foo'])" : 1
(cardinality : 1
non-membership : 1
isdisjoint(other) : 1
disjoint : 2
issubset(other) : 1
issuperset(other) : 1
union(*others) : 1
intersection(*others) : 1
difference(*others) : 1
symmetric_difference(other) : 1
non-operator : 2
"symmetric_difference()" : 1
constructions : 1
"set('abc') : 3
'cbs'" : 1
"set('abc').intersection('cbs')" : 1
frozenset('abc')" : 1
set([frozenset('abc')])" : 1
"a<b" : 1
"a>b" : 1
(subset : 1
relationships) : 1
"frozenset('ab') : 1
set('bc')" : 1
"frozenset": : 1
update(*others) : 1
intersection_update(*others) : 1
difference_update(*others) : 1
symmetric_difference_update(other) : 1
add(elem) : 1
remove(elem) : 1
discard(elem) : 1
dict(**kwargs) : 1
"{'jack': : 1
'sjoerd': : 1
4127}" : 1
"{4098: : 1
4127: : 1
"{x: : 1
"dict([('foo' : 1
('bar' : 3
200)])" : 1
"dict(foo=100 : 1
bar=200)" : 1
"{"one": : 1
"two": : 3
"three": : 3
3}": : 1
dict(one=1 : 1
two=2 : 1
three=3) : 1
{'one': : 5
'two': : 6
'three': : 6
dict(zip(['one' : 1
3])) : 2
dict([('two' : 1
('one' : 2
('three' : 2
dict({'three': : 1
dict({'one': : 1
two=2) : 1
too): : 1
"d[key]" : 4
c['red'] : 3
d" : 3
iter(d) : 1
"iter(d.keys())" : 1
fromkeys(iterable[ : 1
"fromkeys()" : 1
pop(key[ : 1
Pairs : 1
reversed(d) : 1
"reversed(d.keys())" : 1
setdefault(key[ : 1
update([other]) : 1
"d.update(red=1 : 1
blue=2)" : 1
d.values() : 2
('<' : 1
'>') : 1
{"one": : 2
"four": : 2
'four': : 4
['one' : 1
'four'] : 1
list(d.values()) : 1
d["one"] : 1
d["two"] : 2
'one'] : 1
list(reversed(d.values())) : 1
list(reversed(d.items())) : 1
[('four' : 1
('two' : 1
len(dictview) : 1
iter(dictview) : 1
(represented : 1
value)") : 1
"(value : 1
key)" : 1
"pairs : 2
zip(d.values() : 1
d.keys())" : 1
[(v : 1
d.items()]" : 1
reversed(dictview) : 1
dictview.mapping : 1
(Values : 1
unique.) : 1
"^") : 1
dishes : 1
{'eggs': : 1
'sausage': : 1
500} : 1
dishes.keys() : 1
dishes.values() : 1
print(n) : 1
504 : 1
(insertion : 1
list(keys) : 2
'sausage' : 2
'spam'] : 3
list(values) : 1
500] : 1
dishes['eggs'] : 1
dishes['sausage'] : 1
['bacon' : 1
{'eggs' : 1
'salad'} : 1
{'bacon'} : 1
{'sausage' : 1
'juice'} : 1
{'juice' : 1
'spam'} : 1
values.mapping : 1
mappingproxy({'bacon': : 1
500}) : 1
values.mapping['spam'] : 1
contextmanager.__enter__() : 1
__enter__() : 1
contextmanager.__exit__(exc_type : 1
exc_tb) : 1
"contextlib.contextmanager" : 2
negligible : 1
*parameterized : 1
generics* : 1
"set[bytes]" : 1
re.search('foo' : 1
'foo')" : 1
"x.group(0)" : 1
"x[0]" : 1
"re.Match[str]" : 1
re.search(b'bar' : 1
b'bar')" : 1
"y.group(0)" : 1
"y[0]" : 1
"re.Match[bytes]" : 1
T[X : 1
average(values: : 1
"int": : 1
send_post_request(url: : 1
isinstance([1 : 1
isinstance() : 2
t([1 : 1
type(t) : 1
t() : 1
type(l) : 1
repr(list[int]) : 1
'list[int]' : 2
str(list[int]) : 1
"dict[str][str]": : 1
dict[str][str] : 1
dict[str] : 1
Y][int] : 1
"dataclasses.Field" : 1
"functools.partialmethod" : 1
"queue.LifoQueue" : 1
"queue.PriorityQueue" : 1
"queue.SimpleQueue" : 1
"shelve.BsdDbShelf" : 1
"shelve.DbfilenameShelf" : 1
"shelve.Shelf" : 1
"weakref.WeakMethod" : 1
genericalias.__origin__ : 1
list[int].__origin__ : 1
genericalias.__args__ : 1
list[int]].__args__ : 1
list[int]) : 2
genericalias.__parameters__ : 1
"__args__": : 1
list[T].__parameters__ : 1
(~T,) : 1
genericalias.__unpacked__ : 1
"TypeVarTuple") : 1
"typing.Union[X : 1
"float": : 1
union_object : 1
flattened: : 1
"typing.Union": : 1
typing.Union[int : 1
typing.Optional[str] : 1
union_object) : 2
issubclass(obj : 1
isinstance("" : 1
user-exposed : 1
isinstance(int : 1
types.UnionType) : 1
types.UnionType() : 1
'types.UnionType' : 1
M(type): : 1
'Hello' : 1
__main__.C : 1
"m.name" : 1
*m*'s : 1
(external) : 1
somewhere.) : 1
"m.__dict__['a'] : 1
"m.a" : 1
"m.__dict__ : 1
{}") : 1
"<module : 2
(built-in)>" : 1
'os' : 1
'/usr/local/lib/pythonX.Y/os.pyc'>" : 1
"func(argument-list)" : 1
*bound : 1
*instance : 1
method*) : 1
"m(arg-1 : 1
arg-2 : 2
arg-n)" : 2
"m.__func__(m.__self__ : 1
arg-1 : 1
("meth.__func__") : 1
c.method.whoami : 2
'whoami' : 1
c.method.__func__.whoami : 1
"pseudo- : 1
compiled" : 1
""__code__"" : 1
'int'>" : 1
"type(None)()" : 1
Slicings) : 1
"type(Ellipsis)()" : 1
"type(NotImplemented)()" : 1
object.__dict__ : 1
instance.__class__ : 1
class.__bases__ : 1
definition.__name__ : 1
definition.__qualname__ : 1
class.__mro__ : 1
class.mro() : 1
class.__subclasses__() : 1
int.__subclasses__() : 1
'bool'>] : 1
non-power-of-two : 1
"bignum") : 1
sub-quadratic : 1
"int('1' : 1
500_000)" : 1
sys.set_int_max_str_digits(4300) : 1
Illustrative : 1
int('2' : 2
5432) : 1
Exceeds : 2
(4300 : 2
5432 : 1
sys.set_int_max_str_digits() : 2
4300) : 1
len(str(i)) : 1
i_squared : 1
i*i : 3
len(str(i_squared)) : 1
8599 : 1
len(hex(i_squared)) : 1
7144 : 1
int(hex(i_squared) : 1
base=16) : 1
"sys.int_info.default_max_str_digits" : 4
"sys.int_info.str_digits_check_threshold" : 2
Verification: : 1
sys.int_info.default_max_str_digits : 1
sys.int_info.str_digits_check_threshold : 1
int('578966293710682886880994035146873798396722250538762761564' : 1
'9252925514383915483333812743580549779436104706260696366600' : 1
'571186405732').to_bytes(53 : 1
'big') : 1
"bytes": : 1
"int(string)" : 1
"str(integer)" : 1
"repr(integer)" : 1
"f"{integer}"" : 1
""{}".format(integer)" : 1
"b"%d" : 1
limit: : 1
"PYTHONINTMAXSTRDIGITS=640 : 1
"PYTHONINTMAXSTRDIGITS=0 : 1
int_max_str_digits=640" : 1
"sys.flags.int_max_str_digits" : 1
interpreter-wide : 1
Subinterpreters : 1
"sys.int_info": : 1
limit.Test : 1
"set_int_max_str_digits"): : 1
68000 : 1
4004 : 1
current_limit : 4
upper_bound: : 1
sys.set_int_max_str_digits(upper_bound) : 1
lower_bound: : 1
sys.set_int_max_str_digits(lower_bound) : 1
"[1.0 : 1
2.0]" : 1
Cased : 1
lowercase) : 1
Lib/tkinter/__init__.py : 1
("Tk : 1
interface") : 1
tkinter" : 1
pythonic : 1
(2007) : 1
woefully : 1
Extensive : 1
Explains : 1
Resources: : 1
Books: : 1
Busy : 1
(ISBN : 4
978-1999149567) : 1
978-1788835886) : 1
Lutz; : 1
978-0596158101) : 1
edition) : 1
Ousterhout : 1
978-0321336330) : 1
bridges : 1
Tk's : 3
dated : 1
(Ttk) : 1
Xlib : 2
Unix/X11 : 1
GDI : 2
assembles : 1
tkinter.Tk(screenName=None : 1
className='Tk' : 2
useTk=True : 1
sync=False : 1
use=None) : 1
recognized: : 1
*screenName* : 1
"DISPLAY" : 1
(X11 : 2
*baseName* : 2
*className* : 1
(*argv0* : 1
*interp*) : 1
*useTk* : 1
"tkinter.Tcl()" : 1
*sync* : 1
*use* : 1
-use : 1
"winfo_id()") : 1
-container : 1
".*className*.tcl" : 1
".*baseName*.tcl" : 1
".*className*.py" : 1
".*baseName*.py" : 1
"os.curdir" : 2
"tk" : 1
"winfo_parent()" : 1
"master" : 1
*parent*/*child* : 1
tree- : 1
*master*/*slave* : 1
tkinter.Tcl(screenName=None : 1
useTk=False) : 1
"Tcl()" : 2
Unix/Linux : 2
"loadtk()" : 1
(IDLE) : 1
"tkinter.constants" : 1
(experimental) : 1
Drag-and-drop : 1
foundational : 1
Tk() : 1
frm : 1
ttk.Frame(root : 1
padding=10) : 1
frm.grid() : 1
ttk.Label(frm : 1
text="Hello : 1
World!").grid(column=0 : 1
row=0) : 2
ttk.Button(frm : 2
text="Quit" : 1
command=root.destroy).grid(column=1 : 1
root.mainloop() : 5
"grid()" : 2
(position) : 1
*widgets* : 1
"ttk.Frame" : 1
"ttk.Label" : 1
"ttk.Button" : 1
*hierarchy* : 1
*child* : 2
*configuration : 1
options* : 1
*geometry : 1
"grid" : 2
loop* : 2
assembling : 1
applicaton's : 1
ttk::frame : 1
.frm : 2
-padding : 1
grid : 4
[ttk::label : 1
.frm.lbl : 2
-text : 3
World!"] : 1
-column : 3
-row : 3
[ttk::button : 1
.frm.btn : 3
"Quit" : 1
-command : 1
"destroy : 1
."] : 1
"ttk::frame") : 1
"-text") : 1
".frm.btn") : 1
(hierarchical) : 1
"destroy") : 1
*methods* : 1
btn : 2
print(btn.configure().keys()) : 1
print(set(btn.configure().keys()) : 1
set(frm.configure().keys())) : 1
print(dir(btn)) : 1
print(set(dir(btn)) : 1
set(dir(frm))) : 1
(man : 1
pages) : 1
"invoke()" : 1
ttk::button : 1
grid) : 1
ttk::widget : 1
"winfo_x()" : 1
"winfo_height()" : 1
"winfo_viewable()" : 1
winfo : 1
Somewhat : 1
bell : 1
"Widget" : 3
"Tk.mainloop()") : 1
reentering : 1
abandon : 2
presently : 1
Button(self : 1
fg="red" : 1
bg="blue") : 2
fred["fg"] : 1
fred["bg"] : 1
config() : 1
fred.config(fg="red" : 1
"STANDARD : 1
OPTIONS" : 2
"WIDGET : 1
SPECIFIC : 1
idiosyncratic : 1
*options(3)* : 1
widget-specific : 2
widget; : 1
"config()" : 2
"'relief'") : 1
"bg" : 2
("bg" : 1
"background") : 1
"('bg' : 1
'background')") : 1
+---------+-----------------------------------+----------------+ : 6
|=========|===================================|================| : 1
"'relief'" : 2
"'Relief'" : 1
"'raised'" : 1
"'groove'" : 1
print(fred.config()) : 1
{'relief': : 1
('relief' : 1
'relief' : 1
'Relief' : 1
'raised' : 1
'groove')} : 1
packer : 5
geometry-management : 1
*placer* : 1
here) : 1
qualitative : 1
*above* : 1
of* : 1
"slave : 1
widgets" : 1
arrangement : 1
packer's : 1
keyword-option/value : 1
fred.pack() : 1
fred.pack(side="left") : 1
fred.pack(expand=1) : 1
183 : 1
Ousterhout's : 4
Anchor : 1
Denotes : 1
"'both'" : 1
"'none'" : 1
ipadx : 1
ipady : 1
padx : 1
pady : 1
"'left'" : 1
"'right'" : 1
"'bottom'" : 1
current-value : 1
widgets) : 1
"textvariable" : 2
"onvalue" : 1
"offvalue" : 1
"StringVar" : 1
"IntVar" : 1
"DoubleVar" : 1
"BooleanVar" : 1
App(tk.Frame): : 2
master): : 1
super().__init__(master) : 2
self.pack() : 2
self.entrythingy : 1
tk.Entry() : 1
self.entrythingy.pack() : 1
self.contents : 2
tk.StringVar() : 1
self.contents.set("this : 1
variable") : 1
self.entrythingy["textvariable"] : 1
self.entrythingy.bind('<Key-Return>' : 1
self.print_contents) : 1
print_contents(self : 1
event): : 2
print("Hi : 1
is:" : 1
self.contents.get()) : 1
tk.Tk() : 1
App(root) : 1
myapp.mainloop() : 2
"wm" : 2
titles : 1
"Wm" : 3
"_root()" : 1
master=None): : 1
App() : 1
myapp.master.title("My : 1
Do-Nothing : 1
Application") : 1
myapp.master.maxsize(1000 : 1
compass: : 1
""ne"" : 1
""e"" : 1
""se"" : 1
""s"" : 1
""sw"" : 1
""nw"" : 1
""center"" : 2
bitmaps: : 1
"'error'" : 1
"'gray25'" : 1
"'gray50'" : 1
"'hourglass'" : 1
"'info'" : 1
"'questhead'" : 1
"'question'" : 1
"'warning'" : 1
""@/usr/contrib/bitmap/gumby.bit"" : 1
""yes"" : 1
print_it(): : 1
print("hi : 1
there") : 1
fred["command"] : 1
print_it : 1
rgb.txt : 1
""#RGB"" : 1
""#RRGGBB"" : 1
""#RRRGGGBBB"" : 1
""#RRRRGGGGBBBB"" : 1
"cursorfont.h" : 1
"XC_" : 1
("XC_hand2") : 1
""hand2"" : 1
179 : 1
distances : 3
Pixels : 1
centimetres : 1
inches : 2
millimetres : 1
printer's : 1
""3.5i"" : 1
"{courier : 1
bold}" : 1
"widthxheight" : 1
"fred["geometry"] : 1
"200x100"" : 1
""left"" : 1
""right"" : 1
""fill"" : 1
space-delimited : 1
""2 : 1
5"" : 1
""3i : 1
2i : 1
4.5i : 1
2i"" : 1
""3c : 1
2c : 1
4c : 1
10.43c"" : 1
relief : 1
""raised"" : 1
""sunken"" : 1
""flat"" : 1
""groove"" : 1
""ridge"" : 1
scrollcommand : 2
""none"" : 2
""char"" : 1
""word"" : 1
bind(self : 1
add=''): : 1
*bind(3tk)* : 1
*Tcl : 1
edition)* : 1
(Functions : 2
*callbacks*.) : 1
turn_red(self : 1
event.widget["activeforeground"] : 1
self.button.bind("<Enter>" : 1
self.turn_red) : 1
"turn_red()" : 1
+------+-----------------------+------+-----------------------+ : 9
|======|=======================|======|=======================| : 1
%h : 1
%E : 1
send_event : 1
%k : 1
%K : 1
keysym : 1
%N : 1
keysym_num : 1
%t : 1
%T : 1
%w : 1
%W : 1
x_root : 1
%y : 1
y_root : 1
widgets: : 1
(menu.invoke() : 1
menu.entryconfig() : 1
Anytime : 1
""active"" : 1
cursor; : 1
""last"" : 1
"@6" : 1
menu's : 1
menu.activate() : 1
"active" : 2
"tkinter.Image": : 1
"BitmapImage" : 1
XBM : 1
"PhotoImage" : 1
PGM : 1
PPM : 1
PNG : 1
menus) : 1
tkinter.Tk() : 5
tkinter.READABLE : 2
tkinter.WRITABLE : 2
widget.tk.createfilehandler(file : 1
widget.tk.deletefilehandler(file) : 1
fine; : 1
"os.read(file.fileno() : 1
maxbytecount)" : 1
Widget.tk.createfilehandler(file : 1
callback(file : 1
Widget.tk.deletefilehandler(file) : 1
Unregisters : 1
tkinter.EXCEPTION : 1
Lib/xml/sax/xmlreader.py : 1
xml.sax.xmlreader.XMLReader : 1
xml.sax.xmlreader.IncrementalParser : 1
xml.sax.xmlreader.Locator : 1
xml.sax.xmlreader.InputSource(system_id=None) : 1
Encapsulation : 1
"XMLReader.parse()" : 1
EntityResolver.resolveEntity : 1
xml.sax.xmlreader.AttributesImpl(attrs) : 1
readers; : 1
xml.sax.xmlreader.AttributesNSImpl(attrs : 1
qnames) : 1
Namespace-aware : 1
"AttributesImpl" : 2
*localname* : 1
XMLReader.parse(source) : 1
URL) : 1
XMLReader.getContentHandler() : 1
XMLReader.setContentHandler(handler) : 1
XMLReader.getDTDHandler() : 1
XMLReader.setDTDHandler(handler) : 1
XMLReader.getEntityResolver() : 1
"EntityResolver" : 3
XMLReader.setEntityResolver(handler) : 1
XMLReader.getErrorHandler() : 1
XMLReader.setErrorHandler(handler) : 1
XMLReader.setLocale(locale) : 1
XMLReader.getFeature(featurename) : 1
*featurename* : 2
"SAXNotRecognizedException" : 4
featurenames : 1
XMLReader.setFeature(featurename : 1
*SAXNotSupportedException* : 2
XMLReader.getProperty(propertyname) : 1
*propertyname* : 2
propertynames : 1
XMLReader.setProperty(propertyname : 1
"IncrementalParser" : 1
IncrementalParser.feed(data) : 1
IncrementalParser.close() : 1
well-formedness : 1
IncrementalParser.reset() : 1
Locator.getColumnNumber() : 1
Locator.getLineNumber() : 1
Locator.getPublicId() : 1
Locator.getSystemId() : 1
InputSource.setPublicId(id) : 1
InputSource.getPublicId() : 1
InputSource.setSystemId(id) : 1
InputSource.getSystemId() : 1
InputSource.setEncoding(encoding) : 1
InputSource.getEncoding() : 1
InputSource.setByteStream(bytefile) : 1
file*) : 2
setEncoding : 1
InputSource.getByteStream() : 1
getEncoding : 1
InputSource.setCharacterStream(charfile) : 1
InputSource.getCharacterStream() : 1
protocol* : 1
Attributes.getLength() : 1
Attributes.getNames() : 1
Attributes.getType(name) : 1
Attributes.getValue(name) : 1
AttributesNS.getValueByQName(name) : 1
AttributesNS.getNameByQName(name) : 1
"(namespace : 2
AttributesNS.getQNameByName(name) : 1
AttributesNS.getQNames() : 1
Lib/asyncio/streams.py : 1
async/await-ready : 1
tcp_echo_client(message): : 2
asyncio.open_connection( : 4
8888) : 5
print(f'Send: : 2
{message!r}') : 2
writer.write(message.encode()) : 2
reader.read(100) : 4
print(f'Received: : 2
{data.decode()!r}') : 2
print('Close : 3
connection') : 3
writer.wait_closed() : 5
asyncio.run(tcp_echo_client('Hello : 2
World!')) : 2
asyncio.open_connection(host=None : 1
Establish : 4
"(reader : 3
writer)" : 3
asyncio.start_server(client_connected_cb : 1
*client_connected_cb* : 2
asyncio.open_unix_connection(path=None : 1
asyncio.start_unix_server(client_connected_cb : 1
*StreamReader* : 1
readexactly(n) : 1
"IncompleteReadError" : 2
"IncompleteReadError.partial" : 2
readuntil(separator=b'\n') : 1
(consumed) : 1
"LimitOverrunError" : 1
at_eof() : 1
"feed_eof()" : 1
asyncio.StreamWriter : 1
*StreamWriter* : 1
write(data) : 1
"drain()" : 3
stream.write(data) : 1
stream.drain() : 2
writelines(data) : 1
stream.writelines(lines) : 1
stream.wait_closed() : 1
can_write_eof() : 1
"write_eof()" : 2
get_extra_info(name : 1
"BaseTransport.get_extra_info()" : 1
writer.write(data) : 2
watermark : 11
*drain()* : 1
drained : 1
start_tls(sslcontext : 1
\* : 1
ssl_handshake_timeout=None) : 1
is_closing() : 1
handle_echo(reader : 1
data.decode() : 3
writer.get_extra_info('peername') : 1
print(f"Received : 1
{message!r} : 1
{addr!r}") : 1
print(f"Send: : 1
{message!r}") : 1
print("Close : 2
connection") : 1
handle_echo : 1
addrs : 1
'.join(str(sock.getsockname()) : 1
server.sockets) : 1
print(f'Serving : 1
{addrs}') : 1
print_http_headers(url): : 1
urllib.parse.urlsplit(url) : 1
url.scheme : 1
'https': : 1
url.hostname : 2
443 : 1
ssl=True) : 1
f"HEAD : 1
{url.path : 1
'/'} : 1
HTTP/1.0\r\n" : 1
f"Host: : 1
{url.hostname}\r\n" : 1
f"\r\n" : 1
writer.write(query.encode('latin-1')) : 1
line.decode('latin1').rstrip() : 1
print(f'HTTP : 1
header> : 1
{line}') : 1
asyncio.run(print_http_headers(url)) : 1
http://example.com/path/page.html : 1
HTTPS: : 1
https://example.com/path/page.html : 1
wait_for_data(): : 1
asyncio.open_connection(sock=rsock) : 1
asyncio.run(wait_for_data()) : 1
Lib/asyncore.py : 1
time." : 1
Multi-threaded : 1
pre-emptive : 1
do) : 2
juggle : 1
"background." : 1
snap : 1
"conversational" : 1
channel(s) : 1
is(are) : 1
asyncore.loop([timeout[ : 1
use_poll[ : 1
map[ : 1
count]]]]) : 1
*use_poll* : 1
Channels : 1
"dispatcher" : 5
event- : 1
firing : 1
success) : 1
+------------------------+------------------------------------------+ : 4
|========================|==========================================| : 1
"handle_connect()" : 1
Implied : 3
"handle_close()" : 1
"select()"ed : 1
"poll()"ed : 1
handle_read() : 1
handle_write() : 1
handle_write(self): : 2
self.send(self.buffer) : 2
self.buffer[sent:] : 2
handle_expt() : 1
(OOB) : 1
OOB : 1
tenuously : 1
handle_connect() : 1
opener's : 1
"welcome" : 1
banner : 7
handle_close() : 1
handle_accept() : 1
(passive : 2
openers) : 2
3.2; : 1
handle_accepted(sock : 1
partners : 1
create_socket(family=socket.AF_INET : 1
type=socket.SOCK_STREAM) : 1
connect(address) : 1
send(data) : 1
recv(buffer_size) : 1
"select.poll()" : 1
listen(backlog) : 1
Listen : 1
bind(address) : 1
re-usable : 1
"set_reuse_addr()" : 1
asyncore.dispatcher_with_send : 1
asyncore.file_dispatcher : 1
file_dispatcher : 1
"file_wrapper" : 1
asyncore.file_wrapper : 1
"file_dispatcher" : 1
HTTPClient(asyncore.dispatcher): : 1
asyncore.dispatcher.__init__(self) : 2
self.create_socket() : 2
self.connect( : 1
bytes('GET : 1
%s\r\n\r\n' : 1
(path : 1
handle_connect(self): : 1
handle_close(self): : 1
self.close() : 3
handle_read(self): : 2
print(self.recv(8192)) : 1
writable(self): : 1
(len(self.buffer) : 1
HTTPClient('www.python.org' : 1
EchoHandler(asyncore.dispatcher_with_send): : 1
self.recv(8192) : 1
self.send(data) : 1
EchoServer(asyncore.dispatcher): : 1
self.set_reuse_addr() : 1
self.bind((host : 1
self.listen(5) : 1
handle_accepted(self : 1
addr): : 3
print('Incoming : 1
repr(addr)) : 1
EchoHandler(sock) : 1
EchoServer('localhost' : 1
"current_task()" : 1
"all_tasks()" : 1
Shield : 1
Monitor : 2
"to_thread()" : 1
asyncio.gather() : 1
asyncio.wait_for() : 1
asyncio.sleep() : 1
pub/sub : 1
"open_unix_connection()" : 1
Threading-like : 1
asyncio.Event : 2
asyncio.Barrier : 1
"asyncio.BrokenBarrierError" : 1
"Barrier.wait()" : 1
CancelledError : 1
asyncio-specific : 1
Lib/email/utils.py : 1
email.utils.localtime(dt=None) : 1
*dt* : 11
"dt.tzinfo" : 3
*isdst* : 2
"localtime" : 2
presume : 1
Time) : 2
divine : 1
email.utils.make_msgid(idstring=None : 1
domain=None) : 1
*Message- : 1
ID* : 1
*idstring* : 1
email.utils.quote(str) : 1
backslash-double : 1
email.utils.unquote(str) : 1
*unquoted* : 1
email.utils.parseaddr(address) : 1
*realname* : 1
*email : 1
email.utils.formataddr(pair : 1
"parseaddr()" : 2
"(realname : 1
email_address)" : 1
*pair* : 1
"realname" : 2
email.utils.getaddresses(fieldvalues) : 1
*fieldvalues* : 1
"Message.get_all" : 1
email.utils : 2
getaddresses : 1
tos : 1
msg.get_all('to' : 1
ccs : 2
msg.get_all('cc' : 1
resent_tos : 2
msg.get_all('resent-to' : 1
resent_ccs : 1
msg.get_all('resent-cc' : 1
all_recipients : 1
getaddresses(tos : 1
resent_ccs) : 1
email.utils.parsedate(date) : 1
mailers : 1
"parsedate()" : 4
""Mon : 1
19:12:08 : 1
-0500"" : 1
"time.mktime()"; : 1
email.utils.parsedate_tz(date) : 1
10-tuple; : 1
date's : 1
email.utils.parsedate_to_datetime(date) : 1
"format_datetime()" : 1
"datetime"; : 2
-24 : 1
email.utils.mktime_tz(tuple) : 1
"parsedate_tz()" : 1
(seconds : 1
Epoch) : 1
email.utils.formatdate(timeval=None : 1
localtime=False : 1
usegmt=False) : 2
01:08:47 : 1
-0000 : 1
*timeval* : 2
*localtime* : 2
*usegmt* : 2
"GMT" : 5
email.utils.format_datetime(dt : 1
"formatdate" : 1
"UTC : 1
timezone" : 1
email.utils.decode_rfc2231(s) : 1
email.utils.encode_rfc2231(s : 1
language=None) : 2
email.utils.collapse_rfc2231_value(value : 1
fallback_charset='us-ascii') : 1
"Message.get_param" : 1
"collapse_rfc2231_value()" : 2
*fallback_charset* : 1
"'us-ascii'" : 1
email.utils.decode_params(params) : 1
"(content- : 1
string-value)" : 1
"time.timezone" : 1
timezone; : 1
Lib/colorsys.py : 1
Blue) : 1
systems: : 1
HLS : 3
(Hue : 2
Lightness : 1
Saturation) : 1
HSV : 3
Saturation : 1
Value) : 1
https://poynton.ca/ColorFAQ.html : 1
https://www.cambridgeincolour.com/tutorials/color-spaces.htm : 1
colorsys.rgb_to_yiq(r : 1
colorsys.yiq_to_rgb(y : 1
colorsys.rgb_to_hls(r : 1
colorsys.hls_to_rgb(h : 1
colorsys.rgb_to_hsv(r : 1
colorsys.hsv_to_rgb(h : 1
colorsys.rgb_to_hsv(0.2 : 1
0.4) : 4
(0.5 : 1
colorsys.hsv_to_rgb(0.5 : 1
sound-playing : 1
winsound.Beep(frequency : 1
Beep : 1
PC's : 1
speaker : 2
*frequency* : 1
hertz : 1
32,767 : 1
beep : 1
winsound.PlaySound(sound : 1
"PlaySound()" : 3
*sound* : 5
waveform : 1
winsound.MessageBeep(type=MB_OK) : 1
"MessageBeep()" : 1
play; : 1
"MB_ICONASTERISK" : 1
"MB_ICONEXCLAMATION" : 1
"MB_ICONHAND" : 1
"MB_ICONQUESTION" : 1
"MB_OK" : 1
beep"; : 1
winsound.SND_FILENAME : 1
"SND_ALIAS" : 1
winsound.SND_ALIAS : 1
association : 1
"SND_NODEFAULT" : 1
"SND_FILENAME" : 1
following; : 1
+----------------------------+------------------------------------------+ : 6
|============================|==========================================| : 1
"'SystemAsterisk'" : 1
Asterisk : 1
"'SystemExclamation'" : 1
Exclamation : 1
"'SystemExit'" : 1
"'SystemHand'" : 1
"'SystemQuestion'" : 1
Question : 1
Play : 7
winsound.PlaySound("SystemExit" : 1
winsound.SND_ALIAS) : 2
sound) : 1
winsound.PlaySound("*" : 1
winsound.SND_LOOP : 1
"SND_ASYNC" : 2
"SND_MEMORY" : 1
winsound.SND_MEMORY : 1
winsound.SND_PURGE : 1
winsound.SND_ASYNC : 1
winsound.SND_NODEFAULT : 1
winsound.SND_NOSTOP : 1
winsound.SND_NOWAIT : 1
winsound.MB_ICONASTERISK : 1
"SystemDefault" : 2
winsound.MB_ICONEXCLAMATION : 1
"SystemExclamation" : 1
winsound.MB_ICONHAND : 1
"SystemHand" : 1
winsound.MB_ICONQUESTION : 1
"SystemQuestion" : 1
winsound.MB_OK : 1
Lib/tkinter/ttk.py : 1
(requiring : 1
X11) : 1
theming : 1
("Button" : 1
"Checkbutton" : 2
"Entry" : 4
"Label" : 2
"LabelFrame" : 2
"Menubutton" : 2
"Radiobutton" : 2
"Scale" : 2
"Scrollbar") : 1
"fg" : 1
styling : 3
"ttk.Style" : 1
monograph : 1
tkinter: : 1
"Scrollbar" : 1
"Spinbox" : 1
"Combobox" : 1
"Notebook" : 1
"Progressbar" : 1
"Sizegrip" : 3
"Treeview" : 1
l1 : 2
tkinter.Label(text="Test" : 2
fg="black" : 2
bg="white") : 2
l2 : 2
ttk.Style() : 4
style.configure("BW.TLabel" : 1
foreground="black" : 1
background="white") : 1
ttk.Label(text="Test" : 2
style="BW.TLabel") : 2
TtkStyling : 1
"Style" : 1
"ttk.Widget" : 4
+-------------+----------------------------------------------------------------+ : 13
|=============|================================================================| : 2
bindtags : 1
viewable : 1
+------------------+-----------------------------------------------------------+ : 3
|==================|===========================================================| : 1
xscrollcommand : 1
"Scrollbar.set()" : 1
yscrollcommand : 1
button-like : 1
+----------------+-------------------------------------------------------------+ : 7
|================|=============================================================| : 1
textvariable : 2
(0-based) : 2
statespec/value : 2
"Style.map()" : 2
image: : 2
none: : 1
+----------+------------------------------------------------------------------+ : 4
|==========|==================================================================| : 2
"disabled" : 6
"Widget.state()" : 3
+--------------+---------------------------------------------------------------+ : 10
|==============|===============================================================| : 1
"On" : 1
Checkbuttons : 1
*background* : 1
"tkinter.Widget.cget()" : 1
"tkinter.Widget.configure()" : 1
tkinter.ttk.Widget : 1
identify(x : 2
instate(statespec : 1
*statespec* : 6
state(statespec=None) : 1
"ttk.Combobox" : 2
pop-down : 2
"Widget": : 2
"Widget.cget()" : 2
"Widget.configure()" : 2
"Widget.identify()" : 3
"Widget.instate()" : 2
"Entry": : 2
"Entry.bbox()" : 2
"Entry.delete()" : 2
"Entry.icursor()" : 2
"Entry.index()" : 2
"Entry.insert()" : 2
"Entry.selection()" : 1
"Entry.xview()" : 2
+-------------------+----------------------------------------------------------+ : 9
|===================|==========================================================| : 1
exportselection : 1
Misc.selection_get : 1
postcommand : 1
Misc.register) : 1
dropdown : 1
"tkinter.StringVar" : 1
drop-down : 1
average-size : 1
combobox : 4
**<<ComboboxSelected>>** : 1
tkinter.ttk.Combobox : 1
current(newindex=None) : 1
*newindex* : 2
"ttk.Spinbox" : 2
"ttk.Entry" : 1
arrows : 1
+------------------------+--------------------------------------------------------+ : 8
|========================|========================================================| : 1
"from_" : 1
"%W.Pf" : 1
**<<Increment>>** : 1
<Up> : 1
**<<Decrement>>** : 1
<Down> : 1
tkinter.ttk.Spinbox : 1
+-----------+------------------------------------------------------------------+ : 4
|===========|==================================================================| : 1
padding) : 1
tabs: : 1
"hidden" : 2
(north : 1
west) : 1
underlined : 1
"Notebook.enable_traversal()" : 1
tab_id : 1
"ttk.Notebook" : 1
"@x,y" : 1
"Notebook.index()") : 1
**<<NotebookTabChanged>>** : 1
tkinter.ttk.Notebook : 1
add(child : 1
forget(tab_id) : 1
*tab_id* : 7
unmaps : 1
unmanages : 1
hide(tab_id) : 1
Hidden : 1
index(tab_id) : 1
insert(pos : 1
select(tab_id=None) : 1
unmapped : 1
tab(tab_id : 1
option=None : 5
tabs() : 1
enable_traversal() : 1
"Control-Tab": : 1
"Shift-Control-Tab": : 1
"Alt-K": : 1
(underlined) : 1
notebooks : 2
"ttk.Progressbar" : 1
determinate : 2
animated : 1
progressing : 1
+------------+-----------------------------------------------------------------+ : 8
|============|=================================================================| : 1
orient : 2
"horizontal" : 2
"vertical" : 2
(width : 1
vertical) : 1
"determinate" : 2
"indeterminate" : 2
*maximum*; : 1
"cycle" : 1
*maximum* : 1
tkinter.ttk.Progressbar : 1
start(interval=None) : 1
autoincrement : 2
recurring : 2
"Progressbar.step()" : 1
step(amount=None) : 1
bar's : 1
*amount* : 2
"Progressbar.start()" : 1
"ttk.Separator" : 1
"ttk.Sizegrip" : 1
box) : 1
grip : 3
toplevel's : 1
....) : 1
"southeast" : 1
"ttk.Treeview" : 1
"displaycolumns" : 1
Columns : 2
displayed; : 1
"Treeview.xview()" : 1
"Treeview.yview()" : 1
+------------------+----------------------------------------------------------+ : 7
|==================|==========================================================| : 1
displaycolumns : 2
"#all" : 1
selectmode : 1
"extended" : 2
"browse" : 2
#0 : 6
headings: : 1
"tree : 1
headings" : 1
**Note**: : 1
show="tree" : 2
|==========|=================================================================| : 1
"True"/"False" : 2
tags: : 1
+--------------+-------------------------------------------------------------+ : 5
|==============|=============================================================| : 1
#n : 1
Item's : 1
#n+1 : 1
**column : 1
column** : 1
+----------------------+----------------------------------------------------+ : 4
|======================|====================================================| : 1
<<TreeviewSelect>> : 1
<<TreeviewOpen>> : 1
open=True : 1
<<TreeviewClose>> : 1
open=False : 1
"Treeview.focus()" : 1
"Treeview.selection()" : 1
tkinter.ttk.Treeview : 1
bbox(item : 1
column=None) : 1
bounding : 2
treeview : 4
height) : 2
offscreen) : 1
get_children(item=None) : 1
set_children(item : 1
*newchildren) : 1
*item*'s : 5
*newchildren* : 4
detaching : 1
column(column : 1
options/values : 4
anchor: : 2
minwidth: : 1
drags : 1
stretch: : 1
column's : 1
"#0" : 2
delete(*items) : 1
detach(*items) : 1
Unlinks : 1
reinserted : 2
exists(item) : 1
focus(item=None) : 1
heading(column : 1
imageName : 1
identify(component : 1
*component* : 2
identify_row(y) : 1
identify_column(x) : 1
identify_region(x : 1
+-------------+----------------------------------------+ : 5
|=============|========================================| : 1
identify_element(x : 1
index(item) : 1
insert(parent : 1
iid=None : 1
beginning; : 2
identifier; : 1
item(item : 1
move(item : 1
Moves : 1
*parent*'s : 1
reattached : 1
next(item) : 1
parent(item) : 1
prev(item) : 1
reattach(item : 1
"Treeview.move()" : 1
see(item) : 1
scrolls : 2
selection_set(*items) : 1
selection_add(*items) : 1
selection_remove(*items) : 1
selection_toggle(*items) : 1
set(item : 1
column/value : 1
tag_bind(tagname : 1
sequence=None : 1
tag_configure(tagname : 1
tag_has(tagname : 1
item=None) : 1
xview(*args) : 1
yview(*args) : 1
"Misc.winfo_class()" : 1
(somewidget.winfo_class()) : 1
Tcl'2004 : 1
tkinter.ttk.Style : 1
configure(style : 1
query_opt=None : 2
ttk.Style().configure("TButton" : 1
padding=6 : 1
relief="flat" : 1
background="#ccc") : 1
ttk.Button(text="Sample") : 1
btn.pack() : 1
map(style : 1
statespecs : 1
statespec : 1
understandable: : 1
style.map("C.TButton" : 1
foreground=[('pressed' : 1
('active' : 2
'blue')] : 1
background=[('pressed' : 1
'!disabled' : 1
'white')] : 1
colored_btn : 1
ttk.Button(text="Test" : 1
style="C.TButton").pack() : 1
(states : 1
"[('active' : 1
'blue') : 1
('pressed' : 1
'red')]" : 1
lookup(style : 1
state=None : 1
Button : 1
print(ttk.Style().lookup("TButton" : 1
"font")) : 1
layout(style : 1
layoutspec=None) : 1
*layoutspec* : 2
useful): : 1
style.layout("TMenubutton" : 1
("Menubutton.background" : 1
("Menubutton.button" : 1
{"children": : 3
[("Menubutton.focus" : 1
[("Menubutton.padding" : 1
[("Menubutton.label" : 1
{"side": : 1
"expand": : 1
1})] : 1
})] : 2
}) : 3
mbtn : 1
ttk.Menubutton(text='Text') : 1
mbtn.pack() : 1
element_create(elementname : 1
etype : 1
"vsapi" : 1
8.6a : 1
imagespec) : 1
border=padding : 1
borders : 1
height=height : 1
image's : 2
padding=padding : 1
border's : 1
sticky=spec : 1
width=width : 1
"element_create()" : 1
themename : 1
element_names() : 1
element_options(elementname) : 1
*elementname*'s : 1
theme_create(themename : 1
parent=None : 2
settings=None) : 1
*themename* : 4
*settings* : 3
"theme_settings()" : 1
theme_settings(themename : 1
'configure' : 1
'layout' : 1
'element : 1
create' : 1
"Style.configure()" : 1
"Style.layout()" : 1
"Style.element_create()" : 1
style.theme_settings("default" : 1
"TCombobox": : 1
{"padding": : 1
"map": : 1
"background": : 1
[("active" : 1
"green2") : 1
("!disabled" : 2
"green4")] : 1
"fieldbackground": : 1
[("!disabled" : 1
"green3")] : 1
"foreground": : 1
[("focus" : 1
"OliveDrab1") : 1
"OliveDrab2")] : 1
ttk.Combobox().pack() : 1
theme_names() : 1
theme_use(themename=None) : 1
<<ThemeChanged>> : 1
cavity : 3
whichside : 1
element; : 1
sticky: : 1
nswe : 1
unit: : 1
thumbs : 1
children: : 1
[sublayout.. : 1
Lib/multiprocessing/ : 1
side- : 1
parallelizing : 1
parallelism) : 1
print(p.map(f : 1
f(name): : 2
print('hello' : 2
Process(target=f : 9
args=('bob',)) : 2
info(title): : 1
print(title) : 1
print('module : 1
name:' : 1
print('parent : 1
process:' : 1
os.getppid()) : 1
print('process : 1
id:' : 1
os.getpid()) : 1
info('function : 1
f') : 1
info('main : 1
line') : 1
bpo-33725 : 2
*resource : 1
tracker* : 1
unlinked : 3
unlinks : 1
"leaked" : 1
(Neither : 1
reboot : 1
foo(q): : 2
q.put('hello') : 2
mp.set_start_method('spawn') : 1
mp.Queue() : 1
mp.Process(target=foo : 1
print(q.get()) : 3
mp.get_context('spawn') : 1
ctx.Queue() : 1
ctx.Process(target=foo : 1
"'spawn'" : 9
"'forkserver'" : 5
**PyInstaller** : 2
**cx_Freeze**) : 1
"'fork'" : 8
**Queues** : 1
f(q): : 2
q.put([42 : 1
'hello']) : 2
"[42 : 2
'hello']" : 2
**Pipes** : 1
"Pipe()" : 5
duplex : 1
(two-way) : 1
Pipe : 3
f(conn): : 1
conn.send([42 : 1
parent_conn : 1
child_conn : 1
Pipe() : 2
args=(child_conn,)) : 1
print(parent_conn.recv()) : 1
(among : 1
f(l : 1
l.acquire() : 1
l.release() : 1
args=(lock : 1
num)).start() : 1
**Shared : 1
memory** : 1
"Value" : 3
f(n : 1
3.1415927 : 2
-a[i] : 1
Value('d' : 1
Array('i' : 1
args=(num : 1
arr)) : 1
print(num.value) : 1
print(arr[:]) : 1
"num" : 1
"arr" : 1
**Server : 1
process** : 1
"Manager()" : 2
f(d : 1
l): : 1
d['2'] : 1
d[0.25] : 1
l.reverse() : 1
manager.dict() : 2
manager.list(range(10)) : 2
args=(d : 1
l)) : 1
print(d) : 1
print(l) : 2
{0.25: : 1
'2': : 1
offloaded : 1
Pool(processes=4) : 2
4,... : 2
81]" : 2
print(pool.map(f : 3
pool.imap_unordered(f : 1
range(10)): : 1
"f(20)" : 1
pool.apply_async(f : 2
(20,)) : 2
print(res.get(timeout=1)) : 3
"os.getpid()" : 1
pool.apply_async(os.getpid : 1
()) : 2
multiple_results : 1
[pool.apply_async(os.getpid : 1
print([res.get(timeout=1) : 1
multiple_results]) : 1
pool.apply_async(time.sleep : 2
(10,)) : 3
print("We : 1
patience : 1
multiprocessing.TimeoutError") : 1
print("For : 1
work") : 1
'with'-block : 1
print("Now : 1
"multiprocessing.pool.Pool" : 1
p.map(f : 1
PoolWorker-1: : 1
PoolWorker-2: : 1
PoolWorker-3: : 1
semi-random : 1
somehow.) : 1
multiprocessing.Process(group=None : 1
("Process.__init__()") : 1
Process(target=print : 2
p.run() : 2
join([timeout]) : 1
"exitcode" : 2
'Process-N_1:N_2:...:N_k' : 1
N_k : 1
N-th : 1
orphaned : 2
joined) : 1
*-N* : 1
authkey : 1
"authkey" : 1
"ready" : 1
"WaitForSingleObject" : 1
"WaitForMultipleObjects" : 1
"Process": : 1
multiprocessing.Process(target=time.sleep : 1
args=(1000,)) : 1
print(p : 3
p.is_alive()) : 3
<Process : 3
initial> : 1
started> : 1
p.terminate() : 1
exitcode=-SIGTERM> : 1
p.exitcode : 1
-signal.SIGTERM : 1
multiprocessing.ProcessError : 1
multiprocessing.BufferTooShort : 1
"Connection.recv_bytes_into()" : 1
"BufferTooShort" : 2
"e.args[0]" : 2
multiprocessing.AuthenticationError : 1
multiprocessing.TimeoutError : 2
consumers) : 1
"JoinableQueue.task_done()" : 1
"queue.Empty" : 5
difficulties : 1
infinitesimal : 1
queue's : 2
"empty()" : 2
enqueuing : 1
out-of-order : 1
"Process.terminate()" : 1
"JoinableQueue.cancel_join_thread") : 1
pipe.This : 1
children.Note : 1
multiprocessing.Pipe([duplex]) : 1
"(conn1 : 1
conn2)" : 1
*duplex* : 2
unidirectional: : 1
"conn1" : 1
"conn2" : 1
multiprocessing.Queue([maxsize]) : 1
locks/semaphores : 1
feeder : 1
multithreading/multiprocessing : 3
"sem_getvalue()" : 2
put(obj[ : 1
block[ : 1
timeout]]) : 4
put_nowait(obj) : 1
"put(obj : 1
get([block[ : 1
join_thread() : 1
"cancel_join_thread()" : 1
"join_thread()" : 3
cancel_join_thread() : 1
"allow_exit_without_flush()" : 1
bpo-3770 : 2
multiprocessing.SimpleQueue : 1
"Pipe" : 2
multiprocessing.JoinableQueue([maxsize]) : 1
multiprocessing.active_children() : 1
"joining" : 1
multiprocessing.cpu_count() : 1
multiprocessing.current_process() : 1
multiprocessing.parent_process() : 1
"current_process()" : 1
"parent_process" : 1
multiprocessing.freeze_support() : 2
(Has : 1
**py2exe** : 1
**cx_Freeze**.) : 1
freeze_support : 4
freeze_support() : 4
Process(target=f).start() : 2
"freeze_support()" : 4
frozen) : 1
multiprocessing.get_all_start_methods() : 1
multiprocessing.get_context(method=None) : 1
multiprocessing.get_start_method(allow_none=False) : 1
multiprocessing.set_executable(executable) : 1
Embedders : 1
set_executable(os.path.join(sys.exec_prefix : 1
'pythonw.exe')) : 1
multiprocessing.set_start_method(method : 1
force=False) : 1
multiprocessing.connection.Connection : 1
send(obj) : 1
(approximately : 2
MiB+ : 2
poll([timeout]) : 1
polled : 1
send_bytes(buffer[ : 1
offset[ : 1
recv_bytes([maxlength]) : 1
*maxlength* : 2
recv_bytes_into(buffer[ : 1
"Connection.send()" : 1
"Connection.recv()" : 2
a.send([1 : 1
b.recv() : 1
b.send_bytes(b'thank : 1
you') : 1
a.recv_bytes() : 1
b'thank : 1
arr1 : 1
range(5)) : 1
arr2 : 2
a.send_bytes(arr1) : 1
b.recv_bytes_into(arr2) : 1
len(arr1) : 1
arr1.itemsize : 1
array('i' : 3
unpickles : 2
message.Therefore : 1
multiprocessing.Barrier(parties[ : 1
action[ : 2
"threading.Barrier" : 2
multiprocessing.BoundedSemaphore([value]) : 1
solitary : 2
"acquire" : 2
multiprocessing.Condition([lock]) : 1
multiprocessing.Event : 1
multiprocessing.Lock : 1
non-recursive : 1
"multiprocessing.Lock" : 1
"multiprocessing.synchronize.Lock" : 1
acquire(block=True : 2
Invocations : 2
"threading.Lock.release()" : 1
multiprocessing.RLock : 1
"multiprocessing.synchronize.RLock" : 1
ownership) : 1
owned) : 1
(unowned) : 1
"threading.RLock.release()" : 1
multiprocessing.Semaphore([value]) : 1
"sem_timedwait" : 1
"BoundedSemaphore.acquire()" : 1
"Semaphore.acquire()" : 1
"Condition.acquire()" : 1
raised.This : 1
"multiprocessing.synchronize" : 2
multiprocessing.Value(typecode_or_type : 1
lock=True) : 4
*typecode_or_type* : 4
**args* : 2
"process-safe" : 4
counter.value : 2
counter.get_lock(): : 1
multiprocessing.Array(typecode_or_type : 1
size_or_initializer : 2
*size_or_initializer* : 4
zeroed : 2
"ctypes.c_char" : 2
multiprocessing.sharedctypes.RawArray(typecode_or_type : 1
size_or_initializer) : 1
"Array()" : 1
multiprocessing.sharedctypes.RawValue(typecode_or_type : 1
"Value()" : 1
multiprocessing.sharedctypes.Array(typecode_or_type : 1
"RawArray()" : 1
process-safe : 3
multiprocessing.sharedctypes.Value(typecode_or_type : 1
"RawValue()" : 1
multiprocessing.sharedctypes.copy(obj) : 1
multiprocessing.sharedctypes.synchronized(obj[ : 1
lock]) : 1
"multiprocessing.RLock" : 1
wraps: : 1
"get_obj()" : 1
"get_lock()" : 1
"MyStruct" : 1
"ctypes.Structure".) : 1
+----------------------+----------------------------+-----------------------------+ : 5
sharedctypes : 2
|======================|============================|=============================| : 1
c_double(2.4) : 1
RawValue(c_double : 1
RawValue('d' : 1
MyStruct(4 : 1
RawValue(MyStruct : 1
7)() : 1
RawArray(c_short : 1
RawArray('h' : 1
3)(9 : 1
RawArray(c_int : 1
RawArray('i' : 1
c_double : 1
Point(Structure): : 1
c_double) : 1
c_double)] : 1
modify(n : 1
A): : 1
x.value : 1
s.value.upper() : 1
Value('i' : 1
Value(c_double : 1
1.0/3.0 : 1
lock=False) : 1
Array('c' : 1
lock=lock) : 2
Array(Point : 1
[(1.875,-6.25) : 1
(-5.75,2.0) : 1
(2.375,9.5)] : 1
Process(target=modify : 1
args=(n : 1
A)) : 1
print(n.value) : 1
print(x.value) : 1
print(s.value) : 1
print([(a.x : 1
a.y) : 1
A]) : 1
0.1111111111111111 : 1
[(3.515625 : 1
39.0625) : 1
(33.0625 : 1
(5.640625 : 1
90.25)] : 1
*shared : 1
multiprocessing.Manager() : 3
"SyncManager" : 3
"multiprocessing.managers" : 2
multiprocessing.managers.BaseManager(address=None : 1
authkey=None : 1
serializer='pickle' : 1
ctx=None : 1
shutdown_timeout=1.0) : 1
BaseManager : 9
"get_server().serve_forever()" : 1
*authkey* : 10
"current_process().authkey" : 2
*serializer* : 1
"'pickle'" : 1
serialization) : 2
"'xmlrpclib'" : 1
start([initializer[ : 1
initargs]]) : 1
"initializer(*initargs)" : 3
get_server() : 1
multiprocessing.managers : 9
BaseManager(address=('' : 1
50000) : 6
authkey=b'abc') : 2
manager.get_server() : 1
BaseManager(address=('127.0.0.1' : 1
m.connect() : 3
register(typeid[ : 1
callable[ : 1
proxytype[ : 1
exposed[ : 1
method_to_typeid[ : 1
create_method]]]]]) : 1
*create_method* : 2
*proxytype* : 1
"BaseProxy" : 2
*exposed* : 3
typeid : 4
"BaseProxy._callmethod()" : 1
"proxytype._exposed_" : 1
exists.) : 2
"public : 2
"'_'".) : 1
*method_to_typeid* : 3
"proxytype._method_to_typeid_" : 1
"BaseManager" : 5
started) : 1
"shutdown()".In : 1
multiprocessing.managers.SyncManager : 1
Barrier(parties[ : 1
BoundedSemaphore([value]) : 1
Condition([lock]) : 1
Queue([maxsize]) : 1
RLock() : 1
Semaphore([value]) : 1
Array(typecode : 1
Value(typecode : 1
dict() : 1
dict(mapping) : 1
dict(sequence) : 1
list(sequence) : 1
multiprocessing.managers.Namespace : 1
referent: : 1
manager.Namespace() : 1
Global.x : 1
Global.y : 1
Global._z : 1
print(Global) : 1
Namespace(x=10 : 1
y='hello') : 1
MathsClass: : 1
mul(self : 3
MyManager(BaseManager): : 2
MyManager.register('Maths' : 1
MathsClass) : 1
MyManager() : 2
maths : 1
manager.Maths() : 1
print(maths.add(4 : 1
print(maths.mul(7 : 1
QueueManager(BaseManager): : 4
QueueManager.register('get_queue' : 2
callable=lambda:queue) : 1
QueueManager(address=('' : 2
authkey=b'abracadabra') : 4
m.get_server() : 2
s.serve_forever() : 2
QueueManager.register('get_queue') : 2
QueueManager(address=('foo.bar.org' : 2
m.get_queue() : 2
queue.put('hello') : 1
remotely: : 1
Worker(Process): : 1
q): : 1
self.q : 1
self.q.put('local : 1
hello') : 1
Worker(queue) : 1
w.start() : 1
callable=lambda: : 1
*refers* : 1
(presumably) : 1
proxy) : 1
manager.list([i*i : 1
range(10)]) : 1
print(repr(l)) : 1
<ListProxy : 1
l[4] : 1
l[2:5] : 1
manager.list() : 3
a.append(b) : 1
[<ListProxy : 1
...>] : 1
b.append('hello') : 1
print(a[0] : 1
['hello'] : 2
l_outer : 1
manager.list([ : 1
range(2) : 1
d_first_inner : 1
l_outer[0] : 1
d_first_inner['a'] : 1
d_first_inner['b'] : 1
l_outer[1]['c'] : 1
l_outer[1]['z'] : 1
print(l_outer[0]) : 1
print(l_outer[1]) : 1
'z': : 1
26} : 1
(non-proxy) : 1
re-assign : 1
lproxy : 1
lproxy.append({}) : 1
lproxy[0] : 2
d['a'] : 1
d['b'] : 1
employing : 1
manager.list([1,2,3]) : 1
multiprocessing.managers.BaseProxy : 1
_callmethod(methodname[ : 1
kwds]]) : 2
"proxy" : 1
proxy._callmethod(methodname : 1
methodname)(*args : 1
"BaseManager.register()" : 1
"_callmethod()" : 2
"RemoteError" : 1
"_callmethod()": : 1
l._callmethod('__len__') : 1
l._callmethod('__getitem__' : 2
(slice(2 : 1
7),)) : 1
l[2:7] : 1
l[20] : 1
_getvalue() : 1
unpicklable : 4
__repr__() : 1
deregisters : 1
multiprocessing.pool.Pool([processes[ : 1
initializer[ : 2
initargs[ : 1
maxtasksperchild[ : 1
context]]]]]) : 1
"multiprocessing.Pool()" : 1
"Pool()" : 1
"multiprocessing.pool" : 1
finalization.Note : 1
correct** : 1
"object.__del__()" : 1
Pool's : 1
apply(func[ : 1
apply_async(func[ : 1
kwds[ : 1
callback[ : 3
error_callback]]]]) : 1
"AsyncResult" : 3
*error_callback* : 6
chunksize]) : 4
"starmap()") : 1
"imap()" : 3
"imap_unordered()" : 1
map_async(func : 1
chunksize[ : 2
error_callback]]]) : 2
imap(func : 1
lazier : 1
"next(timeout)" : 1
"multiprocessing.TimeoutError" : 2
imap_unordered(func : 1
"correct".) : 1
"[(1,2) : 1
4)]" : 1
"[func(1,2) : 1
func(3,4)]" : 1
starmap_async(func : 1
outstanding : 1
multiprocessing.pool.AsyncResult : 1
"Pool.apply_async()" : 1
"Pool.map_async()" : 1
get([timeout]) : 1
wait([timeout]) : 1
ready() : 1
successful() : 1
"f(10)" : 1
print(result.get(timeout=1)) : 2
pool.imap(f : 2
print(next(it)) : 2
print(it.next(timeout=1)) : 1
"multiprocessing.connection" : 1
*digest : 1
authentication* : 1
multiprocessing.connection.deliver_challenge(connection : 1
authkey) : 2
"AuthenticationError" : 5
multiprocessing.connection.answer_challenge(connection : 1
multiprocessing.connection.Client(address[ : 1
family[ : 2
authkey]]) : 2
Formats) : 1
HMAC-based : 2
multiprocessing.connection.Listener([address[ : 1
backlog[ : 1
authkey]]]]) : 1
'listening' : 1
'0.0.0.0' : 1
connectable : 2
"'AF_INET'" : 2
"'AF_UNIX'" : 4
"'AF_PIPE'" : 3
"tempfile.mkstemp()" : 1
Listener : 4
last_accepted : 1
multiprocessing.connection.wait(object_list : 1
*object_list* : 4
**Unix**: : 1
"wait(object_list : 1
timeout)" : 2
"select.select(object_list : 1
**Windows**: : 1
"WaitForMultipleObjects()") : 1
handles.) : 1
**Examples** : 1
"'secret : 1
password'" : 1
multiprocessing.connection : 3
('localhost' : 2
6000) : 2
'AF_INET' : 1
Listener(address : 1
authkey=b'secret : 2
listener: : 1
listener.accept() : 1
print('connection : 1
listener.last_accepted) : 1
conn.send([2.25 : 1
'junk' : 2
conn.send_bytes(b'hello') : 1
conn.send_bytes(array('i' : 1
[42 : 2
1729])) : 1
Client(address : 1
print(conn.recv()) : 1
[2.25 : 1
print(conn.recv_bytes()) : 1
print(conn.recv_bytes_into(arr)) : 1
print(arr) : 1
1729 : 1
foo(w): : 1
w.send((i : 1
current_process().name)) : 1
w.close() : 2
Pipe(duplex=False) : 1
readers.append(r) : 1
Process(target=foo : 1
args=(w,)) : 1
readers: : 1
wait(readers): : 1
r.recv() : 1
readers.remove(r) : 1
print(msg) : 1
"r'\\.\pipe\*PipeName*'" : 1
"Client()" : 2
*ServerName* : 1
"r'\\*ServerName*\pipe\*PipeName*'" : 1
"Connection.recv" : 1
"Listener" : 1
password: : 3
(Demonstrating : 1
connection.) : 1
"Process") : 1
multiprocessing.get_logger() : 1
"logging.NOTSET" : 1
multiprocessing.log_to_stderr(level=None) : 1
"get_logger()" : 1
get_logger : 1
"'[%(levelname)s/%(processName)s] : 1
%(message)s'" : 1
multiprocessing.log_to_stderr() : 1
logger.warning('doomed') : 1
[WARNING/MainProcess] : 1
doomed : 1
[INFO/SyncManager-...] : 4
self.run() : 1
/.../pymp-.. : 1
'/.../listener-...' : 1
[INFO/MainProcess] : 1
"ThreadPool" : 3
multiprocessing.pool.ThreadPool([processes[ : 1
initargs]]]) : 1
libraries.Users : 1
Picklability : 1
proxy.) : 1
Joining : 2
"active_children()" : 1
"Process.is_alive" : 1
pickle/unpickle : 1
"Process.terminate" : 2
queues) : 1
Bear : 2
"Queue.cancel_join_thread" : 1
behaviour.) : 1
q.put('X' : 1
args=(queue,)) : 1
"p.join()" : 1
f(l): : 1
args=(lock,)).start() : 1
os.close(sys.stdin.fileno()) : 1
"multiprocessing.Process._bootstrap()" : 1
processes-in-processes : 1
sys.stdin.close() : 1
open(os.open(os.devnull : 1
closefd=False) : 1
colliding : 1
"sys.stdin()" : 1
"file-like : 1
fork-safe : 1
cache(self): : 1
self._pid: : 1
self._pid : 1
self._cache : 2
bpo-5155 : 1
bpo-5313 : 1
bpo-5331 : 1
picklability : 1
"Process.__init__()" : 1
"Process.start" : 2
"RuntimeError": : 1
Process(target=foo) : 2
set_start_method : 1
set_start_method('spawn') : 1
frozen.) : 1
Demonstration : 1
proxies: : 1
print('you : 3
Foo.f()') : 1
Foo.g()') : 1
_h(self): : 1
Foo._h()') : 1
baz(): : 1
GeneratorProxy(BaseProxy): : 1
_exposed_ : 1
['__next__'] : 1
self._callmethod('__next__') : 1
get_operator_module(): : 1
`f()` : 1
`g()` : 2
MyManager.register('Foo1' : 1
Foo) : 1
`_h()` : 1
MyManager.register('Foo2' : 1
exposed=('g' : 1
'_h')) : 1
baz; : 1
`GeneratorProxy` : 1
MyManager.register('baz' : 1
proxytype=GeneratorProxy) : 1
get_operator_module(); : 1
MyManager.register('operator' : 1
get_operator_module) : 1
manager.start() : 1
print('-' : 4
manager.Foo1() : 1
f1.f() : 1
f1.g() : 1
hasattr(f1 : 1
'_h') : 1
sorted(f1._exposed_) : 1
sorted(['f' : 1
manager.Foo2() : 1
f2.g() : 1
f2._h() : 1
hasattr(f2 : 1
sorted(f2._exposed_) : 1
sorted(['g' : 1
'_h']) : 1
manager.baz() : 1
print('<%d>' : 1
manager.operator() : 1
print('op.add(23 : 1
45) : 1
op.add(23 : 1
45)) : 1
print('op.pow(2 : 1
94) : 1
op.pow(2 : 1
94)) : 1
print('op._exposed_ : 1
op._exposed_) : 1
"Pool": : 1
calculate(func : 3
func(*args) : 2
%s%s : 2
func.__name__ : 2
calculatestar(args): : 1
calculate(*args) : 1
time.sleep(0.5 : 2
random.random()) : 2
plus(a : 2
5.0) : 1
pow3(x): : 1
noop(x): : 1
PROCESSES : 1
print('Creating : 1
processes\n' : 1
PROCESSES) : 1
multiprocessing.Pool(PROCESSES) : 1
TASKS : 1
[(mul : 2
[(plus : 2
[pool.apply_async(calculate : 1
TASKS] : 1
imap_it : 1
pool.imap(calculatestar : 2
TASKS) : 3
imap_unordered_it : 1
pool.imap_unordered(calculatestar : 1
print('Ordered : 3
pool.apply_async():') : 1
print('\t' : 6
r.get()) : 1
pool.imap():') : 1
imap_it: : 1
print('Unordered : 2
pool.imap_unordered():') : 1
imap_unordered_it: : 1
pool.map() : 1
complete:') : 1
pool.map(calculatestar : 1
TASKS): : 1
print('Testing : 3
handling:') : 1
print(pool.apply(f : 1
(5,))) : 1
print('\tGot : 4
pool.apply()') : 1
AssertionError('expected : 4
ZeroDivisionError') : 4
list(range(10)))) : 1
pool.map()') : 1
print(list(pool.imap(f : 1
list(range(10))))) : 1
list(pool.imap())') : 1
list(range(10))) : 1
IMapIterator.next()') : 1
ApplyResult.get() : 1
timeout:' : 2
pool.apply_async(calculate : 1
TASKS[0]) : 1
sys.stdout.write('\n\t%s' : 2
res.get(0.02)) : 1
multiprocessing.TimeoutError: : 2
sys.stdout.write('.') : 2
IMapIterator.next() : 1
it.next(0.02)) : 1
worker(input : 1
output): : 1
iter(input.get : 1
'STOP'): : 1
output.put(result) : 1
time.sleep(0.5*random.random()) : 2
NUMBER_OF_PROCESSES : 1
TASKS1 : 1
range(20)] : 1
TASKS2 : 1
task_queue : 1
done_queue : 1
TASKS1: : 1
task_queue.put(task) : 2
range(NUMBER_OF_PROCESSES): : 2
Process(target=worker : 1
args=(task_queue : 1
done_queue)).start() : 1
results:') : 1
range(len(TASKS1)): : 1
done_queue.get()) : 2
`put()` : 1
TASKS2: : 1
range(len(TASKS2)): : 1
task_queue.put('STOP') : 1
Lib/asyncio/futures.py : 1
Lib/asyncio/base_futures.py : 1
**low-level : 1
asyncio.isfuture(obj) : 1
"_asyncio_future_blocking" : 1
asyncio.ensure_future(obj : 1
loop=None) : 4
Return: : 1
("isfuture()" : 1
test.) : 2
("iscoroutine()" : 1
test); : 1
("inspect.isawaitable()" : 1
Tasks.Save : 1
asyncio.wrap_future(future : 1
asyncio.Future(* : 1
transports) : 1
"set_result()" : 2
"set_exception()" : 2
fut.cancelled(): : 1
fut.set_result(42) : 1
'print("Future:" : 1
fut)' : 1
"fut" : 1
fut.add_done_callback( : 1
"Future:")) : 1
set_after(fut : 2
*fut* : 2
fut.set_result(value) : 1
fut : 1
"set_after()" : 1
loop.create_task( : 1
fut) : 1
"asyncio.Future.result()" : 2
"asyncio.Future.exception()" : 2
"asyncio.Future.add_done_callback()" : 1
"concurrent.futures.cancel()" : 1
Lib/importlib/resources/abc.py : 1
importlib.resources.abc.ResourceReader : 1
*Superseded : 1
TraversableResources* : 1
open_resource(resource) : 1
resource_path(resource) : 1
is_resource(name) : 1
contents() : 1
"is_resource()" : 1
non-resource : 2
priori : 1
importlib.resources.abc.Traversable : 1
file-system : 1
iterdir() : 1
is_file() : 1
joinpath(child) : 1
__truediv__(child) : 1
open(mode='r' : 1
"pathlib.Path.open") : 1
read_bytes() : 1
read_text(encoding=None) : 1
importlib.resources.abc.TraversableResources : 1
"importlib.resources.abc.ResourceReader"'s : 1
ResourceReader : 1
files() : 1
Lib/datetime.py : 1
dateutil : 1
"aware" : 1
"naive" : 1
political : 6
**aware** : 1
**naive** : 1
metres : 1
miles : 1
datetime.MINYEAR : 1
"MINYEAR" : 7
"MAXYEAR" : 7
"9999" : 1
datetime.UTC : 1
idealized : 4
Gregorian : 11
"year" : 4
"month" : 3
"day" : 4
24*60*60 : 1
"leap : 1
seconds" : 1
here.) : 1
"hour" : 8
"minute" : 6
"second" : 4
"microsecond" : 11
datetime.timezone : 1
"d.tzinfo" : 1
"d.tzinfo.utcoffset(d)" : 1
"t.tzinfo" : 1
"t.tzinfo.utcoffset(None)" : 1
datetime.timedelta(days=0 : 1
seconds=0 : 1
microseconds=0 : 1
milliseconds=0 : 1
minutes=0 : 1
hours=0 : 1
weeks=0) : 1
*days* : 2
*microseconds* : 2
3600 : 1
1000000" : 3
3600*24" : 1
"-999999999 : 1
999999999" : 1
"merged" : 1
timedelta( : 1
days=50 : 1
seconds=27 : 1
microseconds=10 : 1
milliseconds=29000 : 1
minutes=5 : 1
hours=8 : 1
weeks=2 : 1
datetime.timedelta(days=64 : 1
seconds=29156 : 1
microseconds=10) : 1
round-half-to-even : 3
tiebreaker : 1
timedelta(microseconds=-1) : 1
(d.days : 1
d.seconds : 1
d.microseconds) : 1
999999) : 2
timedelta.min : 1
"timedelta(-999999999)" : 1
timedelta.max : 1
"timedelta(days=999999999 : 1
hours=23 : 2
minutes=59 : 1
seconds=59 : 1
microseconds=999999)" : 1
timedelta.resolution : 3
"timedelta(microseconds=1)" : 3
"timedelta.max" : 1
"-timedelta.min" : 1
"-timedelta.max" : 1
(read-only): : 4
"days" : 1
"seconds" : 1
"microseconds" : 1
+----------------------------------+-------------------------------------------------+ : 16
|==================================|=================================================| : 1
"t1 : 8
t3" : 6
*t2* : 7
*t3* : 6
*t1*-*t2* : 1
*t1*-*t3* : 1
*t1* : 6
(1)(6) : 1
t2" : 4
divmod(t1 : 1
t2)" : 1
"+t1" : 1
"-t1" : 1
"timedelta"(-*t1.days* : 1
-*t1.seconds* : 1
-*t1.microseconds*) : 1
*t1** : 1
(1)(4) : 1
"abs(t)" : 1
+*t* : 1
"t.days : 2
-*t* : 1
"str(t)" : 2
"[D : 1
day[s] : 1
][H]H:MM:SS[.UUUUUU]" : 1
"repr(t)" : 1
-*timedelta.max* : 1
timedeltas : 1
timedelta(hours=-5) : 1
datetime.timedelta(days=-1 : 1
seconds=68400) : 1
print(_) : 1
19:00:00 : 1
"t2 : 2
(-t3)" : 1
t3 : 1
"timedelta.max"; : 1
subtractions : 1
delta1 : 3
timedelta(seconds=57) : 1
delta2 : 5
timedelta(hours=25 : 1
seconds=2) : 1
'datetime.timedelta' : 1
"timedelta(0)" : 3
timedelta.total_seconds() : 1
"td : 2
timedelta(seconds=1)" : 1
timedelta(microseconds=1)") : 1
Components : 1
another_year : 3
timedelta(days=365) : 2
timedelta(weeks=40 : 1
days=84 : 1
minutes=50 : 1
seconds=600) : 1
year.total_seconds() : 1
31536000.0 : 1
ten_years : 3
datetime.timedelta(days=3650) : 1
ten_years.days : 1
nine_years : 3
datetime.timedelta(days=3285) : 1
three_years : 2
three_years.days : 1
(datetime.timedelta(days=1095) : 1
datetime.date(year : 1
ranges: : 3
"MINYEAR : 2
MAXYEAR" : 2
12" : 2
year" : 2
"date.fromtimestamp(time.time())" : 1
date.fromtimestamp(timestamp) : 1
"fromtimestamp()" : 5
date.fromordinal(ordinal) : 1
proleptic : 5
date.max.toordinal()" : 1
"date.fromordinal(d.toordinal()) : 2
date.fromisoformat(date_string) : 1
*date_string* : 3
"YYYY-DDD"): : 1
date.fromisoformat('2019-12-04') : 1
datetime.date(2019 : 2
date.fromisoformat('20191204') : 1
date.fromisoformat('2021-W01-1') : 1
datetime.date(2021 : 1
"YYYY-MM-DD" : 1
date.fromisocalendar(year : 1
"date.isocalendar()" : 1
date.min : 1
"date(MINYEAR : 1
date.max : 1
"date(MAXYEAR : 1
date.resolution : 1
"timedelta(days=1)" : 1
date.year : 1
date.month : 1
date.day : 1
+---------------------------------+------------------------------------------------+ : 5
|=================================|================================================| : 1
"date2 : 4
date1 : 5
timedelta" : 4
*date2* : 5
"timedelta.days" : 3
*date1* : 3
date1" : 1
date2" : 3
"date1 : 2
"timedelta.days : 2
timedelta.days" : 1
"timedelta.seconds" : 2
"timedelta.microseconds" : 2
"date2.year" : 1
timedelta.seconds : 1
timedelta.microseconds : 1
date2 : 1
"date1.toordinal() : 1
date2.toordinal()" : 1
comparand : 6
"timetuple()" : 3
date.replace(year=self.year : 1
month=self.month : 2
day=self.day) : 1
date(2002 : 3
d.replace(day=26) : 1
datetime.date(2002 : 2
date.timetuple() : 1
"d.timetuple()" : 3
time.struct_time((d.year : 2
d.month : 2
d.day : 2
d.weekday() : 2
yday : 2
"yday : 2
d.toordinal() : 2
date(d.year : 2
1).toordinal() : 2
date.toordinal() : 1
date.weekday() : 1
"date(2002 : 2
4).weekday() : 1
Wednesday : 2
date.isoweekday() : 1
4).isoweekday() : 1
date.isocalendar() : 1
"week" : 2
"weekday" : 2
weeks : 8
(Gregorian) : 1
Thursday : 3
2004: : 1
date(2003 : 1
29).isocalendar() : 1
datetime.IsoCalendarDate(year=2004 : 2
week=1 : 2
weekday=1) : 1
date(2004 : 1
4).isocalendar() : 1
weekday=7) : 1
date.isoformat() : 1
"YYYY-MM- : 1
DD": : 1
4).isoformat() : 1
'2002-12-04' : 1
date.__str__() : 1
"str(d)" : 2
"d.isoformat()" : 1
date.ctime() : 1
4).ctime() : 1
'Wed : 2
"d.ctime()" : 2
time.ctime(time.mktime(d.timetuple())) : 2
"time.ctime()" : 2
"date.ctime()" : 1
invoke) : 2
date.strftime(format) : 1
strptime() : 7
"date.isoformat()" : 3
date.__format__(format) : 1
event: : 1
datetime.date(2007 : 1
date.fromtimestamp(time.time()) : 1
my_birthday : 4
date(today.year : 1
today: : 1
my_birthday.replace(year=today.year : 1
datetime.date(2008 : 1
time_to_birthday : 1
abs(my_birthday : 1
today) : 1
time_to_birthday.days : 1
202 : 1
"date": : 1
date.fromordinal(730920) : 1
730920th : 1
0001 : 3
d.isoformat() : 1
'2002-03-11' : 1
d.strftime("%d/%m/%y") : 1
'11/03/02' : 1
d.strftime("%A : 1
%B : 2
%Y") : 1
'Monday : 1
d.ctime() : 1
{0:%d} : 2
{2} : 2
{0:%B}.'.format(d : 1
"month") : 1
March.' : 1
'components' : 1
d.timetuple() : 1
Monday) : 3
70th : 1
ic : 2
d.isocalendar() : 1
ic: : 2
d.replace(year=2005) : 1
datetime.date(2005 : 1
directions; : 1
3600*24 : 1
Constructor: : 1
datetime.datetime(year : 1
hour=0 : 1
minute=0 : 2
second=0 : 2
microsecond=0 : 2
tzinfo=None : 2
fold=0) : 4
*year* : 12
*month* : 11
*day* : 2
24" : 2
60" : 4
"fold : 2
1]" : 4
datetime.today() : 1
datetime.fromtimestamp(time.time()) : 1
"now()" : 4
datetime.now(tz=None) : 1
*tz* : 11
"today()" : 2
*tz*’s : 2
"utcnow()" : 1
datetime.utcnow() : 1
"datetime.now(timezone.utc)" : 2
datetime.fromtimestamp(timestamp : 2
tz=None) : 1
datetime.utcfromtimestamp(timestamp) : 1
naive.) : 1
"fromtimestamp()": : 1
datetime(1970 : 4
timedelta(seconds=timestamp) : 1
"datetime.fromtimestamp(timestamp : 1
tz=timezone.utc)" : 1
datetime.fromordinal(ordinal) : 1
datetime.max.toordinal()" : 1
datetime.combine(date : 1
tzinfo=self.tzinfo) : 1
datetime.combine(d.date() : 1
d.time() : 1
d.tzinfo)" : 1
datetime.fromisoformat(date_string) : 1
Ordinal : 1
Fractional : 3
datetime.fromisoformat('2011-11-04') : 1
datetime.datetime(2011 : 9
datetime.fromisoformat('20111104') : 1
datetime.fromisoformat('2011-11-04T00:05:23') : 1
23) : 3
datetime.fromisoformat('2011-11-04T00:05:23Z') : 1
datetime.fromisoformat('20111104T000523') : 1
datetime.fromisoformat('2011-W01-2T00:05:23.283') : 1
283000) : 2
datetime.fromisoformat('2011-11-04 : 2
00:05:23.283') : 1
00:05:23.283+00:00') : 1
283000 : 1
datetime.fromisoformat('2011-11-04T00:05:23+04:00') : 1
tzinfo=datetime.timezone(datetime.timedelta(seconds=14400))) : 2
datetime.fromisocalendar(year : 1
non-date : 1
"datetime.isocalendar()" : 1
datetime.strptime(date_string : 1
datetime(*(time.strptime(date_string : 2
format)[0:6])) : 2
date_string : 1
datetime.min : 1
"datetime(MINYEAR : 1
tzinfo=None)" : 2
datetime.max : 1
"datetime(MAXYEAR : 1
datetime.resolution : 1
datetime.year : 1
datetime.month : 1
datetime.day : 1
datetime.hour : 1
"range(24)" : 2
datetime.minute : 1
"range(60)" : 4
datetime.second : 1
datetime.microsecond : 1
"range(1000000)" : 2
datetime.fold : 1
wall : 8
(later) : 2
+-----------------------------------------+----------------------------------+ : 5
|=========================================|==================================| : 1
"datetime2 : 3
datetime1 : 6
datetime2" : 2
"datetime1 : 1
datetime2 : 4
datetime2.year : 1
datetime1" : 1
"a-b" : 1
"(a.replace(tzinfo=None) : 1
a.utcoffset()) : 1
(b.replace(tzinfo=None) : 1
b.utcoffset())" : 1
*datetime1* : 2
*datetime2* : 2
comparands : 6
(obtained : 3
"self.utcoffset()") : 2
mixed- : 2
datetime.date() : 1
datetime.time() : 1
"timetz()" : 1
datetime.timetz() : 1
datetime.replace(year=self.year : 1
day=self.day : 1
hour=self.hour : 1
minute=self.minute : 2
second=self.second : 2
microsecond=self.microsecond : 2
tzinfo=self.tzinfo : 2
"tzinfo=None" : 2
datetime.astimezone(tz=None) : 1
*tz*'s : 1
"utcoffset()" : 12
"dst()" : 10
"tz=None") : 1
".tzinfo" : 1
"self.tzinfo" : 1
"self.astimezone(tz)" : 1
*self*: : 2
"astz : 2
dt.astimezone(tz)" : 1
astz.utcoffset()" : 1
"dt : 2
dt.utcoffset()" : 1
"dt.replace(tzinfo=tz)" : 1
"dt.replace(tzinfo=None)" : 1
"tzinfo.fromutc()" : 3
astimezone(self : 1
tz): : 1
self.tzinfo : 1
tz: : 1
utc : 2
self.utcoffset()).replace(tzinfo=tz) : 1
tz's : 1
tz.fromutc(utc) : 1
datetime.utcoffset() : 1
"self.tzinfo.utcoffset(self)" : 1
datetime.dst() : 1
"self.tzinfo.dst(self)" : 1
datetime.tzname() : 1
"self.tzinfo.tzname(self)" : 1
datetime.timetuple() : 2
d.hour : 1
d.minute : 1
d.second : 1
dst)) : 1
datetime.utctimetuple() : 1
"d.dst()" : 1
"d.utcoffset()" : 1
*d*.year : 1
spills : 1
UTC; : 2
"datetime.replace(tzinfo=timezone.utc)" : 1
"datetime.timetuple()" : 2
datetime.toordinal() : 1
"self.date().toordinal()" : 1
datetime.timestamp() : 1
(dt : 3
tzinfo=timezone.utc)).total_seconds() : 1
"timestamp()" : 1
"tzinfo=timezone.utc": : 1
dt.replace(tzinfo=timezone.utc).timestamp() : 1
timedelta(seconds=1) : 2
datetime.weekday() : 1
"self.date().weekday()" : 1
datetime.isoweekday() : 1
"self.date().isoweekday()" : 1
datetime.isocalendar() : 1
"self.date().isocalendar()" : 1
datetime.isoformat(sep='T' : 1
timespec='auto') : 1
"YYYY-MM-DDTHH:MM:SS.ffffff" : 1
"YYYY-MM-DDTHH:MM:SS" : 1
"YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]" : 1
"YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]" : 1
datetime(2019 : 2
132263).isoformat() : 1
'2019-05-18T15:17:08.132263' : 1
tzinfo=timezone.utc).isoformat() : 1
'2019-05-18T15:17:00+00:00' : 1
"'T'") : 1
TZ(tzinfo): : 1
-06:39 : 1
offset.""" : 1
utcoffset(self : 5
dt): : 19
timedelta(hours=-6 : 1
minutes=-39) : 1
datetime(2002 : 2
tzinfo=TZ()).isoformat(' : 1
'2002-12-25 : 1
00:00:00-06:39' : 1
datetime(2009 : 1
microsecond=100 : 1
tzinfo=TZ()).isoformat() : 1
'2009-11-27T00:00:00.000100-06:39' : 1
"'auto'") : 2
"'auto'": : 2
"'seconds'" : 2
"'microseconds'" : 2
"'hours'": : 2
"HH" : 3
"'minutes'": : 2
"HH:MM" : 2
"'seconds'": : 2
"HH:MM:SS" : 3
"'milliseconds'": : 2
"HH:MM:SS.sss" : 2
"'microseconds'": : 2
"HH:MM:SS.ffffff" : 3
datetime.now().isoformat(timespec='minutes') : 1
'2002-12-25T00:00' : 1
datetime(2015 : 1
dt.isoformat(timespec='microseconds') : 2
'2015-01-01T12:30:59.000000' : 1
datetime.__str__() : 1
"d.isoformat(' : 1
datetime.ctime() : 1
40).ctime() : 1
20:30:40 : 1
"datetime.ctime()" : 1
datetime.strftime(format) : 1
datetime.__format__(format) : 1
datetime.combine() : 1
date(2005 : 1
time(12 : 2
datetime.combine(d : 1
datetime.datetime(2005 : 1
datetime.now() : 2
datetime.datetime(2007 : 2
79043) : 1
79060 : 1
datetime.strptime() : 1
datetime.strptime("21/11/06 : 1
16:30" : 1
"%d/%m/%y : 1
%H:%M") : 1
datetime.datetime(2006 : 3
tt : 3
dt.timetuple() : 1
tt: : 1
print(it) : 2
325 : 1
tzinfo.dst() : 1
dt.isocalendar() : 1
dt.strftime("%A : 1
%I:%M%p") : 1
'Tuesday : 1
04:30PM' : 1
{0:%B} : 1
{3} : 1
{0:%I:%M%p}.'.format(dt : 1
"time") : 1
04:30PM.' : 1
Kabul : 3
Afghanistan : 1
+4 : 3
1945 : 2
+4:30 : 3
thereafter: : 1
KabulTz(tzinfo): : 1
UTC_MOVE_DATE : 1
datetime(1944 : 1
dt.year : 2
1945: : 1
timedelta(hours=4) : 2
(1945 : 2
dt.timetuple()[:5] : 1
30): : 1
("imaginary") : 1
half-hour : 1
'fold' : 1
PEP495 : 1
timedelta(hours=4 : 3
minutes=(30 : 1
dt.fold : 4
minutes=30) : 2
fromutc(self : 4
validations : 1
isinstance(dt : 1
datetime): : 1
TypeError("fromutc() : 1
dt.tzinfo : 7
ValueError("dt.tzinfo : 1
self") : 1
fromutc : 1
datetime.astimezone : 1
fromtimestamp : 1
dt.replace(tzinfo=timezone.utc) : 1
self.UTC_MOVE_DATE: : 2
dst(self : 6
timedelta(0) : 5
tzname(self : 3
"+04:30" : 1
"+04" : 1
"KabulTz" : 1
tz1 : 1
KabulTz() : 1
dt1 : 1
datetime(1900 : 1
tzinfo=tz1) : 2
print(dt1.utcoffset()) : 1
4:00:00 : 1
dt2 : 3
datetime(2006 : 1
print(dt2.utcoffset()) : 1
4:30:00 : 1
dt3 : 3
dt2.astimezone(timezone.utc) : 1
tzinfo=KabulTz()) : 1
(local) : 1
datetime.time(hour=0 : 1
time.min : 1
"time(0 : 1
time.max : 1
"time(23 : 1
999999)" : 1
time.resolution : 1
time.hour : 1
time.minute : 1
time.second : 1
time.microsecond : 1
time.tzinfo : 1
time.fold : 1
time.fromisoformat(time_string) : 1
*time_string* : 1
time.fromisoformat('04:23:01') : 1
datetime.time(4 : 8
time.fromisoformat('T04:23:01') : 1
time.fromisoformat('T042301') : 1
time.fromisoformat('04:23:01.000384') : 1
time.fromisoformat('04:23:01,000') : 1
time.fromisoformat('04:23:01+04:00') : 1
time.fromisoformat('04:23:01Z') : 1
time.fromisoformat('04:23:01+00:00') : 1
"time.isoformat()" : 3
time.replace(hour=self.hour : 1
time.isoformat(timespec='auto') : 1
"HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]" : 1
"HH:MM:SS+HH:MM[:SS[.ffffff]]" : 1
time(hour=12 : 2
minute=34 : 2
second=56 : 2
microsecond=123456).isoformat(timespec='minutes') : 1
'12:34' : 1
microsecond=0) : 1
'12:34:56.000000' : 1
dt.isoformat(timespec='auto') : 1
'12:34:56' : 1
time.__str__() : 1
"t.isoformat()" : 1
time.strftime(format) : 1
time.__format__(format) : 1
time.utcoffset() : 1
"self.tzinfo.utcoffset(None)" : 1
time.dst() : 1
"self.tzinfo.dst(None)" : 1
time.tzname() : 1
"self.tzinfo.tzname(None)" : 1
TZ1(tzinfo): : 1
timedelta(hours=1) : 3
tzname(self,dt): : 1
"+01:00" : 1
f"{self.__class__.__name__}()" : 1
tzinfo=TZ1()) : 2
datetime.time(12 : 1
t.isoformat() : 1
'12:10:30+01:00' : 1
t.dst() : 1
datetime.timedelta(0) : 1
'+01:00' : 1
t.strftime("%H:%M:%S : 1
%Z") : 1
'12:10:30 : 1
+01:00' : 1
{:%H:%M}.'.format("time" : 1
12:10.' : 1
pickling: : 2
tzinfo.utcoffset(dt) : 1
"-timedelta(hours=24)" : 2
"timedelta(hours=24)" : 2
CONSTANT : 2
fixed-offset : 4
self.dst(dt) : 2
daylight-aware : 1
tzinfo.dst(dt) : 1
(DST) : 1
crossing : 2
"tz.utcoffset(dt) : 1
tz.dst(dt)" : 1
"dt.tzinfo : 1
tz" : 1
zone's : 2
"standard : 1
offset" : 2
geographic : 1
"datetime.astimezone()" : 2
violations; : 1
dston : 2
dstoff : 1
dt.replace(tzinfo=None) : 2
dstoff: : 1
tzinfo.tzname(dt) : 1
"UTC" : 4
"-500" : 1
"-5:00" : 1
"EDT" : 1
"US/Eastern" : 1
"America/New : 1
York" : 1
"tzname()" : 2
"utcoffset(None)" : 1
discovering : 1
override: : 1
tzinfo.fromutc(dt) : 1
*dt*'s : 1
"fromutc()" : 5
*self*'s : 1
straddling : 1
dtoff : 3
dt.utcoffset() : 1
dtdst : 6
dt.dst() : 2
self's : 1
delta: : 1
dtdst: : 1
"tzinfo_examples.py" : 1
HOUR : 8
(May : 1
past.) : 1
_time : 1
STDOFFSET : 4
timedelta(seconds : 2
-_time.timezone) : 1
_time.daylight: : 1
DSTOFFSET : 4
-_time.altzone) : 1
DSTDIFF : 3
LocalTimezone(tzinfo): : 1
tzinfo=self)) : 1
_time.localtime(stamp)[:6] : 1
dst_diff : 1
(args : 1
_time.localtime(stamp : 1
dst_diff)) : 1
datetime(*args : 1
microsecond=dt.microsecond : 1
tzinfo=self : 1
fold=fold) : 1
self._isdst(dt): : 2
_time.tzname[self._isdst(dt)] : 1
_isdst(self : 1
(dt.year : 1
dt.month : 1
dt.day : 1
dt.hour : 1
dt.minute : 1
dt.second : 1
dt.weekday() : 2
_time.mktime(tt) : 1
_time.localtime(stamp) : 1
tt.tm_isdst : 1
LocalTimezone() : 1
first_sunday_on_or_after(dt): : 1
days_to_go : 1
days_to_go: : 1
timedelta(days_to_go) : 1
pytz): : 1
http://www.twinsun.com/tz/tz-link.htm : 1
https://sourceforge.net/projects/pytz/ : 1
(might : 1
up-to-date) : 1
2am : 6
DSTSTART_2007 : 2
datetime(1 : 5
DSTEND_2007 : 2
DSTSTART_1987_2006 : 2
DSTEND_1987_2006 : 3
DSTSTART_1967_1986 : 2
DSTEND_1967_1986 : 2
us_dst_range(year): : 1
dststart : 3
dstend : 3
2007: : 1
1966 : 1
1987: : 1
(datetime(year : 1
first_sunday_on_or_after(dststart.replace(year=year)) : 1
first_sunday_on_or_after(dstend.replace(year=year)) : 1
USTimeZone(tzinfo): : 1
reprname : 2
stdname : 2
dstname): : 1
self.stdoffset : 3
timedelta(hours=hours) : 1
self.reprname : 2
self.stdname : 2
self.dstname : 2
dstname : 1
self.dst(dt): : 1
fromutc() : 1
us_dst_range(dt.year) : 2
HOUR: : 4
Fold : 1
hour): : 2
Gap : 1
start.replace(tzinfo=self) : 1
end.replace(tzinfo=self) : 1
std_time : 5
dst_time : 4
std_time.replace(fold=1) : 1
USTimeZone(-5 : 1
"Eastern" : 1
"EST" : 2
"EDT") : 1
USTimeZone(-6 : 1
"Central" : 1
"CST" : 1
"CDT") : 1
Mountain : 1
USTimeZone(-7 : 1
"Mountain" : 1
"MST" : 1
"MDT") : 1
Pacific : 1
USTimeZone(-8 : 1
"Pacific" : 1
"PST" : 1
"PDT") : 1
concreteness : 1
(UTC : 1
-0500) : 1
1:59 : 4
(EST) : 1
(EDT) : 1
November: : 1
3:MM : 5
4:MM : 3
5:MM : 3
6:MM : 2
7:MM : 1
8:MM : 1
22:MM : 2
23:MM : 4
0:MM : 4
1:MM : 7
2:MM : 4
leaps : 2
3:00 : 1
"astimezone(Eastern)" : 1
"hour : 1
Spring : 1
tzinfo_examples : 1
t.tzname()) : 1
03:00:00 : 1
08:00:00 : 1
(daylight : 1
1:00 : 1
wall-time : 1
hours) : 1
hours)) : 1
"timezone.utc" : 1
*IANA : 1
database* : 1
tz : 1
zoneinfo) : 1
globe : 1
daylight-saving : 1
civil : 1
datetime.timezone(offset : 1
"datetime.tzname()" : 1
timezone.utcoffset(dt) : 1
timezone.tzname(dt) : 1
"tzname(dt)" : 1
"UTC±HH:MM" : 1
± : 1
HH : 1
MM : 1
"offset.hours" : 1
"offset.minutes" : 1
"offset=timedelta(0)" : 1
"'UTC'" : 1
"'UTC+00:00'" : 1
timezone.dst(dt) : 1
timezone.fromutc(dt) : 1
"timezone(timedelta(0))" : 1
"strftime(format)" : 2
"datetime.strptime()" : 2
"strptime()": : 1
+------------------+----------------------------------------------------------+--------------------------------------------------------------------------------+ : 5
"strptime" : 1
|==================|==========================================================|================================================================================| : 1
"date"; : 1
"strptime(date_string : 1
dates: : 1
datetime.strptime('31/01/22 : 1
23:59:59.999999' : 1
'%d/%m/%y : 1
%H:%M:%S.%f') : 1
datetime.datetime(2022 : 1
_.strftime('%a : 1
%I:%M%p') : 1
11:59PM' : 1
+-------------+----------------------------------+--------------------------+---------+ : 29
|=============|==================================|==========================|=========| : 2
Mon : 1
(en_US); : 8
Mo : 1
Sa : 1
(de_DE) : 8
Saturday : 2
Sonntag : 1
Montag : 1
Samstag : 1
01 : 12
Dez : 1
Januar : 1
Februar : 1
Dezember : 1
0002 : 2
9998 : 2
pm : 1
Microsecond : 1
000000 : 1
000001 : 1
+0000 : 1
"±HHMM[SS[.ffffff]]" : 2
(empty : 2
+1030 : 1
+063415 : 1
naive) : 2
-030712.345216 : 1
366 : 1
Tue : 1
21:30:00 : 4
Di : 1
08/16/88 : 1
(None); : 1
08/16/1988 : 1
16.08.1988 : 1
("%V") : 1
Broadly : 1
"d.strftime(fmt)" : 1
"time.strftime(fmt : 1
d.timetuple())" : 1
"1900-01-01T00:00:00.000": : 1
"datetime.strptime(date_string : 1
"datetime.strptime" : 1
"time.strptime" : 1
"1900" : 2
"month/day/year" : 1
"day/month/year") : 1
"ja_JP" : 1
"eucJP" : 1
"SJIS" : 1
"utf-8"; : 1
9999] : 1
"MM" : 1
"SS" : 2
"ffffff" : 3
6-digit : 1
"timedelta(hours=-3 : 1
minutes=-30)" : 1
"'-0330'" : 1
"'+01:00:00'" : 1
"'+00:00'" : 1
"%Z": : 1
living : 1
"JST" : 1
("%Y") : 1
("%G") : 1
Relativity : 1
"proleptic : 2
Gregorian" : 2
Dershowitz : 2
Reingold's : 2
*Calendrical : 1
Calculations* : 1
Gent's : 1
"datetime.strptime('Feb : 1
29' : 1
'%b : 1
%d')" : 1
Lib/tkinter/colorchooser.py : 1
"Chooser" : 3
picker : 1
tkinter.colorchooser.Chooser(master=None : 1
tkinter.colorchooser.askcolor(color=None : 1
Lib/pickletools.py : 1
"pickle"; : 1
pickletools" : 2
"x.pickle": : 1
x.pickle : 2
\x80 : 1
PROTO : 1
BININT1 : 2
\x86 : 1
TUPLE2 : 1
7: : 1
9: : 1
STOP : 1
--annotate : 1
Annotate : 1
--output=<file> : 1
--indentlevel=<num> : 1
--memo : 1
disassemblies : 2
--preamble=<preamble> : 1
pickletools.dis(pickle : 1
memo=None : 1
indentlevel=4 : 1
annotate=0) : 1
*memo* : 1
pickle's : 1
memo; : 1
Successive : 1
"MARK" : 1
*indentlevel* : 1
*annotate* : 3
pickletools.genops(pickle) : 1
"(opcode : 1
pos)" : 1
"OpcodeInfo" : 1
opcode's : 1
pickletools.optimize(picklestring) : 1
Lib/posixpath.py : 1
Lib/ntpath.py : 1
*automatic* : 1
"expandvars()" : 1
desires : 1
"posixpath" : 1
UNIX-style : 1
os.path.abspath(path) : 1
absolutized : 1
"normpath(join(os.getcwd() : 1
path))" : 1
os.path.basename(path) : 1
**basename** : 2
"'/foo/bar/'" : 1
"basename()" : 2
os.path.commonpath(paths) : 1
"commonprefix()" : 1
os.path.commonprefix(list) : 1
(taken : 1
character-by-character) : 1
"commonpath()" : 1
os.path.dirname(path) : 1
os.path.exists(path) : 1
os.path.lexists(path) : 1
os.path.expanduser(path) : 1
*user*'s : 1
os.path.expandvars(path) : 1
Substrings : 1
"$name" : 2
"${name}" : 2
"%name%" : 1
os.path.getatime(path) : 1
os.path.getmtime(path) : 1
os.path.getctime(path) : 1
ctime : 1
os.path.getsize(path) : 1
os.path.isabs(path) : 1
(back)slash : 1
chopping : 1
os.path.isfile(path) : 1
"existing" : 3
os.path.isdir(path) : 1
os.path.islink(path) : 1
os.path.ismount(path) : 1
"*path*/.." : 2
mounts : 1
"GetVolumePathName" : 1
*paths) : 1
**paths* : 1
"os.path.join("c:" : 1
"foo")" : 1
"C:" : 1
("c:foo") : 1
"c:\foo" : 1
os.path.normcase(path) : 1
os.path.normpath(path) : 1
"A//B" : 1
"A/B/" : 1
"A/./B" : 1
"A/foo/../B" : 1
"A/B" : 1
"normcase()" : 1
Std : 1
1003.1 : 1
Edition; : 1
os.path.realpath(path : 1
interact.Operating : 1
os.path.relpath(path : 1
start=os.curdir) : 1
filepath : 1
computation: : 1
os.path.samefile(path1 : 1
path2) : 1
os.path.sameopenfile(fp1 : 1
fp2) : 1
*fp1* : 1
*fp2* : 1
os.path.samestat(stat1 : 1
stat2) : 1
*stat1* : 1
*stat2* : 1
"samefile()" : 1
"sameopenfile()" : 1
os.path.split(path) : 1
"(head : 1
tail)" : 3
*head* : 4
"join(head : 1
differ) : 1
"dirname()" : 1
os.path.splitdrive(path) : 1
"(drive : 1
*drive* : 2
"drive : 1
tail" : 1
splitdrive("c:/dir") : 1
("c:" : 1
"/dir") : 2
splitdrive("//host/computer/dir") : 1
("//host/computer" : 1
os.path.splitext(path) : 1
"(root : 1
ext)" : 1
"''": : 1
splitext('bar') : 1
splitext('foo.bar.exe') : 1
('foo.bar' : 1
'.exe') : 2
splitext('/foo/bar.exe') : 1
('/foo/bar' : 1
splitext('.cshrc') : 1
('.cshrc' : 1
splitext('/foo/....jpg') : 1
('/foo/....jpg' : 1
os.path.supports_unicode_filenames : 1
"re") : 1
"difflib") : 1
Lib/asyncio/locks.py : 1
that); : 1
primitives: : 1
lock.acquire() : 1
lock.release() : 2
*unlocked* : 6
*locked* : 4
Acquiring : 2
*fair*: : 1
*true* : 3
*false* : 2
waiter(event): : 1
print('waiting : 1
event.wait() : 1
it!') : 1
asyncio.Event() : 1
waiter_task : 2
asyncio.create_task(waiter(event)) : 1
event.set() : 1
(unset) : 1
asyncio.Condition(lock=None) : 1
asyncio.Condition() : 2
cond: : 1
cond.wait() : 2
cond.acquire() : 1
cond.release() : 1
wait_for(predicate) : 1
asyncio.Semaphore(value=1) : 1
sem : 2
asyncio.Semaphore(10) : 2
sem: : 1
sem.acquire() : 1
sem.release() : 1
asyncio.BoundedSemaphore(value=1) : 1
asyncio.Barrier(parties) : 1
example_barrier(): : 1
asyncio.Barrier(3) : 1
asyncio.create_task(b.wait()) : 2
.wait() : 1
print("barrier : 1
passed") : 1
asyncio.run(example_barrier()) : 1
<asyncio.locks.Barrier : 3
0x.. : 3
[filling : 2
waiters:2/3]> : 1
[draining : 1
waiters:0/3]> : 2
"filling" : 1
"parties-1" : 1
*draining : 1
phase*') : 1
asyncio.BrokenBarrierError : 1
lock)") : 1
Lib/email/message.py : 1
*content*) : 1
sub-"EmailMessage" : 2
email.message.EmailMessage(policy=default) : 1
endings) : 2
"email.generator.Generator" : 1
"as_string(policy=self.policy.clone(utf8=True))" : 1
"utf8=True" : 1
6531**-like : 1
"email.generator.BytesGenerator" : 1
header.) : 1
(non-"compat32") : 1
"email.headerregistry.BaseHeader" : 1
(*failobj* : 1
(According : 1
*text/plain*.) : 1
"get_content_type" : 1
"params" : 2
"msg['Content-Type'].params['charset']") : 1
is_attachment() : 1
3.4.2: : 1
is_attachment : 1
interrogating : 2
(payload) : 1
email.iterators : 1
_structure : 1
get_body(preferencelist=('related' : 1
'plain')) : 1
*preferencelist* : 5
"related" : 2
"get_body" : 4
(sub-)part : 1
"multipart/related" : 11
"('plain',)" : 1
"('html' : 1
'plain')" : 2
"('related' : 1
iter_attachments() : 1
sub-parts : 3
"text/html" : 1
"multipart/alternative" : 5
*Content-Disposition: : 1
attachment*) : 2
non-"multipart" : 8
iter_parts() : 1
"walk()".) : 1
get_content(*args : 1
content_manager=None : 5
*content_manager* : 7
set_content(*args : 1
make_related(boundary=None) : 1
*Content-* : 3
make_alternative(boundary=None) : 1
make_mixed(boundary=None) : 1
"multipart-alternative" : 1
"multipart/mixed" : 2
add_related(*args : 1
"make_related()" : 1
add_alternative(*args : 1
"make_alternative()" : 1
add_attachment(*args : 1
"make_mixed()" : 1
(*Content-Disposition: : 2
inline*) : 1
clear_content() : 1
"Content-" : 1
"preamble" : 1
email.message.MIMEPart(policy=default) : 1
email.message.Message: : 1
"raise": : 1
new_exc : 2
original_exc : 1
Objects/exceptions.c : 1
"Exception") : 1
"OSError") : 1
with_traceback(tb) : 1
"SomeException" : 2
"OtherException" : 2
SomeException: : 1
sys.exception().__traceback__ : 1
OtherException(...).with_traceback(tb) : 1
add_note(note) : 1
"note" : 2
non-system-exiting : 1
ArithmeticError : 2
(When : 2
raised.) : 2
EOFError : 3
(N.B.: : 1
"io.IOBase.read()" : 1
EOF.) : 1
FloatingPointError : 2
"generator.close()" : 1
"coroutine.close()" : 1
troubles : 1
(Slice : 1
range; : 2
(dictionary) : 1
Exceptions.) : 1
rescued : 1
(internal) : 1
(C's : 1
situation; : 1
run-away : 1
OSError([arg]) : 1
OSError(errno : 1
strerror[ : 1
winerror[ : 1
filename2]]]) : 1
"disk : 1
winerror : 1
*winerror* : 2
"winerror" : 1
strerror : 1
"perror()" : 1
filename2 : 1
"os.rename()") : 1
"filename2" : 1
*filename2* : 1
standardization : 1
"sys.getrecursionlimit()") : 1
ReferenceError : 2
*iterator*'s : 1
(retaining : 1
generator_stop" : 1
SyntaxError(message : 1
1-indexed: : 4
end_offset : 1
"f-string: : 1
f'Bad : 1
{a : 1
field' : 1
('f-string: : 1
'(a : 2
b)n' : 1
IndentationError : 2
TabError : 2
terms) : 1
("sys.version"; : 1
exits; : 1
function); : 1
("finally" : 1
"os.fork()") : 1
(Defaults : 1
"None".) : 1
boundaries) : 1
"err.object[err.start:err.end]" : 1
versions; : 1
EnvironmentError : 1
WindowsError : 1
Corresponds : 20
"EALREADY" : 1
"EWOULDBLOCK" : 1
"EINPROGRESS" : 1
ChildProcessError : 2
"ECHILD" : 1
connection-related : 1
"EPIPE" : 1
"ESHUTDOWN" : 1
ConnectionAbortedError : 2
"ECONNABORTED" : 1
ConnectionRefusedError : 2
"ECONNREFUSED" : 1
ConnectionResetError : 2
"ECONNRESET" : 1
FileExistsError : 2
"EEXIST" : 1
IsADirectoryError : 2
"os.remove()") : 1
"EISDIR" : 1
"os.listdir()") : 1
"ENOTDIR" : 1
WASI's : 1
ProcessLookupError : 2
"ESRCH" : 1
"ETIMEDOUT" : 1
categories; : 1
UserWarning : 2
565**) : 1
SyntaxWarning : 2
RuntimeWarning : 2
probable : 1
UnicodeWarning : 2
ExceptionGroup(msg : 1
BaseExceptionGroup(msg : 1
"excs" : 3
subgroup(condition) : 1
split(condition) : 1
"subgroup()" : 4
"(match : 1
rest)" : 1
"subgroup(condition)" : 1
derive(excs) : 1
"derive()" : 2
MyGroup(ExceptionGroup): : 1
derive(self : 2
excs): : 2
MyGroup(self.message : 1
MyGroup("eg" : 1
TypeError(2)]) : 2
e.add_note("a : 1
note") : 1
e.__context__ : 1
Exception("context") : 1
e.__cause__ : 1
Exception("cause") : 1
exc.split(ValueError) : 1
exc.__context__ : 1
exc.__cause__ : 1
exc.__notes__ : 1
(MyGroup('eg' : 3
Exception('context') : 3
Exception('cause') : 3
['a : 3
note']) : 3
match.__context__ : 1
match.__cause__ : 1
match.__notes__ : 1
[ValueError(1)]) : 1
rest.__context__ : 1
rest.__cause__ : 1
rest.__notes__ : 1
[TypeError(2)]) : 1
exc.__traceback__ : 1
match.__traceback__ : 1
rest.__traceback__ : 1
exit_code : 2
Errors(ExceptionGroup): : 1
exit_code): : 1
super().__new__(Errors : 1
f"exit : 1
{exit_code}" : 1
self.exit_code : 1
Errors(excs : 1
self.exit_code) : 1
BaseExceptionGroup : 1
│ : 34
ExceptionGroup : 1
[BaseExceptionGroup] : 1
"sequential" : 1
*debug : 1
"debug=True" : 1
mitigates : 1
"forgotten : 1
await" : 1
non-threadsafe : 1
"loop.slow_callback_duration" : 1
"slow" : 1
loop.call_soon_threadsafe(fut.cancel) : 1
coro_func(): : 1
asyncio.run_coroutine_threadsafe(coro_func() : 1
"multiprocessing") : 1
(CPU-bound) : 1
""asyncio"" : 1
adjusted: : 1
logging.getLogger("asyncio").setLevel(logging.WARNING) : 1
"coro()" : 1
coro()") : 1
"RuntimeWarning": : 1
print("never : 1
scheduled") : 1
test.py:7: : 2
RuntimeWarning: : 2
"../t.py" : 4
asyncio.run(main() : 3
debug=True) : 3
bug(): : 1
Exception("not : 3
consumed") : 3
asyncio.create_task(bug()) : 1
future: : 2
<Task : 2
coro=<bug() : 2
test.py:3> : 2
exception=Exception('not : 2
consumed')> : 1
consumed') : 1
asyncio/tasks.py:321> : 1
source_traceback: : 1
Lib/urllib/parse.py : 1
(URL) : 2
(addressing : 2
"relative : 1
URL" : 2
URL." : 1
Locators : 4
"ftp" : 2
"gopher" : 1
"hdl" : 1
"imap" : 1
"mailto" : 1
"mms" : 1
"nntp" : 1
"prospero" : 1
"rsync" : 1
"rtsp" : 1
"rtspu" : 1
"sftp" : 1
"shttp" : 1
"sip" : 1
"sips" : 1
"snews" : 1
"svn+ssh" : 1
"telnet" : 1
"wais" : 1
"ws" : 1
"wss" : 1
urllib.parse.urlparse(urlstring : 1
scheme='' : 2
allow_fragments=True) : 3
"scheme://netloc/path;parameters?query#fragment" : 1
urlparse("scheme://netloc/path;parameters?query#fragment") : 1
ParseResult(scheme='scheme' : 1
netloc='netloc' : 1
path='/path;parameters' : 1
query='query' : 1
fragment='fragment') : 1
urlparse("http://docs.python.org:80/3/library/urllib.parse.html?" : 1
"highlight=params#url-parsing") : 1
netloc='docs.python.org:80' : 1
path='/3/library/urllib.parse.html' : 1
query='highlight=params' : 1
fragment='url-parsing') : 1
o.scheme : 1
'http' : 1
o.netloc : 1
'docs.python.org:80' : 1
o.hostname : 1
'docs.python.org' : 1
o.port : 1
o._replace(fragment="").geturl() : 1
'http://docs.python.org:80/3/library/urllib.parse.html?highlight=params' : 1
netloc : 7
urlparse('//www.cwi.nl:80/%7Eguido/Python.html') : 2
ParseResult(scheme='' : 4
netloc='www.cwi.nl:80' : 3
path='/%7Eguido/Python.html' : 3
urlparse('www.cwi.nl/%7Eguido/Python.html') : 1
netloc='' : 2
path='www.cwi.nl/%7Eguido/Python.html' : 1
urlparse('help/Python.html') : 1
path='help/Python.html' : 1
*urlstring* : 1
*allow_fragments* : 2
"fragment" : 4
+--------------------+---------+---------------------------+--------------------------+ : 11
|====================|=========|===========================|==========================| : 1
"scheme" : 2
"netloc" : 6
Fragment : 3
Unmatched : 5
"_replace()" : 2
u._replace(scheme='http') : 1
*allow_fragment* : 1
urllib.parse.parse_qs(qs : 1
max_num_fields=None : 2
*max_num_fields* : 6
"doseq" : 1
urllib.parse.parse_qsl(qs : 1
urllib.parse.urlunparse(parts) : 1
*parts* : 2
six-item : 1
query; : 2
urllib.parse.urlsplit(urlstring : 1
2396**) : 1
5-item : 1
identifier) : 1
+--------------------+---------+---------------------------+------------------------+ : 13
|====================|=========|===========================|========================| : 2
urllib.parse.urlunsplit(parts) : 1
five-item : 1
urllib.parse.urljoin(base : 1
("absolute") : 1
(*base*) : 1
(*url*) : 1
Informally : 1
urljoin('http://www.cwi.nl/%7Eguido/Python.html' : 2
'FAQ.html') : 1
'http://www.cwi.nl/%7Eguido/FAQ.html' : 1
"scheme://") : 1
*url*'s : 1
'//www.python.org/%7Eguido') : 1
'http://www.python.org/%7Eguido' : 1
"urlunsplit()" : 1
*netloc* : 1
urllib.parse.urldefrag(url) : 1
urllib.parse.unwrap(url) : 1
"<URL:scheme://host/path>" : 1
"<scheme://host/path>" : 1
"URL:scheme://host/path" : 1
"scheme://host/path") : 1
"'utf-8'") : 1
urllib.parse.SplitResult.geturl() : 1
re-combined : 1
urlsplit : 1
'HTTP://www.Python.org/doc/#' : 1
urlsplit(url) : 1
r1.geturl() : 1
'http://www.Python.org/doc/' : 2
urlsplit(r1.geturl()) : 1
r2.geturl() : 1
urllib.parse.DefragResult(url : 1
"DefragResultBytes" : 1
urllib.parse.ParseResult(scheme : 1
"ParseResultBytes" : 1
urllib.parse.SplitResult(scheme : 1
"SplitResultBytes" : 1
urllib.parse.DefragResultBytes(url : 1
"DefragResult" : 1
urllib.parse.ParseResultBytes(scheme : 1
"ParseResult" : 1
urllib.parse.SplitResultBytes(scheme : 1
"SplitResult" : 1
urllib.parse.quote(string : 1
safe='/' : 1
"%xx" : 3
Letters : 1
"'_.-~'" : 1
unreserved : 1
"quote(string : 1
"quote_from_bytes(string.encode(encoding : 1
safe)" : 1
"quote('/El : 1
Niño/')" : 2
"'/El%20Ni%C3%B1o/'" : 1
urllib.parse.quote_plus(string : 1
safe='' : 2
"quote_plus('/El : 1
"'%2FEl+Ni%C3%B1o%2F'" : 1
urllib.parse.quote_from_bytes(bytes : 1
safe='/') : 1
string-to-bytes : 1
"quote_from_bytes(b'a&\xef')" : 1
"'a%26%EF'" : 1
urllib.parse.unquote(string : 1
"unquote('/El%20Ni%C3%B1o/')" : 1
"'/El : 2
Niño/'" : 2
urllib.parse.unquote_plus(string : 1
"unquote_plus('/El+Ni%C3%B1o/')" : 1
urllib.parse.unquote_to_bytes(string) : 1
single-octet : 1
"unquote_to_bytes('a%26%EF')" : 1
"b'a&\xef'" : 1
urllib.parse.urlencode(query : 1
doseq=False : 1
quote_via=quote_plus) : 1
two-element : 2
"key=value" : 2
"%2F" : 1
("application/x-www-form-urlencoded") : 1
"%20" : 1
*doseq* : 1
Living : 1
application/x-www-form-urlencoded : 1
(STD66) : 1
URL's : 1
(URI): : 1
(URNs) : 1
(URLs) : 1
2368** : 1
mailto : 2
"Abnormal : 1
Examples" : 1
1738** : 1
when) : 1
thing: : 1
endpoint) : 1
"loop.create_connection()") : 1
*Protocol* : 1
*Transport* : 2
"BaseTransport" : 1
"DatagramTransport" : 1
"BaseProtocol" : 1
"DatagramProtocol" : 1
Lib/asyncio/transports.py : 1
asyncio.BaseTransport : 1
asyncio.WriteTransport(BaseTransport) : 1
*WriteTransport* : 1
subprocess-related : 2
asyncio.ReadTransport(BaseTransport) : 1
*ReadTransport* : 1
asyncio.Transport(WriteTransport : 1
ReadTransport) : 1
asyncio.DatagramTransport(BaseTransport) : 1
*DatagramTransport* : 1
asyncio.SubprocessTransport(BaseTransport) : 1
*SubprocessTransport* : 1
BaseTransport.close() : 1
protocol's : 6
"protocol.connection_lost()" : 3
BaseTransport.is_closing() : 1
BaseTransport.get_extra_info(name : 1
transport-specific : 1
transport: : 1
print(sock.getsockopt(...)) : 1
transports: : 1
"'peername'": : 1
"socket.socket.getpeername()" : 1
"'socket'": : 1
"'sockname'": : 1
"socket.socket.getsockname()" : 1
"'compression'": : 1
compressed; : 1
"ssl.SSLSocket.compression()" : 1
"'cipher'": : 1
"ssl.SSLSocket.cipher()" : 1
"'peercert'": : 1
"'sslcontext'": : 1
"'ssl_object'": : 1
"'pipe'": : 1
subprocess: : 1
"'subprocess'": : 1
BaseTransport.set_protocol(protocol) : 1
Switching : 1
BaseTransport.get_protocol() : 1
ReadTransport.is_reading() : 1
ReadTransport.pause_reading() : 1
"protocol.data_received()" : 2
"resume_reading()" : 1
ReadTransport.resume_reading() : 1
WriteTransport.abort() : 1
WriteTransport.can_write_eof() : 1
WriteTransport.get_write_buffer_size() : 1
WriteTransport.get_write_buffer_limits() : 1
watermarks : 2
"(low : 1
"set_write_buffer_limits()" : 2
WriteTransport.set_write_buffer_limits(high=None : 1
low=None) : 1
"protocol.pause_writing()" : 1
"protocol.resume_writing()" : 1
sub-optimal : 1
"get_write_buffer_limits()" : 1
WriteTransport.write(data) : 1
WriteTransport.writelines(list_of_data) : 1
WriteTransport.write_eof() : 1
SSL) : 1
half-closed : 2
DatagramTransport.sendto(data : 1
addr=None) : 1
transport-dependent : 1
DatagramTransport.abort() : 1
SubprocessTransport.get_pid() : 1
SubprocessTransport.get_pipe_transport(fd) : 1
*fd*: : 2
(*stdin*) : 1
(*stdout*) : 1
(*stderr*) : 1
SubprocessTransport.get_returncode() : 1
SubprocessTransport.kill() : 1
"subprocess.Popen.kill()" : 1
SubprocessTransport.send_signal(signal) : 1
SubprocessTransport.terminate() : 1
TerminateProcess() : 1
"subprocess.Popen.terminate()" : 1
SubprocessTransport.close() : 1
Lib/asyncio/protocols.py : 1
callbacks: : 1
asyncio.BaseProtocol : 1
asyncio.Protocol(BaseProtocol) : 1
asyncio.BufferedProtocol(BaseProtocol) : 1
asyncio.DatagramProtocol(BaseProtocol) : 1
asyncio.SubprocessProtocol(BaseProtocol) : 1
(unidirectional : 1
BaseProtocol.connection_made(transport) : 1
BaseProtocol.connection_lost(exc) : 1
BaseProtocol.pause_writing() : 1
BaseProtocol.resume_writing() : 1
Protocol.data_received(data) : 1
reassembled : 1
"protocol.eof_received()" : 3
Protocol.eof_received() : 1
asyncio) : 1
connection_made : 2
[-> : 5
data_received]* : 1
eof_received] : 2
connection_lost : 2
Sophisticated : 1
BufferedProtocol.get_buffer(sizehint) : 1
BufferedProtocol.buffer_updated(nbytes) : 1
BufferedProtocol.eof_received() : 1
get_buffer : 1
buffer_updated] : 1
]* : 1
DatagramProtocol.datagram_received(data : 1
DatagramProtocol.error_received(exc) : 1
UDP) : 1
undeliverable : 1
packets.The : 1
'ready' : 1
"DatagramProtocol.error_received()" : 1
SubprocessProtocol.pipe_data_received(fd : 1
SubprocessProtocol.pipe_connection_lost(fd : 1
exc) : 2
SubprocessProtocol.process_exited() : 1
EchoServerProtocol(asyncio.Protocol): : 1
connection_made(self : 5
transport): : 5
peername : 1
transport.get_extra_info('peername') : 1
print('Connection : 1
{}'.format(peername)) : 1
self.transport : 6
data_received(self : 3
print('Data : 3
{!r}'.format(message)) : 2
print('Send: : 1
self.transport.write(data) : 1
self.transport.close() : 3
loop.create_server( : 1
EchoServerProtocol() : 2
closed: : 1
EchoClientProtocol(asyncio.Protocol): : 1
on_con_lost): : 3
self.on_con_lost : 3
on_con_lost : 8
transport.write(self.message.encode()) : 1
sent: : 1
{!r}'.format(self.message)) : 1
{!r}'.format(data.decode())) : 1
connection_lost(self : 3
exc): : 4
self.on_con_lost.set_result(True) : 3
loop.create_connection( : 2
EchoClientProtocol(message : 2
on_con_lost) : 2
transport.close() : 5
EchoServerProtocol: : 1
datagram_received(self : 2
print('Received : 1
addr)) : 2
print('Send : 1
self.transport.sendto(data : 1
print("Starting : 1
server") : 1
loop.create_datagram_endpoint( : 2
local_addr=('127.0.0.1' : 1
9999)) : 2
EchoClientProtocol: : 1
print('Send:' : 1
self.message) : 1
self.transport.sendto(self.message.encode()) : 1
socket") : 1
error_received(self : 1
received:' : 1
print("Connection : 1
closed") : 1
World!" : 1
remote_addr=('127.0.0.1' : 1
MyProtocol(asyncio.Protocol): : 1
connection_lost() : 1
MyProtocol(on_con_lost) : 1
sock=rsock) : 1
protocol.on_con_lost : 1
DateProtocol(asyncio.SubprocessProtocol): : 1
exit_future): : 1
self.exit_future : 1
exit_future : 3
self.output : 1
pipe_data_received(self : 1
self.output.extend(data) : 1
process_exited(self): : 1
self.exit_future.set_result(True) : 1
asyncio.Future(loop=loop) : 1
DateProtocol; : 1
loop.subprocess_exec( : 1
DateProtocol(exit_future) : 1
stderr=None) : 1
process_exited() : 1
pipe_data_received() : 1
bytes(protocol.output) : 1
textfile : 1
open(textfile) : 1
msg.set_content(fp.read()) : 1
recipient's : 1
f'The : 1
{textfile}' : 1
msg['From'] : 4
msg['To'] : 4
s.send_message(msg) : 4
s.quit() : 3
email.parser : 2
BytesParser : 2
email.policy : 3
open(messagefile : 1
BytesParser(policy=default).parse(fp) : 1
Parser(policy=default).parsestr( : 1
'From: : 1
<user@example.com>\n' : 1
'To: : 1
<someone_else@example.com>\n' : 1
message\n' : 1
'Body : 1
here\n') : 1
print('To: : 1
{}'.format(headers['to'])) : 1
print('From: : 1
{}'.format(headers['from'])) : 1
print('Subject: : 1
{}'.format(headers['subject'])) : 1
print('Recipient : 1
username: : 1
{}'.format(headers['to'].addresses[0].username)) : 1
print('Sender : 1
{}'.format(headers['from'].addresses[0].display_name)) : 1
residing : 1
'Our : 1
reunion' : 1
recipients' : 1
'.join(family) : 1
msg.preamble : 2
reader.\n' : 2
MIMEImage : 1
pngfiles: : 1
img_data : 1
msg.add_attachment(img_data : 1
maintype='image' : 1
subtype='png') : 1
"""Send : 1
message.""" : 1
ArgumentParser(description="""\ : 2
forwarding : 1
parser.add_argument('-d' : 2
'--directory' : 2
help="""Mail : 1
subdirectories.""") : 1
'--output' : 1
help="""Print : 1
server.""") : 1
parser.add_argument('-s' : 1
'--sender' : 1
required=True : 3
help='The : 1
(required)') : 1
parser.add_argument('-r' : 1
'--recipient' : 1
action='append' : 1
metavar='RECIPIENT' : 1
default=[] : 1
dest='recipients' : 1
required)') : 1
args.directory : 1
f'Contents : 1
{os.path.abspath(directory)}' : 1
'.join(args.recipients) : 1
args.sender : 1
os.listdir(directory): : 1
os.path.join(directory : 1
os.path.isfile(path): : 1
gzip'd : 1
mimetypes.guess_type(path) : 1
(compressed) : 2
bag-of-bits : 2
'application/octet-stream' : 1
ctype.split('/' : 1
msg.add_attachment(fp.read() : 1
maintype=maintype : 1
subtype=subtype : 1
filename=filename) : 1
args.output: : 1
open(args.output : 1
fp.write(msg.as_bytes(policy=SMTP)) : 1
"""Unpack : 1
files.""" : 1
help="""Unpack : 1
exist.""") : 1
parser.add_argument('msgfile') : 1
open(args.msgfile : 1
policy=default) : 1
os.mkdir(args.directory) : 1
FileExistsError: : 1
multipart/* : 1
part.get_content_maintype() : 1
'multipart': : 1
part.get_filename() : 2
mimetypes.guess_extension(part.get_content_type()) : 2
ext: : 1
'.bin' : 1
f'part-{counter:03d}{ext}' : 1
open(os.path.join(args.directory : 1
fp.write(part.get_payload(decode=True)) : 1
email.headerregistry : 1
make_msgid : 1
"Ayons : 1
asperges : 2
pour : 2
le : 2
déjeuner" : 1
Address("Pepé : 1
Pew" : 1
"pepe" : 1
(Address("Penelope : 1
Pussycat" : 2
"penelope" : 1
Address("Fabrette : 1
"fabrette" : 1
"example.com")) : 1
msg.set_content("""\ : 1
Salut : 2
Cela : 2
ressemble : 3
à : 3
un : 3
recipie[1] : 2
déjeuner : 4
http://www.yummly.com/recipe/Roasted-Asparagus-Epicurious-203718 : 1
--Pepé : 1
multipart/alternative : 1
asparagus_cid : 1
make_msgid() : 1
msg.add_alternative("""\ : 1
<head></head> : 1
<p>Salut!</p> : 1
<p>Cela : 1
href="http://www.yummly.com/recipe/Roasted-Asparagus-Epicurious-203718"> : 1
recipie : 1
</a> : 1
</p> : 1
<img : 1
src="cid:{asparagus_cid}" : 1
""".format(asparagus_cid=asparagus_cid[1:-1]) : 1
subtype='html') : 1
peel : 1
open("roasted-asparagus.jpg" : 1
img: : 1
msg.get_payload()[1].add_related(img.read() : 1
'image' : 1
'jpeg' : 1
cid=asparagus_cid) : 1
open('outgoing.msg' : 2
f.write(bytes(msg)) : 1
magic_html_parser(html_text : 1
partfiles): : 1
safety-sanitized : 1
partfiles : 3
href="cid:...." : 1
NotImplementedError("Add : 1
needed") : 1
BytesParser(policy=policy.default).parse(fp) : 1
unicode: : 1
print('To:' : 1
msg['to']) : 1
print('From:' : 1
msg['from']) : 1
print('Subject:' : 1
msg['subject']) : 1
msg.get_body(preferencelist=('plain' : 1
'html')) : 1
print(''.join(simplest.get_content().splitlines(keepends=True)[:3])) : 1
ans : 1
input("View : 1
message?") : 1
ans.lower()[0] : 1
richest : 3
msg.get_body() : 1
richest['content-type'].maintype : 1
'text': : 1
richest['content-type'].subtype : 2
'plain': : 1
richest.get_content().splitlines(): : 1
'html': : 1
{}".format(richest.get_content_type())) : 2
richest['content-type'].content_type : 1
'multipart/related': : 1
richest.get_body(preferencelist=('html')) : 1
richest.iter_attachments(): : 1
os.path.splitext(part.get_filename())[1] : 1
tempfile.NamedTemporaryFile(suffix=extension : 1
delete=False) : 2
f.write(part.get_content()) : 1
cid : 1
partfiles[part['content-id'][1:-1]] : 1
tempfile.NamedTemporaryFile(mode='w' : 1
f.write(magic_html_parser(body.get_content() : 1
partfiles)) : 1
webbrowser.open(f.name) : 1
os.remove(f.name) : 1
partfiles.values(): : 1
os.remove(fn) : 1
minded : 1
Penelope : 1
Pussycat : 2
<penelope@example.com> : 1
Fabrette : 1
<fabrette@example.com> : 1
Pepé : 1
Pew : 1
<pepe@example.com> : 1
Subject: : 1
Ayons : 1
Dixon : 1
Cowles : 1
inspiration : 1
Lib/textwrap.py : 1
enough; : 1
textwrap.wrap(text : 1
width=70 : 2
initial_indent='' : 2
subsequent_indent='' : 2
expand_tabs=True : 2
replace_whitespace=True : 2
fix_sentence_endings=False : 3
break_long_words=True : 3
drop_whitespace=True : 2
break_on_hyphens=True : 3
tabsize=8 : 2
max_lines=None : 2
placeholder=' : 3
[...]') : 3
"TextWrapper.wrap()" : 1
textwrap.fill(text : 1
"\n".join(wrap(text : 1
...)) : 1
textwrap.shorten(text : 1
"width": : 1
textwrap.shorten("Hello : 3
width=12) : 1
width=11) : 1
[...]' : 1
width=10 : 1
placeholder="...") : 1
'Hello...' : 1
"tabsize" : 1
"expand_tabs" : 3
"drop_whitespace" : 1
"replace_whitespace" : 3
textwrap.dedent(text) : 1
hello"" : 1
""\thello"" : 1
'''\ : 1
print(repr(s)) : 1
hello\n : 1
world\n : 1
print(repr(dedent(s))) : 1
'hello\n : 1
textwrap.indent(text : 1
predicate=None) : 1
"text.splitlines(True)" : 1
'hello\n\n : 1
\nworld' : 1
indent(s : 1
hello\n\n : 1
print(indent(s : 1
True)) : 1
hyphenated : 2
words; : 1
"TextWrapper.break_long_words" : 1
textwrap.TextWrapper(**kwargs) : 1
TextWrapper(initial_indent="* : 1
TextWrapper() : 1
wrapper.initial_indent : 1
"70") : 1
expand_tabs : 1
"expandtabs()" : 1
tabsize : 1
"8") : 1
replace_whitespace : 1
("'\t\n\v\f\r'") : 1
"str.splitlines()" : 1
drop_whitespace : 1
indenting) : 1
initial_indent : 1
subsequent_indent : 1
fix_sentence_endings : 1
imperfect: : 1
""'"" : 2
"Dr." : 1
Frankenstein's : 1
monster : 1
"Spot." : 1
Spot : 2
"fix_sentence_endings" : 1
"string.lowercase" : 1
"lowercase : 1
letter" : 1
English-language : 1
break_long_words : 1
(Long : 1
exceeded.) : 1
break_on_hyphens : 1
"break_long_words" : 1
insecable : 1
max_lines : 1
[...]'") : 1
wrap(text) : 1
fill(text) : 1
Lib/nntplib.py : 1
poster : 1
3977** : 5
977** : 1
2980** : 2
articles: : 1
nntplib.NNTP('news.gmane.io') : 2
s.group('gmane.comp.python.committers') : 1
print('Group' : 1
'articles : 1
range' : 1
gmane.comp.python.committers : 1
1096 : 3
overviews : 2
s.over((last : 2
last)) : 2
overviews: : 1
print(id : 1
nntplib.decode_header(over['subject'])) : 1
1087 : 1
Re: : 8
1088 : 1
1089 : 1
1090 : 1
1091 : 1
1092 : 1
1093 : 1
1094 : 1
1095 : 1
fellow : 2
committers : 2
'205 : 2
Bye!' : 2
newsgroup): : 1
open('article.txt' : 1
s.post(f) : 1
'240 : 1
successfully.' : 1
nntplib.NNTP(host : 1
port=119 : 1
password=None : 3
readermode=None : 2
usenetrc=False[ : 2
"/.netrc" : 1
*usenetrc* : 4
"AUTHINFO : 2
USER" : 1
PASS" : 1
*readermode* : 2
"mode : 1
reader" : 1
reader-specific : 1
"NNTPPermanentError"s : 1
NNTP('news.gmane.io') : 2
"nntplib.connect" : 2
"nntplib.putline" : 2
nntplib.NNTP_SSL(host : 1
port=563 : 1
(NNTPS) : 1
SSL-on-563 : 1
4642** : 1
nntplib.NNTPError : 1
nntplib.NNTPReplyError : 1
nntplib.NNTPTemporaryError : 1
400--499 : 1
nntplib.NNTPPermanentError : 1
500--599 : 1
nntplib.NNTPProtocolError : 1
nntplib.NNTPDataError : 1
NNTP.nntp_version : 1
NNTP.nntp_implementation : 1
NNTP.quit() : 1
NNTP.getwelcome() : 1
NNTP.getcapabilities() : 1
"CAPABILITIES" : 1
'POST' : 1
s.getcapabilities() : 1
NNTP.login(user=None : 1
usenetrc=True) : 1
"AUTHINFO" : 1
NNTP.starttls(context=None) : 1
"NNTP.login()" : 1
NNTP.newgroups(date : 1
"NEWGROUPS" : 1
s.newgroups(date.today() : 1
timedelta(days=3)) : 1
len(groups) : 1
groups[0] : 1
GroupInfo(group='gmane.network.tor.devel' : 1
last='4' : 1
first='1' : 1
flag='m') : 1
NNTP.newnews(group : 1
"NEWNEWS" : 1
"newgroups()" : 1
articles)" : 1
*articles* : 1
NNTP.list(group_pattern=None : 1
"LIST : 2
ACTIVE" : 1
*group_pattern* : 3
"(group : 1
"y": : 1
"m": : 1
"n": : 1
"j": : 1
"=foo.bar": : 1
NNTP.descriptions(grouppattern) : 1
NEWSGROUPS" : 1
*grouppattern* : 1
wildmat : 2
descriptions)" : 1
*descriptions* : 1
descs : 1
s.descriptions('gmane.comp.python.*') : 1
len(descs) : 1
295 : 1
descs.popitem() : 1
('gmane.comp.python.bio.general' : 1
'BioPython : 1
(Moderated)') : 1
NNTP.description(group) : 1
elides : 1
NNTP.group(name) : 1
"GROUP" : 1
(estimated) : 1
NNTP.over(message_spec : 1
"OVER" : 2
"XOVER" : 2
*message_spec* : 5
"(first : 2
last)" : 1
overviews)" : 1
*overviews* : 1
"(article_number : 1
overview)" : 1
*overview* : 1
"":"") : 1
"message-id" : 1
"references" : 1
":bytes" : 1
":lines" : 1
s.group('gmane.comp.python.devel') : 2
art_num : 2
overviews[0] : 1
117216 : 1
list(over.keys()) : 1
['xref' : 1
':lines' : 1
':bytes' : 1
'references' : 1
'date' : 1
'subject'] : 1
over['from'] : 1
'=?UTF-8?B?Ik1hcnRpbiB2LiBMw7Z3aXMi?= : 1
<martin@v.loewis.de>' : 2
nntplib.decode_header(over['from']) : 1
'"Martin : 1
Löwis" : 1
NNTP.help(* : 1
NNTP.stat(message_spec=None) : 1
"STAT" : 1
(enclosed : 2
"'>'") : 2
id)" : 1
message_id : 2
s.stat(first) : 1
(9099 : 1
'<20030112190404.GE29873@epoch.metaslash.com>') : 1
NNTP.next() : 1
"NEXT" : 1
NNTP.last() : 1
"LAST" : 1
NNTP.article(message_spec=None : 1
"ARTICLE" : 1
info)" : 1
*message_id* : 3
s.article('<20030112190404.GE29873@epoch.metaslash.com>') : 1
info.number : 1
info.message_id : 1
'<20030112190404.GE29873@epoch.metaslash.com>' : 1
len(info.lines) : 1
info.lines[0] : 1
b'Path: : 1
main.gmane.org!not-for-mail' : 1
info.lines[1] : 1
b'From: : 1
<neal@metaslash.com>' : 1
info.lines[-3:] : 1
[b'There : 1
2.2.' : 1
b'Neal'] : 1
NNTP.head(message_spec=None : 1
"article()" : 2
*file*) : 2
NNTP.body(message_spec=None : 1
"BODY" : 1
NNTP.post(data) : 1
Post : 1
(representing : 1
posted) : 1
"post()" : 2
"NNTPReplyError" : 1
NNTP.ihave(message_id : 1
"IHAVE" : 1
NNTP.date() : 1
date)" : 1
NNTP.slave() : 1
"SLAVE" : 1
NNTP.set_debuglevel(level) : 1
NNTP.xhdr(hdr : 1
"XHDR" : 2
*hdr* : 1
"'subject'" : 1
"'first- : 1
last'" : 1
text)" : 1
NNTP.xover(start : 1
delimiting : 3
"over()" : 2
nntplib.decode_header(header_str) : 1
un-escaping : 1
*header_str* : 1
decode_header("Some : 1
subject") : 1
'Some : 1
subject' : 1
decode_header("=?ISO-8859-15?Q?D=E9buter_en_Python?=") : 1
'Débuter : 1
en : 1
decode_header("Re: : 1
=?UTF-8?B?cHJvYmzDqG1lIGRlIG1hdHJpY2U=?=") : 1
'Re: : 1
problème : 1
matrice' : 1
Lib/pickle.py : 1
*"Pickling"* : 1
*"unpickling"* : 1
unpickling) : 1
"serialization" : 1
"marshalling," : 1
"flattening"; : 1
"pickling" : 2
"unpickling" : 1
**is : 1
secure** : 1
trust.It : 1
**execute : 1
unpickling** : 1
tampered : 3
with.Consider : 1
with.Safer : 1
non-backwards : 1
Notation): : 1
ecosystem : 1
Python-specific; : 1
(many : 1
facilities; : 1
APIs); : 1
sharing); : 1
"human-readable" : 1
3.0--3.7 : 1
in-band : 2
Serialization : 1
persistence; : 1
DBM- : 1
de-serialize : 1
"Unpickler" : 5
pickle.HIGHEST_PROTOCOL : 1
pickle.DEFAULT_PROTOCOL : 1
"HIGHEST_PROTOCOL" : 3
convenient: : 1
pickle.dump(obj : 1
fix_imports=True : 6
buffer_callback=None) : 3
"Pickler(file : 1
protocol).dump(obj)" : 1
*buffer_callback* : 15
pickle.dumps(obj : 1
pickle.load(file : 1
encoding='ASCII' : 3
buffers=None) : 3
reconstituted : 3
"Unpickler(file).load()" : 1
pickle.loads(data : 2
pickle.PickleError : 1
pickle.PicklingError : 1
"PickleError" : 2
"PickleBuffer": : 1
pickle.Pickler(file : 1
out-of-band; : 1
dump(obj) : 1
persistent_id(obj) : 1
"persistent_id()" : 4
"Unpickler.persistent_load()" : 1
dispatch_table : 2
*reduction : 1
"copyreg.pickle()" : 1
reducer_override(obj) : 1
reducer : 3
"dispatch_table"-registered : 1
reducers : 1
self-referential : 1
"pickletools.optimize()" : 1
pickle.Unpickler(file : 1
'ASCII' : 1
'strict' : 1
persistent_load(pid) : 1
"UnpicklingError" : 2
"persistent_load()" : 3
find_class(module : 1
"find_class()" : 1
"pickle.find_class" : 1
pickle.PickleBuffer(buffer) : 1
buffer-providing : 2
"PickleBuffer" : 7
raw() : 1
Fortran-contiguous : 1
PickleBuffer : 2
pickled: : 2
bytearrays; : 1
user-defined) : 2
"lambda"); : 1
"PicklingError" : 1
picklestring : 1
pickle.dumps(Foo) : 1
save(obj): : 1
(obj.__class__ : 1
obj.__dict__) : 1
restore(cls : 1
attributes): : 2
cls.__new__(cls) : 1
obj.__dict__.update(attributes) : 1
object.__getnewargs_ex__() : 1
"__getnewargs_ex__()" : 6
object.__getnewargs__() : 1
object.__getstate__() : 1
object.__setstate__(state) : 1
"__setstate__()") : 1
"reduce : 1
"obj.append(item)" : 1
"obj.extend(list_of_items)" : 1
(Whether : 1
supported.) : 1
"obj[key] : 1
state- : 1
"obj"'s : 2
object.__reduce_ex__(protocol) : 1
MemoRecord : 2
namedtuple("MemoRecord" : 1
task") : 1
DBPickler(pickle.Pickler): : 1
persistent_id(self : 1
MemoRecord): : 1
("MemoRecord" : 1
obj.key) : 1
DBUnpickler(pickle.Unpickler): : 1
connection): : 1
super().__init__(file) : 1
persistent_load(self : 1
pid): : 1
DBPickler : 2
self.connection.cursor() : 1
type_tag : 2
key_id : 1
"MemoRecord": : 1
cursor.execute("SELECT : 2
memos : 5
key=?" : 1
(str(key_id),)) : 1
cursor.fetchone() : 1
MemoRecord(key : 1
pickle.UnpicklingError("unsupported : 1
object") : 1
cursor.execute("CREATE : 1
memos(key : 1
TEXT)") : 1
'give : 1
fish' : 1
'prepare : 1
meeting' : 1
'fight : 1
zebra' : 1
cursor.execute("INSERT : 1
VALUES(NULL : 1
(task,)) : 1
memos") : 1
[MemoRecord(key : 1
cursor] : 1
DBPickler(file).dump(memos) : 1
print("Pickled : 1
records:") : 2
pprint.pprint(memos) : 2
cursor.execute("UPDATE : 1
task='learn : 1
italian' : 1
key=1") : 1
file.seek(0) : 1
DBUnpickler(file : 1
conn).load() : 1
print("Unpickled : 1
disturbing : 1
"copyreg.dispatch_table" : 2
pickle.Pickler(f) : 2
p.dispatch_table : 1
copyreg.dispatch_table.copy() : 2
p.dispatch_table[SomeClass] : 1
reduce_SomeClass : 2
MyPickler(pickle.Pickler): : 2
dispatch_table[SomeClass] : 1
MyPickler(f) : 2
"MyPickler" : 1
copyreg.pickle(SomeClass : 1
reduce_SomeClass) : 1
"TextReader" : 2
TextReader: : 1
file.""" : 1
filename): : 1
self.filename : 1
self.file : 5
self.lineno : 2
self.file.readline() : 1
line.endswith('\n'): : 1
line[:-1] : 1
"%i: : 1
(self.lineno : 1
__getstate__(self): : 1
self.__dict__.copy() : 1
state['file'] : 1
__setstate__(self : 1
state): : 2
self.__dict__.update(state) : 1
open(self.filename) : 1
range(self.lineno): : 1
file.readline() : 1
TextReader("hello.txt") : 1
'1: : 1
two.' : 1
new_reader : 1
pickle.loads(pickle.dumps(reader)) : 1
new_reader.readline() : 1
Goodbye!' : 1
"__reduce__()") : 1
reconstructing : 1
my_attribute : 1
reducer_override(self : 1
"""Custom : 1
MyClass.""" : 1
"MyClass": : 1
(obj.__name__ : 1
obj.__bases__ : 1
{'my_attribute': : 1
obj.my_attribute}) : 1
p.dump(MyClass) : 1
MyClass : 1
unpickled_class : 1
pickle.loads(f.getvalue()) : 1
isinstance(unpickled_class : 1
unpickled_class.__name__ : 1
unpickled_class.my_attribute : 1
intrinsically : 1
eschewed : 1
*provider* : 1
transferred) : 1
*consumer* : 1
*signals* : 1
opt-in : 1
reconstructors : 1
Potential : 1
datatype-dependent : 1
ZeroCopyByteArray(bytearray): : 1
__reduce_ex__(self : 1
type(self)._reconstruct : 2
(PickleBuffer(self),) : 1
(bytearray(self),) : 1
_reconstruct(cls : 1
memoryview(obj) : 1
ZeroCopyByteArray : 1
cls(obj) : 1
reconstructor : 1
"_reconstruct" : 1
unserialized : 1
ZeroCopyByteArray(b"abc") : 2
pickle.dumps(b : 2
protocol=5) : 1
new_b : 2
print(b : 4
new_b) : 4
False: : 2
protocol=5 : 1
buffer_callback=buffers.append) : 1
buffers=buffers) : 1
hand-crafted : 1
loaded: : 2
pickle.loads(b"cos\nsystem\n(S'echo : 1
world'\ntR.") : 2
inoffensive : 1
damage : 1
"Unpickler.find_class()" : 2
safe_builtins : 1
RestrictedUnpickler(pickle.Unpickler): : 1
find_class(self : 1
safe_builtins: : 1
getattr(builtins : 1
pickle.UnpicklingError("global : 1
'%s.%s' : 1
forbidden" : 1
restricted_loads(s): : 1
"""Helper : 1
pickle.loads().""" : 1
RestrictedUnpickler(io.BytesIO(s)).load() : 1
intended: : 1
restricted_loads(pickle.dumps([1 : 1
range(15)])) : 1
restricted_loads(b"cos\nsystem\n(S'echo : 1
pickle.UnpicklingError: : 2
'os.system' : 1
restricted_loads(b'cbuiltins\neval\n' : 1
b'(S\'getattr(__import__("os") : 1
"system")' : 1
b'("echo : 1
world")\'\ntR.') : 1
'builtins.eval' : 1
upwards) : 1
3+4j] : 1
("character : 1
b"byte : 1
string") : 1
{None : 1
open('data.pickle' : 2
pickle.dump(data : 1
pickle.HIGHEST_PROTOCOL) : 1
pickle.load(f) : 1
High-performance : 1
"<lambda>" : 1
***************************************************************** : 2
Lib/secrets.py : 1
modelling : 1
secrets.SystemRandom : 1
highest-quality : 1
secrets.choice(sequence) : 1
secrets.randbelow(n) : 1
secrets.randbits(k) : 1
hard-to-guess : 2
secrets.token_bytes([nbytes=None]) : 1
token_bytes(16) : 1
b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b' : 1
secrets.token_hex([nbytes=None]) : 1
token_hex(16) : 1
'f9bf78b9a18ce6d46a0cd2b0b86df9da' : 1
secrets.token_urlsafe([nbytes=None]) : 1
URL-safe : 1
token_urlsafe(16) : 1
'Drmhze6EPcv0fN_81Bj-nA' : 1
brute-force : 2
(256 : 1
"token_*" : 2
secrets.compare_digest(a : 1
"constant-time : 1
compare" : 1
eight-character : 1
''.join(secrets.choice(alphabet) : 2
range(8)) : 1
salted : 1
(irreversible) : 1
ten-character : 1
(any(c.islower() : 1
any(c.isupper() : 1
sum(c.isdigit() : 1
XKCD-style : 1
passphrase: : 1
word-list : 1
open('/usr/share/dict/words') : 1
[word.strip() : 1
f] : 1
'.join(secrets.choice(words) : 1
range(4)) : 1
'https://example.com/reset=' : 1
secrets.token_urlsafe() : 1
*light-weight : 1
*tasks*) : 1
*mutexes* : 1
semaphores*) : 1
_thread.error : 1
_thread.LockType : 1
_thread.start_new_thread(function : 1
kwargs]) : 1
_thread.interrupt_main(signum=signal.SIGINT : 1
_thread.exit() : 1
_thread.allocate_lock() : 2
_thread.get_ident() : 1
_thread.get_native_id() : 1
_thread.stack_size([size]) : 1
_thread.TIMEOUT_MAX : 1
lock.acquire(blocking=True : 1
existence) : 1
lock.locked() : 1
a_lock : 1
a_lock: : 1
print("a_lock : 1
executes") : 1
**Caveats:** : 1
interrupts: : 1
thread.) : 1
"_thread.exit()" : 1
honored) : 1
Lib/trace.py : 1
caller/callee : 1
Coverage.py : 1
--count : 2
somefile.py : 1
"somefile.py" : 1
"--module" : 1
"--listfuncs" : 2
trace" : 1
"--count" : 6
"--trace" : 1
--coverdir" : 1
"--no-report" : 1
--trace : 1
--listfuncs : 1
-T : 1
--trackcalls : 1
--file=<file> : 1
--coverdir=<dir> : 1
"*dir*/*package*/*module*.cover" : 1
--missing : 1
">>>>>>" : 1
--summary : 1
--no-report : 1
--timing : 1
--ignore-module=<mod> : 1
--ignore-dir=<dir> : 1
trace.Trace(count=1 : 1
trace=1 : 1
countfuncs=0 : 1
countcallers=0 : 1
ignoremods=() : 1
ignoredirs=() : 1
outfile=None : 1
timing=False) : 1
*trace* : 1
*countfuncs* : 1
*countcallers* : 1
*ignoremods* : 1
*ignoredirs* : 1
*timing* : 1
runfunc(func : 1
results() : 1
"CoverageResults" : 2
"runctx" : 1
"runfunc" : 1
"Trace.results()" : 1
update(other) : 1
write_results(show_missing=True : 1
summary=False : 1
coverdir=None) : 1
*show_missing* : 1
*summary* : 1
*coverdir* : 1
line-counting : 1
trace.Trace( : 1
ignoredirs=[sys.prefix : 1
sys.exec_prefix] : 1
trace=0 : 1
tracer.run('main()') : 1
tracer.results() : 1
r.write_results(show_missing=True : 1
coverdir=".") : 1
speak : 1
syslog.syslog(message) : 1
syslog.syslog(priority : 1
*facility* : 3
"LOG_INFO" : 2
logical-or : 1
("LOG_INFO : 1
LOG_USER") : 1
"openlog()" : 10
"syslog.syslog" : 1
deferring : 1
syslog.openlog([ident[ : 1
logoption[ : 1
facility]]]) : 1
*ident* : 3
*logoption* : 1
"LOG_USER") : 1
"syslog.openlog" : 1
syslog.closelog() : 1
"closelog()" : 1
"syslog.closelog" : 1
syslog.setlogmask(maskpri) : 1
*maskpri* : 2
"LOG_MASK(pri)" : 1
*pri* : 2
"LOG_UPTO(pri)" : 1
"syslog.setlogmask" : 1
low): : 1
"LOG_EMERG" : 1
"LOG_ALERT" : 1
"LOG_CRIT" : 1
"LOG_ERR" : 1
"LOG_WARNING" : 1
"LOG_NOTICE" : 1
"LOG_DEBUG" : 1
Facilities: : 1
"LOG_KERN" : 1
"LOG_USER" : 2
"LOG_MAIL" : 1
"LOG_DAEMON" : 1
"LOG_AUTH" : 1
"LOG_LPR" : 1
"LOG_NEWS" : 1
"LOG_UUCP" : 1
"LOG_CRON" : 1
"LOG_SYSLOG" : 1
"LOG_LOCAL0" : 1
"LOG_LOCAL7" : 1
"<syslog.h>" : 2
"LOG_AUTHPRIV" : 1
"LOG_PID" : 1
"LOG_CONS" : 1
"LOG_NDELAY" : 1
"LOG_ODELAY" : 1
"LOG_NOWAIT" : 1
"LOG_PERROR" : 1
syslog.syslog('Processing : 1
syslog.syslog(syslog.LOG_ERR : 1
'Processing : 1
syslog.openlog(logoption=syslog.LOG_PID : 1
facility=syslog.LOG_MAIL) : 1
syslog.syslog('E-mail : 1
initiated...') : 1
Lib/configparser.py : 1
value-type : 1
well-specified : 1
mini-languages : 1
ServerAliveInterval : 1
CompressionLevel : 1
ForwardX11 : 2
[forge.example] : 1
[topsecret.server.example] : 1
50022 : 2
configparser.ConfigParser() : 10
config['DEFAULT'] : 1
{'ServerAliveInterval': : 1
'45' : 1
'Compression': : 1
'yes' : 4
'CompressionLevel': : 1
'9'} : 1
config['forge.example'] : 1
config['forge.example']['User'] : 2
'hg' : 2
config['topsecret.server.example'] : 3
topsecret : 3
topsecret['Port'] : 2
'50022' : 4
topsecret['ForwardX11'] : 2
config['DEFAULT']['ForwardX11'] : 1
open('example.ini' : 1
configfile: : 2
config.write(configfile) : 2
config.sections() : 2
config.read('example.ini') : 1
['example.ini'] : 2
['forge.example' : 1
'topsecret.server.example'] : 1
'forge.example' : 1
'python.org' : 1
config['DEFAULT']['Compression'] : 1
config['forge.example']: : 1
compressionlevel : 1
serveraliveinterval : 1
forwardx11 : 1
config['forge.example']['ForwardX11'] : 1
another_config : 1
another_config.read('example.ini') : 1
another_config['topsecret.server.example']['Port'] : 3
another_config.read_string("[topsecret.server.example]\nPort=48484") : 1
'48484' : 1
another_config.read_dict({"topsecret.server.example": : 1
{"Port": : 1
21212}}) : 1
'21212' : 1
another_config['topsecret.server.example']['ForwardX11'] : 1
"ConfigParser.read()" : 1
int(topsecret['Port']) : 1
float(topsecret['CompressionLevel']) : 1
"bool('False')" : 1
"getboolean()" : 5
"'yes'"/"'no'" : 1
"'on'"/"'off'" : 1
"'true'"/"'false'" : 1
"'1'"/"'0'" : 1
topsecret.getboolean('ForwardX11') : 1
config['forge.example'].getboolean('ForwardX11') : 1
config.getboolean('forge.example' : 1
'Compression') : 1
"getint()" : 3
"getfloat()" : 3
section's : 2
topsecret.get('Port') : 1
topsecret.get('CompressionLevel') : 1
topsecret.get('Cipher') : 1
topsecret.get('Cipher' : 1
'3des-cbc') : 1
'3des-cbc' : 1
"'CompressionLevel'" : 1
"'DEFAULT'" : 1
"'topsecret.server.example'" : 1
fallback: : 1
topsecret.get('CompressionLevel' : 1
config.get('forge.example' : 1
'monster' : 3
fallback='No : 2
monsters') : 1
monsters' : 1
'BatchMode' : 1
topsecret.getboolean('BatchMode' : 2
config['DEFAULT']['BatchMode'] : 1
"[section]" : 2
"ConfigParser.SECTCRE" : 1
("#" : 1
[Simple : 1
Values] : 3
key=value : 1
keys=allowed : 1
values=allowed : 1
[All : 1
Strings] : 1
3.14159265359 : 1
[Multiline : 1
chorus: : 1
night : 1
[No : 1
key_without_value : 1
[You : 1
comments] : 1
harmful : 1
[Sections : 1
Indented] : 1
can_values_be_as_well : 1
does_that_mean_anything_special : 1
multiline_values : 1
preprocessed : 1
configparser.BasicInterpolation : 1
[Paths] : 2
home_dir: : 3
/Users : 3
my_dir: : 3
%(home_dir)s/lumberjack : 1
my_pictures: : 3
%(my_dir)s/Pictures : 1
[Escape] : 2
%% : 1
(% : 1
escaped): : 2
gain: : 1
80%% : 1
"BasicInterpolation()" : 1
"%(home_dir)s" : 1
"home_dir" : 1
("/Users" : 1
"%(my_dir)s" : 1
"/Users/lumberjack" : 1
interpolations : 3
"%(my_dir)s/Pictures" : 1
"my_pictures" : 1
"%(home_dir)s/lumberjack" : 1
"my_dir" : 1
configparser.ExtendedInterpolation : 1
"zc.buildout" : 3
"${section:option}" : 1
"section:" : 1
${home_dir}/lumberjack : 1
${my_dir}/Pictures : 2
$$ : 1
($ : 1
$$80 : 1
[Common] : 1
library_dir: : 1
/Library : 1
system_dir: : 1
/System : 1
macports_dir: : 1
/opt/local : 1
[Frameworks] : 1
${Common:system_dir}/Library/Frameworks/ : 1
[Arthur] : 1
nickname: : 1
Sheds : 1
last_name: : 1
${Common:home_dir}/twosheds : 1
python_dir: : 1
${Frameworks:path}/Python/Versions/${Frameworks:Python} : 1
"parser['section']['option']" : 1
"parser['section']" : 1
adheres : 1
parser["section"]" : 1
"optionxform"'ed : 1
parser["section"] : 2
"DEFAULTSECT" : 2
".clear()" : 1
"parser.clear()" : 1
"parser.popitem()" : 1
"parser.get(section : 1
section-level : 1
"parser.items()" : 1
*section_name* : 2
*section_proxy* : 2
DEFAULTSECT) : 1
"parser.items(section : 1
vars)" : 1
"raw=True" : 1
write-back : 1
parser.read_dict({'section1': : 1
'value1' : 1
'value2' : 1
'value3'} : 1
'section2': : 1
{'keyA': : 1
'valueA' : 1
'keyB': : 1
'valueB' : 1
'keyC': : 1
'valueC'} : 1
'section3': : 1
'bar': : 1
'z'} : 1
parser.sections() : 1
['section1' : 1
'section2' : 1
'section3'] : 1
[option : 1
parser['section3']] : 1
'baz'] : 1
skip-external-locking : 1
old_passwords : 1
ACID : 1
skip-innodb : 1
configparser.ConfigParser(allow_no_value=True) : 1
config.read_string(sample_config) : 1
config["mysqld"]["user"] : 1
config["mysqld"]["skip-bdb"] : 1
config["mysqld"]["does-not-exist"] : 1
'does-not-exist' : 1
"('=' : 1
*space_around_delimiters* : 2
"ConfigParser.write()" : 1
*comment_prefixes* : 4
"('#' : 1
';')" : 1
*inline_comment_prefixes* : 5
"comment_prefixes=('#',';')" : 1
"inline_comment_prefixes=(';',)" : 1
interpolate : 2
ExtendedInterpolation : 1
BasicInterpolation : 1
[hashes] : 1
${hash}!/usr/bin/env : 1
${hash} : 1
enabled_extension : 2
another_extension : 2
#disabled_by_comment : 1
yet_another_extension : 2
print(parser['hashes']['shebang']) : 1
print(parser['hashes']['extensions']) : 1
print(parser['hashes']['interpolation : 1
necessary']) : 1
print(parser['hashes']['even : 1
values']) : 1
"read_file()" : 3
"read_string()" : 1
"read_dict()") : 1
*empty_lines_in_values* : 3
[Section] : 1
gotcha : 1
she's : 1
"this" : 1
*default_section* : 3
"configparser.DEFAULTSECT" : 1
""DEFAULT"") : 2
""DEFAULT"" : 1
""general"" : 1
""common"" : 1
"parser_instance.default_section" : 1
"ExtendedInterpolation()" : 2
"{'decimal': : 1
decimal.Decimal}" : 1
"getdecimal()" : 2
"parser_instance.getdecimal('section' : 1
fallback=0)" : 1
"parser_instance['section'].getdecimal('key' : 1
dict-compatible : 1
ConfigParser.BOOLEAN_STATES : 1
"'yes'" : 2
"'true'" : 2
"'on'" : 2
"'no'" : 2
"'false'" : 2
"'off'" : 2
custom['section1'] : 1
{'funky': : 1
'nope'} : 1
custom['section1'].getboolean('funky') : 2
boolean: : 1
nope : 1
custom.BOOLEAN_STATES : 1
{'sure': : 1
'nope': : 1
"accept"/"reject" : 1
"enabled"/"disabled" : 1
ConfigParser.optionxform(option) : 1
[Section1] : 1
[Section2] : 1
AnotherKey : 1
typical.read_string(config) : 2
list(typical['Section1'].keys()) : 1
['key'] : 1
list(typical['Section2'].keys()) : 1
['anotherkey'] : 1
configparser.RawConfigParser() : 3
custom.optionxform : 1
custom.read_string(config) : 2
list(custom['Section1'].keys()) : 1
['Key'] : 1
list(custom['Section2'].keys()) : 1
['AnotherKey'] : 1
optionxform : 1
ConfigParser.SECTCRE : 1
""section"" : 1
larch : 2
]" : 1
[Section : 1
typical.sections() : 1
['Section : 2
custom.SECTCRE : 1
re.compile(r"\[ : 1
*(?P<header>[^]]+?) : 1
*\]") : 1
custom.sections() : 1
2'] : 1
"OPTCRE" : 1
Mainly : 1
"get"/"set" : 1
downright : 1
counterintuitive : 1
RawConfigParser's : 1
non-raw : 2
ConfigParser's : 1
config.add_section('Section1') : 1
config.set('Section1' : 6
'an_int' : 1
'15') : 1
'a_bool' : 1
'true') : 1
'a_float' : 1
'3.1415') : 1
'fun') : 1
'Python') : 1
'%(bar)s : 1
%(baz)s!') : 1
'example.cfg' : 1
open('example.cfg' : 1
config.read('example.cfg') : 2
getfloat() : 1
getboolean() : 1
a_float : 1
config.getfloat('Section1' : 1
'a_float') : 1
an_int : 1
config.getint('Section1' : 1
'an_int') : 1
print(a_float : 1
an_int) : 1
'%(bar)s' : 1
'%(baz)s' : 1
RawConfigParser() : 1
config.getboolean('Section1' : 1
'a_bool'): : 1
print(config.get('Section1' : 3
'foo')) : 4
"ConfigParser": : 1
cfg.read('example.cfg') : 1
print(cfg.get('Section1' : 8
raw=False)) : 1
fun!" : 4
raw=True)) : 1
"%(bar)s : 1
%(baz)s!" : 1
vars={'bar': : 1
'Documentation' : 1
'evil'})) : 1
fallback='Monty : 1
not.')) : 1
monsters.')) : 1
monsters." : 1
'monster')) : 1
NoOptionError : 1
fallback=None)) : 1
ConfigParsers : 1
'Life' : 2
'hard' : 1
configparser.ConfigParser({'bar': : 1
'hard'}) : 1
config.remove_option('Section1' : 2
'baz') : 1
"Life : 1
hard!" : 1
configparser.ConfigParser(defaults=None : 1
dict_type=dict : 2
allow_no_value=False : 2
delimiters=('=' : 2
comment_prefixes=('#' : 2
';') : 2
inline_comment_prefixes=None : 2
empty_lines_in_values=True : 2
default_section=configparser.DEFAULTSECT : 1
interpolation=BasicInterpolation() : 1
converters={}) : 1
accepted; : 1
"default_section" : 1
"optionxform()" : 3
"foo : 2
%(bar)s" : 1
%(BAR)s" : 1
defaults() : 1
sections() : 1
*default : 4
section* : 4
add_section(section) : 2
*section* : 16
has_section(section) : 1
acknowledged : 1
options(section) : 1
has_option(section : 1
read(filenames : 1
config.read_file(open('defaults.cfg')) : 1
config.read(['site.cfg' : 1
os.path.expanduser('~/.myapp.cfg')] : 1
encoding='cp1250') : 1
read_file(f : 1
*source*; : 1
"'<???>'" : 1
read_string(string : 1
source='<string>') : 1
"'<string>'" : 2
read_dict(dictionary : 1
source='<dict>') : 1
"<dict>" : 1
get(section : 1
raw=False : 5
vars=None[ : 4
fallback]) : 4
*DEFAULTSECT* : 1
getint(section : 1
getfloat(section : 1
getboolean(section : 1
items(raw=False : 1
vars=None) : 2
items(section : 1
DEFAULTSECT : 1
set(section : 2
"NoSectionError" : 3
write(fileobject : 1
space_around_delimiters=True) : 1
*comment_prefix* : 1
*inline_comment_prefix* : 1
remove_option(section : 1
remove_section(section) : 1
optionxform(option) : 1
*option*; : 1
sensitive: : 1
cfgparser : 1
cfgparser.optionxform : 1
filename=None) : 1
"fp.readline()" : 1
readline_generator(fp): : 1
"parser.readfp(fp)" : 1
"parser.read_file(readline_generator(fp))" : 1
configparser.MAX_INTERPOLATION_DEPTH : 1
configparser.RawConfigParser(defaults=None : 1
default_section=configparser.DEFAULTSECT[ : 1
interpolation]) : 1
"add_section" : 1
"defaults=" : 1
"ConfigParser(interpolation=None)" : 1
*internal* : 3
**Use : 1
API** : 1
configparser.Error : 1
configparser.NoSectionError : 1
configparser.DuplicateSectionError : 1
configparser.DuplicateOptionError : 1
sensitivity-related : 1
configparser.NoOptionError : 1
configparser.InterpolationError : 1
configparser.InterpolationDepthError : 1
"MAX_INTERPOLATION_DEPTH" : 1
"InterpolationError" : 3
configparser.InterpolationSyntaxError : 1
configparser.MissingSectionHeaderError : 1
configparser.ParsingError : 1
Lib/tarfile.py : 1
figures: : 1
*longname* : 1
*longlink* : 1
*sparse* : 1
fifos : 2
tarfile.open(name=None : 1
bufsize=10240 : 1
"'filemode[:compression]'" : 1
+--------------------+-----------------------------------------------+ : 15
|====================|===============================================| : 1
"'r' : 1
'r:*'" : 1
"'r:'" : 1
"'r:gz'" : 2
"'r:bz2'" : 2
"'r:xz'" : 1
"'x:'" : 1
"'x:gz'" : 2
"'x:bz2'" : 2
"'x:xz'" : 2
'a:'" : 1
"'w' : 1
'w:'" : 1
"'w:gz'" : 2
"'w:bz2'" : 2
"'w:xz'" : 2
"'a:gz'" : 1
"'a:bz2'" : 1
"'a:xz'" : 1
"CompressionError" : 1
"9") : 1
*mode*: : 1
"'filemode|[compression]'" : 1
"20 : 1
512" : 1
+---------------+----------------------------------------------+ : 10
|===============|==============================================| : 1
"'r|'" : 1
"'r|gz'" : 1
"'r|bz2'" : 1
"'r|xz'" : 1
"'w|'" : 1
"'w|gz'" : 1
"'w|bz2'" : 1
"'w|xz'" : 1
tarfile.is_tarfile(name) : 1
tarfile.TarError : 1
tarfile.ReadError : 1
tarfile.CompressionError : 1
tarfile.StreamError : 1
stream-like : 1
tarfile.ExtractError : 1
*non-fatal* : 2
"TarFile.errorlevel""== : 1
tarfile.HeaderError : 1
"TarInfo.frombuf()" : 1
tarfile.ENCODING : 1
tarfile.USTAR_FORMAT : 1
tarfile.GNU_FORMAT : 1
tarfile.PAX_FORMAT : 1
tarfile.DEFAULT_FORMAT : 1
"PAX_FORMAT" : 5
"GNU_FORMAT" : 2
Tar : 1
tarfile.TarFile(name=None : 1
format=DEFAULT_FORMAT : 1
tarinfo=TarInfo : 1
dereference=False : 1
ignore_zeros=False : 1
encoding=ENCODING : 2
errors='surrogateescape' : 1
pax_headers=None : 1
errorlevel=1) : 1
*fileobj*'s : 1
"USTAR_FORMAT" : 1
*tarinfo* : 2
*dereference* : 1
*ignore_zeros* : 1
*errorlevel* : 1
"TarError" : 1
*pax_headers* : 1
TarFile.open(...) : 1
TarFile.getmember(name) : 1
TarFile.getmembers() : 1
TarFile.getnames() : 1
"getmembers()" : 7
TarFile.list(verbose=True : 1
members=None) : 1
**ls : 1
TarFile.next() : 1
TarFile.extractall(path='.' : 1
numeric_owner=False) : 2
owner/group : 2
TarFile.extract(member : 1
path='' : 1
set_attrs=True : 1
(owner : 1
*set_attrs* : 2
TarFile.extractfile(member) : 1
TarFile.add(name : 1
recursive=True : 1
filter=None) : 1
*recursive* : 2
TarFile.addfile(tarinfo : 1
fileobj=None) : 2
"tarinfo.size" : 1
"gettarinfo()" : 2
TarFile.gettarinfo(name=None : 1
*fileobj*’s : 1
"TarInfo"’s : 1
"addfile()" : 1
TarFile.close() : 1
TarFile.pax_headers : 1
"TarFile"'s : 1
"getmember()" : 1
tarfile.TarInfo(name='') : 1
TarInfo.frombuf(buf : 1
"HeaderError" : 1
TarInfo.fromtarfile(tarfile) : 1
*tarfile* : 1
TarInfo.tobuf(format=DEFAULT_FORMAT : 1
errors='surrogateescape') : 1
TarInfo.name : 1
TarInfo.size : 1
TarInfo.mtime : 1
TarInfo.mode : 1
TarInfo.type : 1
"REGTYPE" : 1
"AREGTYPE" : 1
"LNKTYPE" : 2
"SYMTYPE" : 2
"DIRTYPE" : 1
"FIFOTYPE" : 1
"CONTTYPE" : 1
"CHRTYPE" : 1
"BLKTYPE" : 1
"GNUTYPE_SPARSE" : 1
"is*()" : 1
TarInfo.linkname : 1
TarInfo.uid : 1
TarInfo.gid : 1
TarInfo.uname : 1
TarInfo.gname : 1
TarInfo.pax_headers : 1
TarInfo.isfile() : 1
"Tarinfo" : 1
TarInfo.isreg() : 1
TarInfo.isdir() : 1
TarInfo.issym() : 1
TarInfo.islnk() : 1
TarInfo.ischr() : 1
TarInfo.isblk() : 1
TarInfo.isfifo() : 1
TarInfo.isdev() : 1
monty.tar : 5
other-dir/ : 1
<tarfile> : 8
[<output_dir>] : 2
tarfile.open("sample.tar.gz") : 2
tar.extractall() : 1
tar.close() : 5
py_files(members): : 1
os.path.splitext(tarinfo.name)[1] : 1
".py": : 1
tar.extractall(members=py_files(tar)) : 1
tarfile.open("sample.tar" : 2
"quux"]: : 2
tar.add(name) : 2
tar: : 2
tarfile.open("sample.tar.gz" : 2
"r:gz") : 1
print(tarinfo.name : 1
tarinfo.size : 1
tarinfo.isreg(): : 1
print("a : 2
file.") : 1
tarinfo.isdir(): : 1
directory.") : 1
print("something : 1
else.") : 1
"TarFile.add()": : 1
reset(tarinfo): : 1
tarinfo.uid : 1
tarinfo.gid : 1
tarinfo.gname : 1
"w:gz") : 1
tar.add("foo" : 1
filter=reset) : 1
("USTAR_FORMAT") : 1
linknames : 4
("GNU_FORMAT") : 1
GNU/Linux : 1
("PAX_FORMAT") : 1
bsdtar/libarchive : 1
*pax* : 2
*ustar* : 2
*UTF-8* : 4
Seventh : 1
miscalculated : 1
checksums : 1
conceived : 1
Nowadays : 1
non-*ASCII* : 1
autodetect : 1
Lib/calendar.py : 1
**cal** : 1
"setfirstweekday()" : 4
"Calendrical : 1
Calculations" : 1
prescribed : 1
calendar.Calendar(firstweekday=0) : 1
"Calendar" : 3
*firstweekday* : 1
"MONDAY" : 3
"SUNDAY" : 3
iterweekdays() : 1
"firstweekday" : 1
itermonthdates(year : 1
month) : 10
(1--12) : 1
itermonthdays(year : 1
"itermonthdates()" : 4
Days : 6
itermonthdays2(year : 1
itermonthdays3(year : 1
itermonthdays4(year : 1
monthdatescalendar(year : 1
Weeks : 3
monthdays2calendar(year : 1
monthdayscalendar(year : 1
yeardatescalendar(year : 1
width=3) : 4
1--7 : 1
yeardays2calendar(year : 1
"yeardatescalendar()") : 2
yeardayscalendar(year : 1
calendar.TextCalendar(firstweekday=0) : 1
"TextCalendar" : 4
formatmonth(theyear : 2
themonth : 5
w=0 : 5
l=0) : 4
*l* : 2
prmonth(theyear : 1
"formatmonth()" : 2
formatyear(theyear : 2
w=2 : 3
l=1 : 3
c=6 : 4
m=3) : 4
*m*-column : 1
pryear(theyear : 1
"formatyear()" : 2
calendar.HTMLCalendar(firstweekday=0) : 1
withyear=True) : 1
*withyear* : 1
formatyearpage(theyear : 1
width=3 : 1
css='calendar.css' : 1
*css* : 1
cascading : 1
calendar: : 1
cssclasses : 4
["mon" : 1
"tue" : 2
"wed" : 2
"thu" : 2
"fri" : 2
"sat" : 2
"sun"] : 1
["mon : 1
text-bold" : 1
"sun : 1
red"] : 1
cssclass_noday : 1
cssclasses_weekday_head : 1
"cssclasses" : 1
cssclass_month_head : 2
"formatmonthname()") : 1
""month"" : 2
cssclass_month : 2
"formatmonth()") : 1
cssclass_year : 2
"formatyear()") : 2
""year"" : 2
cssclass_year_head : 1
"cssclass_month" : 1
"cssclass_noday") : 1
"text-bold : 1
text-red" : 1
customized: : 1
CustomHTMLCal(calendar.HTMLCalendar): : 1
[style : 1
text-nowrap" : 1
calendar.HTMLCalendar.cssclasses] : 1
"text-center : 2
month-head" : 1
"text-italic : 1
lead" : 1
calendar.LocaleTextCalendar(firstweekday=0 : 1
calendar.LocaleHTMLCalendar(firstweekday=0 : 1
"formatweekday()" : 1
"formatmonthname()" : 1
"LC_TIME" : 1
calendar.setfirstweekday(weekday) : 1
Sunday) : 1
"TUESDAY" : 1
"WEDNESDAY" : 1
"THURSDAY" : 1
"FRIDAY" : 1
"SATURDAY" : 1
Sunday: : 1
calendar.setfirstweekday(calendar.SUNDAY) : 1
calendar.firstweekday() : 1
calendar.isleap(year) : 1
calendar.leapdays(y1 : 1
*y2* : 2
calendar.weekday(year : 1
("1970"--...) : 1
("1"--"12") : 1
("1"--"31") : 1
calendar.weekheader(n) : 1
calendar.monthrange(year : 1
calendar.monthcalendar(year : 1
week; : 1
calendar.prmonth(theyear : 1
"month()" : 1
calendar.month(theyear : 1
calendar.prcal(year : 1
l=0 : 1
"calendar()" : 1
calendar.calendar(year : 1
3-column : 1
calendar.timegm(tuple) : 1
others' : 1
calendar.day_name : 1
calendar.day_abbr : 1
calendar.month_name : 1
"month_name[0]" : 1
calendar.month_abbr : 1
"month_abbr[0]" : 1
calendar.MONDAY : 1
calendar.TUESDAY : 1
calendar.WEDNESDAY : 1
calendar.THURSDAY : 1
calendar.FRIDAY : 1
calendar.SATURDAY : 1
calendar.SUNDAY : 1
Lib/inspect.py : 1
+-------------+---------------------+-----------------------------+ : 67
|=============|=====================|=============================| : 1
__func__ : 1
__self__ : 2
__code__ : 1
__defaults__ : 1
__kwdefaults__ : 1
__globals__ : 1
""return"" : 2
tb_lineno : 1
tb_next : 1
f_back : 1
f_builtins : 1
f_code : 1
f_globals : 1
f_lasti : 1
f_trace : 1
co_argcount : 1
co_cellvars : 1
(referenced : 2
co_filename : 1
co_firstlineno : 1
co_flags : 1
"CO_*" : 1
co_freevars : 1
co_posonlyargcount : 1
co_kwonlyargcount : 1
co_name : 1
co_qualname : 1
co_names : 1
co_nlocals : 1
co_stacksize : 1
co_varnames : 1
gi_frame : 1
gi_running : 1
cr_frame : 1
cr_running : 1
cr_code : 1
cr_origin : 1
ys.set_coroutine_origin_tr : 1
acking_depth()" : 1
generators.The : 1
inspect.getmembers(object[ : 1
predicate]) : 2
argument—which : 1
member—is : 1
metaclass' : 1
inspect.getmembers_static(object[ : 1
getmembers : 2
AttributeError) : 2
inspect.getmodulename(path) : 1
"importlib.machinery.all_suffixes()" : 1
inspect.ismodule(object) : 1
inspect.isclass(object) : 1
inspect.ismethod(object) : 1
inspect.isfunction(object) : 1
*lambda* : 1
inspect.isgeneratorfunction(object) : 1
inspect.isgenerator(object) : 1
inspect.iscoroutinefunction(object) : 1
inspect.iscoroutine(object) : 1
inspect.isawaitable(object) : 1
@types.coroutine : 1
gen_coro(): : 1
isawaitable(gen()) : 1
isawaitable(gen_coro()) : 1
inspect.isasyncgenfunction(object) : 1
inspect.isasyncgenfunction(agen) : 1
inspect.isasyncgen(object) : 1
inspect.istraceback(object) : 1
inspect.isframe(object) : 1
inspect.iscode(object) : 1
inspect.isbuiltin(object) : 1
inspect.ismethodwrapper(object) : 1
inspect.isroutine(object) : 1
inspect.isabstract(object) : 1
inspect.ismethoddescriptor(object) : 1
"ismethod()" : 2
"isclass()" : 1
"isfunction()" : 1
"isbuiltin()" : 1
"int.__add__" : 1
"ismethoddescriptor()" : 1
inspect.isdatadescriptor(object) : 1
getsets : 3
(properties : 1
inspect.isgetsetdescriptor(object) : 1
inspect.ismemberdescriptor(object) : 1
inspect.getdoc(object) : 1
"cleandoc()" : 1
inspect.getcomments(object) : 1
inspect.getfile(object) : 1
inspect.getmodule(object) : 1
inspect.getsourcefile(object) : 1
inspect.getsourcelines(object) : 1
inspect.getsource(object) : 1
inspect.cleandoc(doc) : 1
inspect.signature(callable : 1
follow_wrapped=True : 2
eval_str=False) : 2
"callable": : 1
b:int : 2
signature(foo) : 3
str(sig) : 1
**kwargs)' : 1
str(sig.parameters['b']) : 1
'b:int' : 1
sig.parameters['b'].annotation : 1
"eval_str" : 5
call(s) : 1
"follow_wrapped" : 1
"callable" : 1
("callable.__wrapped__" : 1
callables.) : 1
introspectable : 1
inspect.Signature(parameters=None : 1
return_annotation=Signature.empty) : 1
"parameters" : 2
*return_annotation* : 1
"Signature.replace()" : 1
return_annotation : 2
"Signature.empty" : 2
bind(*args : 1
"BoundArguments" : 2
bind_partial(*args : 1
"Signature.bind()" : 4
(mimics : 1
replace(*[ : 2
parameters][ : 1
return_annotation]) : 1
"return_annotation" : 1
test(a : 2
signature(test) : 2
new_sig : 1
sig.replace(return_annotation="new : 1
anno") : 1
str(new_sig) : 1
anno'" : 1
from_callable(obj : 1
localns=None) : 1
"follow_wrapped=False" : 1
unwrapping : 3
"Signature": : 1
MySignature(Signature): : 1
MySignature.from_callable(min) : 1
isinstance(sig : 1
MySignature) : 1
inspect.Parameter(name : 1
default=Parameter.empty : 1
annotation=Parameter.empty) : 1
"Parameter.replace()" : 1
"Parameter.empty" : 3
"Parameter.KEYWORD_ONLY") : 1
+--------------------------+------------------------------------------------+ : 6
|==========================|================================================| : 1
*POSITIONAL_ONLY* : 1
*POSITIONAL_OR_KEYWORD* : 1
*VAR_POSITIONAL* : 1
*KEYWORD_ONLY* : 1
*VAR_KEYWORD* : 1
d=10): : 2
sig.parameters.values(): : 2
(param.kind : 1
param.KEYWORD_ONLY : 1
param.default : 1
param.empty): : 1
print('Parameter:' : 1
param) : 1
Parameter: : 1
kind.description : 1
Parameter.kind : 1
print(param.kind.description) : 1
kind][ : 1
annotation]) : 1
or/and : 1
Parameter('foo' : 1
Parameter.KEYWORD_ONLY : 1
str(param) : 1
'foo=42' : 2
str(param.replace()) : 1
'param' : 1
str(param.replace(default=Parameter.empty : 1
annotation='spam')) : 1
"foo:'spam'" : 1
"kind" : 1
"POSITIONAL_ONLY" : 1
"Signature.bind_partial()" : 3
"Signature.parameters" : 1
apply_defaults() : 1
variable-positional : 1
("*args") : 1
variable-keyword : 1
("**kwargs") : 2
()} : 2
sig.bind(10 : 1
b=20) : 1
test(*ba.args : 1
**ba.kwargs) : 1
inspect.getclasstree(classes : 1
unique=False) : 1
*unique* : 1
inspect.getfullargspec(func) : 1
"FullArgSpec(args : 1
varkw : 2
kwonlydefaults : 1
annotations)" : 1
*varargs* : 2
*varkw* : 1
*n*-tuple : 1
*kwonlyargs* : 2
*kwonlydefaults* : 1
inspect.getargvalues(frame) : 1
"ArgInfo(args : 1
inspect.formatargvalues(args[ : 1
formatarg : 1
formatvarargs : 1
formatvarkw : 1
formatvalue]) : 1
format* : 1
inspect.getmro(cls) : 1
cls's : 2
inspect.getcallargs(func : 1
(3,)} : 1
inspect.getclosurevars(func) : 1
"ClosureVars(nonlocals : 1
unbound)" : 1
*nonlocals* : 1
*builtins* : 1
inspect.unwrap(func : 1
stop=None) : 1
inspect.get_annotations(obj : 1
"get_annotations()" : 1
un-stringized : 1
dict; : 1
"dict.get()" : 1
eval_str : 2
"get_annotations" : 3
contingent : 1
"type(obj)": : 1
"obj.__dict__" : 1
"sys.modules[obj.__module__].__dict__" : 1
"obj.__globals__" : 1
"functools.update_wrapper()") : 1
inspect.FrameInfo : 1
code_context : 6
"code_context" : 2
tuple*) : 2
inspect.Traceback : 1
Keeping : 1
lifespan : 1
occurs.Though : 1
handle_stackframe_without_leak(): : 1
inspect.currentframe() : 2
"frame.clear()" : 1
inspect.getframeinfo(frame : 1
context=1) : 3
inspect.getouterframes(frame : 1
*frame*; : 1
tuples* : 4
"FrameInfo(frame : 4
index)" : 4
inspect.getinnerframes(traceback : 1
traceback's : 1
*traceback*; : 1
inspect.stack(context=1) : 1
caller; : 2
inspect.trace(context=1) : 1
inspect.getattr_static(obj : 1
getattr : 2
_foo: : 1
['foo'] : 3
slot_descriptor : 1
type(_foo.foo) : 1
getset_descriptor : 2
type(type(open(__file__)).name) : 1
wrapper_descriptor : 1
type(str.__dict__['__add__']) : 1
descriptor_types : 1
(slot_descriptor : 1
wrapper_descriptor) : 1
getattr_static(some_object : 1
type(result) : 1
descriptor_types: : 1
result.__get__() : 1
inspect.getgeneratorstate(generator) : 1
GEN_CREATED: : 1
GEN_RUNNING: : 1
GEN_SUSPENDED: : 1
GEN_CLOSED: : 1
inspect.getcoroutinestate(coroutine) : 1
coroutine-like : 1
"cr_running" : 1
"cr_frame" : 1
CORO_CREATED: : 1
CORO_RUNNING: : 1
CORO_SUSPENDED: : 1
CORO_CLOSED: : 1
inspect.getgeneratorlocals(generator) : 1
inspect.getcoroutinelocals(coroutine) : 1
inspect.CO_OPTIMIZED : 1
inspect.CO_NEWLOCALS : 1
inspect.CO_VARARGS : 1
("*args"-like) : 1
inspect.CO_VARKEYWORDS : 1
("**kwargs"-like) : 1
inspect.CO_NESTED : 1
inspect.CO_GENERATOR : 1
inspect.CO_COROUTINE : 1
inspect.CO_ITERABLE_COROUTINE : 1
inspect.CO_ASYNC_GENERATOR : 1
--details : 1
Lib/code.py : 1
code.InteractiveInterpreter(locals=None) : 1
namespace); : 1
"'__name__'" : 1
"'__console__'" : 1
"'__doc__'" : 1
code.InteractiveConsole(locals=None : 1
filename='<console>') : 1
Closely : 2
"InteractiveInterpreter" : 2
code.interact(banner=None : 1
readfunc=None : 1
local=None : 1
exitmsg=None) : 2
"InteractiveConsole" : 3
*readfunc* : 1
"InteractiveConsole.raw_input()" : 1
"interact()" : 2
*banner* : 2
*exitmsg* : 4
code.compile_command(source : 1
"'<input>'"; : 1
symbol)") : 1
incomplete; : 1
InteractiveInterpreter.runsource(source : 1
incorrect; : 1
"compile_command()" : 3
("SyntaxError" : 1
"showsyntaxerror()" : 1
"runsource()" : 4
complete; : 1
"runcode()" : 1
"SystemExit") : 1
InteractiveInterpreter.runcode(code) : 1
"showtraceback()" : 1
InteractiveInterpreter.showsyntaxerror(filename=None) : 1
stuffed : 1
InteractiveInterpreter.showtraceback() : 1
InteractiveInterpreter.write(data) : 1
InteractiveConsole.interact(banner=None : 1
interaction; : 1
close!) : 1
InteractiveConsole.push(line) : 1
reset; : 1
"runsource()") : 1
InteractiveConsole.resetbuffer() : 1
InteractiveConsole.raw_input(prompt='') : 1
"sys.stdin"; : 1
Lib/py_compile.py : 1
py_compile.PyCompileError : 1
py_compile.compile(file : 1
cfile=None : 1
dfile=None : 1
doraise=False : 1
invalidation_mode=PycInvalidationMode.TIMESTAMP : 1
quiet=0) : 1
*cfile* : 6
*dfile* : 1
*doraise* : 6
"PyCompileError" : 2
computed) : 1
"PycInvalidationMode" : 1
"PycInvalidationMode.CHECKED_HASH" : 2
"PycInvalidationMode.TIMESTAMP" : 1
3147**-compliant : 1
("'o'" : 1
creation/writing : 1
and-move : 1
py_compile.PycInvalidationMode : 1
TIMESTAMP : 1
CHECKED_HASH : 1
UNCHECKED_HASH : 1
"CHECKED_HASH" : 1
".pycs" : 1
<file> : 1
<fileN> : 1
************************************************************************************ : 1
Lib/multiprocessing/shared_memory.py : 1
multicore : 1
(SMP) : 1
life-cycle : 1
"SharedMemoryManager" : 6
style" : 2
"distributed : 1
multiprocessing.shared_memory.SharedMemory(name=None : 1
size=0) : 1
unlink() : 3
relinquishing : 1
shm_a : 2
shared_memory.SharedMemory(create=True : 2
size=10) : 1
type(shm_a.buf) : 1
'memoryview'> : 1
shm_a.buf : 1
len(buffer) : 1
buffer[:4] : 1
bytearray([22 : 1
55]) : 1
buffer[4] : 1
shm_b : 2
shared_memory.SharedMemory(shm_a.name) : 1
shm_b.buf[:5]) : 1
array('b' : 1
[22 : 1
100]) : 1
shm_b.buf[:5] : 1
b'howdy' : 2
bytes(shm_a.buf[:5]) : 1
shm_b.close() : 1
shm_a.close() : 1
shm_a.unlink() : 1
"numpy.ndarray" : 1
shells: : 1
np : 2
np.array([1 : 1
8]) : 3
shm : 2
size=a.nbytes) : 1
np.ndarray(a.shape : 1
dtype=a.dtype : 1
buffer=shm.buf) : 1
b[:] : 1
array([1 : 2
type(b) : 1
'numpy.ndarray'> : 2
shm.name : 1
'psm_21467_46075' : 1
existing_shm : 1
shared_memory.SharedMemory(name='psm_21467_46075') : 1
a.shape : 1
(6,) : 1
a.dtype : 1
np.int64 : 1
np.ndarray((6,) : 1
dtype=np.int64 : 1
buffer=existing_shm.buf) : 1
c[-1] : 2
888 : 1
888]) : 2
Unnecessary; : 2
existing_shm.close() : 1
shm.close() : 1
shm.unlink() : 1
multiprocessing.managers.SharedMemoryManager([address[ : 1
"SharedMemory.unlink()" : 1
("ShareableList") : 1
"multiprocessing.managers.BaseManager" : 1
SharedMemory(size) : 1
ShareableList(sequence) : 1
"SharedMemoryManager": : 1
smm : 1
SharedMemoryManager() : 2
smm.start() : 1
sl : 7
smm.ShareableList(range(4)) : 1
ShareableList([0 : 2
name='psm_6572_7512') : 1
raw_shm : 2
smm.SharedMemory(size=128) : 1
another_sl : 3
smm.ShareableList('alpha') : 1
ShareableList(['a' : 1
name='psm_6572_12221') : 1
smm.shutdown() : 1
depicts : 2
smm: : 1
smm.ShareableList(range(2000)) : 1
Process(target=do_work : 2
args=(sl : 2
1000)) : 1
2000)) : 1
p1.start() : 1
p2.start() : 1
p1.join() : 1
p2.join() : 1
total_result : 1
sum(sl) : 1
multiprocessing.shared_memory.ShareableList(sequence=None : 1
storable : 1
10M : 2
each) : 2
count(value) : 1
index(value) : 1
shared_memory.ShareableList(['howdy' : 1
b'HoWdY' : 1
-273.154 : 2
type(entry) : 1
'bytes'> : 1
'float'> : 1
'NoneType'> : 2
'bool'> : 1
'int'>] : 1
a[2] : 7
-78.5 : 2
'dry : 3
ice' : 3
'larger : 1
space' : 1
a.index(42) : 1
a.count(b'howdy') : 1
a.count(b'HoWdY') : 1
a.shm.close() : 1
a.shm.unlink() : 1
shared_memory.ShareableList(range(5)) : 1
shared_memory.ShareableList(name=b.shm.name) : 1
name='...') : 1
-999 : 2
b[-1] : 1
b.shm.close() : 1
c.shm.close() : 1
c.shm.unlink() : 1
"SharedMemory") : 1
alive): : 1
shared_memory.ShareableList(range(10)) : 1
list(sl) : 2
deserialized_sl : 1
pickle.loads(pickle.dumps(sl)) : 1
list(deserialized_sl) : 2
sl[0] : 1
deserialized_sl[1] : 1
sl.shm.close() : 1
sl.shm.unlink() : 1
Recording : 1
MagicMock(name='method') : 1
real.method(3 : 1
name='method()' : 1
("real.method" : 1
"ProductionClass().method" : 1
"something" : 1
ProductionClass: : 3
self.something(1 : 1
something(self : 1
real.something : 1
real.something.assert_called_once_with(1 : 1
"ProductionClass" : 1
"closer" : 1
closer(self : 1
something): : 1
something.close() : 1
real.closer(mock) : 1
mock.close.assert_called_with() : 1
*calling : 1
"mock : 2
module.Foo() : 1
instance.method() : 1
patch('module.Foo') : 1
result' : 2
some_function() : 1
MagicMock(name='foo') : 1
name='foo' : 1
mock.method : 1
name='foo.method' : 1
mock.attribute.method(10 : 1
x=53) : 1
name='mock.attribute.method()' : 1
call.attribute.method(10 : 2
x=53)] : 2
important: : 1
m.factory(important=True).deliver() : 1
name='mock.factory().deliver()' : 1
m.mock_calls[-1] : 1
call.factory(important=False).deliver() : 1
mock.method.return_value : 1
mock.x : 2
"mock.connection.cursor().execute("SELECT : 1
1")" : 1
call" : 1
mock.connection.cursor.return_value : 1
cursor.execute.return_value : 1
mock.connection.cursor().execute("SELECT : 1
call.connection.cursor().execute("SELECT : 1
1").call_list() : 1
[call.connection.cursor() : 1
call.connection.cursor().execute('SELECT : 1
1')] : 1
".call_list()" : 1
Mock(side_effect=Exception('Boom!')) : 1
MagicMock(side_effect=[4 : 1
vals : 1
{(1 : 1
side_effect(*args): : 1
vals[args] : 1
mock(2 : 1
mock.__aiter__.return_value : 1
mock] : 1
mock_instance : 2
MagicMock(AsyncContextManager()) : 1
mock_instance.__aenter__.assert_awaited_once() : 1
mock_instance.__aexit__.assert_awaited_once() : 1
couples : 1
"some_method" : 3
mock.old_method() : 1
'old_method' : 1
"package.module.Class.attribute" : 1
'patch.object' : 1
"patch.object": : 1
SomeClass.attribute : 5
'attribute' : 2
sentinel.attribute) : 5
sentinel.attribute : 3
@patch('package.module.attribute' : 1
package.module : 3
"builtins") : 1
"patch.object()": : 1
MagicMock(return_value=sentinel.file_handle) : 1
patch('builtins.open' : 1
mock): : 1
open('filename' : 1
mock.assert_called_with('filename' : 1
sentinel.file_handle : 1
"incorrect : 1
'dotted' : 1
@patch('package.module.ClassName.attribute' : 1
ClassName : 1
ClassName.attribute : 1
self.assertEqual(SomeClass.attribute : 1
MyTest('test_something').test_something() : 3
test_something(self : 2
mock_method): : 1
SomeClass.static_method() : 1
mock_method.assert_called_with() : 1
@patch('package.module.ClassName1') : 1
@patch('package.module.ClassName2') : 1
MockClass1): : 1
self.assertIs(package.module.ClassName1 : 1
MockClass1) : 1
self.assertIs(package.module.ClassName2 : 1
MockClass2) : 1
"test_module.ClassName2" : 1
"patch.object" : 2
"patch.dict" : 2
'method') : 1
mock_method.return_value : 1
real.method(1 : 1
mock_method.assert_called_with(1 : 1
mock().foo(a=2 : 1
b=3) : 2
name='mock().foo()' : 1
mock.return_value.foo.assert_called_with(a=2 : 1
testable : 1
place.. : 1
self.backend : 1
BackendProvider() : 1
self.backend.get_endpoint('foobar').create_call('spam' : 1
'eggs').start_call() : 2
"BackendProvider" : 1
"method()" : 1
"backend" : 1
"Something" : 1
"start_call" : 2
'file-like' : 1
mock_backend.get_endpoint.return_value.create_call.return_value.start_call.return_value : 1
mock_response : 2
Mock(spec=open) : 1
mock_backend : 2
{'get_endpoint.return_value.create_call.return_value.start_call.return_value': : 1
mock_response} : 1
mock_backend.configure_mock(**config) : 1
backend" : 1
something.backend : 1
something.method() : 1
"call.call_list()" : 1
call.get_endpoint('foobar').create_call('spam' : 1
call_list : 2
chained.call_list() : 1
mock_backend.mock_calls : 1
"datetime.date.today()" : 1
monkey-patch : 1
"patch : 1
decorator" : 1
patch('mymodule.date') : 1
mock_date: : 1
mock_date.today.return_value : 1
date(2010 : 2
mock_date.side_effect : 1
**kw: : 1
date(*args : 1
mymodule.date.today() : 1
mymodule.date(2009 : 1
date(2009 : 1
*uses* : 1
"date(...)" : 1
anti-pattern : 1
"mock_date" : 1
("call_count" : 1
blog : 1
iter(self): : 1
list(foo.iter()) : 1
(implicit : 1
"foo.iter()" : 1
mock_foo : 5
mock_foo.iter.return_value : 1
iter([1 : 1
list(mock_foo.iter()) : 1
"test": : 1
@patch('mymodule.SomeClass') : 1
test_one(self : 1
MockSomeClass): : 2
self.assertIs(mymodule.SomeClass : 2
MockSomeClass) : 2
test_two(self : 1
not_a_test(self): : 1
MyTest('test_one').test_one() : 1
MyTest('test_two').test_two() : 1
MyTest('test_two').not_a_test() : 1
self.patcher : 1
patch('mymodule.foo') : 2
self.mock_foo : 2
self.patcher.start() : 1
test_foo(self): : 4
self.assertIs(mymodule.foo : 2
self.mock_foo) : 2
self.patcher.stop() : 1
MyTest('test_foo').run() : 3
tearDown : 1
Whilst : 1
*unbound : 1
(patching : 1
nuisance : 1
auto-created : 1
wanted: : 1
patch.object(Foo : 1
foo.foo() : 1
mock_foo.assert_called_once_with(foo) : 1
mock.foo_bar.return_value : 1
mock.foo_bar('baz' : 1
spam='eggs') : 4
mock.foo_bar.assert_called_with('baz' : 1
"call_count" : 1
mock.foo_bar.assert_called_once_with('baz' : 2
mock.foo_bar() : 1
"assert_called_with" : 4
*most : 1
recent* : 1
"call_args_list": : 2
mock(4 : 1
call(4 : 2
'mymodule': : 1
frob(val): : 1
grob(val): : 1
frob : 1
frob(val) : 1
val.clear() : 1
"grob" : 1
"frob" : 1
patch('mymodule.frob') : 2
mock_frob: : 2
{6} : 3
mymodule.grob(val) : 2
mock_frob.assert_called_with({6}) : 1
(({6},) : 1
((set(),) : 1
copy_call_args(mock): : 1
deepcopy(args) : 2
deepcopy(kwargs) : 2
new_mock(*args : 1
copy_call_args(mock_frob) : 1
new_mock.assert_called_with({6}) : 1
new_mock.call_args : 1
call({6}) : 1
"copy_call_args" : 1
"new_mock" : 1
mock({6}) : 1
mock(set()) : 2
"copy.deepcopy()") : 1
CopyingMock(MagicMock): : 1
super().__call__(*args : 1
CopyingMock(return_value=None) : 1
c(arg) : 1
arg.add(1) : 1
c.assert_called_with(set()) : 1
c.assert_called_with(arg) : 1
mock({1}) : 1
<CopyingMock : 1
name='mock.foo' : 3
"CopyingMock" : 2
patch('mymodule.Foo') : 1
patch('mymodule.Bar') : 1
mock_bar: : 1
patch('mymodule.Spam') : 1
mock_spam: : 1
mymodule.Foo : 6
mymodule.Bar : 2
mock_bar : 4
mymodule.Spam : 2
mock_spam : 3
MyTest('test_foo').test_foo() : 1
"cleanup" : 1
"create_patch" : 1
create_patch(self : 1
patch(name) : 1
self.create_patch('mymodule.Foo') : 1
self.create_patch('mymodule.Bar') : 1
self.create_patch('mymodule.Spam') : 1
my_dict : 2
getitem(name): : 1
my_dict[name] : 2
setitem(name : 1
val): : 5
mock.__getitem__.side_effect : 2
getitem : 2
mock.__setitem__.side_effect : 2
setitem : 2
mock.__getitem__ : 1
Mock(side_effect=getitem) : 1
mock.__setitem__ : 1
Mock(side_effect=setitem) : 1
*third* : 1
MagicMock(spec_set=dict) : 1
mock['a'] : 1
mock['c'] : 1
mock['d'] : 3
mock['b'] : 2
mock.__getitem__.call_args_list : 1
[call('a') : 1
call('c') : 1
call('d') : 1
call('b') : 1
call('d')] : 1
mock.__setitem__.call_args_list : 1
[call('b' : 1
call('d' : 1
'eggs')] : 1
'eggs'} : 1
MyMock(MagicMock): : 1
has_been_called(self): : 1
self.called : 1
mymock : 3
MyMock(return_value=None) : 1
<MyMock : 3
mymock.has_been_called() : 2
mymock() : 1
"Mocks" : 1
"MagicMocks" : 1
mymock.foo : 2
mymock.foo.has_been_called() : 2
mymock.foo() : 1
adaptor : 1
flavours) : 1
"_get_child_mock" : 1
"sub-mocks" : 1
Subclass(MagicMock): : 1
_get_child_mock(self : 1
MagicMock(**kwargs) : 1
Subclass() : 1
isinstance(mymock : 1
Subclass) : 3
isinstance(mymock.foo : 1
isinstance(mymock() : 1
*usually* : 1
(refactor : 1
"up : 1
costs" : 1
delaying : 1
*temporarily* : 1
"patcher.stop()" : 1
{'fooble': : 2
mock}): : 2
fooble : 3
fooble.blob() : 1
name='mock.blob()' : 1
mock.blob.assert_called_once_with() : 1
fooble" : 1
blob.blip() : 1
name='mock.blob.blip()' : 1
mock.blob.blip.assert_called_once_with() : 1
{'package': : 1
'package.module': : 1
mock.module} : 1
fooble() : 1
name='mock.module.fooble()' : 1
mock.module.fooble.assert_called_once_with() : 1
parent: : 1
manager.foo : 1
manager.bar : 1
mock_foo.something() : 1
name='mock.foo.something()' : 1
mock_bar.other.thing() : 1
name='mock.bar.other.thing()' : 1
manager.mock_calls : 3
[call.foo.something() : 2
call.bar.other.thing()] : 2
expected_calls : 2
patch('mymodule.Class1') : 1
MockClass1: : 1
patch('mymodule.Class2') : 1
MockClass2: : 1
manager.attach_mock(MockClass1 : 1
'MockClass1') : 1
manager.attach_mock(MockClass2 : 1
'MockClass2') : 1
MockClass1().foo() : 1
MockClass2().bar() : 1
name='mock.MockClass1().foo()' : 1
name='mock.MockClass2().bar()' : 1
[call.MockClass1() : 1
call.MockClass1().foo() : 1
call.MockClass2() : 1
call.MockClass2().bar()] : 1
(constructed : 1
m().foo().bar().baz() : 1
name='mock().foo().bar().baz()' : 1
m.one().two().three() : 1
name='mock.one().two().three()' : 1
call.one().two().three().call_list() : 1
m.assert_has_calls(calls) : 1
"m.one().two().three()" : 1
"any_order=True" : 1
"assert_has_calls": : 1
m.two(2 : 1
m.seven(7) : 1
m.fifty('50') : 1
[call.fifty('50') : 1
call(1) : 1
call.seven(7)] : 1
m.assert_has_calls(calls : 1
matchers : 1
matcher : 4
sufficient: : 1
mock(Foo(1 : 1
mock.assert_called_with(Foo(1 : 1
call(<__main__.Foo : 2
0x...>) : 2
compare(self : 1
type(other): : 1
other.a: : 1
other.b: : 1
Matcher: : 1
some_obj): : 1
self.compare : 1
self.some_obj : 1
some_obj : 1
self.compare(self.some_obj : 1
match_foo : 1
Matcher(compare : 2
Foo(1 : 1
mock.assert_called_with(match_foo) : 1
"Matcher" : 2
match_wrong : 1
Foo(3 : 1
mock.assert_called_with(match_wrong) : 1
((<Matcher : 1
0x...>,) : 2
((<Foo : 1
PyHamcrest : 1
(hamcrest.library.integration.match_equality) : 1
Lib/email/__init__.py : 1
2821**) : 1
MIME-related : 1
subcomponents : 2
another.) : 1
"content : 1
types" : 1
(non-compliance : 1
sub-components : 1
(unicode : 1
"EmailMessage"/"EmailPolicy" : 1
(Post : 1
Office : 1
(Internet : 1
(Net : 1
Lib/hashlib.py : 1
SHA1 : 2
SHA224 : 1
SHA384 : 1
SHA512 : 1
180-2) : 1
RSA's : 1
1321**) : 1
"secure : 1
"message : 1
digest" : 1
adler32 : 1
weaknesses : 1
*hash* : 1
"sha256()" : 2
*digest* : 5
2047 : 2
"sha1()" : 1
"sha224()" : 1
"sha384()" : 1
"sha512()" : 1
"md5()" : 1
"FIPS : 2
compliant" : 2
(Keccak) : 1
function.Hashlib : 1
"b"Nobody : 1
spammish : 4
repetition"": : 1
m.update(b"Nobody : 1
inspects") : 1
m.update(b" : 1
repetition") : 2
m.digest() : 1
b'\x03\x1e\xdd}Ae\x15\x93\xc5\xfe\\\x00o\xa5u+7\xfd\xdf\xf7\xbcN\x84:\xa6\xaf\x0c\x95\x0fK\x94\x06' : 1
m.hexdigest() : 2
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406' : 3
condensed: : 1
hashlib.sha256(b"Nobody : 1
repetition").hexdigest() : 1
hashlib.new(name[ : 1
usedforsecurity=True) : 3
OpenSSL: : 1
hashlib.new('sha256') : 1
h.update(b"Nobody : 1
h.hexdigest() : 7
Hashlib : 1
"algorithms_guaranteed" : 1
(thanks : 1
OpenSSL) : 1
hash.digest_size : 1
hash.block_size : 1
hash.name : 1
inception : 1
hash.update(data) : 1
"m.update(a); : 2
m.update(b)" : 2
"m.update(a+b)" : 1
hash.digest() : 1
hash.hexdigest() : 1
hash.copy() : 1
("clone") : 2
length_in_bits//2 : 1
shake.digest(length) : 1
shake.hexdigest(length) : 1
hashlib.file_digest(fileobj : 1
SocketIO : 1
open(hashlib.__file__ : 1
hashlib.file_digest(f : 1
"sha256") : 1
digest.hexdigest() : 1
io.BytesIO(b"somedata") : 1
mac1 : 2
hmac.HMAC(b"key" : 2
digestmod=hashlib.sha512) : 2
hashlib.file_digest(buf : 1
mac1) : 1
mac2 : 1
b"somedata" : 1
mac1.digest() : 1
mac2.digest() : 1
stretching : 1
"sha1(password)" : 1
hashlib.pbkdf2_hmac(hash_name : 1
dklen=None) : 1
*hash_name* : 2
*iterations* : 1
*Appendix : 1
A.2.2* : 1
NIST-SP-800-132 : 1
stackexchange : 1
pbkdf2 : 1
*dklen* : 3
pbkdf2_hmac : 1
our_app_iters : 1
500_000 : 1
dk : 1
pbkdf2_hmac('sha256' : 1
b'password' : 1
b'bad : 1
salt'*2 : 1
our_app_iters) : 1
dk.hex() : 1
'15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9' : 1
*pbkdf2_hmac* : 2
hashlib.scrypt(password : 1
maxmem=0 : 1
dklen=64) : 1
7914** : 1
CPU/Memory : 1
*maxmem* : 1
MiB) : 1
7693** : 1
**BLAKE2b** : 1
**BLAKE2s** : 1
8- : 1
**keyed : 1
mode** : 1
HMAC) : 1
**salted : 1
hashing** : 2
**personalization** : 1
**tree : 1
hashlib.blake2b(data=b'' : 1
digest_size=64 : 1
key=b'' : 2
salt=b'' : 2
person=b'' : 2
fanout=1 : 2
leaf_size=0 : 2
node_offset=0 : 4
node_depth=0 : 4
inner_size=0 : 2
last_node=False : 2
hashlib.blake2s(data=b'' : 1
digest_size=32 : 1
BLAKE2b : 11
BLAKE2s : 6
*digest_size*: : 1
*key*: : 1
BLAKE2s) : 3
*salt*: : 1
randomized : 2
*person*: : 1
personalization : 2
+---------+-------------+----------+-----------+-------------+ : 3
digest_size : 1
len(key) : 1
len(salt) : 1
len(person) : 1
|=========|=============|==========|===========|=============| : 1
"b'salt'" : 1
"b'salt\x00'" : 1
*key*.) : 1
*fanout*: : 1
fanout : 1
*depth*: : 1
*leaf_size*: : 1
"2**32-1" : 1
*node_offset*: : 1
"2**64-1" : 1
"2**48-1" : 1
*node_depth*: : 1
*inner_size*: : 1
*last_node*: : 1
[image: : 1
parameters.][image] : 1
2.10 : 1
blake2b.SALT_SIZE : 1
blake2s.SALT_SIZE : 1
Salt : 1
blake2b.PERSON_SIZE : 1
blake2s.PERSON_SIZE : 1
blake2b.MAX_KEY_SIZE : 1
blake2s.MAX_KEY_SIZE : 1
blake2b.MAX_DIGEST_SIZE : 1
blake2s.MAX_DIGEST_SIZE : 1
("blake2b()" : 1
"blake2s()") : 1
hex-encoded : 1
blake2b() : 2
h.update(b'Hello : 1
'6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183' : 3
blake2b(b'Hello : 1
world').hexdigest() : 1
"hash.update()" : 1
hash: : 1
[b'Hello' : 1
b'world'] : 1
h.update(item) : 1
20-byte : 1
digests: : 1
blake2b(digest_size=20) : 1
h.update(b'Replacing : 1
function') : 3
'd24f26cf8de66472d58d4e1b1774b4c9158b1f4c' : 1
h.digest_size : 1
len(h.digest()) : 1
(shorter : 1
hashes); : 1
blake2s : 2
blake2b(digest_size=10).hexdigest() : 1
'6fa1d8fcfd719046d762' : 1
blake2b(digest_size=11).hexdigest() : 1
'eb6ec15daf9546254f0809' : 1
blake2s(digest_size=10).hexdigest() : 1
'1bf21a98c78a1c376ae9' : 1
blake2s(digest_size=11).hexdigest() : 1
'567004bf96e4a25773ebf4' : 1
(HMAC) : 1
prefix-MAC : 1
indifferentiability : 1
BLAKE : 2
(hex-encoded) : 1
"b'message : 1
data'" : 1
"b'pseudorandom : 1
key'": : 1
blake2b(key=b'pseudorandom : 1
key' : 3
digest_size=16) : 1
h.update(b'message : 1
data') : 1
'3d363ff7401e02026f4a4687d4863ced' : 1
symmetrically : 1
SECRET_KEY : 1
b'pseudorandomly : 1
AUTH_SIZE : 1
sign(cookie): : 1
blake2b(digest_size=AUTH_SIZE : 1
key=SECRET_KEY) : 1
h.update(cookie) : 1
h.hexdigest().encode('utf-8') : 1
verify(cookie : 3
sig): : 1
good_sig : 1
sign(cookie) : 2
compare_digest(good_sig : 1
sig) : 3
b'user-alice' : 1
print("{0},{1}".format(cookie.decode('utf-8') : 1
sig)) : 1
user-alice,b'43b3c982cf697e0c5ab22172d1ca7421' : 1
verify(b'user-bob' : 1
b'0102030405060708090a0b0c0d0e0f00') : 1
hmac.new(b'secret : 1
digestmod=hashlib.blake2s) : 1
m.update(b'message') : 1
'e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142' : 1
preparer : 3
signer : 3
$1,000,000 : 1
$10) : 1
resistance : 2
attacking : 1
(NIST : 1
SP-800-106 : 1
"Randomized : 1
Signatures") : 1
*Salted : 1
hashing* : 1
general- : 1
salt1 : 1
os.urandom(blake2b.SALT_SIZE) : 2
blake2b(salt=salt1) : 1
h1.update(msg) : 1
salt2 : 1
blake2b(salt=salt2) : 1
h2.update(msg) : 1
h1.digest() : 1
h2.digest() : 1
Skein : 2
seriously : 1
Personalizing : 1
summarily : 1
personalized : 1
*person* : 1
FILES_HASH_PERSON : 1
b'MyApp : 2
Hash' : 2
BLOCK_HASH_PERSON : 1
blake2b(digest_size=32 : 3
person=FILES_HASH_PERSON) : 1
h.update(b'the : 2
content') : 2
'20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4' : 1
person=BLOCK_HASH_PERSON) : 1
'cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3' : 1
b64decode : 1
b64encode : 1
orig_key : 1
b64decode(b'Rm5EPJai72qcK3RGBpW3vPNfZy5OZothY+kHY6h21KM=') : 1
enc_key : 1
blake2s(key=orig_key : 2
person=b'kEncrypt').digest() : 1
mac_key : 1
person=b'kMAC').digest() : 1
print(b64encode(enc_key).decode('utf-8')) : 1
rbPb15S/Z9t+agffno5wuhB77VbRi6F9Iv2qIxU7WHw= : 1
print(b64encode(mac_key).decode('utf-8')) : 1
G9GtHFE1YluXY1zWPlYk1e/nWfu0WSEb0KRcjhDeP/o= : 1
64-byte : 1
32-byte : 1
digest: : 1
FANOUT : 1
DEPTH : 1
LEAF_SIZE : 1
INNER_SIZE : 1
bytearray(6000) : 1
h00 : 1
blake2b(buf[0:LEAF_SIZE] : 1
fanout=FANOUT : 3
depth=DEPTH : 3
leaf_size=LEAF_SIZE : 3
inner_size=INNER_SIZE : 3
last_node=False) : 1
h01 : 1
blake2b(buf[LEAF_SIZE:] : 1
node_offset=1 : 1
last_node=True) : 2
h10 : 1
node_depth=1 : 1
h10.update(h00.digest()) : 1
h10.update(h01.digest()) : 1
h10.hexdigest() : 1
'3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa' : 1
*Jean-Philippe : 2
Aumasson* : 2
*Samuel : 2
Neves* : 2
*Zooko : 1
Wilcox-O'Hearn* : 1
*Christian : 2
Winnerlein* : 1
finalist : 1
*Luca : 1
Henzen* : 1
*Willi : 1
Meier* : 1
*Raphael : 1
C.-W : 1
Phan* : 1
ChaCha : 1
*Daniel : 1
Bernstein* : 1
pyblake2 : 2
*Dmitry : 2
Chestnykh* : 2
Heimes* : 1
dedication : 1
author(s) : 1
CC0 : 1
Dedication : 2
https://creativecommons.org/publicdomain/zero/1.0/ : 1
helped : 1
Commons : 1
Universal: : 1
*Alexandr : 1
Sokolovskiy* : 1
https://blake2.net : 1
https://csrc.nist.gov/csrc/media/publications/fips/180/2/archive/20 : 1
02-08-01/documents/fips180-2.pdf : 1
180-2 : 1
https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptogra : 1
phic_hash_algorithms : 1
https://www.ietf.org/rfc/rfc8018.txt : 1
PKCS : 1
Password-Based : 2
Cryptography : 1
https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication8 : 1
00-132.pdf : 1
NIST : 1
Derivation : 1
Lib/getpass.py : 1
getpass.getpass(prompt='Password: : 1
stream=None) : 1
"'Password: : 1
("/dev/tty") : 1
getpass() : 1
"GetPassWarning" : 1
getpass.GetPassWarning : 1
getpass.getuser() : 1
"login : 1
"USER" : 1
"LNAME" : 1
"os.getlogin()" : 1
"__iand__()" : 1
code.See : 1
__debug__ : 1
(assignments : 1
quit(code=None) : 1
exit(code=None) : 1
quit() : 1
license() : 1
pager-like : 1
Lib/hmac.py : 1
hmac.new(key : 1
digestmod='') : 1
"update(msg)" : 1
"hashlib.new()" : 1
awkwardness : 1
hmac.digest(key : 1
digest) : 1
"HMAC(key : 1
digest).digest()" : 1
HMAC.update(msg) : 1
"m.update(a : 1
HMAC.digest() : 1
*digest_size* : 1
HMAC.hexdigest() : 1
HMAC.copy() : 1
HMAC.digest_size : 1
HMAC.block_size : 1
HMAC.name : 1
"hmac-md5" : 1
"HMAC.digest_cons" : 1
"HMAC.inner" : 1
"HMAC.outer" : 1
hmac.compare_digest(a : 1
circuiting : 1
"HMAC.hexdigest()") : 1
*b*—but : 1
"traditional" : 1
"sys.stdout"; : 1
MyTestCase1(unittest.TestCase): : 1
test_feature_one(self): : 1
test_feature_two(self): : 1
MyTestCase2(unittest.TestCase): : 1
MyTestCase1 : 1
followed: : 1
Whitebox : 1
(examining : 1
Blackbox : 1
(testing : 1
Exhaust : 1
crop : 1
anomalous : 1
maximize : 1
Minimize : 1
TestFuncAcceptsSequencesMixin: : 1
mySuperWhammyFunction : 1
test_func(self): : 1
self.func(self.arg) : 1
AcceptLists(TestFuncAcceptsSequencesMixin : 1
unittest.TestCase): : 3
AcceptStrings(TestFuncAcceptsSequencesMixin : 1
AcceptTuples(TestFuncAcceptsSequencesMixin : 1
"Mixin" : 1
Driven : 1
Beck : 1
test** : 2
"test.regrtest"; : 1
test.regrtest** : 1
"test_main()" : 2
unittest.TestLoader.loadTestsFromModule : 1
"test_main" : 2
(**python : 1
test_spam**) : 1
-uall** : 1
-uall,-audio,-largefile** : 1
"audio" : 1
"largefile" : 1
-h** : 1
**make : 1
**rt.bat** : 1
test.support.TestFailed : 1
"unittest.TestCase"'s : 1
test.support.ResourceDenied : 1
test.support.verbose : 1
test.support.is_jython : 1
test.support.LOOPBACK_TIMEOUT : 1
failure: : 1
test.support.INTERNET_TIMEOUT : 1
"transient_internet()" : 1
test.support.SHORT_TIMEOUT : 1
"too : 2
"--timeout" : 2
test.support.LONG_TIMEOUT : 1
test.support.PGO : 1
test.support.PIPE_MAX_SIZE : 1
test.support.SOCK_MAX_SIZE : 1
test.support.TEST_SUPPORT_DIR : 1
test.support.TEST_HOME_DIR : 1
test.support.TEST_DATA_DIR : 1
test.support.MAX_Py_ssize_t : 1
test.support.max_memuse : 1
"set_memlimit()" : 2
"MAX_Py_ssize_t" : 2
test.support.real_max_memuse : 1
test.support.MISSING_C_DOCSTRINGS : 1
--without-doc-strings" : 1
"HAVE_DOCSTRINGS" : 2
test.support.HAVE_DOCSTRINGS : 1
-OO" : 1
"MISSING_C_DOCSTRINGS" : 1
test.support.ALWAYS_EQ : 1
test.support.NEVER_EQ : 1
"ALWAYS_EQ") : 1
test.support.LARGEST : 1
test.support.SMALLEST : 1
test.support.is_resource_enabled(resource) : 1
test.support.python_is_optimized() : 1
"-O0" : 1
test.support.with_pymalloc() : 1
"_testcapi.WITH_PYMALLOC" : 1
test.support.requires(resource : 1
"ResourceDenied" : 3
test.support.sortdict(dict) : 1
test.support.findfile(filename : 1
subdir=None) : 1
test.support.match_test(test) : 1
"set_match_tests()" : 1
test.support.set_match_tests(accept_patterns=None : 1
ignore_patterns=None) : 1
test.support.run_unittest(*classes) : 1
test_main(): : 1
support.run_unittest(__name__) : 1
test.support.run_doctest(module : 1
verbosity=None : 1
"optionflags" : 1
test.support.setswitchinterval(interval) : 1
test.support.check_impl_detail(**guards) : 1
check_impl_detail() : 1
check_impl_detail(jython=True) : 1
check_impl_detail(cpython=False) : 1
Everywhere : 1
test.support.set_memlimit(limit) : 1
"max_memuse" : 1
"real_max_memuse" : 1
test.support.record_original_stdout(stdout) : 1
test.support.get_original_stdout() : 1
"record_original_stdout()" : 1
test.support.args_from_interpreter_flags() : 1
test.support.optim_args_from_interpreter_flags() : 1
test.support.captured_stdin() : 1
test.support.captured_stdout() : 1
test.support.captured_stderr() : 1
captured_stdout() : 1
captured_stderr() : 1
print("error" : 1
stdout.getvalue() : 1
"hello\n" : 1
stderr.getvalue() : 1
"error\n" : 1
captured_stdin() : 1
stdin: : 1
stdin.write('hello\n') : 1
stdin.seek(0) : 1
self.assertEqual(captured : 1
test.support.disable_faulthandler() : 1
test.support.gc_collect() : 1
test.support.disable_gc() : 1
test.support.swap_attr(obj : 1
new_val) : 2
swap_attr(obj : 1
5): : 2
"obj.attr" : 1
test.support.swap_item(obj : 1
swap_item(obj : 1
"obj["item"]" : 1
test.support.flush_std_streams() : 1
test.support.print_warning(msg) : 1
"f"Warning : 1
{msg}"" : 1
""Warning : 1
test.support.wait_process(pid : 1
*exitcode* : 2
("SHORT_TIMEOUT" : 1
test.support.calcobjsize(fmt) : 1
test.support.calcvobjsize(fmt) : 1
test.support.checksizeof(test : 1
"sys.getsizeof" : 1
@test.support.anticipate_failure(condition) : 1
"unittest.expectedFailure()" : 1
test.support.system_must_validate_cert(f) : 1
@test.support.run_with_locale(catstr : 1
*locales) : 1
resetting : 2
*catstr* : 1
""LC_ALL"") : 1
*locales* : 1
@test.support.run_with_tz(tz) : 1
@test.support.requires_freebsd_version(*min_version) : 1
@test.support.requires_linux_version(*min_version) : 1
@test.support.requires_mac_version(*min_version) : 1
@test.support.requires_IEEE_754 : 1
@test.support.requires_zlib : 1
@test.support.requires_gzip : 1
@test.support.requires_bz2 : 1
@test.support.requires_lzma : 1
@test.support.requires_resource(resource) : 1
@test.support.requires_docstrings : 1
@test.support.cpython_only : 1
@test.support.impl_detail(msg=None : 1
**guards) : 1
"check_impl_detail()" : 1
*guards* : 1
@test.support.no_tracing : 1
@test.support.refcount_test : 1
@test.support.bigmemtest(size : 1
memuse : 1
dry_run=True) : 1
bigmem : 1
test- : 1
units.) : 1
*memuse* : 1
"@bigmemtest(size=_4G : 1
memuse=2)" : 1
"-M" : 1
@test.support.bigaddrspacetest : 1
test.support.check_syntax_error(testcase : 1
errtext='' : 2
lineno=None : 1
offset=None) : 2
*testcase* : 2
*errtext* : 2
test.support.open_urlresource(url : 1
"TestFailed" : 1
test.support.reap_children() : 1
sub-processes : 1
(zombies) : 1
hog : 1
test.support.get_attribute(obj : 1
test.support.catch_unraisable_exception() : 1
("cm.unraisable.exc_value") : 1
("cm.unraisable.object") : 1
support.catch_unraisable_exception() : 1
cm.unraisable : 2
test.support.load_package_tests(pkg_dir : 1
*pkg_dir* : 2
load_package_tests : 1
load_tests(*args): : 1
load_package_tests(os.path.dirname(__file__) : 1
test.support.detect_api_mismatch(ref_api : 1
other_api : 1
ignore=()) : 1
*ref_api* : 1
*other_api* : 1
test.support.patch(test_instance : 1
object_to_patch : 1
attr_name : 1
new_value) : 1
*object_to_patch.attr_name* : 1
*new_value* : 1
*test_instance* : 1
*object_to_patch* : 2
test.support.run_in_subinterp(code) : 1
test.support.check_free_after_iterating(test : 1
args=()) : 1
test.support.missing_compiler_executable(cmd_names=[]) : 1
*cmd_names* : 2
test.support.check__all__(test_case : 1
name_of_module=None : 1
extra=() : 1
not_exported=()) : 1
*name_of_module* : 1
"_csv") : 1
"public" : 1
*not_exported* : 1
MiscTestCase(unittest.TestCase): : 1
test__all__(self): : 2
support.check__all__(self : 2
foo) : 1
OtherTestCase(unittest.TestCase): : 1
{'BAR_CONST' : 1
'FOO_CONST'} : 1
not_exported : 1
{'baz'} : 1
_bar : 1
'_bar') : 1
extra=extra : 1
not_exported=not_exported) : 1
test.support.skip_if_broken_multiprocessing_synchronize() : 1
test.support.check_disallow_instantiation(test_case : 1
test.support.adjust_int_max_str_digits(max_digits) : 1
test.support.SuppressCrashReport : 1
SetErrorMode : 1
"resource.setrlimit()" : 1
"resource.RLIMIT_CORE"'s : 1
coredump : 1
test.support.SaveSignals : 1
save(self) : 1
restore(self) : 1
test.support.Matcher : 1
matches(self : 1
match_value(self : 1
(*dv*) : 1
(*v*) : 1
test.support.BasicTestRunner : 1
test.support.socket_helper.IPV6_ENABLED : 1
test.support.socket_helper.find_unused_port(family=socket.AF_INET : 1
socktype=socket.SOCK_STREAM) : 1
"0.0.0.0") : 1
eliciting : 1
"bind_port()" : 2
"-accept" : 1
openssl's : 1
s_server : 1
"find_unused_port()" : 1
test.support.socket_helper.bind_port(sock : 1
host=HOST) : 1
"sock.family" : 1
multicasting : 1
"SO_EXCLUSIVEADDRUSE" : 1
host/port : 1
test.support.socket_helper.bind_unix_socket(sock : 1
@test.support.socket_helper.skip_unless_bind_unix_socket : 1
test.support.socket_helper.transient_internet(resource_name : 1
timeout=30.0 : 1
errnos=()) : 1
************************************************************************* : 2
test.support.script_helper.interpreter_requires_environment() : 1
"sys.executable : 1
"@unittest.skipIf()" : 1
"assert_python*()" : 1
("-E") : 1
testsuite : 1
"PYTHONUSERSITE" : 1
test.support.script_helper.run_python_until_end(*args : 1
**env_vars) : 3
*env_vars* : 4
"__isolated" : 1
"__cleanenv" : 1
"__cwd" : 1
test.support.script_helper.assert_python_ok(*args : 1
("rc : 2
stderr)" : 2
*__cleanenv* : 1
*__isolated* : 1
test.support.script_helper.assert_python_failure(*args : 1
test.support.script_helper.spawn_python(*args : 1
test.support.script_helper.kill_python(p) : 1
test.support.script_helper.make_script(script_dir : 1
script_basename : 2
omit_suffix=False) : 1
*script_dir* : 1
*script_basename* : 2
*omit_suffix* : 1
test.support.script_helper.make_zip_script(zip_dir : 1
zip_basename : 2
script_name : 1
name_in_zip=None) : 1
*zip_dir* : 2
*zip_basename* : 2
*name_in_zip* : 1
"(full : 1
test.support.script_helper.make_pkg(pkg_dir : 1
init_source='') : 1
*init_source* : 1
test.support.script_helper.make_zip_pkg(zip_dir : 1
pkg_name : 1
compiled=False) : 1
*compiled* : 1
**************************************************************************************** : 1
test.support.bytecode_helper.BytecodeTestCase(unittest.TestCase) : 1
BytecodeTestCase.get_disassembly_as_string(co) : 1
BytecodeTestCase.assertInBytecode(x : 1
argval=_UNSPECIFIED) : 2
*opname* : 2
BytecodeTestCase.assertNotInBytecode(x : 1
test.support.threading_helper.join_thread(thread : 1
@test.support.threading_helper.reap_threads : 1
test.support.threading_helper.start_threads(threads : 1
unlock=None) : 1
*unlock* : 1
"threading.Event.set()" : 1
"start_threads" : 1
test.support.threading_helper.threading_cleanup(*original_values) : 1
*original_values* : 1
test.support.threading_helper.threading_setup() : 1
test.support.threading_helper.wait_threads_exit(timeout=None) : 1
test.support.threading_helper.catch_threading_exception() : 1
threading_helper.catch_threading_exception() : 1
test.support.os_helper.FS_NONASCII : 1
test.support.os_helper.SAVEDCWD : 1
test.support.os_helper.TESTFN : 1
(removed) : 1
test.support.os_helper.TESTFN_NONASCII : 1
"FS_NONASCII" : 1
test.support.os_helper.TESTFN_UNENCODABLE : 1
test.support.os_helper.TESTFN_UNDECODABLE : 1
test.support.os_helper.TESTFN_UNICODE : 1
test.support.os_helper.EnvironmentVarGuard : 1
querying/modifying : 1
test.support.os_helper.FakePath(path) : 1
EnvironmentVarGuard.set(envvar : 1
"envvar" : 2
EnvironmentVarGuard.unset(envvar) : 1
test.support.os_helper.can_symlink() : 1
test.support.os_helper.can_xattr() : 1
xattr : 2
test.support.os_helper.change_cwd(path : 1
test.support.os_helper.create_empty_file(filename) : 1
test.support.os_helper.fd_count() : 1
test.support.os_helper.fs_is_case_insensitive(directory) : 1
test.support.os_helper.make_bad_fd() : 1
test.support.os_helper.rmdir(filename) : 1
test.support.os_helper.rmtree(path) : 1
@test.support.os_helper.skip_unless_symlink : 1
@test.support.os_helper.skip_unless_xattr : 1
test.support.os_helper.temp_cwd(name='tempcwd' : 1
(CWD) : 1
CWD : 2
test.support.os_helper.temp_dir(path=None : 1
test.support.os_helper.temp_umask(umask) : 1
test.support.os_helper.unlink(filename) : 1
test.support.import_helper.forget(module_name) : 1
test.support.import_helper.import_fresh_module(name : 1
fresh=() : 1
blocked=() : 1
deprecated=False) : 1
*fresh* : 2
*blocked* : 2
*deprecated* : 2
py_warnings : 1
import_fresh_module('warnings' : 2
blocked=['_warnings']) : 1
c_warnings : 1
fresh=['_warnings']) : 1
test.support.import_helper.import_module(name : 1
deprecated=False : 1
required_on=()) : 1
*required_on* : 1
test.support.import_helper.modules_setup() : 1
test.support.import_helper.modules_cleanup(oldmodules) : 1
*oldmodules* : 1
test.support.import_helper.unload(name) : 1
test.support.import_helper.make_legacy_pyc(source) : 1
3147/488 : 1
test.support.import_helper.CleanImport(*module_names) : 1
CleanImport('foo'): : 1
importlib.import_module('foo') : 1
test.support.import_helper.DirsOnSysPath(*paths) : 1
test.support.warnings_helper.ignore_warnings(* : 1
"warnings.simplefilter('ignore' : 1
category=category)" : 1
@warning_helper.ignore_warnings(category=DeprecationWarning) : 1
test_suppress_warning(): : 1
test.support.warnings_helper.check_no_resource_warning(testcase) : 1
test.support.warnings_helper.check_syntax_warning(testcase : 1
lineno=1 : 1
test.support.warnings_helper.check_warnings(*filters : 1
quiet=True) : 2
"warnings.catch_warnings(record=True)" : 1
"check_warnings" : 1
"("message : 1
regexp" : 1
WarningCategory)" : 1
check_warnings(("" : 1
Warning) : 1
"WarningRecorder" : 1
check_warnings(("assertion : 1
SyntaxWarning) : 1
UserWarning)): : 1
exec('assert(False : 1
"Hey!")') : 1
warnings.warn(UserWarning("Hide : 1
me!")) : 1
check_warnings(quiet=True) : 1
warnings.warn("foo") : 1
str(w.args[0]) : 2
warnings.warn("bar") : 1
str(w.warnings[0].args[0]) : 1
str(w.warnings[1].args[0]) : 1
w.reset() : 1
len(w.warnings) : 1
test.support.warnings_helper.WarningsRecorder : 1
Lib/cmd.py : 1
"Cmd" : 7
cmd.Cmd(completekey='tab' : 1
stdout=None) : 1
"Cmd"'s : 1
*completekey* : 3
"use_rawinput" : 1
Cmd.cmdloop(intro=None) : 1
Repeatedly : 1
intro : 3
"intro" : 1
**bash**-like : 1
history-list : 1
"'EOF'" : 1
"do_foo()" : 1
"do_help()" : 3
"do_shell()" : 1
"postcmd()" : 3
"complete_foo()" : 1
*begidx* : 2
*endidx* : 2
"help_bar()" : 1
"do_bar()" : 1
"help_*()" : 3
docstrings) : 1
Cmd.onecmd(str) : 1
"precmd()" : 3
Cmd.emptyline() : 1
Cmd.default(line) : 1
Cmd.completedefault(text : 1
begidx : 1
endidx) : 1
command-specific : 1
"complete_*()" : 1
Cmd.columnize(list : 1
displaywidth=80) : 1
Cmd.precmd(line) : 1
"Cmd"; : 4
"onecmd()" : 2
re-write : 1
Cmd.postcmd(stop : 1
"postcmd()"; : 1
*stop*; : 1
Cmd.preloop() : 1
"cmdloop()" : 5
Cmd.postloop() : 1
Cmd.prompt : 1
Cmd.identchars : 1
Cmd.lastcmd : 1
Cmd.cmdqueue : 1
cmdqueue : 1
Cmd.intro : 1
Cmd.doc_header : 1
Cmd.misc_header : 1
Cmd.undoc_header : 1
Cmd.ruler : 1
help-message : 1
ruler : 1
Cmd.use_rawinput : 1
"sys.stdout.write()" : 1
"sys.stdin.readline()" : 1
command-history : 1
keystrokes.) : 1
"do_forward()" : 1
playback : 5
"do_playback()" : 1
"cmdqueue" : 1
playback: : 1
TurtleShell(cmd.Cmd): : 1
'Welcome : 1
commands.\n' : 1
'(turtle) : 1
do_forward(self : 1
'Move : 2
distance: : 2
FORWARD : 2
forward(*parse(arg)) : 1
do_right(self : 1
'Turn : 2
20' : 1
right(*parse(arg)) : 1
do_left(self : 1
90' : 1
left(*parse(arg)) : 1
do_goto(self : 1
GOTO : 1
200' : 1
goto(*parse(arg)) : 1
do_home(self : 1
HOME' : 1
do_circle(self : 1
'Draw : 1
circle(*parse(arg)) : 1
do_position(self : 1
'Print : 2
POSITION' : 1
print('Current : 2
%d\n' : 2
position()) : 1
do_heading(self : 1
HEADING' : 1
(heading(),)) : 1
do_color(self : 1
'Set : 1
COLOR : 1
color(arg.lower()) : 1
do_undo(self : 1
'Undo : 1
action(s): : 1
UNDO' : 1
do_reset(self : 1
center: : 1
RESET' : 1
do_bye(self : 1
'Stop : 1
BYE' : 1
print('Thank : 1
Turtle') : 1
bye() : 1
do_record(self : 1
RECORD : 1
rose.cmd' : 2
do_playback(self : 1
'Playback : 1
PLAYBACK : 1
open(arg) : 1
self.cmdqueue.extend(f.read().splitlines()) : 1
precmd(self : 1
line): : 1
line.lower() : 1
'playback' : 1
file=self.file) : 1
self.file: : 1
self.file.close() : 1
parse(arg): : 1
'Convert : 2
tuple' : 1
tuple(map(int : 1
arg.split())) : 1
TurtleShell().cmdloop() : 1
facility: : 1
Welcome : 1
(turtle) : 35
<topic>): : 1
spiral.cmd : 2
Lib/telnetlib.py : 1
854** : 2
"arpa/telnet.h" : 2
"TELOPT_" : 1
IAC : 5
DONT : 1
DO : 1
WONT : 1
SE : 1
(Subnegotiation : 2
End) : 1
Operation) : 1
DM : 1
Mark) : 1
BRK : 1
(Break) : 1
(Interrupt : 1
AO : 1
(Abort : 1
AYT : 1
(Are : 1
There) : 1
EC : 1
(Erase : 2
Character) : 1
EL : 1
Line) : 1
GA : 1
(Go : 1
Ahead) : 1
SB : 1
Begin) : 1
telnetlib.Telnet(host=None : 1
port=0[ : 2
"read_*()" : 1
Telnet('localhost' : 1
tn: : 1
tn.interact() : 1
Telnet.read_until(expected : 1
*expected* : 1
Telnet.read_all() : 1
Telnet.read_some() : 1
Telnet.read_very_eager() : 1
(eager) : 1
midst : 3
Telnet.read_eager() : 1
Telnet.read_lazy() : 1
(lazy) : 1
Telnet.read_very_lazy() : 1
lazy) : 1
Telnet.read_sb_data() : 1
SB/SE : 1
(suboption : 1
begin/end) : 1
"SE" : 1
Telnet.open(host : 1
"telnetlib.Telnet.open" : 1
Telnet.msg(msg : 1
Telnet.set_debuglevel(debuglevel) : 1
Telnet.close() : 1
Telnet.get_socket() : 1
Telnet.fileno() : 1
Telnet.write(buffer) : 1
"telnetlib.Telnet.write" : 1
Telnet.interact() : 1
Telnet.mt_interact() : 1
Multithreaded : 1
Telnet.expect(list : 1
(regex : 1
uncompiled : 1
(byte : 1
matches; : 1
happened) : 1
".*") : 1
Telnet.set_option_negotiation_callback(callback) : 1
callback(telnet : 1
(DO/DONT/WILL/WONT) : 1
input("Enter : 1
tn : 1
telnetlib.Telnet(HOST) : 1
tn.read_until(b"login: : 1
tn.write(user.encode('ascii') : 1
b"\n") : 2
tn.read_until(b"Password: : 1
tn.write(password.encode('ascii') : 1
tn.write(b"ls\n") : 1
tn.write(b"exit\n") : 1
print(tn.read_all().decode('ascii')) : 1
Lib/abc.py : 1
3119**; : 1
ABCs.) : 1
ABCs; : 1
MyABC(ABC): : 2
precautions : 1
MyABC(metaclass=ABCMeta): : 1
abc.ABCMeta : 1
(Method : 1
Order) : 1
register(subclass) : 1
subclass" : 1
MyABC.register(tuple) : 1
issubclass(tuple : 1
MyABC) : 2
isinstance(() : 1
"get_cache_token()" : 1
__subclasshook__(subclass) : 1
(Must : 1
ABC.) : 1
get_iterator(self): : 2
iter(self) : 1
MyIterable(ABC): : 1
self.__iter__() : 1
__subclasshook__(cls : 1
C): : 1
MyIterable: : 1
any("__iter__" : 1
B.__dict__ : 1
C.__mro__): : 1
MyIterable.register(Foo) : 1
"get_iterator()" : 1
"__subclasshook__()" : 1
"get_iterator" : 1
"abstractmethod()" : 9
"update_abstractmethods()" : 1
inheritance; : 1
C(ABC): : 5
my_abstract_method(self : 1
arg1): : 1
my_abstract_classmethod(cls : 2
my_abstract_staticmethod(arg3): : 1
my_abstract_property(self): : 2
@my_abstract_property.setter : 1
my_abstract_property(self : 1
_get_x(self): : 1
_set_x(self : 1
property(_get_x : 1
_set_x) : 1
compose : 1
Descriptor: : 1
__isabstractmethod__(self): : 1
any(getattr(f : 1
'__isabstractmethod__' : 1
(self._fget : 1
self._fset : 1
self._fdel)) : 1
super-call : 1
@abc.abstractstaticmethod : 1
my_abstract_staticmethod(arg): : 1
@abc.abstractproperty : 1
"property.getter()" : 1
"property.setter()" : 1
"property.deleter()" : 1
@C.x.setter : 1
abc.get_cache_token() : 1
"ABCMeta.register()" : 1
abc.update_abstractmethods(cls) : 1
*cls*'s : 1
Lib/msilib/__init__.py : 1
(".msi") : 1
"cabinet" : 1
(".cab") : 1
".cab" : 1
"msilib") : 1
msilib.FCICreate(cabname : 1
*cabname* : 1
MSZIP : 1
msilib.UuidCreate() : 1
"UuidCreate()" : 1
"UuidToString()" : 1
msilib.OpenDatabase(path : 1
persist) : 1
MsiOpenDatabase : 1
*persist* : 1
"MSIDBOPEN_CREATEDIRECT" : 1
"MSIDBOPEN_CREATE" : 1
"MSIDBOPEN_DIRECT" : 1
"MSIDBOPEN_READONLY" : 1
"MSIDBOPEN_TRANSACT" : 1
"MSIDBOPEN_PATCHFILE" : 1
msilib.CreateRecord(count) : 1
"MSICreateRecord()" : 1
msilib.init_database(name : 1
ProductName : 1
ProductCode : 1
ProductVersion : 1
Manufacturer) : 1
*schema* : 2
*ProductName* : 1
*ProductCode* : 1
*ProductVersion* : 1
*Manufacturer* : 1
"tables" : 1
"_Validation_records" : 1
"msilib.schema" : 1
msilib.add_data(database : 1
records) : 1
"'Feature'" : 1
"'File'" : 1
"'Component'" : 1
"'Dialog'" : 1
"'Control'" : 1
msilib.Binary(filename) : 1
"add_data()" : 1
msilib.add_tables(database : 1
*tables* : 2
msilib.add_stream(database : 1
"_Stream" : 1
msilib.gen_uuid() : 1
hexdigits : 1
FCICreate : 1
UuidCreate : 1
UuidToString : 1
Database.OpenView(sql) : 1
"MSIDatabaseOpenView()" : 1
Database.Commit() : 1
"MSIDatabaseCommit()" : 1
Database.GetSummaryInformation(count) : 1
"MsiGetSummaryInformation()" : 1
Database.Close() : 1
"MsiCloseHandle()" : 1
MSIDatabaseOpenView : 1
MSIDatabaseCommit : 1
MSIGetSummaryInformation : 1
MsiCloseHandle : 1
View.Execute(params) : 1
"MSIViewExecute()" : 1
View.GetColumnInfo(kind) : 1
"MsiViewGetColumnInfo()" : 1
"MSICOLINFO_NAMES" : 1
"MSICOLINFO_TYPES" : 1
View.Fetch() : 1
"MsiViewFetch()" : 1
View.Modify(kind : 1
"MsiViewModify()" : 1
"MSIMODIFY_SEEK" : 1
"MSIMODIFY_REFRESH" : 1
"MSIMODIFY_INSERT" : 1
"MSIMODIFY_UPDATE" : 1
"MSIMODIFY_ASSIGN" : 1
"MSIMODIFY_REPLACE" : 1
"MSIMODIFY_MERGE" : 1
"MSIMODIFY_DELETE" : 1
"MSIMODIFY_INSERT_TEMPORARY" : 1
"MSIMODIFY_VALIDATE" : 1
"MSIMODIFY_VALIDATE_NEW" : 1
"MSIMODIFY_VALIDATE_FIELD" : 1
"MSIMODIFY_VALIDATE_DELETE" : 1
View.Close() : 1
"MsiViewClose()" : 1
MsiViewExecute : 1
MSIViewGetColumnInfo : 1
MsiViewFetch : 1
MsiViewModify : 1
MsiViewClose : 1
SummaryInformation.GetProperty(field) : 1
"MsiSummaryInfoGetProperty()" : 1
"PID_CODEPAGE" : 1
"PID_TITLE" : 1
"PID_SUBJECT" : 1
"PID_AUTHOR" : 1
"PID_KEYWORDS" : 1
"PID_COMMENTS" : 1
"PID_TEMPLATE" : 1
"PID_LASTAUTHOR" : 1
"PID_REVNUMBER" : 1
"PID_LASTPRINTED" : 1
"PID_CREATE_DTM" : 1
"PID_LASTSAVE_DTM" : 1
"PID_PAGECOUNT" : 1
"PID_WORDCOUNT" : 1
"PID_CHARCOUNT" : 1
"PID_APPNAME" : 1
"PID_SECURITY" : 1
SummaryInformation.GetPropertyCount() : 1
"MsiSummaryInfoGetPropertyCount()" : 1
SummaryInformation.SetProperty(field : 1
"MsiSummaryInfoSetProperty()" : 1
"GetProperty()" : 1
SummaryInformation.Persist() : 1
"MsiSummaryInfoPersist()" : 1
MsiSummaryInfoGetProperty : 1
MsiSummaryInfoGetPropertyCount : 1
MsiSummaryInfoSetProperty : 1
MsiSummaryInfoPersist : 1
Record.GetFieldCount() : 1
"MsiRecordGetFieldCount()" : 1
Record.GetInteger(field) : 1
Record.GetString(field) : 1
Record.SetString(field : 1
"MsiRecordSetString()" : 1
Record.SetStream(field : 1
"MsiRecordSetStream()" : 1
Record.SetInteger(field : 1
"MsiRecordSetInteger()" : 1
Record.ClearData() : 1
"MsiRecordClearData()" : 1
MsiRecordGetFieldCount : 1
MsiRecordSetString : 1
MsiRecordSetStream : 1
MsiRecordSetInteger : 1
MsiRecordClearData : 1
"MSIError"; : 1
msilib.CAB(name) : 1
"CAB" : 1
"Files" : 1
append(full : 1
logical) : 1
*full* : 1
*logical* : 2
commit(database) : 1
"Media" : 1
msilib.Directory(database : 1
cab : 2
basedir : 1
default[ : 1
componentflags]) : 1
"start_component()" : 2
DefaultDir : 1
*componentflags* : 1
start_component(component=None : 1
feature=None : 1
uuid=None) : 1
KeyPath : 1
add_file(file : 1
src=None : 1
glob(pattern : 1
exclude=None) : 1
remove_pyc() : 1
FeatureComponents : 1
msilib.Feature(db : 1
level=1 : 1
directory=None : 1
attributes=0) : 1
"Feature" : 1
*parent.id* : 1
"Directory" : 1
set_current() : 1
msilib.Control(dlg : 1
*dlg* : 1
control's : 1
event(event : 1
condition=1 : 1
ordering=None) : 1
"ControlEvent" : 1
mapping(event : 1
"EventMapping" : 1
condition(action : 1
"ControlCondition" : 1
msilib.RadioButtonGroup(dlg : 1
add(name : 1
*height* : 1
msilib.Dialog(db : 1
cancel) : 1
control(name : 1
control_next : 1
help) : 1
text(name : 1
bitmap(name : 1
"Bitmap" : 1
line(name : 1
"Line" : 1
pushbutton(name : 1
next_control) : 3
"PushButton" : 1
radiogroup(name : 1
"RadioButtonGroup" : 1
checkbox(name : 1
"CheckBox" : 1
ControlCondition : 1
ControlEvent : 1
EventMapping : 1
RadioButton : 1
msilib.schema : 1
*_Validation_records* : 1
msilib.sequence : 1
tables: : 1
*AdminExecuteSequence* : 1
*AdminUISequence* : 1
*AdvtExecuteSequence* : 1
*InstallExecuteSequence* : 1
*InstallUISequence* : 1
msilib.text : 1
UIText : 1
ActionText : 1
Third-parties : 1
"asyncio.BaseEventLoop" : 2
*private* : 2
"loop._make_socket_transport()" : 1
"_make_socket_transport()" : 1
loops* : 1
*reuse* : 1
Future.__init__(* : 1
Task.__init__(coro : 1
"asyncio.get_tasks()" : 1
"asyncio.current_task()": : 1
asyncio._register_task(task) : 1
*task* : 4
asyncio._unregister_task(task) : 1
asyncio._enter_task(loop : 1
("coroutine.send()" : 1
"coroutine.throw()") : 1
asyncio._leave_task(loop : 1
"coroutine.send()" : 1
"coroutine.throw()" : 1
Lib/glob.py : 1
concert : 1
(".") : 1
"os.path.expandvars()".) : 1
glob.glob(pathname : 1
recursive=False : 2
include_hidden=False) : 2
"/usr/src/Python-1.5/Makefile") : 1
"../../Tools/*/*.gif") : 1
shell) : 1
"glob.glob" : 2
glob.iglob(pathname : 1
glob.escape(pathname) : 1
("'?'" : 1
"'['") : 1
sharepoints : 1
"escape('//?/c:/Quo : 1
vadis?.txt')" : 1
"'//?/c:/Quo : 1
vadis[?].txt'" : 1
"1.gif" : 1
"2.txt" : 1
"card.gif" : 2
"sub" : 1
"3.txt" : 1
glob.glob('./[0-9].*') : 1
['./1.gif' : 1
'./2.txt'] : 1
glob.glob('*.gif') : 2
['1.gif' : 1
'card.gif'] : 1
glob.glob('?.gif') : 1
['1.gif'] : 1
glob.glob('**/*.txt' : 1
recursive=True) : 2
['2.txt' : 1
'sub/3.txt'] : 1
glob.glob('./**/' : 1
['./' : 1
'./sub/'] : 1
".card.gif": : 1
['card.gif'] : 1
glob.glob('.c*') : 1
['.card.gif'] : 1
Shell-style : 1
Lib/selectors.py : 1
"BaseSelector" : 4
("KqueueSelector" : 1
"EpollSelector"...) : 1
"DefaultSelector" : 2
BaseSelector : 1
SelectSelector : 1
PollSelector : 1
EpollSelector : 1
DevpollSelector : 1
KqueueSelector : 1
+-------------------------+-------------------------------------------------+ : 3
|=========================|=================================================| : 1
"EVENT_READ" : 1
"EVENT_WRITE" : 1
selectors.SelectorKey : 1
"SelectorKey" : 7
Underlying : 1
per-client : 1
selectors.BaseSelector : 1
register(fileobj : 1
unregister(fileobj) : 1
modify(fileobj : 1
"BaseSelector.unregister(fileobj)()" : 1
"BaseSelector.register(fileobj : 1
data)()" : 1
select(timeout=None) : 1
"timeout : 2
events)" : 1
get_key(fileobj) : 1
get_map() : 1
selectors.DefaultSelector : 1
selectors.SelectSelector : 1
"select.select()"-based : 1
selectors.PollSelector : 1
"select.poll()"-based : 1
selectors.EpollSelector : 1
"select.epoll()"-based : 1
selectors.DevpollSelector : 1
"select.devpoll()"-based : 1
"select.devpoll()" : 1
selectors.KqueueSelector : 1
"select.kqueue()"-based : 1
"select.kqueue()" : 1
selectors.DefaultSelector() : 1
accept(sock : 1
mask): : 2
sock.accept() : 1
print('accepted' : 1
conn.setblocking(False) : 1
sel.register(conn : 1
selectors.EVENT_READ : 2
read(conn : 1
conn.recv(1000) : 1
print('echoing' : 1
repr(data) : 1
conn) : 2
Hope : 1
print('closing' : 1
sel.unregister(conn) : 1
sock.bind(('localhost' : 1
1234)) : 1
sock.listen(100) : 1
sock.setblocking(False) : 1
sel.register(sock : 1
accept) : 1
sel.select() : 1
key.data : 1
callback(key.fileobj : 1
Lib/logging/handlers.py : 1
("StreamHandler" : 1
"NullHandler") : 1
*sys.stderr* : 2
logging.StreamHandler(stream=None) : 1
"terminator" : 2
setStream(stream) : 1
**stream** : 1
delay=False : 5
bpo-42378) : 1
'no-op' : 1
logging.NullHandler : 1
watches : 2
*newsyslog* : 1
*logrotate* : 1
changed.) : 1
*ST_INO* : 1
logging.handlers.WatchedFileHandler(filename : 1
reopenIfNeeded() : 1
precursor : 1
"reopenIfNeeded()" : 1
logging.handlers.BaseRotatingHandler(filename : 1
"rotation_filename()" : 2
expected.It's : 1
"backupCount" : 1
initializer) : 1
"getFilesToDelete()" : 1
scheme.) : 1
rotation_filename(default_name) : 1
'namer' : 1
**default_name** : 1
rotate(source : 1
dest) : 1
'rotator' : 1
**source** : 1
'test.log' : 1
**dest** : 1
'test.log.1' : 1
logging.handlers.RotatingFileHandler(filename : 1
maxBytes=0 : 1
backupCount=0 : 2
*backupCount* : 7
*rollover* : 1
predetermined : 1
Rollover : 1
'.1' : 1
'.2' : 1
"app.log.1" : 3
"app.log.2" : 3
"app.log.5" : 1
"app.log.3" : 1
doRollover() : 2
catering : 2
logging.handlers.TimedRotatingFileHandler(filename : 1
when='h' : 1
interval=1 : 1
utc=False : 1
atTime=None : 1
Rotating : 1
+------------------+------------------------------+---------------------------+ : 7
If/how : 1
|==================|==============================|===========================| : 1
"'M'" : 1
"'W0'-'W6'" : 1
(0=Monday) : 1
"'midnight'" : 1
weekday-based : 1
'W0' : 1
'W1' : 1
'W6' : 1
date-and-time : 1
"%Y-%m-%d_%H-%M-%S" : 1
midnight" : 1
weekday" : 1
rollovers : 1
"every : 1
minute" : 1
minute; : 1
*then* : 1
rollover) : 1
getFilesToDelete() : 1
logging.handlers.SocketHandler(host : 1
emit() : 2
re-establishes : 1
handleError() : 1
makeSocket() : 2
("socket.SOCK_STREAM") : 1
makePickle(record) : 1
pickle.dumps(record_attr_dict : 1
datalen : 2
struct.pack('>L' : 1
len(data)) : 1
send(packet) : 1
*packet* : 1
createSocket() : 2
"retryStart" : 1
"retryFactor" : 1
(multiplier : 1
"retryMax" : 1
30.0 : 1
logging.handlers.DatagramHandler(host : 1
("socket.SOCK_DGRAM") : 1
send(s) : 1
"SocketHandler.makePickle()" : 1
logging.handlers.SysLogHandler(address=('localhost' : 1
SYSLOG_UDP_PORT) : 1
facility=LOG_USER : 1
socktype=socket.SOCK_DGRAM) : 1
"('localhost' : 1
514)" : 1
'/dev/log' : 2
rsyslog) : 1
OS/X : 1
'/var/run/syslog' : 1
12.x : 1
(Monterey) : 1
system.See : 1
gh-91070 : 1
3.2.1: : 1
(See: : 2
bpo-12168.) : 1
5424**) : 1
5424) : 1
message.To : 1
(preserving : 1
behaviour) : 1
bpo-12419.) : 1
encodePriority(facility : 1
"LOG_" : 1
"sys/syslog.h" : 1
**Priorities** : 1
+----------------------------+-----------------+ : 9
|============================|=================| : 1
"alert" : 1
LOG_ALERT : 1
"crit" : 1
"critical" : 1
LOG_CRIT : 1
LOG_DEBUG : 1
"emerg" : 1
"panic" : 1
LOG_EMERG : 1
"err" : 1
LOG_ERR : 1
LOG_INFO : 1
"notice" : 1
LOG_NOTICE : 1
LOG_WARNING : 1
**Facilities** : 1
+-----------------+-----------------+ : 21
|=================|=================| : 1
LOG_AUTH : 1
"authpriv" : 1
LOG_AUTHPRIV : 1
"cron" : 1
LOG_CRON : 1
LOG_DAEMON : 1
LOG_FTP : 1
"kern" : 1
LOG_KERN : 1
"lpr" : 1
LOG_LPR : 1
"mail" : 1
LOG_MAIL : 1
LOG_NEWS : 1
LOG_SYSLOG : 1
LOG_USER : 1
"uucp" : 1
LOG_UUCP : 1
"local0" : 1
LOG_LOCAL0 : 1
"local1" : 1
LOG_LOCAL1 : 1
"local2" : 1
LOG_LOCAL2 : 1
"local3" : 1
LOG_LOCAL3 : 1
"local4" : 1
LOG_LOCAL4 : 1
"local5" : 1
LOG_LOCAL5 : 1
"local6" : 1
LOG_LOCAL6 : 1
"local7" : 1
LOG_LOCAL7 : 1
mapPriority(levelname) : 1
'warning' : 1
Hammond's : 1
logging.handlers.NTEventLogHandler(appname : 1
dllname=None : 1
logtype='Application') : 1
*appname* : 1
*dllname* : 1
.dll : 3
"'win32service.pyd'" : 1
slimmer : 1
*logtype* : 1
"'Application'" : 2
"'System'" : 1
"'Security'" : 1
getEventCategory(record) : 1
getEventType(record) : 1
typemap : 1
*typemap* : 1
getMessageID(record) : 1
"win32service.pyd" : 1
logging.handlers.SMTPHandler(mailhost : 1
credentials=None : 2
secure=None : 1
*toaddrs* : 1
*mailhost* : 1
(username : 1
*credentials* : 2
*secure* : 2
single-value : 1
2-value : 1
"smtplib.SMTP.starttls()" : 1
addressees : 1
getSubject(record) : 1
record-dependent : 1
Flushing : 1
"shouldFlush()" : 2
logging.handlers.BufferingHandler(capacity) : 1
*capacity* : 2
zaps : 1
shouldFlush(record) : 2
logging.handlers.MemoryHandler(capacity : 1
flushLevel=ERROR : 1
flushOnClose=True) : 1
*flushLevel* : 2
"setTarget()" : 1
*flushOnClose* : 2
setTarget(target) : 1
logging.handlers.HTTPHandler(host : 1
method='GET' : 1
secure=False : 1
secure=True : 1
mapLogRecord(record) : 1
"record.__dict__" : 1
URL-encoded : 1
"mapLogRecord()" : 2
servicing : 2
"SMTPHandler") : 2
queue-like : 2
"enqueue()" : 1
Enqueues : 2
prepare(record) : 2
Prepares : 1
queuing : 1
unpickleable : 1
enqueue(record) : 1
"put_nowait()"; : 1
hand-in-hand : 1
logging.handlers.QueueListener(queue : 1
respect_handler_level=False) : 1
"dequeue()" : 1
"respect_handler_level" : 2
(compared : 1
dequeue(block) : 1
Dequeues : 1
enqueue_sentinel() : 1
Lib/pdb.py : 1
(conditional) : 1
debugger's : 2
"(Pdb)" : 1
pdb.run('mymodule.test()') : 1
<string>(0)?() : 1
<string>(1)?() : 2
abnormally : 1
breakpoints) : 1
insert: : 1
pdb.set_trace()" : 1
mymodule.test() : 1
"./mymodule.py" : 2
test2() : 1
test2 : 1
print(spam) : 2
pdb.pm() : 2
./mymodule.py(3)test2() : 1
pdb.run(statement : 1
pdb.runeval(expression : 1
"runeval()" : 1
pdb.runcall(function : 1
"runcall()" : 1
pdb.set_trace(* : 1
header=None) : 1
fails) : 1
pdb.post_mortem(traceback=None) : 1
"run*" : 1
"set_trace()" : 1
pdb.Pdb(completekey='tab' : 1
skip=None : 1
nosigint=False : 1
readrc=True) : 1
"cmd.Cmd" : 1
*skip*: : 1
pdb.Pdb(skip=['django.*']).set_trace() : 1
run(statement : 1
runeval(expression : 1
runcall(function : 1
set_trace() : 1
indicated; : 1
"h(elp)" : 1
"he" : 1
"hel" : 1
"Help" : 1
"HELP") : 1
("!") : 1
debugged; : 1
adaptability : 1
";;" : 2
parser.) : 1
intelligence : 1
"';'';'" : 1
"";"";"" : 1
h(elp) : 1
"help : 2
exec" : 1
w(here) : 1
d(own) : 1
[count] : 3
u(p) : 1
b(reak) : 1
[([filename:]lineno : 2
condition]] : 2
tbreak : 1
cl(ear) : 1
[filename:lineno : 1
bpnumber : 3
*filename:lineno* : 1
confirmation) : 1
[bpnumber : 2
(re-)enabled : 1
[condition] : 1
[bpnumber] : 1
*bpnumber* : 2
(com) : 2
some_variable : 1
"end"; : 1
abbreviations) : 1
breakpoint—which : 1
"silent" : 1
s(tep) : 1
n(ext) : 1
unt(il) : 1
[lineno] : 1
r(eturn) : 1
c(ont(inue)) : 1
j(ump) : 1
l(ist) : 1
[first[ : 1
last]] : 1
ll : 1
longlist : 1
a(rgs) : 1
pretty- : 1
undisplay : 1
(global : 1
local) : 1
[command]] : 1
Replaceable : 1
"%2" : 1
"%*" : 1
legally : 1
Aliasing : 1
(usage : 1
"pi : 1
classInst") : 1
%1.__dict__.keys(): : 1
print(f"%1.{k} : 1
{%1.__dict__[k]}") : 1
unalias : 1
(one-line) : 1
list_options; : 1
list_options : 1
['-l'] : 1
q(uit) : 1
Quit : 1
Lib/tkinter/font.py : 1
"Font" : 3
slants : 1
tkinter.font.NORMAL : 1
tkinter.font.BOLD : 1
tkinter.font.ITALIC : 1
tkinter.font.ROMAN : 1
tkinter.font.Font(root=None : 1
font=None : 1
exists=False : 1
*Font* : 1
*font* : 2
(family : 1
*exists* : 1
*weight* : 1
emphasis : 1
(NORMAL : 1
BOLD) : 1
*slant* : 1
ITALIC : 1
*underline* : 1
underlining : 1
underline) : 1
*overstrike* : 1
strikeout : 1
strikeout) : 1
actual(option=None : 1
displayof=None) : 3
cget(option) : 1
config(**options) : 1
measure(text : 1
metrics(*options : 1
font-specific : 1
*ascent* : 1
*descent* : 1
*linespace* : 1
*fixed* : 1
tkinter.font.families(root=None : 1
tkinter.font.names(root=None) : 1
tkinter.font.nametofont(name : 1
root=None) : 1
Lib/re/ : 1
mixed: : 1
vice-versa; : 1
RE) : 1
thing) : 1
*AB* : 1
*pq* : 1
*B*; : 1
Friedl : 2
[Frie09] : 2
"'last'" : 1
RE's : 1
"'in : 1
quotes'".) : 1
Repetition : 1
"(?:a{6})*" : 1
(Dot.) : 1
(Caret.) : 1
"foo$" : 1
interestingly : 1
"foo.$" : 1
"'foo1\nfoo2\n'" : 1
'foo2' : 1
'foo1' : 1
"'foo\n'" : 1
"ab*" : 1
'b's : 1
"ab+" : 1
'b's; : 1
"ab?" : 1
desired; : 1
"<.*>" : 1
"'<a> : 1
<c>'" : 1
"'<a>'" : 2
*non-greedy* : 1
*minimal* : 1
fashion; : 1
*few* : 2
"<.*?>" : 1
"*+" : 1
back-tracking : 1
*possessive* : 1
"a*a" : 1
"'aaaa'" : 2
"'a'"s : 5
backtracked : 2
"a*+a" : 1
"a*+" : 1
"x*+" : 1
"x?+" : 1
"(?>x*)" : 1
"(?>x+)" : 1
"(?>x?)" : 1
"{m}" : 1
"a{6}" : 1
"a{3,5}" : 3
"a{4,}b" : 1
"'aaaab'" : 1
"'aaab'" : 1
6-character : 2
"'aaaaaa'" : 2
"a{3,5}?" : 1
"{m,n}+" : 1
"a{3,5}+aa" : 1
"a{3,5}aa" : 1
"aa" : 1
"x{m,n}+" : 1
"(?>x{m,n})" : 1
(permitting : 1
forth) : 1
"[amk]" : 1
"[0-5][0-9]" : 1
"00" : 1
"59" : 1
"[0-9A-Fa-f]" : 1
"[a\-z]") : 1
"[-a]" : 1
"[a-]") : 1
"[(+*)]" : 1
"[^^]" : 1
"[()[\]{}]" : 1
"[]()[{}]" : 1
"\number" : 2
"\(" : 1
"\)" : 1
"[(]" : 1
"[)]" : 1
"(?aiLmsux)" : 1
"'x'".) : 2
"re.A" : 2
(ASCII-only : 2
"re.I" : 2
(ignore : 2
"re.L" : 2
(locale : 2
"re.M" : 2
(multi- : 1
"re.S" : 2
(dot : 2
"re.U" : 3
(verbose) : 2
Contents.) : 2
"(?aiLmsux-imsx:...)" : 1
(Zero : 1
(multi-line) : 1
"(?a:...)" : 2
"(?u:...)" : 1
"(?L:...)" : 1
"(?>...)" : 2
*atomic : 1
group* : 1
"(?>.*)." : 1
"(?P<quote>['"]).*?(?P=quote)" : 1
+-----------------------------------------+------------------------------------+ : 4
Ways : 1
|=========================================|====================================| : 1
"(?P=quote)" : 1
shown) : 1
"m.group('quote')" : 1
"m.end('quote')" : 1
(etc.) : 1
*repl* : 6
"\g<quote>" : 1
"\g<1>" : 1
("b'\x00'"-"b'\x7f'") : 3
"(?#...)" : 1
comment; : 1
*lookahead : 1
assertion* : 4
"Isaac : 5
(?=Asimov)" : 1
"'Isaac : 2
"'Asimov'" : 2
*negative : 2
(?!Asimov)" : 1
"(?<=...)" : 1
*positive : 1
"(?<=abc)def" : 1
"'abcdef'" : 1
"a|b" : 1
"a{3,4}" : 1
searched; : 2
re.search('(?<=abc)def' : 1
'abcdef') : 1
hyphen: : 1
re.search(r'(?<=-)\w+' : 1
'spam-egg') : 1
'egg' : 1
"(?<!...)" : 1
"(?(id/name)yes-pattern|no-pattern)" : 1
"yes-pattern" : 1
"no-pattern" : 2
"(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)" : 1
"'<user@host.com>'" : 1
"'user@host.com'" : 1
"'<user@host.com'" : 1
"'user@host.com>'" : 1
"(.+) : 1
\1" : 1
"'the : 1
the'" : 1
"'55 : 1
55'" : 1
"'thethe'" : 1
beginning/end : 1
"r'\bfoo\b'" : 1
"'foo.'" : 1
"'(foo)'" : 1
"'bar : 1
baz'" : 1
"'foobar'" : 1
"'foo3'" : 1
"r'py\B'" : 1
"'py3'" : 1
"'py2'" : 1
"'py'" : 1
"'py.'" : 1
"'py!'" : 1
[Nd]) : 1
(bytes) : 3
typography : 1
"str.isalnum()") : 1
\a : 1
\b : 1
\f : 1
\N : 1
\r : 1
\t : 1
\u : 1
\U : 1
\v : 1
\x : 1
\\ : 1
"backspace" : 1
"'\N{name}'" : 1
"'\N{EM : 1
DASH}'") : 1
re.RegexFlag : 1
re.A : 1
"(?a)" : 1
"(?u)") : 1
re.DEBUG : 1
re.I : 1
re.IGNORECASE : 1
"Ü" : 1
"ü") : 1
"(?i)" : 1
re.L : 1
"(?L)" : 1
re.M : 1
re.MULTILINE : 1
newline); : 1
"(?m)" : 1
re.NOFLAG : 1
myfunc(text : 1
flag=re.NOFLAG): : 1
re.match(text : 1
re.S : 1
re.DOTALL : 1
"(?s)" : 1
re.X : 1
"(?:" : 1
"(?P<...>" : 1
"( : 1
re.compile(r"""\d : 1
\d : 1
digits""" : 1
re.X) : 1
re.compile(r"\d+\.\d*") : 1
"(?x)" : 1
re.compile(pattern : 1
expression's : 1
re.compile(pattern) : 1
prog.match(string) : 1
re.match(pattern : 2
re.search(pattern : 2
match()) : 2
re.fullmatch(pattern : 1
re.split(pattern : 1
maxsplit=0 : 1
re.split(r'\W+' : 2
re.split(r'(\W+)' : 2
re.split('[a-f]+' : 1
'0a3B9' : 1
flags=re.IGNORECASE) : 2
['0' : 1
'...words : 1
words...') : 1
re.split(r'\b' : 1
'Words' : 1
'.'] : 1
re.split(r'\W*' : 1
'...words...') : 2
re.split(r'(\W*)' : 1
re.findall(pattern : 1
re.findall(r'(\w+)=(\d+)' : 1
'set : 1
width=20 : 1
height=10') : 1
[('width' : 1
'20') : 1
('height' : 1
'10')] : 1
re.finditer(pattern : 1
re.sub(pattern : 1
repl : 4
count=0 : 2
re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):' : 1
r'static : 1
PyObject*\npy_\1(void)\n{' : 1
'def : 1
myfunc():') : 1
'static : 1
PyObject*\npy_myfunc(void)\n{' : 1
dashrepl(matchobj): : 1
matchobj.group(0) : 1
'-': : 1
re.sub('-{1,2}' : 1
dashrepl : 1
'pro----gram-files') : 1
'pro--gram : 1
files' : 1
re.sub(r'\sAND\s' : 1
'Baked : 2
"sub('x*' : 1
string-type : 1
"\20" : 1
"\g<0>" : 1
re.subn(pattern : 1
"(new_string : 1
number_of_subs_made)" : 1
re.escape(pattern) : 1
print(re.escape('https://www.python.org')) : 1
https://www\.python\.org : 1
legal_chars : 1
print('[%s]+' : 1
re.escape(legal_chars)) : 1
[abcdefghijklmnopqrstuvwxyz0123456789!\#\$%\&'\*\+\-\.\^_`\|\~:]+ : 1
['+' : 1
'**'] : 1
print('|'.join(map(re.escape : 1
sorted(operators : 1
reverse=True)))) : 1
/|\-|\+|\*\*|\* : 1
digits_re : 1
r'\d+' : 1
'/usr/sbin/sendmail : 1
warnings' : 1
print(re.sub(digits_re : 1
digits_re.replace('\\' : 1
r'\\') : 1
sample)) : 1
/usr/sbin/sendmail : 2
\d+ : 2
""`"" : 1
re.purge() : 1
re.error(msg : 1
pattern=None : 1
pos=None) : 1
Pattern.search(string[ : 1
pos[ : 5
endpos]]) : 5
start; : 1
*endpos* : 8
"endpos : 1
"rx.search(string : 1
50)" : 1
"rx.search(string[:50] : 1
re.compile("d") : 1
pattern.search("dog") : 1
match='d'> : 1
pattern.search("dog" : 1
Pattern.match(string[ : 1
*beginning* : 1
re.compile("o") : 1
pattern.match("dog") : 1
"dog" : 3
pattern.match("dog" : 1
span=(1 : 2
match='o'> : 1
Pattern.fullmatch(string[ : 1
re.compile("o[gh]") : 1
pattern.fullmatch("dog") : 1
pattern.fullmatch("ogre") : 1
pattern.fullmatch("doggie" : 1
match='og'> : 1
Pattern.split(string : 1
maxsplit=0) : 1
Pattern.findall(string[ : 1
Pattern.finditer(string[ : 1
Pattern.sub(repl : 1
count=0) : 2
Pattern.subn(repl : 1
Pattern.flags : 1
"UNICODE" : 1
Pattern.groups : 1
Pattern.groupindex : 1
"(?P<id>)" : 1
Pattern.pattern : 1
process(match) : 1
Match.expand(template) : 1
Escapes : 1
("\1" : 1
"\2") : 1
("\g<1>" : 1
"\g<name>") : 1
Match.group([group1 : 1
*group1* : 1
*groupN* : 2
[1..99] : 1
re.match(r"(\w+) : 2
(\w+)" : 2
Newton : 2
physicist") : 2
'Isaac : 2
Newton' : 2
'Isaac' : 3
'Newton' : 3
m.group(1 : 1
('Isaac' : 1
'Newton') : 1
re.match(r"(?P<first_name>\w+) : 3
(?P<last_name>\w+)" : 3
"Malcolm : 2
Reynolds") : 2
m.group('first_name') : 1
'Malcolm' : 3
m.group('last_name') : 1
'Reynolds' : 2
re.match(r"(..)+" : 1
"a1b2c3") : 1
'c3' : 1
Match.__getitem__(g) : 1
"m.group(g)" : 1
m[1] : 1
m[2] : 1
Newton") : 1
m['first_name'] : 1
m['last_name'] : 1
Match.groups(default=None) : 1
re.match(r"(\d+)\.(\d+)" : 1
"24.1632") : 1
('24' : 3
'1632') : 1
re.match(r"(\d+)\.?(\d+)?" : 1
m.groups('0') : 1
Match.groupdict(default=None) : 1
'Reynolds'} : 1
Match.start([group]) : 1
Match.end([group]) : 1
*group*; : 1
"m.group(g)") : 1
m.string[m.start(g):m.end(g)] : 1
"m.start(group)" : 1
"m.end(group)" : 1
re.search('b(c?)' : 1
'cba')" : 1
"m.start(0)" : 1
"m.end(0)" : 1
"m.start(1)" : 1
"m.end(1)" : 1
"m.start(2)" : 1
*remove_this* : 1
"tony@tiremove_thisger.net" : 1
re.search("remove_this" : 1
email[:m.start()] : 1
email[m.end():] : 1
'tony@tiger.net' : 1
Match.span([group]) : 1
"(m.start(group) : 1
m.end(group))" : 1
Match.pos : 1
Match.endpos : 1
Match.lastindex : 1
"(a)b" : 1
"((a)(b))" : 1
"((ab))" : 1
"lastindex : 2
Match.lastgroup : 1
Match.re : 1
Match.string : 1
gracefully: : 1
displaymatch(match): : 1
'<Match: : 1
groups=%r>' : 1
(match.group() : 1
match.groups()) : 1
poker : 1
player's : 1
5-character : 1
ace : 1
re.compile(r"^[a2-9tjqk]{5}$") : 1
displaymatch(valid.match("akt5q")) : 1
"<Match: : 4
'akt5q' : 1
groups=()>" : 2
displaymatch(valid.match("akt5e")) : 1
displaymatch(valid.match("akt")) : 1
displaymatch(valid.match("727ak")) : 1
'727ak' : 1
""727ak"" : 1
such: : 1
re.compile(r".*(.).*\1") : 2
displaymatch(pair.match("717ak")) : 1
7s : 1
'717' : 1
groups=('7',)>" : 1
displaymatch(pair.match("718ak")) : 1
displaymatch(pair.match("354aa")) : 1
aces : 1
'354aa' : 1
groups=('a',)>" : 1
pair.match("717ak").group(1) : 1
re.match() : 1
pair.match("718ak").group(1) : 1
"<pyshell#23>" : 1
re.match(r".*(.).*\1" : 1
"718ak").group(1) : 1
pair.match("354aa").group(1) : 1
"scanf()" : 5
more-or- : 1
+----------------------------------+-----------------------------------------------+ : 10
|==================================|===============================================| : 1
"%5c" : 1
".{5}" : 1
"[-+]?\d+" : 1
"%e" : 1
"%E" : 1
"[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?" : 1
"[-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)" : 1
"[-+]?[0-7]+" : 1
"\S+" : 1
"[-+]?(0[xX])?[\dA-Fa-f]+" : 1
(\S+) : 1
(\d+) : 2
"re.fullmatch()" : 1
re.match("c" : 2
"abcdef") : 5
re.search("c" : 1
span=(2 : 1
match='c'> : 1
re.fullmatch("p.*n" : 1
match='python'> : 1
re.fullmatch("r.*n" : 1
re.search("^c" : 1
re.search("^a" : 1
match='a'> : 1
re.match("X" : 1
"A\nB\nX" : 2
re.MULTILINE) : 2
re.search("^X" : 1
match='X'> : 1
phonebook : 1
"""Ross : 1
McFluff: : 2
834.345.1254 : 2
155 : 2
Elm : 3
Street : 1
Heathmore: : 2
892.345.3428 : 2
436 : 2
Finley : 3
Burger: : 2
925.541.7625 : 2
662 : 2
Dogwood : 4
Way : 1
Heather : 1
Albrecht: : 2
548.326.4584 : 2
919 : 2
Park : 3
Place""" : 1
re.split("\n+" : 1
['Ross : 1
Street' : 1
'Ronald : 1
Avenue' : 1
'Frank : 1
Way' : 1
'Heather : 1
Place'] : 1
telephone : 1
"maxsplit" : 2
[re.split(": : 2
entries] : 2
[['Ross' : 2
'McFluff' : 2
'834.345.1254' : 2
'155 : 1
Street'] : 2
['Ronald' : 2
'Heathmore' : 2
'892.345.3428' : 2
'436 : 1
Avenue'] : 2
['Frank' : 2
'Burger' : 2
'925.541.7625' : 2
'662 : 1
Way'] : 2
['Heather' : 2
'Albrecht' : 2
'548.326.4584' : 2
'919 : 1
Place']] : 2
":?" : 1
house : 1
'155' : 1
'Elm : 1
'436' : 1
'Finley : 1
'662' : 1
'South : 1
'919' : 1
'Park : 1
"munge" : 1
repl(m): : 1
inner_word : 1
list(m.group(2)) : 1
random.shuffle(inner_word) : 1
"".join(inner_word) : 1
m.group(3) : 1
"Professor : 1
Abdolmalek : 1
absences : 1
promptly." : 1
re.sub(r"(\w)(\w+)(\w)" : 2
'Poefsrosr : 1
Aealmlobdk : 1
pslaee : 1
reorpt : 1
abnseces : 1
plmrptoy.' : 1
'Pofsroser : 1
Aodlambelk : 1
plasee : 1
reoprt : 1
yuor : 1
asnebces : 1
potlmrpy.' : 1
adverbs : 2
police." : 2
re.findall(r"\w+ly\b" : 1
['carefully' : 1
'quickly'] : 1
*and : 1
positions* : 1
re.finditer(r"\w+ly\b" : 1
text): : 1
print('%02d-%02d: : 1
(m.start() : 1
m.group(0))) : 1
07-16: : 1
40-47: : 1
("r"text"") : 1
re.match(r"\W(.)\1\W" : 1
ff : 4
match=' : 2
re.match("\\W(.)\\1\\W" : 1
"r"\\"" : 1
""\\\\"" : 1
re.match(r"\\" : 1
r"\\") : 2
match='\\'> : 2
re.match("\\\\" : 1
analyzes : 1
NamedTuple : 1
Token(NamedTuple): : 1
column: : 1
tokenize(code): : 1
{'IF' : 1
'THEN' : 1
'ENDIF' : 1
'FOR' : 1
'NEXT' : 1
'GOSUB' : 1
'RETURN'} : 1
token_specification : 1
('NUMBER' : 1
r'\d+(\.\d*)?') : 1
('ASSIGN' : 1
r':=') : 1
('END' : 1
r';') : 1
('ID' : 1
r'[A-Za-z]+') : 1
('OP' : 1
r'[+\-*/]') : 1
('NEWLINE' : 1
r'\n') : 1
('SKIP' : 1
r'[ : 1
\t]+') : 1
('MISMATCH' : 1
r'.') : 1
tok_regex : 1
'|'.join('(?P<%s>%s)' : 1
token_specification) : 1
line_num : 3
line_start : 3
mo : 1
re.finditer(tok_regex : 1
code): : 1
mo.lastgroup : 1
mo.group() : 1
mo.start() : 1
'NUMBER': : 1
float(value) : 1
int(value) : 1
'ID' : 1
'NEWLINE': : 1
mo.end() : 1
'SKIP': : 1
'MISMATCH': : 1
RuntimeError(f'{value!r} : 1
{line_num}') : 1
Token(kind : 1
THEN : 1
quantity; : 1
0.05; : 1
ENDIF; : 1
tokenize(statements): : 1
Token(type='IF' : 1
value='IF' : 1
line=2 : 3
column=4) : 2
Token(type='ID' : 7
value='quantity' : 2
column=7) : 1
Token(type='THEN' : 1
value='THEN' : 1
column=16) : 1
value='total' : 2
line=3 : 8
column=8) : 2
Token(type='ASSIGN' : 2
value=':=' : 2
column=14) : 1
column=17) : 1
Token(type='OP' : 3
value='+' : 1
column=23) : 2
value='price' : 2
column=25) : 1
value='*' : 2
column=31) : 1
column=33) : 1
Token(type='END' : 3
value=';' : 3
column=41) : 1
value='tax' : 1
line=4 : 6
column=12) : 1
column=15) : 1
column=21) : 1
Token(type='NUMBER' : 1
value=0.05 : 1
column=27) : 1
Token(type='ENDIF' : 1
value='ENDIF' : 1
line=5 : 2
column=9) : 1
ed. : 1
Lib/modulefinder.py : 1
"modulefinder.py" : 1
modulefinder.AddPackagePath(pkg_name : 1
*pkg_name* : 1
modulefinder.ReplacePackage(oldname : 1
newname) : 1
*oldname* : 1
*newname* : 1
modulefinder.ModuleFinder(path=None : 1
excludes=[] : 1
replace_paths=[]) : 1
"run_script()" : 1
"report()" : 1
*excludes* : 1
*replace_paths* : 1
"(oldpath : 1
newpath)" : 1
run_script(pathname) : 1
ModuleFinder : 2
(bacon.py): : 1
baconhameggs : 2
guido.python.ham : 2
bacon.py: : 1
ModuleFinder() : 1
finder.run_script('bacon.py') : 1
print('Loaded : 1
modules:') : 1
finder.modules.items(): : 1
print(','.join(list(mod.globalnames.keys())[:3])) : 1
print('-'*50) : 1
print('Modules : 1
imported:') : 1
print('\n'.join(finder.badmodules.keys())) : 1
architecture): : 1
Loaded : 1
_types: : 1
copyreg: : 1
_inverted_registry,_slotnames,__all__ : 1
re._compiler: : 1
isstring,_sre,_optimize_unicode : 1
_sre: : 1
re._constants: : 1
REPEAT_ONE,makedict,AT_END_LINE : 1
sys: : 1
re: : 1
__module__,finditer,_expand : 1
itertools: : 1
__main__: : 1
re,itertools,baconhameggs : 1
re._parser: : 1
_PATTERNENDERS,SRE_FLAG_UNICODE : 1
__module__,IntType,TypeType : 1
@functools.cache(user_function) : 1
"memoize" : 1
"lru_cache(maxsize=None)" : 1
evict : 1
@cache : 2
factorial(n-1) : 1
factorial(10) : 1
3628800 : 1
factorial(12) : 1
479001600 : 1
@functools.cached_property(func) : 1
DataSet: : 2
self._data : 2
tuple(sequence_of_numbers) : 1
stdev(self): : 2
statistics.stdev(self._data) : 2
"cached_property()" : 2
interferes : 1
"cache()": : 1
functools.cmp_to_key(func) : 1
"itertools.groupby()") : 1
@functools.lru_cache(user_function) : 1
@functools.lru_cache(maxsize=128 : 1
typed=False) : 1
"f(a=1 : 1
b=2)" : 1
"f(b=2 : 1
a=1)" : 1
*user_function* : 2
128: : 1
count_vowels(sentence): : 1
sum(sentence.count(vowel) : 1
vowel : 1
'AEIOUaeiou') : 1
*typed* : 5
false.) : 1
specificity : 1
"Decimal(42)" : 1
"Fraction(42)" : 1
"('answer' : 2
Decimal(42))" : 1
Fraction(42))" : 1
"cache_parameters()" : 2
effectiveness : 1
"cache_info()" : 1
*hits* : 1
*misses* : 1
*currsize* : 1
"cache_clear()" : 1
rewrapping : 1
predictors : 1
cache's : 1
impure : 1
@lru_cache(maxsize=32) : 1
get_pep(num): : 1
Proposal' : 1
'https://peps.python.org/pep-%04d/' : 1
urllib.request.urlopen(resource) : 1
s.read() : 1
urllib.error.HTTPError: : 1
'Not : 1
290 : 1
320 : 3
218 : 1
279 : 1
289 : 1
9991: : 1
get_pep(n) : 1
len(pep)) : 1
get_pep.cache_info() : 1
CacheInfo(hits=3 : 1
misses=8 : 1
maxsize=32 : 1
currsize=8) : 1
technique: : 1
@lru_cache(maxsize=None) : 1
fib(n-1) : 1
fib(n-2) : 1
[fib(n) : 1
range(16)] : 1
610] : 1
fib.cache_info() : 1
CacheInfo(hits=28 : 1
misses=16 : 1
currsize=16) : 1
@functools.total_ordering : 1
_is_valid_operand(self : 1
(hasattr(other : 1
"lastname") : 1
hasattr(other : 1
"firstname")) : 1
self._is_valid_operand(other): : 2
superclasses* : 1
functools.partial(func : 1
**keywords) : 2
partial(func : 1
newfunc(*fargs : 1
**fkeywords): : 1
newkeywords : 1
{**keywords : 1
**fkeywords} : 1
*fargs : 1
**newkeywords) : 1
newfunc.func : 1
newfunc.args : 1
newfunc.keywords : 1
"freezes" : 1
basetwo : 1
partial(int : 1
base=2) : 1
basetwo.__doc__ : 1
int.' : 1
basetwo('10010') : 1
functools.partialmethod(func : 1
"partialmethod" : 2
"partialmethod") : 1
non-descriptor : 1
self._alive : 3
alive(self): : 1
set_state(self : 1
bool(state) : 1
set_alive : 1
partialmethod(set_state : 2
set_dead : 1
Cell() : 1
c.alive : 2
c.set_alive() : 1
functools.reduce(function : 1
"reduce(lambda : 1
5])" : 1
"((((1+2)+3)+4)+5)" : 1
reduce(function : 1
initializer=None): : 1
function(value : 1
@functools.singledispatch : 1
*single-dispatch* : 2
"@singledispatch" : 3
@fun.register(complex) : 1
_(arg : 1
print("Better : 1
complicated." : 1
print(arg.real : 1
arg.imag) : 1
*lambdas* : 1
nothing(arg : 1
print("Nothing.") : 1
fun.register(type(None) : 1
@fun.register(float) : 1
@fun.register(Decimal) : 1
fun_num(arg : 1
print("Half : 1
number:" : 1
fun_num : 3
fun("Hello : 1
world.") : 1
fun("test." : 1
verbose=True) : 3
fun(42 : 1
Strength : 1
eh : 1
fun(['spam' : 1
fun(None) : 1
fun(1.23) : 1
0.615 : 1
print("Keys : 1
Values") : 1
arg.items(): : 1
fun({"a": : 1
"b"}) : 1
"dispatch()" : 1
fun.dispatch(float) : 1
0x1035a2840> : 2
fun.dispatch(dict) : 1
0x103fe0000> : 2
"registry" : 1
fun.registry.keys() : 1
dict_keys([<class : 1
'object'> : 1
'decimal.Decimal'> : 1
'float'>]) : 1
fun.registry[float] : 1
fun.registry[object] : 1
functools.singledispatchmethod(func) : 1
"@singledispatchmethod" : 3
non-*self* : 1
non-*cls* : 1
Negator: : 2
neg(self : 1
NotImplementedError("Cannot : 2
a") : 2
@neg.register : 4
-arg : 2
bool): : 2
"dispatcher.register" : 1
"singledispatchmethod" : 1
*outer : 1
most* : 1
"Negator" : 1
"neg" : 1
neg(cls : 1
_(cls : 2
assigned=WRAPPER_ASSIGNMENTS : 2
updated=WRAPPER_UPDATES) : 2
*wrapped* : 1
"WRAPPER_ASSIGNMENTS" : 1
"WRAPPER_UPDATES" : 1
"lru_cache()") : 1
*assigned* : 1
*updated* : 2
bpo-17482) : 1
@functools.wraps(wrapped : 1
"partial(update_wrapper : 1
wrapped=wrapped : 1
assigned=assigned : 1
updated=updated)" : 1
@wraps(f) : 1
print('Calling : 1
@my_decorator : 1
example(): : 1
"""Docstring""" : 1
print('Called : 1
example() : 1
example.__name__ : 1
example.__doc__ : 1
'Docstring' : 1
"'wrapper'" : 1
"example()" : 1
partial.func : 1
partial.args : 1
neglects : 1
winreg.CloseKey(hkey) : 1
*hkey* : 3
"hkey.Close()") : 1
winreg.ConnectRegistry(computer_name : 1
*computer_name* : 1
"r"\\computername"" : 1
"winreg.ConnectRegistry" : 1
winreg.CreateKey(key : 1
sub_key) : 3
*sub_key* : 11
"winreg.CreateKey" : 2
"winreg.OpenKey/result" : 3
winreg.CreateKeyEx(key : 1
sub_key : 7
reserved=0 : 3
access=KEY_WRITE) : 1
*reserved* : 4
"KEY_WRITE" : 1
winreg.DeleteKey(key : 1
subkey : 11
*This : 2
subkeys.* : 2
"winreg.DeleteKey" : 2
winreg.DeleteKeyEx(key : 1
access=KEY_WOW64_64KEY : 1
reserved=0) : 1
"KEY_WOW64_64KEY" : 1
WOW64 : 1
winreg.DeleteValue(key : 1
"winreg.DeleteValue" : 1
winreg.EnumKey(key : 1
Enumerates : 2
"winreg.EnumKey" : 1
winreg.EnumValue(key : 1
+---------+----------------------------------------------+ : 4
|=========|==============================================| : 1
"SetValueEx()") : 2
"winreg.EnumValue" : 1
winreg.ExpandEnvironmentStrings(str) : 1
"REG_EXPAND_SZ": : 1
ExpandEnvironmentStrings('%windir%') : 1
'C:\\Windows' : 1
"winreg.ExpandEnvironmentStrings" : 1
winreg.FlushKey(key) : 1
"FlushKey()" : 4
flusher : 1
"CloseKey()" : 2
winreg.LoadKey(key : 1
file_name) : 2
"ConnectRegistry()" : 2
"HKEY_USERS" : 1
*file_name* : 4
"SaveKey()" : 1
(FAT) : 2
"LoadKey()" : 2
"SE_RESTORE_PRIVILEGE" : 1
RegLoadKey : 1
"winreg.LoadKey" : 1
winreg.OpenKey(key : 1
access=KEY_READ) : 2
winreg.OpenKeyEx(key : 1
"KEY_READ" : 2
"winreg.OpenKey" : 1
winreg.QueryInfoKey(key) : 1
+---------+-----------------------------------------------+ : 4
|=========|===============================================| : 1
sub : 1
100's : 1
1601 : 1
"winreg.QueryInfoKey" : 1
winreg.QueryValue(key : 1
"SetValue()" : 1
"QueryValueEx()" : 1
"winreg.QueryValue" : 2
winreg.QueryValueEx(key : 1
value_name) : 1
*value_name* : 2
+---------+-------------------------------------------+ : 3
|=========|===========================================| : 1
winreg.SaveKey(key : 1
possess : 1
"SeBackupPrivilege" : 1
*security_attributes* : 1
"winreg.SaveKey" : 1
winreg.SetValue(key : 1
"REG_SZ" : 1
"SetValueEx()" : 1
SetValue : 1
"KEY_SET_VALUE" : 4
"winreg.SetValue" : 2
winreg.SetValueEx(key : 1
value_name : 1
"CreateKey()" : 1
"OpenKey()" : 1
winreg.DisableReflectionKey(key) : 1
"winreg.DisableReflectionKey" : 1
winreg.EnableReflectionKey(key) : 1
Restoring : 1
"winreg.EnableReflectionKey" : 1
winreg.QueryReflectionKey(key) : 1
"winreg.QueryReflectionKey" : 1
winreg.HKEY_CLASSES_ROOT : 1
winreg.HKEY_CURRENT_USER : 1
printers : 1
winreg.HKEY_LOCAL_MACHINE : 1
bus : 1
winreg.HKEY_USERS : 1
winreg.HKEY_PERFORMANCE_DATA : 1
registry; : 1
winreg.HKEY_CURRENT_CONFIG : 1
winreg.HKEY_DYN_DATA : 1
winreg.KEY_ALL_ACCESS : 1
STANDARD_RIGHTS_REQUIRED : 1
"KEY_QUERY_VALUE" : 2
"KEY_CREATE_SUB_KEY" : 2
"KEY_ENUMERATE_SUB_KEYS" : 2
"KEY_NOTIFY" : 2
"KEY_CREATE_LINK" : 1
winreg.KEY_WRITE : 1
STANDARD_RIGHTS_WRITE : 1
winreg.KEY_READ : 1
STANDARD_RIGHTS_READ : 1
winreg.KEY_EXECUTE : 1
winreg.KEY_QUERY_VALUE : 1
winreg.KEY_SET_VALUE : 1
winreg.KEY_CREATE_SUB_KEY : 1
winreg.KEY_ENUMERATE_SUB_KEYS : 1
winreg.KEY_NOTIFY : 1
winreg.KEY_CREATE_LINK : 1
winreg.KEY_WOW64_64KEY : 1
winreg.KEY_WOW64_32KEY : 1
winreg.REG_BINARY : 1
winreg.REG_DWORD : 1
winreg.REG_DWORD_LITTLE_ENDIAN : 1
"REG_DWORD" : 1
winreg.REG_DWORD_BIG_ENDIAN : 1
winreg.REG_EXPAND_SZ : 1
Null-terminated : 1
("%PATH%") : 1
winreg.REG_LINK : 1
winreg.REG_MULTI_SZ : 1
automatically.) : 1
winreg.REG_NONE : 1
winreg.REG_QWORD : 1
winreg.REG_QWORD_LITTLE_ENDIAN : 1
winreg.REG_RESOURCE_LIST : 1
device-driver : 1
winreg.REG_FULL_RESOURCE_DESCRIPTOR : 1
winreg.REG_RESOURCE_REQUIREMENTS_LIST : 1
winreg.REG_SZ : 1
HKEY : 2
"Close()" : 1
print("Yes") : 1
"Yes" : 1
detached) : 1
"Detach()" : 1
PyHKEY.Close() : 1
PyHKEY.Detach() : 1
Detaches : 1
"winreg.PyHKEY.Detach" : 1
PyHKEY.__enter__() : 1
PyHKEY.__exit__(*exc_info) : 1
OpenKey(HKEY_LOCAL_MACHINE : 1
Lib/tkinter/messagebox.py : 1
No) : 1
tkinter.messagebox.Message(master=None : 1
**Information : 1
box** : 1
tkinter.messagebox.showinfo(title=None : 1
**Warning : 1
boxes** : 2
tkinter.messagebox.showwarning(title=None : 1
tkinter.messagebox.showerror(title=None : 1
**Question : 1
tkinter.messagebox.askquestion(title=None : 1
tkinter.messagebox.askokcancel(title=None : 1
tkinter.messagebox.askretrycancel(title=None : 1
tkinter.messagebox.askyesno(title=None : 1
tkinter.messagebox.askyesnocancel(title=None : 1
Lib/xmlrpc/server.py : 1
"CGIXMLRPCRequestHandler" : 3
xmlrpc.server.SimpleXMLRPCServer(addr : 1
requestHandler=SimpleXMLRPCRequestHandler : 1
logRequests=True : 2
bind_and_activate=True : 2
*requestHandler* : 3
*logRequests* : 3
logged; : 1
*allow_reuse_address* : 1
date/times : 2
xmlrpc.server.CGIXMLRPCRequestHandler(allow_none=False : 1
xmlrpc.server.SimpleXMLRPCRequestHandler : 1
SimpleXMLRPCServer.register_function(function=None : 1
"function.__name__" : 4
"register_function()" : 5
SimpleXMLRPCServer.register_instance(instance : 1
allow_dotted_names=False) : 1
"_dispatch()" : 6
_dispatch(self : 1
params)" : 1
"func(*params)" : 1
*allow_dotted_names* : 3
intruders : 4
SimpleXMLRPCServer.register_introspection_functions() : 1
"system.listMethods" : 2
"system.methodHelp" : 2
"system.methodSignature" : 2
SimpleXMLRPCServer.register_multicall_functions() : 1
system.multicall : 1
SimpleXMLRPCRequestHandler.rpc_paths : 1
page" : 1
"('/' : 1
'/RPC2')" : 1
RequestHandler(SimpleXMLRPCRequestHandler): : 2
rpc_paths : 2
('/RPC2',) : 2
SimpleXMLRPCServer(('localhost' : 2
requestHandler=RequestHandler) : 2
server.register_introspection_functions() : 2
pow() : 2
pow.__name__ : 2
server.register_function(pow) : 3
adder_function(x : 2
server.register_function(adder_function : 1
'mul') : 1
MyFuncs: : 2
server.register_instance(MyFuncs()) : 1
xmlrpc.client.ServerProxy('http://localhost:8000') : 1
print(s.pow(2,3)) : 1
2**3 : 1
print(s.add(2,3)) : 1
print(s.mul(5,2)) : 1
5*2 : 1
print(s.system.listMethods()) : 1
register_function : 1
@server.register_function(name='add') : 1
function.__name__ : 1
@server.register_function : 1
"Lib/xmlrpc/server.py" : 1
ExampleService: : 1
getData(self): : 1
'42' : 1
currentTime: : 1
getCurrentTime(): : 1
server.register_function(lambda : 1
server.register_instance(ExampleService() : 1
allow_dotted_names=True) : 1
print('Serving : 1
8000') : 1
print("\nKeyboard : 1
exiting.") : 1
sys.exit(0) : 1
ExampleService : 1
"Lib/xmlrpc/client.py": : 1
print(server.currentTime.getCurrentTime()) : 1
MultiCall(server) : 1
multi.getData() : 1
multi.pow(2,9) : 1
multi.add(1,2) : 1
multi(): : 1
print(response) : 1
CGIXMLRPCRequestHandler.register_function(function=None : 1
CGIXMLRPCRequestHandler.register_instance(instance) : 1
CGIXMLRPCRequestHandler.register_introspection_functions() : 1
CGIXMLRPCRequestHandler.register_multicall_functions() : 1
CGIXMLRPCRequestHandler.handle_request(request_text=None) : 1
*request_text* : 1
CGIXMLRPCRequestHandler() : 1
handler.register_function(pow) : 1
handler.register_function(lambda : 1
handler.register_introspection_functions() : 1
handler.register_instance(MyFuncs()) : 1
handler.handle_request() : 1
"DocCGIXMLRPCRequestHandler" : 2
xmlrpc.server.DocXMLRPCServer(addr : 1
requestHandler=DocXMLRPCRequestHandler : 1
use_builtin_types=True) : 1
"SimpleXMLRPCServer"; : 1
"DocXMLRPCRequestHandler" : 1
xmlrpc.server.DocCGIXMLRPCRequestHandler : 1
xmlrpc.server.DocXMLRPCRequestHandler : 1
pydoc-style : 2
DocXMLRPCServer.set_server_title(server_title) : 1
DocXMLRPCServer.set_server_name(server_name) : 1
DocXMLRPCServer.set_server_documentation(server_documentation) : 1
DocCGIXMLRPCRequestHandler.set_server_title(server_title) : 1
DocCGIXMLRPCRequestHandler.set_server_name(server_name) : 1
DocCGIXMLRPCRequestHandler.set_server_documentation(server_documentation) : 1
